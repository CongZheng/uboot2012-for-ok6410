
/work/system/uboot/u-boot:     file format elf32-littlearm

Disassembly of section .text:

c7e00000 <_start>:
 *
 *************************************************************************
 */

.globl _start
_start: b	reset
c7e00000:	ea000014 	b	c7e00058 <reset>
#ifndef CONFIG_NAND_SPL
	ldr	pc, _undefined_instruction
c7e00004:	e59ff014 	ldr	pc, [pc, #20]	; c7e00020 <_undefined_instruction>
	ldr	pc, _software_interrupt
c7e00008:	e59ff014 	ldr	pc, [pc, #20]	; c7e00024 <_software_interrupt>
	ldr	pc, _prefetch_abort
c7e0000c:	e59ff014 	ldr	pc, [pc, #20]	; c7e00028 <_prefetch_abort>
	ldr	pc, _data_abort
c7e00010:	e59ff014 	ldr	pc, [pc, #20]	; c7e0002c <_data_abort>
	ldr	pc, _not_used
c7e00014:	e59ff014 	ldr	pc, [pc, #20]	; c7e00030 <_not_used>
	ldr	pc, _irq
c7e00018:	e59ff014 	ldr	pc, [pc, #20]	; c7e00034 <_irq>
	ldr	pc, _fiq
c7e0001c:	e59ff014 	ldr	pc, [pc, #20]	; c7e00038 <_fiq>

c7e00020 <_undefined_instruction>:
c7e00020:	c7e002c0 	.word	0xc7e002c0

c7e00024 <_software_interrupt>:
c7e00024:	c7e00320 	.word	0xc7e00320

c7e00028 <_prefetch_abort>:
c7e00028:	c7e00380 	.word	0xc7e00380

c7e0002c <_data_abort>:
c7e0002c:	c7e003e0 	.word	0xc7e003e0

c7e00030 <_not_used>:
c7e00030:	c7e00440 	.word	0xc7e00440

c7e00034 <_irq>:
c7e00034:	c7e004a0 	.word	0xc7e004a0

c7e00038 <_fiq>:
c7e00038:	c7e00500 	.word	0xc7e00500

c7e0003c <_pad>:
c7e0003c:	12345678 	.word	0x12345678

c7e00040 <_TEXT_BASE>:
c7e00040:	c7e00000 	.word	0xc7e00000

c7e00044 <_TEXT_PHY_BASE>:
c7e00044:	57e00000 	.word	0x57e00000

c7e00048 <_bss_start_ofs>:
c7e00048:	00040000 	.word	0x00040000

c7e0004c <_bss_end_ofs>:
c7e0004c:	000752c4 	.word	0x000752c4

c7e00050 <_end_ofs>:
c7e00050:	00045a78 	.word	0x00045a78

c7e00054 <IRQ_STACK_START_IN>:
c7e00054:	0badc0de 	.word	0x0badc0de

c7e00058 <reset>:
 * the actual reset code
 */
#include <asm/arch/s3c6410.h>
reset:
#ifndef CONFIG_NAND_SPL
ldr	r0,=ELFIN_UART_BASE
c7e00058:	e59f04e8 	ldr	r0, [pc, #1256]	; c7e00548 <fiq+0x48>
ldr	r1,='k'
c7e0005c:	e3a0106b 	mov	r1, #107	; 0x6b
	str	r1,[r0,#UTXH_OFFSET]
c7e00060:	e5801020 	str	r1, [r0, #32]
#endif
	/*
	 * set the cpu to SVC32 mode
	 */
	mrs	r0, cpsr
c7e00064:	e10f0000 	mrs	r0, CPSR
	bic	r0, r0, #0x3f
c7e00068:	e3c0003f 	bic	r0, r0, #63	; 0x3f
	orr	r0, r0, #0xd3
c7e0006c:	e38000d3 	orr	r0, r0, #211	; 0xd3
	msr	cpsr, r0
c7e00070:	e129f000 	msr	CPSR_fc, r0

c7e00074 <cpu_init_crit>:
	 */
#ifndef CONFIG_NAND_SPL
	/*
	 * flush v4 I/D caches
	 */
	mov	r0, #0
c7e00074:	e3a00000 	mov	r0, #0	; 0x0
	mcr	p15, 0, r0, c7, c7, 0	/* flush v3/v4 cache */
c7e00078:	ee070f17 	mcr	15, 0, r0, cr7, cr7, {0}
	mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */
c7e0007c:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
ldr	r0,=ELFIN_UART_BASE
c7e00080:	e59f04c0 	ldr	r0, [pc, #1216]	; c7e00548 <fiq+0x48>
ldr	r1,='0'
c7e00084:	e3a01030 	mov	r1, #48	; 0x30
	str	r1,[r0,#UTXH_OFFSET]
c7e00088:	e5801020 	str	r1, [r0, #32]
	/*
	 * disable MMU stuff and caches
	 */
	mrc	p15, 0, r0, c1, c0, 0
c7e0008c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x00002300	@ clear bits 13, 9:8 (--V- --RS)
c7e00090:	e3c00c23 	bic	r0, r0, #8960	; 0x2300
	bic	r0, r0, #0x00000087	@ clear bits 7, 2:0 (B--- -CAM)
c7e00094:	e3c00087 	bic	r0, r0, #135	; 0x87
	orr	r0, r0, #0x00000002	@ set bit 2 (A) Align
c7e00098:	e3800002 	orr	r0, r0, #2	; 0x2
	orr	r0, r0, #0x00001000	@ set bit 12 (I) I-Cache
c7e0009c:	e3800a01 	orr	r0, r0, #4096	; 0x1000
ldr	r0,=ELFIN_UART_BASE
c7e000a0:	e59f04a0 	ldr	r0, [pc, #1184]	; c7e00548 <fiq+0x48>
ldr	r1,='1'
c7e000a4:	e3a01031 	mov	r1, #49	; 0x31
	str	r1,[r0,#UTXH_OFFSET]
c7e000a8:	e5801020 	str	r1, [r0, #32]

	mcr	p15, 0, r0, c1, c0, 0
c7e000ac:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

ldr	r0,=ELFIN_UART_BASE
c7e000b0:	e59f0490 	ldr	r0, [pc, #1168]	; c7e00548 <fiq+0x48>
ldr	r1,='2'
c7e000b4:	e3a01032 	mov	r1, #50	; 0x32
	str	r1,[r0,#UTXH_OFFSET]
c7e000b8:	e5801020 	str	r1, [r0, #32]
#endif
#endif

#ifdef CONFIG_PERIPORT_REMAP
	/* Peri port setup */
	ldr	r0, =CONFIG_PERIPORT_BASE
c7e000bc:	e3a00207 	mov	r0, #1879048192	; 0x70000000
	orr	r0, r0, #CONFIG_PERIPORT_SIZE
c7e000c0:	e3800013 	orr	r0, r0, #19	; 0x13
	mcr	p15,0,r0,c15,c2,4
c7e000c4:	ee0f0f92 	mcr	15, 0, r0, cr15, cr2, {4}
#endif

	/*
	 * Go setup Memory and board specific bits prior to relocation.
	 */
	bl	lowlevel_init		/* go setup pll,mux,memory */
c7e000c8:	eb00a83e 	bl	c7e2a1c8 <lowlevel_init>

c7e000cc <call_board_init_f>:
	bl	movi_bl2_copy
#endif
#endif
/* Set stackpointer in internal RAM to call board_init_f */
call_board_init_f:
	ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
c7e000cc:	e59fd478 	ldr	sp, [pc, #1144]	; c7e0054c <fiq+0x4c>
	bic	sp, sp, #7 /* 8-byte alignment for ABI compliance */
c7e000d0:	e3cdd007 	bic	sp, sp, #7	; 0x7
	ldr	r0,=0x00000000
c7e000d4:	e3a00000 	mov	r0, #0	; 0x0
	bl	board_init_f
c7e000d8:	eb0002e6 	bl	c7e00c78 <board_init_f>

c7e000dc <relocate_code>:
 * after relocating the monitor code.
 *
 */
	.globl	relocate_code
relocate_code:
ldr	r0,=ELFIN_UART_BASE
c7e000dc:	e59f0464 	ldr	r0, [pc, #1124]	; c7e00548 <fiq+0x48>
ldr	r1,='3'
c7e000e0:	e3a01033 	mov	r1, #51	; 0x33
	str	r1,[r0,#UTXH_OFFSET]
c7e000e4:	e5801020 	str	r1, [r0, #32]
	mov	r4, r0	/* save addr_sp */
c7e000e8:	e1a04000 	mov	r4, r0
	mov	r5, r1	/* save addr of gd */
c7e000ec:	e1a05001 	mov	r5, r1
	mov	r6, r2	/* save addr of destination */
c7e000f0:	e1a06002 	mov	r6, r2

c7e000f4 <stack_setup>:

stack_setup:

	adr	r0, _start
c7e000f4:	e24f00fc 	sub	r0, pc, #252	; 0xfc
	cmp	r0, r6
c7e000f8:	e1500006 	cmp	r0, r6
	moveq	r9, #0		/* no relocation. relocation offset(r9) = 0 */
c7e000fc:	03a09000 	moveq	r9, #0	; 0x0
	beq	clear_bss		/* skip relocation */
c7e00100:	0a000042 	beq	c7e00210 <clear_bss>
	mov	sp, r4			/* Set up the stack*/
c7e00104:	e1a0d004 	mov	sp, r4
	mov	r1, r6			/* r1 <- scratch for copy_loop */
c7e00108:	e1a01006 	mov	r1, r6
	ldr	r3, _bss_start_ofs
c7e0010c:	e51f30cc 	ldr	r3, [pc, #-204]	; c7e00048 <_bss_start_ofs>
	add	r2, r0, r3		/* r2 <- source end address	    */
c7e00110:	e0802003 	add	r2, r0, r3

c7e00114 <copy_loop>:

copy_loop:
	ldmia	r0!, {r9-r10}		/* copy from source address [r0]    */
c7e00114:	e8b00600 	ldm	r0!, {r9, sl}
	stmia	r1!, {r9-r10}		/* copy to   target address [r1]    */
c7e00118:	e8a10600 	stmia	r1!, {r9, sl}
	cmp	r0, r2			/* until source end address [r2]    */
c7e0011c:	e1500002 	cmp	r0, r2
	blo	copy_loop
c7e00120:	3afffffb 	bcc	c7e00114 <copy_loop>

#ifndef CONFIG_SPL_BUILD
	/*
	 * fix .rel.dyn relocations
	 */
	ldr	r0, _TEXT_BASE		/* r0 <- Text base */
c7e00124:	e51f00ec 	ldr	r0, [pc, #-236]	; c7e00040 <_TEXT_BASE>
	sub	r9, r6, r0		/* r9 <- relocation offset */
c7e00128:	e0469000 	sub	r9, r6, r0
	ldr	r10, _dynsym_start_ofs	/* r10 <- sym table ofs */
c7e0012c:	e59fa138 	ldr	sl, [pc, #312]	; c7e0026c <_dynsym_start_ofs>
	add	r10, r10, r0		/* r10 <- sym table in FLASH */
c7e00130:	e08aa000 	add	sl, sl, r0
	ldr	r2, _rel_dyn_start_ofs	/* r2 <- rel dyn start ofs */
c7e00134:	e59f2128 	ldr	r2, [pc, #296]	; c7e00264 <_rel_dyn_start_ofs>
	add	r2, r2, r0		/* r2 <- rel dyn start in FLASH */
c7e00138:	e0822000 	add	r2, r2, r0
	ldr	r3, _rel_dyn_end_ofs	/* r3 <- rel dyn end ofs */
c7e0013c:	e59f3124 	ldr	r3, [pc, #292]	; c7e00268 <_rel_dyn_end_ofs>
	add	r3, r3, r0		/* r3 <- rel dyn end in FLASH */
c7e00140:	e0833000 	add	r3, r3, r0

c7e00144 <fixloop>:
fixloop:
	ldr	r0, [r2]		/* r0 <- location to fix up, IN FLASH! */
c7e00144:	e5920000 	ldr	r0, [r2]
	add	r0, r0, r9		/* r0 <- location to fix up in RAM */
c7e00148:	e0800009 	add	r0, r0, r9
	ldr	r1, [r2, #4]
c7e0014c:	e5921004 	ldr	r1, [r2, #4]
	and	r7, r1, #0xff
c7e00150:	e20170ff 	and	r7, r1, #255	; 0xff
	cmp	r7, #23			/* relative fixup? */
c7e00154:	e3570017 	cmp	r7, #23	; 0x17
	beq	fixrel
c7e00158:	0a000007 	beq	c7e0017c <fixrel>
	cmp	r7, #2			/* absolute fixup? */
c7e0015c:	e3570002 	cmp	r7, #2	; 0x2
	beq	fixabs
c7e00160:	0a000000 	beq	c7e00168 <fixabs>
	/* ignore unknown type of fixup */
	b	fixnext
c7e00164:	ea000006 	b	c7e00184 <fixnext>

c7e00168 <fixabs>:
fixabs:
	/* absolute fix: set location to (offset) symbol value */
	mov	r1, r1, LSR #4		/* r1 <- symbol index in .dynsym */
c7e00168:	e1a01221 	lsr	r1, r1, #4
	add	r1, r10, r1		/* r1 <- address of symbol in table */
c7e0016c:	e08a1001 	add	r1, sl, r1
	ldr	r1, [r1, #4]		/* r1 <- symbol value */
c7e00170:	e5911004 	ldr	r1, [r1, #4]
	add	r1, r1, r9		/* r1 <- relocated sym addr */
c7e00174:	e0811009 	add	r1, r1, r9
	b	fixnext
c7e00178:	ea000001 	b	c7e00184 <fixnext>

c7e0017c <fixrel>:
fixrel:
	/* relative fix: increase location by offset */
	ldr	r1, [r0]
c7e0017c:	e5901000 	ldr	r1, [r0]
	add	r1, r1, r9
c7e00180:	e0811009 	add	r1, r1, r9

c7e00184 <fixnext>:
fixnext:
	str	r1, [r0]
c7e00184:	e5801000 	str	r1, [r0]
	add	r2, r2, #8		/* each rel.dyn entry is 8 bytes */
c7e00188:	e2822008 	add	r2, r2, #8	; 0x8
	cmp	r2, r3
c7e0018c:	e1520003 	cmp	r2, r3
	blo	fixloop
c7e00190:	3affffeb 	bcc	c7e00144 <fixloop>

c7e00194 <enable_mmu>:

#ifdef CONFIG_ENABLE_MMU
enable_mmu:
#include <asm/arch/s3c6410.h>
	/* LED test */
	ldr	r0, =ELFIN_GPIO_BASE
c7e00194:	e59f03b4 	ldr	r0, [pc, #948]	; c7e00550 <fiq+0x50>
	ldr	r1, =0x000c
c7e00198:	e3a0100c 	mov	r1, #12	; 0xc
	str	r1, [r0, #GPMDAT_OFFSET]
c7e0019c:	e5801824 	str	r1, [r0, #2084]
	/* enable domain access */
	ldr	r5, =0x0000ffff
c7e001a0:	e59f53ac 	ldr	r5, [pc, #940]	; c7e00554 <fiq+0x54>
	mcr	p15, 0, r5, c3, c0, 0	/* load domain access register */
c7e001a4:	ee035f10 	mcr	15, 0, r5, cr3, cr0, {0}

	/* Set the TTB register */
	ldr	r0, _mmu_table_base
c7e001a8:	e59f00c0 	ldr	r0, [pc, #192]	; c7e00270 <_mmu_table_base>
	ldr	r1, =CONFIG_SYS_PHY_UBOOT_BASE
c7e001ac:	e59f13a4 	ldr	r1, [pc, #932]	; c7e00558 <fiq+0x58>
	ldr	r2, =0xfff00000
c7e001b0:	e59f23a4 	ldr	r2, [pc, #932]	; c7e0055c <fiq+0x5c>
	bic	r0, r0, r2
c7e001b4:	e1c00002 	bic	r0, r0, r2
	orr	r1, r0, r1
c7e001b8:	e1801001 	orr	r1, r0, r1
	mcr	p15, 0, r1, c2, c0, 0
c7e001bc:	ee021f10 	mcr	15, 0, r1, cr2, cr0, {0}

	/* Enable the MMU */
	mrc	p15, 0, r0, c1, c0, 0
c7e001c0:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #1		/* Set CR_M to enable MMU */
c7e001c4:	e3800001 	orr	r0, r0, #1	; 0x1

	/* Prepare to enable the MMU */
	adr	r1, skip_hw_init
c7e001c8:	e28f1040 	add	r1, pc, #64	; 0x40
	and	r1, r1, #0x3fc
c7e001cc:	e2011fff 	and	r1, r1, #1020	; 0x3fc
	ldr	r2, _TEXT_BASE
c7e001d0:	e51f2198 	ldr	r2, [pc, #-408]	; c7e00040 <_TEXT_BASE>
	ldr	r3, =0xfff00000
c7e001d4:	e59f3380 	ldr	r3, [pc, #896]	; c7e0055c <fiq+0x5c>
	and	r2, r2, r3
c7e001d8:	e0022003 	and	r2, r2, r3
	orr	r2, r2, r1
c7e001dc:	e1822001 	orr	r2, r2, r1
	b	mmu_enable
c7e001e0:	ea000006 	b	c7e00200 <mmu_enable>
c7e001e4:	e1a00000 	nop			(mov r0,r0)
c7e001e8:	e1a00000 	nop			(mov r0,r0)
c7e001ec:	e1a00000 	nop			(mov r0,r0)
c7e001f0:	e1a00000 	nop			(mov r0,r0)
c7e001f4:	e1a00000 	nop			(mov r0,r0)
c7e001f8:	e1a00000 	nop			(mov r0,r0)
c7e001fc:	e1a00000 	nop			(mov r0,r0)

c7e00200 <mmu_enable>:

	.align 5
	/* Run in a single cache-line */
mmu_enable:

	mcr	p15, 0, r0, c1, c0, 0
c7e00200:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	nop
c7e00204:	e1a00000 	nop			(mov r0,r0)
	nop
c7e00208:	e1a00000 	nop			(mov r0,r0)
	mov	pc, r2
c7e0020c:	e1a0f002 	mov	pc, r2

c7e00210 <clear_bss>:
skip_hw_init:
#endif

clear_bss:
#ifndef CONFIG_SPL_BUILD
	ldr	r0, _bss_start_ofs
c7e00210:	e51f01d0 	ldr	r0, [pc, #-464]	; c7e00048 <_bss_start_ofs>
	ldr	r1, _bss_end_ofs
c7e00214:	e51f11d0 	ldr	r1, [pc, #-464]	; c7e0004c <_bss_end_ofs>
	mov	r4, r6			/* reloc addr */
c7e00218:	e1a04006 	mov	r4, r6
	add	r0, r0, r4
c7e0021c:	e0800004 	add	r0, r0, r4
	add	r1, r1, r4
c7e00220:	e0811004 	add	r1, r1, r4
	mov	r2, #0x00000000		/* clear			    */
c7e00224:	e3a02000 	mov	r2, #0	; 0x0

c7e00228 <clbss_l>:

clbss_l:cmp	r0, r1			/* clear loop... */
c7e00228:	e1500001 	cmp	r0, r1
	bhs	clbss_e			/* if reached end of bss, exit */
c7e0022c:	2a000002 	bcs	c7e0023c <clbss_e>
	str	r2, [r0]
c7e00230:	e5802000 	str	r2, [r0]
	add	r0, r0, #4
c7e00234:	e2800004 	add	r0, r0, #4	; 0x4
	b	clbss_l
c7e00238:	eafffffa 	b	c7e00228 <clbss_l>

c7e0023c <clbss_e>:
clbss_e:
#ifndef CONFIG_NAND_SPL
	bl coloured_LED_init
c7e0023c:	eb000216 	bl	c7e00a9c <__coloured_LED_init>
	bl red_led_on
c7e00240:	eb000216 	bl	c7e00aa0 <__red_led_on>

	ldr     pc, _nand_boot

_nand_boot: .word nand_boot
#else
	ldr	r0, _board_init_r_ofs
c7e00244:	e59f0014 	ldr	r0, [pc, #20]	; c7e00260 <_board_init_r_ofs>
	adr	r1, _start
c7e00248:	e24f1e25 	sub	r1, pc, #592	; 0x250
	add	lr, r0, r1
c7e0024c:	e080e001 	add	lr, r0, r1
	add     lr, lr, r9
c7e00250:	e08ee009 	add	lr, lr, r9
	/* setup parameters for board_init_r */
	mov	r0, r5		/* gd_t */
c7e00254:	e1a00005 	mov	r0, r5
	mov	r1, r6		/* dest_addr */
c7e00258:	e1a01006 	mov	r1, r6
	/* jump to it ... */
	mov	pc, lr
c7e0025c:	e1a0f00e 	mov	pc, lr

c7e00260 <_board_init_r_ofs>:
c7e00260:	00000ba0 	.word	0x00000ba0

c7e00264 <_rel_dyn_start_ofs>:
c7e00264:	00040000 	.word	0x00040000

c7e00268 <_rel_dyn_end_ofs>:
c7e00268:	000459c8 	.word	0x000459c8

c7e0026c <_dynsym_start_ofs>:
c7e0026c:	000459c8 	.word	0x000459c8

c7e00270 <_mmu_table_base>:
c7e00270:	c7e3c000 	.word	0xc7e3c000

c7e00274 <theLastJump>:
 * void	theLastJump(void *kernel, int arch_num, uint boot_params);
 */
#ifdef CONFIG_ENABLE_MMU
	.globl theLastJump
theLastJump:
	mov	r9, r0
c7e00274:	e1a09000 	mov	r9, r0
	ldr	r3, =0xfff00000
c7e00278:	e59f32dc 	ldr	r3, [pc, #732]	; c7e0055c <fiq+0x5c>
	ldr	r4, _TEXT_PHY_BASE
c7e0027c:	e51f4240 	ldr	r4, [pc, #-576]	; c7e00044 <_TEXT_PHY_BASE>
	adr	r5, phy_last_jump
c7e00280:	e28f5008 	add	r5, pc, #8	; 0x8
	bic	r5, r5, r3
c7e00284:	e1c55003 	bic	r5, r5, r3
	orr	r5, r5, r4
c7e00288:	e1855004 	orr	r5, r5, r4
	mov	pc, r5
c7e0028c:	e1a0f005 	mov	pc, r5

c7e00290 <phy_last_jump>:
phy_last_jump:
	/*
	 * disable MMU stuff
	 */
	mrc	p15, 0, r0, c1, c0, 0
c7e00290:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x00002300	/* clear bits 13, 9:8 (--V- --RS) */
c7e00294:	e3c00c23 	bic	r0, r0, #8960	; 0x2300
	bic	r0, r0, #0x00000087	/* clear bits 7, 2:0 (B--- -CAM) */
c7e00298:	e3c00087 	bic	r0, r0, #135	; 0x87
	orr	r0, r0, #0x00000002	/* set bit 2 (A) Align */
c7e0029c:	e3800002 	orr	r0, r0, #2	; 0x2
	orr	r0, r0, #0x00001000	/* set bit 12 (I) I-Cache */
c7e002a0:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	mcr	p15, 0, r0, c1, c0, 0
c7e002a4:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */
c7e002a8:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}

	mov	r0, #0
c7e002ac:	e3a00000 	mov	r0, #0	; 0x0
	mov	pc, r9
c7e002b0:	e1a0f009 	mov	pc, r9
c7e002b4:	e1a00000 	nop			(mov r0,r0)
c7e002b8:	e1a00000 	nop			(mov r0,r0)
c7e002bc:	e1a00000 	nop			(mov r0,r0)

c7e002c0 <undefined_instruction>:
/*
 * exception handlers
 */
	.align	5
undefined_instruction:
	get_bad_stack
c7e002c0:	e51fd274 	ldr	sp, [pc, #-628]	; c7e00054 <IRQ_STACK_START_IN>
c7e002c4:	e58de000 	str	lr, [sp]
c7e002c8:	e14fe000 	mrs	lr, SPSR
c7e002cc:	e58de004 	str	lr, [sp, #4]
c7e002d0:	e3a0d013 	mov	sp, #19	; 0x13
c7e002d4:	e169f00d 	msr	SPSR_fc, sp
c7e002d8:	e1a0e00f 	mov	lr, pc
c7e002dc:	e1b0f00e 	movs	pc, lr
	bad_save_user_regs
c7e002e0:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e002e4:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e002e8:	e51f229c 	ldr	r2, [pc, #-668]	; c7e00054 <IRQ_STACK_START_IN>
c7e002ec:	e892000c 	ldm	r2, {r2, r3}
c7e002f0:	e28d0048 	add	r0, sp, #72	; 0x48
c7e002f4:	e28d5034 	add	r5, sp, #52	; 0x34
c7e002f8:	e1a0100e 	mov	r1, lr
c7e002fc:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e00300:	e1a0000d 	mov	r0, sp
	bl	do_undefined_instruction
c7e00304:	eb000408 	bl	c7e0132c <do_undefined_instruction>
c7e00308:	e1a00000 	nop			(mov r0,r0)
c7e0030c:	e1a00000 	nop			(mov r0,r0)
c7e00310:	e1a00000 	nop			(mov r0,r0)
c7e00314:	e1a00000 	nop			(mov r0,r0)
c7e00318:	e1a00000 	nop			(mov r0,r0)
c7e0031c:	e1a00000 	nop			(mov r0,r0)

c7e00320 <software_interrupt>:

	.align	5
software_interrupt:
	get_bad_stack_swi
c7e00320:	e24dd004 	sub	sp, sp, #4	; 0x4
c7e00324:	e58d0000 	str	r0, [sp]
c7e00328:	e51fd2dc 	ldr	sp, [pc, #-732]	; c7e00054 <IRQ_STACK_START_IN>
c7e0032c:	e580e000 	str	lr, [r0]
c7e00330:	e14f0000 	mrs	r0, SPSR
c7e00334:	e580e004 	str	lr, [r0, #4]
c7e00338:	e59d0000 	ldr	r0, [sp]
c7e0033c:	e28dd004 	add	sp, sp, #4	; 0x4
	bad_save_user_regs
c7e00340:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e00344:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e00348:	e51f22fc 	ldr	r2, [pc, #-764]	; c7e00054 <IRQ_STACK_START_IN>
c7e0034c:	e892000c 	ldm	r2, {r2, r3}
c7e00350:	e28d0048 	add	r0, sp, #72	; 0x48
c7e00354:	e28d5034 	add	r5, sp, #52	; 0x34
c7e00358:	e1a0100e 	mov	r1, lr
c7e0035c:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e00360:	e1a0000d 	mov	r0, sp
	bl	do_software_interrupt
c7e00364:	eb0003e7 	bl	c7e01308 <do_software_interrupt>
c7e00368:	e1a00000 	nop			(mov r0,r0)
c7e0036c:	e1a00000 	nop			(mov r0,r0)
c7e00370:	e1a00000 	nop			(mov r0,r0)
c7e00374:	e1a00000 	nop			(mov r0,r0)
c7e00378:	e1a00000 	nop			(mov r0,r0)
c7e0037c:	e1a00000 	nop			(mov r0,r0)

c7e00380 <prefetch_abort>:

	.align	5
prefetch_abort:
	get_bad_stack
c7e00380:	e51fd334 	ldr	sp, [pc, #-820]	; c7e00054 <IRQ_STACK_START_IN>
c7e00384:	e58de000 	str	lr, [sp]
c7e00388:	e14fe000 	mrs	lr, SPSR
c7e0038c:	e58de004 	str	lr, [sp, #4]
c7e00390:	e3a0d013 	mov	sp, #19	; 0x13
c7e00394:	e169f00d 	msr	SPSR_fc, sp
c7e00398:	e1a0e00f 	mov	lr, pc
c7e0039c:	e1b0f00e 	movs	pc, lr
	bad_save_user_regs
c7e003a0:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e003a4:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e003a8:	e51f235c 	ldr	r2, [pc, #-860]	; c7e00054 <IRQ_STACK_START_IN>
c7e003ac:	e892000c 	ldm	r2, {r2, r3}
c7e003b0:	e28d0048 	add	r0, sp, #72	; 0x48
c7e003b4:	e28d5034 	add	r5, sp, #52	; 0x34
c7e003b8:	e1a0100e 	mov	r1, lr
c7e003bc:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e003c0:	e1a0000d 	mov	r0, sp
	bl	do_prefetch_abort
c7e003c4:	eb0003c6 	bl	c7e012e4 <do_prefetch_abort>
c7e003c8:	e1a00000 	nop			(mov r0,r0)
c7e003cc:	e1a00000 	nop			(mov r0,r0)
c7e003d0:	e1a00000 	nop			(mov r0,r0)
c7e003d4:	e1a00000 	nop			(mov r0,r0)
c7e003d8:	e1a00000 	nop			(mov r0,r0)
c7e003dc:	e1a00000 	nop			(mov r0,r0)

c7e003e0 <data_abort>:

	.align	5
data_abort:
	get_bad_stack
c7e003e0:	e51fd394 	ldr	sp, [pc, #-916]	; c7e00054 <IRQ_STACK_START_IN>
c7e003e4:	e58de000 	str	lr, [sp]
c7e003e8:	e14fe000 	mrs	lr, SPSR
c7e003ec:	e58de004 	str	lr, [sp, #4]
c7e003f0:	e3a0d013 	mov	sp, #19	; 0x13
c7e003f4:	e169f00d 	msr	SPSR_fc, sp
c7e003f8:	e1a0e00f 	mov	lr, pc
c7e003fc:	e1b0f00e 	movs	pc, lr
	bad_save_user_regs
c7e00400:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e00404:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e00408:	e51f23bc 	ldr	r2, [pc, #-956]	; c7e00054 <IRQ_STACK_START_IN>
c7e0040c:	e892000c 	ldm	r2, {r2, r3}
c7e00410:	e28d0048 	add	r0, sp, #72	; 0x48
c7e00414:	e28d5034 	add	r5, sp, #52	; 0x34
c7e00418:	e1a0100e 	mov	r1, lr
c7e0041c:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e00420:	e1a0000d 	mov	r0, sp
	bl	do_data_abort
c7e00424:	eb0003a5 	bl	c7e012c0 <do_data_abort>
c7e00428:	e1a00000 	nop			(mov r0,r0)
c7e0042c:	e1a00000 	nop			(mov r0,r0)
c7e00430:	e1a00000 	nop			(mov r0,r0)
c7e00434:	e1a00000 	nop			(mov r0,r0)
c7e00438:	e1a00000 	nop			(mov r0,r0)
c7e0043c:	e1a00000 	nop			(mov r0,r0)

c7e00440 <not_used>:

	.align	5
not_used:
	get_bad_stack
c7e00440:	e51fd3f4 	ldr	sp, [pc, #-1012]	; c7e00054 <IRQ_STACK_START_IN>
c7e00444:	e58de000 	str	lr, [sp]
c7e00448:	e14fe000 	mrs	lr, SPSR
c7e0044c:	e58de004 	str	lr, [sp, #4]
c7e00450:	e3a0d013 	mov	sp, #19	; 0x13
c7e00454:	e169f00d 	msr	SPSR_fc, sp
c7e00458:	e1a0e00f 	mov	lr, pc
c7e0045c:	e1b0f00e 	movs	pc, lr
	bad_save_user_regs
c7e00460:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e00464:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e00468:	e51f241c 	ldr	r2, [pc, #-1052]	; c7e00054 <IRQ_STACK_START_IN>
c7e0046c:	e892000c 	ldm	r2, {r2, r3}
c7e00470:	e28d0048 	add	r0, sp, #72	; 0x48
c7e00474:	e28d5034 	add	r5, sp, #52	; 0x34
c7e00478:	e1a0100e 	mov	r1, lr
c7e0047c:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e00480:	e1a0000d 	mov	r0, sp
	bl	do_not_used
c7e00484:	eb000384 	bl	c7e0129c <do_not_used>
c7e00488:	e1a00000 	nop			(mov r0,r0)
c7e0048c:	e1a00000 	nop			(mov r0,r0)
c7e00490:	e1a00000 	nop			(mov r0,r0)
c7e00494:	e1a00000 	nop			(mov r0,r0)
c7e00498:	e1a00000 	nop			(mov r0,r0)
c7e0049c:	e1a00000 	nop			(mov r0,r0)

c7e004a0 <irq>:

	.align	5
irq:
	get_bad_stack
c7e004a0:	e51fd454 	ldr	sp, [pc, #-1108]	; c7e00054 <IRQ_STACK_START_IN>
c7e004a4:	e58de000 	str	lr, [sp]
c7e004a8:	e14fe000 	mrs	lr, SPSR
c7e004ac:	e58de004 	str	lr, [sp, #4]
c7e004b0:	e3a0d013 	mov	sp, #19	; 0x13
c7e004b4:	e169f00d 	msr	SPSR_fc, sp
c7e004b8:	e1a0e00f 	mov	lr, pc
c7e004bc:	e1b0f00e 	movs	pc, lr
	bad_save_user_regs
c7e004c0:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e004c4:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e004c8:	e51f247c 	ldr	r2, [pc, #-1148]	; c7e00054 <IRQ_STACK_START_IN>
c7e004cc:	e892000c 	ldm	r2, {r2, r3}
c7e004d0:	e28d0048 	add	r0, sp, #72	; 0x48
c7e004d4:	e28d5034 	add	r5, sp, #52	; 0x34
c7e004d8:	e1a0100e 	mov	r1, lr
c7e004dc:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e004e0:	e1a0000d 	mov	r0, sp
	bl	do_irq
c7e004e4:	eb00035a 	bl	c7e01254 <do_irq>
c7e004e8:	e1a00000 	nop			(mov r0,r0)
c7e004ec:	e1a00000 	nop			(mov r0,r0)
c7e004f0:	e1a00000 	nop			(mov r0,r0)
c7e004f4:	e1a00000 	nop			(mov r0,r0)
c7e004f8:	e1a00000 	nop			(mov r0,r0)
c7e004fc:	e1a00000 	nop			(mov r0,r0)

c7e00500 <fiq>:

	.align	5
fiq:
	get_bad_stack
c7e00500:	e51fd4b4 	ldr	sp, [pc, #-1204]	; c7e00054 <IRQ_STACK_START_IN>
c7e00504:	e58de000 	str	lr, [sp]
c7e00508:	e14fe000 	mrs	lr, SPSR
c7e0050c:	e58de004 	str	lr, [sp, #4]
c7e00510:	e3a0d013 	mov	sp, #19	; 0x13
c7e00514:	e169f00d 	msr	SPSR_fc, sp
c7e00518:	e1a0e00f 	mov	lr, pc
c7e0051c:	e1b0f00e 	movs	pc, lr
	bad_save_user_regs
c7e00520:	e24dd048 	sub	sp, sp, #72	; 0x48
c7e00524:	e88d1fff 	stm	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
c7e00528:	e51f24dc 	ldr	r2, [pc, #-1244]	; c7e00054 <IRQ_STACK_START_IN>
c7e0052c:	e892000c 	ldm	r2, {r2, r3}
c7e00530:	e28d0048 	add	r0, sp, #72	; 0x48
c7e00534:	e28d5034 	add	r5, sp, #52	; 0x34
c7e00538:	e1a0100e 	mov	r1, lr
c7e0053c:	e885000f 	stm	r5, {r0, r1, r2, r3}
c7e00540:	e1a0000d 	mov	r0, sp
	bl	do_fiq
c7e00544:	eb00034b 	bl	c7e01278 <do_fiq>
c7e00548:	7f005000 	.word	0x7f005000
c7e0054c:	0c001f80 	.word	0x0c001f80
c7e00550:	7f008000 	.word	0x7f008000
c7e00554:	0000ffff 	.word	0x0000ffff
c7e00558:	57e00000 	.word	0x57e00000
c7e0055c:	fff00000 	.word	0xfff00000

c7e00560 <cleanup_before_linux>:
#include <asm/system.h>

static void cache_flush (void);

int cleanup_before_linux (void)
{
c7e00560:	e92d4010 	push	{r4, lr}
	 * it prepares the processor for linux
	 *
	 * we turn off caches etc ...
	 */

	disable_interrupts ();
c7e00564:	eb0002e4 	bl	c7e010fc <disable_interrupts>

	/* turn off I/D-cache */
	icache_disable();
c7e00568:	eb0003e9 	bl	c7e01514 <icache_disable>
	dcache_disable();
c7e0056c:	eb0003e6 	bl	c7e0150c <dcache_disable>

/* flush I/D-cache */
static void cache_flush (void)
{
	/* invalidate both caches and flush btb */
	asm ("mcr p15, 0, %0, c7, c7, 0": :"r" (0));
c7e00570:	e3a03000 	mov	r3, #0	; 0x0
c7e00574:	ee073f17 	mcr	15, 0, r3, cr7, cr7, {0}
	/* mem barrier to sync things */
	asm ("mcr p15, 0, %0, c7, c10, 4": :"r" (0));
c7e00578:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
	dcache_disable();
	/* flush I/D-cache */
	cache_flush();

	return 0;
}
c7e0057c:	e3a00000 	mov	r0, #0	; 0x0
c7e00580:	e8bd8010 	pop	{r4, pc}

c7e00584 <reset_cpu>:
#include <asm/arch/s3c6400.h>
#endif

.globl reset_cpu
reset_cpu:
	ldr	r1, =ELFIN_CLOCK_POWER_BASE
c7e00584:	e59f1010 	ldr	r1, [pc, #16]	; c7e0059c <_loop_forever+0x4>
	ldr	r2, [r1, #SYS_ID_OFFSET]
c7e00588:	e5912118 	ldr	r2, [r1, #280]
	ldr	r3, =0xffff
c7e0058c:	e59f300c 	ldr	r3, [pc, #12]	; c7e005a0 <_loop_forever+0x8>
	and	r2, r3, r2, lsr #12
c7e00590:	e0032622 	and	r2, r3, r2, lsr #12
	str	r2, [r1, #SW_RST_OFFSET]
c7e00594:	e5812114 	str	r2, [r1, #276]

c7e00598 <_loop_forever>:
_loop_forever:
	b	_loop_forever
c7e00598:	eafffffe 	b	c7e00598 <_loop_forever>
c7e0059c:	7e00f000 	.word	0x7e00f000
c7e005a0:	0000ffff 	.word	0x0000ffff

c7e005a4 <mem_ctrl_asm_init>:
#include <asm/arch/s3c6400.h>
#endif
	.globl mem_ctrl_asm_init
mem_ctrl_asm_init:
	/* DMC1 base address 0x7e001000 */
	ldr	r0, =ELFIN_DMC1_BASE
c7e005a4:	e59f0108 	ldr	r0, [pc, #264]	; c7e006b4 <check_dmc1_ready+0x20>

	ldr	r1, =0x4
c7e005a8:	e3a01004 	mov	r1, #4	; 0x4
	str	r1, [r0, #INDEX_DMC_MEMC_CMD]
c7e005ac:	e5801004 	str	r1, [r0, #4]

	ldr	r1, =DMC_DDR_REFRESH_PRD
c7e005b0:	e59f1100 	ldr	r1, [pc, #256]	; c7e006b8 <check_dmc1_ready+0x24>
	str	r1, [r0, #INDEX_DMC_REFRESH_PRD]
c7e005b4:	e5801010 	str	r1, [r0, #16]

	ldr	r1, =DMC_DDR_CAS_LATENCY
c7e005b8:	e3a01006 	mov	r1, #6	; 0x6
	str	r1, [r0, #INDEX_DMC_CAS_LATENCY]
c7e005bc:	e5801014 	str	r1, [r0, #20]

	ldr	r1, =DMC_DDR_t_DQSS
c7e005c0:	e3a01001 	mov	r1, #1	; 0x1
	str	r1, [r0, #INDEX_DMC_T_DQSS]
c7e005c4:	e5801018 	str	r1, [r0, #24]

	ldr	r1, =DMC_DDR_t_MRD
c7e005c8:	e3a01002 	mov	r1, #2	; 0x2
	str	r1, [r0, #INDEX_DMC_T_MRD]
c7e005cc:	e580101c 	str	r1, [r0, #28]

	ldr	r1, =DMC_DDR_t_RAS
c7e005d0:	e3a01006 	mov	r1, #6	; 0x6
	str	r1, [r0, #INDEX_DMC_T_RAS]
c7e005d4:	e5801020 	str	r1, [r0, #32]

	ldr	r1, =DMC_DDR_t_RC
c7e005d8:	e3a0100a 	mov	r1, #10	; 0xa
	str	r1, [r0, #INDEX_DMC_T_RC]
c7e005dc:	e5801024 	str	r1, [r0, #36]

	ldr	r1, =DMC_DDR_t_RCD
c7e005e0:	e3a01004 	mov	r1, #4	; 0x4
	ldr	r2, =DMC_DDR_schedule_RCD
c7e005e4:	e3a02008 	mov	r2, #8	; 0x8
	orr	r1, r1, r2
c7e005e8:	e1811002 	orr	r1, r1, r2
	str	r1, [r0, #INDEX_DMC_T_RCD]
c7e005ec:	e5801028 	str	r1, [r0, #40]

	ldr	r1, =DMC_DDR_t_RFC
c7e005f0:	e3a0100b 	mov	r1, #11	; 0xb
	ldr	r2, =DMC_DDR_schedule_RFC
c7e005f4:	e3a02c01 	mov	r2, #256	; 0x100
	orr	r1, r1, r2
c7e005f8:	e1811002 	orr	r1, r1, r2
	str	r1, [r0, #INDEX_DMC_T_RFC]
c7e005fc:	e580102c 	str	r1, [r0, #44]

	ldr	r1, =DMC_DDR_t_RP
c7e00600:	e3a01004 	mov	r1, #4	; 0x4
	ldr	r2, =DMC_DDR_schedule_RP
c7e00604:	e3a02008 	mov	r2, #8	; 0x8
	orr	r1, r1, r2
c7e00608:	e1811002 	orr	r1, r1, r2
	str	r1, [r0, #INDEX_DMC_T_RP]
c7e0060c:	e5801030 	str	r1, [r0, #48]

	ldr	r1, =DMC_DDR_t_RRD
c7e00610:	e3a01002 	mov	r1, #2	; 0x2
	str	r1, [r0, #INDEX_DMC_T_RRD]
c7e00614:	e5801034 	str	r1, [r0, #52]

	ldr	r1, =DMC_DDR_t_WR
c7e00618:	e3a01002 	mov	r1, #2	; 0x2
	str	r1, [r0, #INDEX_DMC_T_WR]
c7e0061c:	e5801038 	str	r1, [r0, #56]

	ldr	r1, =DMC_DDR_t_WTR
c7e00620:	e3a01002 	mov	r1, #2	; 0x2
	str	r1, [r0, #INDEX_DMC_T_WTR]
c7e00624:	e580103c 	str	r1, [r0, #60]

	ldr	r1, =DMC_DDR_t_XP
c7e00628:	e3a01002 	mov	r1, #2	; 0x2
	str	r1, [r0, #INDEX_DMC_T_XP]
c7e0062c:	e5801040 	str	r1, [r0, #64]

	ldr	r1, =DMC_DDR_t_XSR
c7e00630:	e3a01010 	mov	r1, #16	; 0x10
	str	r1, [r0, #INDEX_DMC_T_XSR]
c7e00634:	e5801044 	str	r1, [r0, #68]

	ldr	r1, =DMC_DDR_t_ESR
c7e00638:	e3a01010 	mov	r1, #16	; 0x10
	str	r1, [r0, #INDEX_DMC_T_ESR]
c7e0063c:	e5801048 	str	r1, [r0, #72]

	ldr	r1, =DMC1_MEM_CFG
c7e00640:	e59f1074 	ldr	r1, [pc, #116]	; c7e006bc <check_dmc1_ready+0x28>
	str	r1, [r0, #INDEX_DMC_MEMORY_CFG]
c7e00644:	e580100c 	str	r1, [r0, #12]

	ldr	r1, =DMC1_MEM_CFG2
c7e00648:	e59f1070 	ldr	r1, [pc, #112]	; c7e006c0 <check_dmc1_ready+0x2c>
	str	r1, [r0, #INDEX_DMC_MEMORY_CFG2]
c7e0064c:	e580104c 	str	r1, [r0, #76]

	ldr	r1, =DMC1_CHIP0_CFG
c7e00650:	e59f106c 	ldr	r1, [pc, #108]	; c7e006c4 <check_dmc1_ready+0x30>
	str	r1, [r0, #INDEX_DMC_CHIP_0_CFG]
c7e00654:	e5801200 	str	r1, [r0, #512]

	ldr	r1, =DMC_DDR_32_CFG
c7e00658:	e3a01000 	mov	r1, #0	; 0x0
	str	r1, [r0, #INDEX_DMC_USER_CONFIG]
c7e0065c:	e5801304 	str	r1, [r0, #772]

	/* DMC0 DDR Chip 0 configuration direct command reg */
	ldr	r1, =DMC_NOP0
c7e00660:	e3a01703 	mov	r1, #786432	; 0xc0000
	str	r1, [r0, #INDEX_DMC_DIRECT_CMD]
c7e00664:	e5801008 	str	r1, [r0, #8]

	/* Precharge All */
	ldr	r1, =DMC_PA0
c7e00668:	e3a01000 	mov	r1, #0	; 0x0
	str	r1, [r0, #INDEX_DMC_DIRECT_CMD]
c7e0066c:	e5801008 	str	r1, [r0, #8]

	/* Auto Refresh 2 time */
	ldr	r1, =DMC_AR0
c7e00670:	e3a01701 	mov	r1, #262144	; 0x40000
	str	r1, [r0, #INDEX_DMC_DIRECT_CMD]
c7e00674:	e5801008 	str	r1, [r0, #8]
	str	r1, [r0, #INDEX_DMC_DIRECT_CMD]
c7e00678:	e5801008 	str	r1, [r0, #8]

	/* MRS */
	ldr	r1, =DMC_mDDR_EMR0
c7e0067c:	e3a0180a 	mov	r1, #655360	; 0xa0000
	str	r1, [r0, #INDEX_DMC_DIRECT_CMD]
c7e00680:	e5801008 	str	r1, [r0, #8]

	/* Mode Reg */
	ldr	r1, =DMC_mDDR_MR0
c7e00684:	e59f103c 	ldr	r1, [pc, #60]	; c7e006c8 <check_dmc1_ready+0x34>
	str	r1, [r0, #INDEX_DMC_DIRECT_CMD]
c7e00688:	e5801008 	str	r1, [r0, #8]

	/* Enable DMC1 */
	mov	r1, #0x0
c7e0068c:	e3a01000 	mov	r1, #0	; 0x0
	str	r1, [r0, #INDEX_DMC_MEMC_CMD]
c7e00690:	e5801004 	str	r1, [r0, #4]

c7e00694 <check_dmc1_ready>:

check_dmc1_ready:
	ldr	r0, =ELFIN_DMC1_BASE
c7e00694:	e59f0018 	ldr	r0, [pc, #24]	; c7e006b4 <check_dmc1_ready+0x20>
	ldr	r1, [r0, #INDEX_DMC_MEMC_STATUS]
c7e00698:	e5901000 	ldr	r1, [r0]
	mov	r2, #0x3
c7e0069c:	e3a02003 	mov	r2, #3	; 0x3
	and	r1, r1, r2
c7e006a0:	e0011002 	and	r1, r1, r2
	cmp	r1, #0x1
c7e006a4:	e3510001 	cmp	r1, #1	; 0x1
	bne	check_dmc1_ready
c7e006a8:	1afffff9 	bne	c7e00694 <check_dmc1_ready>
	nop
c7e006ac:	e1a00000 	nop			(mov r0,r0)
	mov	pc, lr
c7e006b0:	e1a0f00e 	mov	pc, lr
c7e006b4:	7e001000 	.word	0x7e001000
c7e006b8:	0000040f 	.word	0x0000040f
c7e006bc:	0001001a 	.word	0x0001001a
c7e006c0:	00000b45 	.word	0x00000b45
c7e006c4:	000150f0 	.word	0x000150f0
c7e006c8:	00080032 	.word	0x00080032

c7e006cc <get_PLLCLK>:

static ulong get_PLLCLK(int pllreg)
{
	ulong r, m, p, s;

	switch (pllreg) {
c7e006cc:	e3500001 	cmp	r0, #1	; 0x1
 * the specified bus in HZ.
 */
/* ------------------------------------------------------------------------- */

static ulong get_PLLCLK(int pllreg)
{
c7e006d0:	e92d4010 	push	{r4, lr}
	ulong r, m, p, s;

	switch (pllreg) {
c7e006d4:	0a000006 	beq	c7e006f4 <get_PLLCLK+0x28>
c7e006d8:	e3500002 	cmp	r0, #2	; 0x2
c7e006dc:	0a000007 	beq	c7e00700 <get_PLLCLK+0x34>
c7e006e0:	e3500000 	cmp	r0, #0	; 0x0
	case APLL:
		r = APLL_CON_REG;
c7e006e4:	059f3050 	ldreq	r3, [pc, #80]	; c7e0073c <get_PLLCLK+0x70>
c7e006e8:	0593400c 	ldreq	r4, [r3, #12]

static ulong get_PLLCLK(int pllreg)
{
	ulong r, m, p, s;

	switch (pllreg) {
c7e006ec:	0a000007 	beq	c7e00710 <get_PLLCLK+0x44>
c7e006f0:	ea000005 	b	c7e0070c <get_PLLCLK+0x40>
	case APLL:
		r = APLL_CON_REG;
		break;
	case MPLL:
		r = MPLL_CON_REG;
c7e006f4:	e59f3040 	ldr	r3, [pc, #64]	; c7e0073c <get_PLLCLK+0x70>
c7e006f8:	e5934010 	ldr	r4, [r3, #16]
c7e006fc:	ea000003 	b	c7e00710 <get_PLLCLK+0x44>
		break;
	case EPLL:
		r = EPLL_CON0_REG;
c7e00700:	e59f3034 	ldr	r3, [pc, #52]	; c7e0073c <get_PLLCLK+0x70>
c7e00704:	e5934014 	ldr	r4, [r3, #20]
c7e00708:	ea000000 	b	c7e00710 <get_PLLCLK+0x44>
		break;
	default:
		hang();
c7e0070c:	eb00011f 	bl	c7e00b90 <hang>
c7e00710:	e1a01424 	lsr	r1, r4, #8
c7e00714:	e2043007 	and	r3, r4, #7	; 0x7
c7e00718:	e201103f 	and	r1, r1, #63	; 0x3f
c7e0071c:	e1a01311 	lsl	r1, r1, r3
c7e00720:	e59f0018 	ldr	r0, [pc, #24]	; c7e00740 <get_PLLCLK+0x74>
c7e00724:	eb00a777 	bl	c7e2a508 <__udivsi3>
c7e00728:	e1a03824 	lsr	r3, r4, #16
c7e0072c:	e1a03b03 	lsl	r3, r3, #22
c7e00730:	e1a03b23 	lsr	r3, r3, #22
	m = (r >> 16) & 0x3ff;
	p = (r >> 8) & 0x3f;
	s = r & 0x7;

	return m * (CONFIG_SYS_CLK_FREQ / (p * (1 << s)));
}
c7e00734:	e0000093 	mul	r0, r3, r0
c7e00738:	e8bd8010 	pop	{r4, pc}
c7e0073c:	7e00f000 	.word	0x7e00f000
c7e00740:	00b71b00 	.word	0x00b71b00

c7e00744 <get_UCLK>:
}

/* return UCLK frequency */
ulong get_UCLK(void)
{
	return get_PLLCLK(EPLL);
c7e00744:	e3a00002 	mov	r0, #2	; 0x2
c7e00748:	eaffffdf 	b	c7e006cc <get_PLLCLK>

c7e0074c <get_FCLK>:
}

/* return FCLK frequency */
ulong get_FCLK(void)
{
	return get_PLLCLK(APLL);
c7e0074c:	e3a00000 	mov	r0, #0	; 0x0
c7e00750:	eaffffdd 	b	c7e006cc <get_PLLCLK>

c7e00754 <get_PCLK>:

/* return PCLK frequency */
ulong get_PCLK(void)
{
	ulong fclk;
	uint hclkx2_div = ((CLK_DIV0_REG >> 9) & 0x7) + 1;
c7e00754:	e59f3048 	ldr	r3, [pc, #72]	; c7e007a4 <get_PCLK+0x50>
	return fclk / (hclk_div * hclkx2_div);
}

/* return PCLK frequency */
ulong get_PCLK(void)
{
c7e00758:	e92d4070 	push	{r4, r5, r6, lr}
	ulong fclk;
	uint hclkx2_div = ((CLK_DIV0_REG >> 9) & 0x7) + 1;
c7e0075c:	e5935020 	ldr	r5, [r3, #32]
	uint pre_div = ((CLK_DIV0_REG >> 12) & 0xf) + 1;
c7e00760:	e5934020 	ldr	r4, [r3, #32]

	if (OTHERS_REG & 0x80)
c7e00764:	e5933900 	ldr	r3, [r3, #2304]
c7e00768:	e3130080 	tst	r3, #128	; 0x80
c7e0076c:	0a000001 	beq	c7e00778 <get_PCLK+0x24>
		fclk = get_FCLK();		/* SYNC Mode	*/
c7e00770:	ebfffff5 	bl	c7e0074c <get_FCLK>
c7e00774:	ea000001 	b	c7e00780 <get_PCLK+0x2c>
	else
		fclk = get_PLLCLK(MPLL);	/* ASYNC Mode	*/
c7e00778:	e3a00001 	mov	r0, #1	; 0x1
c7e0077c:	ebffffd2 	bl	c7e006cc <get_PLLCLK>
c7e00780:	e1a02624 	lsr	r2, r4, #12
c7e00784:	e1a034a5 	lsr	r3, r5, #9
c7e00788:	e202200f 	and	r2, r2, #15	; 0xf
c7e0078c:	e2033007 	and	r3, r3, #7	; 0x7
c7e00790:	e2822001 	add	r2, r2, #1	; 0x1
c7e00794:	e2833001 	add	r3, r3, #1	; 0x1
c7e00798:	e0010293 	mul	r1, r3, r2
c7e0079c:	eb00a759 	bl	c7e2a508 <__udivsi3>

	return fclk / (hclkx2_div * pre_div);
}
c7e007a0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e007a4:	7e00f000 	.word	0x7e00f000

c7e007a8 <get_HCLK>:
/* return HCLK frequency */
ulong get_HCLK(void)
{
	ulong fclk;

	uint hclkx2_div = ((CLK_DIV0_REG >> 9) & 0x7) + 1;
c7e007a8:	e59f3048 	ldr	r3, [pc, #72]	; c7e007f8 <get_HCLK+0x50>
	return get_PLLCLK(APLL);
}

/* return HCLK frequency */
ulong get_HCLK(void)
{
c7e007ac:	e92d4070 	push	{r4, r5, r6, lr}
	ulong fclk;

	uint hclkx2_div = ((CLK_DIV0_REG >> 9) & 0x7) + 1;
c7e007b0:	e5935020 	ldr	r5, [r3, #32]
	uint hclk_div = ((CLK_DIV0_REG >> 8) & 0x1) + 1;
c7e007b4:	e5934020 	ldr	r4, [r3, #32]

	/*
	 * Bit 7 exists on s3c6410, and not on s3c6400, it is reserved on
	 * s3c6400 and is always 0, and it is indeed running in ASYNC mode
	 */
	if (OTHERS_REG & 0x80)
c7e007b8:	e5933900 	ldr	r3, [r3, #2304]
c7e007bc:	e3130080 	tst	r3, #128	; 0x80
c7e007c0:	0a000001 	beq	c7e007cc <get_HCLK+0x24>
		fclk = get_FCLK();		/* SYNC Mode	*/
c7e007c4:	ebffffe0 	bl	c7e0074c <get_FCLK>
c7e007c8:	ea000001 	b	c7e007d4 <get_HCLK+0x2c>
	else
		fclk = get_PLLCLK(MPLL);	/* ASYNC Mode	*/
c7e007cc:	e3a00001 	mov	r0, #1	; 0x1
c7e007d0:	ebffffbd 	bl	c7e006cc <get_PLLCLK>
c7e007d4:	e1a02424 	lsr	r2, r4, #8
c7e007d8:	e1a034a5 	lsr	r3, r5, #9
c7e007dc:	e2022001 	and	r2, r2, #1	; 0x1
c7e007e0:	e2033007 	and	r3, r3, #7	; 0x7
c7e007e4:	e2822001 	add	r2, r2, #1	; 0x1
c7e007e8:	e2833001 	add	r3, r3, #1	; 0x1
c7e007ec:	e0010293 	mul	r1, r3, r2
c7e007f0:	eb00a744 	bl	c7e2a508 <__udivsi3>

	return fclk / (hclk_div * hclkx2_div);
}
c7e007f4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e007f8:	7e00f000 	.word	0x7e00f000

c7e007fc <get_ARMCLK>:
/* return ARMCORE frequency */
ulong get_ARMCLK(void)
{
	ulong div;

	div = CLK_DIV0_REG;
c7e007fc:	e59f301c 	ldr	r3, [pc, #28]	; c7e00820 <get_ARMCLK+0x24>
	return m * (CONFIG_SYS_CLK_FREQ / (p * (1 << s)));
}

/* return ARMCORE frequency */
ulong get_ARMCLK(void)
{
c7e00800:	e92d4010 	push	{r4, lr}
	ulong div;

	div = CLK_DIV0_REG;
c7e00804:	e5934020 	ldr	r4, [r3, #32]

	return get_PLLCLK(APLL) / ((div & 0x7) + 1);
c7e00808:	e3a00000 	mov	r0, #0	; 0x0
c7e0080c:	e2044007 	and	r4, r4, #7	; 0x7
c7e00810:	ebffffad 	bl	c7e006cc <get_PLLCLK>
c7e00814:	e2841001 	add	r1, r4, #1	; 0x1
c7e00818:	eb00a73a 	bl	c7e2a508 <__udivsi3>
}
c7e0081c:	e8bd8010 	pop	{r4, pc}
c7e00820:	7e00f000 	.word	0x7e00f000

c7e00824 <print_cpuinfo>:
{
	return get_PLLCLK(EPLL);
}

int print_cpuinfo(void)
{
c7e00824:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	printf("\nCPU:     S3C6410@%luMHz\n", get_ARMCLK() / 1000000);
c7e00828:	ebfffff3 	bl	c7e007fc <get_ARMCLK>
c7e0082c:	e59f1084 	ldr	r1, [pc, #132]	; c7e008b8 <print_cpuinfo+0x94>
c7e00830:	eb00a734 	bl	c7e2a508 <__udivsi3>
c7e00834:	e1a01000 	mov	r1, r0
c7e00838:	e59f007c 	ldr	r0, [pc, #124]	; c7e008bc <print_cpuinfo+0x98>
c7e0083c:	eb002085 	bl	c7e08a58 <printf>
	printf("         Fclk = %luMHz, Hclk = %luMHz, Pclk = %luMHz ",
c7e00840:	ebffffc1 	bl	c7e0074c <get_FCLK>
c7e00844:	e1a04000 	mov	r4, r0
c7e00848:	ebffffd6 	bl	c7e007a8 <get_HCLK>
c7e0084c:	e1a05000 	mov	r5, r0
c7e00850:	ebffffbf 	bl	c7e00754 <get_PCLK>
c7e00854:	e59f105c 	ldr	r1, [pc, #92]	; c7e008b8 <print_cpuinfo+0x94>
c7e00858:	e1a06000 	mov	r6, r0
c7e0085c:	e1a00004 	mov	r0, r4
c7e00860:	eb00a728 	bl	c7e2a508 <__udivsi3>
c7e00864:	e59f104c 	ldr	r1, [pc, #76]	; c7e008b8 <print_cpuinfo+0x94>
c7e00868:	e1a07000 	mov	r7, r0
c7e0086c:	e1a00005 	mov	r0, r5
c7e00870:	eb00a724 	bl	c7e2a508 <__udivsi3>
c7e00874:	e59f103c 	ldr	r1, [pc, #60]	; c7e008b8 <print_cpuinfo+0x94>
c7e00878:	e1a04000 	mov	r4, r0
c7e0087c:	e1a00006 	mov	r0, r6
c7e00880:	eb00a720 	bl	c7e2a508 <__udivsi3>
c7e00884:	e1a01007 	mov	r1, r7
c7e00888:	e1a03000 	mov	r3, r0
c7e0088c:	e1a02004 	mov	r2, r4
c7e00890:	e59f0028 	ldr	r0, [pc, #40]	; c7e008c0 <print_cpuinfo+0x9c>
c7e00894:	eb00206f 	bl	c7e08a58 <printf>
	       get_FCLK() / 1000000, get_HCLK() / 1000000,
	       get_PCLK() / 1000000);

	if (OTHERS_REG & 0x80)
c7e00898:	e59f3024 	ldr	r3, [pc, #36]	; c7e008c4 <print_cpuinfo+0xa0>
c7e0089c:	e5933900 	ldr	r3, [r3, #2304]
c7e008a0:	e3130080 	tst	r3, #128	; 0x80
		printf("(SYNC Mode) \n");
c7e008a4:	159f001c 	ldrne	r0, [pc, #28]	; c7e008c8 <print_cpuinfo+0xa4>
	else
		printf("(ASYNC Mode) \n");
c7e008a8:	059f001c 	ldreq	r0, [pc, #28]	; c7e008cc <print_cpuinfo+0xa8>
c7e008ac:	eb002069 	bl	c7e08a58 <printf>
	return 0;
}
c7e008b0:	e3a00000 	mov	r0, #0	; 0x0
c7e008b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e008b8:	000f4240 	.word	0x000f4240
c7e008bc:	c7e2dd6e 	.word	0xc7e2dd6e
c7e008c0:	c7e2dd88 	.word	0xc7e2dd88
c7e008c4:	7e00f000 	.word	0x7e00f000
c7e008c8:	c7e2ddbe 	.word	0xc7e2ddbe
c7e008cc:	c7e2ddcc 	.word	0xc7e2ddcc

c7e008d0 <get_ticks>:
/* macro to read the 16 bit timer */
static inline ulong read_timer(void)
{
	s3c64xx_timers *const timers = s3c64xx_get_base_timers();

	return timers->TCNTO4;
c7e008d0:	e59f3078 	ldr	r3, [pc, #120]	; c7e00950 <get_ticks+0x80>
/*
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 */
unsigned long long get_ticks(void)
{
c7e008d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
/* macro to read the 16 bit timer */
static inline ulong read_timer(void)
{
	s3c64xx_timers *const timers = s3c64xx_get_base_timers();

	return timers->TCNTO4;
c7e008d8:	e5935040 	ldr	r5, [r3, #64]
//		timestamp += lastdec + timer_load_val - now;
//	}
//	lastdec = now;

//	return timestamp;
	if(gd->lastinc >= now) {
c7e008dc:	e5983030 	ldr	r3, [r8, #48]
c7e008e0:	e1a0c008 	mov	ip, r8
c7e008e4:	e1530005 	cmp	r3, r5
c7e008e8:	3a000006 	bcc	c7e00908 <get_ticks+0x38>
		/* normal mode */
		gd->timer_reset_value += gd->lastinc-now;
c7e008ec:	e2884028 	add	r4, r8, #40	; 0x28
c7e008f0:	e8940018 	ldm	r4, {r3, r4}
c7e008f4:	e5982030 	ldr	r2, [r8, #48]
c7e008f8:	e0652002 	rsb	r2, r5, r2
c7e008fc:	e0933002 	adds	r3, r3, r2
c7e00900:	e2a44000 	adc	r4, r4, #0	; 0x0
c7e00904:	ea000009 	b	c7e00930 <get_ticks+0x60>
	} else {
		/* we have an overflow ... */
		gd->timer_reset_value += gd->lastinc + gd->timer_rate_hz - now;
c7e00908:	e2881028 	add	r1, r8, #40	; 0x28
c7e0090c:	e8910003 	ldm	r1, {r0, r1}
c7e00910:	e5982030 	ldr	r2, [r8, #48]
c7e00914:	e598301c 	ldr	r3, [r8, #28]
c7e00918:	e0833002 	add	r3, r3, r2
c7e0091c:	e0653003 	rsb	r3, r5, r3
c7e00920:	e0906003 	adds	r6, r0, r3
c7e00924:	e2a17000 	adc	r7, r1, #0	; 0x0
c7e00928:	e1a03006 	mov	r3, r6
c7e0092c:	e1a04007 	mov	r4, r7
c7e00930:	e58c3028 	str	r3, [ip, #40]
c7e00934:	e58c402c 	str	r4, [ip, #44]
	}
	gd->lastinc = now;
c7e00938:	e58c5030 	str	r5, [ip, #48]

	return gd->timer_reset_value;
c7e0093c:	e28c4028 	add	r4, ip, #40	; 0x28
c7e00940:	e8940018 	ldm	r4, {r3, r4}
}
c7e00944:	e1a01004 	mov	r1, r4
c7e00948:	e1a00003 	mov	r0, r3
c7e0094c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e00950:	7f006000 	.word	0x7f006000

c7e00954 <get_tbclk>:
/*
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 */
ulong get_tbclk(void)
{
c7e00954:	e92d4010 	push	{r4, lr}
	/* We overrun in 100s */
//	return (ulong)(timer_load_val / 100);
	return (ulong)(gd->timer_rate_hz / 100);
c7e00958:	e598001c 	ldr	r0, [r8, #28]
c7e0095c:	e3a01064 	mov	r1, #100	; 0x64
c7e00960:	eb00a6e8 	bl	c7e2a508 <__udivsi3>
}
c7e00964:	e8bd8010 	pop	{r4, pc}

c7e00968 <__udelay>:
{
	return get_timer_masked() - base;
}

void __udelay(unsigned long usec)
{
c7e00968:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e0096c:	e1a06000 	mov	r6, r0
	unsigned long long tmp;
	ulong tmo;

	tmo = (usec + 9) / 10;
	tmp = get_ticks() + tmo;	/* get current timestamp */
c7e00970:	ebffffd6 	bl	c7e008d0 <get_ticks>
c7e00974:	e1a04000 	mov	r4, r0
c7e00978:	e1a05001 	mov	r5, r1
c7e0097c:	e2860009 	add	r0, r6, #9	; 0x9
c7e00980:	e3a0100a 	mov	r1, #10	; 0xa
c7e00984:	eb00a6df 	bl	c7e2a508 <__udivsi3>
c7e00988:	e0946000 	adds	r6, r4, r0
c7e0098c:	e2a57000 	adc	r7, r5, #0	; 0x0

	while (get_ticks() < tmp)/* loop till event */
c7e00990:	ebffffce 	bl	c7e008d0 <get_ticks>
c7e00994:	e1570001 	cmp	r7, r1
c7e00998:	8afffffc 	bhi	c7e00990 <__udelay+0x28>
c7e0099c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
c7e009a0:	e1560000 	cmp	r6, r0
c7e009a4:	8afffff9 	bhi	c7e00990 <__udelay+0x28>
c7e009a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e009ac <get_timer_masked>:
//	return (ulong)(timer_load_val / 100);
	return (ulong)(gd->timer_rate_hz / 100);
}

ulong get_timer_masked(void)
{
c7e009ac:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
	unsigned long long res = get_ticks();
c7e009b0:	ebffffc6 	bl	c7e008d0 <get_ticks>
c7e009b4:	e1a04001 	mov	r4, r1
c7e009b8:	e1a05000 	mov	r5, r0
//	do_div (res, (timer_load_val / (100 * CONFIG_SYS_HZ)));
	do_div (res, (gd->timer_rate_hz / (100 * CONFIG_SYS_HZ)));
c7e009bc:	e59f1038 	ldr	r1, [pc, #56]	; c7e009fc <get_timer_masked+0x50>
c7e009c0:	e598001c 	ldr	r0, [r8, #28]
	return (ulong)(gd->timer_rate_hz / 100);
}

ulong get_timer_masked(void)
{
	unsigned long long res = get_ticks();
c7e009c4:	e58d5000 	str	r5, [sp]
c7e009c8:	e58d4004 	str	r4, [sp, #4]
//	do_div (res, (timer_load_val / (100 * CONFIG_SYS_HZ)));
	do_div (res, (gd->timer_rate_hz / (100 * CONFIG_SYS_HZ)));
c7e009cc:	eb00a6cd 	bl	c7e2a508 <__udivsi3>
c7e009d0:	e3540000 	cmp	r4, #0	; 0x0
c7e009d4:	e1a01000 	mov	r1, r0
c7e009d8:	1a000003 	bne	c7e009ec <get_timer_masked+0x40>
c7e009dc:	e1a00005 	mov	r0, r5
c7e009e0:	eb00a6c8 	bl	c7e2a508 <__udivsi3>
c7e009e4:	e58d0000 	str	r0, [sp]
c7e009e8:	ea000001 	b	c7e009f4 <get_timer_masked+0x48>
c7e009ec:	e1a0000d 	mov	r0, sp
c7e009f0:	eb008193 	bl	c7e21044 <__div64_32>
	return res;
}
c7e009f4:	e59d0000 	ldr	r0, [sp]
c7e009f8:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e009fc:	000186a0 	.word	0x000186a0

c7e00a00 <get_timer>:

ulong get_timer(ulong base)
{
c7e00a00:	e92d4010 	push	{r4, lr}
c7e00a04:	e1a04000 	mov	r4, r0
	return get_timer_masked() - base;
c7e00a08:	ebffffe7 	bl	c7e009ac <get_timer_masked>
}
c7e00a0c:	e0640000 	rsb	r0, r4, r0
c7e00a10:	e8bd8010 	pop	{r4, pc}

c7e00a14 <timer_init>:
//static unsigned long lastdec;
/* Monotonic incrementing timer */
//static unsigned long long timestamp;

int timer_init(void)
{
c7e00a14:	e92d4070 	push	{r4, r5, r6, lr}
	 * keep values up to 40,000s, i.e., 11 hours. This should be
	 * enough for most uses:-) Possible optimizations: select a
	 * binary-friendly frequency, e.g., 1ms / 128. Also calculate
	 * the prescaler automatically for other PCLK frequencies.
	 */
	timers->TCFG0 = PRESCALER << 8;
c7e00a18:	e59f4078 	ldr	r4, [pc, #120]	; c7e00a98 <timer_init+0x84>
c7e00a1c:	e3a03ca7 	mov	r3, #42752	; 0xa700
c7e00a20:	e5843000 	str	r3, [r4]
//	if (timer_load_val == 0) {
//		timer_load_val = get_PCLK() / PRESCALER * (100 / 4); /* 100s */
//		timers->TCFG1 = (timers->TCFG1 & ~0xf0000) | 0x20000;
//	}
	gd->timer_rate_hz = get_PCLK() / PRESCALER * (100 / 4); /* 100s */
c7e00a24:	e1a05008 	mov	r5, r8
c7e00a28:	ebffff49 	bl	c7e00754 <get_PCLK>
c7e00a2c:	e3a010a7 	mov	r1, #167	; 0xa7
c7e00a30:	eb00a6b4 	bl	c7e2a508 <__udivsi3>
c7e00a34:	e3a03019 	mov	r3, #25	; 0x19
c7e00a38:	e0030390 	mul	r3, r0, r3
c7e00a3c:	e585301c 	str	r3, [r5, #28]
	timers->TCFG1 = (timers->TCFG1 & ~0xf0000) | 0x20000;
c7e00a40:	e5943004 	ldr	r3, [r4, #4]
	timers->TCON = (timers->TCON & ~0x00700000) | TCON_4_AUTO | COUNT_4_ON;
//	timestamp = 0;
	gd->timer_reset_value = 0;

	return 0;
}
c7e00a44:	e3a00000 	mov	r0, #0	; 0x0
//	if (timer_load_val == 0) {
//		timer_load_val = get_PCLK() / PRESCALER * (100 / 4); /* 100s */
//		timers->TCFG1 = (timers->TCFG1 & ~0xf0000) | 0x20000;
//	}
	gd->timer_rate_hz = get_PCLK() / PRESCALER * (100 / 4); /* 100s */
	timers->TCFG1 = (timers->TCFG1 & ~0xf0000) | 0x20000;
c7e00a48:	e3c3380f 	bic	r3, r3, #983040	; 0xf0000
c7e00a4c:	e3833802 	orr	r3, r3, #131072	; 0x20000
c7e00a50:	e5843004 	str	r3, [r4, #4]
	/* load value for 10 ms timeout */
//	lastdec = timers->TCNTB4 = timer_load_val;
	gd->lastinc = timers->TCNTB4 = gd->timer_rate_hz;
c7e00a54:	e598301c 	ldr	r3, [r8, #28]
c7e00a58:	e584303c 	str	r3, [r4, #60]
c7e00a5c:	e594303c 	ldr	r3, [r4, #60]
c7e00a60:	e5883030 	str	r3, [r8, #48]
	/* auto load, manual update of Timer 4 */
	timers->TCON = (timers->TCON & ~0x00700000) | TCON_4_AUTO |
c7e00a64:	e5943008 	ldr	r3, [r4, #8]
c7e00a68:	e3c33607 	bic	r3, r3, #7340032	; 0x700000
c7e00a6c:	e3833606 	orr	r3, r3, #6291456	; 0x600000
c7e00a70:	e5843008 	str	r3, [r4, #8]
		TCON_4_UPDATE;

	/* auto load, start Timer 4 */
	timers->TCON = (timers->TCON & ~0x00700000) | TCON_4_AUTO | COUNT_4_ON;
c7e00a74:	e5943008 	ldr	r3, [r4, #8]
c7e00a78:	e3c33607 	bic	r3, r3, #7340032	; 0x700000
c7e00a7c:	e3833605 	orr	r3, r3, #5242880	; 0x500000
c7e00a80:	e5843008 	str	r3, [r4, #8]
//	timestamp = 0;
	gd->timer_reset_value = 0;
c7e00a84:	e3a03000 	mov	r3, #0	; 0x0
c7e00a88:	e3a04000 	mov	r4, #0	; 0x0
c7e00a8c:	e5883028 	str	r3, [r8, #40]
c7e00a90:	e588402c 	str	r4, [r8, #44]

	return 0;
}
c7e00a94:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e00a98:	7f006000 	.word	0x7f006000

c7e00a9c <__coloured_LED_init>:
/************************************************************************
 * Coloured LED functionality
 ************************************************************************
 * May be supplied by boards if desired
 */
inline void __coloured_LED_init(void) {}
c7e00a9c:	e12fff1e 	bx	lr

c7e00aa0 <__red_led_on>:
void coloured_LED_init(void)
	__attribute__((weak, alias("__coloured_LED_init")));
inline void __red_led_on(void) {GPMDAT_REG &= ~0x0005;}
c7e00aa0:	e59f200c 	ldr	r2, [pc, #12]	; c7e00ab4 <__red_led_on+0x14>
c7e00aa4:	e5923824 	ldr	r3, [r2, #2084]
c7e00aa8:	e3c33005 	bic	r3, r3, #5	; 0x5
c7e00aac:	e5823824 	str	r3, [r2, #2084]
c7e00ab0:	e12fff1e 	bx	lr
c7e00ab4:	7f008000 	.word	0x7f008000

c7e00ab8 <__red_led_off>:
void red_led_on(void) __attribute__((weak, alias("__red_led_on")));
inline void __red_led_off(void) {GPMDAT_REG |= 0x0005;}
c7e00ab8:	e59f200c 	ldr	r2, [pc, #12]	; c7e00acc <__red_led_off+0x14>
c7e00abc:	e5923824 	ldr	r3, [r2, #2084]
c7e00ac0:	e3833005 	orr	r3, r3, #5	; 0x5
c7e00ac4:	e5823824 	str	r3, [r2, #2084]
c7e00ac8:	e12fff1e 	bx	lr
c7e00acc:	7f008000 	.word	0x7f008000

c7e00ad0 <__green_led_on>:
void red_led_off(void) __attribute__((weak, alias("__red_led_off")));
inline void __green_led_on(void) {}
c7e00ad0:	e12fff1e 	bx	lr

c7e00ad4 <__green_led_off>:
void green_led_on(void) __attribute__((weak, alias("__green_led_on")));
inline void __green_led_off(void) {}
c7e00ad4:	e12fff1e 	bx	lr

c7e00ad8 <__yellow_led_on>:
void green_led_off(void) __attribute__((weak, alias("__green_led_off")));
inline void __yellow_led_on(void) {}
c7e00ad8:	e12fff1e 	bx	lr

c7e00adc <__yellow_led_off>:
void yellow_led_on(void) __attribute__((weak, alias("__yellow_led_on")));
inline void __yellow_led_off(void) {}
c7e00adc:	e12fff1e 	bx	lr

c7e00ae0 <__blue_led_on>:
void yellow_led_off(void) __attribute__((weak, alias("__yellow_led_off")));
inline void __blue_led_on(void) {}
c7e00ae0:	e12fff1e 	bx	lr

c7e00ae4 <__blue_led_off>:
void blue_led_on(void) __attribute__((weak, alias("__blue_led_on")));
inline void __blue_led_off(void) {}
c7e00ae4:	e12fff1e 	bx	lr

c7e00ae8 <__dram_init_banksize>:

int print_cpuinfo(void);

void __dram_init_banksize(void)
{
	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_BASE;
c7e00ae8:	e5981000 	ldr	r1, [r8]
c7e00aec:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c7e00af0:	e5813018 	str	r3, [r1, #24]
	gd->bd->bi_dram[0].size =  gd->ram_size;
c7e00af4:	e5981000 	ldr	r1, [r8]
c7e00af8:	e5983038 	ldr	r3, [r8, #56]
c7e00afc:	e581301c 	str	r3, [r1, #28]
}
c7e00b00:	e12fff1e 	bx	lr

c7e00b04 <__arch_cpu_init>:
	__attribute__((weak, alias("__dram_init_banksize")));

int __arch_cpu_init(void)
{
	return 0;
}
c7e00b04:	e3a00000 	mov	r0, #0	; 0x0
c7e00b08:	e12fff1e 	bx	lr

c7e00b0c <display_banner>:
	gd->baudrate = getenv_ulong("baudrate", 10, CONFIG_BAUDRATE);
	return 0;
}

static int display_banner(void)
{
c7e00b0c:	e92d4010 	push	{r4, lr}
	printf("\n\n%s\n\n", version_string);
c7e00b10:	e59f1034 	ldr	r1, [pc, #52]	; c7e00b4c <display_banner+0x40>
c7e00b14:	e59f0034 	ldr	r0, [pc, #52]	; c7e00b50 <display_banner+0x44>
c7e00b18:	eb001fce 	bl	c7e08a58 <printf>
	debug("U-Boot code: %08lX -> %08lX  BSS: -> %08lX\n",
c7e00b1c:	e59f3030 	ldr	r3, [pc, #48]	; c7e00b54 <display_banner+0x48>
c7e00b20:	e59f0030 	ldr	r0, [pc, #48]	; c7e00b58 <display_banner+0x4c>
c7e00b24:	e5931000 	ldr	r1, [r3]
c7e00b28:	e59f302c 	ldr	r3, [pc, #44]	; c7e00b5c <display_banner+0x50>
c7e00b2c:	e5932000 	ldr	r2, [r3]
c7e00b30:	e59f3028 	ldr	r3, [pc, #40]	; c7e00b60 <display_banner+0x54>
c7e00b34:	e0812002 	add	r2, r1, r2
c7e00b38:	e5933000 	ldr	r3, [r3]
c7e00b3c:	e0813003 	add	r3, r1, r3
c7e00b40:	eb001fc4 	bl	c7e08a58 <printf>
	debug("IRQ Stack: %08lx\n", IRQ_STACK_START);
	debug("FIQ Stack: %08lx\n", FIQ_STACK_START);
#endif

	return (0);
}
c7e00b44:	e3a00000 	mov	r0, #0	; 0x0
c7e00b48:	e8bd8010 	pop	{r4, pc}
c7e00b4c:	c7e2b1f0 	.word	0xc7e2b1f0
c7e00b50:	c7e2dddb 	.word	0xc7e2dddb
c7e00b54:	c7e00040 	.word	0xc7e00040
c7e00b58:	c7e2dde2 	.word	0xc7e2dde2
c7e00b5c:	c7e00048 	.word	0xc7e00048
c7e00b60:	c7e0004c 	.word	0xc7e0004c

c7e00b64 <init_baudrate>:
#if defined(CONFIG_ARM_DCC) && !defined(CONFIG_BAUDRATE)
#define CONFIG_BAUDRATE 115200
#endif

static int init_baudrate(void)
{
c7e00b64:	e92d4010 	push	{r4, lr}
	gd->baudrate = getenv_ulong("baudrate", 10, CONFIG_BAUDRATE);
c7e00b68:	e3a0100a 	mov	r1, #10	; 0xa
c7e00b6c:	e59f2014 	ldr	r2, [pc, #20]	; c7e00b88 <init_baudrate+0x24>
c7e00b70:	e59f0014 	ldr	r0, [pc, #20]	; c7e00b8c <init_baudrate+0x28>
c7e00b74:	e1a04008 	mov	r4, r8
c7e00b78:	eb001963 	bl	c7e0710c <getenv_ulong>
c7e00b7c:	e5840008 	str	r0, [r4, #8]
	return 0;
}
c7e00b80:	e3a00000 	mov	r0, #0	; 0x0
c7e00b84:	e8bd8010 	pop	{r4, pc}
c7e00b88:	0001c200 	.word	0x0001c200
c7e00b8c:	c7e2de0e 	.word	0xc7e2de0e

c7e00b90 <hang>:
	/* NOTREACHED - no way out of command loop except booting */
}

void hang(void)
{
	puts("### ERROR ### Please RESET the board ###\n");
c7e00b90:	e59f0004 	ldr	r0, [pc, #4]	; c7e00b9c <hang+0xc>
c7e00b94:	eb001f94 	bl	c7e089ec <puts>
c7e00b98:	eafffffe 	b	c7e00b98 <hang+0x8>
c7e00b9c:	c7e2de17 	.word	0xc7e2de17

c7e00ba0 <board_init_r>:
	ulong malloc_start;
#if !defined(CONFIG_SYS_NO_FLASH)
	ulong flash_size;
#endif

	gd = id;
c7e00ba0:	e1a08000 	mov	r8, r0

	gd->flags |= GD_FLG_RELOC;	/* tell others: relocation done */
	bootstage_mark_name(BOOTSTAGE_ID_START_UBOOT_R, "board_init_r");

	monitor_flash_len = _end_ofs;
c7e00ba4:	e59f30a8 	ldr	r3, [pc, #168]	; c7e00c54 <board_init_r+0xb4>
	ulong flash_size;
#endif

	gd = id;

	gd->flags |= GD_FLG_RELOC;	/* tell others: relocation done */
c7e00ba8:	e5982004 	ldr	r2, [r8, #4]
	bootstage_mark_name(BOOTSTAGE_ID_START_UBOOT_R, "board_init_r");

	monitor_flash_len = _end_ofs;
c7e00bac:	e5933000 	ldr	r3, [r3]
c7e00bb0:	e59f40a0 	ldr	r4, [pc, #160]	; c7e00c58 <board_init_r+0xb8>
	ulong flash_size;
#endif

	gd = id;

	gd->flags |= GD_FLG_RELOC;	/* tell others: relocation done */
c7e00bb4:	e3822001 	orr	r2, r2, #1	; 0x1
c7e00bb8:	e5882004 	str	r2, [r8, #4]
	bootstage_mark_name(BOOTSTAGE_ID_START_UBOOT_R, "board_init_r");

	monitor_flash_len = _end_ofs;
c7e00bbc:	e5843000 	str	r3, [r4]
 *
 ************************************************************************
 */

void board_init_r(gd_t *id, ulong dest_addr)
{
c7e00bc0:	e1a05001 	mov	r5, r1
	bootstage_mark_name(BOOTSTAGE_ID_START_UBOOT_R, "board_init_r");

	monitor_flash_len = _end_ofs;

	/* Enable caches */
	enable_caches();
c7e00bc4:	eb0001f1 	bl	c7e01390 <__enable_caches>

	debug("monitor flash len: %08lX\n", monitor_flash_len);
c7e00bc8:	e5941000 	ldr	r1, [r4]
c7e00bcc:	e59f0088 	ldr	r0, [pc, #136]	; c7e00c5c <board_init_r+0xbc>
c7e00bd0:	eb001fa0 	bl	c7e08a58 <printf>
	board_init();	/* Setup chipselects */
c7e00bd4:	eb00a60b 	bl	c7e2a408 <board_init>
#endif
#ifdef CONFIG_SERIAL_MULTI
	serial_initialize();
#endif

	debug("Now running in RAM - U-Boot at: %08lx\n", dest_addr);
c7e00bd8:	e1a01005 	mov	r1, r5
c7e00bdc:	e59f007c 	ldr	r0, [pc, #124]	; c7e00c60 <board_init_r+0xc0>
c7e00be0:	eb001f9c 	bl	c7e08a58 <printf>
	post_output_backlog();
#endif

	/* The Malloc area is immediately below the monitor copy in DRAM */
	malloc_start = dest_addr - TOTAL_MALLOC_LEN;
	mem_malloc_init (malloc_start, TOTAL_MALLOC_LEN);
c7e00be4:	e3a01942 	mov	r1, #1081344	; 0x108000
c7e00be8:	e2450942 	sub	r0, r5, #1081344	; 0x108000
c7e00bec:	eb002086 	bl	c7e08e0c <mem_malloc_init>
		hang();
	}
#endif

#if defined(CONFIG_CMD_NAND)
	puts("NAND:  ");
c7e00bf0:	e59f006c 	ldr	r0, [pc, #108]	; c7e00c64 <board_init_r+0xc4>
c7e00bf4:	eb001f7c 	bl	c7e089ec <puts>
	nand_init();		/* go init the NAND */
c7e00bf8:	eb0047e8 	bl	c7e12ba0 <nand_init>
#if defined(CONFIG_CMD_ONENAND)
	onenand_init();
#endif

#ifdef CONFIG_GENERIC_MMC
       puts("MMC:   ");
c7e00bfc:	e59f0064 	ldr	r0, [pc, #100]	; c7e00c68 <board_init_r+0xc8>
c7e00c00:	eb001f79 	bl	c7e089ec <puts>
       mmc_initialize(gd->bd);
c7e00c04:	e5980000 	ldr	r0, [r8]
c7e00c08:	eb003fbe 	bl	c7e10b08 <mmc_initialize>
	AT91F_DataflashInit();
	dataflash_print_info();
#endif

	/* initialize environment */
	env_relocate();
c7e00c0c:	eb0024f1 	bl	c7e09fd8 <env_relocate>

#if defined(CONFIG_CMD_PCI) || defined(CONFIG_PCI)
	arm_pci_init();
#endif

	stdio_init();	/* get the devices list going. */
c7e00c10:	eb003799 	bl	c7e0ea7c <stdio_init>

	jumptable_init();
c7e00c14:	eb002611 	bl	c7e0a460 <jumptable_init>
#if defined(CONFIG_API)
	/* Initialize API */
	api_init();
#endif

	console_init_r();	/* fully init console as a device */
c7e00c18:	eb001fd2 	bl	c7e08b68 <console_init_r>
		smc_set_mac_addr(enetaddr);
	}
#endif /* CONFIG_DRIVER_SMC91111 || CONFIG_DRIVER_LAN91C96 */

	/* Initialize from environment */
	load_addr = getenv_ulong("loadaddr", 16, load_addr);
c7e00c1c:	e59f4048 	ldr	r4, [pc, #72]	; c7e00c6c <board_init_r+0xcc>
	/* miscellaneous platform dependent initialisations */
	misc_init_r();
#endif

	 /* set up exceptions */
	interrupt_init();
c7e00c20:	eb00012d 	bl	c7e010dc <interrupt_init>
	/* enable exceptions */
	enable_interrupts();
c7e00c24:	eb000133 	bl	c7e010f8 <enable_interrupts>
		smc_set_mac_addr(enetaddr);
	}
#endif /* CONFIG_DRIVER_SMC91111 || CONFIG_DRIVER_LAN91C96 */

	/* Initialize from environment */
	load_addr = getenv_ulong("loadaddr", 16, load_addr);
c7e00c28:	e3a01010 	mov	r1, #16	; 0x10
c7e00c2c:	e5942000 	ldr	r2, [r4]
c7e00c30:	e59f0038 	ldr	r0, [pc, #56]	; c7e00c70 <board_init_r+0xd0>
c7e00c34:	eb001934 	bl	c7e0710c <getenv_ulong>
c7e00c38:	e5840000 	str	r0, [r4]

#ifdef CONFIG_BITBANGMII
	bb_miiphy_init();
#endif
#if defined(CONFIG_CMD_NET)
	puts("Net:   ");
c7e00c3c:	e59f0030 	ldr	r0, [pc, #48]	; c7e00c74 <board_init_r+0xd4>
c7e00c40:	eb001f69 	bl	c7e089ec <puts>
	eth_initialize(gd->bd);
c7e00c44:	e5980000 	ldr	r0, [r8]
c7e00c48:	eb009afb 	bl	c7e2783c <eth_initialize>
	}
#endif

	/* main_loop() can return to retry autoboot, if so just run it again. */
	for (;;) {
		main_loop();
c7e00c4c:	eb003621 	bl	c7e0e4d8 <main_loop>
c7e00c50:	eafffffd 	b	c7e00c4c <board_init_r+0xac>
c7e00c54:	c7e00050 	.word	0xc7e00050
c7e00c58:	c7e40000 	.word	0xc7e40000
c7e00c5c:	c7e2de41 	.word	0xc7e2de41
c7e00c60:	c7e2de5b 	.word	0xc7e2de5b
c7e00c64:	c7e2de82 	.word	0xc7e2de82
c7e00c68:	c7e2de8a 	.word	0xc7e2de8a
c7e00c6c:	c7e353cc 	.word	0xc7e353cc
c7e00c70:	c7e2de92 	.word	0xc7e2de92
c7e00c74:	c7e2de9b 	.word	0xc7e2de9b

c7e00c78 <board_init_f>:
	ulong reg;
#endif
	bootstage_mark_name(BOOTSTAGE_ID_START_UBOOT_F, "board_init_f");

	/* Pointer is writable since we allocated a register for it */
	gd = (gd_t *) ((CONFIG_SYS_INIT_SP_ADDR) & ~0x07);
c7e00c78:	e59f81c4 	ldr	r8, [pc, #452]	; c7e00e44 <board_init_f+0x1cc>
	/* compiler optimization barrier needed for GCC >= 3.4 */
	__asm__ __volatile__("": : :"memory");

	memset((void *)gd, 0, sizeof(gd_t));
c7e00c7c:	e3a01000 	mov	r1, #0	; 0x0
c7e00c80:	e3a02078 	mov	r2, #120	; 0x78
c7e00c84:	e1a00008 	mov	r0, r8
c7e00c88:	eb0087c1 	bl	c7e22b94 <memset>

	gd->mon_len = _bss_end_ofs;
c7e00c8c:	e59f31b4 	ldr	r3, [pc, #436]	; c7e00e48 <board_init_f+0x1d0>
#elif defined CONFIG_OF_SEPARATE
	/* FDT is at end of image */
	gd->fdt_blob = (void *)(_end_ofs + _TEXT_BASE);
#endif
	/* Allow the early environment to override the fdt address */
	gd->fdt_blob = (void *)getenv_ulong("fdtcontroladdr", 16,
c7e00c90:	e59f01b4 	ldr	r0, [pc, #436]	; c7e00e4c <board_init_f+0x1d4>
	/* compiler optimization barrier needed for GCC >= 3.4 */
	__asm__ __volatile__("": : :"memory");

	memset((void *)gd, 0, sizeof(gd_t));

	gd->mon_len = _bss_end_ofs;
c7e00c94:	e5933000 	ldr	r3, [r3]
#elif defined CONFIG_OF_SEPARATE
	/* FDT is at end of image */
	gd->fdt_blob = (void *)(_end_ofs + _TEXT_BASE);
#endif
	/* Allow the early environment to override the fdt address */
	gd->fdt_blob = (void *)getenv_ulong("fdtcontroladdr", 16,
c7e00c98:	e3a01010 	mov	r1, #16	; 0x10
	/* compiler optimization barrier needed for GCC >= 3.4 */
	__asm__ __volatile__("": : :"memory");

	memset((void *)gd, 0, sizeof(gd_t));

	gd->mon_len = _bss_end_ofs;
c7e00c9c:	e588303c 	str	r3, [r8, #60]
#elif defined CONFIG_OF_SEPARATE
	/* FDT is at end of image */
	gd->fdt_blob = (void *)(_end_ofs + _TEXT_BASE);
#endif
	/* Allow the early environment to override the fdt address */
	gd->fdt_blob = (void *)getenv_ulong("fdtcontroladdr", 16,
c7e00ca0:	e5982050 	ldr	r2, [r8, #80]
	/* compiler optimization barrier needed for GCC >= 3.4 */
	__asm__ __volatile__("": : :"memory");

	memset((void *)gd, 0, sizeof(gd_t));

	gd->mon_len = _bss_end_ofs;
c7e00ca4:	e1a04008 	mov	r4, r8
#elif defined CONFIG_OF_SEPARATE
	/* FDT is at end of image */
	gd->fdt_blob = (void *)(_end_ofs + _TEXT_BASE);
#endif
	/* Allow the early environment to override the fdt address */
	gd->fdt_blob = (void *)getenv_ulong("fdtcontroladdr", 16,
c7e00ca8:	eb001917 	bl	c7e0710c <getenv_ulong>
						(uintptr_t)gd->fdt_blob);
GPMDAT_REG = 0x0003;
c7e00cac:	e59f319c 	ldr	r3, [pc, #412]	; c7e00e50 <board_init_f+0x1d8>
c7e00cb0:	e3a02003 	mov	r2, #3	; 0x3
#elif defined CONFIG_OF_SEPARATE
	/* FDT is at end of image */
	gd->fdt_blob = (void *)(_end_ofs + _TEXT_BASE);
#endif
	/* Allow the early environment to override the fdt address */
	gd->fdt_blob = (void *)getenv_ulong("fdtcontroladdr", 16,
c7e00cb4:	e5840050 	str	r0, [r4, #80]
						(uintptr_t)gd->fdt_blob);
GPMDAT_REG = 0x0003;
c7e00cb8:	e59f5194 	ldr	r5, [pc, #404]	; c7e00e54 <board_init_f+0x1dc>
c7e00cbc:	e5832824 	str	r2, [r3, #2084]
c7e00cc0:	ea000004 	b	c7e00cd8 <board_init_f+0x60>
	for (init_fnc_ptr = init_sequence; *init_fnc_ptr; ++init_fnc_ptr) {
		if ((*init_fnc_ptr)() != 0) {
c7e00cc4:	e12fff37 	blx	r7
c7e00cc8:	e3500000 	cmp	r0, #0	; 0x0
c7e00ccc:	e2855004 	add	r5, r5, #4	; 0x4
c7e00cd0:	0a000000 	beq	c7e00cd8 <board_init_f+0x60>
			hang ();
c7e00cd4:	ebffffad 	bl	c7e00b90 <hang>
#endif
	/* Allow the early environment to override the fdt address */
	gd->fdt_blob = (void *)getenv_ulong("fdtcontroladdr", 16,
						(uintptr_t)gd->fdt_blob);
GPMDAT_REG = 0x0003;
	for (init_fnc_ptr = init_sequence; *init_fnc_ptr; ++init_fnc_ptr) {
c7e00cd8:	e5157004 	ldr	r7, [r5, #-4]
c7e00cdc:	e3570000 	cmp	r7, #0	; 0x0
c7e00ce0:	1afffff7 	bne	c7e00cc4 <board_init_f+0x4c>
		panic("** CONFIG_OF_CONTROL defined but no FDT - please see "
			"doc/README.fdt-control");
	}
#endif

	debug("monitor len: %08lX\n", gd->mon_len);
c7e00ce4:	e598103c 	ldr	r1, [r8, #60]
c7e00ce8:	e59f0168 	ldr	r0, [pc, #360]	; c7e00e58 <board_init_f+0x1e0>
c7e00cec:	eb001f59 	bl	c7e08a58 <printf>
	/*
	 * Ram is setup, size stored in gd !!
	 */
	debug("ramsize: %08lX\n", gd->ram_size);
c7e00cf0:	e59f0164 	ldr	r0, [pc, #356]	; c7e00e5c <board_init_f+0x1e4>
c7e00cf4:	e5981038 	ldr	r1, [r8, #56]
c7e00cf8:	eb001f56 	bl	c7e08a58 <printf>
	debug("Reserving %ldk for protected RAM at %08lx\n", reg, addr);
#endif /* CONFIG_PRAM */

#if !(defined(CONFIG_SYS_ICACHE_OFF) && defined(CONFIG_SYS_DCACHE_OFF))
	/* reserve TLB table */
	addr -= (4096 * 4);
c7e00cfc:	e59f415c 	ldr	r4, [pc, #348]	; c7e00e60 <board_init_f+0x1e8>
	 * get fixed.
	 */
	gd->ram_size -= CONFIG_SYS_MEM_TOP_HIDE;
#endif

	addr = CONFIG_SYS_SDRAM_BASE + gd->ram_size;
c7e00d00:	e5983038 	ldr	r3, [r8, #56]

	/* round down to next 64 kB limit */
	addr &= ~(0x10000 - 1);

	gd->tlb_addr = addr;
	debug("TLB table at: %08lx\n", addr);
c7e00d04:	e59f0158 	ldr	r0, [pc, #344]	; c7e00e64 <board_init_f+0x1ec>
	debug("Reserving %ldk for protected RAM at %08lx\n", reg, addr);
#endif /* CONFIG_PRAM */

#if !(defined(CONFIG_SYS_ICACHE_OFF) && defined(CONFIG_SYS_DCACHE_OFF))
	/* reserve TLB table */
	addr -= (4096 * 4);
c7e00d08:	e0834004 	add	r4, r3, r4

	/* round down to next 64 kB limit */
	addr &= ~(0x10000 - 1);
c7e00d0c:	e1a04824 	lsr	r4, r4, #16
c7e00d10:	e1a04804 	lsl	r4, r4, #16

	gd->tlb_addr = addr;
	debug("TLB table at: %08lx\n", addr);
c7e00d14:	e1a01004 	mov	r1, r4
	addr -= (4096 * 4);

	/* round down to next 64 kB limit */
	addr &= ~(0x10000 - 1);

	gd->tlb_addr = addr;
c7e00d18:	e588404c 	str	r4, [r8, #76]
	debug("TLB table at: %08lx\n", addr);
c7e00d1c:	eb001f4d 	bl	c7e08a58 <printf>
#endif

	/* round down to next 4 kB limit */
	addr &= ~(4096 - 1);
	debug("Top of RAM usable for U-Boot at: %08lx\n", addr);
c7e00d20:	e1a01004 	mov	r1, r4
c7e00d24:	e59f013c 	ldr	r0, [pc, #316]	; c7e00e68 <board_init_f+0x1f0>
c7e00d28:	eb001f4a 	bl	c7e08a58 <printf>
#ifdef CONFIG_LCD
#ifdef CONFIG_FB_ADDR
	gd->fb_base = CONFIG_FB_ADDR;
#else
	/* reserve memory for LCD display (always full pages) */
	addr = lcd_setmem(addr);
c7e00d2c:	e1a00004 	mov	r0, r4
c7e00d30:	eb003144 	bl	c7e0d248 <lcd_setmem>
	gd->fb_base = addr;
c7e00d34:	e1a03008 	mov	r3, r8
c7e00d38:	e5830018 	str	r0, [r3, #24]

	/*
	 * reserve memory for U-Boot code, data & bss
	 * round down to next 4 kB limit
	 */
	addr -= gd->mon_len;
c7e00d3c:	e598203c 	ldr	r2, [r8, #60]
	addr &= ~(4096 - 1);

	debug("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
c7e00d40:	e598103c 	ldr	r1, [r8, #60]

	/*
	 * reserve memory for U-Boot code, data & bss
	 * round down to next 4 kB limit
	 */
	addr -= gd->mon_len;
c7e00d44:	e0624000 	rsb	r4, r2, r0
	addr &= ~(4096 - 1);
c7e00d48:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
c7e00d4c:	e3c4400f 	bic	r4, r4, #15	; 0xf
	debug("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
#ifndef CONFIG_SPL_BUILD
	/*
	 * reserve memory for malloc() arena
	 */
	addr_sp = addr - TOTAL_MALLOC_LEN;
c7e00d50:	e2445942 	sub	r5, r4, #1081344	; 0x108000
	 * round down to next 4 kB limit
	 */
	addr -= gd->mon_len;
	addr &= ~(4096 - 1);

	debug("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
c7e00d54:	e1a01521 	lsr	r1, r1, #10
c7e00d58:	e1a02004 	mov	r2, r4
c7e00d5c:	e59f0108 	ldr	r0, [pc, #264]	; c7e00e6c <board_init_f+0x1f4>
c7e00d60:	eb001f3c 	bl	c7e08a58 <printf>
#ifndef CONFIG_SPL_BUILD
	/*
	 * reserve memory for malloc() arena
	 */
	addr_sp = addr - TOTAL_MALLOC_LEN;
	debug("Reserving %dk for malloc() at: %08lx\n",
c7e00d64:	e1a02005 	mov	r2, r5
c7e00d68:	e3a01e42 	mov	r1, #1056	; 0x420
c7e00d6c:	e59f00fc 	ldr	r0, [pc, #252]	; c7e00e70 <board_init_f+0x1f8>
c7e00d70:	eb001f38 	bl	c7e08a58 <printf>
			TOTAL_MALLOC_LEN >> 10, addr_sp);
	/*
	 * (permanently) allocate a Board Info struct
	 * and a permanent copy of the "global" data
	 */
	addr_sp -= sizeof (bd_t);
c7e00d74:	e2452020 	sub	r2, r5, #32	; 0x20
	bd = (bd_t *) addr_sp;
	gd->bd = bd;
c7e00d78:	e5882000 	str	r2, [r8]
	debug("Reserving %zu Bytes for Board Info at: %08lx\n",
c7e00d7c:	e3a01020 	mov	r1, #32	; 0x20
c7e00d80:	e59f00ec 	ldr	r0, [pc, #236]	; c7e00e74 <board_init_f+0x1fc>
c7e00d84:	eb001f33 	bl	c7e08a58 <printf>
			sizeof (bd_t), addr_sp);

#ifdef CONFIG_MACH_TYPE
	gd->bd->bi_arch_number = CONFIG_MACH_TYPE; /* board id for Linux */
c7e00d88:	e59f30e8 	ldr	r3, [pc, #232]	; c7e00e78 <board_init_f+0x200>
c7e00d8c:	e5982000 	ldr	r2, [r8]
#endif

	addr_sp -= sizeof (gd_t);
c7e00d90:	e2456098 	sub	r6, r5, #152	; 0x98
	gd->bd = bd;
	debug("Reserving %zu Bytes for Board Info at: %08lx\n",
			sizeof (bd_t), addr_sp);

#ifdef CONFIG_MACH_TYPE
	gd->bd->bi_arch_number = CONFIG_MACH_TYPE; /* board id for Linux */
c7e00d94:	e5823004 	str	r3, [r2, #4]
#endif

	addr_sp -= sizeof (gd_t);
	id = (gd_t *) addr_sp;
	debug("Reserving %zu Bytes for Global Data at: %08lx\n",
c7e00d98:	e3a01078 	mov	r1, #120	; 0x78
c7e00d9c:	e1a02006 	mov	r2, r6
c7e00da0:	e59f00d4 	ldr	r0, [pc, #212]	; c7e00e7c <board_init_f+0x204>
c7e00da4:	eb001f2b 	bl	c7e08a58 <printf>
#endif
	/* leave 3 words for abort-stack    */
	addr_sp -= 12;

	/* 8-byte alignment for ABI compliance */
	addr_sp &= ~0x07;
c7e00da8:	e24550a8 	sub	r5, r5, #168	; 0xa8
	id = (gd_t *) addr_sp;
	debug("Reserving %zu Bytes for Global Data at: %08lx\n",
			sizeof (gd_t), addr_sp);

	/* setup stackpointer for exeptions */
	gd->irq_sp = addr_sp;
c7e00dac:	e5886040 	str	r6, [r8, #64]
	addr_sp &= ~0x07;
#else
	addr_sp += 128;	/* leave 32 words for abort-stack   */
	gd->irq_sp = addr_sp;
#endif
	red_led_on();
c7e00db0:	ebffff3a 	bl	c7e00aa0 <__red_led_on>
	debug("New Stack Pointer is: %08lx\n", addr_sp);
c7e00db4:	e1a01005 	mov	r1, r5
c7e00db8:	e59f00c0 	ldr	r0, [pc, #192]	; c7e00e80 <board_init_f+0x208>
c7e00dbc:	eb001f25 	bl	c7e08a58 <printf>
#ifdef CONFIG_POST
	post_bootmode_init();
	post_run(NULL, POST_ROM | post_bootmode_get(0));
#endif

	gd->bd->bi_baudrate = gd->baudrate;
c7e00dc0:	e5982000 	ldr	r2, [r8]
c7e00dc4:	e5983008 	ldr	r3, [r8, #8]
c7e00dc8:	e5823000 	str	r3, [r2]
	/* Ram ist board specific, so move it to board code ... */
	dram_init_banksize();
c7e00dcc:	eb00a59c 	bl	c7e2a444 <dram_init_banksize>
static int display_dram_config(void)
{
	int i;

#ifdef DEBUG
	puts("RAM Configuration:\n");
c7e00dd0:	e59f00ac 	ldr	r0, [pc, #172]	; c7e00e84 <board_init_f+0x20c>
c7e00dd4:	eb001f04 	bl	c7e089ec <puts>

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		printf("Bank #%d: %08lx ", i, gd->bd->bi_dram[i].start);
c7e00dd8:	e5983000 	ldr	r3, [r8]
c7e00ddc:	e1a01007 	mov	r1, r7
c7e00de0:	e5932018 	ldr	r2, [r3, #24]
c7e00de4:	e59f009c 	ldr	r0, [pc, #156]	; c7e00e88 <board_init_f+0x210>
c7e00de8:	eb001f1a 	bl	c7e08a58 <printf>
		print_size(gd->bd->bi_dram[i].size, "\n");
c7e00dec:	e5983000 	ldr	r3, [r8]
c7e00df0:	e59f2094 	ldr	r2, [pc, #148]	; c7e00e8c <board_init_f+0x214>
c7e00df4:	e593001c 	ldr	r0, [r3, #28]
c7e00df8:	e1a01007 	mov	r1, r7
c7e00dfc:	eb007fd5 	bl	c7e20d58 <print_size>
	dram_init_banksize();
	display_dram_config();	/* and display it */

	gd->relocaddr = addr;
	gd->start_addr_sp = addr_sp;
	gd->reloc_off = addr - _TEXT_BASE;
c7e00e00:	e59f3088 	ldr	r3, [pc, #136]	; c7e00e90 <board_init_f+0x218>
	gd->bd->bi_baudrate = gd->baudrate;
	/* Ram ist board specific, so move it to board code ... */
	dram_init_banksize();
	display_dram_config();	/* and display it */

	gd->relocaddr = addr;
c7e00e04:	e5884034 	str	r4, [r8, #52]
	gd->start_addr_sp = addr_sp;
	gd->reloc_off = addr - _TEXT_BASE;
c7e00e08:	e5933000 	ldr	r3, [r3]
	/* Ram ist board specific, so move it to board code ... */
	dram_init_banksize();
	display_dram_config();	/* and display it */

	gd->relocaddr = addr;
	gd->start_addr_sp = addr_sp;
c7e00e0c:	e5885044 	str	r5, [r8, #68]
	gd->reloc_off = addr - _TEXT_BASE;
c7e00e10:	e0633004 	rsb	r3, r3, r4
c7e00e14:	e5883048 	str	r3, [r8, #72]
	debug("relocation Offset is: %08lx\n", gd->reloc_off);
c7e00e18:	e5981048 	ldr	r1, [r8, #72]
c7e00e1c:	e59f0070 	ldr	r0, [pc, #112]	; c7e00e94 <board_init_f+0x21c>
c7e00e20:	eb001f0c 	bl	c7e08a58 <printf>
	memcpy(id, (void *)gd, sizeof(gd_t));
c7e00e24:	e3a02078 	mov	r2, #120	; 0x78
c7e00e28:	e1a01008 	mov	r1, r8
c7e00e2c:	e1a00006 	mov	r0, r6
c7e00e30:	eb008781 	bl	c7e22c3c <memcpy>

	relocate_code(addr_sp, id, addr);
c7e00e34:	e1a00005 	mov	r0, r5
c7e00e38:	e1a01006 	mov	r1, r6
c7e00e3c:	e1a02004 	mov	r2, r4
c7e00e40:	ebfffca5 	bl	c7e000dc <relocate_code>
c7e00e44:	0c001f80 	.word	0x0c001f80
c7e00e48:	c7e0004c 	.word	0xc7e0004c
c7e00e4c:	c7e2dea3 	.word	0xc7e2dea3
c7e00e50:	7f008000 	.word	0x7f008000
c7e00e54:	c7e351e4 	.word	0xc7e351e4
c7e00e58:	c7e2deb2 	.word	0xc7e2deb2
c7e00e5c:	c7e2dec6 	.word	0xc7e2dec6
c7e00e60:	4fffc000 	.word	0x4fffc000
c7e00e64:	c7e2ded6 	.word	0xc7e2ded6
c7e00e68:	c7e2deeb 	.word	0xc7e2deeb
c7e00e6c:	c7e2df13 	.word	0xc7e2df13
c7e00e70:	c7e2df38 	.word	0xc7e2df38
c7e00e74:	c7e2df5e 	.word	0xc7e2df5e
c7e00e78:	000004f6 	.word	0x000004f6
c7e00e7c:	c7e2df8c 	.word	0xc7e2df8c
c7e00e80:	c7e2dfbb 	.word	0xc7e2dfbb
c7e00e84:	c7e2dfd8 	.word	0xc7e2dfd8
c7e00e88:	c7e2dfec 	.word	0xc7e2dfec
c7e00e8c:	c7e31f94 	.word	0xc7e31f94
c7e00e90:	c7e00040 	.word	0xc7e00040
c7e00e94:	c7e2dffd 	.word	0xc7e2dffd

c7e00e98 <boot_prep_linux>:
}
#endif

/* Subcommand: PREP */
static void boot_prep_linux(bootm_headers_t *images)
{
c7e00e98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e00e9c:	e1a07000 	mov	r7, r0
#ifdef CONFIG_CMDLINE_TAG
	char *commandline = getenv("bootargs");
c7e00ea0:	e59f0128 	ldr	r0, [pc, #296]	; c7e00fd0 <boot_prep_linux+0x138>
c7e00ea4:	eb00187c 	bl	c7e0709c <getenv>
	defined(CONFIG_CMDLINE_TAG) || \
	defined(CONFIG_INITRD_TAG) || \
	defined(CONFIG_SERIAL_TAG) || \
	defined(CONFIG_REVISION_TAG)
		debug("using: ATAGS\n");
		setup_start_tag(gd->bd);
c7e00ea8:	e5982000 	ldr	r2, [r8]
	params = (struct tag *)bd->bi_boot_params;

	params->hdr.tag = ATAG_CORE;
	params->hdr.size = tag_size (tag_core);

	params->u.core.flags = 0;
c7e00eac:	e3a03000 	mov	r3, #0	; 0x0
	defined(CONFIG_INITRD_TAG) || \
	defined(CONFIG_SERIAL_TAG) || \
	defined(CONFIG_REVISION_TAG)
static void setup_start_tag (bd_t *bd)
{
	params = (struct tag *)bd->bi_boot_params;
c7e00eb0:	e5925008 	ldr	r5, [r2, #8]
#ifdef CONFIG_CMDLINE_TAG
static void setup_commandline_tag(bd_t *bd, char *commandline)
{
	char *p;

	if (!commandline)
c7e00eb4:	e2506000 	subs	r6, r0, #0	; 0x0
	params->hdr.tag = ATAG_CORE;
	params->hdr.size = tag_size (tag_core);

	params->u.core.flags = 0;
	params->u.core.pagesize = 0;
	params->u.core.rootdev = 0;
c7e00eb8:	e5853010 	str	r3, [r5, #16]
	params = (struct tag *)bd->bi_boot_params;

	params->hdr.tag = ATAG_CORE;
	params->hdr.size = tag_size (tag_core);

	params->u.core.flags = 0;
c7e00ebc:	e5853008 	str	r3, [r5, #8]
	params->u.core.pagesize = 0;
c7e00ec0:	e585300c 	str	r3, [r5, #12]
	defined(CONFIG_REVISION_TAG)
static void setup_start_tag (bd_t *bd)
{
	params = (struct tag *)bd->bi_boot_params;

	params->hdr.tag = ATAG_CORE;
c7e00ec4:	e59f3108 	ldr	r3, [pc, #264]	; c7e00fd4 <boot_prep_linux+0x13c>

	params->u.core.flags = 0;
	params->u.core.pagesize = 0;
	params->u.core.rootdev = 0;

	params = tag_next (params);
c7e00ec8:	e2852014 	add	r2, r5, #20	; 0x14
	defined(CONFIG_REVISION_TAG)
static void setup_start_tag (bd_t *bd)
{
	params = (struct tag *)bd->bi_boot_params;

	params->hdr.tag = ATAG_CORE;
c7e00ecc:	e5853004 	str	r3, [r5, #4]
	params->hdr.size = tag_size (tag_core);
c7e00ed0:	e3a03005 	mov	r3, #5	; 0x5
c7e00ed4:	e5853000 	str	r3, [r5]

	params->u.core.flags = 0;
	params->u.core.pagesize = 0;
	params->u.core.rootdev = 0;

	params = tag_next (params);
c7e00ed8:	e59f30f8 	ldr	r3, [pc, #248]	; c7e00fd8 <boot_prep_linux+0x140>
		setup_start_tag(gd->bd);
#ifdef CONFIG_SERIAL_TAG
		setup_serial_tag(&params);
#endif
#ifdef CONFIG_CMDLINE_TAG
		setup_commandline_tag(gd->bd, commandline);
c7e00edc:	e5981000 	ldr	r1, [r8]

	params->u.core.flags = 0;
	params->u.core.pagesize = 0;
	params->u.core.rootdev = 0;

	params = tag_next (params);
c7e00ee0:	e5832000 	str	r2, [r3]
#ifdef CONFIG_CMDLINE_TAG
static void setup_commandline_tag(bd_t *bd, char *commandline)
{
	char *p;

	if (!commandline)
c7e00ee4:	1a000001 	bne	c7e00ef0 <boot_prep_linux+0x58>
c7e00ee8:	ea000015 	b	c7e00f44 <boot_prep_linux+0xac>
		return;

	/* eat leading white space */
	for (p = commandline; *p == ' '; p++);
c7e00eec:	e2866001 	add	r6, r6, #1	; 0x1
c7e00ef0:	e5d63000 	ldrb	r3, [r6]
c7e00ef4:	e3530020 	cmp	r3, #32	; 0x20
c7e00ef8:	0afffffb 	beq	c7e00eec <boot_prep_linux+0x54>

	/* skip non-existent command lines so the kernel will still
	 * use its default command line.
	 */
	if (*p == '\0')
c7e00efc:	e3530000 	cmp	r3, #0	; 0x0
c7e00f00:	0a00000f 	beq	c7e00f44 <boot_prep_linux+0xac>
		return;

	params->hdr.tag = ATAG_CMDLINE;
c7e00f04:	e59f30d0 	ldr	r3, [pc, #208]	; c7e00fdc <boot_prep_linux+0x144>
	params->hdr.size =
c7e00f08:	e1a00006 	mov	r0, r6
	 * use its default command line.
	 */
	if (*p == '\0')
		return;

	params->hdr.tag = ATAG_CMDLINE;
c7e00f0c:	e5823004 	str	r3, [r2, #4]
	params->hdr.size =
c7e00f10:	eb008688 	bl	c7e22938 <strlen>
		(sizeof (struct tag_header) + strlen (p) + 1 + 4) >> 2;

	strcpy (params->u.cmdline.cmdline, p);
c7e00f14:	e59f40bc 	ldr	r4, [pc, #188]	; c7e00fd8 <boot_prep_linux+0x140>
	 */
	if (*p == '\0')
		return;

	params->hdr.tag = ATAG_CMDLINE;
	params->hdr.size =
c7e00f18:	e280000d 	add	r0, r0, #13	; 0xd
		(sizeof (struct tag_header) + strlen (p) + 1 + 4) >> 2;

	strcpy (params->u.cmdline.cmdline, p);
c7e00f1c:	e5943000 	ldr	r3, [r4]
	 */
	if (*p == '\0')
		return;

	params->hdr.tag = ATAG_CMDLINE;
	params->hdr.size =
c7e00f20:	e1a00120 	lsr	r0, r0, #2
c7e00f24:	e5850014 	str	r0, [r5, #20]
		(sizeof (struct tag_header) + strlen (p) + 1 + 4) >> 2;

	strcpy (params->u.cmdline.cmdline, p);
c7e00f28:	e1a01006 	mov	r1, r6
c7e00f2c:	e2830008 	add	r0, r3, #8	; 0x8
c7e00f30:	eb008613 	bl	c7e22784 <strcpy>

	params = tag_next (params);
c7e00f34:	e5943000 	ldr	r3, [r4]
c7e00f38:	e5932000 	ldr	r2, [r3]
c7e00f3c:	e0833102 	add	r3, r3, r2, lsl #2
c7e00f40:	e5843000 	str	r3, [r4]
#endif
#ifdef CONFIG_REVISION_TAG
		setup_revision_tag(&params);
#endif
#ifdef CONFIG_SETUP_MEMORY_TAGS
		setup_memory_tags(gd->bd);
c7e00f44:	e5982000 	ldr	r2, [r8]
static void setup_memory_tags(bd_t *bd)
{
	int i;

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		params->hdr.tag = ATAG_MEM;
c7e00f48:	e59f6088 	ldr	r6, [pc, #136]	; c7e00fd8 <boot_prep_linux+0x140>
		params->hdr.size = tag_size (tag_mem32);

		params->u.mem.start = bd->bi_dram[i].start;
c7e00f4c:	e5923018 	ldr	r3, [r2, #24]
static void setup_memory_tags(bd_t *bd)
{
	int i;

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		params->hdr.tag = ATAG_MEM;
c7e00f50:	e596e000 	ldr	lr, [r6]
#endif
#ifdef CONFIG_REVISION_TAG
		setup_revision_tag(&params);
#endif
#ifdef CONFIG_SETUP_MEMORY_TAGS
		setup_memory_tags(gd->bd);
c7e00f54:	e1a05008 	mov	r5, r8

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		params->hdr.tag = ATAG_MEM;
		params->hdr.size = tag_size (tag_mem32);

		params->u.mem.start = bd->bi_dram[i].start;
c7e00f58:	e58e300c 	str	r3, [lr, #12]
		params->u.mem.size = bd->bi_dram[i].size;
c7e00f5c:	e592301c 	ldr	r3, [r2, #28]

		params = tag_next (params);
c7e00f60:	e28ec010 	add	ip, lr, #16	; 0x10
	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		params->hdr.tag = ATAG_MEM;
		params->hdr.size = tag_size (tag_mem32);

		params->u.mem.start = bd->bi_dram[i].start;
		params->u.mem.size = bd->bi_dram[i].size;
c7e00f64:	e58e3008 	str	r3, [lr, #8]
#endif
#ifdef CONFIG_SETUP_MEMORY_TAGS
		setup_memory_tags(gd->bd);
#endif
#ifdef CONFIG_INITRD_TAG
		if (images->rd_start && images->rd_end)
c7e00f68:	e5974064 	ldr	r4, [r7, #100]
static void setup_memory_tags(bd_t *bd)
{
	int i;

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		params->hdr.tag = ATAG_MEM;
c7e00f6c:	e59f306c 	ldr	r3, [pc, #108]	; c7e00fe0 <boot_prep_linux+0x148>
		params->hdr.size = tag_size (tag_mem32);
c7e00f70:	e3a02004 	mov	r2, #4	; 0x4
#endif
#ifdef CONFIG_SETUP_MEMORY_TAGS
		setup_memory_tags(gd->bd);
#endif
#ifdef CONFIG_INITRD_TAG
		if (images->rd_start && images->rd_end)
c7e00f74:	e3540000 	cmp	r4, #0	; 0x0
static void setup_memory_tags(bd_t *bd)
{
	int i;

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		params->hdr.tag = ATAG_MEM;
c7e00f78:	e88e000c 	stm	lr, {r2, r3}
		params->hdr.size = tag_size (tag_mem32);

		params->u.mem.start = bd->bi_dram[i].start;
		params->u.mem.size = bd->bi_dram[i].size;

		params = tag_next (params);
c7e00f7c:	e586c000 	str	ip, [r6]
#endif
#ifdef CONFIG_SETUP_MEMORY_TAGS
		setup_memory_tags(gd->bd);
#endif
#ifdef CONFIG_INITRD_TAG
		if (images->rd_start && images->rd_end)
c7e00f80:	0a00000b 	beq	c7e00fb4 <boot_prep_linux+0x11c>
c7e00f84:	e5970068 	ldr	r0, [r7, #104]
c7e00f88:	e3500000 	cmp	r0, #0	; 0x0
c7e00f8c:	0a000008 	beq	c7e00fb4 <boot_prep_linux+0x11c>
{
	/* an ATAG_INITRD node tells the kernel where the compressed
	 * ramdisk can be found. ATAG_RDIMG is a better name, actually.
	 */
	params->hdr.tag = ATAG_INITRD2;
	params->hdr.size = tag_size (tag_initrd);
c7e00f90:	e58e2010 	str	r2, [lr, #16]
static void setup_initrd_tag(bd_t *bd, ulong initrd_start, ulong initrd_end)
{
	/* an ATAG_INITRD node tells the kernel where the compressed
	 * ramdisk can be found. ATAG_RDIMG is a better name, actually.
	 */
	params->hdr.tag = ATAG_INITRD2;
c7e00f94:	e59f2048 	ldr	r2, [pc, #72]	; c7e00fe4 <boot_prep_linux+0x14c>
	params->hdr.size = tag_size (tag_initrd);

	params->u.initrd.start = initrd_start;
	params->u.initrd.size = initrd_end - initrd_start;
c7e00f98:	e0643000 	rsb	r3, r4, r0

	params = tag_next (params);
c7e00f9c:	e28c1010 	add	r1, ip, #16	; 0x10
static void setup_initrd_tag(bd_t *bd, ulong initrd_start, ulong initrd_end)
{
	/* an ATAG_INITRD node tells the kernel where the compressed
	 * ramdisk can be found. ATAG_RDIMG is a better name, actually.
	 */
	params->hdr.tag = ATAG_INITRD2;
c7e00fa0:	e58c2004 	str	r2, [ip, #4]
#ifdef CONFIG_SETUP_MEMORY_TAGS
		setup_memory_tags(gd->bd);
#endif
#ifdef CONFIG_INITRD_TAG
		if (images->rd_start && images->rd_end)
			setup_initrd_tag(gd->bd, images->rd_start,
c7e00fa4:	e5982000 	ldr	r2, [r8]
	 */
	params->hdr.tag = ATAG_INITRD2;
	params->hdr.size = tag_size (tag_initrd);

	params->u.initrd.start = initrd_start;
	params->u.initrd.size = initrd_end - initrd_start;
c7e00fa8:	e58c300c 	str	r3, [ip, #12]
	 * ramdisk can be found. ATAG_RDIMG is a better name, actually.
	 */
	params->hdr.tag = ATAG_INITRD2;
	params->hdr.size = tag_size (tag_initrd);

	params->u.initrd.start = initrd_start;
c7e00fac:	e58c4008 	str	r4, [ip, #8]
	params->u.initrd.size = initrd_end - initrd_start;

	params = tag_next (params);
c7e00fb0:	e5861000 	str	r1, [r6]
	defined(CONFIG_INITRD_TAG) || \
	defined(CONFIG_SERIAL_TAG) || \
	defined(CONFIG_REVISION_TAG)
static void setup_end_tag(bd_t *bd)
{
	params->hdr.tag = ATAG_NONE;
c7e00fb4:	e59f301c 	ldr	r3, [pc, #28]	; c7e00fd8 <boot_prep_linux+0x140>
#ifdef CONFIG_INITRD_TAG
		if (images->rd_start && images->rd_end)
			setup_initrd_tag(gd->bd, images->rd_start,
			images->rd_end);
#endif
		setup_end_tag(gd->bd);
c7e00fb8:	e5952000 	ldr	r2, [r5]
	defined(CONFIG_INITRD_TAG) || \
	defined(CONFIG_SERIAL_TAG) || \
	defined(CONFIG_REVISION_TAG)
static void setup_end_tag(bd_t *bd)
{
	params->hdr.tag = ATAG_NONE;
c7e00fbc:	e5932000 	ldr	r2, [r3]
c7e00fc0:	e3a03000 	mov	r3, #0	; 0x0
	params->hdr.size = 0;
c7e00fc4:	e5823000 	str	r3, [r2]
	defined(CONFIG_INITRD_TAG) || \
	defined(CONFIG_SERIAL_TAG) || \
	defined(CONFIG_REVISION_TAG)
static void setup_end_tag(bd_t *bd)
{
	params->hdr.tag = ATAG_NONE;
c7e00fc8:	e5823004 	str	r3, [r2, #4]
#else /* all tags */
		printf("FDT and ATAGS support not compiled in - hanging\n");
		hang();
#endif /* all tags */
	}
}
c7e00fcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e00fd0:	c7e2e01a 	.word	0xc7e2e01a
c7e00fd4:	54410001 	.word	0x54410001
c7e00fd8:	c7e40004 	.word	0xc7e40004
c7e00fdc:	54410009 	.word	0x54410009
c7e00fe0:	54410002 	.word	0x54410002
c7e00fe4:	54420005 	.word	0x54420005

c7e00fe8 <boot_jump_linux>:

/* Subcommand: GO */
static void boot_jump_linux(bootm_headers_t *images)
{
c7e00fe8:	e92d4013 	push	{r0, r1, r4, lr}
	unsigned long machid = gd->bd->bi_arch_number;
c7e00fec:	e5983000 	ldr	r3, [r8]
	char *s;
	void (*kernel_entry)(int zero, int arch, uint params);
	unsigned long r2;

	kernel_entry = (void (*)(int, int, uint))images->ep;
c7e00ff0:	e5904060 	ldr	r4, [r0, #96]
}

/* Subcommand: GO */
static void boot_jump_linux(bootm_headers_t *images)
{
	unsigned long machid = gd->bd->bi_arch_number;
c7e00ff4:	e5933004 	ldr	r3, [r3, #4]
	void (*kernel_entry)(int zero, int arch, uint params);
	unsigned long r2;

	kernel_entry = (void (*)(int, int, uint))images->ep;

	s = getenv("machid");
c7e00ff8:	e59f0050 	ldr	r0, [pc, #80]	; c7e01050 <boot_jump_linux+0x68>
}

/* Subcommand: GO */
static void boot_jump_linux(bootm_headers_t *images)
{
	unsigned long machid = gd->bd->bi_arch_number;
c7e00ffc:	e58d3004 	str	r3, [sp, #4]
	void (*kernel_entry)(int zero, int arch, uint params);
	unsigned long r2;

	kernel_entry = (void (*)(int, int, uint))images->ep;

	s = getenv("machid");
c7e01000:	eb001825 	bl	c7e0709c <getenv>
	if (s) {
c7e01004:	e3500000 	cmp	r0, #0	; 0x0
c7e01008:	0a000005 	beq	c7e01024 <boot_jump_linux+0x3c>
		strict_strtoul(s, 16, &machid);
c7e0100c:	e3a01010 	mov	r1, #16	; 0x10
c7e01010:	e28d2004 	add	r2, sp, #4	; 0x4
c7e01014:	eb008b8f 	bl	c7e23e58 <strict_strtoul>
		printf("Using machid 0x%lx from environment\n", machid);
c7e01018:	e59f0034 	ldr	r0, [pc, #52]	; c7e01054 <boot_jump_linux+0x6c>
c7e0101c:	e59d1004 	ldr	r1, [sp, #4]
c7e01020:	eb001e8c 	bl	c7e08a58 <printf>
 * and won't even do that unless CONFIG_SHOW_BOOT_PROGRESS is defined
 */

static inline ulong bootstage_mark(enum bootstage_id id)
{
	show_boot_progress(id);
c7e01024:	e3a0000f 	mov	r0, #15	; 0xf
c7e01028:	eb003213 	bl	c7e0d87c <__show_boot_progress>
}
#endif

static void announce_and_cleanup(void)
{
	printf("\nStarting kernel ...\n\n");
c7e0102c:	e59f0024 	ldr	r0, [pc, #36]	; c7e01058 <boot_jump_linux+0x70>
c7e01030:	eb001e88 	bl	c7e08a58 <printf>
#endif

#ifdef CONFIG_USB_DEVICE
	udc_disconnect();
#endif
	cleanup_before_linux();
c7e01034:	ebfffd49 	bl	c7e00560 <cleanup_before_linux>
#ifdef CONFIG_OF_LIBFDT
	if (images->ft_len)
		r2 = (unsigned long)images->ft_addr;
	else
#endif
		r2 = gd->bd->bi_boot_params;
c7e01038:	e5983000 	ldr	r3, [r8]

	kernel_entry(0, machid, r2);
c7e0103c:	e3a00000 	mov	r0, #0	; 0x0
c7e01040:	e5932008 	ldr	r2, [r3, #8]
c7e01044:	e59d1004 	ldr	r1, [sp, #4]
c7e01048:	e12fff34 	blx	r4
}
c7e0104c:	e8bd801c 	pop	{r2, r3, r4, pc}
c7e01050:	c7e2e023 	.word	0xc7e2e023
c7e01054:	c7e2e02a 	.word	0xc7e2e02a
c7e01058:	c7e2e04f 	.word	0xc7e2e04f

c7e0105c <do_bootm_linux>:
 * Modeled after the powerpc implementation
 * DIFFERENCE: Instead of calling prep and go at the end
 * they are called if subcommand is equal 0.
 */
int do_bootm_linux(int flag, int argc, char *argv[], bootm_headers_t *images)
{
c7e0105c:	e92d4070 	push	{r4, r5, r6, lr}
	/* No need for those on ARM */
	if (flag & BOOTM_STATE_OS_BD_T || flag & BOOTM_STATE_OS_CMDLINE)
c7e01060:	e2106030 	ands	r6, r0, #48	; 0x30
 * Modeled after the powerpc implementation
 * DIFFERENCE: Instead of calling prep and go at the end
 * they are called if subcommand is equal 0.
 */
int do_bootm_linux(int flag, int argc, char *argv[], bootm_headers_t *images)
{
c7e01064:	e1a04003 	mov	r4, r3
	/* No need for those on ARM */
	if (flag & BOOTM_STATE_OS_BD_T || flag & BOOTM_STATE_OS_CMDLINE)
c7e01068:	13e00000 	mvnne	r0, #0	; 0x0
c7e0106c:	18bd8070 	popne	{r4, r5, r6, pc}
		return -1;

	if (flag & BOOTM_STATE_OS_PREP) {
c7e01070:	e2105040 	ands	r5, r0, #64	; 0x40
c7e01074:	0a000003 	beq	c7e01088 <do_bootm_linux+0x2c>
		boot_prep_linux(images);
c7e01078:	e1a00003 	mov	r0, r3
c7e0107c:	ebffff85 	bl	c7e00e98 <boot_prep_linux>
c7e01080:	e1a00006 	mov	r0, r6
c7e01084:	e8bd8070 	pop	{r4, r5, r6, pc}
		return 0;
	}

	if (flag & BOOTM_STATE_OS_GO) {
c7e01088:	e2106080 	ands	r6, r0, #128	; 0x80
c7e0108c:	0a000003 	beq	c7e010a0 <do_bootm_linux+0x44>
		boot_jump_linux(images);
c7e01090:	e1a00003 	mov	r0, r3
c7e01094:	ebffffd3 	bl	c7e00fe8 <boot_jump_linux>
c7e01098:	e1a00005 	mov	r0, r5
c7e0109c:	e8bd8070 	pop	{r4, r5, r6, pc}
		return 0;
	}

	boot_prep_linux(images);
c7e010a0:	e1a00003 	mov	r0, r3
c7e010a4:	ebffff7b 	bl	c7e00e98 <boot_prep_linux>
	boot_jump_linux(images);
c7e010a8:	e1a00004 	mov	r0, r4
c7e010ac:	ebffffcd 	bl	c7e00fe8 <boot_jump_linux>
c7e010b0:	e1a00006 	mov	r0, r6
	return 0;
}
c7e010b4:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e010b8 <arch_lmb_reserve>:
	sp = get_sp();
	debug("## Current stack ends at 0x%08lx ", sp);

	/* adjust sp by 4K to be safe */
	sp -= 4096;
	lmb_reserve(lmb, sp,
c7e010b8:	e5982000 	ldr	r2, [r8]
c7e010bc:	e5983000 	ldr	r3, [r8]
c7e010c0:	e592c018 	ldr	ip, [r2, #24]
c7e010c4:	e593201c 	ldr	r2, [r3, #28]

static ulong get_sp(void)
{
	ulong ret;

	asm("mov %0, sp" : "=r"(ret) : );
c7e010c8:	e1a0100d 	mov	r1, sp
	sp = get_sp();
	debug("## Current stack ends at 0x%08lx ", sp);

	/* adjust sp by 4K to be safe */
	sp -= 4096;
	lmb_reserve(lmb, sp,
c7e010cc:	e082200c 	add	r2, r2, ip
	 */
	sp = get_sp();
	debug("## Current stack ends at 0x%08lx ", sp);

	/* adjust sp by 4K to be safe */
	sp -= 4096;
c7e010d0:	e2411a01 	sub	r1, r1, #4096	; 0x1000
	lmb_reserve(lmb, sp,
c7e010d4:	e0612002 	rsb	r2, r1, r2
c7e010d8:	ea0084b9 	b	c7e223c4 <lmb_reserve>

c7e010dc <interrupt_init>:
int interrupt_init (void)
{
	/*
	 * setup up stacks if necessary
	 */
	IRQ_STACK_START_IN = gd->irq_sp + 8;
c7e010dc:	e5983040 	ldr	r3, [r8, #64]
c7e010e0:	e59f200c 	ldr	r2, [pc, #12]	; c7e010f4 <interrupt_init+0x18>
c7e010e4:	e2833008 	add	r3, r3, #8	; 0x8
c7e010e8:	e5823000 	str	r3, [r2]

	return 0;
}
c7e010ec:	e3a00000 	mov	r0, #0	; 0x0
c7e010f0:	e12fff1e 	bx	lr
c7e010f4:	c7e00054 	.word	0xc7e00054

c7e010f8 <enable_interrupts>:

void enable_interrupts (void)
{
	return;
}
c7e010f8:	e12fff1e 	bx	lr

c7e010fc <disable_interrupts>:
int disable_interrupts (void)
{
	return 0;
}
c7e010fc:	e3a00000 	mov	r0, #0	; 0x0
c7e01100:	e12fff1e 	bx	lr

c7e01104 <show_regs>:
	panic ("Resetting CPU ...\n");
	reset_cpu (0);
}

void show_regs (struct pt_regs *regs)
{
c7e01104:	e92d4030 	push	{r4, r5, lr}
c7e01108:	e24dd08c 	sub	sp, sp, #140	; 0x8c
c7e0110c:	e1a04000 	mov	r4, r0
	"UK12_26",	"UK13_26",	"UK14_26",	"UK15_26",
	"USER_32",	"FIQ_32",	"IRQ_32",	"SVC_32",
	"UK4_32",	"UK5_32",	"UK6_32",	"ABT_32",
	"UK8_32",	"UK9_32",	"UK10_32",	"UND_32",
	"UK12_32",	"UK13_32",	"UK14_32",	"SYS_32",
	};
c7e01110:	e59f1104 	ldr	r1, [pc, #260]	; c7e0121c <show_regs+0x118>
c7e01114:	e3a02080 	mov	r2, #128	; 0x80
c7e01118:	e28d0008 	add	r0, sp, #8	; 0x8
c7e0111c:	eb0086c6 	bl	c7e22c3c <memcpy>

	flags = condition_codes (regs);

	printf ("pc : [<%08lx>]	   lr : [<%08lx>]\n"
c7e01120:	e594c030 	ldr	ip, [r4, #48]
c7e01124:	e594502c 	ldr	r5, [r4, #44]
c7e01128:	e594103c 	ldr	r1, [r4, #60]
c7e0112c:	e5942038 	ldr	r2, [r4, #56]
c7e01130:	e5943034 	ldr	r3, [r4, #52]
c7e01134:	e59f00e4 	ldr	r0, [pc, #228]	; c7e01220 <show_regs+0x11c>
c7e01138:	e58dc000 	str	ip, [sp]
c7e0113c:	e58d5004 	str	r5, [sp, #4]
	"UK4_32",	"UK5_32",	"UK6_32",	"ABT_32",
	"UK8_32",	"UK9_32",	"UK10_32",	"UND_32",
	"UK12_32",	"UK13_32",	"UK14_32",	"SYS_32",
	};

	flags = condition_codes (regs);
c7e01140:	e5945040 	ldr	r5, [r4, #64]

	printf ("pc : [<%08lx>]	   lr : [<%08lx>]\n"
c7e01144:	eb001e43 	bl	c7e08a58 <printf>
		"sp : %08lx  ip : %08lx	 fp : %08lx\n",
		instruction_pointer (regs),
		regs->ARM_lr, regs->ARM_sp, regs->ARM_ip, regs->ARM_fp);
	printf ("r10: %08lx  r9 : %08lx	 r8 : %08lx\n",
c7e01148:	e5941028 	ldr	r1, [r4, #40]
c7e0114c:	e5942024 	ldr	r2, [r4, #36]
c7e01150:	e5943020 	ldr	r3, [r4, #32]
c7e01154:	e59f00c8 	ldr	r0, [pc, #200]	; c7e01224 <show_regs+0x120>
c7e01158:	eb001e3e 	bl	c7e08a58 <printf>
		regs->ARM_r10, regs->ARM_r9, regs->ARM_r8);
	printf ("r7 : %08lx  r6 : %08lx	 r5 : %08lx  r4 : %08lx\n",
c7e0115c:	e594c010 	ldr	ip, [r4, #16]
c7e01160:	e594101c 	ldr	r1, [r4, #28]
c7e01164:	e5942018 	ldr	r2, [r4, #24]
c7e01168:	e5943014 	ldr	r3, [r4, #20]
c7e0116c:	e59f00b4 	ldr	r0, [pc, #180]	; c7e01228 <show_regs+0x124>
c7e01170:	e58dc000 	str	ip, [sp]
c7e01174:	eb001e37 	bl	c7e08a58 <printf>
		regs->ARM_r7, regs->ARM_r6, regs->ARM_r5, regs->ARM_r4);
	printf ("r3 : %08lx  r2 : %08lx	 r1 : %08lx  r0 : %08lx\n",
c7e01178:	e594c000 	ldr	ip, [r4]
c7e0117c:	e594100c 	ldr	r1, [r4, #12]
c7e01180:	e5942008 	ldr	r2, [r4, #8]
c7e01184:	e5943004 	ldr	r3, [r4, #4]
c7e01188:	e59f009c 	ldr	r0, [pc, #156]	; c7e0122c <show_regs+0x128>
c7e0118c:	e58dc000 	str	ip, [sp]
c7e01190:	eb001e30 	bl	c7e08a58 <printf>
		regs->ARM_r3, regs->ARM_r2, regs->ARM_r1, regs->ARM_r0);
	printf ("Flags: %c%c%c%c",
c7e01194:	e3150101 	tst	r5, #1073741824	; 0x40000000
c7e01198:	13a0205a 	movne	r2, #90	; 0x5a
c7e0119c:	03a0207a 	moveq	r2, #122	; 0x7a
c7e011a0:	e3150202 	tst	r5, #536870912	; 0x20000000
c7e011a4:	13a03043 	movne	r3, #67	; 0x43
c7e011a8:	03a03063 	moveq	r3, #99	; 0x63
c7e011ac:	e3150201 	tst	r5, #268435456	; 0x10000000
	"UK4_32",	"UK5_32",	"UK6_32",	"ABT_32",
	"UK8_32",	"UK9_32",	"UK10_32",	"UND_32",
	"UK12_32",	"UK13_32",	"UK14_32",	"SYS_32",
	};

	flags = condition_codes (regs);
c7e011b0:	e205520f 	and	r5, r5, #-268435456	; 0xf0000000
		regs->ARM_r10, regs->ARM_r9, regs->ARM_r8);
	printf ("r7 : %08lx  r6 : %08lx	 r5 : %08lx  r4 : %08lx\n",
		regs->ARM_r7, regs->ARM_r6, regs->ARM_r5, regs->ARM_r4);
	printf ("r3 : %08lx  r2 : %08lx	 r1 : %08lx  r0 : %08lx\n",
		regs->ARM_r3, regs->ARM_r2, regs->ARM_r1, regs->ARM_r0);
	printf ("Flags: %c%c%c%c",
c7e011b4:	13a0c056 	movne	ip, #86	; 0x56
c7e011b8:	03a0c076 	moveq	ip, #118	; 0x76
c7e011bc:	e3550000 	cmp	r5, #0	; 0x0
c7e011c0:	b3a0104e 	movlt	r1, #78	; 0x4e
c7e011c4:	a3a0106e 	movge	r1, #110	; 0x6e
c7e011c8:	e59f0060 	ldr	r0, [pc, #96]	; c7e01230 <show_regs+0x12c>
c7e011cc:	e58dc000 	str	ip, [sp]
c7e011d0:	eb001e20 	bl	c7e08a58 <printf>
		flags & CC_N_BIT ? 'N' : 'n',
		flags & CC_Z_BIT ? 'Z' : 'z',
		flags & CC_C_BIT ? 'C' : 'c', flags & CC_V_BIT ? 'V' : 'v');
	printf ("  IRQs %s  FIQs %s  Mode %s%s\n",
c7e011d4:	e5943040 	ldr	r3, [r4, #64]
c7e011d8:	e59fc054 	ldr	ip, [pc, #84]	; c7e01234 <show_regs+0x130>
c7e011dc:	e59f2054 	ldr	r2, [pc, #84]	; c7e01238 <show_regs+0x134>
c7e011e0:	e3130080 	tst	r3, #128	; 0x80
c7e011e4:	11a0100c 	movne	r1, ip
c7e011e8:	01a01002 	moveq	r1, r2
c7e011ec:	e203001f 	and	r0, r3, #31	; 0x1f
c7e011f0:	e3130040 	tst	r3, #64	; 0x40
c7e011f4:	e28de088 	add	lr, sp, #136	; 0x88
c7e011f8:	e08e0100 	add	r0, lr, r0, lsl #2
c7e011fc:	11a0200c 	movne	r2, ip
c7e01200:	e59fc034 	ldr	ip, [pc, #52]	; c7e0123c <show_regs+0x138>
c7e01204:	e5103080 	ldr	r3, [r0, #-128]
c7e01208:	e59f0030 	ldr	r0, [pc, #48]	; c7e01240 <show_regs+0x13c>
c7e0120c:	e58dc000 	str	ip, [sp]
c7e01210:	eb001e10 	bl	c7e08a58 <printf>
		interrupts_enabled (regs) ? "on" : "off",
		fast_interrupts_enabled (regs) ? "on" : "off",
		processor_modes[processor_mode (regs)],
		thumb_mode (regs) ? " (T)" : "");
}
c7e01214:	e28dd08c 	add	sp, sp, #140	; 0x8c
c7e01218:	e8bd8030 	pop	{r4, r5, pc}
c7e0121c:	c7e2b070 	.word	0xc7e2b070
c7e01220:	c7e2e066 	.word	0xc7e2e066
c7e01224:	c7e2e0ab 	.word	0xc7e2e0ab
c7e01228:	c7e2e0cf 	.word	0xc7e2e0cf
c7e0122c:	c7e2e0ff 	.word	0xc7e2e0ff
c7e01230:	c7e2e12f 	.word	0xc7e2e12f
c7e01234:	c7e2e39a 	.word	0xc7e2e39a
c7e01238:	c7e34a80 	.word	0xc7e34a80
c7e0123c:	c7e2fef0 	.word	0xc7e2fef0
c7e01240:	c7e2e13f 	.word	0xc7e2e13f

c7e01244 <bad_mode>:
}
#endif


void bad_mode (void)
{
c7e01244:	e92d4010 	push	{r4, lr}
	panic ("Resetting CPU ...\n");
c7e01248:	e59f0000 	ldr	r0, [pc, #0]	; c7e01250 <bad_mode+0xc>
c7e0124c:	eb008829 	bl	c7e232f8 <panic>
c7e01250:	c7e2e15e 	.word	0xc7e2e15e

c7e01254 <do_irq>:
	bad_mode ();
}

#ifndef CONFIG_USE_IRQ
void do_irq (struct pt_regs *pt_regs)
{
c7e01254:	e92d4010 	push	{r4, lr}
c7e01258:	e1a04000 	mov	r4, r0
	printf ("interrupt request\n");
c7e0125c:	e59f0010 	ldr	r0, [pc, #16]	; c7e01274 <do_irq+0x20>
c7e01260:	eb001dfc 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e01264:	e1a00004 	mov	r0, r4
c7e01268:	ebffffa5 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e0126c:	e8bd4010 	pop	{r4, lr}
#ifndef CONFIG_USE_IRQ
void do_irq (struct pt_regs *pt_regs)
{
	printf ("interrupt request\n");
	show_regs (pt_regs);
	bad_mode ();
c7e01270:	eafffff3 	b	c7e01244 <bad_mode>
c7e01274:	c7e2e176 	.word	0xc7e2e176

c7e01278 <do_fiq>:
	show_regs (pt_regs);
	bad_mode ();
}

void do_fiq (struct pt_regs *pt_regs)
{
c7e01278:	e92d4010 	push	{r4, lr}
c7e0127c:	e1a04000 	mov	r4, r0
	printf ("fast interrupt request\n");
c7e01280:	e59f0010 	ldr	r0, [pc, #16]	; c7e01298 <do_fiq+0x20>
c7e01284:	eb001df3 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e01288:	e1a00004 	mov	r0, r4
c7e0128c:	ebffff9c 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e01290:	e8bd4010 	pop	{r4, lr}

void do_fiq (struct pt_regs *pt_regs)
{
	printf ("fast interrupt request\n");
	show_regs (pt_regs);
	bad_mode ();
c7e01294:	eaffffea 	b	c7e01244 <bad_mode>
c7e01298:	c7e2e171 	.word	0xc7e2e171

c7e0129c <do_not_used>:
	show_regs (pt_regs);
	bad_mode ();
}

void do_not_used (struct pt_regs *pt_regs)
{
c7e0129c:	e92d4010 	push	{r4, lr}
c7e012a0:	e1a04000 	mov	r4, r0
	printf ("not used\n");
c7e012a4:	e59f0010 	ldr	r0, [pc, #16]	; c7e012bc <do_not_used+0x20>
c7e012a8:	eb001dea 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e012ac:	e1a00004 	mov	r0, r4
c7e012b0:	ebffff93 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e012b4:	e8bd4010 	pop	{r4, lr}

void do_not_used (struct pt_regs *pt_regs)
{
	printf ("not used\n");
	show_regs (pt_regs);
	bad_mode ();
c7e012b8:	eaffffe1 	b	c7e01244 <bad_mode>
c7e012bc:	c7e2e189 	.word	0xc7e2e189

c7e012c0 <do_data_abort>:
	show_regs (pt_regs);
	bad_mode ();
}

void do_data_abort (struct pt_regs *pt_regs)
{
c7e012c0:	e92d4010 	push	{r4, lr}
c7e012c4:	e1a04000 	mov	r4, r0
	printf ("data abort\n");
c7e012c8:	e59f0010 	ldr	r0, [pc, #16]	; c7e012e0 <do_data_abort+0x20>
c7e012cc:	eb001de1 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e012d0:	e1a00004 	mov	r0, r4
c7e012d4:	ebffff8a 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e012d8:	e8bd4010 	pop	{r4, lr}

void do_data_abort (struct pt_regs *pt_regs)
{
	printf ("data abort\n");
	show_regs (pt_regs);
	bad_mode ();
c7e012dc:	eaffffd8 	b	c7e01244 <bad_mode>
c7e012e0:	c7e2e193 	.word	0xc7e2e193

c7e012e4 <do_prefetch_abort>:
	show_regs (pt_regs);
	bad_mode ();
}

void do_prefetch_abort (struct pt_regs *pt_regs)
{
c7e012e4:	e92d4010 	push	{r4, lr}
c7e012e8:	e1a04000 	mov	r4, r0
	printf ("prefetch abort\n");
c7e012ec:	e59f0010 	ldr	r0, [pc, #16]	; c7e01304 <do_prefetch_abort+0x20>
c7e012f0:	eb001dd8 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e012f4:	e1a00004 	mov	r0, r4
c7e012f8:	ebffff81 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e012fc:	e8bd4010 	pop	{r4, lr}

void do_prefetch_abort (struct pt_regs *pt_regs)
{
	printf ("prefetch abort\n");
	show_regs (pt_regs);
	bad_mode ();
c7e01300:	eaffffcf 	b	c7e01244 <bad_mode>
c7e01304:	c7e2e19f 	.word	0xc7e2e19f

c7e01308 <do_software_interrupt>:
	show_regs (pt_regs);
	bad_mode ();
}

void do_software_interrupt (struct pt_regs *pt_regs)
{
c7e01308:	e92d4010 	push	{r4, lr}
c7e0130c:	e1a04000 	mov	r4, r0
	printf ("software interrupt\n");
c7e01310:	e59f0010 	ldr	r0, [pc, #16]	; c7e01328 <do_software_interrupt+0x20>
c7e01314:	eb001dcf 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e01318:	e1a00004 	mov	r0, r4
c7e0131c:	ebffff78 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e01320:	e8bd4010 	pop	{r4, lr}

void do_software_interrupt (struct pt_regs *pt_regs)
{
	printf ("software interrupt\n");
	show_regs (pt_regs);
	bad_mode ();
c7e01324:	eaffffc6 	b	c7e01244 <bad_mode>
c7e01328:	c7e2e1af 	.word	0xc7e2e1af

c7e0132c <do_undefined_instruction>:
		processor_modes[processor_mode (regs)],
		thumb_mode (regs) ? " (T)" : "");
}

void do_undefined_instruction (struct pt_regs *pt_regs)
{
c7e0132c:	e92d4010 	push	{r4, lr}
c7e01330:	e1a04000 	mov	r4, r0
	printf ("undefined instruction\n");
c7e01334:	e59f0010 	ldr	r0, [pc, #16]	; c7e0134c <do_undefined_instruction+0x20>
c7e01338:	eb001dc6 	bl	c7e08a58 <printf>
	show_regs (pt_regs);
c7e0133c:	e1a00004 	mov	r0, r4
c7e01340:	ebffff6f 	bl	c7e01104 <show_regs>
	bad_mode ();
}
c7e01344:	e8bd4010 	pop	{r4, lr}

void do_undefined_instruction (struct pt_regs *pt_regs)
{
	printf ("undefined instruction\n");
	show_regs (pt_regs);
	bad_mode ();
c7e01348:	eaffffbd 	b	c7e01244 <bad_mode>
c7e0134c:	c7e2e1c3 	.word	0xc7e2e1c3

c7e01350 <do_reset>:
 */

#include <common.h>

int do_reset(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01350:	e92d4010 	push	{r4, lr}
	puts ("resetting ...\n");
c7e01354:	e59f001c 	ldr	r0, [pc, #28]	; c7e01378 <do_reset+0x28>
c7e01358:	eb001da3 	bl	c7e089ec <puts>

	udelay (50000);				/* wait 50 ms */
c7e0135c:	e59f0018 	ldr	r0, [pc, #24]	; c7e0137c <do_reset+0x2c>
c7e01360:	eb0086d8 	bl	c7e22ec8 <udelay>

	disable_interrupts();
c7e01364:	ebffff64 	bl	c7e010fc <disable_interrupts>
	reset_cpu(0);
c7e01368:	e3a00000 	mov	r0, #0	; 0x0
c7e0136c:	ebfffc84 	bl	c7e00584 <reset_cpu>

	/*NOTREACHED*/
	return 0;
}
c7e01370:	e3a00000 	mov	r0, #0	; 0x0
c7e01374:	e8bd8010 	pop	{r4, pc}
c7e01378:	c7e2e2c6 	.word	0xc7e2e2c6
c7e0137c:	0000c350 	.word	0x0000c350

c7e01380 <__flush_cache>:
	asm("0: mrc p15, 0, r15, c7, c10, 3\n\t" "bne 0b\n" : : : "memory");
	/* disable write buffer as well (page 2-22) */
	asm("mcr p15, 0, %0, c7, c10, 4" : : "r" (0));
#endif
	return;
}
c7e01380:	e12fff1e 	bx	lr

c7e01384 <__flush_dcache_all>:
 * Default implementation:
 * do a range flush for the entire range
 */
void	__flush_dcache_all(void)
{
	flush_cache(0, ~0);
c7e01384:	e3a00000 	mov	r0, #0	; 0x0
c7e01388:	e3e01000 	mvn	r1, #0	; 0x0
c7e0138c:	eafffffb 	b	c7e01380 <__flush_cache>

c7e01390 <__enable_caches>:
 * Default implementation of enable_caches()
 * Real implementation should be in platform code
 */
void __enable_caches(void)
{
	puts("WARNING: Caches not enabled\n");
c7e01390:	e59f0000 	ldr	r0, [pc, #0]	; c7e01398 <__enable_caches+0x8>
c7e01394:	ea001d94 	b	c7e089ec <puts>
c7e01398:	c7e2e2d5 	.word	0xc7e2e2d5

c7e0139c <get_cr>:
static inline unsigned int get_cr(void)
{
	unsigned int val;
	asm("mrc p15, 0, %0, c1, c0, 0	@ get CR" : "=r" (val) : : "cc");
	return val;
}
c7e0139c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
c7e013a0:	e12fff1e 	bx	lr

c7e013a4 <set_cr>:

static inline void set_cr(unsigned int val)
{
	asm volatile("mcr p15, 0, %0, c1, c0, 0	@ set CR"
c7e013a4:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	  : : "r" (val) : "cc");
	isb();
}
c7e013a8:	e12fff1e 	bx	lr

c7e013ac <__arm_init_before_mmu>:

DECLARE_GLOBAL_DATA_PTR;

void __arm_init_before_mmu(void)
{
}
c7e013ac:	e12fff1e 	bx	lr

c7e013b0 <cp_delay>:
void arm_init_before_mmu(void)
	__attribute__((weak, alias("__arm_init_before_mmu")));

static void cp_delay (void)
{
c7e013b0:	e24dd008 	sub	sp, sp, #8	; 0x8
	volatile int i;

	/* copro seems to need some delay between reading and writing */
	for (i = 0; i < 100; i++)
c7e013b4:	e3a03000 	mov	r3, #0	; 0x0
c7e013b8:	ea000002 	b	c7e013c8 <cp_delay+0x18>
		nop();
c7e013bc:	e1a00000 	nop			(mov r0,r0)
static void cp_delay (void)
{
	volatile int i;

	/* copro seems to need some delay between reading and writing */
	for (i = 0; i < 100; i++)
c7e013c0:	e59d3004 	ldr	r3, [sp, #4]
c7e013c4:	e2833001 	add	r3, r3, #1	; 0x1
c7e013c8:	e58d3004 	str	r3, [sp, #4]
c7e013cc:	e59d3004 	ldr	r3, [sp, #4]
c7e013d0:	e3530063 	cmp	r3, #99	; 0x63
c7e013d4:	dafffff8 	ble	c7e013bc <cp_delay+0xc>
		nop();
	asm volatile("" : : : "memory");
}
c7e013d8:	e28dd008 	add	sp, sp, #8	; 0x8
c7e013dc:	e12fff1e 	bx	lr

c7e013e0 <cache_enable>:
static void cache_enable(uint32_t cache_bit)
{
	uint32_t reg;

	/* The data cache is not active unless the mmu is enabled too */
	if ((cache_bit == CR_C) && !mmu_enabled())
c7e013e0:	e3500004 	cmp	r0, #4	; 0x4
	return get_cr() & CR_M;
}

/* cache_bit must be either CR_I or CR_C */
static void cache_enable(uint32_t cache_bit)
{
c7e013e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e013e8:	e1a07000 	mov	r7, r0
	uint32_t reg;

	/* The data cache is not active unless the mmu is enabled too */
	if ((cache_bit == CR_C) && !mmu_enabled())
c7e013ec:	1a000024 	bne	c7e01484 <cache_enable+0xa4>
	set_cr(reg | CR_M);
}

static int mmu_enabled(void)
{
	return get_cr() & CR_M;
c7e013f0:	ebffffe9 	bl	c7e0139c <get_cr>
static void cache_enable(uint32_t cache_bit)
{
	uint32_t reg;

	/* The data cache is not active unless the mmu is enabled too */
	if ((cache_bit == CR_C) && !mmu_enabled())
c7e013f4:	e2104001 	ands	r4, r0, #1	; 0x1
	set_cr(reg | CR_M);
}

static int mmu_enabled(void)
{
	return get_cr() & CR_M;
c7e013f8:	e1a05000 	mov	r5, r0
static void cache_enable(uint32_t cache_bit)
{
	uint32_t reg;

	/* The data cache is not active unless the mmu is enabled too */
	if ((cache_bit == CR_C) && !mmu_enabled())
c7e013fc:	1a000020 	bne	c7e01484 <cache_enable+0xa4>
}

/* to activate the MMU we need to set up virtual memory: use 1M areas */
static inline void mmu_setup(void)
{
	u32 *page_table = (u32 *)gd->tlb_addr;
c7e01400:	e598604c 	ldr	r6, [r8, #76]
	int i;
	u32 reg;

	arm_init_before_mmu();
c7e01404:	ebffffe8 	bl	c7e013ac <__arm_init_before_mmu>
c7e01408:	e1a02004 	mov	r2, r4
	/* Set up an identity-mapping for all 4GB, rw for everyone */
	for (i = 0; i < 4096; i++)
		page_table[i] = i << 20 | (3 << 10) | 0x12;
c7e0140c:	e1a03a02 	lsl	r3, r2, #20
c7e01410:	e3833ec1 	orr	r3, r3, #3088	; 0xc10
c7e01414:	e3833002 	orr	r3, r3, #2	; 0x2
c7e01418:	e7863102 	str	r3, [r6, r2, lsl #2]
	int i;
	u32 reg;

	arm_init_before_mmu();
	/* Set up an identity-mapping for all 4GB, rw for everyone */
	for (i = 0; i < 4096; i++)
c7e0141c:	e2822001 	add	r2, r2, #1	; 0x1
c7e01420:	e3520a01 	cmp	r2, #4096	; 0x1000
c7e01424:	1afffff8 	bne	c7e0140c <cache_enable+0x2c>
	asm volatile("" : : : "memory");
}

static inline void dram_bank_mmu_setup(int bank)
{
	u32 *page_table = (u32 *)gd->tlb_addr;
c7e01428:	e598204c 	ldr	r2, [r8, #76]
	bd_t *bd = gd->bd;
c7e0142c:	e598e000 	ldr	lr, [r8]
	int	i;

	debug("%s: bank: %d\n", __func__, bank);
	for (i = bd->bi_dram[bank].start >> 20;
c7e01430:	e59e3018 	ldr	r3, [lr, #24]
c7e01434:	e1a00a23 	lsr	r0, r3, #20
c7e01438:	e082c100 	add	ip, r2, r0, lsl #2
c7e0143c:	ea000000 	b	c7e01444 <cache_enable+0x64>
	     i < (bd->bi_dram[bank].start + bd->bi_dram[bank].size) >> 20;
	     i++) {
		page_table[i] = i << 20 | (3 << 10) | CACHE_SETUP;
c7e01440:	e50c2004 	str	r2, [ip, #-4]
	bd_t *bd = gd->bd;
	int	i;

	debug("%s: bank: %d\n", __func__, bank);
	for (i = bd->bi_dram[bank].start >> 20;
	     i < (bd->bi_dram[bank].start + bd->bi_dram[bank].size) >> 20;
c7e01444:	e59e301c 	ldr	r3, [lr, #28]
c7e01448:	e59e1018 	ldr	r1, [lr, #24]
	     i++) {
		page_table[i] = i << 20 | (3 << 10) | CACHE_SETUP;
c7e0144c:	e1a02a00 	lsl	r2, r0, #20
	bd_t *bd = gd->bd;
	int	i;

	debug("%s: bank: %d\n", __func__, bank);
	for (i = bd->bi_dram[bank].start >> 20;
	     i < (bd->bi_dram[bank].start + bd->bi_dram[bank].size) >> 20;
c7e01450:	e0833001 	add	r3, r3, r1
	     i++) {
		page_table[i] = i << 20 | (3 << 10) | CACHE_SETUP;
c7e01454:	e3822ec1 	orr	r2, r2, #3088	; 0xc10
	bd_t *bd = gd->bd;
	int	i;

	debug("%s: bank: %d\n", __func__, bank);
	for (i = bd->bi_dram[bank].start >> 20;
	     i < (bd->bi_dram[bank].start + bd->bi_dram[bank].size) >> 20;
c7e01458:	e1500a23 	cmp	r0, r3, lsr #20
	     i++) {
		page_table[i] = i << 20 | (3 << 10) | CACHE_SETUP;
c7e0145c:	e382200e 	orr	r2, r2, #14	; 0xe
	int	i;

	debug("%s: bank: %d\n", __func__, bank);
	for (i = bd->bi_dram[bank].start >> 20;
	     i < (bd->bi_dram[bank].start + bd->bi_dram[bank].size) >> 20;
	     i++) {
c7e01460:	e2800001 	add	r0, r0, #1	; 0x1
c7e01464:	e28cc004 	add	ip, ip, #4	; 0x4
	bd_t *bd = gd->bd;
	int	i;

	debug("%s: bank: %d\n", __func__, bank);
	for (i = bd->bi_dram[bank].start >> 20;
	     i < (bd->bi_dram[bank].start + bd->bi_dram[bank].size) >> 20;
c7e01468:	3afffff4 	bcc	c7e01440 <cache_enable+0x60>
	for (i = 0; i < CONFIG_NR_DRAM_BANKS; i++) {
		dram_bank_mmu_setup(i);
	}

	/* Copy the page table address to cp15 */
	asm volatile("mcr p15, 0, %0, c2, c0, 0"
c7e0146c:	ee026f10 	mcr	15, 0, r6, cr2, cr0, {0}
		     : : "r" (page_table) : "memory");
	/* Set the access control to all-supervisor */
	asm volatile("mcr p15, 0, %0, c3, c0, 0"
c7e01470:	e3e03000 	mvn	r3, #0	; 0x0
c7e01474:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
		     : : "r" (~0));
	/* and enable the mmu */
	reg = get_cr();	/* get control reg. */
	cp_delay();
c7e01478:	ebffffcc 	bl	c7e013b0 <cp_delay>
	set_cr(reg | CR_M);
c7e0147c:	e3850001 	orr	r0, r5, #1	; 0x1
c7e01480:	ebffffc7 	bl	c7e013a4 <set_cr>
	uint32_t reg;

	/* The data cache is not active unless the mmu is enabled too */
	if ((cache_bit == CR_C) && !mmu_enabled())
		mmu_setup();
	reg = get_cr();	/* get control reg. */
c7e01484:	ebffffc4 	bl	c7e0139c <get_cr>
c7e01488:	e1a04000 	mov	r4, r0
	cp_delay();
c7e0148c:	ebffffc7 	bl	c7e013b0 <cp_delay>
	set_cr(reg | cache_bit);
c7e01490:	e1870004 	orr	r0, r7, r4
}
c7e01494:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	/* The data cache is not active unless the mmu is enabled too */
	if ((cache_bit == CR_C) && !mmu_enabled())
		mmu_setup();
	reg = get_cr();	/* get control reg. */
	cp_delay();
	set_cr(reg | cache_bit);
c7e01498:	eaffffc1 	b	c7e013a4 <set_cr>

c7e0149c <icache_enable>:
	return 0;					/* always off */
}
#else
void icache_enable(void)
{
	cache_enable(CR_I);
c7e0149c:	e3a00a01 	mov	r0, #4096	; 0x1000
c7e014a0:	eaffffce 	b	c7e013e0 <cache_enable>

c7e014a4 <icache_status>:
{
	cache_disable(CR_I);
}

int icache_status(void)
{
c7e014a4:	e92d4010 	push	{r4, lr}
	return (get_cr() & CR_I) != 0;
c7e014a8:	ebffffbb 	bl	c7e0139c <get_cr>
c7e014ac:	e1a00620 	lsr	r0, r0, #12
}
c7e014b0:	e2000001 	and	r0, r0, #1	; 0x1
c7e014b4:	e8bd8010 	pop	{r4, pc}

c7e014b8 <dcache_enable>:
	return 0;					/* always off */
}
#else
void dcache_enable(void)
{
	cache_enable(CR_C);
c7e014b8:	e3a00004 	mov	r0, #4	; 0x4
c7e014bc:	eaffffc7 	b	c7e013e0 <cache_enable>

c7e014c0 <dcache_status>:
{
	cache_disable(CR_C);
}

int dcache_status(void)
{
c7e014c0:	e92d4010 	push	{r4, lr}
	return (get_cr() & CR_C) != 0;
c7e014c4:	ebffffb4 	bl	c7e0139c <get_cr>
c7e014c8:	e1a00120 	lsr	r0, r0, #2
}
c7e014cc:	e2000001 	and	r0, r0, #1	; 0x1
c7e014d0:	e8bd8010 	pop	{r4, pc}

c7e014d4 <cache_disable>:
	set_cr(reg | cache_bit);
}

/* cache_bit must be either CR_I or CR_C */
static void cache_disable(uint32_t cache_bit)
{
c7e014d4:	e92d4070 	push	{r4, r5, r6, lr}
c7e014d8:	e1a04000 	mov	r4, r0
	uint32_t reg;

	reg = get_cr();
c7e014dc:	ebffffae 	bl	c7e0139c <get_cr>
c7e014e0:	e1a05000 	mov	r5, r0
	cp_delay();
c7e014e4:	ebffffb1 	bl	c7e013b0 <cp_delay>

	if (cache_bit == CR_C) {
c7e014e8:	e3540004 	cmp	r4, #4	; 0x4
c7e014ec:	1a000003 	bne	c7e01500 <cache_disable+0x2c>
		/* if cache isn;t enabled no need to disable */
		if ((reg & CR_C) != CR_C)
c7e014f0:	e3150004 	tst	r5, #4	; 0x4
c7e014f4:	08bd8070 	popeq	{r4, r5, r6, pc}
			return;
		/* if disabling data cache, disable mmu too */
		cache_bit |= CR_M;
		flush_dcache_all();
c7e014f8:	ebffffa1 	bl	c7e01384 <__flush_dcache_all>
c7e014fc:	e2844001 	add	r4, r4, #1	; 0x1
	}
	set_cr(reg & ~cache_bit);
c7e01500:	e1c50004 	bic	r0, r5, r4
}
c7e01504:	e8bd4070 	pop	{r4, r5, r6, lr}
			return;
		/* if disabling data cache, disable mmu too */
		cache_bit |= CR_M;
		flush_dcache_all();
	}
	set_cr(reg & ~cache_bit);
c7e01508:	eaffffa5 	b	c7e013a4 <set_cr>

c7e0150c <dcache_disable>:
	cache_enable(CR_C);
}

void dcache_disable(void)
{
	cache_disable(CR_C);
c7e0150c:	e3a00004 	mov	r0, #4	; 0x4
c7e01510:	eaffffef 	b	c7e014d4 <cache_disable>

c7e01514 <icache_disable>:
	cache_enable(CR_I);
}

void icache_disable(void)
{
	cache_disable(CR_I);
c7e01514:	e3a00a01 	mov	r0, #4096	; 0x1000
c7e01518:	eaffffed 	b	c7e014d4 <cache_disable>

c7e0151c <print_num>:

DECLARE_GLOBAL_DATA_PTR;

__maybe_unused
static void print_num(const char *name, ulong value)
{
c7e0151c:	e1a02001 	mov	r2, r1
	printf("%-12s= 0x%08lX\n", name, value);
c7e01520:	e1a01000 	mov	r1, r0
c7e01524:	e59f0000 	ldr	r0, [pc, #0]	; c7e0152c <print_num+0x10>
c7e01528:	ea001d4a 	b	c7e08a58 <printf>
c7e0152c:	c7e2e2f2 	.word	0xc7e2e2f2

c7e01530 <do_bdinfo>:
}

#elif defined(CONFIG_ARM)

int do_bdinfo(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01530:	e92d4030 	push	{r4, r5, lr}
	int i;
	bd_t *bd = gd->bd;
c7e01534:	e5985000 	ldr	r5, [r8]
}

#elif defined(CONFIG_ARM)

int do_bdinfo(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01538:	e24dd014 	sub	sp, sp, #20	; 0x14
	int i;
	bd_t *bd = gd->bd;

	print_num("arch_number",	bd->bi_arch_number);
c7e0153c:	e5951004 	ldr	r1, [r5, #4]
c7e01540:	e59f00d8 	ldr	r0, [pc, #216]	; c7e01620 <do_bdinfo+0xf0>
c7e01544:	ebfffff4 	bl	c7e0151c <print_num>
	print_num("boot_params",	(ulong)bd->bi_boot_params);
c7e01548:	e5951008 	ldr	r1, [r5, #8]
c7e0154c:	e59f00d0 	ldr	r0, [pc, #208]	; c7e01624 <do_bdinfo+0xf4>
c7e01550:	ebfffff1 	bl	c7e0151c <print_num>

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; ++i) {
		print_num("DRAM bank",	i);
c7e01554:	e59f00cc 	ldr	r0, [pc, #204]	; c7e01628 <do_bdinfo+0xf8>
c7e01558:	e3a01000 	mov	r1, #0	; 0x0
c7e0155c:	ebffffee 	bl	c7e0151c <print_num>
		print_num("-> start",	bd->bi_dram[i].start);
c7e01560:	e5951018 	ldr	r1, [r5, #24]
c7e01564:	e59f00c0 	ldr	r0, [pc, #192]	; c7e0162c <do_bdinfo+0xfc>
c7e01568:	ebffffeb 	bl	c7e0151c <print_num>
{
	char name[10], *val;
	if (idx)
		sprintf(name, "eth%iaddr", idx);
	else
		strcpy(name, "ethaddr");
c7e0156c:	e28d4006 	add	r4, sp, #6	; 0x6
	print_num("boot_params",	(ulong)bd->bi_boot_params);

	for (i = 0; i < CONFIG_NR_DRAM_BANKS; ++i) {
		print_num("DRAM bank",	i);
		print_num("-> start",	bd->bi_dram[i].start);
		print_num("-> size",	bd->bi_dram[i].size);
c7e01570:	e595101c 	ldr	r1, [r5, #28]
c7e01574:	e59f00b4 	ldr	r0, [pc, #180]	; c7e01630 <do_bdinfo+0x100>
c7e01578:	ebffffe7 	bl	c7e0151c <print_num>
{
	char name[10], *val;
	if (idx)
		sprintf(name, "eth%iaddr", idx);
	else
		strcpy(name, "ethaddr");
c7e0157c:	e59f10b0 	ldr	r1, [pc, #176]	; c7e01634 <do_bdinfo+0x104>
c7e01580:	e1a00004 	mov	r0, r4
c7e01584:	eb00847e 	bl	c7e22784 <strcpy>
	val = getenv(name);
c7e01588:	e1a00004 	mov	r0, r4
c7e0158c:	eb0016c2 	bl	c7e0709c <getenv>
	if (!val)
c7e01590:	e59f30a0 	ldr	r3, [pc, #160]	; c7e01638 <do_bdinfo+0x108>
c7e01594:	e3500000 	cmp	r0, #0	; 0x0
c7e01598:	11a02000 	movne	r2, r0
c7e0159c:	01a02003 	moveq	r2, r3
		val = "(not set)";
	printf("%-12s= %s\n", name, val);
c7e015a0:	e1a01004 	mov	r1, r4
c7e015a4:	e59f0090 	ldr	r0, [pc, #144]	; c7e0163c <do_bdinfo+0x10c>
c7e015a8:	eb001d2a 	bl	c7e08a58 <printf>
		print_num("-> size",	bd->bi_dram[i].size);
	}

#if defined(CONFIG_CMD_NET)
	print_eth(0);
	printf("ip_addr     = %s\n", getenv("ipaddr"));
c7e015ac:	e59f008c 	ldr	r0, [pc, #140]	; c7e01640 <do_bdinfo+0x110>
c7e015b0:	eb0016b9 	bl	c7e0709c <getenv>
c7e015b4:	e1a01000 	mov	r1, r0
c7e015b8:	e59f0084 	ldr	r0, [pc, #132]	; c7e01644 <do_bdinfo+0x114>
c7e015bc:	eb001d25 	bl	c7e08a58 <printf>
#endif
	printf("baudrate    = %d bps\n", bd->bi_baudrate);
c7e015c0:	e5951000 	ldr	r1, [r5]
c7e015c4:	e59f007c 	ldr	r0, [pc, #124]	; c7e01648 <do_bdinfo+0x118>
c7e015c8:	eb001d22 	bl	c7e08a58 <printf>
#if !(defined(CONFIG_SYS_ICACHE_OFF) && defined(CONFIG_SYS_DCACHE_OFF))
	print_num("TLB addr", gd->tlb_addr);
c7e015cc:	e59f0078 	ldr	r0, [pc, #120]	; c7e0164c <do_bdinfo+0x11c>
c7e015d0:	e598104c 	ldr	r1, [r8, #76]
c7e015d4:	ebffffd0 	bl	c7e0151c <print_num>
#endif
	print_num("relocaddr", gd->relocaddr);
c7e015d8:	e59f0070 	ldr	r0, [pc, #112]	; c7e01650 <do_bdinfo+0x120>
c7e015dc:	e5981034 	ldr	r1, [r8, #52]
c7e015e0:	ebffffcd 	bl	c7e0151c <print_num>
	print_num("reloc off", gd->reloc_off);
c7e015e4:	e59f0068 	ldr	r0, [pc, #104]	; c7e01654 <do_bdinfo+0x124>
c7e015e8:	e5981048 	ldr	r1, [r8, #72]
c7e015ec:	ebffffca 	bl	c7e0151c <print_num>
	print_num("irq_sp", gd->irq_sp);	/* irq stack pointer */
c7e015f0:	e59f0060 	ldr	r0, [pc, #96]	; c7e01658 <do_bdinfo+0x128>
c7e015f4:	e5981040 	ldr	r1, [r8, #64]
c7e015f8:	ebffffc7 	bl	c7e0151c <print_num>
	print_num("sp start ", gd->start_addr_sp);
c7e015fc:	e59f0058 	ldr	r0, [pc, #88]	; c7e0165c <do_bdinfo+0x12c>
c7e01600:	e5981044 	ldr	r1, [r8, #68]
c7e01604:	ebffffc4 	bl	c7e0151c <print_num>
	print_num("FB base  ", gd->fb_base);
c7e01608:	e59f0050 	ldr	r0, [pc, #80]	; c7e01660 <do_bdinfo+0x130>
c7e0160c:	e5981018 	ldr	r1, [r8, #24]
c7e01610:	ebffffc1 	bl	c7e0151c <print_num>
	printf("ARM frequency = %ld MHz\n", gd->bd->bi_arm_freq);
	printf("DSP frequency = %ld MHz\n", gd->bd->bi_dsp_freq);
	printf("DDR frequency = %ld MHz\n", gd->bd->bi_ddr_freq);
#endif
	return 0;
}
c7e01614:	e3a00000 	mov	r0, #0	; 0x0
c7e01618:	e28dd014 	add	sp, sp, #20	; 0x14
c7e0161c:	e8bd8030 	pop	{r4, r5, pc}
c7e01620:	c7e2e302 	.word	0xc7e2e302
c7e01624:	c7e2e30e 	.word	0xc7e2e30e
c7e01628:	c7e2e31a 	.word	0xc7e2e31a
c7e0162c:	c7e2e324 	.word	0xc7e2e324
c7e01630:	c7e2e32d 	.word	0xc7e2e32d
c7e01634:	c7e2e335 	.word	0xc7e2e335
c7e01638:	c7e2e33d 	.word	0xc7e2e33d
c7e0163c:	c7e2e347 	.word	0xc7e2e347
c7e01640:	c7e2e352 	.word	0xc7e2e352
c7e01644:	c7e2e359 	.word	0xc7e2e359
c7e01648:	c7e2e36b 	.word	0xc7e2e36b
c7e0164c:	c7e2e381 	.word	0xc7e2e381
c7e01650:	c7e2e38a 	.word	0xc7e2e38a
c7e01654:	c7e2e394 	.word	0xc7e2e394
c7e01658:	c7e2e39e 	.word	0xc7e2e39e
c7e0165c:	c7e2e3a5 	.word	0xc7e2e3a5
c7e01660:	c7e2e3af 	.word	0xc7e2e3af

c7e01664 <gunzip_bmp>:
}
#else
bmp_image_t *gunzip_bmp(unsigned long addr, unsigned long *lenp)
{
	return NULL;
}
c7e01664:	e3a00000 	mov	r0, #0	; 0x0
c7e01668:	e12fff1e 	bx	lr

c7e0166c <do_bmp>:
 *
 * Return:      None
 *
 */
static int do_bmp(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e0166c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e01670:	e1a05000 	mov	r5, r0
c7e01674:	e1a06001 	mov	r6, r1
c7e01678:	e1a07002 	mov	r7, r2

	/* Strip off leading 'bmp' command argument */
	argc--;
	argv++;

	c = find_cmd_tbl(argv[0], &cmd_bmp_sub[0], ARRAY_SIZE(cmd_bmp_sub));
c7e0167c:	e5930004 	ldr	r0, [r3, #4]
c7e01680:	e59f1030 	ldr	r1, [pc, #48]	; c7e016b8 <do_bmp+0x4c>
c7e01684:	e3a02002 	mov	r2, #2	; 0x2
{
	cmd_tbl_t *c;

	/* Strip off leading 'bmp' command argument */
	argc--;
	argv++;
c7e01688:	e2834004 	add	r4, r3, #4	; 0x4

	c = find_cmd_tbl(argv[0], &cmd_bmp_sub[0], ARRAY_SIZE(cmd_bmp_sub));
c7e0168c:	eb001b80 	bl	c7e08494 <find_cmd_tbl>

	if (c)
c7e01690:	e250c000 	subs	ip, r0, #0	; 0x0
c7e01694:	03e00000 	mvneq	r0, #0	; 0x0
c7e01698:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
		return  c->cmd(cmdtp, flag, argc, argv);
c7e0169c:	e1a00005 	mov	r0, r5
c7e016a0:	e1a01006 	mov	r1, r6
c7e016a4:	e2472001 	sub	r2, r7, #1	; 0x1
c7e016a8:	e1a03004 	mov	r3, r4
c7e016ac:	e1a0e00f 	mov	lr, pc
c7e016b0:	e59cf00c 	ldr	pc, [ip, #12]
	else
		return CMD_RET_USAGE;
}
c7e016b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e016b8:	c7e3520c 	.word	0xc7e3520c

c7e016bc <do_bmp_info>:

static int do_bmp_info(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
	ulong addr;

	switch (argc) {
c7e016bc:	e3520001 	cmp	r2, #1	; 0x1
	return NULL;
}
#endif

static int do_bmp_info(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e016c0:	e92d4010 	push	{r4, lr}
	ulong addr;

	switch (argc) {
c7e016c4:	0a000003 	beq	c7e016d8 <do_bmp_info+0x1c>
c7e016c8:	e3520002 	cmp	r2, #2	; 0x2
c7e016cc:	13e00000 	mvnne	r0, #0	; 0x0
c7e016d0:	18bd8010 	popne	{r4, pc}
c7e016d4:	ea000002 	b	c7e016e4 <do_bmp_info+0x28>
	case 1:		/* use load_addr as default address */
		addr = load_addr;
c7e016d8:	e59f30c0 	ldr	r3, [pc, #192]	; c7e017a0 <do_bmp_info+0xe4>
c7e016dc:	e5934000 	ldr	r4, [r3]
c7e016e0:	ea000004 	b	c7e016f8 <do_bmp_info+0x3c>
		break;
	case 2:		/* use argument */
		addr = simple_strtoul(argv[1], NULL, 16);
c7e016e4:	e5930004 	ldr	r0, [r3, #4]
c7e016e8:	e3a01000 	mov	r1, #0	; 0x0
c7e016ec:	e3a02010 	mov	r2, #16	; 0x10
c7e016f0:	eb00861a 	bl	c7e22f60 <simple_strtoul>
c7e016f4:	e1a04000 	mov	r4, r0
static int bmp_info(ulong addr)
{
	bmp_image_t *bmp=(bmp_image_t *)addr;
	unsigned long len;

	if (!((bmp->header.signature[0]=='B') &&
c7e016f8:	e5d43000 	ldrb	r3, [r4]
c7e016fc:	e3530042 	cmp	r3, #66	; 0x42
c7e01700:	1a000002 	bne	c7e01710 <do_bmp_info+0x54>
c7e01704:	e5d43001 	ldrb	r3, [r4, #1]
c7e01708:	e353004d 	cmp	r3, #77	; 0x4d
c7e0170c:	0a000003 	beq	c7e01720 <do_bmp_info+0x64>
	      (bmp->header.signature[1]=='M')))
		bmp = gunzip_bmp(addr, &len);

	if (bmp == NULL) {
		printf("There is no valid bmp file at the given address\n");
c7e01710:	e59f008c 	ldr	r0, [pc, #140]	; c7e017a4 <do_bmp_info+0xe8>
c7e01714:	eb001ccf 	bl	c7e08a58 <printf>
c7e01718:	e3a00001 	mov	r0, #1	; 0x1
c7e0171c:	e8bd8010 	pop	{r4, pc}
		return 1;
	}

	printf("Image size    : %d x %d\n", le32_to_cpu(bmp->header.width),
c7e01720:	e5d40013 	ldrb	r0, [r4, #19]
c7e01724:	e5d43017 	ldrb	r3, [r4, #23]
c7e01728:	e5d41012 	ldrb	r1, [r4, #18]
c7e0172c:	e5d42016 	ldrb	r2, [r4, #22]
c7e01730:	e5d4c014 	ldrb	ip, [r4, #20]
c7e01734:	e5d4e018 	ldrb	lr, [r4, #24]
c7e01738:	e1811400 	orr	r1, r1, r0, lsl #8
c7e0173c:	e1822403 	orr	r2, r2, r3, lsl #8
c7e01740:	e5d40015 	ldrb	r0, [r4, #21]
c7e01744:	e5d43019 	ldrb	r3, [r4, #25]
c7e01748:	e181180c 	orr	r1, r1, ip, lsl #16
c7e0174c:	e182280e 	orr	r2, r2, lr, lsl #16
c7e01750:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e01754:	e1811c00 	orr	r1, r1, r0, lsl #24
c7e01758:	e59f0048 	ldr	r0, [pc, #72]	; c7e017a8 <do_bmp_info+0xec>
c7e0175c:	eb001cbd 	bl	c7e08a58 <printf>
	       le32_to_cpu(bmp->header.height));
	printf("Bits per pixel: %d\n", le16_to_cpu(bmp->header.bit_count));
c7e01760:	e5d4301c 	ldrb	r3, [r4, #28]
c7e01764:	e5d4101d 	ldrb	r1, [r4, #29]
c7e01768:	e59f003c 	ldr	r0, [pc, #60]	; c7e017ac <do_bmp_info+0xf0>
c7e0176c:	e1831401 	orr	r1, r3, r1, lsl #8
c7e01770:	eb001cb8 	bl	c7e08a58 <printf>
	printf("Compression   : %d\n", le32_to_cpu(bmp->header.compression));
c7e01774:	e5d4301f 	ldrb	r3, [r4, #31]
c7e01778:	e5d4101e 	ldrb	r1, [r4, #30]
c7e0177c:	e5d42020 	ldrb	r2, [r4, #32]
c7e01780:	e1811403 	orr	r1, r1, r3, lsl #8
c7e01784:	e5d43021 	ldrb	r3, [r4, #33]
c7e01788:	e1811802 	orr	r1, r1, r2, lsl #16
c7e0178c:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e01790:	e59f0018 	ldr	r0, [pc, #24]	; c7e017b0 <do_bmp_info+0xf4>
c7e01794:	eb001caf 	bl	c7e08a58 <printf>

	if ((unsigned long)bmp != addr)
c7e01798:	e3a00000 	mov	r0, #0	; 0x0
	default:
		return CMD_RET_USAGE;
	}

	return (bmp_info(addr));
}
c7e0179c:	e8bd8010 	pop	{r4, pc}
c7e017a0:	c7e353cc 	.word	0xc7e353cc
c7e017a4:	c7e2e3db 	.word	0xc7e2e3db
c7e017a8:	c7e2e40c 	.word	0xc7e2e40c
c7e017ac:	c7e2e425 	.word	0xc7e2e425
c7e017b0:	c7e2e439 	.word	0xc7e2e439

c7e017b4 <bmp_display>:
 *
 * Return:      None
 *
 */
int bmp_display(ulong addr, int x, int y)
{
c7e017b4:	e92d4010 	push	{r4, lr}
	int ret;
	bmp_image_t *bmp = (bmp_image_t *)addr;
	unsigned long len;

	if (!((bmp->header.signature[0]=='B') &&
c7e017b8:	e5d03000 	ldrb	r3, [r0]
c7e017bc:	e3530042 	cmp	r3, #66	; 0x42
c7e017c0:	1a000002 	bne	c7e017d0 <bmp_display+0x1c>
c7e017c4:	e5d03001 	ldrb	r3, [r0, #1]
c7e017c8:	e353004d 	cmp	r3, #77	; 0x4d
c7e017cc:	0a000003 	beq	c7e017e0 <bmp_display+0x2c>
	      (bmp->header.signature[1]=='M')))
		bmp = gunzip_bmp(addr, &len);

	if (!bmp) {
		printf("There is no valid bmp file at the given address\n");
c7e017d0:	e59f0010 	ldr	r0, [pc, #16]	; c7e017e8 <bmp_display+0x34>
c7e017d4:	eb001c9f 	bl	c7e08a58 <printf>
c7e017d8:	e3a00001 	mov	r0, #1	; 0x1
c7e017dc:	e8bd8010 	pop	{r4, pc}
		return 1;
	}

#if defined(CONFIG_LCD)
	ret = lcd_display_bitmap((ulong)bmp, x, y);
c7e017e0:	eb002de3 	bl	c7e0cf74 <lcd_display_bitmap>

	if ((unsigned long)bmp != addr)
		free(bmp);

	return ret;
}
c7e017e4:	e8bd8010 	pop	{r4, pc}
c7e017e8:	c7e2e3db 	.word	0xc7e2e3db

c7e017ec <do_bmp_display>:
static int do_bmp_display(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
	ulong addr;
	int x = 0, y = 0;

	switch (argc) {
c7e017ec:	e3520002 	cmp	r2, #2	; 0x2

	return (bmp_info(addr));
}

static int do_bmp_display(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e017f0:	e92d4070 	push	{r4, r5, r6, lr}
c7e017f4:	e1a05003 	mov	r5, r3
	ulong addr;
	int x = 0, y = 0;

	switch (argc) {
c7e017f8:	0a000009 	beq	c7e01824 <do_bmp_display+0x38>
c7e017fc:	e3520004 	cmp	r2, #4	; 0x4
c7e01800:	0a00000f 	beq	c7e01844 <do_bmp_display+0x58>
c7e01804:	e3520001 	cmp	r2, #1	; 0x1
c7e01808:	0a000001 	beq	c7e01814 <do_bmp_display+0x28>
	default:
		return CMD_RET_USAGE;
	}

	 return (bmp_display(addr, x, y));
}
c7e0180c:	e3e00000 	mvn	r0, #0	; 0x0
c7e01810:	e8bd8070 	pop	{r4, r5, r6, pc}
	ulong addr;
	int x = 0, y = 0;

	switch (argc) {
	case 1:		/* use load_addr as default address */
		addr = load_addr;
c7e01814:	e59f3074 	ldr	r3, [pc, #116]	; c7e01890 <do_bmp_display+0xa4>
c7e01818:	e3a04000 	mov	r4, #0	; 0x0
c7e0181c:	e5936000 	ldr	r6, [r3]
c7e01820:	ea000005 	b	c7e0183c <do_bmp_display+0x50>
		break;
	case 2:		/* use argument */
		addr = simple_strtoul(argv[1], NULL, 16);
c7e01824:	e3a01000 	mov	r1, #0	; 0x0
c7e01828:	e5930004 	ldr	r0, [r3, #4]
c7e0182c:	e3a02010 	mov	r2, #16	; 0x10
c7e01830:	e1a04001 	mov	r4, r1
c7e01834:	eb0085c9 	bl	c7e22f60 <simple_strtoul>
c7e01838:	e1a06000 	mov	r6, r0
c7e0183c:	e1a02004 	mov	r2, r4
c7e01840:	ea00000e 	b	c7e01880 <do_bmp_display+0x94>
		break;
	case 4:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e01844:	e5930004 	ldr	r0, [r3, #4]
c7e01848:	e3a01000 	mov	r1, #0	; 0x0
c7e0184c:	e3a02010 	mov	r2, #16	; 0x10
c7e01850:	eb0085c2 	bl	c7e22f60 <simple_strtoul>
	        x = simple_strtoul(argv[2], NULL, 10);
c7e01854:	e3a01000 	mov	r1, #0	; 0x0
c7e01858:	e3a0200a 	mov	r2, #10	; 0xa
		break;
	case 2:		/* use argument */
		addr = simple_strtoul(argv[1], NULL, 16);
		break;
	case 4:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e0185c:	e1a06000 	mov	r6, r0
	        x = simple_strtoul(argv[2], NULL, 10);
c7e01860:	e5950008 	ldr	r0, [r5, #8]
c7e01864:	eb0085bd 	bl	c7e22f60 <simple_strtoul>
	        y = simple_strtoul(argv[3], NULL, 10);
c7e01868:	e3a0200a 	mov	r2, #10	; 0xa
	case 2:		/* use argument */
		addr = simple_strtoul(argv[1], NULL, 16);
		break;
	case 4:
		addr = simple_strtoul(argv[1], NULL, 16);
	        x = simple_strtoul(argv[2], NULL, 10);
c7e0186c:	e1a04000 	mov	r4, r0
	        y = simple_strtoul(argv[3], NULL, 10);
c7e01870:	e3a01000 	mov	r1, #0	; 0x0
c7e01874:	e595000c 	ldr	r0, [r5, #12]
c7e01878:	eb0085b8 	bl	c7e22f60 <simple_strtoul>
c7e0187c:	e1a02000 	mov	r2, r0
	        break;
	default:
		return CMD_RET_USAGE;
	}

	 return (bmp_display(addr, x, y));
c7e01880:	e1a00006 	mov	r0, r6
c7e01884:	e1a01004 	mov	r1, r4
}
c7e01888:	e8bd4070 	pop	{r4, r5, r6, lr}
	        break;
	default:
		return CMD_RET_USAGE;
	}

	 return (bmp_display(addr, x, y));
c7e0188c:	eaffffc8 	b	c7e017b4 <bmp_display>
c7e01890:	c7e353cc 	.word	0xc7e353cc

c7e01894 <do_go_exec>:
#ifdef CONFIG_CMD_GO

/* Allow ports to override the default behavior */
__attribute__((weak))
unsigned long do_go_exec (ulong (*entry)(int, char * const []), int argc, char * const argv[])
{
c7e01894:	e1a03000 	mov	r3, r0
c7e01898:	e92d4010 	push	{r4, lr}
	return entry (argc, argv);
c7e0189c:	e1a00001 	mov	r0, r1
c7e018a0:	e1a01002 	mov	r1, r2
c7e018a4:	e12fff33 	blx	r3
}
c7e018a8:	e8bd8010 	pop	{r4, pc}

c7e018ac <do_go>:
int do_go (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	ulong	addr, rc;
	int     rcode = 0;

	if (argc < 2)
c7e018ac:	e3520001 	cmp	r2, #1	; 0x1
{
	return entry (argc, argv);
}

int do_go (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e018b0:	e92d4070 	push	{r4, r5, r6, lr}
c7e018b4:	e1a06002 	mov	r6, r2
	ulong	addr, rc;
	int     rcode = 0;

	if (argc < 2)
c7e018b8:	d3e04000 	mvnle	r4, #0	; 0x0
c7e018bc:	da000012 	ble	c7e0190c <do_go+0x60>
		return CMD_RET_USAGE;

	addr = simple_strtoul(argv[1], NULL, 16);
c7e018c0:	e5930004 	ldr	r0, [r3, #4]
c7e018c4:	e3a02010 	mov	r2, #16	; 0x10
c7e018c8:	e3a01000 	mov	r1, #0	; 0x0
c7e018cc:	e2835004 	add	r5, r3, #4	; 0x4
c7e018d0:	eb0085a2 	bl	c7e22f60 <simple_strtoul>
c7e018d4:	e1a04000 	mov	r4, r0

	printf ("## Starting application at 0x%08lX ...\n", addr);
c7e018d8:	e1a01000 	mov	r1, r0
c7e018dc:	e59f0030 	ldr	r0, [pc, #48]	; c7e01914 <do_go+0x68>
c7e018e0:	eb001c5c 	bl	c7e08a58 <printf>

	/*
	 * pass address parameter as argv[0] (aka command name),
	 * and all remaining args
	 */
	rc = do_go_exec ((void *)addr, argc - 1, argv + 1);
c7e018e4:	e1a00004 	mov	r0, r4
c7e018e8:	e2461001 	sub	r1, r6, #1	; 0x1
c7e018ec:	e1a02005 	mov	r2, r5
c7e018f0:	ebffffe7 	bl	c7e01894 <do_go_exec>
c7e018f4:	e1a03000 	mov	r3, r0
	if (rc != 0) rcode = 1;

	printf ("## Application terminated, rc = 0x%lX\n", rc);
c7e018f8:	e1a01000 	mov	r1, r0
c7e018fc:	e59f0014 	ldr	r0, [pc, #20]	; c7e01918 <do_go+0x6c>

	/*
	 * pass address parameter as argv[0] (aka command name),
	 * and all remaining args
	 */
	rc = do_go_exec ((void *)addr, argc - 1, argv + 1);
c7e01900:	e2534000 	subs	r4, r3, #0	; 0x0
c7e01904:	13a04001 	movne	r4, #1	; 0x1
	if (rc != 0) rcode = 1;

	printf ("## Application terminated, rc = 0x%lX\n", rc);
c7e01908:	eb001c52 	bl	c7e08a58 <printf>
	return rcode;
}
c7e0190c:	e1a00004 	mov	r0, r4
c7e01910:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e01914:	c7e2e4cf 	.word	0xc7e2e4cf
c7e01918:	c7e2e4f7 	.word	0xc7e2e4f7

c7e0191c <__fswab32>:
{
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
c7e0191c:	e1a03000 	mov	r3, r0
c7e01920:	e1a00c00 	lsl	r0, r0, #24
c7e01924:	e2032cff 	and	r2, r3, #65280	; 0xff00
c7e01928:	e1800c23 	orr	r0, r0, r3, lsr #24
c7e0192c:	e1800402 	orr	r0, r0, r2, lsl #8
c7e01930:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
	return __arch__swab32(x);
}
c7e01934:	e1800423 	orr	r0, r0, r3, lsr #8
c7e01938:	e12fff1e 	bx	lr

c7e0193c <image_get_data>:
 *     image payload data start address
 */
static inline ulong image_get_data(const image_header_t *hdr)
{
	return ((ulong)hdr + image_get_header_size());
}
c7e0193c:	e2800040 	add	r0, r0, #64	; 0x40
c7e01940:	e12fff1e 	bx	lr

c7e01944 <__arch_preboot_os>:

/* Allow for arch specific config before we boot */
void __arch_preboot_os(void)
{
	/* please define platform specific arch_preboot_os() */
}
c7e01944:	e12fff1e 	bx	lr

c7e01948 <image_check_magic>:
phys_size_t getenv_bootm_mapsize(void);
void memmove_wd(void *to, void *from, size_t len, ulong chunksz);
#endif

static inline int image_check_magic(const image_header_t *hdr)
{
c7e01948:	e92d4010 	push	{r4, lr}
#define image_get_hdr_l(f) \
	static inline uint32_t image_get_##f(const image_header_t *hdr) \
	{ \
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
c7e0194c:	e5900000 	ldr	r0, [r0]
c7e01950:	ebfffff1 	bl	c7e0191c <__fswab32>
c7e01954:	e59f300c 	ldr	r3, [pc, #12]	; c7e01968 <image_check_magic+0x20>
#endif

static inline int image_check_magic(const image_header_t *hdr)
{
	return (image_get_magic(hdr) == IH_MAGIC);
}
c7e01958:	e1500003 	cmp	r0, r3
c7e0195c:	13a00000 	movne	r0, #0	; 0x0
c7e01960:	03a00001 	moveq	r0, #1	; 0x1
c7e01964:	e8bd8010 	pop	{r4, pc}
c7e01968:	27051956 	.word	0x27051956

c7e0196c <image_info>:
	}
	return rcode;
}

static int image_info(ulong addr)
{
c7e0196c:	e92d4070 	push	{r4, r5, r6, lr}
	void *hdr = (void *)addr;

	printf("\n## Checking Image at %08lx ...\n", addr);
c7e01970:	e1a01000 	mov	r1, r0
	}
	return rcode;
}

static int image_info(ulong addr)
{
c7e01974:	e1a04000 	mov	r4, r0
	void *hdr = (void *)addr;

	printf("\n## Checking Image at %08lx ...\n", addr);
c7e01978:	e59f0094 	ldr	r0, [pc, #148]	; c7e01a14 <image_info+0xa8>
c7e0197c:	eb001c35 	bl	c7e08a58 <printf>

	switch (genimg_get_format(hdr)) {
c7e01980:	e1a00004 	mov	r0, r4
c7e01984:	eb002b8c 	bl	c7e0c7bc <genimg_get_format>
c7e01988:	e3500001 	cmp	r0, #1	; 0x1
c7e0198c:	e1a05000 	mov	r5, r0
c7e01990:	1a00001b 	bne	c7e01a04 <image_info+0x98>
	case IMAGE_FORMAT_LEGACY:
		puts("   Legacy image found\n");
c7e01994:	e59f007c 	ldr	r0, [pc, #124]	; c7e01a18 <image_info+0xac>
c7e01998:	eb001c13 	bl	c7e089ec <puts>
		if (!image_check_magic(hdr)) {
c7e0199c:	e1a00004 	mov	r0, r4
c7e019a0:	ebffffe8 	bl	c7e01948 <image_check_magic>
c7e019a4:	e3500000 	cmp	r0, #0	; 0x0
			puts("   Bad Magic Number\n");
c7e019a8:	059f006c 	ldreq	r0, [pc, #108]	; c7e01a1c <image_info+0xb0>
	printf("\n## Checking Image at %08lx ...\n", addr);

	switch (genimg_get_format(hdr)) {
	case IMAGE_FORMAT_LEGACY:
		puts("   Legacy image found\n");
		if (!image_check_magic(hdr)) {
c7e019ac:	0a00000d 	beq	c7e019e8 <image_info+0x7c>
			puts("   Bad Magic Number\n");
			return 1;
		}

		if (!image_check_hcrc(hdr)) {
c7e019b0:	e1a00004 	mov	r0, r4
c7e019b4:	eb002c9e 	bl	c7e0cc34 <image_check_hcrc>
c7e019b8:	e3500000 	cmp	r0, #0	; 0x0
			puts("   Bad Header Checksum\n");
c7e019bc:	059f005c 	ldreq	r0, [pc, #92]	; c7e01a20 <image_info+0xb4>
		if (!image_check_magic(hdr)) {
			puts("   Bad Magic Number\n");
			return 1;
		}

		if (!image_check_hcrc(hdr)) {
c7e019c0:	0a000008 	beq	c7e019e8 <image_info+0x7c>
			puts("   Bad Header Checksum\n");
			return 1;
		}

		image_print_contents(hdr);
c7e019c4:	e1a00004 	mov	r0, r4
c7e019c8:	eb002bb1 	bl	c7e0c894 <image_print_contents>

		puts("   Verifying Checksum ... ");
c7e019cc:	e59f0050 	ldr	r0, [pc, #80]	; c7e01a24 <image_info+0xb8>
c7e019d0:	eb001c05 	bl	c7e089ec <puts>
		if (!image_check_dcrc(hdr)) {
c7e019d4:	e1a00004 	mov	r0, r4
c7e019d8:	eb002c83 	bl	c7e0cbec <image_check_dcrc>
c7e019dc:	e3500000 	cmp	r0, #0	; 0x0
c7e019e0:	1a000003 	bne	c7e019f4 <image_info+0x88>
			puts("   Bad Data CRC\n");
c7e019e4:	e59f003c 	ldr	r0, [pc, #60]	; c7e01a28 <image_info+0xbc>
c7e019e8:	eb001bff 	bl	c7e089ec <puts>
c7e019ec:	e1a00005 	mov	r0, r5
c7e019f0:	e8bd8070 	pop	{r4, r5, r6, pc}
			return 1;
		}
		puts("OK\n");
c7e019f4:	e59f0030 	ldr	r0, [pc, #48]	; c7e01a2c <image_info+0xc0>
c7e019f8:	eb001bfb 	bl	c7e089ec <puts>
c7e019fc:	e3a00000 	mov	r0, #0	; 0x0
c7e01a00:	e8bd8070 	pop	{r4, r5, r6, pc}
		}

		return 0;
#endif
	default:
		puts("Unknown image format!\n");
c7e01a04:	e59f0024 	ldr	r0, [pc, #36]	; c7e01a30 <image_info+0xc4>
c7e01a08:	eb001bf7 	bl	c7e089ec <puts>
c7e01a0c:	e3a00001 	mov	r0, #1	; 0x1
		break;
	}

	return 1;
}
c7e01a10:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e01a14:	c7e2e5b8 	.word	0xc7e2e5b8
c7e01a18:	c7e2e5d9 	.word	0xc7e2e5d9
c7e01a1c:	c7e2e5f0 	.word	0xc7e2e5f0
c7e01a20:	c7e2e605 	.word	0xc7e2e605
c7e01a24:	c7e2e61d 	.word	0xc7e2e61d
c7e01a28:	c7e2e638 	.word	0xc7e2e638
c7e01a2c:	c7e2e649 	.word	0xc7e2e649
c7e01a30:	c7e2e64d 	.word	0xc7e2e64d

c7e01a34 <do_iminfo>:
{
	int	arg;
	ulong	addr;
	int	rcode = 0;

	if (argc < 2) {
c7e01a34:	e3520001 	cmp	r2, #1	; 0x1
/*******************************************************************/
/* iminfo - print header info for a requested image */
/*******************************************************************/
#if defined(CONFIG_CMD_IMI)
int do_iminfo(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01a38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e01a3c:	e1a06002 	mov	r6, r2
c7e01a40:	e1a07003 	mov	r7, r3
	int	arg;
	ulong	addr;
	int	rcode = 0;

	if (argc < 2) {
		return image_info(load_addr);
c7e01a44:	c3a04001 	movgt	r4, #1	; 0x1
c7e01a48:	c3a05000 	movgt	r5, #0	; 0x0
{
	int	arg;
	ulong	addr;
	int	rcode = 0;

	if (argc < 2) {
c7e01a4c:	ca000003 	bgt	c7e01a60 <do_iminfo+0x2c>
		return image_info(load_addr);
c7e01a50:	e59f3038 	ldr	r3, [pc, #56]	; c7e01a90 <do_iminfo+0x5c>
c7e01a54:	e5930000 	ldr	r0, [r3]
		addr = simple_strtoul(argv[arg], NULL, 16);
		if (image_info(addr) != 0)
			rcode = 1;
	}
	return rcode;
}
c7e01a58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	int	arg;
	ulong	addr;
	int	rcode = 0;

	if (argc < 2) {
		return image_info(load_addr);
c7e01a5c:	eaffffc2 	b	c7e0196c <image_info>
	}

	for (arg = 1; arg < argc; ++arg) {
		addr = simple_strtoul(argv[arg], NULL, 16);
c7e01a60:	e7970104 	ldr	r0, [r7, r4, lsl #2]
c7e01a64:	e3a01000 	mov	r1, #0	; 0x0
c7e01a68:	e3a02010 	mov	r2, #16	; 0x10
c7e01a6c:	eb00853b 	bl	c7e22f60 <simple_strtoul>
		if (image_info(addr) != 0)
c7e01a70:	ebffffbd 	bl	c7e0196c <image_info>

	if (argc < 2) {
		return image_info(load_addr);
	}

	for (arg = 1; arg < argc; ++arg) {
c7e01a74:	e2844001 	add	r4, r4, #1	; 0x1
		addr = simple_strtoul(argv[arg], NULL, 16);
		if (image_info(addr) != 0)
c7e01a78:	e3500000 	cmp	r0, #0	; 0x0
c7e01a7c:	13a05001 	movne	r5, #1	; 0x1

	if (argc < 2) {
		return image_info(load_addr);
	}

	for (arg = 1; arg < argc; ++arg) {
c7e01a80:	e1540006 	cmp	r4, r6
c7e01a84:	bafffff5 	blt	c7e01a60 <do_iminfo+0x2c>
		addr = simple_strtoul(argv[arg], NULL, 16);
		if (image_info(addr) != 0)
			rcode = 1;
	}
	return rcode;
}
c7e01a88:	e1a00005 	mov	r0, r5
c7e01a8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e01a90:	c7e353cc 	.word	0xc7e353cc

c7e01a94 <image_get_size>:
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
image_get_hdr_l(hcrc)		/* image_get_hcrc */
image_get_hdr_l(time)		/* image_get_time */
image_get_hdr_l(size)		/* image_get_size */
c7e01a94:	e590000c 	ldr	r0, [r0, #12]
c7e01a98:	eaffff9f 	b	c7e0191c <__fswab32>

c7e01a9c <image_get_data_size>:
	return (char *)hdr->ih_name;
}

static inline uint32_t image_get_data_size(const image_header_t *hdr)
{
	return image_get_size(hdr);
c7e01a9c:	eafffffc 	b	c7e01a94 <image_get_size>

c7e01aa0 <do_bootd>:
/*******************************************************************/
/* bootd - boot default image */
/*******************************************************************/
#if defined(CONFIG_CMD_BOOTD)
int do_bootd(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01aa0:	e92d4010 	push	{r4, lr}
	int rcode = 0;

	if (run_command(getenv("bootcmd"), flag) < 0)
c7e01aa4:	e59f0014 	ldr	r0, [pc, #20]	; c7e01ac0 <do_bootd+0x20>
/*******************************************************************/
/* bootd - boot default image */
/*******************************************************************/
#if defined(CONFIG_CMD_BOOTD)
int do_bootd(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01aa8:	e1a04001 	mov	r4, r1
	int rcode = 0;

	if (run_command(getenv("bootcmd"), flag) < 0)
c7e01aac:	eb00157a 	bl	c7e0709c <getenv>
c7e01ab0:	e1a01004 	mov	r1, r4
c7e01ab4:	eb002fab 	bl	c7e0d968 <run_command>
		rcode = 1;
	return rcode;
}
c7e01ab8:	e1a00fa0 	lsr	r0, r0, #31
c7e01abc:	e8bd8010 	pop	{r4, pc}
c7e01ac0:	c7e2e664 	.word	0xc7e2e664

c7e01ac4 <do_bootm_qnxelf>:
	return 1;
}

static int do_bootm_qnxelf(int flag, int argc, char * const argv[],
			    bootm_headers_t *images)
{
c7e01ac4:	e92d4070 	push	{r4, r5, r6, lr}
	char *local_args[2];
	char str[16];

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01ac8:	e3500000 	cmp	r0, #0	; 0x0
c7e01acc:	13500080 	cmpne	r0, #128	; 0x80
	return 1;
}

static int do_bootm_qnxelf(int flag, int argc, char * const argv[],
			    bootm_headers_t *images)
{
c7e01ad0:	e24dd018 	sub	sp, sp, #24	; 0x18
	char *local_args[2];
	char str[16];

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01ad4:	03a06000 	moveq	r6, #0	; 0x0
c7e01ad8:	13a06001 	movne	r6, #1	; 0x1
	return 1;
}

static int do_bootm_qnxelf(int flag, int argc, char * const argv[],
			    bootm_headers_t *images)
{
c7e01adc:	e1a05002 	mov	r5, r2
	char *local_args[2];
	char str[16];

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01ae0:	1a00000c 	bne	c7e01b18 <do_bootm_qnxelf+0x54>
		fit_unsupported_reset("QNX");
		return 1;
	}
#endif

	sprintf(str, "%lx", images->ep); /* write entry-point into string */
c7e01ae4:	e5932060 	ldr	r2, [r3, #96]
c7e01ae8:	e59f1034 	ldr	r1, [pc, #52]	; c7e01b24 <do_bootm_qnxelf+0x60>
c7e01aec:	e1a0000d 	mov	r0, sp
c7e01af0:	eb0088ce 	bl	c7e23e30 <sprintf>
	local_args[0] = argv[0];
c7e01af4:	e595c000 	ldr	ip, [r5]
	local_args[1] = str;	/* and provide it via the arguments */
	do_bootelf(NULL, 0, 2, local_args);
c7e01af8:	e1a00006 	mov	r0, r6
c7e01afc:	e1a01006 	mov	r1, r6
c7e01b00:	e3a02002 	mov	r2, #2	; 0x2
c7e01b04:	e28d3010 	add	r3, sp, #16	; 0x10
		fit_unsupported_reset("QNX");
		return 1;
	}
#endif

	sprintf(str, "%lx", images->ep); /* write entry-point into string */
c7e01b08:	e1a0400d 	mov	r4, sp
	local_args[0] = argv[0];
c7e01b0c:	e58dc010 	str	ip, [sp, #16]
	local_args[1] = str;	/* and provide it via the arguments */
c7e01b10:	e58dd014 	str	sp, [sp, #20]
	do_bootelf(NULL, 0, 2, local_args);
c7e01b14:	eb0004eb 	bl	c7e02ec8 <do_bootelf>

	return 1;
}
c7e01b18:	e3a00001 	mov	r0, #1	; 0x1
c7e01b1c:	e28dd018 	add	sp, sp, #24	; 0x18
c7e01b20:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e01b24:	c7e2e66c 	.word	0xc7e2e66c

c7e01b28 <do_bootm_vxworks>:
#endif /* CONFIG_BOOTM_OSE */

#if defined(CONFIG_CMD_ELF)
static int do_bootm_vxworks(int flag, int argc, char * const argv[],
			     bootm_headers_t *images)
{
c7e01b28:	e92d4030 	push	{r4, r5, lr}
	char str[80];

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01b2c:	e3500000 	cmp	r0, #0	; 0x0
c7e01b30:	13500080 	cmpne	r0, #128	; 0x80
#endif /* CONFIG_BOOTM_OSE */

#if defined(CONFIG_CMD_ELF)
static int do_bootm_vxworks(int flag, int argc, char * const argv[],
			     bootm_headers_t *images)
{
c7e01b34:	e24dd054 	sub	sp, sp, #84	; 0x54
	char str[80];

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01b38:	03a05000 	moveq	r5, #0	; 0x0
c7e01b3c:	13a05001 	movne	r5, #1	; 0x1
c7e01b40:	1a00000c 	bne	c7e01b78 <do_bootm_vxworks+0x50>
		fit_unsupported_reset("VxWorks");
		return 1;
	}
#endif

	sprintf(str, "%lx", images->ep); /* write entry-point into string */
c7e01b44:	e5932060 	ldr	r2, [r3, #96]
c7e01b48:	e59f1034 	ldr	r1, [pc, #52]	; c7e01b84 <do_bootm_vxworks+0x5c>
c7e01b4c:	e1a0000d 	mov	r0, sp
c7e01b50:	eb0088b6 	bl	c7e23e30 <sprintf>
	setenv("loadaddr", str);
c7e01b54:	e1a0100d 	mov	r1, sp
c7e01b58:	e59f0028 	ldr	r0, [pc, #40]	; c7e01b88 <do_bootm_vxworks+0x60>
c7e01b5c:	eb0016bb 	bl	c7e07650 <setenv>
	do_bootvx(NULL, 0, 0, NULL);
c7e01b60:	e1a00005 	mov	r0, r5
c7e01b64:	e1a01005 	mov	r1, r5
c7e01b68:	e1a02005 	mov	r2, r5
c7e01b6c:	e1a03005 	mov	r3, r5
		fit_unsupported_reset("VxWorks");
		return 1;
	}
#endif

	sprintf(str, "%lx", images->ep); /* write entry-point into string */
c7e01b70:	e1a0400d 	mov	r4, sp
	setenv("loadaddr", str);
	do_bootvx(NULL, 0, 0, NULL);
c7e01b74:	eb00041e 	bl	c7e02bf4 <do_bootvx>

	return 1;
}
c7e01b78:	e3a00001 	mov	r0, #1	; 0x1
c7e01b7c:	e28dd054 	add	sp, sp, #84	; 0x54
c7e01b80:	e8bd8030 	pop	{r4, r5, pc}
c7e01b84:	c7e2e66c 	.word	0xc7e2e66c
c7e01b88:	c7e2de92 	.word	0xc7e2de92

c7e01b8c <bootstage_mark>:
 * This is a dummy implementation which just calls show_boot_progress(),
 * and won't even do that unless CONFIG_SHOW_BOOT_PROGRESS is defined
 */

static inline ulong bootstage_mark(enum bootstage_id id)
{
c7e01b8c:	e92d4010 	push	{r4, lr}
	show_boot_progress(id);
c7e01b90:	eb002f39 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e01b94:	e3a00000 	mov	r0, #0	; 0x0
c7e01b98:	e8bd8010 	pop	{r4, pc}

c7e01b9c <do_bootm_rtems>:
static int do_bootm_rtems(int flag, int argc, char * const argv[],
			   bootm_headers_t *images)
{
	void (*entry_point)(bd_t *);

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01b9c:	e3500000 	cmp	r0, #0	; 0x0
c7e01ba0:	13500080 	cmpne	r0, #128	; 0x80
#endif /* CONFIG_LYNXKDI */

#ifdef CONFIG_BOOTM_RTEMS
static int do_bootm_rtems(int flag, int argc, char * const argv[],
			   bootm_headers_t *images)
{
c7e01ba4:	e92d4010 	push	{r4, lr}
	void (*entry_point)(bd_t *);

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01ba8:	1a000007 	bne	c7e01bcc <do_bootm_rtems+0x30>
		fit_unsupported_reset("RTEMS");
		return 1;
	}
#endif

	entry_point = (void (*)(bd_t *))images->ep;
c7e01bac:	e5934060 	ldr	r4, [r3, #96]

	printf("## Transferring control to RTEMS (at address %08lx) ...\n",
c7e01bb0:	e59f001c 	ldr	r0, [pc, #28]	; c7e01bd4 <do_bootm_rtems+0x38>
c7e01bb4:	e1a01004 	mov	r1, r4
c7e01bb8:	eb001ba6 	bl	c7e08a58 <printf>
		(ulong)entry_point);

	bootstage_mark(BOOTSTAGE_ID_RUN_OS);
c7e01bbc:	e3a0000f 	mov	r0, #15	; 0xf
c7e01bc0:	ebfffff1 	bl	c7e01b8c <bootstage_mark>

	/*
	 * RTEMS Parameters:
	 *   r3: ptr to board info data
	 */
	(*entry_point)(gd->bd);
c7e01bc4:	e5980000 	ldr	r0, [r8]
c7e01bc8:	e12fff34 	blx	r4

	return 1;
}
c7e01bcc:	e3a00001 	mov	r0, #1	; 0x1
c7e01bd0:	e8bd8010 	pop	{r4, pc}
c7e01bd4:	c7e2e670 	.word	0xc7e2e670

c7e01bd8 <do_bootm_netbsd>:
	image_header_t *os_hdr, *hdr;
	ulong kernel_data, kernel_len;
	char *consdev;
	char *cmdline;

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01bd8:	e3500000 	cmp	r0, #0	; 0x0
c7e01bdc:	13500080 	cmpne	r0, #128	; 0x80
/*******************************************************************/

#ifdef CONFIG_BOOTM_NETBSD
static int do_bootm_netbsd(int flag, int argc, char * const argv[],
			    bootm_headers_t *images)
{
c7e01be0:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e01be4:	e1a0a001 	mov	sl, r1
c7e01be8:	e1a06002 	mov	r6, r2
c7e01bec:	e1a09003 	mov	r9, r3
	image_header_t *os_hdr, *hdr;
	ulong kernel_data, kernel_len;
	char *consdev;
	char *cmdline;

	if ((flag != 0) && (flag != BOOTM_STATE_OS_GO))
c7e01bf0:	1a00003e 	bne	c7e01cf0 <do_bootm_netbsd+0x118>
	 * besides the board info strucure, the loader expects a command
	 * line, the name of the console device, and (optionally) the
	 * address of the original image header.
	 */
	os_hdr = NULL;
	if (image_check_type(&images->legacy_hdr_os_copy, IH_TYPE_MULTI)) {
c7e01bf4:	e5d33022 	ldrb	r3, [r3, #34]
	if (!images->legacy_hdr_valid) {
		fit_unsupported_reset("NetBSD");
		return 1;
	}
#endif
	hdr = images->legacy_hdr_os;
c7e01bf8:	e5994000 	ldr	r4, [r9]
	 * besides the board info strucure, the loader expects a command
	 * line, the name of the console device, and (optionally) the
	 * address of the original image header.
	 */
	os_hdr = NULL;
	if (image_check_type(&images->legacy_hdr_os_copy, IH_TYPE_MULTI)) {
c7e01bfc:	e3530004 	cmp	r3, #4	; 0x4
c7e01c00:	1a000008 	bne	c7e01c28 <do_bootm_netbsd+0x50>
		image_multi_getimg(hdr, 1, &kernel_data, &kernel_len);
c7e01c04:	e1a0300d 	mov	r3, sp
c7e01c08:	e1a00004 	mov	r0, r4
c7e01c0c:	e3a01001 	mov	r1, #1	; 0x1
c7e01c10:	e28d2004 	add	r2, sp, #4	; 0x4
c7e01c14:	eb002af1 	bl	c7e0c7e0 <image_multi_getimg>
		if (kernel_len)
c7e01c18:	e59d3000 	ldr	r3, [sp]
c7e01c1c:	e3530000 	cmp	r3, #0	; 0x0
c7e01c20:	11a0b004 	movne	fp, r4
c7e01c24:	1a000000 	bne	c7e01c2c <do_bootm_netbsd+0x54>
c7e01c28:	e3a0b000 	mov	fp, #0	; 0x0
	consdev = "scc2";
#elif defined(CONFIG_8xx_CONS_SCC3)
	consdev = "scc3";
#endif

	if (argc > 2) {
c7e01c2c:	e35a0002 	cmp	sl, #2	; 0x2
c7e01c30:	da00001d 	ble	c7e01cac <do_bootm_netbsd+0xd4>
c7e01c34:	e3a05000 	mov	r5, #0	; 0x0
c7e01c38:	e3a04002 	mov	r4, #2	; 0x2
		ulong len;
		int   i;

		for (i = 2, len = 0; i < argc; i += 1)
			len += strlen(argv[i]) + 1;
c7e01c3c:	e7960104 	ldr	r0, [r6, r4, lsl #2]
c7e01c40:	eb00833c 	bl	c7e22938 <strlen>

	if (argc > 2) {
		ulong len;
		int   i;

		for (i = 2, len = 0; i < argc; i += 1)
c7e01c44:	e2844001 	add	r4, r4, #1	; 0x1
			len += strlen(argv[i]) + 1;
c7e01c48:	e0800005 	add	r0, r0, r5

	if (argc > 2) {
		ulong len;
		int   i;

		for (i = 2, len = 0; i < argc; i += 1)
c7e01c4c:	e154000a 	cmp	r4, sl
			len += strlen(argv[i]) + 1;
c7e01c50:	e2805001 	add	r5, r0, #1	; 0x1

	if (argc > 2) {
		ulong len;
		int   i;

		for (i = 2, len = 0; i < argc; i += 1)
c7e01c54:	bafffff8 	blt	c7e01c3c <do_bootm_netbsd+0x64>
			len += strlen(argv[i]) + 1;
		cmdline = malloc(len);
c7e01c58:	e1a00005 	mov	r0, r5
c7e01c5c:	eb001d4e 	bl	c7e0919c <malloc>
c7e01c60:	e1a04006 	mov	r4, r6
c7e01c64:	e3a05000 	mov	r5, #0	; 0x0
c7e01c68:	e3a06002 	mov	r6, #2	; 0x2
c7e01c6c:	e1a07000 	mov	r7, r0
c7e01c70:	ea000001 	b	c7e01c7c <do_bootm_netbsd+0xa4>

		for (i = 2, len = 0; i < argc; i += 1) {
			if (i > 2)
				cmdline[len++] = ' ';
c7e01c74:	e3a03020 	mov	r3, #32	; 0x20
c7e01c78:	e7c73000 	strb	r3, [r7, r0]
			strcpy(&cmdline[len], argv[i]);
c7e01c7c:	e5941008 	ldr	r1, [r4, #8]
c7e01c80:	e0870005 	add	r0, r7, r5
c7e01c84:	eb0082be 	bl	c7e22784 <strcpy>
			len += strlen(argv[i]);
c7e01c88:	e5940008 	ldr	r0, [r4, #8]
c7e01c8c:	eb008329 	bl	c7e22938 <strlen>

		for (i = 2, len = 0; i < argc; i += 1)
			len += strlen(argv[i]) + 1;
		cmdline = malloc(len);

		for (i = 2, len = 0; i < argc; i += 1) {
c7e01c90:	e2866001 	add	r6, r6, #1	; 0x1
			if (i > 2)
				cmdline[len++] = ' ';
			strcpy(&cmdline[len], argv[i]);
			len += strlen(argv[i]);
c7e01c94:	e0800005 	add	r0, r0, r5

		for (i = 2, len = 0; i < argc; i += 1)
			len += strlen(argv[i]) + 1;
		cmdline = malloc(len);

		for (i = 2, len = 0; i < argc; i += 1) {
c7e01c98:	e156000a 	cmp	r6, sl
			if (i > 2)
				cmdline[len++] = ' ';
c7e01c9c:	e2844004 	add	r4, r4, #4	; 0x4
c7e01ca0:	e2805001 	add	r5, r0, #1	; 0x1

		for (i = 2, len = 0; i < argc; i += 1)
			len += strlen(argv[i]) + 1;
		cmdline = malloc(len);

		for (i = 2, len = 0; i < argc; i += 1) {
c7e01ca4:	bafffff2 	blt	c7e01c74 <do_bootm_netbsd+0x9c>
c7e01ca8:	ea000005 	b	c7e01cc4 <do_bootm_netbsd+0xec>
			if (i > 2)
				cmdline[len++] = ' ';
			strcpy(&cmdline[len], argv[i]);
			len += strlen(argv[i]);
		}
	} else if ((cmdline = getenv("bootargs")) == NULL) {
c7e01cac:	e59f0044 	ldr	r0, [pc, #68]	; c7e01cf8 <do_bootm_netbsd+0x120>
c7e01cb0:	eb0014f9 	bl	c7e0709c <getenv>
c7e01cb4:	e59f3040 	ldr	r3, [pc, #64]	; c7e01cfc <do_bootm_netbsd+0x124>
c7e01cb8:	e3500000 	cmp	r0, #0	; 0x0
c7e01cbc:	11a07000 	movne	r7, r0
c7e01cc0:	01a07003 	moveq	r7, r3
		cmdline = "";
	}

	loader = (void (*)(bd_t *, image_header_t *, char *, char *))images->ep;
c7e01cc4:	e5994060 	ldr	r4, [r9, #96]

	printf("## Transferring control to NetBSD stage-2 loader "
c7e01cc8:	e59f0030 	ldr	r0, [pc, #48]	; c7e01d00 <do_bootm_netbsd+0x128>
c7e01ccc:	e1a01004 	mov	r1, r4
c7e01cd0:	eb001b60 	bl	c7e08a58 <printf>
		"(at address %08lx) ...\n",
		(ulong)loader);

	bootstage_mark(BOOTSTAGE_ID_RUN_OS);
c7e01cd4:	e3a0000f 	mov	r0, #15	; 0xf
c7e01cd8:	ebffffab 	bl	c7e01b8c <bootstage_mark>
	 *   r3: ptr to board info data
	 *   r4: image address
	 *   r5: console device
	 *   r6: boot args string
	 */
	(*loader)(gd->bd, os_hdr, consdev, cmdline);
c7e01cdc:	e1a0100b 	mov	r1, fp
c7e01ce0:	e5980000 	ldr	r0, [r8]
c7e01ce4:	e1a03007 	mov	r3, r7
c7e01ce8:	e59f200c 	ldr	r2, [pc, #12]	; c7e01cfc <do_bootm_netbsd+0x124>
c7e01cec:	e12fff34 	blx	r4

	return 1;
}
c7e01cf0:	e3a00001 	mov	r0, #1	; 0x1
c7e01cf4:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e01cf8:	c7e2e01a 	.word	0xc7e2e01a
c7e01cfc:	c7e2fef0 	.word	0xc7e2fef0
c7e01d00:	c7e2e6a9 	.word	0xc7e2e6a9

c7e01d04 <bootstage_error>:

static inline ulong bootstage_error(enum bootstage_id id)
{
c7e01d04:	e92d4010 	push	{r4, lr}
	show_boot_progress(-id);
c7e01d08:	e2600000 	rsb	r0, r0, #0	; 0x0
c7e01d0c:	eb002eda 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e01d10:	e3a00000 	mov	r0, #0	; 0x0
c7e01d14:	e8bd8010 	pop	{r4, pc}

c7e01d18 <bootm_start>:
#define lmb_reserve(lmb, base, size)
static inline void boot_start_lmb(bootm_headers_t *images) { }
#endif

static int bootm_start(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01d18:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	void		*os_hdr;
	int		ret;

	memset((void *)&images, 0, sizeof(images));
c7e01d1c:	e59f5378 	ldr	r5, [pc, #888]	; c7e0209c <bootm_start+0x384>
c7e01d20:	e3a01000 	mov	r1, #0	; 0x0
#define lmb_reserve(lmb, base, size)
static inline void boot_start_lmb(bootm_headers_t *images) { }
#endif

static int bootm_start(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01d24:	e58d200c 	str	r2, [sp, #12]
c7e01d28:	e1a09000 	mov	r9, r0
	void		*os_hdr;
	int		ret;

	memset((void *)&images, 0, sizeof(images));
c7e01d2c:	e3a02f4b 	mov	r2, #300	; 0x12c
c7e01d30:	e1a00005 	mov	r0, r5
#define lmb_reserve(lmb, base, size)
static inline void boot_start_lmb(bootm_headers_t *images) { }
#endif

static int bootm_start(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e01d34:	e1a0b003 	mov	fp, r3
	void		*os_hdr;
	int		ret;

	memset((void *)&images, 0, sizeof(images));
c7e01d38:	eb008395 	bl	c7e22b94 <memset>
	images.verify = getenv_yesno("verify");
c7e01d3c:	e59f035c 	ldr	r0, [pc, #860]	; c7e020a0 <bootm_start+0x388>
c7e01d40:	eb002a4b 	bl	c7e0c674 <getenv_yesno>
c7e01d44:	e5850084 	str	r0, [r5, #132]
static void boot_start_lmb(bootm_headers_t *images)
{
	ulong		mem_start;
	phys_size_t	mem_size;

	lmb_init(&images->lmb);
c7e01d48:	e285008c 	add	r0, r5, #140	; 0x8c
c7e01d4c:	eb0080de 	bl	c7e220cc <lmb_init>

	mem_start = getenv_bootm_low();
c7e01d50:	eb002a50 	bl	c7e0c698 <getenv_bootm_low>
c7e01d54:	e1a04000 	mov	r4, r0
	mem_size = getenv_bootm_size();
c7e01d58:	eb002b80 	bl	c7e0cb60 <getenv_bootm_size>

	lmb_add(&images->lmb, (phys_addr_t)mem_start, mem_size);
c7e01d5c:	e1a01004 	mov	r1, r4
	phys_size_t	mem_size;

	lmb_init(&images->lmb);

	mem_start = getenv_bootm_low();
	mem_size = getenv_bootm_size();
c7e01d60:	e1a02000 	mov	r2, r0

	lmb_add(&images->lmb, (phys_addr_t)mem_start, mem_size);
c7e01d64:	e285008c 	add	r0, r5, #140	; 0x8c
c7e01d68:	eb008154 	bl	c7e222c0 <lmb_add>

	arch_lmb_reserve(&images->lmb);
c7e01d6c:	e285008c 	add	r0, r5, #140	; 0x8c
c7e01d70:	ebfffcd0 	bl	c7e010b8 <arch_lmb_reserve>
	board_lmb_reserve(&images->lmb);
c7e01d74:	e285008c 	add	r0, r5, #140	; 0x8c
c7e01d78:	eb008209 	bl	c7e225a4 <__board_lmb_reserve>
	int		cfg_noffset;
	int		os_noffset;
#endif

	/* find out kernel image address */
	if (argc < 2) {
c7e01d7c:	e59d300c 	ldr	r3, [sp, #12]
c7e01d80:	e3530001 	cmp	r3, #1	; 0x1
		img_addr = load_addr;
c7e01d84:	d59f3318 	ldrle	r3, [pc, #792]	; c7e020a4 <bootm_start+0x38c>
c7e01d88:	d5934000 	ldrle	r4, [r3]
	int		cfg_noffset;
	int		os_noffset;
#endif

	/* find out kernel image address */
	if (argc < 2) {
c7e01d8c:	da000004 	ble	c7e01da4 <bootm_start+0x8c>
							&fit_uname_kernel)) {
		debug("*  kernel: subimage '%s' from image at 0x%08lx\n",
				fit_uname_kernel, img_addr);
#endif
	} else {
		img_addr = simple_strtoul(argv[1], NULL, 16);
c7e01d90:	e59b0004 	ldr	r0, [fp, #4]
c7e01d94:	e3a01000 	mov	r1, #0	; 0x0
c7e01d98:	e3a02010 	mov	r2, #16	; 0x10
c7e01d9c:	eb00846f 	bl	c7e22f60 <simple_strtoul>
c7e01da0:	e1a04000 	mov	r4, r0
		debug("*  kernel: cmdline image address = 0x%08lx\n", img_addr);
	}

	bootstage_mark(BOOTSTAGE_ID_CHECK_MAGIC);
c7e01da4:	e3a00001 	mov	r0, #1	; 0x1
c7e01da8:	ebffff77 	bl	c7e01b8c <bootstage_mark>

	/* copy from dataflash if needed */
	img_addr = genimg_get_image(img_addr);
c7e01dac:	e1a00004 	mov	r0, r4
c7e01db0:	eb002a2c 	bl	c7e0c668 <genimg_get_image>

	/* check image type, for FIT images get FIT kernel node */
	*os_data = *os_len = 0;
c7e01db4:	e59f42e0 	ldr	r4, [pc, #736]	; c7e0209c <bootm_start+0x384>
c7e01db8:	e3a06000 	mov	r6, #0	; 0x0
c7e01dbc:	e5846054 	str	r6, [r4, #84]
c7e01dc0:	e5846050 	str	r6, [r4, #80]
	}

	bootstage_mark(BOOTSTAGE_ID_CHECK_MAGIC);

	/* copy from dataflash if needed */
	img_addr = genimg_get_image(img_addr);
c7e01dc4:	e1a05000 	mov	r5, r0

	/* check image type, for FIT images get FIT kernel node */
	*os_data = *os_len = 0;
	switch (genimg_get_format((void *)img_addr)) {
c7e01dc8:	eb002a7b 	bl	c7e0c7bc <genimg_get_format>
c7e01dcc:	e3500001 	cmp	r0, #1	; 0x1
c7e01dd0:	e1a0a000 	mov	sl, r0
c7e01dd4:	e1a07005 	mov	r7, r5
c7e01dd8:	1a00005d 	bne	c7e01f54 <bootm_start+0x23c>
	case IMAGE_FORMAT_LEGACY:
		printf("## Booting kernel from Legacy Image at %08lx ...\n",
c7e01ddc:	e1a01005 	mov	r1, r5
c7e01de0:	e59f02c0 	ldr	r0, [pc, #704]	; c7e020a8 <bootm_start+0x390>
c7e01de4:	eb001b1b 	bl	c7e08a58 <printf>
 */
static image_header_t *image_get_kernel(ulong img_addr, int verify)
{
	image_header_t *hdr = (image_header_t *)img_addr;

	if (!image_check_magic(hdr)) {
c7e01de8:	e1a00005 	mov	r0, r5
	*os_data = *os_len = 0;
	switch (genimg_get_format((void *)img_addr)) {
	case IMAGE_FORMAT_LEGACY:
		printf("## Booting kernel from Legacy Image at %08lx ...\n",
				img_addr);
		hdr = image_get_kernel(img_addr, images->verify);
c7e01dec:	e5944084 	ldr	r4, [r4, #132]
 */
static image_header_t *image_get_kernel(ulong img_addr, int verify)
{
	image_header_t *hdr = (image_header_t *)img_addr;

	if (!image_check_magic(hdr)) {
c7e01df0:	ebfffed4 	bl	c7e01948 <image_check_magic>
c7e01df4:	e3500000 	cmp	r0, #0	; 0x0
c7e01df8:	1a000003 	bne	c7e01e0c <bootm_start+0xf4>
		puts("Bad Magic Number\n");
c7e01dfc:	e59f02a8 	ldr	r0, [pc, #680]	; c7e020ac <bootm_start+0x394>
c7e01e00:	eb001af9 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_CHECK_MAGIC);
c7e01e04:	e1a0000a 	mov	r0, sl
c7e01e08:	ea000023 	b	c7e01e9c <bootm_start+0x184>
		return NULL;
	}
	bootstage_mark(BOOTSTAGE_ID_CHECK_HEADER);
c7e01e0c:	e3a00002 	mov	r0, #2	; 0x2
c7e01e10:	ebffff5d 	bl	c7e01b8c <bootstage_mark>

	if (!image_check_hcrc(hdr)) {
c7e01e14:	e1a00005 	mov	r0, r5
c7e01e18:	eb002b85 	bl	c7e0cc34 <image_check_hcrc>
c7e01e1c:	e3500000 	cmp	r0, #0	; 0x0
c7e01e20:	1a000003 	bne	c7e01e34 <bootm_start+0x11c>
		puts("Bad Header Checksum\n");
c7e01e24:	e59f0284 	ldr	r0, [pc, #644]	; c7e020b0 <bootm_start+0x398>
c7e01e28:	eb001aef 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_CHECK_HEADER);
c7e01e2c:	e3a00002 	mov	r0, #2	; 0x2
c7e01e30:	ea000019 	b	c7e01e9c <bootm_start+0x184>
		return NULL;
	}

	bootstage_mark(BOOTSTAGE_ID_CHECK_CHECKSUM);
c7e01e34:	e3a00003 	mov	r0, #3	; 0x3
c7e01e38:	ebffff53 	bl	c7e01b8c <bootstage_mark>
	image_print_contents(hdr);
c7e01e3c:	e1a00005 	mov	r0, r5
c7e01e40:	eb002a93 	bl	c7e0c894 <image_print_contents>

	if (verify) {
c7e01e44:	e3540000 	cmp	r4, #0	; 0x0
c7e01e48:	0a00000b 	beq	c7e01e7c <bootm_start+0x164>
		puts("   Verifying Checksum ... ");
c7e01e4c:	e59f0260 	ldr	r0, [pc, #608]	; c7e020b4 <bootm_start+0x39c>
c7e01e50:	eb001ae5 	bl	c7e089ec <puts>
		if (!image_check_dcrc(hdr)) {
c7e01e54:	e1a00005 	mov	r0, r5
c7e01e58:	eb002b63 	bl	c7e0cbec <image_check_dcrc>
c7e01e5c:	e3500000 	cmp	r0, #0	; 0x0
c7e01e60:	1a000003 	bne	c7e01e74 <bootm_start+0x15c>
			printf("Bad Data CRC\n");
c7e01e64:	e59f024c 	ldr	r0, [pc, #588]	; c7e020b8 <bootm_start+0x3a0>
c7e01e68:	eb001afa 	bl	c7e08a58 <printf>
			bootstage_error(BOOTSTAGE_ID_CHECK_CHECKSUM);
c7e01e6c:	e3a00003 	mov	r0, #3	; 0x3
c7e01e70:	ea000009 	b	c7e01e9c <bootm_start+0x184>
			return NULL;
		}
		puts("OK\n");
c7e01e74:	e59f0240 	ldr	r0, [pc, #576]	; c7e020bc <bootm_start+0x3a4>
c7e01e78:	eb001adb 	bl	c7e089ec <puts>
	}
	bootstage_mark(BOOTSTAGE_ID_CHECK_ARCH);
c7e01e7c:	e3a00004 	mov	r0, #4	; 0x4
c7e01e80:	ebffff41 	bl	c7e01b8c <bootstage_mark>
	static inline uint8_t image_get_##f(const image_header_t *hdr) \
	{ \
		return hdr->ih_##f; \
	}
image_get_hdr_b(os)		/* image_get_os */
image_get_hdr_b(arch)		/* image_get_arch */
c7e01e84:	e5d5101d 	ldrb	r1, [r5, #29]

	if (!image_check_target_arch(hdr)) {
c7e01e88:	e3510002 	cmp	r1, #2	; 0x2
c7e01e8c:	0a000005 	beq	c7e01ea8 <bootm_start+0x190>
		printf("Unsupported Architecture 0x%x\n", image_get_arch(hdr));
c7e01e90:	e59f0228 	ldr	r0, [pc, #552]	; c7e020c0 <bootm_start+0x3a8>
c7e01e94:	eb001aef 	bl	c7e08a58 <printf>
		bootstage_error(BOOTSTAGE_ID_CHECK_ARCH);
c7e01e98:	e3a00004 	mov	r0, #4	; 0x4
c7e01e9c:	ebffff98 	bl	c7e01d04 <bootstage_error>
		set_working_fdt_addr(images.ft_addr);
#endif
	}

	images.os.start = (ulong)os_hdr;
	images.state = BOOTM_STATE_START;
c7e01ea0:	e3a07000 	mov	r7, #0	; 0x0
c7e01ea4:	ea000030 	b	c7e01f6c <bootm_start+0x254>
		printf("## Booting kernel from Legacy Image at %08lx ...\n",
				img_addr);
		hdr = image_get_kernel(img_addr, images->verify);
		if (!hdr)
			return NULL;
		bootstage_mark(BOOTSTAGE_ID_CHECK_IMAGETYPE);
c7e01ea8:	e3a00005 	mov	r0, #5	; 0x5
c7e01eac:	ebffff36 	bl	c7e01b8c <bootstage_mark>

		/* get os_data and os_len */
		switch (image_get_type(hdr)) {
c7e01eb0:	e5d5301e 	ldrb	r3, [r5, #30]
c7e01eb4:	e3530002 	cmp	r3, #2	; 0x2
c7e01eb8:	0a00000d 	beq	c7e01ef4 <bootm_start+0x1dc>
c7e01ebc:	8a000001 	bhi	c7e01ec8 <bootm_start+0x1b0>
c7e01ec0:	e3530001 	cmp	r3, #1	; 0x1
c7e01ec4:	ea000002 	b	c7e01ed4 <bootm_start+0x1bc>
c7e01ec8:	e3530004 	cmp	r3, #4	; 0x4
c7e01ecc:	0a000002 	beq	c7e01edc <bootm_start+0x1c4>
c7e01ed0:	e353000e 	cmp	r3, #14	; 0xe
c7e01ed4:	1a00000e 	bne	c7e01f14 <bootm_start+0x1fc>
c7e01ed8:	ea000005 	b	c7e01ef4 <bootm_start+0x1dc>
		case IH_TYPE_KERNEL_NOLOAD:
			*os_data = image_get_data(hdr);
			*os_len = image_get_data_size(hdr);
			break;
		case IH_TYPE_MULTI:
			image_multi_getimg(hdr, 0, os_data, os_len);
c7e01edc:	e59f21e0 	ldr	r2, [pc, #480]	; c7e020c4 <bootm_start+0x3ac>
c7e01ee0:	e1a00005 	mov	r0, r5
c7e01ee4:	e3a01000 	mov	r1, #0	; 0x0
c7e01ee8:	e2823004 	add	r3, r2, #4	; 0x4
c7e01eec:	eb002a3b 	bl	c7e0c7e0 <image_multi_getimg>
c7e01ef0:	ea00000c 	b	c7e01f28 <bootm_start+0x210>
			break;
		case IH_TYPE_STANDALONE:
			*os_data = image_get_data(hdr);
c7e01ef4:	e1a00005 	mov	r0, r5
c7e01ef8:	ebfffe8f 	bl	c7e0193c <image_get_data>
c7e01efc:	e59f4198 	ldr	r4, [pc, #408]	; c7e0209c <bootm_start+0x384>
c7e01f00:	e5840050 	str	r0, [r4, #80]
			*os_len = image_get_data_size(hdr);
c7e01f04:	e1a00005 	mov	r0, r5
c7e01f08:	ebfffee3 	bl	c7e01a9c <image_get_data_size>
c7e01f0c:	e5840054 	str	r0, [r4, #84]
c7e01f10:	ea000004 	b	c7e01f28 <bootm_start+0x210>
			break;
		default:
			printf("Wrong Image Type for %s command\n",
c7e01f14:	e5991000 	ldr	r1, [r9]
c7e01f18:	e59f01a8 	ldr	r0, [pc, #424]	; c7e020c8 <bootm_start+0x3b0>
c7e01f1c:	eb001acd 	bl	c7e08a58 <printf>
				cmdtp->name);
			bootstage_error(BOOTSTAGE_ID_CHECK_IMAGETYPE);
c7e01f20:	e3a00005 	mov	r0, #5	; 0x5
c7e01f24:	eaffffdc 	b	c7e01e9c <bootm_start+0x184>

		/*
		 * copy image header to allow for image overwrites during
		 * kernel decompression.
		 */
		memmove(&images->legacy_hdr_os_copy, hdr,
c7e01f28:	e59f416c 	ldr	r4, [pc, #364]	; c7e0209c <bootm_start+0x384>
c7e01f2c:	e1a01005 	mov	r1, r5
c7e01f30:	e2840004 	add	r0, r4, #4	; 0x4
c7e01f34:	e3a02040 	mov	r2, #64	; 0x40
c7e01f38:	eb008360 	bl	c7e22cc0 <memmove>
			sizeof(image_header_t));

		/* save pointer to image header */
		images->legacy_hdr_os = hdr;

		images->legacy_hdr_valid = 1;
c7e01f3c:	e3a03001 	mov	r3, #1	; 0x1
c7e01f40:	e5843044 	str	r3, [r4, #68]
		 */
		memmove(&images->legacy_hdr_os_copy, hdr,
			sizeof(image_header_t));

		/* save pointer to image header */
		images->legacy_hdr_os = hdr;
c7e01f44:	e5845000 	str	r5, [r4]

		images->legacy_hdr_valid = 1;
		bootstage_mark(BOOTSTAGE_ID_DECOMP_IMAGE);
c7e01f48:	e3a00006 	mov	r0, #6	; 0x6
c7e01f4c:	ebffff0e 	bl	c7e01b8c <bootstage_mark>
c7e01f50:	ea000005 	b	c7e01f6c <bootm_start+0x254>
		images->fit_uname_os = fit_uname_kernel;
		images->fit_noffset_os = os_noffset;
		break;
#endif
	default:
		printf("Wrong Image Format for %s command\n", cmdtp->name);
c7e01f54:	e5991000 	ldr	r1, [r9]
c7e01f58:	e59f016c 	ldr	r0, [pc, #364]	; c7e020cc <bootm_start+0x3b4>
c7e01f5c:	eb001abd 	bl	c7e08a58 <printf>
		bootstage_error(BOOTSTAGE_ID_FIT_KERNEL_INFO);
c7e01f60:	e3a0006c 	mov	r0, #108	; 0x6c
c7e01f64:	ebffff66 	bl	c7e01d04 <bootstage_error>
c7e01f68:	e1a07006 	mov	r7, r6
	bootstage_mark_name(BOOTSTAGE_ID_BOOTM_START, "bootm_start");

	/* get kernel image header, start address and length */
	os_hdr = boot_get_kernel(cmdtp, flag, argc, argv,
			&images, &images.os.image_start, &images.os.image_len);
	if (images.os.image_len == 0) {
c7e01f6c:	e59f4128 	ldr	r4, [pc, #296]	; c7e0209c <bootm_start+0x384>
c7e01f70:	e5943054 	ldr	r3, [r4, #84]
c7e01f74:	e3530000 	cmp	r3, #0	; 0x0
		puts("ERROR: can't get kernel image!\n");
c7e01f78:	059f0150 	ldreq	r0, [pc, #336]	; c7e020d0 <bootm_start+0x3b8>
	bootstage_mark_name(BOOTSTAGE_ID_BOOTM_START, "bootm_start");

	/* get kernel image header, start address and length */
	os_hdr = boot_get_kernel(cmdtp, flag, argc, argv,
			&images, &images.os.image_start, &images.os.image_len);
	if (images.os.image_len == 0) {
c7e01f7c:	0a000017 	beq	c7e01fe0 <bootm_start+0x2c8>
		puts("ERROR: can't get kernel image!\n");
		return 1;
	}

	/* get image parameters */
	switch (genimg_get_format(os_hdr)) {
c7e01f80:	e1a00007 	mov	r0, r7
c7e01f84:	eb002a0c 	bl	c7e0c7bc <genimg_get_format>
c7e01f88:	e3500001 	cmp	r0, #1	; 0x1
c7e01f8c:	e1a05000 	mov	r5, r0
			return 1;
		}
		break;
#endif
	default:
		puts("ERROR: unknown image format type!\n");
c7e01f90:	159f013c 	ldrne	r0, [pc, #316]	; c7e020d4 <bootm_start+0x3bc>
		puts("ERROR: can't get kernel image!\n");
		return 1;
	}

	/* get image parameters */
	switch (genimg_get_format(os_hdr)) {
c7e01f94:	1a000011 	bne	c7e01fe0 <bootm_start+0x2c8>
	case IMAGE_FORMAT_LEGACY:
		images.os.type = image_get_type(os_hdr);
c7e01f98:	e5d7301e 	ldrb	r3, [r7, #30]
	return ((ulong)hdr + image_get_header_size());
}

static inline uint32_t image_get_image_size(const image_header_t *hdr)
{
	return (image_get_size(hdr) + image_get_header_size());
c7e01f9c:	e1a00007 	mov	r0, r7
c7e01fa0:	e5c4305d 	strb	r3, [r4, #93]
		images.os.comp = image_get_comp(os_hdr);
c7e01fa4:	e5d7301f 	ldrb	r3, [r7, #31]
c7e01fa8:	e5c4305c 	strb	r3, [r4, #92]
		images.os.os = image_get_os(os_hdr);
c7e01fac:	e5d7301c 	ldrb	r3, [r7, #28]
c7e01fb0:	e5c4305e 	strb	r3, [r4, #94]
c7e01fb4:	ebfffeb6 	bl	c7e01a94 <image_get_size>

		images.os.end = image_get_image_end(os_hdr);
c7e01fb8:	e2803040 	add	r3, r0, #64	; 0x40
c7e01fbc:	e0873003 	add	r3, r7, r3
c7e01fc0:	e584304c 	str	r3, [r4, #76]
	}
image_get_hdr_l(magic)		/* image_get_magic */
image_get_hdr_l(hcrc)		/* image_get_hcrc */
image_get_hdr_l(time)		/* image_get_time */
image_get_hdr_l(size)		/* image_get_size */
image_get_hdr_l(load)		/* image_get_load */
c7e01fc4:	e5970010 	ldr	r0, [r7, #16]
c7e01fc8:	ebfffe53 	bl	c7e0191c <__fswab32>
		puts("ERROR: unknown image format type!\n");
		return 1;
	}

	/* find kernel entry point */
	if (images.legacy_hdr_valid) {
c7e01fcc:	e5943044 	ldr	r3, [r4, #68]
		images.os.type = image_get_type(os_hdr);
		images.os.comp = image_get_comp(os_hdr);
		images.os.os = image_get_os(os_hdr);

		images.os.end = image_get_image_end(os_hdr);
		images.os.load = image_get_load(os_hdr);
c7e01fd0:	e5840058 	str	r0, [r4, #88]
		puts("ERROR: unknown image format type!\n");
		return 1;
	}

	/* find kernel entry point */
	if (images.legacy_hdr_valid) {
c7e01fd4:	e3530000 	cmp	r3, #0	; 0x0
c7e01fd8:	1a000003 	bne	c7e01fec <bootm_start+0x2d4>
c7e01fdc:	ea000009 	b	c7e02008 <bootm_start+0x2f0>
			return 1;
		}
		break;
#endif
	default:
		puts("ERROR: unknown image format type!\n");
c7e01fe0:	eb001a81 	bl	c7e089ec <puts>
c7e01fe4:	e3a00001 	mov	r0, #1	; 0x1
c7e01fe8:	ea000029 	b	c7e02094 <bootm_start+0x37c>
image_get_hdr_l(ep)		/* image_get_ep */
c7e01fec:	e5940018 	ldr	r0, [r4, #24]
c7e01ff0:	ebfffe49 	bl	c7e0191c <__fswab32>
	} else {
		puts("Could not find kernel entry point!\n");
		return 1;
	}

	if (images.os.type == IH_TYPE_KERNEL_NOLOAD) {
c7e01ff4:	e5d4305d 	ldrb	r3, [r4, #93]
		return 1;
	}

	/* find kernel entry point */
	if (images.legacy_hdr_valid) {
		images.ep = image_get_ep(&images.legacy_hdr_os_copy);
c7e01ff8:	e5840060 	str	r0, [r4, #96]
	} else {
		puts("Could not find kernel entry point!\n");
		return 1;
	}

	if (images.os.type == IH_TYPE_KERNEL_NOLOAD) {
c7e01ffc:	e353000e 	cmp	r3, #14	; 0xe
c7e02000:	1a000008 	bne	c7e02028 <bootm_start+0x310>
c7e02004:	ea000003 	b	c7e02018 <bootm_start+0x300>
			puts("Can't get entry point property!\n");
			return 1;
		}
#endif
	} else {
		puts("Could not find kernel entry point!\n");
c7e02008:	e59f00c8 	ldr	r0, [pc, #200]	; c7e020d8 <bootm_start+0x3c0>
c7e0200c:	eb001a76 	bl	c7e089ec <puts>
c7e02010:	e1a00005 	mov	r0, r5
c7e02014:	ea00001e 	b	c7e02094 <bootm_start+0x37c>
		return 1;
	}

	if (images.os.type == IH_TYPE_KERNEL_NOLOAD) {
		images.os.load = images.os.image_start;
c7e02018:	e5942050 	ldr	r2, [r4, #80]
		images.ep += images.os.load;
c7e0201c:	e0803002 	add	r3, r0, r2
c7e02020:	e5843060 	str	r3, [r4, #96]
		puts("Could not find kernel entry point!\n");
		return 1;
	}

	if (images.os.type == IH_TYPE_KERNEL_NOLOAD) {
		images.os.load = images.os.image_start;
c7e02024:	e5842058 	str	r2, [r4, #88]
		images.ep += images.os.load;
	}

	if (((images.os.type == IH_TYPE_KERNEL) ||
c7e02028:	e59f306c 	ldr	r3, [pc, #108]	; c7e0209c <bootm_start+0x384>
c7e0202c:	e5d3305d 	ldrb	r3, [r3, #93]
c7e02030:	e353000e 	cmp	r3, #14	; 0xe
c7e02034:	13530002 	cmpne	r3, #2	; 0x2
c7e02038:	0a000001 	beq	c7e02044 <bootm_start+0x32c>
c7e0203c:	e3530004 	cmp	r3, #4	; 0x4
c7e02040:	1a00000e 	bne	c7e02080 <bootm_start+0x368>
c7e02044:	e59fe050 	ldr	lr, [pc, #80]	; c7e0209c <bootm_start+0x384>
c7e02048:	e5de305e 	ldrb	r3, [lr, #94]
c7e0204c:	e3530005 	cmp	r3, #5	; 0x5
c7e02050:	1a00000a 	bne	c7e02080 <bootm_start+0x368>
	     (images.os.type == IH_TYPE_KERNEL_NOLOAD) ||
	     (images.os.type == IH_TYPE_MULTI)) &&
	    (images.os.os == IH_OS_LINUX)) {
		/* find ramdisk */
		ret = boot_get_ramdisk(argc, argv, &images, IH_INITRD_ARCH,
c7e02054:	e28ec064 	add	ip, lr, #100	; 0x64
c7e02058:	e1a0200e 	mov	r2, lr
c7e0205c:	e59d000c 	ldr	r0, [sp, #12]
c7e02060:	e28ee068 	add	lr, lr, #104	; 0x68
c7e02064:	e1a0100b 	mov	r1, fp
c7e02068:	e3a03002 	mov	r3, #2	; 0x2
c7e0206c:	e88d5000 	stm	sp, {ip, lr}
c7e02070:	eb002b04 	bl	c7e0cc88 <boot_get_ramdisk>
				&images.rd_start, &images.rd_end);
		if (ret) {
c7e02074:	e3500000 	cmp	r0, #0	; 0x0
			puts("Ramdisk image is corrupt or invalid\n");
c7e02078:	159f005c 	ldrne	r0, [pc, #92]	; c7e020dc <bootm_start+0x3c4>
	     (images.os.type == IH_TYPE_MULTI)) &&
	    (images.os.os == IH_OS_LINUX)) {
		/* find ramdisk */
		ret = boot_get_ramdisk(argc, argv, &images, IH_INITRD_ARCH,
				&images.rd_start, &images.rd_end);
		if (ret) {
c7e0207c:	1affffd7 	bne	c7e01fe0 <bootm_start+0x2c8>

		set_working_fdt_addr(images.ft_addr);
#endif
	}

	images.os.start = (ulong)os_hdr;
c7e02080:	e59f2014 	ldr	r2, [pc, #20]	; c7e0209c <bootm_start+0x384>
	images.state = BOOTM_STATE_START;
c7e02084:	e3a03001 	mov	r3, #1	; 0x1
c7e02088:	e5823088 	str	r3, [r2, #136]

		set_working_fdt_addr(images.ft_addr);
#endif
	}

	images.os.start = (ulong)os_hdr;
c7e0208c:	e5827048 	str	r7, [r2, #72]
	images.state = BOOTM_STATE_START;
c7e02090:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e02094:	e28dd010 	add	sp, sp, #16	; 0x10
c7e02098:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0209c:	c7e40008 	.word	0xc7e40008
c7e020a0:	c7e2e6f2 	.word	0xc7e2e6f2
c7e020a4:	c7e353cc 	.word	0xc7e353cc
c7e020a8:	c7e2e6f9 	.word	0xc7e2e6f9
c7e020ac:	c7e2e5f3 	.word	0xc7e2e5f3
c7e020b0:	c7e2e608 	.word	0xc7e2e608
c7e020b4:	c7e2e61d 	.word	0xc7e2e61d
c7e020b8:	c7e2e63b 	.word	0xc7e2e63b
c7e020bc:	c7e2e649 	.word	0xc7e2e649
c7e020c0:	c7e2e72b 	.word	0xc7e2e72b
c7e020c4:	c7e40058 	.word	0xc7e40058
c7e020c8:	c7e2e74a 	.word	0xc7e2e74a
c7e020cc:	c7e2e76b 	.word	0xc7e2e76b
c7e020d0:	c7e2e78e 	.word	0xc7e2e78e
c7e020d4:	c7e2e7ae 	.word	0xc7e2e7ae
c7e020d8:	c7e2e7d1 	.word	0xc7e2e7d1
c7e020dc:	c7e2e7f5 	.word	0xc7e2e7f5

c7e020e0 <bootm_load_os>:

#define BOOTM_ERR_RESET		-1
#define BOOTM_ERR_OVERLAP	-2
#define BOOTM_ERR_UNIMPLEMENTED	-3
static int bootm_load_os(image_info_t os, ulong *load_end, int boot_progress)
{
c7e020e0:	e24dd010 	sub	sp, sp, #16	; 0x10
c7e020e4:	e92d46f7 	push	{r0, r1, r2, r4, r5, r6, r7, r9, sl, lr}
c7e020e8:	e28dc028 	add	ip, sp, #40	; 0x28
c7e020ec:	e88c000f 	stm	ip, {r0, r1, r2, r3}
c7e020f0:	e5dd603c 	ldrb	r6, [sp, #60]
	uint8_t comp = os.comp;
	ulong load = os.load;
	ulong blob_start = os.start;
	ulong blob_end = os.end;
	ulong image_start = os.image_start;
	ulong image_len = os.image_len;
c7e020f4:	e59d3034 	ldr	r3, [sp, #52]

#define BOOTM_ERR_RESET		-1
#define BOOTM_ERR_OVERLAP	-2
#define BOOTM_ERR_UNIMPLEMENTED	-3
static int bootm_load_os(image_info_t os, ulong *load_end, int boot_progress)
{
c7e020f8:	e5dd003d 	ldrb	r0, [sp, #61]
	uint8_t comp = os.comp;
	ulong load = os.load;
	ulong blob_start = os.start;
	ulong blob_end = os.end;
	ulong image_start = os.image_start;
	ulong image_len = os.image_len;
c7e020fc:	e58d3004 	str	r3, [sp, #4]

#define BOOTM_ERR_RESET		-1
#define BOOTM_ERR_OVERLAP	-2
#define BOOTM_ERR_UNIMPLEMENTED	-3
static int bootm_load_os(image_info_t os, ulong *load_end, int boot_progress)
{
c7e02100:	e59da040 	ldr	sl, [sp, #64]
c7e02104:	e59d4038 	ldr	r4, [sp, #56]
c7e02108:	e59d7028 	ldr	r7, [sp, #40]
c7e0210c:	e59d902c 	ldr	r9, [sp, #44]
c7e02110:	e59d5030 	ldr	r5, [sp, #48]
	int no_overlap = 0;
#if defined(CONFIG_LZMA) || defined(CONFIG_LZO)
	int ret;
#endif /* defined(CONFIG_LZMA) || defined(CONFIG_LZO) */

	const char *type_name = genimg_get_type_name(os.type);
c7e02114:	eb002947 	bl	c7e0c638 <genimg_get_type_name>

	switch (comp) {
c7e02118:	e3560000 	cmp	r6, #0	; 0x0
c7e0211c:	0a000002 	beq	c7e0212c <bootm_load_os+0x4c>
c7e02120:	e3560001 	cmp	r6, #1	; 0x1
c7e02124:	1a000031 	bne	c7e021f0 <bootm_load_os+0x110>
c7e02128:	ea000018 	b	c7e02190 <bootm_load_os+0xb0>
	case IH_COMP_NONE:
		if (load == blob_start || load == image_start) {
c7e0212c:	e1540005 	cmp	r4, r5
c7e02130:	11540007 	cmpne	r4, r7
c7e02134:	13a06000 	movne	r6, #0	; 0x0
c7e02138:	03a06001 	moveq	r6, #1	; 0x1
c7e0213c:	1a000004 	bne	c7e02154 <bootm_load_os+0x74>
			printf("   XIP %s ... ", type_name);
c7e02140:	e1a01000 	mov	r1, r0
c7e02144:	e59f0114 	ldr	r0, [pc, #276]	; c7e02260 <bootm_load_os+0x180>
c7e02148:	eb001a42 	bl	c7e08a58 <printf>
c7e0214c:	e3a05001 	mov	r5, #1	; 0x1
c7e02150:	ea000008 	b	c7e02178 <bootm_load_os+0x98>
			no_overlap = 1;
		} else {
			printf("   Loading %s ... ", type_name);
c7e02154:	e1a01000 	mov	r1, r0
c7e02158:	e59f0104 	ldr	r0, [pc, #260]	; c7e02264 <bootm_load_os+0x184>
c7e0215c:	eb001a3d 	bl	c7e08a58 <printf>
			memmove_wd((void *)load, (void *)image_start,
c7e02160:	e1a01005 	mov	r1, r5
c7e02164:	e1a00004 	mov	r0, r4
c7e02168:	e59d2004 	ldr	r2, [sp, #4]
c7e0216c:	e3a03801 	mov	r3, #65536	; 0x10000
c7e02170:	eb002a2c 	bl	c7e0ca28 <memmove_wd>
c7e02174:	e1a05006 	mov	r5, r6
					image_len, CHUNKSZ);
		}
		*load_end = load + image_len;
c7e02178:	e59d3004 	ldr	r3, [sp, #4]
		puts("OK\n");
c7e0217c:	e59f00e4 	ldr	r0, [pc, #228]	; c7e02268 <bootm_load_os+0x188>
		} else {
			printf("   Loading %s ... ", type_name);
			memmove_wd((void *)load, (void *)image_start,
					image_len, CHUNKSZ);
		}
		*load_end = load + image_len;
c7e02180:	e0843003 	add	r3, r4, r3
c7e02184:	e58a3000 	str	r3, [sl]
		puts("OK\n");
c7e02188:	eb001a17 	bl	c7e089ec <puts>
c7e0218c:	ea00001c 	b	c7e02204 <bootm_load_os+0x124>
		break;
#ifdef CONFIG_GZIP
	case IH_COMP_GZIP:
		printf("   Uncompressing %s ... ", type_name);
c7e02190:	e1a01000 	mov	r1, r0
c7e02194:	e59f00d0 	ldr	r0, [pc, #208]	; c7e0226c <bootm_load_os+0x18c>
c7e02198:	eb001a2e 	bl	c7e08a58 <printf>
		if (gunzip((void *)load, unc_len,
c7e0219c:	e1a00004 	mov	r0, r4
c7e021a0:	e1a02005 	mov	r2, r5
c7e021a4:	e3a01502 	mov	r1, #8388608	; 0x800000
c7e021a8:	e28d3004 	add	r3, sp, #4	; 0x4
c7e021ac:	eb007c23 	bl	c7e21240 <gunzip>
c7e021b0:	e3500000 	cmp	r0, #0	; 0x0
c7e021b4:	0a000008 	beq	c7e021dc <bootm_load_os+0xfc>
				(uchar *)image_start, &image_len) != 0) {
			puts("GUNZIP: uncompress, out-of-mem or overwrite "
c7e021b8:	e59f00b0 	ldr	r0, [pc, #176]	; c7e02270 <bootm_load_os+0x190>
c7e021bc:	eb001a0a 	bl	c7e089ec <puts>
				"error - must RESET board to recover\n");
			if (boot_progress)
c7e021c0:	e59d3044 	ldr	r3, [sp, #68]
c7e021c4:	e3530000 	cmp	r3, #0	; 0x0
c7e021c8:	0a000001 	beq	c7e021d4 <bootm_load_os+0xf4>
				bootstage_error(BOOTSTAGE_ID_DECOMP_IMAGE);
c7e021cc:	e3a00006 	mov	r0, #6	; 0x6
c7e021d0:	ebfffecb 	bl	c7e01d04 <bootstage_error>
c7e021d4:	e3e00000 	mvn	r0, #0	; 0x0
c7e021d8:	ea00001d 	b	c7e02254 <bootm_load_os+0x174>
			return BOOTM_ERR_RESET;
		}

		*load_end = load + image_len;
c7e021dc:	e59d3004 	ldr	r3, [sp, #4]
c7e021e0:	e1a05000 	mov	r5, r0
c7e021e4:	e0843003 	add	r3, r4, r3
c7e021e8:	e58a3000 	str	r3, [sl]
c7e021ec:	ea000004 	b	c7e02204 <bootm_load_os+0x124>

		*load_end = load + unc_len;
		break;
#endif /* CONFIG_LZO */
	default:
		printf("Unimplemented compression type %d\n", comp);
c7e021f0:	e1a01006 	mov	r1, r6
c7e021f4:	e59f0078 	ldr	r0, [pc, #120]	; c7e02274 <bootm_load_os+0x194>
c7e021f8:	eb001a16 	bl	c7e08a58 <printf>
c7e021fc:	e3e00002 	mvn	r0, #2	; 0x2
c7e02200:	ea000013 	b	c7e02254 <bootm_load_os+0x174>
		return BOOTM_ERR_UNIMPLEMENTED;
	}

	flush_cache(load, (*load_end - load) * sizeof(ulong));
c7e02204:	e59a1000 	ldr	r1, [sl]
c7e02208:	e1a00004 	mov	r0, r4
c7e0220c:	e0641001 	rsb	r1, r4, r1
c7e02210:	e1a01101 	lsl	r1, r1, #2
c7e02214:	ebfffc59 	bl	c7e01380 <__flush_cache>

	puts("OK\n");
c7e02218:	e59f0048 	ldr	r0, [pc, #72]	; c7e02268 <bootm_load_os+0x188>
c7e0221c:	eb0019f2 	bl	c7e089ec <puts>
	debug("   kernel loaded at 0x%08lx, end = 0x%08lx\n", load, *load_end);
	bootstage_mark(BOOTSTAGE_ID_KERNEL_LOADED);
c7e02220:	e3a00007 	mov	r0, #7	; 0x7
c7e02224:	ebfffe58 	bl	c7e01b8c <bootstage_mark>

	if (!no_overlap && (load < blob_end) && (*load_end > blob_start)) {
c7e02228:	e2753001 	rsbs	r3, r5, #1	; 0x1
c7e0222c:	33a03000 	movcc	r3, #0	; 0x0
c7e02230:	e1540009 	cmp	r4, r9
c7e02234:	23a03000 	movcs	r3, #0	; 0x0
c7e02238:	e3530000 	cmp	r3, #0	; 0x0
c7e0223c:	0a000003 	beq	c7e02250 <bootm_load_os+0x170>
c7e02240:	e59a3000 	ldr	r3, [sl]
c7e02244:	e1530007 	cmp	r3, r7
c7e02248:	83e00001 	mvnhi	r0, #1	; 0x1
c7e0224c:	8a000000 	bhi	c7e02254 <bootm_load_os+0x174>
c7e02250:	e3a00000 	mov	r0, #0	; 0x0

		return BOOTM_ERR_OVERLAP;
	}

	return 0;
}
c7e02254:	e8bd46fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r9, sl, lr}
c7e02258:	e28dd010 	add	sp, sp, #16	; 0x10
c7e0225c:	e12fff1e 	bx	lr
c7e02260:	c7e2e81a 	.word	0xc7e2e81a
c7e02264:	c7e2e829 	.word	0xc7e2e829
c7e02268:	c7e2e649 	.word	0xc7e2e649
c7e0226c:	c7e2e83c 	.word	0xc7e2e83c
c7e02270:	c7e2e855 	.word	0xc7e2e855
c7e02274:	c7e2e8a6 	.word	0xc7e2e8a6

c7e02278 <do_bootm_subcommand>:
	U_BOOT_CMD_MKENT(go, 0, 1, (void *)BOOTM_STATE_OS_GO, "", ""),
};

int do_bootm_subcommand(cmd_tbl_t *cmdtp, int flag, int argc,
			char * const argv[])
{
c7e02278:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e0227c:	e1a05000 	mov	r5, r0
c7e02280:	e24dd028 	sub	sp, sp, #40	; 0x28
	int ret = 0;
	long state;
	cmd_tbl_t *c;
	boot_os_fn *boot_fn;

	c = find_cmd_tbl(argv[1], &cmd_bootm_sub[0], ARRAY_SIZE(cmd_bootm_sub));
c7e02284:	e5930004 	ldr	r0, [r3, #4]
	U_BOOT_CMD_MKENT(go, 0, 1, (void *)BOOTM_STATE_OS_GO, "", ""),
};

int do_bootm_subcommand(cmd_tbl_t *cmdtp, int flag, int argc,
			char * const argv[])
{
c7e02288:	e1a06001 	mov	r6, r1
c7e0228c:	e1a0a002 	mov	sl, r2
	int ret = 0;
	long state;
	cmd_tbl_t *c;
	boot_os_fn *boot_fn;

	c = find_cmd_tbl(argv[1], &cmd_bootm_sub[0], ARRAY_SIZE(cmd_bootm_sub));
c7e02290:	e59f11f8 	ldr	r1, [pc, #504]	; c7e02490 <do_bootm_subcommand+0x218>
c7e02294:	e3a02007 	mov	r2, #7	; 0x7
	U_BOOT_CMD_MKENT(go, 0, 1, (void *)BOOTM_STATE_OS_GO, "", ""),
};

int do_bootm_subcommand(cmd_tbl_t *cmdtp, int flag, int argc,
			char * const argv[])
{
c7e02298:	e1a07003 	mov	r7, r3
	int ret = 0;
	long state;
	cmd_tbl_t *c;
	boot_os_fn *boot_fn;

	c = find_cmd_tbl(argv[1], &cmd_bootm_sub[0], ARRAY_SIZE(cmd_bootm_sub));
c7e0229c:	eb00187c 	bl	c7e08494 <find_cmd_tbl>

	if (c) {
c7e022a0:	e3500000 	cmp	r0, #0	; 0x0
	int ret = 0;
	long state;
	cmd_tbl_t *c;
	boot_os_fn *boot_fn;

	c = find_cmd_tbl(argv[1], &cmd_bootm_sub[0], ARRAY_SIZE(cmd_bootm_sub));
c7e022a4:	e2873004 	add	r3, r7, #4	; 0x4

	if (c) {
c7e022a8:	0a00000e 	beq	c7e022e8 <do_bootm_subcommand+0x70>
		state = (long)c->cmd;
c7e022ac:	e590400c 	ldr	r4, [r0, #12]

		/* treat start special since it resets the state machine */
		if (state == BOOTM_STATE_START) {
c7e022b0:	e3540001 	cmp	r4, #1	; 0x1
c7e022b4:	1a000005 	bne	c7e022d0 <do_bootm_subcommand+0x58>
			argc--;
			argv++;
			return bootm_start(cmdtp, flag, argc, argv);
c7e022b8:	e1a00005 	mov	r0, r5
c7e022bc:	e1a01006 	mov	r1, r6
c7e022c0:	e24a2001 	sub	r2, sl, #1	; 0x1
c7e022c4:	ebfffe93 	bl	c7e01d18 <bootm_start>
c7e022c8:	e1a05000 	mov	r5, r0
c7e022cc:	ea00006c 	b	c7e02484 <do_bootm_subcommand+0x20c>
	} else {
		/* Unrecognized command */
		return CMD_RET_USAGE;
	}

	if (images.state >= state) {
c7e022d0:	e59f61bc 	ldr	r6, [pc, #444]	; c7e02494 <do_bootm_subcommand+0x21c>
c7e022d4:	e5963088 	ldr	r3, [r6, #136]
c7e022d8:	e1530004 	cmp	r3, r4
c7e022dc:	ba000003 	blt	c7e022f0 <do_bootm_subcommand+0x78>
		printf("Trying to execute a command out of order\n");
c7e022e0:	e59f01b0 	ldr	r0, [pc, #432]	; c7e02498 <do_bootm_subcommand+0x220>
c7e022e4:	eb0019db 	bl	c7e08a58 <printf>
c7e022e8:	e3e05000 	mvn	r5, #0	; 0x0
c7e022ec:	ea000064 	b	c7e02484 <do_bootm_subcommand+0x20c>
		return CMD_RET_USAGE;
	}

	images.state |= state;
c7e022f0:	e1843003 	orr	r3, r4, r3
	boot_fn = boot_os[images.os.os];
c7e022f4:	e5d6205e 	ldrb	r2, [r6, #94]
	if (images.state >= state) {
		printf("Trying to execute a command out of order\n");
		return CMD_RET_USAGE;
	}

	images.state |= state;
c7e022f8:	e5863088 	str	r3, [r6, #136]
	boot_fn = boot_os[images.os.os];
c7e022fc:	e59f3198 	ldr	r3, [pc, #408]	; c7e0249c <do_bootm_subcommand+0x224>

	switch (state) {
c7e02300:	e3540010 	cmp	r4, #16	; 0x10
		printf("Trying to execute a command out of order\n");
		return CMD_RET_USAGE;
	}

	images.state |= state;
	boot_fn = boot_os[images.os.os];
c7e02304:	e7935102 	ldr	r5, [r3, r2, lsl #2]

	switch (state) {
c7e02308:	0a000039 	beq	c7e023f4 <do_bootm_subcommand+0x17c>
c7e0230c:	ca000004 	bgt	c7e02324 <do_bootm_subcommand+0xac>
c7e02310:	e3540002 	cmp	r4, #2	; 0x2
c7e02314:	0a000009 	beq	c7e02340 <do_bootm_subcommand+0xc8>
c7e02318:	e3540004 	cmp	r4, #4	; 0x4
c7e0231c:	1a000057 	bne	c7e02480 <do_bootm_subcommand+0x208>
c7e02320:	ea000019 	b	c7e0238c <do_bootm_subcommand+0x114>
c7e02324:	e3540040 	cmp	r4, #64	; 0x40
c7e02328:	0a000043 	beq	c7e0243c <do_bootm_subcommand+0x1c4>
c7e0232c:	e3540080 	cmp	r4, #128	; 0x80
c7e02330:	0a00004b 	beq	c7e02464 <do_bootm_subcommand+0x1ec>
c7e02334:	e3540020 	cmp	r4, #32	; 0x20
c7e02338:	1a000050 	bne	c7e02480 <do_bootm_subcommand+0x208>
c7e0233c:	ea000035 	b	c7e02418 <do_bootm_subcommand+0x1a0>
		ulong load_end;
		case BOOTM_STATE_START:
			/* should never occur */
			break;
		case BOOTM_STATE_LOADOS:
			ret = bootm_load_os(images.os, &load_end, 0);
c7e02340:	e2862058 	add	r2, r6, #88	; 0x58
c7e02344:	e8920003 	ldm	r2, {r0, r1}
c7e02348:	e1a0200d 	mov	r2, sp
c7e0234c:	e8820003 	stm	r2, {r0, r1}
c7e02350:	e28dc024 	add	ip, sp, #36	; 0x24
c7e02354:	e2863048 	add	r3, r6, #72	; 0x48
c7e02358:	e893000f 	ldm	r3, {r0, r1, r2, r3}
c7e0235c:	e58dc008 	str	ip, [sp, #8]
c7e02360:	e3a0c000 	mov	ip, #0	; 0x0
c7e02364:	e58dc00c 	str	ip, [sp, #12]
c7e02368:	ebffff5c 	bl	c7e020e0 <bootm_load_os>
			if (ret)
c7e0236c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02370:	1a000043 	bne	c7e02484 <do_bootm_subcommand+0x20c>
				return ret;

			lmb_reserve(&images.lmb, images.os.load,
c7e02374:	e5961058 	ldr	r1, [r6, #88]
c7e02378:	e59d2024 	ldr	r2, [sp, #36]
c7e0237c:	e286008c 	add	r0, r6, #140	; 0x8c
c7e02380:	e0612002 	rsb	r2, r1, r2
c7e02384:	eb00800e 	bl	c7e223c4 <lmb_reserve>
c7e02388:	ea00003d 	b	c7e02484 <do_bootm_subcommand+0x20c>
					(load_end - images.os.load));
			break;
#ifdef CONFIG_SYS_BOOT_RAMDISK_HIGH
		case BOOTM_STATE_RAMDISK:
		{
			ulong rd_len = images.rd_end - images.rd_start;
c7e0238c:	e5961064 	ldr	r1, [r6, #100]
			char str[17];

			ret = boot_ramdisk_high(&images.lmb, images.rd_start,
c7e02390:	e5962068 	ldr	r2, [r6, #104]
c7e02394:	e286c074 	add	ip, r6, #116	; 0x74
c7e02398:	e0612002 	rsb	r2, r1, r2
c7e0239c:	e286008c 	add	r0, r6, #140	; 0x8c
c7e023a0:	e2863070 	add	r3, r6, #112	; 0x70
c7e023a4:	e58dc000 	str	ip, [sp]
c7e023a8:	eb0029a1 	bl	c7e0ca34 <boot_ramdisk_high>
				rd_len, &images.initrd_start, &images.initrd_end);
			if (ret)
c7e023ac:	e2505000 	subs	r5, r0, #0	; 0x0
c7e023b0:	1a000033 	bne	c7e02484 <do_bootm_subcommand+0x20c>
				return ret;

			sprintf(str, "%lx", images.initrd_start);
c7e023b4:	e28d4013 	add	r4, sp, #19	; 0x13
c7e023b8:	e5962070 	ldr	r2, [r6, #112]
c7e023bc:	e1a00004 	mov	r0, r4
c7e023c0:	e59f10d8 	ldr	r1, [pc, #216]	; c7e024a0 <do_bootm_subcommand+0x228>
c7e023c4:	eb008699 	bl	c7e23e30 <sprintf>
			setenv("initrd_start", str);
c7e023c8:	e1a01004 	mov	r1, r4
c7e023cc:	e59f00d0 	ldr	r0, [pc, #208]	; c7e024a4 <do_bootm_subcommand+0x22c>
c7e023d0:	eb00149e 	bl	c7e07650 <setenv>
			sprintf(str, "%lx", images.initrd_end);
c7e023d4:	e1a00004 	mov	r0, r4
c7e023d8:	e5962074 	ldr	r2, [r6, #116]
c7e023dc:	e59f10bc 	ldr	r1, [pc, #188]	; c7e024a0 <do_bootm_subcommand+0x228>
c7e023e0:	eb008692 	bl	c7e23e30 <sprintf>
			setenv("initrd_end", str);
c7e023e4:	e1a01004 	mov	r1, r4
c7e023e8:	e59f00b8 	ldr	r0, [pc, #184]	; c7e024a8 <do_bootm_subcommand+0x230>
c7e023ec:	eb001497 	bl	c7e07650 <setenv>
c7e023f0:	ea000023 	b	c7e02484 <do_bootm_subcommand+0x20c>
				&images.ft_addr, &images.ft_len);
			break;
		}
#endif
		case BOOTM_STATE_OS_CMDLINE:
			ret = boot_fn(BOOTM_STATE_OS_CMDLINE, argc, argv, &images);
c7e023f4:	e1a00004 	mov	r0, r4
c7e023f8:	e1a0100a 	mov	r1, sl
c7e023fc:	e1a02007 	mov	r2, r7
c7e02400:	e1a03006 	mov	r3, r6
c7e02404:	e12fff35 	blx	r5
			if (ret)
c7e02408:	e2505000 	subs	r5, r0, #0	; 0x0
				printf("cmdline subcommand not supported\n");
c7e0240c:	159f0098 	ldrne	r0, [pc, #152]	; c7e024ac <do_bootm_subcommand+0x234>
			break;
		}
#endif
		case BOOTM_STATE_OS_CMDLINE:
			ret = boot_fn(BOOTM_STATE_OS_CMDLINE, argc, argv, &images);
			if (ret)
c7e02410:	0a00001b 	beq	c7e02484 <do_bootm_subcommand+0x20c>
c7e02414:	ea000010 	b	c7e0245c <do_bootm_subcommand+0x1e4>
				printf("cmdline subcommand not supported\n");
			break;
		case BOOTM_STATE_OS_BD_T:
			ret = boot_fn(BOOTM_STATE_OS_BD_T, argc, argv, &images);
c7e02418:	e1a00004 	mov	r0, r4
c7e0241c:	e1a0100a 	mov	r1, sl
c7e02420:	e1a02007 	mov	r2, r7
c7e02424:	e1a03006 	mov	r3, r6
c7e02428:	e12fff35 	blx	r5
			if (ret)
c7e0242c:	e2505000 	subs	r5, r0, #0	; 0x0
				printf("bdt subcommand not supported\n");
c7e02430:	159f0078 	ldrne	r0, [pc, #120]	; c7e024b0 <do_bootm_subcommand+0x238>
			if (ret)
				printf("cmdline subcommand not supported\n");
			break;
		case BOOTM_STATE_OS_BD_T:
			ret = boot_fn(BOOTM_STATE_OS_BD_T, argc, argv, &images);
			if (ret)
c7e02434:	0a000012 	beq	c7e02484 <do_bootm_subcommand+0x20c>
c7e02438:	ea000007 	b	c7e0245c <do_bootm_subcommand+0x1e4>
				printf("bdt subcommand not supported\n");
			break;
		case BOOTM_STATE_OS_PREP:
			ret = boot_fn(BOOTM_STATE_OS_PREP, argc, argv, &images);
c7e0243c:	e1a00004 	mov	r0, r4
c7e02440:	e1a0100a 	mov	r1, sl
c7e02444:	e1a02007 	mov	r2, r7
c7e02448:	e1a03006 	mov	r3, r6
c7e0244c:	e12fff35 	blx	r5
			if (ret)
c7e02450:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02454:	0a00000a 	beq	c7e02484 <do_bootm_subcommand+0x20c>
				printf("prep subcommand not supported\n");
c7e02458:	e59f0054 	ldr	r0, [pc, #84]	; c7e024b4 <do_bootm_subcommand+0x23c>
c7e0245c:	eb00197d 	bl	c7e08a58 <printf>
c7e02460:	ea000007 	b	c7e02484 <do_bootm_subcommand+0x20c>
			break;
		case BOOTM_STATE_OS_GO:
			disable_interrupts();
c7e02464:	ebfffb24 	bl	c7e010fc <disable_interrupts>
			 * Stop the ethernet stack if NetConsole could have
			 * left it up
			 */
			eth_halt();
#endif
			arch_preboot_os();
c7e02468:	ebfffd35 	bl	c7e01944 <__arch_preboot_os>
			boot_fn(BOOTM_STATE_OS_GO, argc, argv, &images);
c7e0246c:	e1a00004 	mov	r0, r4
c7e02470:	e1a0100a 	mov	r1, sl
c7e02474:	e1a02007 	mov	r2, r7
c7e02478:	e1a03006 	mov	r3, r6
c7e0247c:	e12fff35 	blx	r5
c7e02480:	e3a05000 	mov	r5, #0	; 0x0
			break;
	}

	return ret;
}
c7e02484:	e1a00005 	mov	r0, r5
c7e02488:	e28dd028 	add	sp, sp, #40	; 0x28
c7e0248c:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e02490:	c7e3523c 	.word	0xc7e3523c
c7e02494:	c7e40008 	.word	0xc7e40008
c7e02498:	c7e2e8c9 	.word	0xc7e2e8c9
c7e0249c:	c7e2b0f0 	.word	0xc7e2b0f0
c7e024a0:	c7e2e66c 	.word	0xc7e2e66c
c7e024a4:	c7e2e8f3 	.word	0xc7e2e8f3
c7e024a8:	c7e2e900 	.word	0xc7e2e900
c7e024ac:	c7e2e90b 	.word	0xc7e2e90b
c7e024b0:	c7e2e92d 	.word	0xc7e2e92d
c7e024b4:	c7e2e94b 	.word	0xc7e2e94b

c7e024b8 <do_bootm>:
/*******************************************************************/
/* bootm - boot application image from image in memory */
/*******************************************************************/

int do_bootm(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e024b8:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
		relocated = 1;
	}
#endif

	/* determine if we have a sub command */
	if (argc > 1) {
c7e024bc:	e3520001 	cmp	r2, #1	; 0x1
/*******************************************************************/
/* bootm - boot application image from image in memory */
/*******************************************************************/

int do_bootm(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e024c0:	e24dd038 	sub	sp, sp, #56	; 0x38
c7e024c4:	e1a07002 	mov	r7, r2
	ulong		iflag;
	ulong		load_end = 0;
c7e024c8:	e3a02000 	mov	r2, #0	; 0x0
c7e024cc:	e58d2034 	str	r2, [sp, #52]
/*******************************************************************/
/* bootm - boot application image from image in memory */
/*******************************************************************/

int do_bootm(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e024d0:	e1a0a000 	mov	sl, r0
c7e024d4:	e1a09001 	mov	r9, r1
c7e024d8:	e1a06003 	mov	r6, r3
		relocated = 1;
	}
#endif

	/* determine if we have a sub command */
	if (argc > 1) {
c7e024dc:	da000010 	ble	c7e02524 <do_bootm+0x6c>
		char *endp;

		simple_strtoul(argv[1], &endp, 16);
c7e024e0:	e5930004 	ldr	r0, [r3, #4]
c7e024e4:	e28d1030 	add	r1, sp, #48	; 0x30
c7e024e8:	e2822010 	add	r2, r2, #16	; 0x10
c7e024ec:	eb00829b 	bl	c7e22f60 <simple_strtoul>
		 * If endp is ':' or '#' assume a FIT identifier so pass
		 * along for normal processing.
		 *
		 * Right now we assume the first arg should never be '-'
		 */
		if ((*endp != 0) && (*endp != ':') && (*endp != '#'))
c7e024f0:	e59d3030 	ldr	r3, [sp, #48]
c7e024f4:	e5d33000 	ldrb	r3, [r3]
c7e024f8:	e3530000 	cmp	r3, #0	; 0x0
c7e024fc:	1353003a 	cmpne	r3, #58	; 0x3a
c7e02500:	0a000007 	beq	c7e02524 <do_bootm+0x6c>
c7e02504:	e3530023 	cmp	r3, #35	; 0x23
c7e02508:	0a000005 	beq	c7e02524 <do_bootm+0x6c>
			return do_bootm_subcommand(cmdtp, flag, argc, argv);
c7e0250c:	e1a0000a 	mov	r0, sl
c7e02510:	e1a01009 	mov	r1, r9
c7e02514:	e1a02007 	mov	r2, r7
c7e02518:	e1a03006 	mov	r3, r6
c7e0251c:	ebffff55 	bl	c7e02278 <do_bootm_subcommand>
c7e02520:	ea00007e 	b	c7e02720 <do_bootm+0x268>
	}

	if (bootm_start(cmdtp, flag, argc, argv))
c7e02524:	e1a0000a 	mov	r0, sl
c7e02528:	e1a01009 	mov	r1, r9
c7e0252c:	e1a02007 	mov	r2, r7
c7e02530:	e1a03006 	mov	r3, r6
c7e02534:	ebfffdf7 	bl	c7e01d18 <bootm_start>
c7e02538:	e3500000 	cmp	r0, #0	; 0x0
c7e0253c:	1a000076 	bne	c7e0271c <do_bootm+0x264>
	/*
	 * We have reached the point of no return: we are going to
	 * overwrite all exception vector code, so we cannot easily
	 * recover from any failures any more...
	 */
	iflag = disable_interrupts();
c7e02540:	ebfffaed 	bl	c7e010fc <disable_interrupts>
	 * details see the OpenHCI specification.
	 */
	usb_stop();
#endif

	ret = bootm_load_os(images.os, &load_end, 1);
c7e02544:	e59f41dc 	ldr	r4, [pc, #476]	; c7e02728 <do_bootm+0x270>
	/*
	 * We have reached the point of no return: we are going to
	 * overwrite all exception vector code, so we cannot easily
	 * recover from any failures any more...
	 */
	iflag = disable_interrupts();
c7e02548:	e1a0b000 	mov	fp, r0
	 * details see the OpenHCI specification.
	 */
	usb_stop();
#endif

	ret = bootm_load_os(images.os, &load_end, 1);
c7e0254c:	e2842058 	add	r2, r4, #88	; 0x58
c7e02550:	e8920003 	ldm	r2, {r0, r1}
c7e02554:	e1a0200d 	mov	r2, sp
c7e02558:	e8820003 	stm	r2, {r0, r1}
c7e0255c:	e28dc034 	add	ip, sp, #52	; 0x34
c7e02560:	e2843048 	add	r3, r4, #72	; 0x48
c7e02564:	e893000f 	ldm	r3, {r0, r1, r2, r3}
c7e02568:	e58dc008 	str	ip, [sp, #8]
c7e0256c:	e3a0c001 	mov	ip, #1	; 0x1
c7e02570:	e58dc00c 	str	ip, [sp, #12]
c7e02574:	ebfffed9 	bl	c7e020e0 <bootm_load_os>

	if (ret < 0) {
c7e02578:	e3500000 	cmp	r0, #0	; 0x0
c7e0257c:	aa00001d 	bge	c7e025f8 <do_bootm+0x140>
		if (ret == BOOTM_ERR_RESET)
c7e02580:	e3700001 	cmn	r0, #1	; 0x1
c7e02584:	0a00000e 	beq	c7e025c4 <do_bootm+0x10c>
			do_reset(cmdtp, flag, argc, argv);
		if (ret == BOOTM_ERR_OVERLAP) {
c7e02588:	e3700002 	cmn	r0, #2	; 0x2
c7e0258c:	1a000012 	bne	c7e025dc <do_bootm+0x124>
			if (images.legacy_hdr_valid) {
c7e02590:	e5943044 	ldr	r3, [r4, #68]
c7e02594:	e3530000 	cmp	r3, #0	; 0x0
c7e02598:	0a000005 	beq	c7e025b4 <do_bootm+0xfc>
				image_header_t *hdr;
				hdr = &images.legacy_hdr_os_copy;
				if (image_get_type(hdr) == IH_TYPE_MULTI)
c7e0259c:	e5d43022 	ldrb	r3, [r4, #34]
c7e025a0:	e3530004 	cmp	r3, #4	; 0x4
c7e025a4:	1a000013 	bne	c7e025f8 <do_bootm+0x140>
					puts("WARNING: legacy format multi "
c7e025a8:	e59f017c 	ldr	r0, [pc, #380]	; c7e0272c <do_bootm+0x274>
c7e025ac:	eb00190e 	bl	c7e089ec <puts>
c7e025b0:	ea000010 	b	c7e025f8 <do_bootm+0x140>
						"component image "
						"overwritten\n");
			} else {
				puts("ERROR: new format image overwritten - "
c7e025b4:	e59f0174 	ldr	r0, [pc, #372]	; c7e02730 <do_bootm+0x278>
c7e025b8:	eb00190b 	bl	c7e089ec <puts>
					"must RESET the board to recover\n");
				bootstage_error(BOOTSTAGE_ID_OVERWRITTEN);
c7e025bc:	e3a00071 	mov	r0, #113	; 0x71
c7e025c0:	ebfffdcf 	bl	c7e01d04 <bootstage_error>
				do_reset(cmdtp, flag, argc, argv);
c7e025c4:	e1a0000a 	mov	r0, sl
c7e025c8:	e1a01009 	mov	r1, r9
c7e025cc:	e1a02007 	mov	r2, r7
c7e025d0:	e1a03006 	mov	r3, r6
c7e025d4:	ebfffb5d 	bl	c7e01350 <do_reset>
c7e025d8:	ea000006 	b	c7e025f8 <do_bootm+0x140>
			}
		}
		if (ret == BOOTM_ERR_UNIMPLEMENTED) {
c7e025dc:	e3700003 	cmn	r0, #3	; 0x3
c7e025e0:	1a000004 	bne	c7e025f8 <do_bootm+0x140>
			if (iflag)
c7e025e4:	e35b0000 	cmp	fp, #0	; 0x0
c7e025e8:	0a000000 	beq	c7e025f0 <do_bootm+0x138>
				enable_interrupts();
c7e025ec:	ebfffac1 	bl	c7e010f8 <enable_interrupts>
			bootstage_error(BOOTSTAGE_ID_DECOMP_UNIMPL);
c7e025f0:	e3a00007 	mov	r0, #7	; 0x7
c7e025f4:	ea000039 	b	c7e026e0 <do_bootm+0x228>
			return 1;
		}
	}

	lmb_reserve(&images.lmb, images.os.load, (load_end - images.os.load));
c7e025f8:	e59f5128 	ldr	r5, [pc, #296]	; c7e02728 <do_bootm+0x270>
c7e025fc:	e59d2034 	ldr	r2, [sp, #52]
c7e02600:	e5951058 	ldr	r1, [r5, #88]
c7e02604:	e285008c 	add	r0, r5, #140	; 0x8c
c7e02608:	e0612002 	rsb	r2, r1, r2
c7e0260c:	eb007f6c 	bl	c7e223c4 <lmb_reserve>

	if (images.os.type == IH_TYPE_STANDALONE) {
c7e02610:	e5d5305d 	ldrb	r3, [r5, #93]
c7e02614:	e3530001 	cmp	r3, #1	; 0x1
c7e02618:	1a00001e 	bne	c7e02698 <do_bootm+0x1e0>
		if (iflag)
c7e0261c:	e35b0000 	cmp	fp, #0	; 0x0
c7e02620:	0a000000 	beq	c7e02628 <do_bootm+0x170>
			enable_interrupts();
c7e02624:	ebfffab3 	bl	c7e010f8 <enable_interrupts>
{
	char  *s;
	int   (*appl)(int, char * const []);

	/* Don't start if "autostart" is set to "no" */
	if (((s = getenv("autostart")) != NULL) && (strcmp(s, "no") == 0)) {
c7e02628:	e59f0104 	ldr	r0, [pc, #260]	; c7e02734 <do_bootm+0x27c>
c7e0262c:	eb00129a 	bl	c7e0709c <getenv>
c7e02630:	e3500000 	cmp	r0, #0	; 0x0
c7e02634:	0a00000e 	beq	c7e02674 <do_bootm+0x1bc>
c7e02638:	e59f10f8 	ldr	r1, [pc, #248]	; c7e02738 <do_bootm+0x280>
c7e0263c:	eb008087 	bl	c7e22860 <strcmp>
c7e02640:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02644:	1a00000a 	bne	c7e02674 <do_bootm+0x1bc>
		char buf[32];
		sprintf(buf, "%lX", images.os.image_len);
c7e02648:	e59f30d8 	ldr	r3, [pc, #216]	; c7e02728 <do_bootm+0x270>
c7e0264c:	e28d4010 	add	r4, sp, #16	; 0x10
c7e02650:	e5932054 	ldr	r2, [r3, #84]
c7e02654:	e59f10e0 	ldr	r1, [pc, #224]	; c7e0273c <do_bootm+0x284>
c7e02658:	e1a00004 	mov	r0, r4
c7e0265c:	eb0085f3 	bl	c7e23e30 <sprintf>
		setenv("filesize", buf);
c7e02660:	e1a01004 	mov	r1, r4
c7e02664:	e59f00d4 	ldr	r0, [pc, #212]	; c7e02740 <do_bootm+0x288>
c7e02668:	eb0013f8 	bl	c7e07650 <setenv>
c7e0266c:	e1a00005 	mov	r0, r5
c7e02670:	ea00002a 	b	c7e02720 <do_bootm+0x268>
		return 0;
	}
	appl = (int (*)(int, char * const []))(ulong)ntohl(images.ep);
c7e02674:	e59f30ac 	ldr	r3, [pc, #172]	; c7e02728 <do_bootm+0x270>
c7e02678:	e5930060 	ldr	r0, [r3, #96]
c7e0267c:	ebfffca6 	bl	c7e0191c <__fswab32>
	(*appl)(argc-1, &argv[1]);
c7e02680:	e2861004 	add	r1, r6, #4	; 0x4
		char buf[32];
		sprintf(buf, "%lX", images.os.image_len);
		setenv("filesize", buf);
		return 0;
	}
	appl = (int (*)(int, char * const []))(ulong)ntohl(images.ep);
c7e02684:	e1a03000 	mov	r3, r0
	(*appl)(argc-1, &argv[1]);
c7e02688:	e2470001 	sub	r0, r7, #1	; 0x1
c7e0268c:	e12fff33 	blx	r3
c7e02690:	e3a00000 	mov	r0, #0	; 0x0
c7e02694:	ea000021 	b	c7e02720 <do_bootm+0x268>
		/* This may return when 'autostart' is 'no' */
		bootm_start_standalone(iflag, argc, argv);
		return 0;
	}

	bootstage_mark(BOOTSTAGE_ID_CHECK_BOOT_OS);
c7e02698:	e3a00008 	mov	r0, #8	; 0x8
c7e0269c:	ebfffd3a 	bl	c7e01b8c <bootstage_mark>
#ifdef CONFIG_SILENT_CONSOLE
	if (images.os.os == IH_OS_LINUX)
		fixup_silent_linux();
#endif

	boot_fn = boot_os[images.os.os];
c7e026a0:	e5d5205e 	ldrb	r2, [r5, #94]
c7e026a4:	e59f3098 	ldr	r3, [pc, #152]	; c7e02744 <do_bootm+0x28c>
c7e026a8:	e7934102 	ldr	r4, [r3, r2, lsl #2]

	if (boot_fn == NULL) {
c7e026ac:	e3540000 	cmp	r4, #0	; 0x0
c7e026b0:	1a00000c 	bne	c7e026e8 <do_bootm+0x230>
		if (iflag)
c7e026b4:	e35b0000 	cmp	fp, #0	; 0x0
c7e026b8:	0a000000 	beq	c7e026c0 <do_bootm+0x208>
			enable_interrupts();
c7e026bc:	ebfffa8d 	bl	c7e010f8 <enable_interrupts>
		printf("ERROR: booting os '%s' (%d) is not supported\n",
c7e026c0:	e59f4060 	ldr	r4, [pc, #96]	; c7e02728 <do_bootm+0x270>
c7e026c4:	e5d4005e 	ldrb	r0, [r4, #94]
c7e026c8:	eb0027ce 	bl	c7e0c608 <genimg_get_os_name>
c7e026cc:	e5d4205e 	ldrb	r2, [r4, #94]
c7e026d0:	e1a01000 	mov	r1, r0
c7e026d4:	e59f006c 	ldr	r0, [pc, #108]	; c7e02748 <do_bootm+0x290>
c7e026d8:	eb0018de 	bl	c7e08a58 <printf>
			genimg_get_os_name(images.os.os), images.os.os);
		bootstage_error(BOOTSTAGE_ID_CHECK_BOOT_OS);
c7e026dc:	e3a00008 	mov	r0, #8	; 0x8
c7e026e0:	ebfffd87 	bl	c7e01d04 <bootstage_error>
c7e026e4:	ea00000c 	b	c7e0271c <do_bootm+0x264>
		return 1;
	}

	arch_preboot_os();
c7e026e8:	ebfffc95 	bl	c7e01944 <__arch_preboot_os>

	boot_fn(0, argc, argv, &images);
c7e026ec:	e1a03005 	mov	r3, r5
c7e026f0:	e1a01007 	mov	r1, r7
c7e026f4:	e1a02006 	mov	r2, r6
c7e026f8:	e3a00000 	mov	r0, #0	; 0x0
c7e026fc:	e12fff34 	blx	r4

	bootstage_error(BOOTSTAGE_ID_BOOT_OS_RETURNED);
c7e02700:	e3a00009 	mov	r0, #9	; 0x9
c7e02704:	ebfffd7e 	bl	c7e01d04 <bootstage_error>
#ifdef DEBUG
	puts("\n## Control returned to monitor - resetting...\n");
#endif
	do_reset(cmdtp, flag, argc, argv);
c7e02708:	e1a0000a 	mov	r0, sl
c7e0270c:	e1a01009 	mov	r1, r9
c7e02710:	e1a02007 	mov	r2, r7
c7e02714:	e1a03006 	mov	r3, r6
c7e02718:	ebfffb0c 	bl	c7e01350 <do_reset>
c7e0271c:	e3a00001 	mov	r0, #1	; 0x1

	return 1;
}
c7e02720:	e28dd038 	add	sp, sp, #56	; 0x38
c7e02724:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e02728:	c7e40008 	.word	0xc7e40008
c7e0272c:	c7e2e96a 	.word	0xc7e2e96a
c7e02730:	c7e2e9a4 	.word	0xc7e2e9a4
c7e02734:	c7e2e9eb 	.word	0xc7e2e9eb
c7e02738:	c7e2e9f5 	.word	0xc7e2e9f5
c7e0273c:	c7e2e9f8 	.word	0xc7e2e9f8
c7e02740:	c7e2e9fc 	.word	0xc7e2e9fc
c7e02744:	c7e2b0f0 	.word	0xc7e2b0f0
c7e02748:	c7e2ea05 	.word	0xc7e2ea05

c7e0274c <bootm_maybe_autostart>:

int bootm_maybe_autostart(cmd_tbl_t *cmdtp, const char *cmd)
{
c7e0274c:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
c7e02750:	e1a06000 	mov	r6, r0
	const char *ep = getenv("autostart");
c7e02754:	e59f0054 	ldr	r0, [pc, #84]	; c7e027b0 <bootm_maybe_autostart+0x64>

	return 1;
}

int bootm_maybe_autostart(cmd_tbl_t *cmdtp, const char *cmd)
{
c7e02758:	e1a05001 	mov	r5, r1
	const char *ep = getenv("autostart");
c7e0275c:	eb00124e 	bl	c7e0709c <getenv>

	if (ep && !strcmp(ep, "yes")) {
c7e02760:	e3500000 	cmp	r0, #0	; 0x0
c7e02764:	0a00000f 	beq	c7e027a8 <bootm_maybe_autostart+0x5c>
c7e02768:	e59f1044 	ldr	r1, [pc, #68]	; c7e027b4 <bootm_maybe_autostart+0x68>
c7e0276c:	eb00803b 	bl	c7e22860 <strcmp>
c7e02770:	e2504000 	subs	r4, r0, #0	; 0x0
c7e02774:	1a00000b 	bne	c7e027a8 <bootm_maybe_autostart+0x5c>
		char *local_args[2];
		local_args[0] = (char *)cmd;
		local_args[1] = NULL;
		printf("Automatic boot of image at addr 0x%08lX ...\n", load_addr);
c7e02778:	e59f3038 	ldr	r3, [pc, #56]	; c7e027b8 <bootm_maybe_autostart+0x6c>
c7e0277c:	e59f0038 	ldr	r0, [pc, #56]	; c7e027bc <bootm_maybe_autostart+0x70>
c7e02780:	e5931000 	ldr	r1, [r3]
{
	const char *ep = getenv("autostart");

	if (ep && !strcmp(ep, "yes")) {
		char *local_args[2];
		local_args[0] = (char *)cmd;
c7e02784:	e58d5000 	str	r5, [sp]
		local_args[1] = NULL;
c7e02788:	e58d4004 	str	r4, [sp, #4]
		printf("Automatic boot of image at addr 0x%08lX ...\n", load_addr);
c7e0278c:	eb0018b1 	bl	c7e08a58 <printf>
		return do_bootm(cmdtp, 0, 1, local_args);
c7e02790:	e1a00006 	mov	r0, r6
c7e02794:	e1a01004 	mov	r1, r4
c7e02798:	e3a02001 	mov	r2, #1	; 0x1
c7e0279c:	e1a0300d 	mov	r3, sp
c7e027a0:	ebffff44 	bl	c7e024b8 <do_bootm>
c7e027a4:	ea000000 	b	c7e027ac <bootm_maybe_autostart+0x60>
c7e027a8:	e3a00000 	mov	r0, #0	; 0x0
	}

	return 0;
}
c7e027ac:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
c7e027b0:	c7e2e9eb 	.word	0xc7e2e9eb
c7e027b4:	c7e2ea33 	.word	0xc7e2ea33
c7e027b8:	c7e353cc 	.word	0xc7e353cc
c7e027bc:	c7e2ea37 	.word	0xc7e2ea37

c7e027c0 <parse_argv>:
	}
	return 0;
}

static int parse_argv(const char *s)
{
c7e027c0:	e92d4010 	push	{r4, lr}
	if (strcmp(s, "flush") == 0)
c7e027c4:	e59f1040 	ldr	r1, [pc, #64]	; c7e0280c <parse_argv+0x4c>
	}
	return 0;
}

static int parse_argv(const char *s)
{
c7e027c8:	e1a04000 	mov	r4, r0
	if (strcmp(s, "flush") == 0)
c7e027cc:	eb008023 	bl	c7e22860 <strcmp>
c7e027d0:	e3500000 	cmp	r0, #0	; 0x0
c7e027d4:	02800002 	addeq	r0, r0, #2	; 0x2
c7e027d8:	08bd8010 	popeq	{r4, pc}
		return 2;
	else if (strcmp(s, "on") == 0)
c7e027dc:	e1a00004 	mov	r0, r4
c7e027e0:	e59f1028 	ldr	r1, [pc, #40]	; c7e02810 <parse_argv+0x50>
c7e027e4:	eb00801d 	bl	c7e22860 <strcmp>
c7e027e8:	e3500000 	cmp	r0, #0	; 0x0
c7e027ec:	02800001 	addeq	r0, r0, #1	; 0x1
c7e027f0:	08bd8010 	popeq	{r4, pc}
		return 1;
	else if (strcmp(s, "off") == 0)
c7e027f4:	e1a00004 	mov	r0, r4
c7e027f8:	e59f1014 	ldr	r1, [pc, #20]	; c7e02814 <parse_argv+0x54>
c7e027fc:	eb008017 	bl	c7e22860 <strcmp>
c7e02800:	e3500000 	cmp	r0, #0	; 0x0
c7e02804:	13e00000 	mvnne	r0, #0	; 0x0
		return 0;

	return -1;
}
c7e02808:	e8bd8010 	pop	{r4, pc}
c7e0280c:	c7e2ede9 	.word	0xc7e2ede9
c7e02810:	c7e34a80 	.word	0xc7e34a80
c7e02814:	c7e2e39a 	.word	0xc7e2e39a
	return 0;
}

void __weak flush_dcache_all(void)
{
	puts("No arch specific flush_dcache_all available!\n");
c7e02818:	e59f0000 	ldr	r0, [pc, #0]	; c7e02820 <parse_argv+0x60>
c7e0281c:	ea001872 	b	c7e089ec <puts>
c7e02820:	c7e2edef 	.word	0xc7e2edef

c7e02824 <do_dcache>:
	/* please define arch specific flush_dcache_all */
}

int do_dcache(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	switch (argc) {
c7e02824:	e3520001 	cmp	r2, #1	; 0x1
	puts("No arch specific flush_dcache_all available!\n");
	/* please define arch specific flush_dcache_all */
}

int do_dcache(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02828:	e92d4010 	push	{r4, lr}
	switch (argc) {
c7e0282c:	0a000013 	beq	c7e02880 <do_dcache+0x5c>
c7e02830:	e3520002 	cmp	r2, #2	; 0x2
c7e02834:	13e00000 	mvnne	r0, #0	; 0x0
c7e02838:	18bd8010 	popne	{r4, pc}
	case 2:			/* on / off */
		switch (parse_argv(argv[1])) {
c7e0283c:	e5930004 	ldr	r0, [r3, #4]
c7e02840:	ebffffde 	bl	c7e027c0 <parse_argv>
c7e02844:	e3500001 	cmp	r0, #1	; 0x1
c7e02848:	e1a04000 	mov	r4, r0
c7e0284c:	0a000006 	beq	c7e0286c <do_dcache+0x48>
c7e02850:	e3500002 	cmp	r0, #2	; 0x2
c7e02854:	0a000006 	beq	c7e02874 <do_dcache+0x50>
c7e02858:	e3500000 	cmp	r0, #0	; 0x0
c7e0285c:	1a000005 	bne	c7e02878 <do_dcache+0x54>
		case 0:
			dcache_disable();
c7e02860:	ebfffb29 	bl	c7e0150c <dcache_disable>
c7e02864:	e1a00004 	mov	r0, r4
c7e02868:	e8bd8010 	pop	{r4, pc}
			break;
		case 1:
			dcache_enable();
c7e0286c:	ebfffb11 	bl	c7e014b8 <dcache_enable>
c7e02870:	ea000000 	b	c7e02878 <do_dcache+0x54>
			break;
		case 2:
			flush_dcache_all();
c7e02874:	ebfffac2 	bl	c7e01384 <__flush_dcache_all>
c7e02878:	e3a00000 	mov	r0, #0	; 0x0
c7e0287c:	e8bd8010 	pop	{r4, pc}
			break;
		}
		break;
	case 1:			/* get status */
		printf("Data (writethrough) Cache is %s\n",
c7e02880:	ebfffb0e 	bl	c7e014c0 <dcache_status>
c7e02884:	e59f3018 	ldr	r3, [pc, #24]	; c7e028a4 <do_dcache+0x80>
c7e02888:	e3500000 	cmp	r0, #0	; 0x0
c7e0288c:	e59f1014 	ldr	r1, [pc, #20]	; c7e028a8 <do_dcache+0x84>
c7e02890:	e59f0014 	ldr	r0, [pc, #20]	; c7e028ac <do_dcache+0x88>
c7e02894:	01a01003 	moveq	r1, r3
c7e02898:	eb00186e 	bl	c7e08a58 <printf>
c7e0289c:	e3a00000 	mov	r0, #0	; 0x0
		return 0;
	default:
		return CMD_RET_USAGE;
	}
	return 0;
}
c7e028a0:	e8bd8010 	pop	{r4, pc}
c7e028a4:	c7e2ee1d 	.word	0xc7e2ee1d
c7e028a8:	c7e31ef5 	.word	0xc7e31ef5
c7e028ac:	c7e2ee21 	.word	0xc7e2ee21

c7e028b0 <invalidate_icache_all>:
static int parse_argv(const char *);

void __weak invalidate_icache_all(void)
{
	/* please define arch specific invalidate_icache_all */
	puts("No arch specific invalidate_icache_all available!\n");
c7e028b0:	e59f0000 	ldr	r0, [pc, #0]	; c7e028b8 <invalidate_icache_all+0x8>
c7e028b4:	ea00184c 	b	c7e089ec <puts>
c7e028b8:	c7e2ee42 	.word	0xc7e2ee42

c7e028bc <do_icache>:
}

int do_icache(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	switch (argc) {
c7e028bc:	e3520001 	cmp	r2, #1	; 0x1
	/* please define arch specific invalidate_icache_all */
	puts("No arch specific invalidate_icache_all available!\n");
}

int do_icache(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e028c0:	e92d4010 	push	{r4, lr}
	switch (argc) {
c7e028c4:	0a000013 	beq	c7e02918 <do_icache+0x5c>
c7e028c8:	e3520002 	cmp	r2, #2	; 0x2
c7e028cc:	13e00000 	mvnne	r0, #0	; 0x0
c7e028d0:	18bd8010 	popne	{r4, pc}
	case 2:			/* on / off	*/
		switch (parse_argv(argv[1])) {
c7e028d4:	e5930004 	ldr	r0, [r3, #4]
c7e028d8:	ebffffb8 	bl	c7e027c0 <parse_argv>
c7e028dc:	e3500001 	cmp	r0, #1	; 0x1
c7e028e0:	e1a04000 	mov	r4, r0
c7e028e4:	0a000006 	beq	c7e02904 <do_icache+0x48>
c7e028e8:	e3500002 	cmp	r0, #2	; 0x2
c7e028ec:	0a000006 	beq	c7e0290c <do_icache+0x50>
c7e028f0:	e3500000 	cmp	r0, #0	; 0x0
c7e028f4:	1a000005 	bne	c7e02910 <do_icache+0x54>
		case 0:
			icache_disable();
c7e028f8:	ebfffb05 	bl	c7e01514 <icache_disable>
c7e028fc:	e1a00004 	mov	r0, r4
c7e02900:	e8bd8010 	pop	{r4, pc}
			break;
		case 1:
			icache_enable();
c7e02904:	ebfffae4 	bl	c7e0149c <icache_enable>
c7e02908:	ea000000 	b	c7e02910 <do_icache+0x54>
			break;
		case 2:
			invalidate_icache_all();
c7e0290c:	ebffffe7 	bl	c7e028b0 <invalidate_icache_all>
c7e02910:	e3a00000 	mov	r0, #0	; 0x0
c7e02914:	e8bd8010 	pop	{r4, pc}
			break;
		}
		break;
	case 1:			/* get status */
		printf("Instruction Cache is %s\n",
c7e02918:	ebfffae1 	bl	c7e014a4 <icache_status>
c7e0291c:	e59f3018 	ldr	r3, [pc, #24]	; c7e0293c <do_icache+0x80>
c7e02920:	e3500000 	cmp	r0, #0	; 0x0
c7e02924:	e59f1014 	ldr	r1, [pc, #20]	; c7e02940 <do_icache+0x84>
c7e02928:	e59f0014 	ldr	r0, [pc, #20]	; c7e02944 <do_icache+0x88>
c7e0292c:	01a01003 	moveq	r1, r3
c7e02930:	eb001848 	bl	c7e08a58 <printf>
c7e02934:	e3a00000 	mov	r0, #0	; 0x0
		return 0;
	default:
		return CMD_RET_USAGE;
	}
	return 0;
}
c7e02938:	e8bd8010 	pop	{r4, pc}
c7e0293c:	c7e2ee1d 	.word	0xc7e2ee1d
c7e02940:	c7e31ef5 	.word	0xc7e31ef5
c7e02944:	c7e2ee75 	.word	0xc7e2ee75

c7e02948 <do_coninfo>:
#include <command.h>
#include <stdio_dev.h>

extern void _do_coninfo (void);
int do_coninfo (cmd_tbl_t * cmd, int flag, int argc, char * const argv[])
{
c7e02948:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
	int l;
	struct list_head *list = stdio_get_list();
c7e0294c:	eb003025 	bl	c7e0e9e8 <stdio_get_list>
c7e02950:	e1a06000 	mov	r6, r0
	struct list_head *pos;
	struct stdio_dev *dev;

	/* Scan for valid output and input devices */

	puts ("List of available devices:\n");
c7e02954:	e59f00c8 	ldr	r0, [pc, #200]	; c7e02a24 <do_coninfo+0xdc>
c7e02958:	eb001823 	bl	c7e089ec <puts>

	list_for_each(pos, list) {
c7e0295c:	e5965000 	ldr	r5, [r6]
c7e02960:	ea000028 	b	c7e02a08 <do_coninfo+0xc0>
		dev = list_entry(pos, struct stdio_dev, list);

		printf ("%-8s %08x %c%c%c ",
c7e02964:	e5153034 	ldr	r3, [r5, #-52]
c7e02968:	e3130001 	tst	r3, #1	; 0x1
c7e0296c:	13a0e049 	movne	lr, #73	; 0x49
c7e02970:	03a0e02e 	moveq	lr, #46	; 0x2e
c7e02974:	e3130002 	tst	r3, #2	; 0x2
c7e02978:	13a0c04f 	movne	ip, #79	; 0x4f
c7e0297c:	03a0c02e 	moveq	ip, #46	; 0x2e
c7e02980:	e3530000 	cmp	r3, #0	; 0x0
c7e02984:	e1a02003 	mov	r2, r3
c7e02988:	b3a03053 	movlt	r3, #83	; 0x53
c7e0298c:	a3a0302e 	movge	r3, #46	; 0x2e
c7e02990:	e58de000 	str	lr, [sp]
c7e02994:	e58dc004 	str	ip, [sp, #4]
c7e02998:	eb00182e 	bl	c7e08a58 <printf>
			(dev->flags & DEV_FLAGS_SYSTEM) ? 'S' : '.',
			(dev->flags & DEV_FLAGS_INPUT) ? 'I' : '.',
			(dev->flags & DEV_FLAGS_OUTPUT) ? 'O' : '.');

		for (l = 0; l < MAX_FILES; l++) {
			if (stdio_devices[l] == dev) {
c7e0299c:	e59f3084 	ldr	r3, [pc, #132]	; c7e02a28 <do_coninfo+0xe0>
c7e029a0:	e5933000 	ldr	r3, [r3]
c7e029a4:	e1530004 	cmp	r3, r4
c7e029a8:	1a000003 	bne	c7e029bc <do_coninfo+0x74>
				printf ("%s ", stdio_names[l]);
c7e029ac:	e59f3078 	ldr	r3, [pc, #120]	; c7e02a2c <do_coninfo+0xe4>
c7e029b0:	e59f0078 	ldr	r0, [pc, #120]	; c7e02a30 <do_coninfo+0xe8>
c7e029b4:	e5931000 	ldr	r1, [r3]
c7e029b8:	eb001826 	bl	c7e08a58 <printf>
			(dev->flags & DEV_FLAGS_SYSTEM) ? 'S' : '.',
			(dev->flags & DEV_FLAGS_INPUT) ? 'I' : '.',
			(dev->flags & DEV_FLAGS_OUTPUT) ? 'O' : '.');

		for (l = 0; l < MAX_FILES; l++) {
			if (stdio_devices[l] == dev) {
c7e029bc:	e59f3064 	ldr	r3, [pc, #100]	; c7e02a28 <do_coninfo+0xe0>
c7e029c0:	e5933004 	ldr	r3, [r3, #4]
c7e029c4:	e1530004 	cmp	r3, r4
c7e029c8:	1a000003 	bne	c7e029dc <do_coninfo+0x94>
				printf ("%s ", stdio_names[l]);
c7e029cc:	e59f3058 	ldr	r3, [pc, #88]	; c7e02a2c <do_coninfo+0xe4>
c7e029d0:	e59f0058 	ldr	r0, [pc, #88]	; c7e02a30 <do_coninfo+0xe8>
c7e029d4:	e5931004 	ldr	r1, [r3, #4]
c7e029d8:	eb00181e 	bl	c7e08a58 <printf>
			(dev->flags & DEV_FLAGS_SYSTEM) ? 'S' : '.',
			(dev->flags & DEV_FLAGS_INPUT) ? 'I' : '.',
			(dev->flags & DEV_FLAGS_OUTPUT) ? 'O' : '.');

		for (l = 0; l < MAX_FILES; l++) {
			if (stdio_devices[l] == dev) {
c7e029dc:	e59f3044 	ldr	r3, [pc, #68]	; c7e02a28 <do_coninfo+0xe0>
c7e029e0:	e5933008 	ldr	r3, [r3, #8]
c7e029e4:	e1530004 	cmp	r3, r4
c7e029e8:	1a000003 	bne	c7e029fc <do_coninfo+0xb4>
				printf ("%s ", stdio_names[l]);
c7e029ec:	e59f3038 	ldr	r3, [pc, #56]	; c7e02a2c <do_coninfo+0xe4>
c7e029f0:	e59f0038 	ldr	r0, [pc, #56]	; c7e02a30 <do_coninfo+0xe8>
c7e029f4:	e5931008 	ldr	r1, [r3, #8]
c7e029f8:	eb001816 	bl	c7e08a58 <printf>
			}
		}
		putc ('\n');
c7e029fc:	e3a0000a 	mov	r0, #10	; 0xa
c7e02a00:	eb0018a4 	bl	c7e08c98 <putc>

	/* Scan for valid output and input devices */

	puts ("List of available devices:\n");

	list_for_each(pos, list) {
c7e02a04:	e5955000 	ldr	r5, [r5]
		dev = list_entry(pos, struct stdio_dev, list);
c7e02a08:	e2454034 	sub	r4, r5, #52	; 0x34

	/* Scan for valid output and input devices */

	puts ("List of available devices:\n");

	list_for_each(pos, list) {
c7e02a0c:	e1550006 	cmp	r5, r6
		dev = list_entry(pos, struct stdio_dev, list);

		printf ("%-8s %08x %c%c%c ",
c7e02a10:	e2841008 	add	r1, r4, #8	; 0x8
c7e02a14:	e59f0018 	ldr	r0, [pc, #24]	; c7e02a34 <do_coninfo+0xec>

	/* Scan for valid output and input devices */

	puts ("List of available devices:\n");

	list_for_each(pos, list) {
c7e02a18:	1affffd1 	bne	c7e02964 <do_coninfo+0x1c>
			}
		}
		putc ('\n');
	}
	return 0;
}
c7e02a1c:	e3a00000 	mov	r0, #0	; 0x0
c7e02a20:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
c7e02a24:	c7e2ef6b 	.word	0xc7e2ef6b
c7e02a28:	c7e419fc 	.word	0xc7e419fc
c7e02a2c:	c7e394ec 	.word	0xc7e394ec
c7e02a30:	c7e31ca2 	.word	0xc7e31ca2
c7e02a34:	c7e2ef87 	.word	0xc7e2ef87

c7e02a38 <do_echo>:

#include <common.h>
#include <command.h>

int do_echo(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02a38:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e02a3c:	e3a06001 	mov	r6, #1	; 0x1
c7e02a40:	e1a09002 	mov	r9, r2
c7e02a44:	e1a0a003 	mov	sl, r3
c7e02a48:	e1a07006 	mov	r7, r6
c7e02a4c:	ea00001c 	b	c7e02ac4 <do_echo+0x8c>

	for (i = 1; i < argc; i++) {
		char *p = argv[i];
		char *nls; /* new-line suppression */

		if (i > 1)
c7e02a50:	e3560001 	cmp	r6, #1	; 0x1
{
	int i;
	int putnl = 1;

	for (i = 1; i < argc; i++) {
		char *p = argv[i];
c7e02a54:	e79a4106 	ldr	r4, [sl, r6, lsl #2]
		char *nls; /* new-line suppression */

		if (i > 1)
c7e02a58:	da000001 	ble	c7e02a64 <do_echo+0x2c>
			putc(' ');
c7e02a5c:	e3a00020 	mov	r0, #32	; 0x20
c7e02a60:	eb00188c 	bl	c7e08c98 <putc>

		nls = strstr(p, "\\c");
c7e02a64:	e1a00004 	mov	r0, r4
c7e02a68:	e59f1074 	ldr	r1, [pc, #116]	; c7e02ae4 <do_echo+0xac>
c7e02a6c:	eb0080c8 	bl	c7e22d94 <strstr>
		if (nls) {
c7e02a70:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02a74:	0a00000f 	beq	c7e02ab8 <do_echo+0x80>
			/*
			 * be paranoid and guess that someone might
			 * say \c more than once
			 */
			while (nls) {
				*nls = '\0';
c7e02a78:	e3a03000 	mov	r3, #0	; 0x0
c7e02a7c:	e5c53000 	strb	r3, [r5]
				puts(prenls);
c7e02a80:	e1a00004 	mov	r0, r4
c7e02a84:	eb0017d8 	bl	c7e089ec <puts>
				*nls = '\\';
c7e02a88:	e1a04005 	mov	r4, r5
c7e02a8c:	e3a0305c 	mov	r3, #92	; 0x5c
c7e02a90:	e4c43002 	strb	r3, [r4], #2
				prenls = nls + 2;
				nls = strstr(prenls, "\\c");
c7e02a94:	e1a00004 	mov	r0, r4
c7e02a98:	e59f1044 	ldr	r1, [pc, #68]	; c7e02ae4 <do_echo+0xac>
c7e02a9c:	eb0080bc 	bl	c7e22d94 <strstr>
			putnl = 0;
			/*
			 * be paranoid and guess that someone might
			 * say \c more than once
			 */
			while (nls) {
c7e02aa0:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02aa4:	1afffff3 	bne	c7e02a78 <do_echo+0x40>
				puts(prenls);
				*nls = '\\';
				prenls = nls + 2;
				nls = strstr(prenls, "\\c");
			}
			puts(prenls);
c7e02aa8:	e1a00004 	mov	r0, r4
c7e02aac:	eb0017ce 	bl	c7e089ec <puts>
c7e02ab0:	e1a07005 	mov	r7, r5
c7e02ab4:	ea000001 	b	c7e02ac0 <do_echo+0x88>
		} else {
			puts(p);
c7e02ab8:	e1a00004 	mov	r0, r4
c7e02abc:	eb0017ca 	bl	c7e089ec <puts>
int do_echo(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	int i;
	int putnl = 1;

	for (i = 1; i < argc; i++) {
c7e02ac0:	e2866001 	add	r6, r6, #1	; 0x1
c7e02ac4:	e1560009 	cmp	r6, r9
c7e02ac8:	baffffe0 	blt	c7e02a50 <do_echo+0x18>
		} else {
			puts(p);
		}
	}

	if (putnl)
c7e02acc:	e3570000 	cmp	r7, #0	; 0x0
c7e02ad0:	0a000001 	beq	c7e02adc <do_echo+0xa4>
		putc('\n');
c7e02ad4:	e3a0000a 	mov	r0, #10	; 0xa
c7e02ad8:	eb00186e 	bl	c7e08c98 <putc>

	return 0;
}
c7e02adc:	e3a00000 	mov	r0, #0	; 0x0
c7e02ae0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e02ae4:	c7e2efc7 	.word	0xc7e2efc7

c7e02ae8 <valid_elf_image>:
 * Determine if a valid ELF image exists at the given memory location.
 * First looks at the ELF header magic field, the makes sure that it is
 * executable and makes sure that it is for a PowerPC.
 * ====================================================================== */
int valid_elf_image (unsigned long addr)
{
c7e02ae8:	e92d4010 	push	{r4, lr}

	/* -------------------------------------------------- */

	ehdr = (Elf32_Ehdr *) addr;

	if (!IS_ELF (*ehdr)) {
c7e02aec:	e5d03000 	ldrb	r3, [r0]
c7e02af0:	e353007f 	cmp	r3, #127	; 0x7f
c7e02af4:	1a000008 	bne	c7e02b1c <valid_elf_image+0x34>
c7e02af8:	e5d03001 	ldrb	r3, [r0, #1]
c7e02afc:	e3530045 	cmp	r3, #69	; 0x45
c7e02b00:	1a000005 	bne	c7e02b1c <valid_elf_image+0x34>
c7e02b04:	e5d03002 	ldrb	r3, [r0, #2]
c7e02b08:	e353004c 	cmp	r3, #76	; 0x4c
c7e02b0c:	1a000002 	bne	c7e02b1c <valid_elf_image+0x34>
c7e02b10:	e5d03003 	ldrb	r3, [r0, #3]
c7e02b14:	e3530046 	cmp	r3, #70	; 0x46
c7e02b18:	0a000004 	beq	c7e02b30 <valid_elf_image+0x48>
		printf ("## No elf image at address 0x%08lx\n", addr);
c7e02b1c:	e1a01000 	mov	r1, r0
c7e02b20:	e59f002c 	ldr	r0, [pc, #44]	; c7e02b54 <valid_elf_image+0x6c>
c7e02b24:	eb0017cb 	bl	c7e08a58 <printf>
c7e02b28:	e3a00000 	mov	r0, #0	; 0x0
c7e02b2c:	e8bd8010 	pop	{r4, pc}
		return 0;
	}

	if (ehdr->e_type != ET_EXEC) {
c7e02b30:	e1d031b0 	ldrh	r3, [r0, #16]
c7e02b34:	e3530002 	cmp	r3, #2	; 0x2
c7e02b38:	03a00001 	moveq	r0, #1	; 0x1
c7e02b3c:	08bd8010 	popeq	{r4, pc}
		printf ("## Not a 32-bit elf image at address 0x%08lx\n", addr);
c7e02b40:	e1a01000 	mov	r1, r0
c7e02b44:	e59f000c 	ldr	r0, [pc, #12]	; c7e02b58 <valid_elf_image+0x70>
c7e02b48:	eb0017c2 	bl	c7e08a58 <printf>
c7e02b4c:	e3a00000 	mov	r0, #0	; 0x0
		return 0;
	}
#endif

	return 1;
}
c7e02b50:	e8bd8010 	pop	{r4, pc}
c7e02b54:	c7e2f01a 	.word	0xc7e2f01a
c7e02b58:	c7e2f03e 	.word	0xc7e2f03e

c7e02b5c <load_elf_image_shdr>:

	return ehdr->e_entry;
}

static unsigned long load_elf_image_shdr(unsigned long addr)
{
c7e02b5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	unsigned char *image;		/* Binary image pointer             */
	int i;				/* Loop counter                     */

	/* -------------------------------------------------- */

	ehdr = (Elf32_Ehdr *) addr;
c7e02b60:	e3a06000 	mov	r6, #0	; 0x0

	return ehdr->e_entry;
}

static unsigned long load_elf_image_shdr(unsigned long addr)
{
c7e02b64:	e1a05000 	mov	r5, r0
	unsigned char *image;		/* Binary image pointer             */
	int i;				/* Loop counter                     */

	/* -------------------------------------------------- */

	ehdr = (Elf32_Ehdr *) addr;
c7e02b68:	e1a07006 	mov	r7, r6
c7e02b6c:	ea00001b 	b	c7e02be0 <load_elf_image_shdr+0x84>
	if (shdr->sh_type == SHT_STRTAB)
		strtab = (unsigned char *) (addr + shdr->sh_offset);

	/* Load each appropriate section */
	for (i = 0; i < ehdr->e_shnum; ++i) {
		shdr = (Elf32_Shdr *) (addr + ehdr->e_shoff +
c7e02b70:	e5953020 	ldr	r3, [r5, #32]
c7e02b74:	e0853003 	add	r3, r5, r3
c7e02b78:	e0834007 	add	r4, r3, r7
				       (i * sizeof (Elf32_Shdr)));

		if (!(shdr->sh_flags & SHF_ALLOC)
c7e02b7c:	e5943008 	ldr	r3, [r4, #8]
c7e02b80:	e3130002 	tst	r3, #2	; 0x2
c7e02b84:	0a000013 	beq	c7e02bd8 <load_elf_image_shdr+0x7c>
c7e02b88:	e594c00c 	ldr	ip, [r4, #12]
c7e02b8c:	e35c0000 	cmp	ip, #0	; 0x0
c7e02b90:	0a000010 	beq	c7e02bd8 <load_elf_image_shdr+0x7c>
c7e02b94:	e5941014 	ldr	r1, [r4, #20]
c7e02b98:	e3510000 	cmp	r1, #0	; 0x0
c7e02b9c:	0a00000d 	beq	c7e02bd8 <load_elf_image_shdr+0x7c>
				&strtab[shdr->sh_name],
				(unsigned long) shdr->sh_addr,
				(long) shdr->sh_size);
		}

		if (shdr->sh_type == SHT_NOBITS) {
c7e02ba0:	e5943004 	ldr	r3, [r4, #4]
			memset ((void *)shdr->sh_addr, 0, shdr->sh_size);
		} else {
			image = (unsigned char *) addr + shdr->sh_offset;
			memcpy ((void *) shdr->sh_addr,
c7e02ba4:	e1a02001 	mov	r2, r1
				&strtab[shdr->sh_name],
				(unsigned long) shdr->sh_addr,
				(long) shdr->sh_size);
		}

		if (shdr->sh_type == SHT_NOBITS) {
c7e02ba8:	e3530008 	cmp	r3, #8	; 0x8
			memset ((void *)shdr->sh_addr, 0, shdr->sh_size);
		} else {
			image = (unsigned char *) addr + shdr->sh_offset;
			memcpy ((void *) shdr->sh_addr,
c7e02bac:	e1a0000c 	mov	r0, ip
				&strtab[shdr->sh_name],
				(unsigned long) shdr->sh_addr,
				(long) shdr->sh_size);
		}

		if (shdr->sh_type == SHT_NOBITS) {
c7e02bb0:	1a000002 	bne	c7e02bc0 <load_elf_image_shdr+0x64>
			memset ((void *)shdr->sh_addr, 0, shdr->sh_size);
c7e02bb4:	e3a01000 	mov	r1, #0	; 0x0
c7e02bb8:	eb007ff5 	bl	c7e22b94 <memset>
c7e02bbc:	ea000002 	b	c7e02bcc <load_elf_image_shdr+0x70>
		} else {
			image = (unsigned char *) addr + shdr->sh_offset;
			memcpy ((void *) shdr->sh_addr,
c7e02bc0:	e5941010 	ldr	r1, [r4, #16]
c7e02bc4:	e0851001 	add	r1, r5, r1
c7e02bc8:	eb00801b 	bl	c7e22c3c <memcpy>
				(const void *) image,
				shdr->sh_size);
		}
		flush_cache (shdr->sh_addr, shdr->sh_size);
c7e02bcc:	e5941014 	ldr	r1, [r4, #20]
c7e02bd0:	e594000c 	ldr	r0, [r4, #12]
c7e02bd4:	ebfff9e9 	bl	c7e01380 <__flush_cache>

	if (shdr->sh_type == SHT_STRTAB)
		strtab = (unsigned char *) (addr + shdr->sh_offset);

	/* Load each appropriate section */
	for (i = 0; i < ehdr->e_shnum; ++i) {
c7e02bd8:	e2866001 	add	r6, r6, #1	; 0x1
c7e02bdc:	e2877028 	add	r7, r7, #40	; 0x28
c7e02be0:	e1d533b0 	ldrh	r3, [r5, #48]
c7e02be4:	e1560003 	cmp	r6, r3
c7e02be8:	baffffe0 	blt	c7e02b70 <load_elf_image_shdr+0x14>
		}
		flush_cache (shdr->sh_addr, shdr->sh_size);
	}

	return ehdr->e_entry;
}
c7e02bec:	e5950018 	ldr	r0, [r5, #24]
c7e02bf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e02bf4 <do_bootvx>:
 * Interpreter command to boot VxWorks from a memory image.  The image can
 * be either an ELF image or a raw binary.  Will attempt to setup the
 * bootline and other parameters correctly.
 * ====================================================================== */
int do_bootvx (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02bf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	 *
	 * Check the loadaddr variable.
	 * If we don't know where the image is then we're done.
	 */

	if (argc < 2)
c7e02bf8:	e3520001 	cmp	r2, #1	; 0x1
 * Interpreter command to boot VxWorks from a memory image.  The image can
 * be either an ELF image or a raw binary.  Will attempt to setup the
 * bootline and other parameters correctly.
 * ====================================================================== */
int do_bootvx (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02bfc:	e1a05003 	mov	r5, r3
	 * Check the loadaddr variable.
	 * If we don't know where the image is then we're done.
	 */

	if (argc < 2)
		addr = load_addr;
c7e02c00:	d59f3228 	ldrle	r3, [pc, #552]	; c7e02e30 <do_bootvx+0x23c>
 * Interpreter command to boot VxWorks from a memory image.  The image can
 * be either an ELF image or a raw binary.  Will attempt to setup the
 * bootline and other parameters correctly.
 * ====================================================================== */
int do_bootvx (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02c04:	e24dd084 	sub	sp, sp, #132	; 0x84
c7e02c08:	e1a04002 	mov	r4, r2
	 * Check the loadaddr variable.
	 * If we don't know where the image is then we're done.
	 */

	if (argc < 2)
		addr = load_addr;
c7e02c0c:	d5936000 	ldrle	r6, [r3]
	 *
	 * Check the loadaddr variable.
	 * If we don't know where the image is then we're done.
	 */

	if (argc < 2)
c7e02c10:	da000004 	ble	c7e02c28 <do_bootvx+0x34>
		addr = load_addr;
	else
		addr = simple_strtoul (argv[1], NULL, 16);
c7e02c14:	e5950004 	ldr	r0, [r5, #4]
c7e02c18:	e3a01000 	mov	r1, #0	; 0x0
c7e02c1c:	e3a02010 	mov	r2, #16	; 0x10
c7e02c20:	eb0080ce 	bl	c7e22f60 <simple_strtoul>
c7e02c24:	e1a06000 	mov	r6, r0

#if defined(CONFIG_CMD_NET)
	/* Check to see if we need to tftp the image ourselves before starting */

	if ((argc == 2) && (strcmp (argv[1], "tftp") == 0)) {
c7e02c28:	e3540002 	cmp	r4, #2	; 0x2
c7e02c2c:	1a00000b 	bne	c7e02c60 <do_bootvx+0x6c>
c7e02c30:	e5950004 	ldr	r0, [r5, #4]
c7e02c34:	e59f11f8 	ldr	r1, [pc, #504]	; c7e02e34 <do_bootvx+0x240>
c7e02c38:	eb007f08 	bl	c7e22860 <strcmp>
c7e02c3c:	e3500000 	cmp	r0, #0	; 0x0
c7e02c40:	1a000006 	bne	c7e02c60 <do_bootvx+0x6c>
		if (NetLoop(TFTPGET) <= 0)
c7e02c44:	e2800003 	add	r0, r0, #3	; 0x3
c7e02c48:	eb00965c 	bl	c7e285c0 <NetLoop>
c7e02c4c:	e3500000 	cmp	r0, #0	; 0x0
c7e02c50:	da000073 	ble	c7e02e24 <do_bootvx+0x230>
			return 1;
		printf("Automatic boot of VxWorks image at address 0x%08lx "
c7e02c54:	e59f01dc 	ldr	r0, [pc, #476]	; c7e02e38 <do_bootvx+0x244>
c7e02c58:	e1a01006 	mov	r1, r6
c7e02c5c:	eb00177d 	bl	c7e08a58 <printf>
#elif defined(CONFIG_SYS_VXWORKS_MAC_PTR)
	tmp = (char *) CONFIG_SYS_VXWORKS_MAC_PTR;
	eth_getenv_enetaddr("ethaddr", (uchar *)build_buf);
	memcpy(tmp, build_buf, 6);
#else
	puts ("## Ethernet MAC address not copied to NV RAM\n");
c7e02c60:	e59f01d4 	ldr	r0, [pc, #468]	; c7e02e3c <do_bootvx+0x248>
c7e02c64:	eb001760 	bl	c7e089ec <puts>
	 * will look for the bootline string. The default value for
	 * PowerPC is LOCAL_MEM_LOCAL_ADRS + BOOT_LINE_OFFSET which
	 * defaults to 0x4200
	 */

	if ((tmp = getenv ("bootaddr")) == NULL)
c7e02c68:	e59f01d0 	ldr	r0, [pc, #464]	; c7e02e40 <do_bootvx+0x24c>
c7e02c6c:	eb00110a 	bl	c7e0709c <getenv>
c7e02c70:	e3500000 	cmp	r0, #0	; 0x0
c7e02c74:	03a07c42 	moveq	r7, #16896	; 0x4200
c7e02c78:	0a000003 	beq	c7e02c8c <do_bootvx+0x98>
		bootaddr = CONFIG_SYS_VXWORKS_BOOT_ADDR;
	else
		bootaddr = simple_strtoul (tmp, NULL, 16);
c7e02c7c:	e3a01000 	mov	r1, #0	; 0x0
c7e02c80:	e3a02010 	mov	r2, #16	; 0x10
c7e02c84:	eb0080b5 	bl	c7e22f60 <simple_strtoul>
c7e02c88:	e1a07000 	mov	r7, r0
	 * Check to see if the bootline is defined in the 'bootargs'
	 * parameter. If it is not defined, we may be able to
	 * construct the info
	 */

	if ((bootline = getenv ("bootargs")) != NULL) {
c7e02c8c:	e59f01b0 	ldr	r0, [pc, #432]	; c7e02e44 <do_bootvx+0x250>
c7e02c90:	eb001101 	bl	c7e0709c <getenv>
c7e02c94:	e2504000 	subs	r4, r0, #0	; 0x0
c7e02c98:	0a000008 	beq	c7e02cc0 <do_bootvx+0xcc>
		memcpy ((void *) bootaddr, bootline,
			max (strlen (bootline), 255));
c7e02c9c:	eb007f25 	bl	c7e22938 <strlen>
	 * parameter. If it is not defined, we may be able to
	 * construct the info
	 */

	if ((bootline = getenv ("bootargs")) != NULL) {
		memcpy ((void *) bootaddr, bootline,
c7e02ca0:	e1a01004 	mov	r1, r4
c7e02ca4:	e35000ff 	cmp	r0, #255	; 0xff
c7e02ca8:	21a02000 	movcs	r2, r0
c7e02cac:	33a020ff 	movcc	r2, #255	; 0xff
c7e02cb0:	e1a00007 	mov	r0, r7
c7e02cb4:	eb007fe0 	bl	c7e22c3c <memcpy>
			max (strlen (bootline), 255));
		flush_cache (bootaddr, max (strlen (bootline), 255));
c7e02cb8:	e1a00004 	mov	r0, r4
c7e02cbc:	ea00003c 	b	c7e02db4 <do_bootvx+0x1c0>
	} else {


		sprintf (build_buf, CONFIG_SYS_VXWORKS_BOOT_DEVICE);
c7e02cc0:	e59f1180 	ldr	r1, [pc, #384]	; c7e02e48 <do_bootvx+0x254>
c7e02cc4:	e1a0000d 	mov	r0, sp
c7e02cc8:	eb008458 	bl	c7e23e30 <sprintf>
		if ((tmp = getenv ("bootfile")) != NULL) {
c7e02ccc:	e59f0178 	ldr	r0, [pc, #376]	; c7e02e4c <do_bootvx+0x258>
c7e02cd0:	eb0010f1 	bl	c7e0709c <getenv>
c7e02cd4:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02cd8:	0a000007 	beq	c7e02cfc <do_bootvx+0x108>
			sprintf (&build_buf[strlen (build_buf)],
c7e02cdc:	e1a0000d 	mov	r0, sp
c7e02ce0:	eb007f14 	bl	c7e22938 <strlen>
c7e02ce4:	e1a03005 	mov	r3, r5
c7e02ce8:	e08d0000 	add	r0, sp, r0
c7e02cec:	e59f115c 	ldr	r1, [pc, #348]	; c7e02e50 <do_bootvx+0x25c>
c7e02cf0:	e59f215c 	ldr	r2, [pc, #348]	; c7e02e54 <do_bootvx+0x260>
c7e02cf4:	eb00844d 	bl	c7e23e30 <sprintf>
c7e02cf8:	ea000005 	b	c7e02d14 <do_bootvx+0x120>
				 "%s:%s ", CONFIG_SYS_VXWORKS_SERVERNAME, tmp);
		} else {
			sprintf (&build_buf[strlen (build_buf)],
c7e02cfc:	e1a0000d 	mov	r0, sp
c7e02d00:	eb007f0c 	bl	c7e22938 <strlen>
c7e02d04:	e59f114c 	ldr	r1, [pc, #332]	; c7e02e58 <do_bootvx+0x264>
c7e02d08:	e08d0000 	add	r0, sp, r0
c7e02d0c:	e59f2140 	ldr	r2, [pc, #320]	; c7e02e54 <do_bootvx+0x260>
c7e02d10:	eb008446 	bl	c7e23e30 <sprintf>
				 "%s:file ", CONFIG_SYS_VXWORKS_SERVERNAME);
		}

		if ((tmp = getenv ("ipaddr")) != NULL) {
c7e02d14:	e59f0140 	ldr	r0, [pc, #320]	; c7e02e5c <do_bootvx+0x268>
c7e02d18:	eb0010df 	bl	c7e0709c <getenv>
c7e02d1c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02d20:	0a000005 	beq	c7e02d3c <do_bootvx+0x148>
			sprintf (&build_buf[strlen (build_buf)], "e=%s ", tmp);
c7e02d24:	e1a0000d 	mov	r0, sp
c7e02d28:	eb007f02 	bl	c7e22938 <strlen>
c7e02d2c:	e1a02005 	mov	r2, r5
c7e02d30:	e08d0000 	add	r0, sp, r0
c7e02d34:	e59f1124 	ldr	r1, [pc, #292]	; c7e02e60 <do_bootvx+0x26c>
c7e02d38:	eb00843c 	bl	c7e23e30 <sprintf>
		}

		if ((tmp = getenv ("serverip")) != NULL) {
c7e02d3c:	e59f0120 	ldr	r0, [pc, #288]	; c7e02e64 <do_bootvx+0x270>
c7e02d40:	eb0010d5 	bl	c7e0709c <getenv>
c7e02d44:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02d48:	0a000005 	beq	c7e02d64 <do_bootvx+0x170>
			sprintf (&build_buf[strlen (build_buf)], "h=%s ", tmp);
c7e02d4c:	e1a0000d 	mov	r0, sp
c7e02d50:	eb007ef8 	bl	c7e22938 <strlen>
c7e02d54:	e1a02005 	mov	r2, r5
c7e02d58:	e08d0000 	add	r0, sp, r0
c7e02d5c:	e59f1104 	ldr	r1, [pc, #260]	; c7e02e68 <do_bootvx+0x274>
c7e02d60:	eb008432 	bl	c7e23e30 <sprintf>
		}

		if ((tmp = getenv ("hostname")) != NULL) {
c7e02d64:	e59f0100 	ldr	r0, [pc, #256]	; c7e02e6c <do_bootvx+0x278>
c7e02d68:	eb0010cb 	bl	c7e0709c <getenv>
c7e02d6c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e02d70:	0a000005 	beq	c7e02d8c <do_bootvx+0x198>
			sprintf (&build_buf[strlen (build_buf)], "tn=%s ", tmp);
c7e02d74:	e1a0000d 	mov	r0, sp
c7e02d78:	eb007eee 	bl	c7e22938 <strlen>
c7e02d7c:	e1a02005 	mov	r2, r5
c7e02d80:	e08d0000 	add	r0, sp, r0
c7e02d84:	e59f10e4 	ldr	r1, [pc, #228]	; c7e02e70 <do_bootvx+0x27c>
c7e02d88:	eb008428 	bl	c7e23e30 <sprintf>
		sprintf (&build_buf[strlen (build_buf)],
			 CONFIG_SYS_VXWORKS_ADD_PARAMS);
#endif

		memcpy ((void *) bootaddr, build_buf,
			max (strlen (build_buf), 255));
c7e02d8c:	e1a0000d 	mov	r0, sp
c7e02d90:	eb007ee8 	bl	c7e22938 <strlen>
#ifdef CONFIG_SYS_VXWORKS_ADD_PARAMS
		sprintf (&build_buf[strlen (build_buf)],
			 CONFIG_SYS_VXWORKS_ADD_PARAMS);
#endif

		memcpy ((void *) bootaddr, build_buf,
c7e02d94:	e1a0100d 	mov	r1, sp
c7e02d98:	e35000ff 	cmp	r0, #255	; 0xff
c7e02d9c:	21a02000 	movcs	r2, r0
c7e02da0:	33a020ff 	movcc	r2, #255	; 0xff
c7e02da4:	e1a00007 	mov	r0, r7
c7e02da8:	eb007fa3 	bl	c7e22c3c <memcpy>
			max (strlen (build_buf), 255));
c7e02dac:	e1a0400d 	mov	r4, sp
		flush_cache (bootaddr, max (strlen (build_buf), 255));
c7e02db0:	e1a0000d 	mov	r0, sp
c7e02db4:	eb007edf 	bl	c7e22938 <strlen>
c7e02db8:	e35000ff 	cmp	r0, #255	; 0xff
c7e02dbc:	21a01000 	movcs	r1, r0
c7e02dc0:	33a010ff 	movcc	r1, #255	; 0xff
c7e02dc4:	e1a00007 	mov	r0, r7
c7e02dc8:	ebfff96c 	bl	c7e01380 <__flush_cache>
	 * If the data at the load address is an elf image, then
	 * treat it like an elf image. Otherwise, assume that it is a
	 * binary image
	 */

	if (valid_elf_image (addr)) {
c7e02dcc:	e1a00006 	mov	r0, r6
c7e02dd0:	ebffff44 	bl	c7e02ae8 <valid_elf_image>
c7e02dd4:	e3500000 	cmp	r0, #0	; 0x0
c7e02dd8:	0a000003 	beq	c7e02dec <do_bootvx+0x1f8>
		addr = load_elf_image_shdr (addr);
c7e02ddc:	e1a00006 	mov	r0, r6
c7e02de0:	ebffff5d 	bl	c7e02b5c <load_elf_image_shdr>
c7e02de4:	e1a06000 	mov	r6, r0
c7e02de8:	ea000001 	b	c7e02df4 <do_bootvx+0x200>
	} else {
		puts ("## Not an ELF image, assuming binary\n");
c7e02dec:	e59f0080 	ldr	r0, [pc, #128]	; c7e02e74 <do_bootvx+0x280>
c7e02df0:	eb0016fd 	bl	c7e089ec <puts>
		/* leave addr as load_addr */
	}

	printf ("## Using bootline (@ 0x%lx): %s\n", bootaddr,
c7e02df4:	e1a02007 	mov	r2, r7
c7e02df8:	e1a01007 	mov	r1, r7
c7e02dfc:	e59f0074 	ldr	r0, [pc, #116]	; c7e02e78 <do_bootvx+0x284>
c7e02e00:	eb001714 	bl	c7e08a58 <printf>
			(char *) bootaddr);
	printf ("## Starting vxWorks at 0x%08lx ...\n", addr);
c7e02e04:	e1a01006 	mov	r1, r6
c7e02e08:	e59f006c 	ldr	r0, [pc, #108]	; c7e02e7c <do_bootvx+0x288>
c7e02e0c:	eb001711 	bl	c7e08a58 <printf>

	dcache_disable();
c7e02e10:	ebfff9bd 	bl	c7e0150c <dcache_disable>
	((void (*)(int)) addr) (0);
c7e02e14:	e3a00000 	mov	r0, #0	; 0x0
c7e02e18:	e12fff36 	blx	r6

	puts ("## vxWorks terminated\n");
c7e02e1c:	e59f005c 	ldr	r0, [pc, #92]	; c7e02e80 <do_bootvx+0x28c>
c7e02e20:	eb0016f1 	bl	c7e089ec <puts>
	return 1;
}
c7e02e24:	e3a00001 	mov	r0, #1	; 0x1
c7e02e28:	e28dd084 	add	sp, sp, #132	; 0x84
c7e02e2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e02e30:	c7e353cc 	.word	0xc7e353cc
c7e02e34:	c7e2f06c 	.word	0xc7e2f06c
c7e02e38:	c7e2f071 	.word	0xc7e2f071
c7e02e3c:	c7e2f0a9 	.word	0xc7e2f0a9
c7e02e40:	c7e2f0d7 	.word	0xc7e2f0d7
c7e02e44:	c7e2e01a 	.word	0xc7e2e01a
c7e02e48:	c7e2f0e0 	.word	0xc7e2f0e0
c7e02e4c:	c7e2f0e9 	.word	0xc7e2f0e9
c7e02e50:	c7e2f0f2 	.word	0xc7e2f0f2
c7e02e54:	c7e2f0f9 	.word	0xc7e2f0f9
c7e02e58:	c7e2f0fd 	.word	0xc7e2f0fd
c7e02e5c:	c7e2e352 	.word	0xc7e2e352
c7e02e60:	c7e2f106 	.word	0xc7e2f106
c7e02e64:	c7e2f10c 	.word	0xc7e2f10c
c7e02e68:	c7e2f115 	.word	0xc7e2f115
c7e02e6c:	c7e2f11b 	.word	0xc7e2f11b
c7e02e70:	c7e2f124 	.word	0xc7e2f124
c7e02e74:	c7e2f12b 	.word	0xc7e2f12b
c7e02e78:	c7e2f151 	.word	0xc7e2f151
c7e02e7c:	c7e2f172 	.word	0xc7e2f172
c7e02e80:	c7e2f196 	.word	0xc7e2f196

c7e02e84 <do_bootelf_exec>:

/* Allow ports to override the default behavior */
__attribute__((weak))
unsigned long do_bootelf_exec (ulong (*entry)(int, char * const[]),
			       int argc, char * const argv[])
{
c7e02e84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e02e88:	e1a07000 	mov	r7, r0
c7e02e8c:	e1a04001 	mov	r4, r1
c7e02e90:	e1a05002 	mov	r5, r2

	/*
	 * QNX images require the data cache is disabled.
	 * Data cache is already flushed, so just turn it off.
	 */
	int dcache = dcache_status ();
c7e02e94:	ebfff989 	bl	c7e014c0 <dcache_status>
	if (dcache)
c7e02e98:	e2506000 	subs	r6, r0, #0	; 0x0
c7e02e9c:	0a000000 	beq	c7e02ea4 <do_bootelf_exec+0x20>
		dcache_disable ();
c7e02ea0:	ebfff999 	bl	c7e0150c <dcache_disable>

	/*
	 * pass address parameter as argv[0] (aka command name),
	 * and all remaining args
	 */
	ret = entry (argc, argv);
c7e02ea4:	e1a00004 	mov	r0, r4
c7e02ea8:	e1a01005 	mov	r1, r5
c7e02eac:	e12fff37 	blx	r7

	if (dcache)
c7e02eb0:	e3560000 	cmp	r6, #0	; 0x0

	/*
	 * pass address parameter as argv[0] (aka command name),
	 * and all remaining args
	 */
	ret = entry (argc, argv);
c7e02eb4:	e1a04000 	mov	r4, r0

	if (dcache)
c7e02eb8:	0a000000 	beq	c7e02ec0 <do_bootelf_exec+0x3c>
		dcache_enable ();
c7e02ebc:	ebfff97d 	bl	c7e014b8 <dcache_enable>

	return ret;
}
c7e02ec0:	e1a00004 	mov	r0, r4
c7e02ec4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e02ec8 <do_bootelf>:

	/* -------------------------------------------------- */
	int rcode = 0;

	sload = saddr = NULL;
	if (argc == 3) {
c7e02ec8:	e3520003 	cmp	r2, #3	; 0x3

/* ======================================================================
 * Interpreter command to boot an arbitrary ELF image from memory.
 * ====================================================================== */
int do_bootelf (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02ecc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int rcode = 0;

	sload = saddr = NULL;
	if (argc == 3) {
		sload = argv[1];
		saddr = argv[2];
c7e02ed0:	05930008 	ldreq	r0, [r3, #8]

/* ======================================================================
 * Interpreter command to boot an arbitrary ELF image from memory.
 * ====================================================================== */
int do_bootelf (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e02ed4:	e1a09002 	mov	r9, r2
c7e02ed8:	e1a0a003 	mov	sl, r3
	/* -------------------------------------------------- */
	int rcode = 0;

	sload = saddr = NULL;
	if (argc == 3) {
		sload = argv[1];
c7e02edc:	05934004 	ldreq	r4, [r3, #4]

	/* -------------------------------------------------- */
	int rcode = 0;

	sload = saddr = NULL;
	if (argc == 3) {
c7e02ee0:	0a000007 	beq	c7e02f04 <do_bootelf+0x3c>
		sload = argv[1];
		saddr = argv[2];
	} else if (argc == 2) {
c7e02ee4:	e3520002 	cmp	r2, #2	; 0x2
c7e02ee8:	13a04000 	movne	r4, #0	; 0x0
c7e02eec:	1a00000b 	bne	c7e02f20 <do_bootelf+0x58>
		if (argv[1][0] == '-')
c7e02ef0:	e5930004 	ldr	r0, [r3, #4]
c7e02ef4:	e5d03000 	ldrb	r3, [r0]
c7e02ef8:	e353002d 	cmp	r3, #45	; 0x2d
c7e02efc:	0a000043 	beq	c7e03010 <do_bootelf+0x148>
c7e02f00:	e3a04000 	mov	r4, #0	; 0x0
			sload = argv[1];
		else
			saddr = argv[1];
	}

	if (saddr)
c7e02f04:	e3500000 	cmp	r0, #0	; 0x0
c7e02f08:	0a000004 	beq	c7e02f20 <do_bootelf+0x58>
		addr = simple_strtoul(saddr, NULL, 16);
c7e02f0c:	e3a01000 	mov	r1, #0	; 0x0
c7e02f10:	e3a02010 	mov	r2, #16	; 0x10
c7e02f14:	eb008011 	bl	c7e22f60 <simple_strtoul>
c7e02f18:	e1a05000 	mov	r5, r0
c7e02f1c:	ea000001 	b	c7e02f28 <do_bootelf+0x60>
	else
		addr = load_addr;
c7e02f20:	e59f30f0 	ldr	r3, [pc, #240]	; c7e03018 <do_bootelf+0x150>
c7e02f24:	e5935000 	ldr	r5, [r3]

	if (!valid_elf_image (addr))
c7e02f28:	e1a00005 	mov	r0, r5
c7e02f2c:	ebfffeed 	bl	c7e02ae8 <valid_elf_image>
c7e02f30:	e3500000 	cmp	r0, #0	; 0x0
c7e02f34:	03a04001 	moveq	r4, #1	; 0x1
c7e02f38:	0a000032 	beq	c7e03008 <do_bootelf+0x140>
		return 1;

	if (sload && sload[1] == 'p')
c7e02f3c:	e3540000 	cmp	r4, #0	; 0x0
c7e02f40:	0a000020 	beq	c7e02fc8 <do_bootelf+0x100>
c7e02f44:	e5d43001 	ldrb	r3, [r4, #1]
c7e02f48:	e3530070 	cmp	r3, #112	; 0x70
	Elf32_Ehdr *ehdr;		/* Elf header structure pointer     */
	Elf32_Phdr *phdr;		/* Program header structure pointer */
	int i;

	ehdr = (Elf32_Ehdr *) addr;
	phdr = (Elf32_Phdr *) (addr + ehdr->e_phoff);
c7e02f4c:	0595301c 	ldreq	r3, [r5, #28]
c7e02f50:	03a07000 	moveq	r7, #0	; 0x0
c7e02f54:	00854003 	addeq	r4, r5, r3
		addr = load_addr;

	if (!valid_elf_image (addr))
		return 1;

	if (sload && sload[1] == 'p')
c7e02f58:	1a00001a 	bne	c7e02fc8 <do_bootelf+0x100>
c7e02f5c:	ea000013 	b	c7e02fb0 <do_bootelf+0xe8>
	for (i = 0; i < ehdr->e_phnum; ++i) {
		void *dst = (void *) phdr->p_paddr;
		void *src = (void *) addr + phdr->p_offset;
		debug("Loading phdr %i to 0x%p (%i bytes)\n",
			i, dst, phdr->p_filesz);
		if (phdr->p_filesz)
c7e02f60:	e5942010 	ldr	r2, [r4, #16]
	ehdr = (Elf32_Ehdr *) addr;
	phdr = (Elf32_Phdr *) (addr + ehdr->e_phoff);

	/* Load each program header */
	for (i = 0; i < ehdr->e_phnum; ++i) {
		void *dst = (void *) phdr->p_paddr;
c7e02f64:	e594600c 	ldr	r6, [r4, #12]
		void *src = (void *) addr + phdr->p_offset;
		debug("Loading phdr %i to 0x%p (%i bytes)\n",
			i, dst, phdr->p_filesz);
		if (phdr->p_filesz)
c7e02f68:	e3520000 	cmp	r2, #0	; 0x0
	phdr = (Elf32_Phdr *) (addr + ehdr->e_phoff);

	/* Load each program header */
	for (i = 0; i < ehdr->e_phnum; ++i) {
		void *dst = (void *) phdr->p_paddr;
		void *src = (void *) addr + phdr->p_offset;
c7e02f6c:	e5943004 	ldr	r3, [r4, #4]
		debug("Loading phdr %i to 0x%p (%i bytes)\n",
			i, dst, phdr->p_filesz);
		if (phdr->p_filesz)
c7e02f70:	0a000002 	beq	c7e02f80 <do_bootelf+0xb8>
			memcpy(dst, src, phdr->p_filesz);
c7e02f74:	e0851003 	add	r1, r5, r3
c7e02f78:	e1a00006 	mov	r0, r6
c7e02f7c:	eb007f2e 	bl	c7e22c3c <memcpy>
		if (phdr->p_filesz != phdr->p_memsz)
c7e02f80:	e5940010 	ldr	r0, [r4, #16]
c7e02f84:	e5943014 	ldr	r3, [r4, #20]
			memset(dst + phdr->p_filesz, 0x00, phdr->p_memsz - phdr->p_filesz);
c7e02f88:	e3a01000 	mov	r1, #0	; 0x0
		void *src = (void *) addr + phdr->p_offset;
		debug("Loading phdr %i to 0x%p (%i bytes)\n",
			i, dst, phdr->p_filesz);
		if (phdr->p_filesz)
			memcpy(dst, src, phdr->p_filesz);
		if (phdr->p_filesz != phdr->p_memsz)
c7e02f8c:	e1500003 	cmp	r0, r3
			memset(dst + phdr->p_filesz, 0x00, phdr->p_memsz - phdr->p_filesz);
c7e02f90:	e0602003 	rsb	r2, r0, r3
c7e02f94:	e0860000 	add	r0, r6, r0
		void *src = (void *) addr + phdr->p_offset;
		debug("Loading phdr %i to 0x%p (%i bytes)\n",
			i, dst, phdr->p_filesz);
		if (phdr->p_filesz)
			memcpy(dst, src, phdr->p_filesz);
		if (phdr->p_filesz != phdr->p_memsz)
c7e02f98:	0a000000 	beq	c7e02fa0 <do_bootelf+0xd8>
			memset(dst + phdr->p_filesz, 0x00, phdr->p_memsz - phdr->p_filesz);
c7e02f9c:	eb007efc 	bl	c7e22b94 <memset>
		flush_cache((unsigned long)dst, phdr->p_filesz);
c7e02fa0:	e5941010 	ldr	r1, [r4, #16]
c7e02fa4:	e1a00006 	mov	r0, r6
c7e02fa8:	ebfff8f4 	bl	c7e01380 <__flush_cache>
		++phdr;
c7e02fac:	e2844020 	add	r4, r4, #32	; 0x20

	ehdr = (Elf32_Ehdr *) addr;
	phdr = (Elf32_Phdr *) (addr + ehdr->e_phoff);

	/* Load each program header */
	for (i = 0; i < ehdr->e_phnum; ++i) {
c7e02fb0:	e1d532bc 	ldrh	r3, [r5, #44]
c7e02fb4:	e1570003 	cmp	r7, r3
c7e02fb8:	e2877001 	add	r7, r7, #1	; 0x1
c7e02fbc:	baffffe7 	blt	c7e02f60 <do_bootelf+0x98>
			memset(dst + phdr->p_filesz, 0x00, phdr->p_memsz - phdr->p_filesz);
		flush_cache((unsigned long)dst, phdr->p_filesz);
		++phdr;
	}

	return ehdr->e_entry;
c7e02fc0:	e5954018 	ldr	r4, [r5, #24]
c7e02fc4:	ea000002 	b	c7e02fd4 <do_bootelf+0x10c>
		return 1;

	if (sload && sload[1] == 'p')
		addr = load_elf_image_phdr(addr);
	else
		addr = load_elf_image_shdr(addr);
c7e02fc8:	e1a00005 	mov	r0, r5
c7e02fcc:	ebfffee2 	bl	c7e02b5c <load_elf_image_shdr>
c7e02fd0:	e1a04000 	mov	r4, r0

	printf ("## Starting application at 0x%08lx ...\n", addr);
c7e02fd4:	e1a01004 	mov	r1, r4
c7e02fd8:	e59f003c 	ldr	r0, [pc, #60]	; c7e0301c <do_bootelf+0x154>
c7e02fdc:	eb00169d 	bl	c7e08a58 <printf>

	/*
	 * pass address parameter as argv[0] (aka command name),
	 * and all remaining args
	 */
	rc = do_bootelf_exec ((void *)addr, argc - 1, argv + 1);
c7e02fe0:	e1a00004 	mov	r0, r4
c7e02fe4:	e2491001 	sub	r1, r9, #1	; 0x1
c7e02fe8:	e28a2004 	add	r2, sl, #4	; 0x4
c7e02fec:	ebffffa4 	bl	c7e02e84 <do_bootelf_exec>
c7e02ff0:	e1a03000 	mov	r3, r0
	if (rc != 0)
		rcode = 1;

	printf ("## Application terminated, rc = 0x%lx\n", rc);
c7e02ff4:	e1a01000 	mov	r1, r0
c7e02ff8:	e59f0020 	ldr	r0, [pc, #32]	; c7e03020 <do_bootelf+0x158>

	/*
	 * pass address parameter as argv[0] (aka command name),
	 * and all remaining args
	 */
	rc = do_bootelf_exec ((void *)addr, argc - 1, argv + 1);
c7e02ffc:	e2534000 	subs	r4, r3, #0	; 0x0
c7e03000:	13a04001 	movne	r4, #1	; 0x1
	if (rc != 0)
		rcode = 1;

	printf ("## Application terminated, rc = 0x%lx\n", rc);
c7e03004:	eb001693 	bl	c7e08a58 <printf>
	return rcode;
}
c7e03008:	e1a00004 	mov	r0, r4
c7e0300c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	 */
	rc = do_bootelf_exec ((void *)addr, argc - 1, argv + 1);
	if (rc != 0)
		rcode = 1;

	printf ("## Application terminated, rc = 0x%lx\n", rc);
c7e03010:	e1a04000 	mov	r4, r0
c7e03014:	eaffffc1 	b	c7e02f20 <do_bootelf+0x58>
c7e03018:	c7e353cc 	.word	0xc7e353cc
c7e0301c:	c7e2f1ad 	.word	0xc7e2f1ad
c7e03020:	c7e2f1d5 	.word	0xc7e2f1d5

c7e03024 <do_exit>:
int do_exit(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	int r;

	r = 0;
	if (argc > 1)
c7e03024:	e3520001 	cmp	r2, #1	; 0x1

#include <common.h>
#include <command.h>

int do_exit(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03028:	e92d4010 	push	{r4, lr}
	int r;

	r = 0;
	if (argc > 1)
c7e0302c:	d3a03000 	movle	r3, #0	; 0x0
c7e03030:	da000004 	ble	c7e03048 <do_exit+0x24>
		r = simple_strtoul(argv[1], NULL, 10);
c7e03034:	e5930004 	ldr	r0, [r3, #4]
c7e03038:	e3a01000 	mov	r1, #0	; 0x0
c7e0303c:	e3a0200a 	mov	r2, #10	; 0xa
c7e03040:	eb007fc6 	bl	c7e22f60 <simple_strtoul>
c7e03044:	e1a03000 	mov	r3, r0

	return -r - 2;
}
c7e03048:	e3e00001 	mvn	r0, #1	; 0x1
c7e0304c:	e0630000 	rsb	r0, r3, r0
c7e03050:	e8bd8010 	pop	{r4, pc}

c7e03054 <do_ext2load>:

/******************************************************************************
 * Ext2fs boot command intepreter. Derived from diskboot
 */
int do_ext2load (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03054:	e92d4010 	push	{r4, lr}
	if (do_ext_load(cmdtp, flag, argc, argv))
c7e03058:	eb00003a 	bl	c7e03148 <do_ext_load>
c7e0305c:	e3500000 	cmp	r0, #0	; 0x0
		return -1;

	return 0;
}
c7e03060:	13e00000 	mvnne	r0, #0	; 0x0
c7e03064:	e8bd8010 	pop	{r4, pc}

c7e03068 <do_ext2ls>:
 */
#include <common.h>
#include <ext_common.h>

int do_ext2ls (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03068:	e92d4010 	push	{r4, lr}
	if (do_ext_ls(cmdtp, flag, argc, argv))
c7e0306c:	eb000002 	bl	c7e0307c <do_ext_ls>
c7e03070:	e3500000 	cmp	r0, #0	; 0x0
		return -1;

	return 0;
}
c7e03074:	13e00000 	mvnne	r0, #0	; 0x0
c7e03078:	e8bd8010 	pop	{r4, pc}

c7e0307c <do_ext_ls>:
fail:
	return 1;
}

int do_ext_ls(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
{
c7e0307c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int dev;
	int part;
	block_dev_desc_t *dev_desc;
	disk_partition_t info;

	if (argc < 2)
c7e03080:	e3520001 	cmp	r2, #1	; 0x1
fail:
	return 1;
}

int do_ext_ls(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
{
c7e03084:	e24dd064 	sub	sp, sp, #100	; 0x64
c7e03088:	e1a05002 	mov	r5, r2
c7e0308c:	e1a04003 	mov	r4, r3
	int dev;
	int part;
	block_dev_desc_t *dev_desc;
	disk_partition_t info;

	if (argc < 2)
c7e03090:	ca000001 	bgt	c7e0309c <do_ext_ls+0x20>
		return cmd_usage(cmdtp);
c7e03094:	eb0014e7 	bl	c7e08438 <cmd_usage>
c7e03098:	ea000025 	b	c7e03134 <do_ext_ls+0xb8>

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
c7e0309c:	e9930003 	ldmib	r3, {r0, r1}
c7e030a0:	e3a06001 	mov	r6, #1	; 0x1
c7e030a4:	e28d205c 	add	r2, sp, #92	; 0x5c
c7e030a8:	e28d300c 	add	r3, sp, #12	; 0xc
c7e030ac:	e58d6000 	str	r6, [sp]
c7e030b0:	eb003164 	bl	c7e0f648 <get_device_and_partition>
	if (part < 0)
c7e030b4:	e2507000 	subs	r7, r0, #0	; 0x0
c7e030b8:	b1a00006 	movlt	r0, r6
c7e030bc:	ba00001c 	blt	c7e03134 <do_ext_ls+0xb8>
		return 1;

	if (argc == 4)
		filename = argv[3];

	dev = dev_desc->dev;
c7e030c0:	e59d305c 	ldr	r3, [sp, #92]

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
	if (part < 0)
		return 1;

	if (argc == 4)
c7e030c4:	e3550004 	cmp	r5, #4	; 0x4
		filename = argv[3];

	dev = dev_desc->dev;
	ext4fs_set_blk_dev(dev_desc, &info);
c7e030c8:	e1a00003 	mov	r0, r3
c7e030cc:	e28d100c 	add	r1, sp, #12	; 0xc

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
	if (part < 0)
		return 1;

	if (argc == 4)
c7e030d0:	159f6064 	ldrne	r6, [pc, #100]	; c7e0313c <do_ext_ls+0xc0>
		filename = argv[3];
c7e030d4:	0594600c 	ldreq	r6, [r4, #12]

	dev = dev_desc->dev;
c7e030d8:	e5935004 	ldr	r5, [r3, #4]
	ext4fs_set_blk_dev(dev_desc, &info);
c7e030dc:	eb00701f 	bl	c7e1f160 <ext4fs_set_blk_dev>

	if (!ext4fs_mount(info.size)) {
c7e030e0:	e59d0010 	ldr	r0, [sp, #16]
c7e030e4:	eb006bbd 	bl	c7e1dfe0 <ext4fs_mount>
c7e030e8:	e3500000 	cmp	r0, #0	; 0x0
c7e030ec:	1a000005 	bne	c7e03108 <do_ext_ls+0x8c>
		printf("** Bad ext2 partition or disk - %s %d:%d **\n",
c7e030f0:	e5941004 	ldr	r1, [r4, #4]
c7e030f4:	e1a02005 	mov	r2, r5
c7e030f8:	e1a03007 	mov	r3, r7
c7e030fc:	e59f003c 	ldr	r0, [pc, #60]	; c7e03140 <do_ext_ls+0xc4>
c7e03100:	eb001654 	bl	c7e08a58 <printf>
c7e03104:	ea000005 	b	c7e03120 <do_ext_ls+0xa4>
		       argv[1], dev, part);
		ext4fs_close();
		goto fail;
	}

	if (ext4fs_ls(filename)) {
c7e03108:	e1a00006 	mov	r0, r6
c7e0310c:	eb006b4c 	bl	c7e1de44 <ext4fs_ls>
c7e03110:	e2504000 	subs	r4, r0, #0	; 0x0
c7e03114:	0a000004 	beq	c7e0312c <do_ext_ls+0xb0>
		printf("** Error extfs_ls() **\n");
c7e03118:	e59f0024 	ldr	r0, [pc, #36]	; c7e03144 <do_ext_ls+0xc8>
c7e0311c:	eb00164d 	bl	c7e08a58 <printf>
		ext4fs_close();
c7e03120:	eb006dd3 	bl	c7e1e874 <ext4fs_close>
c7e03124:	e3a00001 	mov	r0, #1	; 0x1
c7e03128:	ea000001 	b	c7e03134 <do_ext_ls+0xb8>
		goto fail;
	};

	ext4fs_close();
c7e0312c:	eb006dd0 	bl	c7e1e874 <ext4fs_close>
c7e03130:	e1a00004 	mov	r0, r4
	return 0;

fail:
	return 1;
}
c7e03134:	e28dd064 	add	sp, sp, #100	; 0x64
c7e03138:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e0313c:	c7e2f450 	.word	0xc7e2f450
c7e03140:	c7e2f452 	.word	0xc7e2f452
c7e03144:	c7e2f47f 	.word	0xc7e2f47f

c7e03148 <do_ext_load>:
#define DOS_FS_TYPE_OFFSET		0x36
#define DOS_FS32_TYPE_OFFSET		0x52

int do_ext_load(cmd_tbl_t *cmdtp, int flag, int argc,
						char *const argv[])
{
c7e03148:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	char buf[12];
	unsigned long count;
	const char *addr_str;

	count = 0;
	addr = simple_strtoul(argv[3], NULL, 16);
c7e0314c:	e3a01000 	mov	r1, #0	; 0x0
#define DOS_FS_TYPE_OFFSET		0x36
#define DOS_FS32_TYPE_OFFSET		0x52

int do_ext_load(cmd_tbl_t *cmdtp, int flag, int argc,
						char *const argv[])
{
c7e03150:	e24dd068 	sub	sp, sp, #104	; 0x68
c7e03154:	e1a04002 	mov	r4, r2
c7e03158:	e1a05000 	mov	r5, r0
	char buf[12];
	unsigned long count;
	const char *addr_str;

	count = 0;
	addr = simple_strtoul(argv[3], NULL, 16);
c7e0315c:	e3a02010 	mov	r2, #16	; 0x10
c7e03160:	e593000c 	ldr	r0, [r3, #12]
#define DOS_FS_TYPE_OFFSET		0x36
#define DOS_FS32_TYPE_OFFSET		0x52

int do_ext_load(cmd_tbl_t *cmdtp, int flag, int argc,
						char *const argv[])
{
c7e03164:	e1a06003 	mov	r6, r3
	char buf[12];
	unsigned long count;
	const char *addr_str;

	count = 0;
	addr = simple_strtoul(argv[3], NULL, 16);
c7e03168:	eb007f7c 	bl	c7e22f60 <simple_strtoul>
c7e0316c:	e1a0b000 	mov	fp, r0
	filename = getenv("bootfile");
c7e03170:	e59f01d0 	ldr	r0, [pc, #464]	; c7e03348 <do_ext_load+0x200>
c7e03174:	eb000fc8 	bl	c7e0709c <getenv>
	switch (argc) {
c7e03178:	e2444003 	sub	r4, r4, #3	; 0x3
	unsigned long count;
	const char *addr_str;

	count = 0;
	addr = simple_strtoul(argv[3], NULL, 16);
	filename = getenv("bootfile");
c7e0317c:	e1a07000 	mov	r7, r0
	switch (argc) {
c7e03180:	e3540003 	cmp	r4, #3	; 0x3
c7e03184:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
c7e03188:	ea000018 	b	c7e031f0 <do_ext_load+0xa8>
c7e0318c:	c7e0319c 	.word	0xc7e0319c
c7e03190:	c7e031c4 	.word	0xc7e031c4
c7e03194:	c7e031cc 	.word	0xc7e031cc
c7e03198:	c7e031d4 	.word	0xc7e031d4
	case 3:
		addr_str = getenv("loadaddr");
c7e0319c:	e59f01a8 	ldr	r0, [pc, #424]	; c7e0334c <do_ext_load+0x204>
c7e031a0:	eb000fbd 	bl	c7e0709c <getenv>
		if (addr_str != NULL)
c7e031a4:	e2503000 	subs	r3, r0, #0	; 0x0
		filename = argv[4];
		count = simple_strtoul(argv[5], NULL, 16);
		break;

	default:
		return cmd_usage(cmdtp);
c7e031a8:	01a05003 	moveq	r5, r3
c7e031ac:	03a0b205 	moveq	fp, #1342177280	; 0x50000000
	addr = simple_strtoul(argv[3], NULL, 16);
	filename = getenv("bootfile");
	switch (argc) {
	case 3:
		addr_str = getenv("loadaddr");
		if (addr_str != NULL)
c7e031b0:	0a000011 	beq	c7e031fc <do_ext_load+0xb4>
			addr = simple_strtoul(addr_str, NULL, 16);
c7e031b4:	e3a01000 	mov	r1, #0	; 0x0
c7e031b8:	e3a02010 	mov	r2, #16	; 0x10
c7e031bc:	eb007f67 	bl	c7e22f60 <simple_strtoul>
c7e031c0:	e1a0b000 	mov	fp, r0
c7e031c4:	e3a05000 	mov	r5, #0	; 0x0
c7e031c8:	ea00000b 	b	c7e031fc <do_ext_load+0xb4>

		break;
	case 4:
		break;
	case 5:
		filename = argv[4];
c7e031cc:	e5967010 	ldr	r7, [r6, #16]
c7e031d0:	eafffffb 	b	c7e031c4 <do_ext_load+0x7c>
		break;
	case 6:
		filename = argv[4];
		count = simple_strtoul(argv[5], NULL, 16);
c7e031d4:	e5960014 	ldr	r0, [r6, #20]
c7e031d8:	e3a01000 	mov	r1, #0	; 0x0
c7e031dc:	e3a02010 	mov	r2, #16	; 0x10
		break;
	case 5:
		filename = argv[4];
		break;
	case 6:
		filename = argv[4];
c7e031e0:	e5967010 	ldr	r7, [r6, #16]
		count = simple_strtoul(argv[5], NULL, 16);
c7e031e4:	eb007f5d 	bl	c7e22f60 <simple_strtoul>
c7e031e8:	e1a05000 	mov	r5, r0
c7e031ec:	ea000002 	b	c7e031fc <do_ext_load+0xb4>
		break;

	default:
		return cmd_usage(cmdtp);
c7e031f0:	e1a00005 	mov	r0, r5
c7e031f4:	eb00148f 	bl	c7e08438 <cmd_usage>
c7e031f8:	ea000050 	b	c7e03340 <do_ext_load+0x1f8>
	}

	if (!filename) {
c7e031fc:	e3570000 	cmp	r7, #0	; 0x0
c7e03200:	1a000002 	bne	c7e03210 <do_ext_load+0xc8>
		puts("** No boot file defined **\n");
c7e03204:	e59f0144 	ldr	r0, [pc, #324]	; c7e03350 <do_ext_load+0x208>
c7e03208:	eb0015f7 	bl	c7e089ec <puts>
c7e0320c:	ea00003a 	b	c7e032fc <do_ext_load+0x1b4>
		return 1;
	}

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
c7e03210:	e3a04001 	mov	r4, #1	; 0x1
c7e03214:	e9960003 	ldmib	r6, {r0, r1}
c7e03218:	e28d2064 	add	r2, sp, #100	; 0x64
c7e0321c:	e28d3008 	add	r3, sp, #8	; 0x8
c7e03220:	e58d4000 	str	r4, [sp]
c7e03224:	eb003107 	bl	c7e0f648 <get_device_and_partition>
	if (part < 0)
c7e03228:	e2509000 	subs	r9, r0, #0	; 0x0
c7e0322c:	b1a00004 	movlt	r0, r4
c7e03230:	ba000042 	blt	c7e03340 <do_ext_load+0x1f8>
		return 1;

	dev = dev_desc->dev;
c7e03234:	e59d3064 	ldr	r3, [sp, #100]
	printf("Loading file \"%s\" from %s device %d%c%c\n",
c7e03238:	03a0c020 	moveq	ip, #32	; 0x20

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
	if (part < 0)
		return 1;

	dev = dev_desc->dev;
c7e0323c:	e593a004 	ldr	sl, [r3, #4]
	printf("Loading file \"%s\" from %s device %d%c%c\n",
c7e03240:	e5962004 	ldr	r2, [r6, #4]
c7e03244:	1289c030 	addne	ip, r9, #48	; 0x30
c7e03248:	13a0e03a 	movne	lr, #58	; 0x3a
c7e0324c:	01a0e00c 	moveq	lr, ip
c7e03250:	e1a0300a 	mov	r3, sl
c7e03254:	e1a01007 	mov	r1, r7
c7e03258:	e59f00f4 	ldr	r0, [pc, #244]	; c7e03354 <do_ext_load+0x20c>
c7e0325c:	e58de000 	str	lr, [sp]
c7e03260:	e58dc004 	str	ip, [sp, #4]
c7e03264:	eb0015fb 	bl	c7e08a58 <printf>
		filename, argv[1], dev,
		part ? ':' : ' ', part ? part + '0' : ' ');

	ext4fs_set_blk_dev(dev_desc, &info);
c7e03268:	e59d0064 	ldr	r0, [sp, #100]
c7e0326c:	e28d1008 	add	r1, sp, #8	; 0x8
c7e03270:	eb006fba 	bl	c7e1f160 <ext4fs_set_blk_dev>

	if (!ext4fs_mount(info.size)) {
c7e03274:	e59d000c 	ldr	r0, [sp, #12]
c7e03278:	eb006b58 	bl	c7e1dfe0 <ext4fs_mount>
c7e0327c:	e3500000 	cmp	r0, #0	; 0x0
c7e03280:	1a000005 	bne	c7e0329c <do_ext_load+0x154>
		printf("** Bad ext2 partition or disk - %s %d:%d **\n",
c7e03284:	e5961004 	ldr	r1, [r6, #4]
c7e03288:	e1a0200a 	mov	r2, sl
c7e0328c:	e1a03009 	mov	r3, r9
c7e03290:	e59f00c0 	ldr	r0, [pc, #192]	; c7e03358 <do_ext_load+0x210>
c7e03294:	eb0015ef 	bl	c7e08a58 <printf>
c7e03298:	ea000016 	b	c7e032f8 <do_ext_load+0x1b0>
		       argv[1], dev, part);
		ext4fs_close();
		goto fail;
	}

	filelen = ext4fs_open(filename);
c7e0329c:	e1a00007 	mov	r0, r7
c7e032a0:	eb006f0b 	bl	c7e1eed4 <ext4fs_open>
	if (filelen < 0) {
c7e032a4:	e2504000 	subs	r4, r0, #0	; 0x0
c7e032a8:	aa000003 	bge	c7e032bc <do_ext_load+0x174>
		printf("** File not found %s\n", filename);
c7e032ac:	e1a01007 	mov	r1, r7
c7e032b0:	e59f00a4 	ldr	r0, [pc, #164]	; c7e0335c <do_ext_load+0x214>
c7e032b4:	eb0015e7 	bl	c7e08a58 <printf>
c7e032b8:	ea00000e 	b	c7e032f8 <do_ext_load+0x1b0>
		ext4fs_close();
		goto fail;
	}
	if ((count < filelen) && (count != 0))
		filelen = count;
c7e032bc:	e3550000 	cmp	r5, #0	; 0x0
c7e032c0:	11550004 	cmpne	r5, r4
c7e032c4:	31a04005 	movcc	r4, r5

	if (ext4fs_read((char *)addr, filelen) != filelen) {
c7e032c8:	e1a0000b 	mov	r0, fp
c7e032cc:	e1a01004 	mov	r1, r4
c7e032d0:	eb006ac2 	bl	c7e1dde0 <ext4fs_read>
c7e032d4:	e1500004 	cmp	r0, r4
c7e032d8:	e1a05000 	mov	r5, r0
c7e032dc:	0a000008 	beq	c7e03304 <do_ext_load+0x1bc>
		printf("** Unable to read \"%s\" from %s %d:%d **\n",
c7e032e0:	e5962004 	ldr	r2, [r6, #4]
c7e032e4:	e1a01007 	mov	r1, r7
c7e032e8:	e1a0300a 	mov	r3, sl
c7e032ec:	e59f006c 	ldr	r0, [pc, #108]	; c7e03360 <do_ext_load+0x218>
c7e032f0:	e58d9000 	str	r9, [sp]
c7e032f4:	eb0015d7 	bl	c7e08a58 <printf>
		       filename, argv[1], dev, part);
		ext4fs_close();
c7e032f8:	eb006d5d 	bl	c7e1e874 <ext4fs_close>
c7e032fc:	e3a00001 	mov	r0, #1	; 0x1
c7e03300:	ea00000e 	b	c7e03340 <do_ext_load+0x1f8>
		goto fail;
	}

	ext4fs_close();
c7e03304:	eb006d5a 	bl	c7e1e874 <ext4fs_close>
	/* Loading ok, update default load address */
	load_addr = addr;
c7e03308:	e59f3054 	ldr	r3, [pc, #84]	; c7e03364 <do_ext_load+0x21c>

	printf("%d bytes read\n", filelen);
c7e0330c:	e1a01005 	mov	r1, r5
		goto fail;
	}

	ext4fs_close();
	/* Loading ok, update default load address */
	load_addr = addr;
c7e03310:	e583b000 	str	fp, [r3]

	printf("%d bytes read\n", filelen);
	sprintf(buf, "%X", filelen);
c7e03314:	e28d4058 	add	r4, sp, #88	; 0x58

	ext4fs_close();
	/* Loading ok, update default load address */
	load_addr = addr;

	printf("%d bytes read\n", filelen);
c7e03318:	e59f0048 	ldr	r0, [pc, #72]	; c7e03368 <do_ext_load+0x220>
c7e0331c:	eb0015cd 	bl	c7e08a58 <printf>
	sprintf(buf, "%X", filelen);
c7e03320:	e1a02005 	mov	r2, r5
c7e03324:	e59f1040 	ldr	r1, [pc, #64]	; c7e0336c <do_ext_load+0x224>
c7e03328:	e1a00004 	mov	r0, r4
c7e0332c:	eb0082bf 	bl	c7e23e30 <sprintf>
	setenv("filesize", buf);
c7e03330:	e1a01004 	mov	r1, r4
c7e03334:	e59f0034 	ldr	r0, [pc, #52]	; c7e03370 <do_ext_load+0x228>
c7e03338:	eb0010c4 	bl	c7e07650 <setenv>
c7e0333c:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
fail:
	return 1;
}
c7e03340:	e28dd068 	add	sp, sp, #104	; 0x68
c7e03344:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e03348:	c7e2f0e9 	.word	0xc7e2f0e9
c7e0334c:	c7e2de92 	.word	0xc7e2de92
c7e03350:	c7e2f497 	.word	0xc7e2f497
c7e03354:	c7e2f4b3 	.word	0xc7e2f4b3
c7e03358:	c7e2f452 	.word	0xc7e2f452
c7e0335c:	c7e2f4dc 	.word	0xc7e2f4dc
c7e03360:	c7e2f643 	.word	0xc7e2f643
c7e03364:	c7e353cc 	.word	0xc7e353cc
c7e03368:	c7e2f4f2 	.word	0xc7e2f4f2
c7e0336c:	c7e2f501 	.word	0xc7e2f501
c7e03370:	c7e2e9fc 	.word	0xc7e2e9fc

c7e03374 <do_fat_fsinfo>:
	"<interface> [<dev[:part]>] [directory]\n"
	"    - list files from 'dev' on 'interface' in a 'directory'"
);

int do_fat_fsinfo (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03374:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int dev, part;
	block_dev_desc_t *dev_desc;
	disk_partition_t info;

	if (argc < 2) {
c7e03378:	e3520001 	cmp	r2, #1	; 0x1
	"<interface> [<dev[:part]>] [directory]\n"
	"    - list files from 'dev' on 'interface' in a 'directory'"
);

int do_fat_fsinfo (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e0337c:	e24dd064 	sub	sp, sp, #100	; 0x64
c7e03380:	e1a04003 	mov	r4, r3
	int dev, part;
	block_dev_desc_t *dev_desc;
	disk_partition_t info;

	if (argc < 2) {
c7e03384:	ca000003 	bgt	c7e03398 <do_fat_fsinfo+0x24>
		printf("usage: fatinfo <interface> [<dev[:part]>]\n");
c7e03388:	e59f006c 	ldr	r0, [pc, #108]	; c7e033fc <do_fat_fsinfo+0x88>
c7e0338c:	eb0015b1 	bl	c7e08a58 <printf>
c7e03390:	e3a00000 	mov	r0, #0	; 0x0
c7e03394:	ea000016 	b	c7e033f4 <do_fat_fsinfo+0x80>
		return 0;
	}

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
c7e03398:	e9930003 	ldmib	r3, {r0, r1}
c7e0339c:	e3a07001 	mov	r7, #1	; 0x1
c7e033a0:	e28d205c 	add	r2, sp, #92	; 0x5c
c7e033a4:	e28d300c 	add	r3, sp, #12	; 0xc
c7e033a8:	e58d7000 	str	r7, [sp]
c7e033ac:	eb0030a5 	bl	c7e0f648 <get_device_and_partition>
	if (part < 0)
c7e033b0:	e2506000 	subs	r6, r0, #0	; 0x0
c7e033b4:	ba00000b 	blt	c7e033e8 <do_fat_fsinfo+0x74>
		return 1;

	dev = dev_desc->dev;
c7e033b8:	e59d305c 	ldr	r3, [sp, #92]
	if (fat_register_device(dev_desc,part)!=0) {
c7e033bc:	e1a01006 	mov	r1, r6
c7e033c0:	e1a00003 	mov	r0, r3

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
	if (part < 0)
		return 1;

	dev = dev_desc->dev;
c7e033c4:	e5935004 	ldr	r5, [r3, #4]
	if (fat_register_device(dev_desc,part)!=0) {
c7e033c8:	eb0074c0 	bl	c7e206d0 <fat_register_device>
c7e033cc:	e3500000 	cmp	r0, #0	; 0x0
c7e033d0:	0a000006 	beq	c7e033f0 <do_fat_fsinfo+0x7c>
		printf("\n** Unable to use %s %d:%d for fatinfo **\n",
c7e033d4:	e5941004 	ldr	r1, [r4, #4]
c7e033d8:	e1a02005 	mov	r2, r5
c7e033dc:	e1a03006 	mov	r3, r6
c7e033e0:	e59f0018 	ldr	r0, [pc, #24]	; c7e03400 <do_fat_fsinfo+0x8c>
c7e033e4:	eb00159b 	bl	c7e08a58 <printf>
c7e033e8:	e1a00007 	mov	r0, r7
c7e033ec:	ea000000 	b	c7e033f4 <do_fat_fsinfo+0x80>
			argv[1], dev, part);
		return 1;
	}
	return file_fat_detectfs();
c7e033f0:	eb0070b2 	bl	c7e1f6c0 <file_fat_detectfs>
}
c7e033f4:	e28dd064 	add	sp, sp, #100	; 0x64
c7e033f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e033fc:	c7e2f504 	.word	0xc7e2f504
c7e03400:	c7e2f52f 	.word	0xc7e2f52f

c7e03404 <do_fat_ls>:
	"      'bytes' gives the size to load. If 'bytes' is 0 or omitted,\n"
	"      the load stops on end of file."
);

int do_fat_ls (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03404:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	char *filename = "/";
	int ret, dev, part;
	block_dev_desc_t *dev_desc=NULL;
	disk_partition_t info;

	if (argc < 2) {
c7e03408:	e3520001 	cmp	r2, #1	; 0x1
	"      'bytes' gives the size to load. If 'bytes' is 0 or omitted,\n"
	"      the load stops on end of file."
);

int do_fat_ls (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e0340c:	e24dd060 	sub	sp, sp, #96	; 0x60
c7e03410:	e1a0a002 	mov	sl, r2
	char *filename = "/";
	int ret, dev, part;
	block_dev_desc_t *dev_desc=NULL;
c7e03414:	e3a02000 	mov	r2, #0	; 0x0
	"      'bytes' gives the size to load. If 'bytes' is 0 or omitted,\n"
	"      the load stops on end of file."
);

int do_fat_ls (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03418:	e1a04003 	mov	r4, r3
	char *filename = "/";
	int ret, dev, part;
	block_dev_desc_t *dev_desc=NULL;
c7e0341c:	e58d205c 	str	r2, [sp, #92]
	disk_partition_t info;

	if (argc < 2) {
		printf("usage: fatls <interface> [<dev[:part]>] [directory]\n");
c7e03420:	d59f008c 	ldrle	r0, [pc, #140]	; c7e034b4 <do_fat_ls+0xb0>
c7e03424:	d1a04002 	movle	r4, r2
	char *filename = "/";
	int ret, dev, part;
	block_dev_desc_t *dev_desc=NULL;
	disk_partition_t info;

	if (argc < 2) {
c7e03428:	da00001d 	ble	c7e034a4 <do_fat_ls+0xa0>
		printf("usage: fatls <interface> [<dev[:part]>] [directory]\n");
		return 0;
	}

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
c7e0342c:	e9940003 	ldmib	r4, {r0, r1}
c7e03430:	e3a07001 	mov	r7, #1	; 0x1
c7e03434:	e28d205c 	add	r2, sp, #92	; 0x5c
c7e03438:	e28d300c 	add	r3, sp, #12	; 0xc
c7e0343c:	e58d7000 	str	r7, [sp]
c7e03440:	eb003080 	bl	c7e0f648 <get_device_and_partition>
	if (part < 0)
c7e03444:	e2506000 	subs	r6, r0, #0	; 0x0
c7e03448:	ba00000b 	blt	c7e0347c <do_fat_ls+0x78>
		return 1;

	dev = dev_desc->dev;
c7e0344c:	e59d305c 	ldr	r3, [sp, #92]
	if (fat_register_device(dev_desc,part)!=0) {
c7e03450:	e1a01006 	mov	r1, r6
c7e03454:	e1a00003 	mov	r0, r3

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
	if (part < 0)
		return 1;

	dev = dev_desc->dev;
c7e03458:	e5935004 	ldr	r5, [r3, #4]
	if (fat_register_device(dev_desc,part)!=0) {
c7e0345c:	eb00749b 	bl	c7e206d0 <fat_register_device>
c7e03460:	e3500000 	cmp	r0, #0	; 0x0
c7e03464:	0a000006 	beq	c7e03484 <do_fat_ls+0x80>
		printf("\n** Unable to use %s %d:%d for fatls **\n",
c7e03468:	e5941004 	ldr	r1, [r4, #4]
c7e0346c:	e1a02005 	mov	r2, r5
c7e03470:	e1a03006 	mov	r3, r6
c7e03474:	e59f003c 	ldr	r0, [pc, #60]	; c7e034b8 <do_fat_ls+0xb4>
c7e03478:	eb001576 	bl	c7e08a58 <printf>
c7e0347c:	e1a04007 	mov	r4, r7
c7e03480:	ea000008 	b	c7e034a8 <do_fat_ls+0xa4>
			argv[1], dev, part);
		return 1;
	}
	if (argc == 4)
c7e03484:	e35a0004 	cmp	sl, #4	; 0x4
		ret = file_fat_ls(argv[3]);
c7e03488:	0594000c 	ldreq	r0, [r4, #12]
	else
		ret = file_fat_ls(filename);
c7e0348c:	159f0028 	ldrne	r0, [pc, #40]	; c7e034bc <do_fat_ls+0xb8>
c7e03490:	eb00748a 	bl	c7e206c0 <file_fat_ls>

	if(ret!=0)
c7e03494:	e3500000 	cmp	r0, #0	; 0x0
		return 1;
	}
	if (argc == 4)
		ret = file_fat_ls(argv[3]);
	else
		ret = file_fat_ls(filename);
c7e03498:	e1a04000 	mov	r4, r0

	if(ret!=0)
c7e0349c:	0a000001 	beq	c7e034a8 <do_fat_ls+0xa4>
		printf("No Fat FS detected\n");
c7e034a0:	e59f0018 	ldr	r0, [pc, #24]	; c7e034c0 <do_fat_ls+0xbc>
c7e034a4:	eb00156b 	bl	c7e08a58 <printf>
	return ret;
}
c7e034a8:	e1a00004 	mov	r0, r4
c7e034ac:	e28dd060 	add	sp, sp, #96	; 0x60
c7e034b0:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e034b4:	c7e2f55a 	.word	0xc7e2f55a
c7e034b8:	c7e2f58f 	.word	0xc7e2f58f
c7e034bc:	c7e2f450 	.word	0xc7e2f450
c7e034c0:	c7e2f5b8 	.word	0xc7e2f5b8

c7e034c4 <do_fat_fsload>:
#include <part.h>
#include <fat.h>


int do_fat_fsload (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e034c4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	char buf [12];
	block_dev_desc_t *dev_desc=NULL;
	disk_partition_t info;
	int part, dev;

	if (argc < 5) {
c7e034c8:	e3520004 	cmp	r2, #4	; 0x4
#include <part.h>
#include <fat.h>


int do_fat_fsload (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e034cc:	e24dd068 	sub	sp, sp, #104	; 0x68
c7e034d0:	e1a05002 	mov	r5, r2
	long size;
	unsigned long offset;
	unsigned long count = 0;
	unsigned long pos = 0;
	char buf [12];
	block_dev_desc_t *dev_desc=NULL;
c7e034d4:	e3a02000 	mov	r2, #0	; 0x0
c7e034d8:	e58d2064 	str	r2, [sp, #100]
#include <part.h>
#include <fat.h>


int do_fat_fsload (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e034dc:	e1a06003 	mov	r6, r3
	char buf [12];
	block_dev_desc_t *dev_desc=NULL;
	disk_partition_t info;
	int part, dev;

	if (argc < 5) {
c7e034e0:	ca000002 	bgt	c7e034f0 <do_fat_fsload+0x2c>
		printf("usage: fatload <interface> [<dev[:part]>] "
c7e034e4:	e59f0128 	ldr	r0, [pc, #296]	; c7e03614 <do_fat_fsload+0x150>
c7e034e8:	eb00155a 	bl	c7e08a58 <printf>
c7e034ec:	ea000038 	b	c7e035d4 <do_fat_fsload+0x110>
			"<addr> <filename> [bytes [pos]]\n");
		return 1;
	}

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
c7e034f0:	e9930003 	ldmib	r3, {r0, r1}
c7e034f4:	e3a07001 	mov	r7, #1	; 0x1
c7e034f8:	e28d2064 	add	r2, sp, #100	; 0x64
c7e034fc:	e28d3008 	add	r3, sp, #8	; 0x8
c7e03500:	e58d7000 	str	r7, [sp]
c7e03504:	eb00304f 	bl	c7e0f648 <get_device_and_partition>
	if (part < 0)
c7e03508:	e250a000 	subs	sl, r0, #0	; 0x0
c7e0350c:	ba00000b 	blt	c7e03540 <do_fat_fsload+0x7c>
		return 1;

	dev = dev_desc->dev;
c7e03510:	e59d3064 	ldr	r3, [sp, #100]
	if (fat_register_device(dev_desc,part)!=0) {
c7e03514:	e1a0100a 	mov	r1, sl
c7e03518:	e1a00003 	mov	r0, r3

	part = get_device_and_partition(argv[1], argv[2], &dev_desc, &info, 1);
	if (part < 0)
		return 1;

	dev = dev_desc->dev;
c7e0351c:	e593b004 	ldr	fp, [r3, #4]
	if (fat_register_device(dev_desc,part)!=0) {
c7e03520:	eb00746a 	bl	c7e206d0 <fat_register_device>
c7e03524:	e2504000 	subs	r4, r0, #0	; 0x0
c7e03528:	0a000006 	beq	c7e03548 <do_fat_fsload+0x84>
		printf("\n** Unable to use %s %d:%d for fatload **\n",
c7e0352c:	e5961004 	ldr	r1, [r6, #4]
c7e03530:	e1a0200b 	mov	r2, fp
c7e03534:	e1a0300a 	mov	r3, sl
c7e03538:	e59f00d8 	ldr	r0, [pc, #216]	; c7e03618 <do_fat_fsload+0x154>
c7e0353c:	eb001545 	bl	c7e08a58 <printf>
c7e03540:	e1a00007 	mov	r0, r7
c7e03544:	ea000030 	b	c7e0360c <do_fat_fsload+0x148>
			argv[1], dev, part);
		return 1;
	}
	offset = simple_strtoul(argv[3], NULL, 16);
c7e03548:	e596000c 	ldr	r0, [r6, #12]
c7e0354c:	e1a01004 	mov	r1, r4
c7e03550:	e3a02010 	mov	r2, #16	; 0x10
c7e03554:	eb007e81 	bl	c7e22f60 <simple_strtoul>
	if (argc >= 6)
c7e03558:	e3550005 	cmp	r5, #5	; 0x5
	if (fat_register_device(dev_desc,part)!=0) {
		printf("\n** Unable to use %s %d:%d for fatload **\n",
			argv[1], dev, part);
		return 1;
	}
	offset = simple_strtoul(argv[3], NULL, 16);
c7e0355c:	e1a09000 	mov	r9, r0
	if (argc >= 6)
c7e03560:	01a00004 	moveq	r0, r4
c7e03564:	01a07000 	moveq	r7, r0
c7e03568:	0a00000b 	beq	c7e0359c <do_fat_fsload+0xd8>
		count = simple_strtoul(argv[5], NULL, 16);
c7e0356c:	e5960014 	ldr	r0, [r6, #20]
c7e03570:	e1a01004 	mov	r1, r4
c7e03574:	e3a02010 	mov	r2, #16	; 0x10
c7e03578:	eb007e78 	bl	c7e22f60 <simple_strtoul>
	if (argc >= 7)
c7e0357c:	e3550006 	cmp	r5, #6	; 0x6
			argv[1], dev, part);
		return 1;
	}
	offset = simple_strtoul(argv[3], NULL, 16);
	if (argc >= 6)
		count = simple_strtoul(argv[5], NULL, 16);
c7e03580:	e1a07000 	mov	r7, r0
	if (argc >= 7)
c7e03584:	01a00004 	moveq	r0, r4
c7e03588:	0a000003 	beq	c7e0359c <do_fat_fsload+0xd8>
		pos = simple_strtoul(argv[6], NULL, 16);
c7e0358c:	e1a01004 	mov	r1, r4
c7e03590:	e5960018 	ldr	r0, [r6, #24]
c7e03594:	e3a02010 	mov	r2, #16	; 0x10
c7e03598:	eb007e70 	bl	c7e22f60 <simple_strtoul>
	size = file_fat_read_at(argv[4], pos, (unsigned char *)offset, count);
c7e0359c:	e1a01000 	mov	r1, r0
c7e035a0:	e1a02009 	mov	r2, r9
c7e035a4:	e1a03007 	mov	r3, r7
c7e035a8:	e5960010 	ldr	r0, [r6, #16]
c7e035ac:	eb007426 	bl	c7e2064c <file_fat_read_at>

	if(size==-1) {
c7e035b0:	e3700001 	cmn	r0, #1	; 0x1
	offset = simple_strtoul(argv[3], NULL, 16);
	if (argc >= 6)
		count = simple_strtoul(argv[5], NULL, 16);
	if (argc >= 7)
		pos = simple_strtoul(argv[6], NULL, 16);
	size = file_fat_read_at(argv[4], pos, (unsigned char *)offset, count);
c7e035b4:	e1a05000 	mov	r5, r0

	if(size==-1) {
c7e035b8:	1a000007 	bne	c7e035dc <do_fat_fsload+0x118>
		printf("\n** Unable to read \"%s\" from %s %d:%d **\n",
c7e035bc:	e5962004 	ldr	r2, [r6, #4]
c7e035c0:	e5961010 	ldr	r1, [r6, #16]
c7e035c4:	e1a0300b 	mov	r3, fp
c7e035c8:	e59f004c 	ldr	r0, [pc, #76]	; c7e0361c <do_fat_fsload+0x158>
c7e035cc:	e58da000 	str	sl, [sp]
c7e035d0:	eb001520 	bl	c7e08a58 <printf>
c7e035d4:	e3a00001 	mov	r0, #1	; 0x1
c7e035d8:	ea00000b 	b	c7e0360c <do_fat_fsload+0x148>
			argv[4], argv[1], dev, part);
		return 1;
	}

	printf("\n%ld bytes read\n", size);
c7e035dc:	e1a01000 	mov	r1, r0

	sprintf(buf, "%lX", size);
c7e035e0:	e28d4058 	add	r4, sp, #88	; 0x58
		printf("\n** Unable to read \"%s\" from %s %d:%d **\n",
			argv[4], argv[1], dev, part);
		return 1;
	}

	printf("\n%ld bytes read\n", size);
c7e035e4:	e59f0034 	ldr	r0, [pc, #52]	; c7e03620 <do_fat_fsload+0x15c>
c7e035e8:	eb00151a 	bl	c7e08a58 <printf>

	sprintf(buf, "%lX", size);
c7e035ec:	e1a02005 	mov	r2, r5
c7e035f0:	e59f102c 	ldr	r1, [pc, #44]	; c7e03624 <do_fat_fsload+0x160>
c7e035f4:	e1a00004 	mov	r0, r4
c7e035f8:	eb00820c 	bl	c7e23e30 <sprintf>
	setenv("filesize", buf);
c7e035fc:	e1a01004 	mov	r1, r4
c7e03600:	e59f0020 	ldr	r0, [pc, #32]	; c7e03628 <do_fat_fsload+0x164>
c7e03604:	eb001011 	bl	c7e07650 <setenv>
c7e03608:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e0360c:	e28dd068 	add	sp, sp, #104	; 0x68
c7e03610:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e03614:	c7e2f5cc 	.word	0xc7e2f5cc
c7e03618:	c7e2f617 	.word	0xc7e2f617
c7e0361c:	c7e2f642 	.word	0xc7e2f642
c7e03620:	c7e2f66c 	.word	0xc7e2f66c
c7e03624:	c7e2e9f8 	.word	0xc7e2e9f8
c7e03628:	c7e2e9fc 	.word	0xc7e2e9fc

c7e0362c <do_gpio>:
		gpio_status();
		return 0;
	}
#endif

	if (argc != 3)
c7e0362c:	e3520003 	cmp	r2, #3	; 0x3
	GPIO_CLEAR,
	GPIO_TOGGLE,
};

static int do_gpio(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03630:	e92d4070 	push	{r4, r5, r6, lr}
c7e03634:	e1a00003 	mov	r0, r3
		gpio_status();
		return 0;
	}
#endif

	if (argc != 3)
c7e03638:	1a000044 	bne	c7e03750 <do_gpio+0x124>
		return CMD_RET_USAGE;
	str_cmd = argv[1];
	str_gpio = argv[2];

	/* parse the behavior */
	switch (*str_cmd) {
c7e0363c:	e5933004 	ldr	r3, [r3, #4]

	if (argc != 3)
 show_usage:
		return CMD_RET_USAGE;
	str_cmd = argv[1];
	str_gpio = argv[2];
c7e03640:	e5906008 	ldr	r6, [r0, #8]

	/* parse the behavior */
	switch (*str_cmd) {
c7e03644:	e5d33000 	ldrb	r3, [r3]
c7e03648:	e3530069 	cmp	r3, #105	; 0x69
c7e0364c:	0a00000a 	beq	c7e0367c <do_gpio+0x50>
c7e03650:	8a000002 	bhi	c7e03660 <do_gpio+0x34>
c7e03654:	e3530063 	cmp	r3, #99	; 0x63
c7e03658:	1a00003c 	bne	c7e03750 <do_gpio+0x124>
c7e0365c:	ea000008 	b	c7e03684 <do_gpio+0x58>
c7e03660:	e3530073 	cmp	r3, #115	; 0x73
c7e03664:	0a000002 	beq	c7e03674 <do_gpio+0x48>
c7e03668:	e3530074 	cmp	r3, #116	; 0x74
c7e0366c:	1a000037 	bne	c7e03750 <do_gpio+0x124>
c7e03670:	ea000005 	b	c7e0368c <do_gpio+0x60>
c7e03674:	e3a04001 	mov	r4, #1	; 0x1
c7e03678:	ea000004 	b	c7e03690 <do_gpio+0x64>
c7e0367c:	e3a04000 	mov	r4, #0	; 0x0
c7e03680:	ea000002 	b	c7e03690 <do_gpio+0x64>
c7e03684:	e3a04002 	mov	r4, #2	; 0x2
c7e03688:	ea000000 	b	c7e03690 <do_gpio+0x64>
		case 'i': sub_cmd = GPIO_INPUT;  break;
		case 's': sub_cmd = GPIO_SET;    break;
		case 'c': sub_cmd = GPIO_CLEAR;  break;
c7e0368c:	e1a04002 	mov	r4, r2
		case 't': sub_cmd = GPIO_TOGGLE; break;
		default:  goto show_usage;
	}

	/* turn the gpio name into a gpio number */
	gpio = name_to_gpio(str_gpio);
c7e03690:	e1a00006 	mov	r0, r6
c7e03694:	e3a01000 	mov	r1, #0	; 0x0
c7e03698:	e3a0200a 	mov	r2, #10	; 0xa
c7e0369c:	eb007e2f 	bl	c7e22f60 <simple_strtoul>
	if (gpio < 0)
c7e036a0:	e2505000 	subs	r5, r0, #0	; 0x0
c7e036a4:	ba000029 	blt	c7e03750 <do_gpio+0x124>
		goto show_usage;

	/* grab the pin before we tweak it */
	if (gpio_request(gpio, "cmd_gpio")) {
c7e036a8:	e59f10a8 	ldr	r1, [pc, #168]	; c7e03758 <do_gpio+0x12c>
c7e036ac:	eb00330f 	bl	c7e102f0 <gpio_request>
c7e036b0:	e3500000 	cmp	r0, #0	; 0x0
c7e036b4:	0a000004 	beq	c7e036cc <do_gpio+0xa0>
		printf("gpio: requesting pin %u failed\n", gpio);
c7e036b8:	e1a01005 	mov	r1, r5
c7e036bc:	e59f0098 	ldr	r0, [pc, #152]	; c7e0375c <do_gpio+0x130>
c7e036c0:	eb0014e4 	bl	c7e08a58 <printf>
c7e036c4:	e3e00000 	mvn	r0, #0	; 0x0
c7e036c8:	e8bd8070 	pop	{r4, r5, r6, pc}
		return -1;
	}

	/* finally, let's do it: set direction and exec command */
	if (sub_cmd == GPIO_INPUT) {
c7e036cc:	e3540000 	cmp	r4, #0	; 0x0
c7e036d0:	1a000005 	bne	c7e036ec <do_gpio+0xc0>
		gpio_direction_input(gpio);
c7e036d4:	e1a00005 	mov	r0, r5
c7e036d8:	eb003334 	bl	c7e103b0 <gpio_direction_input>
		value = gpio_get_value(gpio);
c7e036dc:	e1a00005 	mov	r0, r5
c7e036e0:	eb0032ea 	bl	c7e10290 <gpio_get_value>
c7e036e4:	e1a04000 	mov	r4, r0
c7e036e8:	ea00000f 	b	c7e0372c <do_gpio+0x100>
	} else {
		switch (sub_cmd) {
c7e036ec:	e3540002 	cmp	r4, #2	; 0x2
c7e036f0:	0a000004 	beq	c7e03708 <do_gpio+0xdc>
c7e036f4:	e3540003 	cmp	r4, #3	; 0x3
c7e036f8:	0a000004 	beq	c7e03710 <do_gpio+0xe4>
c7e036fc:	e3540001 	cmp	r4, #1	; 0x1
c7e03700:	1a000012 	bne	c7e03750 <do_gpio+0x124>
c7e03704:	ea000005 	b	c7e03720 <do_gpio+0xf4>
c7e03708:	e1a04000 	mov	r4, r0
c7e0370c:	ea000003 	b	c7e03720 <do_gpio+0xf4>
			case GPIO_SET:    value = 1; break;
			case GPIO_CLEAR:  value = 0; break;
			case GPIO_TOGGLE: value = !gpio_get_value(gpio); break;
c7e03710:	e1a00005 	mov	r0, r5
c7e03714:	eb0032dd 	bl	c7e10290 <gpio_get_value>
c7e03718:	e2704001 	rsbs	r4, r0, #1	; 0x1
c7e0371c:	33a04000 	movcc	r4, #0	; 0x0
			default:          goto show_usage;
		}
		gpio_direction_output(gpio, value);
c7e03720:	e1a00005 	mov	r0, r5
c7e03724:	e1a01004 	mov	r1, r4
c7e03728:	eb003322 	bl	c7e103b8 <gpio_direction_output>
	}
	printf("gpio: pin %s (gpio %i) value is %lu\n",
c7e0372c:	e1a01006 	mov	r1, r6
c7e03730:	e1a02005 	mov	r2, r5
c7e03734:	e1a03004 	mov	r3, r4
c7e03738:	e59f0020 	ldr	r0, [pc, #32]	; c7e03760 <do_gpio+0x134>
c7e0373c:	eb0014c5 	bl	c7e08a58 <printf>
		str_gpio, gpio, value);

	gpio_free(gpio);
c7e03740:	e1a00005 	mov	r0, r5
c7e03744:	eb0032eb 	bl	c7e102f8 <gpio_free>

	return value;
c7e03748:	e1a00004 	mov	r0, r4
c7e0374c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e03750:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e03754:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e03758:	c7e2f923 	.word	0xc7e2f923
c7e0375c:	c7e2f92c 	.word	0xc7e2f92c
c7e03760:	c7e2f94c 	.word	0xc7e2f94c

c7e03764 <do_help>:

#include <common.h>
#include <command.h>

int do_help(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e03764:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
	return _do_help(&__u_boot_cmd_start,
c7e03768:	e59fc034 	ldr	ip, [pc, #52]	; c7e037a4 <do_help+0x40>
c7e0376c:	e59fe034 	ldr	lr, [pc, #52]	; c7e037a8 <do_help+0x44>
c7e03770:	e58d3004 	str	r3, [sp, #4]
c7e03774:	e06ec00c 	rsb	ip, lr, ip
c7e03778:	e59f302c 	ldr	r3, [pc, #44]	; c7e037ac <do_help+0x48>

#include <common.h>
#include <command.h>

int do_help(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e0377c:	e1a04000 	mov	r4, r0
c7e03780:	e1a05001 	mov	r5, r1
	return _do_help(&__u_boot_cmd_start,
c7e03784:	e1a0c1cc 	asr	ip, ip, #3
c7e03788:	e58d2000 	str	r2, [sp]
c7e0378c:	e0010c93 	mul	r1, r3, ip
c7e03790:	e1a0000e 	mov	r0, lr
c7e03794:	e1a02004 	mov	r2, r4
c7e03798:	e1a03005 	mov	r3, r5
c7e0379c:	eb00139a 	bl	c7e0860c <_do_help>
			&__u_boot_cmd_end - &__u_boot_cmd_start,
			cmdtp, flag, argc, argv);
}
c7e037a0:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
	...
c7e037ac:	aaaaaaab 	.word	0xaaaaaaab

c7e037b0 <evalstr>:
}

static char * evalstr(char *s)
{
	/* if the parameter starts with a * then assume a string pointer else its a literal */
	if (s[0] == '*') {
c7e037b0:	e5d03000 	ldrb	r3, [r0]
c7e037b4:	e353002a 	cmp	r3, #42	; 0x2a
c7e037b8:	112fff1e 	bxne	lr
		return (char *)simple_strtoul(&s[1], NULL, 16);
c7e037bc:	e2800001 	add	r0, r0, #1	; 0x1
c7e037c0:	e3a01000 	mov	r1, #0	; 0x0
c7e037c4:	e3a02010 	mov	r2, #16	; 0x10
c7e037c8:	ea007de4 	b	c7e22f60 <simple_strtoul>

c7e037cc <evalexp>:
	{ "-le", LE },
	{ "<=" , LE },
};

static long evalexp(char *s, int w)
{
c7e037cc:	e92d4010 	push	{r4, lr}
	long l = 0;
	long *p;

	/* if the parameter starts with a * then assume is a pointer to the value we want */
	if (s[0] == '*') {
c7e037d0:	e5d03000 	ldrb	r3, [r0]
	{ "-le", LE },
	{ "<=" , LE },
};

static long evalexp(char *s, int w)
{
c7e037d4:	e1a04001 	mov	r4, r1
	long l = 0;
	long *p;

	/* if the parameter starts with a * then assume is a pointer to the value we want */
	if (s[0] == '*') {
c7e037d8:	e353002a 	cmp	r3, #42	; 0x2a
c7e037dc:	1a00000e 	bne	c7e0381c <evalexp+0x50>
		p = (long *)simple_strtoul(&s[1], NULL, 16);
c7e037e0:	e2800001 	add	r0, r0, #1	; 0x1
c7e037e4:	e3a01000 	mov	r1, #0	; 0x0
c7e037e8:	e3a02010 	mov	r2, #16	; 0x10
c7e037ec:	eb007ddb 	bl	c7e22f60 <simple_strtoul>
		switch (w) {
c7e037f0:	e3540002 	cmp	r4, #2	; 0x2
		case 1: return((long)(*(unsigned char *)p));
		case 2: return((long)(*(unsigned short *)p));
c7e037f4:	01d000b0 	ldrheq	r0, [r0]
	long *p;

	/* if the parameter starts with a * then assume is a pointer to the value we want */
	if (s[0] == '*') {
		p = (long *)simple_strtoul(&s[1], NULL, 16);
		switch (w) {
c7e037f8:	08bd8010 	popeq	{r4, pc}
c7e037fc:	e3540004 	cmp	r4, #4	; 0x4
		case 1: return((long)(*(unsigned char *)p));
		case 2: return((long)(*(unsigned short *)p));
		case 4: return(*p);
c7e03800:	05900000 	ldreq	r0, [r0]
	long *p;

	/* if the parameter starts with a * then assume is a pointer to the value we want */
	if (s[0] == '*') {
		p = (long *)simple_strtoul(&s[1], NULL, 16);
		switch (w) {
c7e03804:	08bd8010 	popeq	{r4, pc}
c7e03808:	e3540001 	cmp	r4, #1	; 0x1
c7e0380c:	13a00000 	movne	r0, #0	; 0x0
		case 1: return((long)(*(unsigned char *)p));
c7e03810:	05d00000 	ldrbeq	r0, [r0]
	long *p;

	/* if the parameter starts with a * then assume is a pointer to the value we want */
	if (s[0] == '*') {
		p = (long *)simple_strtoul(&s[1], NULL, 16);
		switch (w) {
c7e03814:	1a000003 	bne	c7e03828 <evalexp+0x5c>
c7e03818:	e8bd8010 	pop	{r4, pc}
		case 1: return((long)(*(unsigned char *)p));
		case 2: return((long)(*(unsigned short *)p));
		case 4: return(*p);
		}
	} else {
		l = simple_strtoul(s, NULL, 16);
c7e0381c:	e3a01000 	mov	r1, #0	; 0x0
c7e03820:	e3a02010 	mov	r2, #16	; 0x10
c7e03824:	eb007dcd 	bl	c7e22f60 <simple_strtoul>
	}

	return (l & ((1 << (w * 8)) - 1));
c7e03828:	e1a02184 	lsl	r2, r4, #3
c7e0382c:	e3e03000 	mvn	r3, #0	; 0x0
c7e03830:	e1c00213 	bic	r0, r0, r3, lsl r2
}
c7e03834:	e8bd8010 	pop	{r4, pc}

c7e03838 <binary_test>:
	}
	return (0);
}

int binary_test (char *op, char *arg1, char *arg2, int w)
{
c7e03838:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0383c:	e1a09001 	mov	r9, r1
c7e03840:	e1a0b002 	mov	fp, r2
c7e03844:	e1a06003 	mov	r6, r3
c7e03848:	e1a0a000 	mov	sl, r0
	int len, i;
	const op_tbl_t *optp;

	len = strlen(op);
c7e0384c:	eb007c39 	bl	c7e22938 <strlen>

	for (optp = (op_tbl_t *)&op_table, i = 0;
c7e03850:	e59f4194 	ldr	r4, [pc, #404]	; c7e039ec <binary_test+0x1b4>
int binary_test (char *op, char *arg1, char *arg2, int w)
{
	int len, i;
	const op_tbl_t *optp;

	len = strlen(op);
c7e03854:	e1a07000 	mov	r7, r0
c7e03858:	ea000059 	b	c7e039c4 <binary_test+0x18c>

	for (optp = (op_tbl_t *)&op_table, i = 0;
	     i < ARRAY_SIZE(op_table);
	     optp++, i++) {

		if ((strncmp (op, optp->op, len) == 0) && (len == strlen (optp->op))) {
c7e0385c:	e5945000 	ldr	r5, [r4]
c7e03860:	e1a01005 	mov	r1, r5
c7e03864:	eb007c0b 	bl	c7e22898 <strncmp>
c7e03868:	e3500000 	cmp	r0, #0	; 0x0
c7e0386c:	1a000053 	bne	c7e039c0 <binary_test+0x188>
c7e03870:	e1a00005 	mov	r0, r5
c7e03874:	eb007c2f 	bl	c7e22938 <strlen>
c7e03878:	e1570000 	cmp	r7, r0
c7e0387c:	1a00004f 	bne	c7e039c0 <binary_test+0x188>
			if (w == 0) {
c7e03880:	e3560000 	cmp	r6, #0	; 0x0
c7e03884:	e5945004 	ldr	r5, [r4, #4]
c7e03888:	1a000023 	bne	c7e0391c <binary_test+0xe4>
static int stringcomp(char *s, char *t, int op)
{
	int p;
	char *l, *r;

	l = evalstr(s);
c7e0388c:	e1a00009 	mov	r0, r9
c7e03890:	ebffffc6 	bl	c7e037b0 <evalstr>
c7e03894:	e1a04000 	mov	r4, r0
	r = evalstr(t);
c7e03898:	e1a0000b 	mov	r0, fp
c7e0389c:	ebffffc3 	bl	c7e037b0 <evalstr>
c7e038a0:	e1a01000 	mov	r1, r0

	p = strcmp(l, r);
c7e038a4:	e1a00004 	mov	r0, r4
c7e038a8:	eb007bec 	bl	c7e22860 <strcmp>
	switch (op) {
c7e038ac:	e3550005 	cmp	r5, #5	; 0x5
c7e038b0:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
c7e038b4:	ea000028 	b	c7e0395c <binary_test+0x124>
c7e038b8:	c7e038d0 	.word	0xc7e038d0
c7e038bc:	c7e038dc 	.word	0xc7e038dc
c7e038c0:	c7e038e8 	.word	0xc7e038e8
c7e038c4:	c7e038f0 	.word	0xc7e038f0
c7e038c8:	c7e03900 	.word	0xc7e03900
c7e038cc:	c7e03910 	.word	0xc7e03910
	case EQ: return (p == 0);
c7e038d0:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e038d4:	33a00000 	movcc	r0, #0	; 0x0
c7e038d8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case NE: return (p != 0);
c7e038dc:	e2500000 	subs	r0, r0, #0	; 0x0
c7e038e0:	13a00001 	movne	r0, #1	; 0x1
c7e038e4:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case LT: return (p < 0);
c7e038e8:	e1a00fa0 	lsr	r0, r0, #31
c7e038ec:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case GT: return (p > 0);
c7e038f0:	e3500000 	cmp	r0, #0	; 0x0
c7e038f4:	d3a00000 	movle	r0, #0	; 0x0
c7e038f8:	c3a00001 	movgt	r0, #1	; 0x1
c7e038fc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case LE: return (p <= 0);
c7e03900:	e3500000 	cmp	r0, #0	; 0x0
c7e03904:	c3a00000 	movgt	r0, #0	; 0x0
c7e03908:	d3a00001 	movle	r0, #1	; 0x1
c7e0390c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case GE: return (p >= 0);
c7e03910:	e1e00000 	mvn	r0, r0
c7e03914:	e1a00fa0 	lsr	r0, r0, #31
c7e03918:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

static int arithcomp (char *s, char *t, int op, int w)
{
	long l, r;

	l = evalexp (s, w);
c7e0391c:	e1a01006 	mov	r1, r6
c7e03920:	e1a00009 	mov	r0, r9
c7e03924:	ebffffa8 	bl	c7e037cc <evalexp>
	r = evalexp (t, w);
c7e03928:	e1a01006 	mov	r1, r6

static int arithcomp (char *s, char *t, int op, int w)
{
	long l, r;

	l = evalexp (s, w);
c7e0392c:	e1a04000 	mov	r4, r0
	r = evalexp (t, w);
c7e03930:	e1a0000b 	mov	r0, fp
c7e03934:	ebffffa4 	bl	c7e037cc <evalexp>

	switch (op) {
c7e03938:	e3550005 	cmp	r5, #5	; 0x5
c7e0393c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
c7e03940:	ea000005 	b	c7e0395c <binary_test+0x124>
c7e03944:	c7e03964 	.word	0xc7e03964
c7e03948:	c7e03974 	.word	0xc7e03974
c7e0394c:	c7e03980 	.word	0xc7e03980
c7e03950:	c7e03990 	.word	0xc7e03990
c7e03954:	c7e039a0 	.word	0xc7e039a0
c7e03958:	c7e039b0 	.word	0xc7e039b0
c7e0395c:	e3a00000 	mov	r0, #0	; 0x0
c7e03960:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case EQ: return (l == r);
c7e03964:	e1540000 	cmp	r4, r0
c7e03968:	13a00000 	movne	r0, #0	; 0x0
c7e0396c:	03a00001 	moveq	r0, #1	; 0x1
c7e03970:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case NE: return (l != r);
c7e03974:	e0540000 	subs	r0, r4, r0
c7e03978:	13a00001 	movne	r0, #1	; 0x1
c7e0397c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case LT: return (l < r);
c7e03980:	e1540000 	cmp	r4, r0
c7e03984:	a3a00000 	movge	r0, #0	; 0x0
c7e03988:	b3a00001 	movlt	r0, #1	; 0x1
c7e0398c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case GT: return (l > r);
c7e03990:	e1540000 	cmp	r4, r0
c7e03994:	d3a00000 	movle	r0, #0	; 0x0
c7e03998:	c3a00001 	movgt	r0, #1	; 0x1
c7e0399c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case LE: return (l <= r);
c7e039a0:	e1540000 	cmp	r4, r0
c7e039a4:	c3a00000 	movgt	r0, #0	; 0x0
c7e039a8:	d3a00001 	movle	r0, #1	; 0x1
c7e039ac:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	case GE: return (l >= r);
c7e039b0:	e1540000 	cmp	r4, r0
c7e039b4:	b3a00000 	movlt	r0, #0	; 0x0
c7e039b8:	a3a00001 	movge	r0, #1	; 0x1
c7e039bc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

	len = strlen(op);

	for (optp = (op_tbl_t *)&op_table, i = 0;
	     i < ARRAY_SIZE(op_table);
	     optp++, i++) {
c7e039c0:	e2844008 	add	r4, r4, #8	; 0x8
	const op_tbl_t *optp;

	len = strlen(op);

	for (optp = (op_tbl_t *)&op_table, i = 0;
	     i < ARRAY_SIZE(op_table);
c7e039c4:	e59f3024 	ldr	r3, [pc, #36]	; c7e039f0 <binary_test+0x1b8>
	     optp++, i++) {

		if ((strncmp (op, optp->op, len) == 0) && (len == strlen (optp->op))) {
c7e039c8:	e1a02007 	mov	r2, r7
	const op_tbl_t *optp;

	len = strlen(op);

	for (optp = (op_tbl_t *)&op_table, i = 0;
	     i < ARRAY_SIZE(op_table);
c7e039cc:	e1540003 	cmp	r4, r3
	     optp++, i++) {

		if ((strncmp (op, optp->op, len) == 0) && (len == strlen (optp->op))) {
c7e039d0:	e1a0000a 	mov	r0, sl
	const op_tbl_t *optp;

	len = strlen(op);

	for (optp = (op_tbl_t *)&op_table, i = 0;
	     i < ARRAY_SIZE(op_table);
c7e039d4:	1affffa0 	bne	c7e0385c <binary_test+0x24>
				return (arithcomp (arg1, arg2, optp->opcode, w));
			}
		}
	}

	printf("Unknown operator '%s'\n", op);
c7e039d8:	e1a0100a 	mov	r1, sl
c7e039dc:	e59f0010 	ldr	r0, [pc, #16]	; c7e039f4 <binary_test+0x1bc>
c7e039e0:	eb00141c 	bl	c7e08a58 <printf>
c7e039e4:	e3a00000 	mov	r0, #0	; 0x0
	return 0;	/* op code not found */
}
c7e039e8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e039ec:	c7e2b13c 	.word	0xc7e2b13c
c7e039f0:	c7e2b1a4 	.word	0xc7e2b1a4
c7e039f4:	c7e2fa7a 	.word	0xc7e2fa7a

c7e039f8 <do_itest>:
int do_itest ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[] )
{
	int	value, w;

	/* Validate arguments */
	if ((argc != 4))
c7e039f8:	e3520004 	cmp	r2, #4	; 0x4
	return 0;	/* op code not found */
}

/* command line interface to the shell test */
int do_itest ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[] )
{
c7e039fc:	e92d4010 	push	{r4, lr}
c7e03a00:	e1a01002 	mov	r1, r2
c7e03a04:	e1a04003 	mov	r4, r3
	int	value, w;

	/* Validate arguments */
	if ((argc != 4))
c7e03a08:	13e00000 	mvnne	r0, #0	; 0x0
c7e03a0c:	18bd8010 	popne	{r4, pc}

	/* Check for a data width specification.
	 * Defaults to long (4) if no specification.
	 * Uses -2 as 'width' for .s (string) so as not to upset existing code
	 */
	switch (w = cmd_get_data_size(argv[0], 4)) {
c7e03a10:	e5930000 	ldr	r0, [r3]
c7e03a14:	eb001269 	bl	c7e083c0 <cmd_get_data_size>
c7e03a18:	e2803002 	add	r3, r0, #2	; 0x2
c7e03a1c:	e3530006 	cmp	r3, #6	; 0x6
c7e03a20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e03a24:	ea000011 	b	c7e03a70 <do_itest+0x78>
c7e03a28:	c7e03a58 	.word	0xc7e03a58
c7e03a2c:	c7e03a70 	.word	0xc7e03a70
c7e03a30:	c7e03a70 	.word	0xc7e03a70
c7e03a34:	c7e03a44 	.word	0xc7e03a44
c7e03a38:	c7e03a44 	.word	0xc7e03a44
c7e03a3c:	c7e03a70 	.word	0xc7e03a70
c7e03a40:	c7e03a44 	.word	0xc7e03a44
	case 1:
	case 2:
	case 4:
		value = binary_test (argv[2], argv[1], argv[3], w);
c7e03a44:	e1a03000 	mov	r3, r0
c7e03a48:	e594200c 	ldr	r2, [r4, #12]
c7e03a4c:	e5940008 	ldr	r0, [r4, #8]
c7e03a50:	e5941004 	ldr	r1, [r4, #4]
c7e03a54:	ea000003 	b	c7e03a68 <do_itest+0x70>
		break;
	case -2:
		value = binary_test (argv[2], argv[1], argv[3], 0);
c7e03a58:	e594200c 	ldr	r2, [r4, #12]
c7e03a5c:	e5940008 	ldr	r0, [r4, #8]
c7e03a60:	e5941004 	ldr	r1, [r4, #4]
c7e03a64:	e3a03000 	mov	r3, #0	; 0x0
c7e03a68:	ebffff72 	bl	c7e03838 <binary_test>
c7e03a6c:	ea000002 	b	c7e03a7c <do_itest+0x84>
		break;
	case -1:
	default:
		puts("Invalid data width specifier\n");
c7e03a70:	e59f0010 	ldr	r0, [pc, #16]	; c7e03a88 <do_itest+0x90>
c7e03a74:	eb0013dc 	bl	c7e089ec <puts>
c7e03a78:	e3a00000 	mov	r0, #0	; 0x0
		value = 0;
		break;
	}

	return !value;
c7e03a7c:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e03a80:	33a00000 	movcc	r0, #0	; 0x0
}
c7e03a84:	e8bd8010 	pop	{r4, pc}
c7e03a88:	c7e2fa91 	.word	0xc7e2fa91

c7e03a8c <ktrans>:
}

/* converts escaped kermit char to binary char */
char ktrans (char in)
{
	if ((in & 0x60) == 0x40) {
c7e03a8c:	e2003060 	and	r3, r0, #96	; 0x60
c7e03a90:	e3530040 	cmp	r3, #64	; 0x40
		return (char) (in & ~0x40);
c7e03a94:	020000bf 	andeq	r0, r0, #191	; 0xbf
}

/* converts escaped kermit char to binary char */
char ktrans (char in)
{
	if ((in & 0x60) == 0x40) {
c7e03a98:	012fff1e 	bxeq	lr
		return (char) (in & ~0x40);
	} else if ((in & 0x7f) == 0x3f) {
c7e03a9c:	e200307f 	and	r3, r0, #127	; 0x7f
c7e03aa0:	e353003f 	cmp	r3, #63	; 0x3f
		return (char) (in | 0x40);
c7e03aa4:	03800040 	orreq	r0, r0, #64	; 0x40
	} else
		return in;
}
c7e03aa8:	e12fff1e 	bx	lr

c7e03aac <chk1>:

int chk1 (char *buffer)
{
c7e03aac:	e3a02000 	mov	r2, #0	; 0x0
c7e03ab0:	e1a03002 	mov	r3, r2
c7e03ab4:	ea000000 	b	c7e03abc <chk1+0x10>
	int total = 0;

	while (*buffer) {
		total += *buffer++;
c7e03ab8:	e0822001 	add	r2, r2, r1

int chk1 (char *buffer)
{
	int total = 0;

	while (*buffer) {
c7e03abc:	e7d01003 	ldrb	r1, [r0, r3]
c7e03ac0:	e2833001 	add	r3, r3, #1	; 0x1
c7e03ac4:	e3510000 	cmp	r1, #0	; 0x0
c7e03ac8:	1afffffa 	bne	c7e03ab8 <chk1+0xc>
c7e03acc:	e1a00c02 	lsl	r0, r2, #24
c7e03ad0:	e0820f20 	add	r0, r2, r0, lsr #30
		total += *buffer++;
	}
	return (int) ((total + ((total >> 6) & 0x03)) & 0x3f);
}
c7e03ad4:	e200003f 	and	r0, r0, #63	; 0x3f
c7e03ad8:	e12fff1e 	bx	lr

c7e03adc <bin_data_init>:
static char *os_data_addr, *os_data_addr_saved;
static char *bin_start_address;

static void bin_data_init (void)
{
	os_data_state = 0;
c7e03adc:	e59f3010 	ldr	r3, [pc, #16]	; c7e03af4 <bin_data_init+0x18>
c7e03ae0:	e3a02000 	mov	r2, #0	; 0x0
	os_data_addr = bin_start_address;
c7e03ae4:	e5931008 	ldr	r1, [r3, #8]
static char *os_data_addr, *os_data_addr_saved;
static char *bin_start_address;

static void bin_data_init (void)
{
	os_data_state = 0;
c7e03ae8:	e5832000 	str	r2, [r3]
	os_data_addr = bin_start_address;
c7e03aec:	e5831004 	str	r1, [r3, #4]
}
c7e03af0:	e12fff1e 	bx	lr
c7e03af4:	c7e40134 	.word	0xc7e40134

c7e03af8 <bin_data_char>:
	os_data_addr = os_data_addr_saved;
}

static void bin_data_char (char new_char)
{
	switch (os_data_state) {
c7e03af8:	e59f2014 	ldr	r2, [pc, #20]	; c7e03b14 <bin_data_char+0x1c>
c7e03afc:	e5923000 	ldr	r3, [r2]
c7e03b00:	e3530000 	cmp	r3, #0	; 0x0
	case 0:					/* data */
		*os_data_addr++ = new_char;
c7e03b04:	05923004 	ldreq	r3, [r2, #4]
c7e03b08:	04c30001 	strbeq	r0, [r3], #1
c7e03b0c:	05823004 	streq	r3, [r2, #4]
c7e03b10:	e12fff1e 	bx	lr
c7e03b14:	c7e40134 	.word	0xc7e40134

c7e03b18 <k_data_init>:

/* k_data_* simply handles the kermit escape translations */
static int k_data_escape, k_data_escape_saved;
void k_data_init (void)
{
	k_data_escape = 0;
c7e03b18:	e59f2014 	ldr	r2, [pc, #20]	; c7e03b34 <k_data_init+0x1c>
c7e03b1c:	e3a03000 	mov	r3, #0	; 0x0


/* k_data_* simply handles the kermit escape translations */
static int k_data_escape, k_data_escape_saved;
void k_data_init (void)
{
c7e03b20:	e92d4010 	push	{r4, lr}
	k_data_escape = 0;
c7e03b24:	e582300c 	str	r3, [r2, #12]
	os_data_init ();
c7e03b28:	e1a0e00f 	mov	lr, pc
c7e03b2c:	e592f010 	ldr	pc, [r2, #16]
}
c7e03b30:	e8bd8010 	pop	{r4, pc}
c7e03b34:	c7e40134 	.word	0xc7e40134

c7e03b38 <k_data_save>:

void k_data_save (void)
{
	k_data_escape_saved = k_data_escape;
c7e03b38:	e59f3014 	ldr	r3, [pc, #20]	; c7e03b54 <k_data_save+0x1c>
c7e03b3c:	e593100c 	ldr	r1, [r3, #12]
	os_data_addr = bin_start_address;
}

static void os_data_save (void)
{
	os_data_state_saved = os_data_state;
c7e03b40:	e8930005 	ldm	r3, {r0, r2}
	os_data_init ();
}

void k_data_save (void)
{
	k_data_escape_saved = k_data_escape;
c7e03b44:	e5831014 	str	r1, [r3, #20]
}

static void os_data_save (void)
{
	os_data_state_saved = os_data_state;
	os_data_addr_saved = os_data_addr;
c7e03b48:	e583201c 	str	r2, [r3, #28]
	os_data_addr = bin_start_address;
}

static void os_data_save (void)
{
	os_data_state_saved = os_data_state;
c7e03b4c:	e5830018 	str	r0, [r3, #24]

void k_data_save (void)
{
	k_data_escape_saved = k_data_escape;
	os_data_save ();
}
c7e03b50:	e12fff1e 	bx	lr
c7e03b54:	c7e40134 	.word	0xc7e40134

c7e03b58 <k_data_restore>:

void k_data_restore (void)
{
	k_data_escape = k_data_escape_saved;
c7e03b58:	e59f3014 	ldr	r3, [pc, #20]	; c7e03b74 <k_data_restore+0x1c>
c7e03b5c:	e5931014 	ldr	r1, [r3, #20]
	os_data_addr_saved = os_data_addr;
}

static void os_data_restore (void)
{
	os_data_state = os_data_state_saved;
c7e03b60:	e5930018 	ldr	r0, [r3, #24]
	os_data_addr = os_data_addr_saved;
c7e03b64:	e593201c 	ldr	r2, [r3, #28]
	os_data_save ();
}

void k_data_restore (void)
{
	k_data_escape = k_data_escape_saved;
c7e03b68:	e583100c 	str	r1, [r3, #12]
}

static void os_data_restore (void)
{
	os_data_state = os_data_state_saved;
	os_data_addr = os_data_addr_saved;
c7e03b6c:	e8830005 	stm	r3, {r0, r2}

void k_data_restore (void)
{
	k_data_escape = k_data_escape_saved;
	os_data_restore ();
}
c7e03b70:	e12fff1e 	bx	lr
c7e03b74:	c7e40134 	.word	0xc7e40134

c7e03b78 <k_data_char>:

void k_data_char (char new_char)
{
c7e03b78:	e92d4010 	push	{r4, lr}
	if (k_data_escape) {
c7e03b7c:	e59f4040 	ldr	r4, [pc, #64]	; c7e03bc4 <k_data_char+0x4c>
c7e03b80:	e594300c 	ldr	r3, [r4, #12]
c7e03b84:	e3530000 	cmp	r3, #0	; 0x0
c7e03b88:	0a000004 	beq	c7e03ba0 <k_data_char+0x28>
		/* last char was escape - translate this character */
		os_data_char (ktrans (new_char));
c7e03b8c:	ebffffbe 	bl	c7e03a8c <ktrans>
c7e03b90:	e1a0e00f 	mov	lr, pc
c7e03b94:	e594f020 	ldr	pc, [r4, #32]
		k_data_escape = 0;
c7e03b98:	e3a03000 	mov	r3, #0	; 0x0
c7e03b9c:	ea000003 	b	c7e03bb0 <k_data_char+0x38>
	} else {
		if (new_char == his_quote) {
c7e03ba0:	e5d43024 	ldrb	r3, [r4, #36]
c7e03ba4:	e1530000 	cmp	r3, r0
c7e03ba8:	1a000002 	bne	c7e03bb8 <k_data_char+0x40>
			/* this char is escape - remember */
			k_data_escape = 1;
c7e03bac:	e3a03001 	mov	r3, #1	; 0x1
c7e03bb0:	e584300c 	str	r3, [r4, #12]
c7e03bb4:	e8bd8010 	pop	{r4, pc}
		} else {
			/* otherwise send this char as-is */
			os_data_char (new_char);
c7e03bb8:	e1a0e00f 	mov	lr, pc
c7e03bbc:	e594f020 	ldr	pc, [r4, #32]
c7e03bc0:	e8bd8010 	pop	{r4, pc}
c7e03bc4:	c7e40134 	.word	0xc7e40134

c7e03bc8 <send_pad>:

	return offset;
}

void send_pad (void)
{
c7e03bc8:	e59f3024 	ldr	r3, [pc, #36]	; c7e03bf4 <send_pad+0x2c>
c7e03bcc:	e92d4010 	push	{r4, lr}
c7e03bd0:	e5934028 	ldr	r4, [r3, #40]
c7e03bd4:	ea000002 	b	c7e03be4 <send_pad+0x1c>
	int count = his_pad_count;

	while (count-- > 0)
		putc (his_pad_char);
c7e03bd8:	e59f3014 	ldr	r3, [pc, #20]	; c7e03bf4 <send_pad+0x2c>
c7e03bdc:	e5d3002c 	ldrb	r0, [r3, #44]
c7e03be0:	eb00142c 	bl	c7e08c98 <putc>

void send_pad (void)
{
	int count = his_pad_count;

	while (count-- > 0)
c7e03be4:	e3540000 	cmp	r4, #0	; 0x0
		putc (his_pad_char);
c7e03be8:	e2444001 	sub	r4, r4, #1	; 0x1

void send_pad (void)
{
	int count = his_pad_count;

	while (count-- > 0)
c7e03bec:	cafffff9 	bgt	c7e03bd8 <send_pad+0x10>
		putc (his_pad_char);
}
c7e03bf0:	e8bd8010 	pop	{r4, pc}
c7e03bf4:	c7e40134 	.word	0xc7e40134

c7e03bf8 <s1_sendpacket>:
	}
	return (int) ((total + ((total >> 6) & 0x03)) & 0x3f);
}

void s1_sendpacket (char *packet)
{
c7e03bf8:	e92d4070 	push	{r4, r5, r6, lr}
c7e03bfc:	e1a05000 	mov	r5, r0
	send_pad ();
c7e03c00:	e3a04000 	mov	r4, #0	; 0x0
c7e03c04:	ebffffef 	bl	c7e03bc8 <send_pad>
c7e03c08:	ea000000 	b	c7e03c10 <s1_sendpacket+0x18>
	while (*packet) {
		putc (*packet++);
c7e03c0c:	eb001421 	bl	c7e08c98 <putc>
}

void s1_sendpacket (char *packet)
{
	send_pad ();
	while (*packet) {
c7e03c10:	e7d53004 	ldrb	r3, [r5, r4]
c7e03c14:	e2844001 	add	r4, r4, #1	; 0x1
c7e03c18:	e2530000 	subs	r0, r3, #0	; 0x0
c7e03c1c:	1afffffa 	bne	c7e03c0c <s1_sendpacket+0x14>
		putc (*packet++);
	}
}
c7e03c20:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e03c24 <handle_send_packet>:
{
	int length = 3;
	int bytes;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
c7e03c24:	e59fc1b8 	ldr	ip, [pc, #440]	; c7e03de4 <handle_send_packet+0x1c0>
char *send_ptr;

/* handle_send_packet interprits the protocol info and builds and
   sends an appropriate ack for what we can do */
void handle_send_packet (int n)
{
c7e03c28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	his_pad_count = 0;
	his_pad_char = '\0';
	his_quote = K_ESCAPE;

	/* ignore last character if it filled the buffer */
	if (send_ptr == &send_parms[SEND_DATA_SIZE - 1])
c7e03c2c:	e59c2030 	ldr	r2, [ip, #48]
c7e03c30:	e28c3047 	add	r3, ip, #71	; 0x47
c7e03c34:	e1520003 	cmp	r2, r3
{
	int length = 3;
	int bytes;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
c7e03c38:	e3a0300d 	mov	r3, #13	; 0xd
c7e03c3c:	e5cc302d 	strb	r3, [ip, #45]
	his_pad_count = 0;
	his_pad_char = '\0';
	his_quote = K_ESCAPE;
c7e03c40:	e2833016 	add	r3, r3, #22	; 0x16
c7e03c44:	e5cc3024 	strb	r3, [ip, #36]

	/* ignore last character if it filled the buffer */
	if (send_ptr == &send_parms[SEND_DATA_SIZE - 1])
		--send_ptr;
	bytes = send_ptr - send_parms;	/* how many bytes we'll process */
c7e03c48:	e59f5194 	ldr	r5, [pc, #404]	; c7e03de4 <handle_send_packet+0x1c0>
	his_pad_char = '\0';
	his_quote = K_ESCAPE;

	/* ignore last character if it filled the buffer */
	if (send_ptr == &send_parms[SEND_DATA_SIZE - 1])
		--send_ptr;
c7e03c4c:	028c3046 	addeq	r3, ip, #70	; 0x46
c7e03c50:	058c3030 	streq	r3, [ip, #48]
	bytes = send_ptr - send_parms;	/* how many bytes we'll process */
c7e03c54:	e5952030 	ldr	r2, [r5, #48]
c7e03c58:	e2853034 	add	r3, r5, #52	; 0x34
c7e03c5c:	e0632002 	rsb	r2, r3, r2
	int length = 3;
	int bytes;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
	his_pad_count = 0;
c7e03c60:	e3a01000 	mov	r1, #0	; 0x0
	/* ignore last character if it filled the buffer */
	if (send_ptr == &send_parms[SEND_DATA_SIZE - 1])
		--send_ptr;
	bytes = send_ptr - send_parms;	/* how many bytes we'll process */
	do {
		if (bytes-- <= 0)
c7e03c64:	e3520000 	cmp	r2, #0	; 0x0
	int bytes;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
	his_pad_count = 0;
	his_pad_char = '\0';
c7e03c68:	e5cc102c 	strb	r1, [ip, #44]
char *send_ptr;

/* handle_send_packet interprits the protocol info and builds and
   sends an appropriate ack for what we can do */
void handle_send_packet (int n)
{
c7e03c6c:	e1a06000 	mov	r6, r0
	int length = 3;
	int bytes;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
	his_pad_count = 0;
c7e03c70:	e58c1028 	str	r1, [ip, #40]
	/* ignore last character if it filled the buffer */
	if (send_ptr == &send_parms[SEND_DATA_SIZE - 1])
		--send_ptr;
	bytes = send_ptr - send_parms;	/* how many bytes we'll process */
	do {
		if (bytes-- <= 0)
c7e03c74:	d3a02003 	movle	r2, #3	; 0x3
c7e03c78:	da000040 	ble	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle MAXL - max length */
		/* ignore what he says - most I'll take (here) is 94 */
		a_b[++length] = tochar (94);
		if (bytes-- <= 0)
c7e03c7c:	e2522001 	subs	r2, r2, #1	; 0x1
	do {
		if (bytes-- <= 0)
			break;
		/* handle MAXL - max length */
		/* ignore what he says - most I'll take (here) is 94 */
		a_b[++length] = tochar (94);
c7e03c80:	e3a0307e 	mov	r3, #126	; 0x7e
c7e03c84:	e5c5304c 	strb	r3, [r5, #76]
		if (bytes-- <= 0)
c7e03c88:	03a02004 	moveq	r2, #4	; 0x4
c7e03c8c:	0a00003b 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle TIME - time you should wait for my packets */
		/* ignore what he says - don't wait for my ack longer than 1 second */
		a_b[++length] = tochar (1);
		if (bytes-- <= 0)
c7e03c90:	e2522001 	subs	r2, r2, #1	; 0x1
		a_b[++length] = tochar (94);
		if (bytes-- <= 0)
			break;
		/* handle TIME - time you should wait for my packets */
		/* ignore what he says - don't wait for my ack longer than 1 second */
		a_b[++length] = tochar (1);
c7e03c94:	e3a03021 	mov	r3, #33	; 0x21
c7e03c98:	e5c5304d 	strb	r3, [r5, #77]
		if (bytes-- <= 0)
c7e03c9c:	03a02005 	moveq	r2, #5	; 0x5
c7e03ca0:	0a000036 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle NPAD - number of pad chars I need */
		/* remember what he says - I need none */
		his_pad_count = untochar (send_parms[2]);
c7e03ca4:	e5d53036 	ldrb	r3, [r5, #54]
		a_b[++length] = tochar (0);
		if (bytes-- <= 0)
c7e03ca8:	e2522001 	subs	r2, r2, #1	; 0x1
		a_b[++length] = tochar (1);
		if (bytes-- <= 0)
			break;
		/* handle NPAD - number of pad chars I need */
		/* remember what he says - I need none */
		his_pad_count = untochar (send_parms[2]);
c7e03cac:	e2433020 	sub	r3, r3, #32	; 0x20
c7e03cb0:	e20330ff 	and	r3, r3, #255	; 0xff
c7e03cb4:	e5853028 	str	r3, [r5, #40]
		a_b[++length] = tochar (0);
c7e03cb8:	e3a03020 	mov	r3, #32	; 0x20
c7e03cbc:	e5c5304e 	strb	r3, [r5, #78]
		if (bytes-- <= 0)
c7e03cc0:	03a02006 	moveq	r2, #6	; 0x6
c7e03cc4:	0a00002d 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle PADC - pad chars I need */
		/* remember what he says - I need none */
		his_pad_char = ktrans (send_parms[3]);
c7e03cc8:	e5d50037 	ldrb	r0, [r5, #55]
			break;
		/* handle NPAD - number of pad chars I need */
		/* remember what he says - I need none */
		his_pad_count = untochar (send_parms[2]);
		a_b[++length] = tochar (0);
		if (bytes-- <= 0)
c7e03ccc:	e2424001 	sub	r4, r2, #1	; 0x1
			break;
		/* handle PADC - pad chars I need */
		/* remember what he says - I need none */
		his_pad_char = ktrans (send_parms[3]);
c7e03cd0:	ebffff6d 	bl	c7e03a8c <ktrans>
		a_b[++length] = 0x40;	/* He should ignore this */
		if (bytes-- <= 0)
c7e03cd4:	e3540000 	cmp	r4, #0	; 0x0
		if (bytes-- <= 0)
			break;
		/* handle PADC - pad chars I need */
		/* remember what he says - I need none */
		his_pad_char = ktrans (send_parms[3]);
		a_b[++length] = 0x40;	/* He should ignore this */
c7e03cd8:	e3a03040 	mov	r3, #64	; 0x40
		a_b[++length] = tochar (0);
		if (bytes-- <= 0)
			break;
		/* handle PADC - pad chars I need */
		/* remember what he says - I need none */
		his_pad_char = ktrans (send_parms[3]);
c7e03cdc:	e5c5002c 	strb	r0, [r5, #44]
		a_b[++length] = 0x40;	/* He should ignore this */
c7e03ce0:	e5c5304f 	strb	r3, [r5, #79]
		if (bytes-- <= 0)
c7e03ce4:	03a02007 	moveq	r2, #7	; 0x7
c7e03ce8:	0a000024 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle EOL - end of line he needs */
		/* remember what he says - I need CR */
		his_eol = untochar (send_parms[4]);
c7e03cec:	e5d53038 	ldrb	r3, [r5, #56]
		a_b[++length] = tochar (END_CHAR);
		if (bytes-- <= 0)
c7e03cf0:	e2542001 	subs	r2, r4, #1	; 0x1
		a_b[++length] = 0x40;	/* He should ignore this */
		if (bytes-- <= 0)
			break;
		/* handle EOL - end of line he needs */
		/* remember what he says - I need CR */
		his_eol = untochar (send_parms[4]);
c7e03cf4:	e2433020 	sub	r3, r3, #32	; 0x20
c7e03cf8:	e5c5302d 	strb	r3, [r5, #45]
		a_b[++length] = tochar (END_CHAR);
c7e03cfc:	e3a0302d 	mov	r3, #45	; 0x2d
c7e03d00:	e5c53050 	strb	r3, [r5, #80]
		if (bytes-- <= 0)
c7e03d04:	03a02008 	moveq	r2, #8	; 0x8
c7e03d08:	0a00001c 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle QCTL - quote control char he'll use */
		/* remember what he says - I'll use '#' */
		his_quote = send_parms[5];
c7e03d0c:	e5d53039 	ldrb	r3, [r5, #57]
		a_b[++length] = '#';
		if (bytes-- <= 0)
c7e03d10:	e2522001 	subs	r2, r2, #1	; 0x1
		a_b[++length] = tochar (END_CHAR);
		if (bytes-- <= 0)
			break;
		/* handle QCTL - quote control char he'll use */
		/* remember what he says - I'll use '#' */
		his_quote = send_parms[5];
c7e03d14:	e5c53024 	strb	r3, [r5, #36]
		a_b[++length] = '#';
c7e03d18:	e3a03023 	mov	r3, #35	; 0x23
c7e03d1c:	e5c53051 	strb	r3, [r5, #81]
		if (bytes-- <= 0)
c7e03d20:	03a02009 	moveq	r2, #9	; 0x9
c7e03d24:	0a000015 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle QBIN - 8-th bit prefixing */
		/* ignore what he says - I refuse */
		a_b[++length] = 'N';
		if (bytes-- <= 0)
c7e03d28:	e2523001 	subs	r3, r2, #1	; 0x1
		a_b[++length] = '#';
		if (bytes-- <= 0)
			break;
		/* handle QBIN - 8-th bit prefixing */
		/* ignore what he says - I refuse */
		a_b[++length] = 'N';
c7e03d2c:	e3a0104e 	mov	r1, #78	; 0x4e
c7e03d30:	e5c51052 	strb	r1, [r5, #82]
		if (bytes-- <= 0)
c7e03d34:	03a0200a 	moveq	r2, #10	; 0xa
c7e03d38:	0a000010 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle CHKT - the clock check type */
		/* ignore what he says - I do type 1 (for now) */
		a_b[++length] = '1';
		if (bytes-- <= 0)
c7e03d3c:	e2532001 	subs	r2, r3, #1	; 0x1
		a_b[++length] = 'N';
		if (bytes-- <= 0)
			break;
		/* handle CHKT - the clock check type */
		/* ignore what he says - I do type 1 (for now) */
		a_b[++length] = '1';
c7e03d40:	e3a03031 	mov	r3, #49	; 0x31
c7e03d44:	e5c53053 	strb	r3, [r5, #83]
		if (bytes-- <= 0)
c7e03d48:	03a0200b 	moveq	r2, #11	; 0xb
c7e03d4c:	0a00000b 	beq	c7e03d80 <handle_send_packet+0x15c>
			break;
		/* handle REPT - the repeat prefix */
		/* ignore what he says - I refuse (for now) */
		a_b[++length] = 'N';
		if (bytes-- <= 0)
c7e03d50:	e3520001 	cmp	r2, #1	; 0x1
			break;
		/* handle CAPAS - the capabilities mask */
		/* ignore what he says - I only do long packets - I don't do windows */
		a_b[++length] = tochar (2);	/* only long packets */
c7e03d54:	159f2088 	ldrne	r2, [pc, #136]	; c7e03de4 <handle_send_packet+0x1c0>
c7e03d58:	13a03022 	movne	r3, #34	; 0x22
c7e03d5c:	15c23055 	strbne	r3, [r2, #85]
		a_b[++length] = '1';
		if (bytes-- <= 0)
			break;
		/* handle REPT - the repeat prefix */
		/* ignore what he says - I refuse (for now) */
		a_b[++length] = 'N';
c7e03d60:	e5c51054 	strb	r1, [r5, #84]
		if (bytes-- <= 0)
			break;
		/* handle CAPAS - the capabilities mask */
		/* ignore what he says - I only do long packets - I don't do windows */
		a_b[++length] = tochar (2);	/* only long packets */
		a_b[++length] = tochar (0);	/* no windows */
c7e03d64:	13a03020 	movne	r3, #32	; 0x20
		a_b[++length] = tochar (94);	/* large packet msb */
c7e03d68:	13a0107e 	movne	r1, #126	; 0x7e
		a_b[++length] = tochar (94);	/* large packet lsb */
c7e03d6c:	15c21058 	strbne	r1, [r2, #88]
		if (bytes-- <= 0)
			break;
		/* handle CAPAS - the capabilities mask */
		/* ignore what he says - I only do long packets - I don't do windows */
		a_b[++length] = tochar (2);	/* only long packets */
		a_b[++length] = tochar (0);	/* no windows */
c7e03d70:	15c23056 	strbne	r3, [r2, #86]
		a_b[++length] = tochar (94);	/* large packet msb */
c7e03d74:	15c21057 	strbne	r1, [r2, #87]
		if (bytes-- <= 0)
			break;
		/* handle REPT - the repeat prefix */
		/* ignore what he says - I refuse (for now) */
		a_b[++length] = 'N';
		if (bytes-- <= 0)
c7e03d78:	0282200b 	addeq	r2, r2, #11	; 0xb
		/* handle CAPAS - the capabilities mask */
		/* ignore what he says - I only do long packets - I don't do windows */
		a_b[++length] = tochar (2);	/* only long packets */
		a_b[++length] = tochar (0);	/* no windows */
		a_b[++length] = tochar (94);	/* large packet msb */
		a_b[++length] = tochar (94);	/* large packet lsb */
c7e03d7c:	13a02010 	movne	r2, #16	; 0x10
	} while (0);

	a_b[0] = START_CHAR;
c7e03d80:	e59f405c 	ldr	r4, [pc, #92]	; c7e03de4 <handle_send_packet+0x1c0>
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
c7e03d84:	e2825001 	add	r5, r2, #1	; 0x1
		a_b[++length] = tochar (0);	/* no windows */
		a_b[++length] = tochar (94);	/* large packet msb */
		a_b[++length] = tochar (94);	/* large packet lsb */
	} while (0);

	a_b[0] = START_CHAR;
c7e03d88:	e3a03001 	mov	r3, #1	; 0x1
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
c7e03d8c:	e2861020 	add	r1, r6, #32	; 0x20
		a_b[++length] = tochar (0);	/* no windows */
		a_b[++length] = tochar (94);	/* large packet msb */
		a_b[++length] = tochar (94);	/* large packet lsb */
	} while (0);

	a_b[0] = START_CHAR;
c7e03d90:	e5c43048 	strb	r3, [r4, #72]
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
c7e03d94:	e0846005 	add	r6, r4, r5
		a_b[++length] = tochar (94);	/* large packet msb */
		a_b[++length] = tochar (94);	/* large packet lsb */
	} while (0);

	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
c7e03d98:	e2822020 	add	r2, r2, #32	; 0x20
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
c7e03d9c:	e3a07000 	mov	r7, #0	; 0x0
	} while (0);

	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
c7e03da0:	e2833058 	add	r3, r3, #88	; 0x58
		a_b[++length] = tochar (94);	/* large packet msb */
		a_b[++length] = tochar (94);	/* large packet lsb */
	} while (0);

	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
c7e03da4:	e5c42049 	strb	r2, [r4, #73]
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
c7e03da8:	e5c4304b 	strb	r3, [r4, #75]
		a_b[++length] = tochar (94);	/* large packet lsb */
	} while (0);

	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
c7e03dac:	e5c4104a 	strb	r1, [r4, #74]
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
	a_b[length] = tochar (chk1 (&a_b[1]));
c7e03db0:	e2840049 	add	r0, r4, #73	; 0x49

	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
c7e03db4:	e5c67048 	strb	r7, [r6, #72]
	a_b[length] = tochar (chk1 (&a_b[1]));
c7e03db8:	ebffff3b 	bl	c7e03aac <chk1>
	a_b[++length] = his_eol;
c7e03dbc:	e2855001 	add	r5, r5, #1	; 0x1
c7e03dc0:	e5d4202d 	ldrb	r2, [r4, #45]
	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
	a_b[length] = tochar (chk1 (&a_b[1]));
c7e03dc4:	e2803020 	add	r3, r0, #32	; 0x20
	a_b[++length] = his_eol;
c7e03dc8:	e0845005 	add	r5, r4, r5
	a_b[++length] = '\0';
	s1_sendpacket (a_b);
c7e03dcc:	e2840048 	add	r0, r4, #72	; 0x48
	a_b[0] = START_CHAR;
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
	a_b[length] = tochar (chk1 (&a_b[1]));
c7e03dd0:	e5c63048 	strb	r3, [r6, #72]
	a_b[++length] = his_eol;
	a_b[++length] = '\0';
c7e03dd4:	e5c57049 	strb	r7, [r5, #73]
	a_b[1] = tochar (length);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
	a_b[length] = tochar (chk1 (&a_b[1]));
	a_b[++length] = his_eol;
c7e03dd8:	e5c52048 	strb	r2, [r5, #72]
	a_b[++length] = '\0';
	s1_sendpacket (a_b);
}
c7e03ddc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	a_b[3] = ACK_TYPE;
	a_b[++length] = '\0';
	a_b[length] = tochar (chk1 (&a_b[1]));
	a_b[++length] = his_eol;
	a_b[++length] = '\0';
	s1_sendpacket (a_b);
c7e03de0:	eaffff84 	b	c7e03bf8 <s1_sendpacket>
c7e03de4:	c7e40134 	.word	0xc7e40134

c7e03de8 <send_nack>:
	a_b[6] = '\0';
	s1_sendpacket (a_b);
}

void send_nack (int n)
{
c7e03de8:	e92d4070 	push	{r4, r5, r6, lr}
	a_b[0] = START_CHAR;
c7e03dec:	e59f404c 	ldr	r4, [pc, #76]	; c7e03e40 <send_nack+0x58>
c7e03df0:	e3a03001 	mov	r3, #1	; 0x1
c7e03df4:	e5c43048 	strb	r3, [r4, #72]
	a_b[1] = tochar (3);
c7e03df8:	e2833022 	add	r3, r3, #34	; 0x22
	a_b[2] = tochar (n);
c7e03dfc:	e2802020 	add	r2, r0, #32	; 0x20
	a_b[3] = NACK_TYPE;
	a_b[4] = '\0';
c7e03e00:	e3a05000 	mov	r5, #0	; 0x0
}

void send_nack (int n)
{
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
c7e03e04:	e5c43049 	strb	r3, [r4, #73]
	a_b[2] = tochar (n);
	a_b[3] = NACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e08:	e2840049 	add	r0, r4, #73	; 0x49
void send_nack (int n)
{
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
	a_b[3] = NACK_TYPE;
c7e03e0c:	e283302b 	add	r3, r3, #43	; 0x2b

void send_nack (int n)
{
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
c7e03e10:	e5c4204a 	strb	r2, [r4, #74]
	a_b[3] = NACK_TYPE;
c7e03e14:	e5c4304b 	strb	r3, [r4, #75]
	a_b[4] = '\0';
c7e03e18:	e5c4504c 	strb	r5, [r4, #76]
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e1c:	ebffff22 	bl	c7e03aac <chk1>
	a_b[5] = his_eol;
c7e03e20:	e5d4202d 	ldrb	r2, [r4, #45]
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
	a_b[3] = NACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e24:	e2803020 	add	r3, r0, #32	; 0x20
	a_b[5] = his_eol;
	a_b[6] = '\0';
	s1_sendpacket (a_b);
c7e03e28:	e59f0014 	ldr	r0, [pc, #20]	; c7e03e44 <send_nack+0x5c>
	a_b[2] = tochar (n);
	a_b[3] = NACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
	a_b[5] = his_eol;
	a_b[6] = '\0';
c7e03e2c:	e5c4504e 	strb	r5, [r4, #78]
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
	a_b[3] = NACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e30:	e5c4304c 	strb	r3, [r4, #76]
	a_b[5] = his_eol;
c7e03e34:	e5c4204d 	strb	r2, [r4, #77]
	a_b[6] = '\0';
	s1_sendpacket (a_b);
}
c7e03e38:	e8bd4070 	pop	{r4, r5, r6, lr}
	a_b[3] = NACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
	a_b[5] = his_eol;
	a_b[6] = '\0';
	s1_sendpacket (a_b);
c7e03e3c:	eaffff6d 	b	c7e03bf8 <s1_sendpacket>
c7e03e40:	c7e40134 	.word	0xc7e40134
c7e03e44:	c7e4017c 	.word	0xc7e4017c

c7e03e48 <send_ack>:
	}
}

static char a_b[24];
void send_ack (int n)
{
c7e03e48:	e92d4070 	push	{r4, r5, r6, lr}
	a_b[0] = START_CHAR;
c7e03e4c:	e59f404c 	ldr	r4, [pc, #76]	; c7e03ea0 <send_ack+0x58>
c7e03e50:	e3a03001 	mov	r3, #1	; 0x1
c7e03e54:	e5c43048 	strb	r3, [r4, #72]
	a_b[1] = tochar (3);
c7e03e58:	e2833022 	add	r3, r3, #34	; 0x22
	a_b[2] = tochar (n);
c7e03e5c:	e2802020 	add	r2, r0, #32	; 0x20
	a_b[3] = ACK_TYPE;
	a_b[4] = '\0';
c7e03e60:	e3a05000 	mov	r5, #0	; 0x0

static char a_b[24];
void send_ack (int n)
{
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
c7e03e64:	e5c43049 	strb	r3, [r4, #73]
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e68:	e2840049 	add	r0, r4, #73	; 0x49
void send_ack (int n)
{
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
c7e03e6c:	e2833036 	add	r3, r3, #54	; 0x36
static char a_b[24];
void send_ack (int n)
{
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
c7e03e70:	e5c4204a 	strb	r2, [r4, #74]
	a_b[3] = ACK_TYPE;
c7e03e74:	e5c4304b 	strb	r3, [r4, #75]
	a_b[4] = '\0';
c7e03e78:	e5c4504c 	strb	r5, [r4, #76]
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e7c:	ebffff0a 	bl	c7e03aac <chk1>
	a_b[5] = his_eol;
c7e03e80:	e5d4202d 	ldrb	r2, [r4, #45]
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e84:	e2803020 	add	r3, r0, #32	; 0x20
	a_b[5] = his_eol;
	a_b[6] = '\0';
	s1_sendpacket (a_b);
c7e03e88:	e59f0014 	ldr	r0, [pc, #20]	; c7e03ea4 <send_ack+0x5c>
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
	a_b[5] = his_eol;
	a_b[6] = '\0';
c7e03e8c:	e5c4504e 	strb	r5, [r4, #78]
	a_b[0] = START_CHAR;
	a_b[1] = tochar (3);
	a_b[2] = tochar (n);
	a_b[3] = ACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
c7e03e90:	e5c4304c 	strb	r3, [r4, #76]
	a_b[5] = his_eol;
c7e03e94:	e5c4204d 	strb	r2, [r4, #77]
	a_b[6] = '\0';
	s1_sendpacket (a_b);
}
c7e03e98:	e8bd4070 	pop	{r4, r5, r6, lr}
	a_b[3] = ACK_TYPE;
	a_b[4] = '\0';
	a_b[4] = tochar (chk1 (&a_b[1]));
	a_b[5] = his_eol;
	a_b[6] = '\0';
	s1_sendpacket (a_b);
c7e03e9c:	eaffff55 	b	c7e03bf8 <s1_sendpacket>
c7e03ea0:	c7e40134 	.word	0xc7e40134
c7e03ea4:	c7e4017c 	.word	0xc7e4017c

c7e03ea8 <load_serial_ymodem>:
	if (tstc())
		return (getc());
	return -1;
}
static ulong load_serial_ymodem (ulong offset)
{
c7e03ea8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
c7e03eac:	e24dde43 	sub	sp, sp, #1072	; 0x430
c7e03eb0:	e24dd004 	sub	sp, sp, #4	; 0x4
	ulong store_addr = ~0;
	ulong addr = 0;

	size = 0;
	info.mode = xyzModem_ymodem;
	res = xyzModem_stream_open (&info, &err);
c7e03eb4:	e28d1e42 	add	r1, sp, #1056	; 0x420
	char ymodemBuf[1024];
	ulong store_addr = ~0;
	ulong addr = 0;

	size = 0;
	info.mode = xyzModem_ymodem;
c7e03eb8:	e3a03002 	mov	r3, #2	; 0x2
	if (tstc())
		return (getc());
	return -1;
}
static ulong load_serial_ymodem (ulong offset)
{
c7e03ebc:	e1a07000 	mov	r7, r0
	ulong store_addr = ~0;
	ulong addr = 0;

	size = 0;
	info.mode = xyzModem_ymodem;
	res = xyzModem_stream_open (&info, &err);
c7e03ec0:	e281100c 	add	r1, r1, #12	; 0xc
c7e03ec4:	e28d0e42 	add	r0, sp, #1056	; 0x420
	char ymodemBuf[1024];
	ulong store_addr = ~0;
	ulong addr = 0;

	size = 0;
	info.mode = xyzModem_ymodem;
c7e03ec8:	e58d3424 	str	r3, [sp, #1060]
	res = xyzModem_stream_open (&info, &err);
c7e03ecc:	eb002d41 	bl	c7e0f3d8 <xyzModem_stream_open>
	if (!res) {
c7e03ed0:	e3500000 	cmp	r0, #0	; 0x0
c7e03ed4:	01a05000 	moveq	r5, r0
c7e03ed8:	01a06005 	moveq	r6, r5
c7e03edc:	0a000002 	beq	c7e03eec <load_serial_ymodem+0x44>
c7e03ee0:	ea00000e 	b	c7e03f20 <load_serial_ymodem+0x78>

		while ((res =
			xyzModem_stream_read (ymodemBuf, 1024, &err)) > 0) {
			store_addr = addr + offset;
			size += res;
c7e03ee4:	e085500c 	add	r5, r5, ip
					return (~0);
				}
			} else
#endif
			{
				memcpy ((char *) (store_addr), ymodemBuf,
c7e03ee8:	eb007b53 	bl	c7e22c3c <memcpy>
	size = 0;
	info.mode = xyzModem_ymodem;
	res = xyzModem_stream_open (&info, &err);
	if (!res) {

		while ((res =
c7e03eec:	e28d2e42 	add	r2, sp, #1056	; 0x420
c7e03ef0:	e3a01b01 	mov	r1, #1024	; 0x400
c7e03ef4:	e282200c 	add	r2, r2, #12	; 0xc
c7e03ef8:	e1a0000d 	mov	r0, sp
c7e03efc:	eb002c92 	bl	c7e0f14c <xyzModem_stream_read>
			xyzModem_stream_read (ymodemBuf, 1024, &err)) > 0) {
			store_addr = addr + offset;
c7e03f00:	e0863007 	add	r3, r6, r7
	size = 0;
	info.mode = xyzModem_ymodem;
	res = xyzModem_stream_open (&info, &err);
	if (!res) {

		while ((res =
c7e03f04:	e250c000 	subs	ip, r0, #0	; 0x0
					return (~0);
				}
			} else
#endif
			{
				memcpy ((char *) (store_addr), ymodemBuf,
c7e03f08:	e1a0100d 	mov	r1, sp
c7e03f0c:	e1a0200c 	mov	r2, ip
c7e03f10:	e1a00003 	mov	r0, r3

		while ((res =
			xyzModem_stream_read (ymodemBuf, 1024, &err)) > 0) {
			store_addr = addr + offset;
			size += res;
			addr += res;
c7e03f14:	e086600c 	add	r6, r6, ip
	size = 0;
	info.mode = xyzModem_ymodem;
	res = xyzModem_stream_open (&info, &err);
	if (!res) {

		while ((res =
c7e03f18:	cafffff1 	bgt	c7e03ee4 <load_serial_ymodem+0x3c>
c7e03f1c:	ea000005 	b	c7e03f38 <load_serial_ymodem+0x90>
					res);
			}

		}
	} else {
		printf ("%s\n", xyzModem_error (err));
c7e03f20:	e59d042c 	ldr	r0, [sp, #1068]
c7e03f24:	eb002b57 	bl	c7e0ec88 <xyzModem_error>
c7e03f28:	e1a01000 	mov	r1, r0
c7e03f2c:	e59f0068 	ldr	r0, [pc, #104]	; c7e03f9c <load_serial_ymodem+0xf4>
c7e03f30:	eb0012c8 	bl	c7e08a58 <printf>
c7e03f34:	e3a05000 	mov	r5, #0	; 0x0
	}

	xyzModem_stream_close (&err);
c7e03f38:	e28d0e42 	add	r0, sp, #1056	; 0x420
c7e03f3c:	e280000c 	add	r0, r0, #12	; 0xc
c7e03f40:	eb002b77 	bl	c7e0ed24 <xyzModem_stream_close>
	xyzModem_stream_terminate (false, &getcxmodem);
c7e03f44:	e3a00000 	mov	r0, #0	; 0x0
c7e03f48:	e59f1050 	ldr	r1, [pc, #80]	; c7e03fa0 <load_serial_ymodem+0xf8>
c7e03f4c:	eb002ba8 	bl	c7e0edf4 <xyzModem_stream_terminate>


	flush_cache (offset, size);
c7e03f50:	e1a00007 	mov	r0, r7
c7e03f54:	e1a01005 	mov	r1, r5
c7e03f58:	ebfff508 	bl	c7e01380 <__flush_cache>

	printf ("## Total Size      = 0x%08x = %d Bytes\n", size, size);
	sprintf (buf, "%X", size);
c7e03f5c:	e28d4b01 	add	r4, sp, #1024	; 0x400
	xyzModem_stream_terminate (false, &getcxmodem);


	flush_cache (offset, size);

	printf ("## Total Size      = 0x%08x = %d Bytes\n", size, size);
c7e03f60:	e1a01005 	mov	r1, r5
c7e03f64:	e1a02005 	mov	r2, r5
c7e03f68:	e59f0034 	ldr	r0, [pc, #52]	; c7e03fa4 <load_serial_ymodem+0xfc>
c7e03f6c:	eb0012b9 	bl	c7e08a58 <printf>
	sprintf (buf, "%X", size);
c7e03f70:	e1a02005 	mov	r2, r5
c7e03f74:	e59f102c 	ldr	r1, [pc, #44]	; c7e03fa8 <load_serial_ymodem+0x100>
c7e03f78:	e1a00004 	mov	r0, r4
c7e03f7c:	eb007fab 	bl	c7e23e30 <sprintf>
	setenv ("filesize", buf);
c7e03f80:	e1a01004 	mov	r1, r4
c7e03f84:	e59f0020 	ldr	r0, [pc, #32]	; c7e03fac <load_serial_ymodem+0x104>
c7e03f88:	eb000db0 	bl	c7e07650 <setenv>

	return offset;
}
c7e03f8c:	e1a00007 	mov	r0, r7
c7e03f90:	e28dd034 	add	sp, sp, #52	; 0x34
c7e03f94:	e28ddb01 	add	sp, sp, #1024	; 0x400
c7e03f98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e03f9c:	c7e319dc 	.word	0xc7e319dc
c7e03fa0:	c7e03fb0 	.word	0xc7e03fb0
c7e03fa4:	c7e2fb2d 	.word	0xc7e2fb2d
c7e03fa8:	c7e2f501 	.word	0xc7e2f501
c7e03fac:	c7e2e9fc 	.word	0xc7e2e9fc

c7e03fb0 <getcxmodem>:
		}
	}
	return ((ulong) os_data_addr - (ulong) bin_start_address);
}

static int getcxmodem(void) {
c7e03fb0:	e92d4010 	push	{r4, lr}
	if (tstc())
c7e03fb4:	eb001341 	bl	c7e08cc0 <tstc>
c7e03fb8:	e3500000 	cmp	r0, #0	; 0x0
c7e03fbc:	1a000001 	bne	c7e03fc8 <getcxmodem+0x18>
		return (getc());
	return -1;
}
c7e03fc0:	e3e00000 	mvn	r0, #0	; 0x0
c7e03fc4:	e8bd8010 	pop	{r4, pc}
c7e03fc8:	e8bd4010 	pop	{r4, lr}
	return ((ulong) os_data_addr - (ulong) bin_start_address);
}

static int getcxmodem(void) {
	if (tstc())
		return (getc());
c7e03fcc:	ea001344 	b	c7e08ce4 <getc>

c7e03fd0 <do_load_serial_bin>:
int  his_pad_count;  /* number of pad chars he needs */
char his_pad_char;   /* pad chars he needs */
char his_quote;      /* quote chars he'll use */

int do_load_serial_bin (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03fd0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}

	/* pre-set offset from CONFIG_SYS_LOAD_ADDR */
	offset = CONFIG_SYS_LOAD_ADDR;

	/* pre-set offset from $loadaddr */
	if ((s = getenv("loadaddr")) != NULL) {
c7e03fd4:	e59f0414 	ldr	r0, [pc, #1044]	; c7e043f0 <do_load_serial_bin+0x420>
int  his_pad_count;  /* number of pad chars he needs */
char his_pad_char;   /* pad chars he needs */
char his_quote;      /* quote chars he'll use */

int do_load_serial_bin (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e03fd8:	e24dd028 	sub	sp, sp, #40	; 0x28
c7e03fdc:	e1a05002 	mov	r5, r2
c7e03fe0:	e1a04003 	mov	r4, r3

	/* pre-set offset from CONFIG_SYS_LOAD_ADDR */
	offset = CONFIG_SYS_LOAD_ADDR;

	/* pre-set offset from $loadaddr */
	if ((s = getenv("loadaddr")) != NULL) {
c7e03fe4:	eb000c2c 	bl	c7e0709c <getenv>
c7e03fe8:	e3500000 	cmp	r0, #0	; 0x0
c7e03fec:	03a0a205 	moveq	sl, #1342177280	; 0x50000000
c7e03ff0:	0a000003 	beq	c7e04004 <do_load_serial_bin+0x34>
		offset = simple_strtoul(s, NULL, 16);
c7e03ff4:	e3a01000 	mov	r1, #0	; 0x0
c7e03ff8:	e3a02010 	mov	r2, #16	; 0x10
c7e03ffc:	eb007bd7 	bl	c7e22f60 <simple_strtoul>
c7e04000:	e1a0a000 	mov	sl, r0
	}

	load_baudrate = current_baudrate = gd->baudrate;
c7e04004:	e5983008 	ldr	r3, [r8, #8]

	if (argc >= 2) {
c7e04008:	e3550001 	cmp	r5, #1	; 0x1
	/* pre-set offset from $loadaddr */
	if ((s = getenv("loadaddr")) != NULL) {
		offset = simple_strtoul(s, NULL, 16);
	}

	load_baudrate = current_baudrate = gd->baudrate;
c7e0400c:	e58d3000 	str	r3, [sp]

	if (argc >= 2) {
c7e04010:	da0000ef 	ble	c7e043d4 <do_load_serial_bin+0x404>
		offset = simple_strtoul(argv[1], NULL, 16);
c7e04014:	e5940004 	ldr	r0, [r4, #4]
c7e04018:	e3a01000 	mov	r1, #0	; 0x0
c7e0401c:	e3a02010 	mov	r2, #16	; 0x10
c7e04020:	eb007bce 	bl	c7e22f60 <simple_strtoul>
	}
	if (argc == 3) {
c7e04024:	e3550003 	cmp	r5, #3	; 0x3
	}

	load_baudrate = current_baudrate = gd->baudrate;

	if (argc >= 2) {
		offset = simple_strtoul(argv[1], NULL, 16);
c7e04028:	e1a0a000 	mov	sl, r0
	}
	if (argc == 3) {
c7e0402c:	1a0000e8 	bne	c7e043d4 <do_load_serial_bin+0x404>
		load_baudrate = (int)simple_strtoul(argv[2], NULL, 10);
c7e04030:	e5940008 	ldr	r0, [r4, #8]
c7e04034:	e3a01000 	mov	r1, #0	; 0x0
c7e04038:	e3a0200a 	mov	r2, #10	; 0xa
c7e0403c:	eb007bc7 	bl	c7e22f60 <simple_strtoul>

		/* default to current baudrate */
		if (load_baudrate == 0)
c7e04040:	e3500000 	cmp	r0, #0	; 0x0
c7e04044:	e58d0004 	str	r0, [sp, #4]
c7e04048:	0a0000e1 	beq	c7e043d4 <do_load_serial_bin+0x404>
			load_baudrate = current_baudrate;
	}

	if (load_baudrate != current_baudrate) {
c7e0404c:	e59d2000 	ldr	r2, [sp]
c7e04050:	e1500002 	cmp	r0, r2
c7e04054:	0a00000c 	beq	c7e0408c <do_load_serial_bin+0xbc>
		printf ("## Switch baudrate to %d bps and press ENTER ...\n",
c7e04058:	e1a01000 	mov	r1, r0
c7e0405c:	e59f0390 	ldr	r0, [pc, #912]	; c7e043f4 <do_load_serial_bin+0x424>
c7e04060:	eb00127c 	bl	c7e08a58 <printf>
			load_baudrate);
		udelay(50000);
c7e04064:	e59f038c 	ldr	r0, [pc, #908]	; c7e043f8 <do_load_serial_bin+0x428>
c7e04068:	eb007b96 	bl	c7e22ec8 <udelay>
		gd->baudrate = load_baudrate;
c7e0406c:	e59d2004 	ldr	r2, [sp, #4]
c7e04070:	e5882008 	str	r2, [r8, #8]
		serial_setbrg ();
c7e04074:	eb00580b 	bl	c7e1a0a8 <serial_setbrg>
		udelay(50000);
c7e04078:	e59f0378 	ldr	r0, [pc, #888]	; c7e043f8 <do_load_serial_bin+0x428>
c7e0407c:	eb007b91 	bl	c7e22ec8 <udelay>
		for (;;) {
			if (getc() == '\r')
c7e04080:	eb001317 	bl	c7e08ce4 <getc>
c7e04084:	e350000d 	cmp	r0, #13	; 0xd
c7e04088:	1afffffc 	bne	c7e04080 <do_load_serial_bin+0xb0>
				break;
		}
	}

	if (strcmp(argv[0],"loady")==0) {
c7e0408c:	e5940000 	ldr	r0, [r4]
c7e04090:	e59f1364 	ldr	r1, [pc, #868]	; c7e043fc <do_load_serial_bin+0x42c>
c7e04094:	eb0079f1 	bl	c7e22860 <strcmp>
c7e04098:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0409c:	1a000006 	bne	c7e040bc <do_load_serial_bin+0xec>
		printf ("## Ready for binary (ymodem) download "
c7e040a0:	e1a0100a 	mov	r1, sl
c7e040a4:	e59d2004 	ldr	r2, [sp, #4]
c7e040a8:	e59f0350 	ldr	r0, [pc, #848]	; c7e04400 <do_load_serial_bin+0x430>
c7e040ac:	eb001269 	bl	c7e08a58 <printf>
			"to 0x%08lX at %d bps...\n",
			offset,
			load_baudrate);

		addr = load_serial_ymodem (offset);
c7e040b0:	e1a0000a 	mov	r0, sl
c7e040b4:	ebffff7b 	bl	c7e03ea8 <load_serial_ymodem>
c7e040b8:	ea0000b2 	b	c7e04388 <do_load_serial_bin+0x3b8>

	} else {

		printf ("## Ready for binary (kermit) download "
c7e040bc:	e1a0100a 	mov	r1, sl
c7e040c0:	e59d2004 	ldr	r2, [sp, #4]
c7e040c4:	e59f0338 	ldr	r0, [pc, #824]	; c7e04404 <do_load_serial_bin+0x434>
c7e040c8:	eb001262 	bl	c7e08a58 <printf>
	}
}

static void set_kerm_bin_mode (unsigned long *addr)
{
	bin_start_address = (char *) addr;
c7e040cc:	e59f3334 	ldr	r3, [pc, #820]	; c7e04408 <do_load_serial_bin+0x438>

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
	his_pad_count = 0;
	his_pad_char = '\0';
	his_quote = K_ESCAPE;
c7e040d0:	e3a02023 	mov	r2, #35	; 0x23
c7e040d4:	e5c32024 	strb	r2, [r3, #36]
}

static void set_kerm_bin_mode (unsigned long *addr)
{
	bin_start_address = (char *) addr;
	os_data_init = bin_data_init;
c7e040d8:	e59f232c 	ldr	r2, [pc, #812]	; c7e0440c <do_load_serial_bin+0x43c>
	int n, last_n;
	int len_lo, len_hi;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
	his_pad_count = 0;
c7e040dc:	e3a04000 	mov	r4, #0	; 0x0
}

static void set_kerm_bin_mode (unsigned long *addr)
{
	bin_start_address = (char *) addr;
	os_data_init = bin_data_init;
c7e040e0:	e5832010 	str	r2, [r3, #16]
	os_data_char = bin_data_char;
c7e040e4:	e59f2324 	ldr	r2, [pc, #804]	; c7e04410 <do_load_serial_bin+0x440>
	}
}

static void set_kerm_bin_mode (unsigned long *addr)
{
	bin_start_address = (char *) addr;
c7e040e8:	e583a008 	str	sl, [r3, #8]
	os_data_init = bin_data_init;
	os_data_char = bin_data_char;
c7e040ec:	e5832020 	str	r2, [r3, #32]
	int length;
	int n, last_n;
	int len_lo, len_hi;

	/* initialize some protocol parameters */
	his_eol = END_CHAR;		/* default end of line character */
c7e040f0:	e3a0200d 	mov	r2, #13	; 0xd
c7e040f4:	e5c3202d 	strb	r2, [r3, #45]
	his_pad_count = 0;
c7e040f8:	e5834028 	str	r4, [r3, #40]
	his_pad_char = '\0';
c7e040fc:	e5c3402c 	strb	r4, [r3, #44]
	his_quote = K_ESCAPE;

	/* initialize the k_recv and k_data state machine */
	done = 0;
	k_state = 0;
	k_data_init ();
c7e04100:	ebfffe84 	bl	c7e03b18 <k_data_init>
	k_state_saved = k_state;
	k_data_save ();
c7e04104:	ebfffe8b 	bl	c7e03b38 <k_data_save>
c7e04108:	e3e05000 	mvn	r5, #0	; 0x0
	 */

	/* enter main loop */
	while (!done) {
		/* set the send packet pointer to begining of send packet parms */
		send_ptr = send_parms;
c7e0410c:	e59f22f4 	ldr	r2, [pc, #756]	; c7e04408 <do_load_serial_bin+0x438>
c7e04110:	e2823034 	add	r3, r2, #52	; 0x34
c7e04114:	e5823030 	str	r3, [r2, #48]
#endif

		/* get a packet */
		/* wait for the starting character or ^C */
		for (;;) {
			switch (getc ()) {
c7e04118:	eb0012f1 	bl	c7e08ce4 <getc>
c7e0411c:	e3500001 	cmp	r0, #1	; 0x1
c7e04120:	0a000002 	beq	c7e04130 <do_load_serial_bin+0x160>
c7e04124:	e3500003 	cmp	r0, #3	; 0x3
c7e04128:	1afffffa 	bne	c7e04118 <do_load_serial_bin+0x148>
c7e0412c:	ea00006d 	b	c7e042e8 <do_load_serial_bin+0x318>
			}
		}
START:
		/* get length of packet */
		sum = 0;
		new_char = getc ();
c7e04130:	eb0012eb 	bl	c7e08ce4 <getc>
		if ((new_char & 0xE0) == 0)
c7e04134:	e31000e0 	tst	r0, #224	; 0xe0
c7e04138:	e200b0ff 	and	fp, r0, #255	; 0xff
c7e0413c:	0a000058 	beq	c7e042a4 <do_load_serial_bin+0x2d4>
			goto packet_error;
		sum += new_char & 0xff;
		length = untochar (new_char);
		/* get sequence number */
		new_char = getc ();
c7e04140:	eb0012e7 	bl	c7e08ce4 <getc>
		if ((new_char & 0xE0) == 0)
c7e04144:	e31000e0 	tst	r0, #224	; 0xe0
c7e04148:	e20060ff 	and	r6, r0, #255	; 0xff
c7e0414c:	0a000054 	beq	c7e042a4 <do_load_serial_bin+0x2d4>
			goto packet_error;
		sum += new_char & 0xff;
		n = untochar (new_char);
c7e04150:	e2463020 	sub	r3, r6, #32	; 0x20
c7e04154:	e20370ff 	and	r7, r3, #255	; 0xff
		 * received.  Handling an invalid sequence number adds another layer
		 * of complexity that may not be needed - yet!  At this time, I'm hoping
		 * that I don't need to buffer the incoming data packets and can write
		 * the data into memory in real time.
		 */
		if (n == last_n) {
c7e04158:	e1570005 	cmp	r7, r5
c7e0415c:	1a000001 	bne	c7e04168 <do_load_serial_bin+0x198>
			/* same sequence number, restore the previous state */
			k_state = k_state_saved;
			k_data_restore ();
c7e04160:	ebfffe7c 	bl	c7e03b58 <k_data_restore>
c7e04164:	ea000000 	b	c7e0416c <do_load_serial_bin+0x19c>
		} else {
			/* new sequence number, checkpoint the download */
			last_n = n;
			k_state_saved = k_state;
			k_data_save ();
c7e04168:	ebfffe72 	bl	c7e03b38 <k_data_save>
		}
		/* END NEW CODE */

		/* get packet type */
		new_char = getc ();
c7e0416c:	eb0012dc 	bl	c7e08ce4 <getc>
		if ((new_char & 0xE0) == 0)
c7e04170:	e31000e0 	tst	r0, #224	; 0xe0
			k_data_save ();
		}
		/* END NEW CODE */

		/* get packet type */
		new_char = getc ();
c7e04174:	e20090ff 	and	r9, r0, #255	; 0xff
		if ((new_char & 0xE0) == 0)
c7e04178:	0a000047 	beq	c7e0429c <do_load_serial_bin+0x2cc>
		sum = 0;
		new_char = getc ();
		if ((new_char & 0xE0) == 0)
			goto packet_error;
		sum += new_char & 0xff;
		length = untochar (new_char);
c7e0417c:	e24b3020 	sub	r3, fp, #32	; 0x20
c7e04180:	e20330ff 	and	r3, r3, #255	; 0xff
		new_char = getc ();
		if ((new_char & 0xE0) == 0)
			goto packet_error;
		sum += new_char & 0xff;
		k_state = new_char;
		--length;
c7e04184:	e2435002 	sub	r5, r3, #2	; 0x2
		/* check for extended length */
		if (length == -2) {
c7e04188:	e3750002 	cmn	r5, #2	; 0x2
		length = untochar (new_char);
		/* get sequence number */
		new_char = getc ();
		if ((new_char & 0xE0) == 0)
			goto packet_error;
		sum += new_char & 0xff;
c7e0418c:	e086300b 	add	r3, r6, fp

		/* get packet type */
		new_char = getc ();
		if ((new_char & 0xE0) == 0)
			goto packet_error;
		sum += new_char & 0xff;
c7e04190:	e0836009 	add	r6, r3, r9
		k_state = new_char;
		--length;
		/* check for extended length */
		if (length == -2) {
c7e04194:	1a000030 	bne	c7e0425c <do_load_serial_bin+0x28c>
			/* (length byte was 0, decremented twice) */
			/* get the two length bytes */
			new_char = getc ();
c7e04198:	eb0012d1 	bl	c7e08ce4 <getc>
			if ((new_char & 0xE0) == 0)
c7e0419c:	e31000e0 	tst	r0, #224	; 0xe0
c7e041a0:	e20050ff 	and	r5, r0, #255	; 0xff
c7e041a4:	0a00003c 	beq	c7e0429c <do_load_serial_bin+0x2cc>
				goto packet_error;
			sum += new_char & 0xff;
			len_hi = untochar (new_char);
			new_char = getc ();
c7e041a8:	eb0012cd 	bl	c7e08ce4 <getc>
			if ((new_char & 0xE0) == 0)
c7e041ac:	e31000e0 	tst	r0, #224	; 0xe0
c7e041b0:	e20040ff 	and	r4, r0, #255	; 0xff
c7e041b4:	0a000038 	beq	c7e0429c <do_load_serial_bin+0x2cc>
				goto packet_error;
			sum += new_char & 0xff;
			len_lo = untochar (new_char);
			length = len_hi * 95 + len_lo;
			/* check header checksum */
			new_char = getc ();
c7e041b8:	eb0012c9 	bl	c7e08ce4 <getc>
			if ((new_char & 0xE0) == 0)
c7e041bc:	e31000e0 	tst	r0, #224	; 0xe0
				goto packet_error;
			sum += new_char & 0xff;
			len_lo = untochar (new_char);
			length = len_hi * 95 + len_lo;
			/* check header checksum */
			new_char = getc ();
c7e041c0:	e200c0ff 	and	ip, r0, #255	; 0xff
			if ((new_char & 0xE0) == 0)
c7e041c4:	0a000034 	beq	c7e0429c <do_load_serial_bin+0x2cc>
			/* (length byte was 0, decremented twice) */
			/* get the two length bytes */
			new_char = getc ();
			if ((new_char & 0xE0) == 0)
				goto packet_error;
			sum += new_char & 0xff;
c7e041c8:	e0853006 	add	r3, r5, r6
			len_hi = untochar (new_char);
			new_char = getc ();
			if ((new_char & 0xE0) == 0)
				goto packet_error;
			sum += new_char & 0xff;
c7e041cc:	e0830004 	add	r0, r3, r4
			length = len_hi * 95 + len_lo;
			/* check header checksum */
			new_char = getc ();
			if ((new_char & 0xE0) == 0)
				goto packet_error;
			if (new_char != tochar ((sum + ((sum >> 6) & 0x03)) & 0x3f))
c7e041d0:	e1a03c00 	lsl	r3, r0, #24
c7e041d4:	e0803f23 	add	r3, r0, r3, lsr #30
c7e041d8:	e203303f 	and	r3, r3, #63	; 0x3f
c7e041dc:	e2833020 	add	r3, r3, #32	; 0x20
c7e041e0:	e15c0003 	cmp	ip, r3
c7e041e4:	1a00002c 	bne	c7e0429c <do_load_serial_bin+0x2cc>
			new_char = getc ();
			if ((new_char & 0xE0) == 0)
				goto packet_error;
			sum += new_char & 0xff;
			len_lo = untochar (new_char);
			length = len_hi * 95 + len_lo;
c7e041e8:	e2452020 	sub	r2, r5, #32	; 0x20
c7e041ec:	e2443020 	sub	r3, r4, #32	; 0x20
c7e041f0:	e20330ff 	and	r3, r3, #255	; 0xff
c7e041f4:	e20220ff 	and	r2, r2, #255	; 0xff
c7e041f8:	e3a0105f 	mov	r1, #95	; 0x5f
c7e041fc:	e0253291 	mla	r5, r1, r2, r3
			new_char = getc ();
			if ((new_char & 0xE0) == 0)
				goto packet_error;
			if (new_char != tochar ((sum + ((sum >> 6) & 0x03)) & 0x3f))
				goto packet_error;
			sum += new_char & 0xff;
c7e04200:	e08c6000 	add	r6, ip, r0
c7e04204:	ea000014 	b	c7e0425c <do_load_serial_bin+0x28c>
/* --length; */ /* new length includes only data and block check to come */
		}
		/* bring in rest of packet */
		while (length > 1) {
			new_char = getc ();
c7e04208:	eb0012b5 	bl	c7e08ce4 <getc>
			if ((new_char & 0xE0) == 0)
c7e0420c:	e31000e0 	tst	r0, #224	; 0xe0
			sum += new_char & 0xff;
/* --length; */ /* new length includes only data and block check to come */
		}
		/* bring in rest of packet */
		while (length > 1) {
			new_char = getc ();
c7e04210:	e20040ff 	and	r4, r0, #255	; 0xff
			if ((new_char & 0xE0) == 0)
c7e04214:	0a000020 	beq	c7e0429c <do_load_serial_bin+0x2cc>
				goto packet_error;
			sum += new_char & 0xff;
			--length;
			if (k_state == DATA_TYPE) {
c7e04218:	e3590044 	cmp	r9, #68	; 0x44
c7e0421c:	1a000002 	bne	c7e0422c <do_load_serial_bin+0x25c>
				/* pass on the data if this is a data packet */
				k_data_char (new_char);
c7e04220:	e1a00004 	mov	r0, r4
c7e04224:	ebfffe53 	bl	c7e03b78 <k_data_char>
c7e04228:	ea000009 	b	c7e04254 <do_load_serial_bin+0x284>
			} else if (k_state == SEND_TYPE) {
c7e0422c:	e3590053 	cmp	r9, #83	; 0x53
c7e04230:	1a000007 	bne	c7e04254 <do_load_serial_bin+0x284>
				/* save send pack in buffer as is */
				*send_ptr++ = new_char;
c7e04234:	e59f11cc 	ldr	r1, [pc, #460]	; c7e04408 <do_load_serial_bin+0x438>
c7e04238:	e5910030 	ldr	r0, [r1, #48]
				/* if too much data, back off the pointer */
				if (send_ptr >= &send_parms[SEND_DATA_SIZE])
c7e0423c:	e2812048 	add	r2, r1, #72	; 0x48
			if (k_state == DATA_TYPE) {
				/* pass on the data if this is a data packet */
				k_data_char (new_char);
			} else if (k_state == SEND_TYPE) {
				/* save send pack in buffer as is */
				*send_ptr++ = new_char;
c7e04240:	e1a03000 	mov	r3, r0
c7e04244:	e4c34001 	strb	r4, [r3], #1
				/* if too much data, back off the pointer */
				if (send_ptr >= &send_parms[SEND_DATA_SIZE])
c7e04248:	e1530002 	cmp	r3, r2
			if (k_state == DATA_TYPE) {
				/* pass on the data if this is a data packet */
				k_data_char (new_char);
			} else if (k_state == SEND_TYPE) {
				/* save send pack in buffer as is */
				*send_ptr++ = new_char;
c7e0424c:	e5813030 	str	r3, [r1, #48]
				/* if too much data, back off the pointer */
				if (send_ptr >= &send_parms[SEND_DATA_SIZE])
					--send_ptr;
c7e04250:	25810030 	strcs	r0, [r1, #48]
		/* bring in rest of packet */
		while (length > 1) {
			new_char = getc ();
			if ((new_char & 0xE0) == 0)
				goto packet_error;
			sum += new_char & 0xff;
c7e04254:	e0866004 	add	r6, r6, r4
			--length;
c7e04258:	e2455001 	sub	r5, r5, #1	; 0x1
				goto packet_error;
			sum += new_char & 0xff;
/* --length; */ /* new length includes only data and block check to come */
		}
		/* bring in rest of packet */
		while (length > 1) {
c7e0425c:	e3550001 	cmp	r5, #1	; 0x1
c7e04260:	caffffe8 	bgt	c7e04208 <do_load_serial_bin+0x238>
				if (send_ptr >= &send_parms[SEND_DATA_SIZE])
					--send_ptr;
			}
		}
		/* get and validate checksum character */
		new_char = getc ();
c7e04264:	eb00129e 	bl	c7e08ce4 <getc>
		if ((new_char & 0xE0) == 0)
c7e04268:	e31000e0 	tst	r0, #224	; 0xe0
				if (send_ptr >= &send_parms[SEND_DATA_SIZE])
					--send_ptr;
			}
		}
		/* get and validate checksum character */
		new_char = getc ();
c7e0426c:	e20000ff 	and	r0, r0, #255	; 0xff
		if ((new_char & 0xE0) == 0)
c7e04270:	0a000009 	beq	c7e0429c <do_load_serial_bin+0x2cc>
			goto packet_error;
		if (new_char != tochar ((sum + ((sum >> 6) & 0x03)) & 0x3f))
c7e04274:	e1a03c06 	lsl	r3, r6, #24
c7e04278:	e0863f23 	add	r3, r6, r3, lsr #30
c7e0427c:	e203303f 	and	r3, r3, #63	; 0x3f
c7e04280:	e2833020 	add	r3, r3, #32	; 0x20
c7e04284:	e1500003 	cmp	r0, r3
c7e04288:	1a000003 	bne	c7e0429c <do_load_serial_bin+0x2cc>
			goto packet_error;
		/* get END_CHAR */
		new_char = getc ();
c7e0428c:	eb001294 	bl	c7e08ce4 <getc>
		if (new_char != END_CHAR) {
c7e04290:	e20000ff 	and	r0, r0, #255	; 0xff
c7e04294:	e350000d 	cmp	r0, #13	; 0xd
c7e04298:	0a000006 	beq	c7e042b8 <do_load_serial_bin+0x2e8>
		  packet_error:
c7e0429c:	e1a05007 	mov	r5, r7
c7e042a0:	e1a04007 	mov	r4, r7
			/* restore state machines */
			k_state = k_state_saved;
			k_data_restore ();
c7e042a4:	ebfffe2b 	bl	c7e03b58 <k_data_restore>
			/* send a negative acknowledge packet in */
			send_nack (n);
c7e042a8:	e1a00004 	mov	r0, r4
c7e042ac:	ebfffecd 	bl	c7e03de8 <send_nack>
c7e042b0:	e1a07005 	mov	r7, r5
c7e042b4:	ea000009 	b	c7e042e0 <do_load_serial_bin+0x310>
		} else if (k_state == SEND_TYPE) {
c7e042b8:	e3590053 	cmp	r9, #83	; 0x53
c7e042bc:	1a000002 	bne	c7e042cc <do_load_serial_bin+0x2fc>
			/* crack the protocol parms, build an appropriate ack packet */
			handle_send_packet (n);
c7e042c0:	e1a00007 	mov	r0, r7
c7e042c4:	ebfffe56 	bl	c7e03c24 <handle_send_packet>
c7e042c8:	ea000003 	b	c7e042dc <do_load_serial_bin+0x30c>
		} else {
			/* send simple acknowledge packet in */
			send_ack (n);
c7e042cc:	e1a00007 	mov	r0, r7
c7e042d0:	ebfffedc 	bl	c7e03e48 <send_ack>
			/* quit if end of transmission */
			if (k_state == BREAK_TYPE)
c7e042d4:	e3590042 	cmp	r9, #66	; 0x42
c7e042d8:	0a000040 	beq	c7e043e0 <do_load_serial_bin+0x410>
c7e042dc:	e1a04007 	mov	r4, r7
c7e042e0:	e1a05007 	mov	r5, r7
c7e042e4:	eaffff88 	b	c7e0410c <do_load_serial_bin+0x13c>
c7e042e8:	e3a05000 	mov	r5, #0	; 0x0
c7e042ec:	e3a04000 	mov	r4, #0	; 0x0
	 * Gather any trailing characters (for instance, the ^D which
	 * is sent by 'cu' after sending a file), and give the
	 * box some time (100 * 1 ms)
	 */
	for (i=0; i<100; ++i) {
		if (tstc()) {
c7e042f0:	eb001272 	bl	c7e08cc0 <tstc>
c7e042f4:	e3500000 	cmp	r0, #0	; 0x0
	/*
	 * Gather any trailing characters (for instance, the ^D which
	 * is sent by 'cu' after sending a file), and give the
	 * box some time (100 * 1 ms)
	 */
	for (i=0; i<100; ++i) {
c7e042f8:	e2844001 	add	r4, r4, #1	; 0x1
		if (tstc()) {
c7e042fc:	0a000000 	beq	c7e04304 <do_load_serial_bin+0x334>
			(void) getc();
c7e04300:	eb001277 	bl	c7e08ce4 <getc>
		}
		udelay(1000);
c7e04304:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c7e04308:	eb007aee 	bl	c7e22ec8 <udelay>
	/*
	 * Gather any trailing characters (for instance, the ^D which
	 * is sent by 'cu' after sending a file), and give the
	 * box some time (100 * 1 ms)
	 */
	for (i=0; i<100; ++i) {
c7e0430c:	e3540064 	cmp	r4, #100	; 0x64
c7e04310:	1afffff6 	bne	c7e042f0 <do_load_serial_bin+0x320>
			(void) getc();
		}
		udelay(1000);
	}

	flush_cache (offset, size);
c7e04314:	e1a0000a 	mov	r0, sl
c7e04318:	e1a01005 	mov	r1, r5
c7e0431c:	ebfff417 	bl	c7e01380 <__flush_cache>

	printf("## Total Size      = 0x%08x = %d Bytes\n", size, size);
	sprintf(buf, "%X", size);
c7e04320:	e28d4008 	add	r4, sp, #8	; 0x8
		udelay(1000);
	}

	flush_cache (offset, size);

	printf("## Total Size      = 0x%08x = %d Bytes\n", size, size);
c7e04324:	e1a01005 	mov	r1, r5
c7e04328:	e1a02005 	mov	r2, r5
c7e0432c:	e59f00e0 	ldr	r0, [pc, #224]	; c7e04414 <do_load_serial_bin+0x444>
c7e04330:	eb0011c8 	bl	c7e08a58 <printf>
	sprintf(buf, "%X", size);
c7e04334:	e1a02005 	mov	r2, r5
c7e04338:	e59f10d8 	ldr	r1, [pc, #216]	; c7e04418 <do_load_serial_bin+0x448>
c7e0433c:	e1a00004 	mov	r0, r4
c7e04340:	eb007eba 	bl	c7e23e30 <sprintf>
	setenv("filesize", buf);
c7e04344:	e1a01004 	mov	r1, r4
c7e04348:	e59f00cc 	ldr	r0, [pc, #204]	; c7e0441c <do_load_serial_bin+0x44c>
c7e0434c:	eb000cbf 	bl	c7e07650 <setenv>
			"to 0x%08lX at %d bps...\n",
			offset,
			load_baudrate);
		addr = load_serial_bin (offset);

		if (addr == ~0) {
c7e04350:	e37a0001 	cmn	sl, #1	; 0x1
c7e04354:	e59f40c4 	ldr	r4, [pc, #196]	; c7e04420 <do_load_serial_bin+0x450>
c7e04358:	1a000005 	bne	c7e04374 <do_load_serial_bin+0x3a4>
			load_addr = 0;
c7e0435c:	e3a03000 	mov	r3, #0	; 0x0
c7e04360:	e5843000 	str	r3, [r4]
			printf ("## Binary (kermit) download aborted\n");
c7e04364:	e59f00b8 	ldr	r0, [pc, #184]	; c7e04424 <do_load_serial_bin+0x454>
c7e04368:	e3a04001 	mov	r4, #1	; 0x1
c7e0436c:	eb0011b9 	bl	c7e08a58 <printf>
c7e04370:	ea000004 	b	c7e04388 <do_load_serial_bin+0x3b8>
			rcode = 1;
		} else {
			printf ("## Start Addr      = 0x%08lX\n", addr);
c7e04374:	e59f00ac 	ldr	r0, [pc, #172]	; c7e04428 <do_load_serial_bin+0x458>
c7e04378:	e1a0100a 	mov	r1, sl
c7e0437c:	eb0011b5 	bl	c7e08a58 <printf>
			load_addr = addr;
c7e04380:	e584a000 	str	sl, [r4]
c7e04384:	e3a04000 	mov	r4, #0	; 0x0
		}
	}
	if (load_baudrate != current_baudrate) {
c7e04388:	e89d000c 	ldm	sp, {r2, r3}
c7e0438c:	e1530002 	cmp	r3, r2
c7e04390:	0a00000c 	beq	c7e043c8 <do_load_serial_bin+0x3f8>
		printf ("## Switch baudrate to %d bps and press ESC ...\n",
c7e04394:	e1a01002 	mov	r1, r2
c7e04398:	e59f008c 	ldr	r0, [pc, #140]	; c7e0442c <do_load_serial_bin+0x45c>
c7e0439c:	eb0011ad 	bl	c7e08a58 <printf>
			current_baudrate);
		udelay (50000);
c7e043a0:	e59f0050 	ldr	r0, [pc, #80]	; c7e043f8 <do_load_serial_bin+0x428>
c7e043a4:	eb007ac7 	bl	c7e22ec8 <udelay>
		gd->baudrate = current_baudrate;
c7e043a8:	e59d2000 	ldr	r2, [sp]
c7e043ac:	e5882008 	str	r2, [r8, #8]
		serial_setbrg ();
c7e043b0:	eb00573c 	bl	c7e1a0a8 <serial_setbrg>
		udelay (50000);
c7e043b4:	e59f003c 	ldr	r0, [pc, #60]	; c7e043f8 <do_load_serial_bin+0x428>
c7e043b8:	eb007ac2 	bl	c7e22ec8 <udelay>
		for (;;) {
			if (getc() == 0x1B) /* ESC */
c7e043bc:	eb001248 	bl	c7e08ce4 <getc>
c7e043c0:	e350001b 	cmp	r0, #27	; 0x1b
c7e043c4:	1afffffc 	bne	c7e043bc <do_load_serial_bin+0x3ec>
				break;
		}
	}

	return rcode;
}
c7e043c8:	e1a00004 	mov	r0, r4
c7e043cc:	e28dd028 	add	sp, sp, #40	; 0x28
c7e043d0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
		udelay (50000);
		gd->baudrate = current_baudrate;
		serial_setbrg ();
		udelay (50000);
		for (;;) {
			if (getc() == 0x1B) /* ESC */
c7e043d4:	e59d3000 	ldr	r3, [sp]
c7e043d8:	e58d3004 	str	r3, [sp, #4]
c7e043dc:	eaffff2a 	b	c7e0408c <do_load_serial_bin+0xbc>
			/* quit if end of transmission */
			if (k_state == BREAK_TYPE)
				done = 1;
		}
	}
	return ((ulong) os_data_addr - (ulong) bin_start_address);
c7e043e0:	e59f3020 	ldr	r3, [pc, #32]	; c7e04408 <do_load_serial_bin+0x438>
c7e043e4:	e9930024 	ldmib	r3, {r2, r5}
c7e043e8:	e0425005 	sub	r5, r2, r5
c7e043ec:	eaffffbe 	b	c7e042ec <do_load_serial_bin+0x31c>
c7e043f0:	c7e2de92 	.word	0xc7e2de92
c7e043f4:	c7e2fb55 	.word	0xc7e2fb55
c7e043f8:	0000c350 	.word	0x0000c350
c7e043fc:	c7e2fb87 	.word	0xc7e2fb87
c7e04400:	c7e2fb8d 	.word	0xc7e2fb8d
c7e04404:	c7e2fbcc 	.word	0xc7e2fbcc
c7e04408:	c7e40134 	.word	0xc7e40134
c7e0440c:	c7e03adc 	.word	0xc7e03adc
c7e04410:	c7e03af8 	.word	0xc7e03af8
c7e04414:	c7e2fb2d 	.word	0xc7e2fb2d
c7e04418:	c7e2f501 	.word	0xc7e2f501
c7e0441c:	c7e2e9fc 	.word	0xc7e2e9fc
c7e04420:	c7e353cc 	.word	0xc7e353cc
c7e04424:	c7e2fc0b 	.word	0xc7e2fc0b
c7e04428:	c7e2fc30 	.word	0xc7e2fc30
c7e0442c:	c7e2fc4e 	.word	0xc7e2fc4e

c7e04430 <load_serial>:
	return rcode;
}

static ulong
load_serial (long offset)
{
c7e04430:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
c7e04434:	e3a06000 	mov	r6, #0	; 0x0
c7e04438:	e24ddfcf 	sub	sp, sp, #828	; 0x33c
c7e0443c:	e1a09000 	mov	r9, r0
c7e04440:	e3e07000 	mvn	r7, #0	; 0x0
c7e04444:	e1a0a006 	mov	sl, r6
c7e04448:	ea000048 	b	c7e04570 <load_serial+0x140>
	ulong	start_addr = ~0;
	ulong	end_addr   =  0;
	int	line_count =  0;

	while (read_record(record, SREC_MAXRECLEN + 1) >= 0) {
		type = srec_decode (record, &binlen, &addr, binbuf);
c7e0444c:	e28d3f85 	add	r3, sp, #532	; 0x214
c7e04450:	e2433003 	sub	r3, r3, #3	; 0x3
c7e04454:	e28d000c 	add	r0, sp, #12	; 0xc
c7e04458:	e28d1fcd 	add	r1, sp, #820	; 0x334
c7e0445c:	e28d2e33 	add	r2, sp, #816	; 0x330
c7e04460:	eb0028c4 	bl	c7e0e778 <srec_decode>

		if (type < 0) {
c7e04464:	e3500000 	cmp	r0, #0	; 0x0
c7e04468:	ba000066 	blt	c7e04608 <load_serial+0x1d8>
			return (~0);		/* Invalid S-Record		*/
		}

		switch (type) {
c7e0446c:	e2403001 	sub	r3, r0, #1	; 0x1
c7e04470:	e3530008 	cmp	r3, #8	; 0x8
c7e04474:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e04478:	ea00002e 	b	c7e04538 <load_serial+0x108>
c7e0447c:	c7e044a0 	.word	0xc7e044a0
c7e04480:	c7e044a0 	.word	0xc7e044a0
c7e04484:	c7e044a0 	.word	0xc7e044a0
c7e04488:	c7e04538 	.word	0xc7e04538
c7e0448c:	c7e04538 	.word	0xc7e04538
c7e04490:	c7e04538 	.word	0xc7e04538
c7e04494:	c7e044dc 	.word	0xc7e044dc
c7e04498:	c7e044dc 	.word	0xc7e044dc
c7e0449c:	c7e044dc 	.word	0xc7e044dc
		case SREC_DATA2:
		case SREC_DATA3:
		case SREC_DATA4:
		    store_addr = addr + offset;
c7e044a0:	e59d4330 	ldr	r4, [sp, #816]
				return (~0);
			}
		    } else
#endif
		    {
			memcpy ((char *)(store_addr), binbuf, binlen);
c7e044a4:	e28d1f85 	add	r1, sp, #532	; 0x214

		switch (type) {
		case SREC_DATA2:
		case SREC_DATA3:
		case SREC_DATA4:
		    store_addr = addr + offset;
c7e044a8:	e0894004 	add	r4, r9, r4
				return (~0);
			}
		    } else
#endif
		    {
			memcpy ((char *)(store_addr), binbuf, binlen);
c7e044ac:	e1a00004 	mov	r0, r4
c7e044b0:	e2411003 	sub	r1, r1, #3	; 0x3
c7e044b4:	e59d2334 	ldr	r2, [sp, #820]
c7e044b8:	eb0079df 	bl	c7e22c3c <memcpy>
		    }
		    if ((store_addr) < start_addr)
			start_addr = store_addr;
		    if ((store_addr + binlen - 1) > end_addr)
c7e044bc:	e59d3334 	ldr	r3, [sp, #820]
				return (~0);
			}
		    } else
#endif
		    {
			memcpy ((char *)(store_addr), binbuf, binlen);
c7e044c0:	e1570004 	cmp	r7, r4
c7e044c4:	21a07004 	movcs	r7, r4
		    }
		    if ((store_addr) < start_addr)
			start_addr = store_addr;
		    if ((store_addr + binlen - 1) > end_addr)
c7e044c8:	e2433001 	sub	r3, r3, #1	; 0x1
c7e044cc:	e0834004 	add	r4, r3, r4
c7e044d0:	e1540006 	cmp	r4, r6
c7e044d4:	8a000018 	bhi	c7e0453c <load_serial+0x10c>
c7e044d8:	ea000016 	b	c7e04538 <load_serial+0x108>
		    break;
		case SREC_END2:
		case SREC_END3:
		case SREC_END4:
		    udelay (10000);
		    size = end_addr - start_addr + 1;
c7e044dc:	e2864001 	add	r4, r6, #1	; 0x1
c7e044e0:	e0674004 	rsb	r4, r7, r4
			end_addr = store_addr + binlen - 1;
		    break;
		case SREC_END2:
		case SREC_END3:
		case SREC_END4:
		    udelay (10000);
c7e044e4:	e59f0128 	ldr	r0, [pc, #296]	; c7e04614 <load_serial+0x1e4>
c7e044e8:	eb007a76 	bl	c7e22ec8 <udelay>
		    size = end_addr - start_addr + 1;
		    printf ("\n"
c7e044ec:	e1a03004 	mov	r3, r4
c7e044f0:	e1a02006 	mov	r2, r6
c7e044f4:	e1a01007 	mov	r1, r7
c7e044f8:	e59f0118 	ldr	r0, [pc, #280]	; c7e04618 <load_serial+0x1e8>
			    "## Last  Load Addr = 0x%08lX\n"
			    "## Total Size      = 0x%08lX = %ld Bytes\n",
			    start_addr, end_addr, size, size
		    );
		    flush_cache (start_addr, size);
		    sprintf(buf, "%lX", size);
c7e044fc:	e28d5e31 	add	r5, sp, #784	; 0x310
		case SREC_END2:
		case SREC_END3:
		case SREC_END4:
		    udelay (10000);
		    size = end_addr - start_addr + 1;
		    printf ("\n"
c7e04500:	e58d4000 	str	r4, [sp]
c7e04504:	eb001153 	bl	c7e08a58 <printf>
			    "## First Load Addr = 0x%08lX\n"
			    "## Last  Load Addr = 0x%08lX\n"
			    "## Total Size      = 0x%08lX = %ld Bytes\n",
			    start_addr, end_addr, size, size
		    );
		    flush_cache (start_addr, size);
c7e04508:	e1a00007 	mov	r0, r7
c7e0450c:	e1a01004 	mov	r1, r4
c7e04510:	ebfff39a 	bl	c7e01380 <__flush_cache>
		    sprintf(buf, "%lX", size);
c7e04514:	e1a02004 	mov	r2, r4
c7e04518:	e59f10fc 	ldr	r1, [pc, #252]	; c7e0461c <load_serial+0x1ec>
c7e0451c:	e1a00005 	mov	r0, r5
c7e04520:	eb007e42 	bl	c7e23e30 <sprintf>
		    setenv("filesize", buf);
c7e04524:	e1a01005 	mov	r1, r5
c7e04528:	e59f00f0 	ldr	r0, [pc, #240]	; c7e04620 <load_serial+0x1f0>
c7e0452c:	eb000c47 	bl	c7e07650 <setenv>
		    return (addr);
c7e04530:	e59d0330 	ldr	r0, [sp, #816]
c7e04534:	ea000034 	b	c7e0460c <load_serial+0x1dc>
c7e04538:	e1a04006 	mov	r4, r6
		case SREC_START:
		    break;
		default:
		    break;
		}
		if (!do_echo) {	/* print a '.' every 100 lines */
c7e0453c:	e59f30e0 	ldr	r3, [pc, #224]	; c7e04624 <load_serial+0x1f4>
c7e04540:	e5933000 	ldr	r3, [r3]
c7e04544:	e3530000 	cmp	r3, #0	; 0x0
c7e04548:	1a000007 	bne	c7e0456c <load_serial+0x13c>
			if ((++line_count % 100) == 0)
c7e0454c:	e28aa001 	add	sl, sl, #1	; 0x1
c7e04550:	e1a0000a 	mov	r0, sl
c7e04554:	e3a01064 	mov	r1, #100	; 0x64
c7e04558:	eb009879 	bl	c7e2a744 <__aeabi_idivmod>
c7e0455c:	e3510000 	cmp	r1, #0	; 0x0
c7e04560:	1a000001 	bne	c7e0456c <load_serial+0x13c>
				putc ('.');
c7e04564:	e3a0002e 	mov	r0, #46	; 0x2e
c7e04568:	eb0011ca 	bl	c7e08c98 <putc>
c7e0456c:	e1a06004 	mov	r6, r4
c7e04570:	e28d500c 	add	r5, sp, #12	; 0xc
	char c;

	--len;	/* always leave room for terminating '\0' byte */

	for (p=buf; p < buf+len; ++p) {
		c = getc();		/* read character		*/
c7e04574:	eb0011da 	bl	c7e08ce4 <getc>
		if (do_echo)
c7e04578:	e59f30a4 	ldr	r3, [pc, #164]	; c7e04624 <load_serial+0x1f4>
	char c;

	--len;	/* always leave room for terminating '\0' byte */

	for (p=buf; p < buf+len; ++p) {
		c = getc();		/* read character		*/
c7e0457c:	e20040ff 	and	r4, r0, #255	; 0xff
		if (do_echo)
c7e04580:	e5933000 	ldr	r3, [r3]
c7e04584:	e3530000 	cmp	r3, #0	; 0x0
c7e04588:	0a000001 	beq	c7e04594 <load_serial+0x164>
			putc (c);	/* ... and echo it		*/
c7e0458c:	e1a00004 	mov	r0, r4
c7e04590:	eb0011c0 	bl	c7e08c98 <putc>

		switch (c) {
c7e04594:	e3540003 	cmp	r4, #3	; 0x3
c7e04598:	0a00001a 	beq	c7e04608 <load_serial+0x1d8>
c7e0459c:	8a000002 	bhi	c7e045ac <load_serial+0x17c>
c7e045a0:	e3540000 	cmp	r4, #0	; 0x0
c7e045a4:	0a000017 	beq	c7e04608 <load_serial+0x1d8>
c7e045a8:	ea000003 	b	c7e045bc <load_serial+0x18c>
c7e045ac:	e354000a 	cmp	r4, #10	; 0xa
c7e045b0:	0a00000e 	beq	c7e045f0 <load_serial+0x1c0>
c7e045b4:	e354000d 	cmp	r4, #13	; 0xd
c7e045b8:	0a00000c 	beq	c7e045f0 <load_serial+0x1c0>
			return (p - buf);
		case '\0':
		case 0x03:			/* ^C - Control C		*/
			return (-1);
		default:
			*p = c;
c7e045bc:	e5c54000 	strb	r4, [r5]
		}

	    /* Check for the console hangup (if any different from serial) */
	    if (gd->jt[XF_getc] != getc) {
c7e045c0:	e5983054 	ldr	r3, [r8, #84]
c7e045c4:	e5932004 	ldr	r2, [r3, #4]
c7e045c8:	e59f3058 	ldr	r3, [pc, #88]	; c7e04628 <load_serial+0x1f8>
c7e045cc:	e1520003 	cmp	r2, r3
c7e045d0:	0a000002 	beq	c7e045e0 <load_serial+0x1b0>
		if (ctrlc()) {
c7e045d4:	eb0011cb 	bl	c7e08d08 <ctrlc>
c7e045d8:	e3500000 	cmp	r0, #0	; 0x0
c7e045dc:	1a000009 	bne	c7e04608 <load_serial+0x1d8>
	char *p;
	char c;

	--len;	/* always leave room for terminating '\0' byte */

	for (p=buf; p < buf+len; ++p) {
c7e045e0:	e2855001 	add	r5, r5, #1	; 0x1
c7e045e4:	e28d3e21 	add	r3, sp, #528	; 0x210
c7e045e8:	e1550003 	cmp	r5, r3
c7e045ec:	3affffe0 	bcc	c7e04574 <load_serial+0x144>
		}
	    }
	}

	/* line too long - truncate */
	*p = '\0';
c7e045f0:	e3a03000 	mov	r3, #0	; 0x0
c7e045f4:	e5c53000 	strb	r3, [r5]
	return (p - buf);
c7e045f8:	e28d300c 	add	r3, sp, #12	; 0xc
c7e045fc:	e0633005 	rsb	r3, r3, r5
	ulong	store_addr;
	ulong	start_addr = ~0;
	ulong	end_addr   =  0;
	int	line_count =  0;

	while (read_record(record, SREC_MAXRECLEN + 1) >= 0) {
c7e04600:	e3530000 	cmp	r3, #0	; 0x0
c7e04604:	aaffff90 	bge	c7e0444c <load_serial+0x1c>
c7e04608:	e3e00000 	mvn	r0, #0	; 0x0
				putc ('.');
		}
	}

	return (~0);			/* Download aborted		*/
}
c7e0460c:	e28ddfcf 	add	sp, sp, #828	; 0x33c
c7e04610:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e04614:	00002710 	.word	0x00002710
c7e04618:	c7e2fc7e 	.word	0xc7e2fc7e
c7e0461c:	c7e2e9f8 	.word	0xc7e2e9f8
c7e04620:	c7e2e9fc 	.word	0xc7e2e9fc
c7e04624:	c7e352e4 	.word	0xc7e352e4
c7e04628:	c7e08ce4 	.word	0xc7e08ce4

c7e0462c <do_load_serial>:

/* -------------------------------------------------------------------- */

#if defined(CONFIG_CMD_LOADS)
int do_load_serial (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e0462c:	e92d4070 	push	{r4, r5, r6, lr}
	int load_baudrate, current_baudrate;

	load_baudrate = current_baudrate = gd->baudrate;
#endif

	if (((env_echo = getenv("loads_echo")) != NULL) && (*env_echo == '1')) {
c7e04630:	e59f00bc 	ldr	r0, [pc, #188]	; c7e046f4 <do_load_serial+0xc8>

/* -------------------------------------------------------------------- */

#if defined(CONFIG_CMD_LOADS)
int do_load_serial (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04634:	e1a04002 	mov	r4, r2
c7e04638:	e1a05003 	mov	r5, r3
	int load_baudrate, current_baudrate;

	load_baudrate = current_baudrate = gd->baudrate;
#endif

	if (((env_echo = getenv("loads_echo")) != NULL) && (*env_echo == '1')) {
c7e0463c:	eb000a96 	bl	c7e0709c <getenv>
c7e04640:	e3500000 	cmp	r0, #0	; 0x0
c7e04644:	0a000003 	beq	c7e04658 <do_load_serial+0x2c>
c7e04648:	e5d03000 	ldrb	r3, [r0]
c7e0464c:	e3530031 	cmp	r3, #49	; 0x31
		do_echo = 1;
c7e04650:	03a02001 	moveq	r2, #1	; 0x1
	int load_baudrate, current_baudrate;

	load_baudrate = current_baudrate = gd->baudrate;
#endif

	if (((env_echo = getenv("loads_echo")) != NULL) && (*env_echo == '1')) {
c7e04654:	0a000000 	beq	c7e0465c <do_load_serial+0x30>
		do_echo = 1;
	} else {
		do_echo = 0;
c7e04658:	e3a02000 	mov	r2, #0	; 0x0
c7e0465c:	e59f3094 	ldr	r3, [pc, #148]	; c7e046f8 <do_load_serial+0xcc>
			if (getc() == '\r')
				break;
		}
	}
#else	/* ! CONFIG_SYS_LOADS_BAUD_CHANGE */
	if (argc == 2) {
c7e04660:	e3540002 	cmp	r4, #2	; 0x2
#endif

	if (((env_echo = getenv("loads_echo")) != NULL) && (*env_echo == '1')) {
		do_echo = 1;
	} else {
		do_echo = 0;
c7e04664:	e5832000 	str	r2, [r3]
			if (getc() == '\r')
				break;
		}
	}
#else	/* ! CONFIG_SYS_LOADS_BAUD_CHANGE */
	if (argc == 2) {
c7e04668:	13a04000 	movne	r4, #0	; 0x0
c7e0466c:	1a000004 	bne	c7e04684 <do_load_serial+0x58>
		offset = simple_strtol(argv[1], NULL, 16);
c7e04670:	e5950004 	ldr	r0, [r5, #4]
c7e04674:	e3a01000 	mov	r1, #0	; 0x0
c7e04678:	e3a02010 	mov	r2, #16	; 0x10
c7e0467c:	eb007a65 	bl	c7e23018 <simple_strtol>
c7e04680:	e1a04000 	mov	r4, r0
	}
#endif	/* CONFIG_SYS_LOADS_BAUD_CHANGE */

	printf ("## Ready for S-Record download ...\n");
c7e04684:	e59f0070 	ldr	r0, [pc, #112]	; c7e046fc <do_load_serial+0xd0>
c7e04688:	eb0010f2 	bl	c7e08a58 <printf>

	addr = load_serial (offset);
c7e0468c:	e1a00004 	mov	r0, r4
c7e04690:	ebffff66 	bl	c7e04430 <load_serial>
c7e04694:	e3a04000 	mov	r4, #0	; 0x0
c7e04698:	e1a05000 	mov	r5, r0
	 * Gather any trailing characters (for instance, the ^D which
	 * is sent by 'cu' after sending a file), and give the
	 * box some time (100 * 1 ms)
	 */
	for (i=0; i<100; ++i) {
		if (tstc()) {
c7e0469c:	eb001187 	bl	c7e08cc0 <tstc>
c7e046a0:	e3500000 	cmp	r0, #0	; 0x0
	/*
	 * Gather any trailing characters (for instance, the ^D which
	 * is sent by 'cu' after sending a file), and give the
	 * box some time (100 * 1 ms)
	 */
	for (i=0; i<100; ++i) {
c7e046a4:	e2844001 	add	r4, r4, #1	; 0x1
		if (tstc()) {
c7e046a8:	0a000000 	beq	c7e046b0 <do_load_serial+0x84>
			(void) getc();
c7e046ac:	eb00118c 	bl	c7e08ce4 <getc>
		}
		udelay(1000);
c7e046b0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c7e046b4:	eb007a03 	bl	c7e22ec8 <udelay>
	/*
	 * Gather any trailing characters (for instance, the ^D which
	 * is sent by 'cu' after sending a file), and give the
	 * box some time (100 * 1 ms)
	 */
	for (i=0; i<100; ++i) {
c7e046b8:	e3540064 	cmp	r4, #100	; 0x64
c7e046bc:	1afffff6 	bne	c7e0469c <do_load_serial+0x70>
			(void) getc();
		}
		udelay(1000);
	}

	if (addr == ~0) {
c7e046c0:	e3750001 	cmn	r5, #1	; 0x1
c7e046c4:	1a000003 	bne	c7e046d8 <do_load_serial+0xac>
		printf ("## S-Record download aborted\n");
c7e046c8:	e59f0030 	ldr	r0, [pc, #48]	; c7e04700 <do_load_serial+0xd4>
c7e046cc:	eb0010e1 	bl	c7e08a58 <printf>
c7e046d0:	e3a00001 	mov	r0, #1	; 0x1
c7e046d4:	e8bd8070 	pop	{r4, r5, r6, pc}
		rcode = 1;
	} else {
		printf ("## Start Addr      = 0x%08lX\n", addr);
c7e046d8:	e1a01005 	mov	r1, r5
c7e046dc:	e59f0020 	ldr	r0, [pc, #32]	; c7e04704 <do_load_serial+0xd8>
c7e046e0:	eb0010dc 	bl	c7e08a58 <printf>
		load_addr = addr;
c7e046e4:	e59f301c 	ldr	r3, [pc, #28]	; c7e04708 <do_load_serial+0xdc>
c7e046e8:	e3a00000 	mov	r0, #0	; 0x0
c7e046ec:	e5835000 	str	r5, [r3]
				break;
		}
	}
#endif
	return rcode;
}
c7e046f0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e046f4:	c7e2fce3 	.word	0xc7e2fce3
c7e046f8:	c7e352e4 	.word	0xc7e352e4
c7e046fc:	c7e2fcee 	.word	0xc7e2fcee
c7e04700:	c7e2fd12 	.word	0xc7e2fd12
c7e04704:	c7e2fc30 	.word	0xc7e2fc30
c7e04708:	c7e353cc 	.word	0xc7e353cc

c7e0470c <do_mem_crc>:
{
	ulong addr, length;
	ulong crc;
	ulong *ptr;

	if (argc < 3)
c7e0470c:	e3520002 	cmp	r2, #2	; 0x2
#ifdef CONFIG_CMD_CRC32

#ifndef CONFIG_CRC32_VERIFY

int do_mem_crc (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04710:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	ulong addr, length;
	ulong crc;
	ulong *ptr;

	if (argc < 3)
c7e04714:	d3e00000 	mvnle	r0, #0	; 0x0
#ifdef CONFIG_CMD_CRC32

#ifndef CONFIG_CRC32_VERIFY

int do_mem_crc (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04718:	e1a0a002 	mov	sl, r2
c7e0471c:	e1a06003 	mov	r6, r3
	ulong addr, length;
	ulong crc;
	ulong *ptr;

	if (argc < 3)
c7e04720:	d8bd84f0 	pople	{r4, r5, r6, r7, sl, pc}
		return CMD_RET_USAGE;

	addr = simple_strtoul (argv[1], NULL, 16);
c7e04724:	e3a01000 	mov	r1, #0	; 0x0
c7e04728:	e3a02010 	mov	r2, #16	; 0x10
c7e0472c:	e5930004 	ldr	r0, [r3, #4]
c7e04730:	eb007a0a 	bl	c7e22f60 <simple_strtoul>
	addr += base_address;
c7e04734:	e59f3070 	ldr	r3, [pc, #112]	; c7e047ac <do_mem_crc+0xa0>

	length = simple_strtoul (argv[2], NULL, 16);
c7e04738:	e3a01000 	mov	r1, #0	; 0x0

	if (argc < 3)
		return CMD_RET_USAGE;

	addr = simple_strtoul (argv[1], NULL, 16);
	addr += base_address;
c7e0473c:	e5933000 	ldr	r3, [r3]

	length = simple_strtoul (argv[2], NULL, 16);
c7e04740:	e3a02010 	mov	r2, #16	; 0x10

	if (argc < 3)
		return CMD_RET_USAGE;

	addr = simple_strtoul (argv[1], NULL, 16);
	addr += base_address;
c7e04744:	e0805003 	add	r5, r0, r3

	length = simple_strtoul (argv[2], NULL, 16);
c7e04748:	e5960008 	ldr	r0, [r6, #8]
c7e0474c:	eb007a03 	bl	c7e22f60 <simple_strtoul>

	crc = crc32_wd (0, (const uchar *) addr, length, CHUNKSZ_CRC32);
c7e04750:	e1a01005 	mov	r1, r5
c7e04754:	e1a02000 	mov	r2, r0
		return CMD_RET_USAGE;

	addr = simple_strtoul (argv[1], NULL, 16);
	addr += base_address;

	length = simple_strtoul (argv[2], NULL, 16);
c7e04758:	e1a04000 	mov	r4, r0

	crc = crc32_wd (0, (const uchar *) addr, length, CHUNKSZ_CRC32);
c7e0475c:	e3a03801 	mov	r3, #65536	; 0x10000
c7e04760:	e3a00000 	mov	r0, #0	; 0x0
c7e04764:	eb00716b 	bl	c7e20d18 <crc32_wd>

	printf ("CRC32 for %08lx ... %08lx ==> %08lx\n",
c7e04768:	e2444001 	sub	r4, r4, #1	; 0x1
	addr = simple_strtoul (argv[1], NULL, 16);
	addr += base_address;

	length = simple_strtoul (argv[2], NULL, 16);

	crc = crc32_wd (0, (const uchar *) addr, length, CHUNKSZ_CRC32);
c7e0476c:	e1a07000 	mov	r7, r0

	printf ("CRC32 for %08lx ... %08lx ==> %08lx\n",
c7e04770:	e1a01005 	mov	r1, r5
c7e04774:	e0842005 	add	r2, r4, r5
c7e04778:	e59f0030 	ldr	r0, [pc, #48]	; c7e047b0 <do_mem_crc+0xa4>
c7e0477c:	e1a03007 	mov	r3, r7
c7e04780:	eb0010b4 	bl	c7e08a58 <printf>
			addr, addr + length - 1, crc);

	if (argc > 3) {
c7e04784:	e35a0003 	cmp	sl, #3	; 0x3
c7e04788:	03a00000 	moveq	r0, #0	; 0x0
c7e0478c:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
		ptr = (ulong *) simple_strtoul (argv[3], NULL, 16);
c7e04790:	e596000c 	ldr	r0, [r6, #12]
c7e04794:	e3a01000 	mov	r1, #0	; 0x0
c7e04798:	e3a02010 	mov	r2, #16	; 0x10
c7e0479c:	eb0079ef 	bl	c7e22f60 <simple_strtoul>
		*ptr = crc;
c7e047a0:	e5807000 	str	r7, [r0]
c7e047a4:	e3a00000 	mov	r0, #0	; 0x0
	}

	return 0;
}
c7e047a8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e047ac:	c7e40194 	.word	0xc7e40194
c7e047b0:	c7e2fe63 	.word	0xc7e2fe63

c7e047b4 <do_mem_base>:
	return 0;
}

int do_mem_base (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	if (argc > 1) {
c7e047b4:	e3520001 	cmp	r2, #1	; 0x1
	}
	return 0;
}

int do_mem_base (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e047b8:	e92d4010 	push	{r4, lr}
	if (argc > 1) {
c7e047bc:	da000005 	ble	c7e047d8 <do_mem_base+0x24>
		/* Set new base address.
		*/
		base_address = simple_strtoul(argv[1], NULL, 16);
c7e047c0:	e5930004 	ldr	r0, [r3, #4]
c7e047c4:	e3a01000 	mov	r1, #0	; 0x0
c7e047c8:	e3a02010 	mov	r2, #16	; 0x10
c7e047cc:	eb0079e3 	bl	c7e22f60 <simple_strtoul>
c7e047d0:	e59f3018 	ldr	r3, [pc, #24]	; c7e047f0 <do_mem_base+0x3c>
c7e047d4:	e5830000 	str	r0, [r3]
	}
	/* Print the current base address.
	*/
	printf("Base Address: 0x%08lx\n", base_address);
c7e047d8:	e59f3010 	ldr	r3, [pc, #16]	; c7e047f0 <do_mem_base+0x3c>
c7e047dc:	e59f0010 	ldr	r0, [pc, #16]	; c7e047f4 <do_mem_base+0x40>
c7e047e0:	e5931000 	ldr	r1, [r3]
c7e047e4:	eb00109b 	bl	c7e08a58 <printf>
	return 0;
}
c7e047e8:	e3a00000 	mov	r0, #0	; 0x0
c7e047ec:	e8bd8010 	pop	{r4, pc}
c7e047f0:	c7e40194 	.word	0xc7e40194
c7e047f4:	c7e2fe88 	.word	0xc7e2fe88

c7e047f8 <do_mem_mtest>:
#else
	ulong	incr;
	ulong	pattern;
#endif

	if (argc > 1)
c7e047f8:	e3520001 	cmp	r2, #1	; 0x1
 * Perform a memory test. A more complete alternative test can be
 * configured using CONFIG_SYS_ALT_MEMTEST. The complete test loops until
 * interrupted by ctrl-c or by a failure of one of the sub-tests.
 */
int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e047fc:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e04800:	e1a04002 	mov	r4, r2
c7e04804:	e1a05003 	mov	r5, r3
#else
	ulong	incr;
	ulong	pattern;
#endif

	if (argc > 1)
c7e04808:	da000057 	ble	c7e0496c <do_mem_mtest+0x174>
		start = (ulong *)simple_strtoul(argv[1], NULL, 16);
c7e0480c:	e5930004 	ldr	r0, [r3, #4]
c7e04810:	e3a01000 	mov	r1, #0	; 0x0
c7e04814:	e3a02010 	mov	r2, #16	; 0x10
c7e04818:	eb0079d0 	bl	c7e22f60 <simple_strtoul>
	else
		start = (ulong *)CONFIG_SYS_MEMTEST_START;

	if (argc > 2)
c7e0481c:	e3540002 	cmp	r4, #2	; 0x2
	ulong	incr;
	ulong	pattern;
#endif

	if (argc > 1)
		start = (ulong *)simple_strtoul(argv[1], NULL, 16);
c7e04820:	e58d0000 	str	r0, [sp]
	else
		start = (ulong *)CONFIG_SYS_MEMTEST_START;

	if (argc > 2)
c7e04824:	0a000052 	beq	c7e04974 <do_mem_mtest+0x17c>
		end = (ulong *)simple_strtoul(argv[2], NULL, 16);
c7e04828:	e5950008 	ldr	r0, [r5, #8]
c7e0482c:	e3a01000 	mov	r1, #0	; 0x0
c7e04830:	e3a02010 	mov	r2, #16	; 0x10
c7e04834:	eb0079c9 	bl	c7e22f60 <simple_strtoul>
	else
		end = (ulong *)(CONFIG_SYS_MEMTEST_END);

	if (argc > 3)
c7e04838:	e3540003 	cmp	r4, #3	; 0x3
		start = (ulong *)simple_strtoul(argv[1], NULL, 16);
	else
		start = (ulong *)CONFIG_SYS_MEMTEST_START;

	if (argc > 2)
		end = (ulong *)simple_strtoul(argv[2], NULL, 16);
c7e0483c:	e58d0004 	str	r0, [sp, #4]
	else
		end = (ulong *)(CONFIG_SYS_MEMTEST_END);

	if (argc > 3)
c7e04840:	0a00004d 	beq	c7e0497c <do_mem_mtest+0x184>
		pattern = (ulong)simple_strtoul(argv[3], NULL, 16);
c7e04844:	e595000c 	ldr	r0, [r5, #12]
c7e04848:	e3a01000 	mov	r1, #0	; 0x0
c7e0484c:	e3a02010 	mov	r2, #16	; 0x10
c7e04850:	eb0079c2 	bl	c7e22f60 <simple_strtoul>
	else
		pattern = 0;

	if (argc > 4)
c7e04854:	e3540004 	cmp	r4, #4	; 0x4
		end = (ulong *)simple_strtoul(argv[2], NULL, 16);
	else
		end = (ulong *)(CONFIG_SYS_MEMTEST_END);

	if (argc > 3)
		pattern = (ulong)simple_strtoul(argv[3], NULL, 16);
c7e04858:	e1a06000 	mov	r6, r0
	else
		pattern = 0;

	if (argc > 4)
c7e0485c:	03a0a000 	moveq	sl, #0	; 0x0
c7e04860:	0a000004 	beq	c7e04878 <do_mem_mtest+0x80>
		iteration_limit = (ulong)simple_strtoul(argv[4], NULL, 16);
c7e04864:	e5950010 	ldr	r0, [r5, #16]
c7e04868:	e3a01000 	mov	r1, #0	; 0x0
c7e0486c:	e3a02010 	mov	r2, #16	; 0x10
c7e04870:	eb0079ba 	bl	c7e22f60 <simple_strtoul>
c7e04874:	e1a0a000 	mov	sl, r0
c7e04878:	e3a07001 	mov	r7, #1	; 0x1
c7e0487c:	e3a0b000 	mov	fp, #0	; 0x0
c7e04880:	e1a09007 	mov	r9, r7
	}

#else /* The original, quickie test */
	incr = 1;
	for (;;) {
		if (ctrlc()) {
c7e04884:	eb00111f 	bl	c7e08d08 <ctrlc>
c7e04888:	e3500000 	cmp	r0, #0	; 0x0
c7e0488c:	1a000023 	bne	c7e04920 <do_mem_mtest+0x128>
			putc ('\n');
			return 1;
		}

		if (iteration_limit && iterations > iteration_limit) {
c7e04890:	e35a0000 	cmp	sl, #0	; 0x0
c7e04894:	1157000a 	cmpne	r7, sl
c7e04898:	da000006 	ble	c7e048b8 <do_mem_mtest+0xc0>
			printf("Tested %d iteration(s) with %lu errors.\n",
c7e0489c:	e2471001 	sub	r1, r7, #1	; 0x1
c7e048a0:	e59f00e0 	ldr	r0, [pc, #224]	; c7e04988 <do_mem_mtest+0x190>
c7e048a4:	e1a0200b 	mov	r2, fp
c7e048a8:	eb00106a 	bl	c7e08a58 <printf>
				iterations-1, errs);
			return errs != 0;
c7e048ac:	e25b0000 	subs	r0, fp, #0	; 0x0
c7e048b0:	13a00001 	movne	r0, #1	; 0x1
c7e048b4:	ea00002b 	b	c7e04968 <do_mem_mtest+0x170>
		}
		++iterations;

		printf ("\rPattern %08lX  Writing..."
c7e048b8:	e59f20cc 	ldr	r2, [pc, #204]	; c7e0498c <do_mem_mtest+0x194>
c7e048bc:	e59f00cc 	ldr	r0, [pc, #204]	; c7e04990 <do_mem_mtest+0x198>
c7e048c0:	e1a01006 	mov	r1, r6
c7e048c4:	eb001063 	bl	c7e08a58 <printf>
c7e048c8:	e59d2000 	ldr	r2, [sp]
c7e048cc:	e1a03006 	mov	r3, r6
c7e048d0:	ea000001 	b	c7e048dc <do_mem_mtest+0xe4>
			"\b\b\b\b\b\b\b\b\b\b",
			pattern, "");

		for (addr=start,val=pattern; addr<end; addr++) {
			WATCHDOG_RESET();
			*addr = val;
c7e048d4:	e4823004 	str	r3, [r2], #4
			val  += incr;
c7e048d8:	e0833009 	add	r3, r3, r9
		printf ("\rPattern %08lX  Writing..."
			"%12s"
			"\b\b\b\b\b\b\b\b\b\b",
			pattern, "");

		for (addr=start,val=pattern; addr<end; addr++) {
c7e048dc:	e59d1004 	ldr	r1, [sp, #4]
c7e048e0:	e1520001 	cmp	r2, r1
c7e048e4:	3afffffa 	bcc	c7e048d4 <do_mem_mtest+0xdc>
			WATCHDOG_RESET();
			*addr = val;
			val  += incr;
		}

		puts ("Reading...");
c7e048e8:	e59f00a4 	ldr	r0, [pc, #164]	; c7e04994 <do_mem_mtest+0x19c>
c7e048ec:	eb00103e 	bl	c7e089ec <puts>
c7e048f0:	e1a05006 	mov	r5, r6
c7e048f4:	e59d4000 	ldr	r4, [sp]
c7e048f8:	ea00000e 	b	c7e04938 <do_mem_mtest+0x140>

		for (addr=start,val=pattern; addr<end; addr++) {
			WATCHDOG_RESET();
			readback = *addr;
c7e048fc:	e594c000 	ldr	ip, [r4]
			if (readback != val) {
c7e04900:	e15c0005 	cmp	ip, r5
				printf ("\nMem error @ 0x%08X: "
c7e04904:	e1a0200c 	mov	r2, ip
		puts ("Reading...");

		for (addr=start,val=pattern; addr<end; addr++) {
			WATCHDOG_RESET();
			readback = *addr;
			if (readback != val) {
c7e04908:	0a000008 	beq	c7e04930 <do_mem_mtest+0x138>
				printf ("\nMem error @ 0x%08X: "
c7e0490c:	eb001051 	bl	c7e08a58 <printf>
					"found %08lX, expected %08lX\n",
					(uint)(uintptr_t)addr, readback, val);
				errs++;
				if (ctrlc()) {
c7e04910:	eb0010fc 	bl	c7e08d08 <ctrlc>
c7e04914:	e3500000 	cmp	r0, #0	; 0x0
			readback = *addr;
			if (readback != val) {
				printf ("\nMem error @ 0x%08X: "
					"found %08lX, expected %08lX\n",
					(uint)(uintptr_t)addr, readback, val);
				errs++;
c7e04918:	028bb001 	addeq	fp, fp, #1	; 0x1
c7e0491c:	0a000003 	beq	c7e04930 <do_mem_mtest+0x138>
				if (ctrlc()) {
					putc ('\n');
c7e04920:	e3a0000a 	mov	r0, #10	; 0xa
c7e04924:	eb0010db 	bl	c7e08c98 <putc>
c7e04928:	e3a00001 	mov	r0, #1	; 0x1
c7e0492c:	ea00000d 	b	c7e04968 <do_mem_mtest+0x170>
					return 1;
				}
			}
			val += incr;
c7e04930:	e0855009 	add	r5, r5, r9
			val  += incr;
		}

		puts ("Reading...");

		for (addr=start,val=pattern; addr<end; addr++) {
c7e04934:	e2844004 	add	r4, r4, #4	; 0x4
c7e04938:	e59d2004 	ldr	r2, [sp, #4]
			WATCHDOG_RESET();
			readback = *addr;
			if (readback != val) {
				printf ("\nMem error @ 0x%08X: "
c7e0493c:	e1a01004 	mov	r1, r4
			val  += incr;
		}

		puts ("Reading...");

		for (addr=start,val=pattern; addr<end; addr++) {
c7e04940:	e1540002 	cmp	r4, r2
			WATCHDOG_RESET();
			readback = *addr;
			if (readback != val) {
				printf ("\nMem error @ 0x%08X: "
c7e04944:	e1a03005 	mov	r3, r5
c7e04948:	e59f0048 	ldr	r0, [pc, #72]	; c7e04998 <do_mem_mtest+0x1a0>
			val  += incr;
		}

		puts ("Reading...");

		for (addr=start,val=pattern; addr<end; addr++) {
c7e0494c:	3affffea 	bcc	c7e048fc <do_mem_mtest+0x104>
		 * Flip the pattern each time to make lots of zeros and
		 * then, the next time, lots of ones.  We decrement
		 * the "negative" patterns and increment the "positive"
		 * patterns to preserve this feature.
		 */
		if(pattern & 0x80000000) {
c7e04950:	e3560000 	cmp	r6, #0	; 0x0
			pattern = -pattern;	/* complement & increment */
c7e04954:	b2666000 	rsblt	r6, r6, #0	; 0x0
		}
		else {
			pattern = ~pattern;
c7e04958:	a1e06006 	mvnge	r6, r6
		if (iteration_limit && iterations > iteration_limit) {
			printf("Tested %d iteration(s) with %lu errors.\n",
				iterations-1, errs);
			return errs != 0;
		}
		++iterations;
c7e0495c:	e2877001 	add	r7, r7, #1	; 0x1
			pattern = -pattern;	/* complement & increment */
		}
		else {
			pattern = ~pattern;
		}
		incr = -incr;
c7e04960:	e2699000 	rsb	r9, r9, #0	; 0x0
c7e04964:	eaffffc6 	b	c7e04884 <do_mem_mtest+0x8c>
	}
#endif
	return 0;	/* not reached */
}
c7e04968:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
		}
		else {
			pattern = ~pattern;
		}
		incr = -incr;
	}
c7e0496c:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c7e04970:	e58d3000 	str	r3, [sp]
c7e04974:	e3a01206 	mov	r1, #1610612736	; 0x60000000
c7e04978:	e58d1004 	str	r1, [sp, #4]
c7e0497c:	e3a0a000 	mov	sl, #0	; 0x0
c7e04980:	e1a0600a 	mov	r6, sl
c7e04984:	eaffffbb 	b	c7e04878 <do_mem_mtest+0x80>
c7e04988:	c7e2fe9f 	.word	0xc7e2fe9f
c7e0498c:	c7e2fef0 	.word	0xc7e2fef0
c7e04990:	c7e2fec8 	.word	0xc7e2fec8
c7e04994:	c7e2fef1 	.word	0xc7e2fef1
c7e04998:	c7e2fefc 	.word	0xc7e2fefc

c7e0499c <do_mem_loop>:
	int	size;
	volatile uint	*longp;
	volatile ushort *shortp;
	volatile u_char	*cp;

	if (argc < 3)
c7e0499c:	e3520002 	cmp	r2, #2	; 0x2
	printf("Base Address: 0x%08lx\n", base_address);
	return 0;
}

int do_mem_loop (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e049a0:	e92d4070 	push	{r4, r5, r6, lr}
c7e049a4:	e1a04003 	mov	r4, r3
	int	size;
	volatile uint	*longp;
	volatile ushort *shortp;
	volatile u_char	*cp;

	if (argc < 3)
c7e049a8:	da000036 	ble	c7e04a88 <do_mem_loop+0xec>
		return CMD_RET_USAGE;

	/* Check for a size spefication.
	 * Defaults to long if no or incorrect specification.
	 */
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
c7e049ac:	e5930000 	ldr	r0, [r3]
c7e049b0:	e3a01004 	mov	r1, #4	; 0x4
c7e049b4:	eb000e81 	bl	c7e083c0 <cmd_get_data_size>
c7e049b8:	e2505000 	subs	r5, r0, #0	; 0x0
c7e049bc:	b3a00001 	movlt	r0, #1	; 0x1
c7e049c0:	b8bd8070 	poplt	{r4, r5, r6, pc}
		return 1;

	/* Address is always specified.
	*/
	addr = simple_strtoul(argv[1], NULL, 16);
c7e049c4:	e3a01000 	mov	r1, #0	; 0x0
c7e049c8:	e3a02010 	mov	r2, #16	; 0x10
c7e049cc:	e5940004 	ldr	r0, [r4, #4]
c7e049d0:	eb007962 	bl	c7e22f60 <simple_strtoul>

	/* Length is the number of objects, not number of bytes.
	*/
	length = simple_strtoul(argv[2], NULL, 16);
c7e049d4:	e3a01000 	mov	r1, #0	; 0x0
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
		return 1;

	/* Address is always specified.
	*/
	addr = simple_strtoul(argv[1], NULL, 16);
c7e049d8:	e1a06000 	mov	r6, r0

	/* Length is the number of objects, not number of bytes.
	*/
	length = simple_strtoul(argv[2], NULL, 16);
c7e049dc:	e3a02010 	mov	r2, #16	; 0x10
c7e049e0:	e5940008 	ldr	r0, [r4, #8]
c7e049e4:	eb00795d 	bl	c7e22f60 <simple_strtoul>

	/* We want to optimize the loops to run as fast as possible.
	 * If we have only one object, just run infinite loops.
	 */
	if (length == 1) {
c7e049e8:	e3500001 	cmp	r0, #1	; 0x1
c7e049ec:	1a000009 	bne	c7e04a18 <do_mem_loop+0x7c>
		if (size == 4) {
c7e049f0:	e3550004 	cmp	r5, #4	; 0x4
c7e049f4:	1a000001 	bne	c7e04a00 <do_mem_loop+0x64>
			longp = (uint *)addr;
			for (;;)
				i = *longp;
c7e049f8:	e5963000 	ldr	r3, [r6]
c7e049fc:	eafffffd 	b	c7e049f8 <do_mem_loop+0x5c>
		}
		if (size == 2) {
c7e04a00:	e3550002 	cmp	r5, #2	; 0x2
c7e04a04:	1a000001 	bne	c7e04a10 <do_mem_loop+0x74>
			shortp = (ushort *)addr;
			for (;;)
				i = *shortp;
c7e04a08:	e1d630b0 	ldrh	r3, [r6]
c7e04a0c:	eafffffd 	b	c7e04a08 <do_mem_loop+0x6c>
		}
		cp = (u_char *)addr;
		for (;;)
			i = *cp;
c7e04a10:	e5d63000 	ldrb	r3, [r6]
c7e04a14:	eafffffd 	b	c7e04a10 <do_mem_loop+0x74>
	}

	if (size == 4) {
c7e04a18:	e3550004 	cmp	r5, #4	; 0x4
c7e04a1c:	1a000007 	bne	c7e04a40 <do_mem_loop+0xa4>
		for (;;) {
			longp = (uint *)addr;
c7e04a20:	e1a02006 	mov	r2, r6
c7e04a24:	e1a03000 	mov	r3, r0
c7e04a28:	ea000001 	b	c7e04a34 <do_mem_loop+0x98>
			i = length;
			while (i-- > 0)
				*longp++;
c7e04a2c:	e4921004 	ldr	r1, [r2], #4
c7e04a30:	e2433001 	sub	r3, r3, #1	; 0x1

	if (size == 4) {
		for (;;) {
			longp = (uint *)addr;
			i = length;
			while (i-- > 0)
c7e04a34:	e3530000 	cmp	r3, #0	; 0x0
c7e04a38:	0afffff8 	beq	c7e04a20 <do_mem_loop+0x84>
c7e04a3c:	eafffffa 	b	c7e04a2c <do_mem_loop+0x90>
				*longp++;
		}
	}
	if (size == 2) {
c7e04a40:	e3550002 	cmp	r5, #2	; 0x2
c7e04a44:	1a000007 	bne	c7e04a68 <do_mem_loop+0xcc>
		for (;;) {
			shortp = (ushort *)addr;
c7e04a48:	e1a02006 	mov	r2, r6
c7e04a4c:	e1a03000 	mov	r3, r0
c7e04a50:	ea000001 	b	c7e04a5c <do_mem_loop+0xc0>
			i = length;
			while (i-- > 0)
				*shortp++;
c7e04a54:	e0d210b2 	ldrh	r1, [r2], #2
c7e04a58:	e2433001 	sub	r3, r3, #1	; 0x1
	}
	if (size == 2) {
		for (;;) {
			shortp = (ushort *)addr;
			i = length;
			while (i-- > 0)
c7e04a5c:	e3530000 	cmp	r3, #0	; 0x0
c7e04a60:	0afffff8 	beq	c7e04a48 <do_mem_loop+0xac>
c7e04a64:	eafffffa 	b	c7e04a54 <do_mem_loop+0xb8>
				*shortp++;
		}
	}
	for (;;) {
		cp = (u_char *)addr;
c7e04a68:	e1a02006 	mov	r2, r6
c7e04a6c:	e1a03000 	mov	r3, r0
c7e04a70:	ea000001 	b	c7e04a7c <do_mem_loop+0xe0>
		i = length;
		while (i-- > 0)
			*cp++;
c7e04a74:	e4d21001 	ldrb	r1, [r2], #1
c7e04a78:	e2433001 	sub	r3, r3, #1	; 0x1
		}
	}
	for (;;) {
		cp = (u_char *)addr;
		i = length;
		while (i-- > 0)
c7e04a7c:	e3530000 	cmp	r3, #0	; 0x0
c7e04a80:	0afffff8 	beq	c7e04a68 <do_mem_loop+0xcc>
c7e04a84:	eafffffa 	b	c7e04a74 <do_mem_loop+0xd8>
c7e04a88:	e3e00000 	mvn	r0, #0	; 0x0
			*cp++;
	}
}
c7e04a8c:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e04a90 <do_mem_cp>:
int do_mem_cp ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	ulong	addr, dest, count;
	int	size;

	if (argc != 4)
c7e04a90:	e3520004 	cmp	r2, #4	; 0x4
	printf("Total of %ld %s(s) were the same\n", ngood, type);
	return rcode;
}

int do_mem_cp ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04a94:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e04a98:	e1a01002 	mov	r1, r2
c7e04a9c:	e1a05003 	mov	r5, r3
	ulong	addr, dest, count;
	int	size;

	if (argc != 4)
c7e04aa0:	13e00000 	mvnne	r0, #0	; 0x0
c7e04aa4:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		return CMD_RET_USAGE;

	/* Check for size specification.
	*/
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
c7e04aa8:	e5930000 	ldr	r0, [r3]
c7e04aac:	eb000e43 	bl	c7e083c0 <cmd_get_data_size>
c7e04ab0:	e2506000 	subs	r6, r0, #0	; 0x0
c7e04ab4:	ba000016 	blt	c7e04b14 <do_mem_cp+0x84>
		return 1;

	addr = simple_strtoul(argv[1], NULL, 16);
c7e04ab8:	e3a01000 	mov	r1, #0	; 0x0
c7e04abc:	e3a02010 	mov	r2, #16	; 0x10
c7e04ac0:	e5950004 	ldr	r0, [r5, #4]
c7e04ac4:	eb007925 	bl	c7e22f60 <simple_strtoul>
	addr += base_address;
c7e04ac8:	e59f4088 	ldr	r4, [pc, #136]	; c7e04b58 <do_mem_cp+0xc8>
	/* Check for size specification.
	*/
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
		return 1;

	addr = simple_strtoul(argv[1], NULL, 16);
c7e04acc:	e1a09000 	mov	r9, r0
	addr += base_address;

	dest = simple_strtoul(argv[2], NULL, 16);
c7e04ad0:	e3a01000 	mov	r1, #0	; 0x0
c7e04ad4:	e3a02010 	mov	r2, #16	; 0x10
c7e04ad8:	e5950008 	ldr	r0, [r5, #8]
	*/
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
		return 1;

	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;
c7e04adc:	e594a000 	ldr	sl, [r4]

	dest = simple_strtoul(argv[2], NULL, 16);
c7e04ae0:	eb00791e 	bl	c7e22f60 <simple_strtoul>
	dest += base_address;

	count = simple_strtoul(argv[3], NULL, 16);
c7e04ae4:	e3a02010 	mov	r2, #16	; 0x10
		return 1;

	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;

	dest = simple_strtoul(argv[2], NULL, 16);
c7e04ae8:	e1a07000 	mov	r7, r0
	dest += base_address;

	count = simple_strtoul(argv[3], NULL, 16);
c7e04aec:	e3a01000 	mov	r1, #0	; 0x0
c7e04af0:	e595000c 	ldr	r0, [r5, #12]

	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;

	dest = simple_strtoul(argv[2], NULL, 16);
	dest += base_address;
c7e04af4:	e5945000 	ldr	r5, [r4]

	count = simple_strtoul(argv[3], NULL, 16);
c7e04af8:	eb007918 	bl	c7e22f60 <simple_strtoul>

	if (count == 0) {
c7e04afc:	e2502000 	subs	r2, r0, #0	; 0x0
	*/
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
		return 1;

	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;
c7e04b00:	1089400a 	addne	r4, r9, sl

	dest = simple_strtoul(argv[2], NULL, 16);
	dest += base_address;
c7e04b04:	10870005 	addne	r0, r7, r5

	count = simple_strtoul(argv[3], NULL, 16);

	if (count == 0) {
c7e04b08:	1a000003 	bne	c7e04b1c <do_mem_cp+0x8c>
		puts ("Zero length ???\n");
c7e04b0c:	e59f0048 	ldr	r0, [pc, #72]	; c7e04b5c <do_mem_cp+0xcc>
c7e04b10:	eb000fb5 	bl	c7e089ec <puts>
c7e04b14:	e3a00001 	mov	r0, #1	; 0x1
c7e04b18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
	}
#endif

	while (count-- > 0) {
		if (size == 4)
c7e04b1c:	e3560004 	cmp	r6, #4	; 0x4
			*((ulong  *)dest) = *((ulong  *)addr);
c7e04b20:	05943000 	ldreq	r3, [r4]
c7e04b24:	05803000 	streq	r3, [r0]
		return 0;
	}
#endif

	while (count-- > 0) {
		if (size == 4)
c7e04b28:	0a000004 	beq	c7e04b40 <do_mem_cp+0xb0>
			*((ulong  *)dest) = *((ulong  *)addr);
		else if (size == 2)
c7e04b2c:	e3560002 	cmp	r6, #2	; 0x2
			*((ushort *)dest) = *((ushort *)addr);
c7e04b30:	01d430b0 	ldrheq	r3, [r4]
		else
			*((u_char *)dest) = *((u_char *)addr);
c7e04b34:	15d43000 	ldrbne	r3, [r4]

	while (count-- > 0) {
		if (size == 4)
			*((ulong  *)dest) = *((ulong  *)addr);
		else if (size == 2)
			*((ushort *)dest) = *((ushort *)addr);
c7e04b38:	01c030b0 	strheq	r3, [r0]
		else
			*((u_char *)dest) = *((u_char *)addr);
c7e04b3c:	15c03000 	strbne	r3, [r0]
		memcpy((void *)dest, (void *)addr, count * size);
		return 0;
	}
#endif

	while (count-- > 0) {
c7e04b40:	e2522001 	subs	r2, r2, #1	; 0x1
			*((ulong  *)dest) = *((ulong  *)addr);
		else if (size == 2)
			*((ushort *)dest) = *((ushort *)addr);
		else
			*((u_char *)dest) = *((u_char *)addr);
		addr += size;
c7e04b44:	e0844006 	add	r4, r4, r6
c7e04b48:	e0800006 	add	r0, r0, r6
		memcpy((void *)dest, (void *)addr, count * size);
		return 0;
	}
#endif

	while (count-- > 0) {
c7e04b4c:	1afffff2 	bne	c7e04b1c <do_mem_cp+0x8c>
c7e04b50:	e1a00002 	mov	r0, r2
		/* reset watchdog from time to time */
		if ((count % (64 << 10)) == 0)
			WATCHDOG_RESET();
	}
	return 0;
}
c7e04b54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e04b58:	c7e40194 	.word	0xc7e40194
c7e04b5c:	c7e2ff2e 	.word	0xc7e2ff2e

c7e04b60 <do_mem_cmp>:
	return 0;
}
#endif /* CONFIG_MX_CYCLIC */

int do_mem_cmp (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04b60:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	ulong	addr1, addr2, count, ngood;
	int	size;
	int     rcode = 0;
	const char *type;

	if (argc != 4)
c7e04b64:	e3520004 	cmp	r2, #4	; 0x4
	return 0;
}
#endif /* CONFIG_MX_CYCLIC */

int do_mem_cmp (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04b68:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e04b6c:	e1a01002 	mov	r1, r2
c7e04b70:	e1a07003 	mov	r7, r3
	ulong	addr1, addr2, count, ngood;
	int	size;
	int     rcode = 0;
	const char *type;

	if (argc != 4)
c7e04b74:	13e04000 	mvnne	r4, #0	; 0x0
c7e04b78:	1a000040 	bne	c7e04c80 <do_mem_cmp+0x120>
		return CMD_RET_USAGE;

	/* Check for size specification.
	*/
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
c7e04b7c:	e5930000 	ldr	r0, [r3]
c7e04b80:	eb000e0e 	bl	c7e083c0 <cmd_get_data_size>
c7e04b84:	e2505000 	subs	r5, r0, #0	; 0x0
c7e04b88:	b3a04001 	movlt	r4, #1	; 0x1
c7e04b8c:	ba00003b 	blt	c7e04c80 <do_mem_cmp+0x120>
		return 1;
	type = size == 4 ? "word" : size == 2 ? "halfword" : "byte";
c7e04b90:	e3550004 	cmp	r5, #4	; 0x4
c7e04b94:	059fa0f0 	ldreq	sl, [pc, #240]	; c7e04c8c <do_mem_cmp+0x12c>
c7e04b98:	0a000004 	beq	c7e04bb0 <do_mem_cmp+0x50>
c7e04b9c:	e59f20ec 	ldr	r2, [pc, #236]	; c7e04c90 <do_mem_cmp+0x130>
c7e04ba0:	e59f30ec 	ldr	r3, [pc, #236]	; c7e04c94 <do_mem_cmp+0x134>
c7e04ba4:	e3550002 	cmp	r5, #2	; 0x2
c7e04ba8:	01a0a003 	moveq	sl, r3
c7e04bac:	11a0a002 	movne	sl, r2

	addr1 = simple_strtoul(argv[1], NULL, 16);
c7e04bb0:	e3a01000 	mov	r1, #0	; 0x0
c7e04bb4:	e3a02010 	mov	r2, #16	; 0x10
c7e04bb8:	e5970004 	ldr	r0, [r7, #4]
c7e04bbc:	eb0078e7 	bl	c7e22f60 <simple_strtoul>
	addr1 += base_address;
c7e04bc0:	e59f40d0 	ldr	r4, [pc, #208]	; c7e04c98 <do_mem_cmp+0x138>

	addr2 = simple_strtoul(argv[2], NULL, 16);
c7e04bc4:	e3a01000 	mov	r1, #0	; 0x0
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
		return 1;
	type = size == 4 ? "word" : size == 2 ? "halfword" : "byte";

	addr1 = simple_strtoul(argv[1], NULL, 16);
	addr1 += base_address;
c7e04bc8:	e5943000 	ldr	r3, [r4]

	addr2 = simple_strtoul(argv[2], NULL, 16);
c7e04bcc:	e3a02010 	mov	r2, #16	; 0x10
	if ((size = cmd_get_data_size(argv[0], 4)) < 0)
		return 1;
	type = size == 4 ? "word" : size == 2 ? "halfword" : "byte";

	addr1 = simple_strtoul(argv[1], NULL, 16);
	addr1 += base_address;
c7e04bd0:	e0806003 	add	r6, r0, r3

	addr2 = simple_strtoul(argv[2], NULL, 16);
c7e04bd4:	e5970008 	ldr	r0, [r7, #8]
c7e04bd8:	eb0078e0 	bl	c7e22f60 <simple_strtoul>
	addr2 += base_address;
c7e04bdc:	e5943000 	ldr	r3, [r4]

	count = simple_strtoul(argv[3], NULL, 16);
c7e04be0:	e3a01000 	mov	r1, #0	; 0x0

	addr1 = simple_strtoul(argv[1], NULL, 16);
	addr1 += base_address;

	addr2 = simple_strtoul(argv[2], NULL, 16);
	addr2 += base_address;
c7e04be4:	e0804003 	add	r4, r0, r3

	count = simple_strtoul(argv[3], NULL, 16);
c7e04be8:	e3a02010 	mov	r2, #16	; 0x10
c7e04bec:	e597000c 	ldr	r0, [r7, #12]
c7e04bf0:	eb0078da 	bl	c7e22f60 <simple_strtoul>
c7e04bf4:	e3a07000 	mov	r7, #0	; 0x0
c7e04bf8:	ea000019 	b	c7e04c64 <do_mem_cmp+0x104>
	}
#endif

	for (ngood = 0; ngood < count; ++ngood) {
		ulong word1, word2;
		if (size == 4) {
c7e04bfc:	e3550004 	cmp	r5, #4	; 0x4
			word1 = *(ulong *)addr1;
c7e04c00:	0596e000 	ldreq	lr, [r6]
			word2 = *(ulong *)addr2;
c7e04c04:	0594c000 	ldreq	ip, [r4]
	}
#endif

	for (ngood = 0; ngood < count; ++ngood) {
		ulong word1, word2;
		if (size == 4) {
c7e04c08:	0a000004 	beq	c7e04c20 <do_mem_cmp+0xc0>
			word1 = *(ulong *)addr1;
			word2 = *(ulong *)addr2;
		} else if (size == 2) {
c7e04c0c:	e3550002 	cmp	r5, #2	; 0x2
			word1 = *(ushort *)addr1;
c7e04c10:	01d6e0b0 	ldrheq	lr, [r6]
			word2 = *(ushort *)addr2;
c7e04c14:	01d4c0b0 	ldrheq	ip, [r4]
		} else {
			word1 = *(u_char *)addr1;
c7e04c18:	15d6e000 	ldrbne	lr, [r6]
			word2 = *(u_char *)addr2;
c7e04c1c:	15d4c000 	ldrbne	ip, [r4]
		}
		if (word1 != word2) {
c7e04c20:	e15e000c 	cmp	lr, ip
c7e04c24:	0a00000b 	beq	c7e04c58 <do_mem_cmp+0xf8>
			printf("%s at 0x%08lx (%#0*lx) != %s at 0x%08lx (%#0*lx)\n",
c7e04c28:	e1a02006 	mov	r2, r6
c7e04c2c:	e1a03005 	mov	r3, r5
c7e04c30:	e59f0064 	ldr	r0, [pc, #100]	; c7e04c9c <do_mem_cmp+0x13c>
c7e04c34:	e1a0100a 	mov	r1, sl
c7e04c38:	e58d4008 	str	r4, [sp, #8]
c7e04c3c:	e58de000 	str	lr, [sp]
c7e04c40:	e58dc010 	str	ip, [sp, #16]
c7e04c44:	e58da004 	str	sl, [sp, #4]
c7e04c48:	e58d500c 	str	r5, [sp, #12]
c7e04c4c:	e3a04001 	mov	r4, #1	; 0x1
c7e04c50:	eb000f80 	bl	c7e08a58 <printf>
c7e04c54:	ea000005 	b	c7e04c70 <do_mem_cmp+0x110>
				type, addr2, size, word2);
			rcode = 1;
			break;
		}

		addr1 += size;
c7e04c58:	e0866005 	add	r6, r6, r5
c7e04c5c:	e0844005 	add	r4, r4, r5
		puts ("Comparison with L1 instruction memory not supported.\n\r");
		return 0;
	}
#endif

	for (ngood = 0; ngood < count; ++ngood) {
c7e04c60:	e2877001 	add	r7, r7, #1	; 0x1
c7e04c64:	e1570000 	cmp	r7, r0
c7e04c68:	3affffe3 	bcc	c7e04bfc <do_mem_cmp+0x9c>
c7e04c6c:	e3a04000 	mov	r4, #0	; 0x0
		/* reset watchdog from time to time */
		if ((ngood % (64 << 10)) == 0)
			WATCHDOG_RESET();
	}

	printf("Total of %ld %s(s) were the same\n", ngood, type);
c7e04c70:	e1a01007 	mov	r1, r7
c7e04c74:	e1a0200a 	mov	r2, sl
c7e04c78:	e59f0020 	ldr	r0, [pc, #32]	; c7e04ca0 <do_mem_cmp+0x140>
c7e04c7c:	eb000f75 	bl	c7e08a58 <printf>
	return rcode;
}
c7e04c80:	e1a00004 	mov	r0, r4
c7e04c84:	e28dd018 	add	sp, sp, #24	; 0x18
c7e04c88:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e04c8c:	c7e2ff48 	.word	0xc7e2ff48
c7e04c90:	c7e2ff3f 	.word	0xc7e2ff3f
c7e04c94:	c7e2ff44 	.word	0xc7e2ff44
c7e04c98:	c7e40194 	.word	0xc7e40194
c7e04c9c:	c7e2ff4d 	.word	0xc7e2ff4d
c7e04ca0:	c7e2ff7f 	.word	0xc7e2ff7f

c7e04ca4 <do_mem_mw>:
{
	return mod_mem (cmdtp, 0, flag, argc, argv);
}

int do_mem_mw ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04ca4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e04ca8:	e1a0a002 	mov	sl, r2
	ulong	addr, writeval, count;
	int	size;

	if ((argc < 3) || (argc > 4))
c7e04cac:	e2422003 	sub	r2, r2, #3	; 0x3
c7e04cb0:	e3520001 	cmp	r2, #1	; 0x1
{
	return mod_mem (cmdtp, 0, flag, argc, argv);
}

int do_mem_mw ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04cb4:	e1a04003 	mov	r4, r3
	ulong	addr, writeval, count;
	int	size;

	if ((argc < 3) || (argc > 4))
c7e04cb8:	83e00000 	mvnhi	r0, #0	; 0x0
c7e04cbc:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
		return CMD_RET_USAGE;

	/* Check for size specification.
	*/
	if ((size = cmd_get_data_size(argv[0], 4)) < 1)
c7e04cc0:	e5930000 	ldr	r0, [r3]
c7e04cc4:	e3a01004 	mov	r1, #4	; 0x4
c7e04cc8:	eb000dbc 	bl	c7e083c0 <cmd_get_data_size>
c7e04ccc:	e2506000 	subs	r6, r0, #0	; 0x0
c7e04cd0:	d3a00001 	movle	r0, #1	; 0x1
c7e04cd4:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
		return 1;

	/* Address is specified since argc > 1
	*/
	addr = simple_strtoul(argv[1], NULL, 16);
c7e04cd8:	e3a01000 	mov	r1, #0	; 0x0
c7e04cdc:	e3a02010 	mov	r2, #16	; 0x10
c7e04ce0:	e5940004 	ldr	r0, [r4, #4]
c7e04ce4:	eb00789d 	bl	c7e22f60 <simple_strtoul>
	addr += base_address;
c7e04ce8:	e59f3070 	ldr	r3, [pc, #112]	; c7e04d60 <do_mem_mw+0xbc>
	if ((size = cmd_get_data_size(argv[0], 4)) < 1)
		return 1;

	/* Address is specified since argc > 1
	*/
	addr = simple_strtoul(argv[1], NULL, 16);
c7e04cec:	e1a09000 	mov	r9, r0
	addr += base_address;

	/* Get the value to write.
	*/
	writeval = simple_strtoul(argv[2], NULL, 16);
c7e04cf0:	e3a01000 	mov	r1, #0	; 0x0
c7e04cf4:	e5940008 	ldr	r0, [r4, #8]
c7e04cf8:	e3a02010 	mov	r2, #16	; 0x10
		return 1;

	/* Address is specified since argc > 1
	*/
	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;
c7e04cfc:	e5937000 	ldr	r7, [r3]

	/* Get the value to write.
	*/
	writeval = simple_strtoul(argv[2], NULL, 16);
c7e04d00:	eb007896 	bl	c7e22f60 <simple_strtoul>

	/* Count ? */
	if (argc == 4) {
c7e04d04:	e35a0004 	cmp	sl, #4	; 0x4
	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;

	/* Get the value to write.
	*/
	writeval = simple_strtoul(argv[2], NULL, 16);
c7e04d08:	e1a05000 	mov	r5, r0

	/* Count ? */
	if (argc == 4) {
c7e04d0c:	13a03001 	movne	r3, #1	; 0x1
c7e04d10:	1a000004 	bne	c7e04d28 <do_mem_mw+0x84>
		count = simple_strtoul(argv[3], NULL, 16);
c7e04d14:	e594000c 	ldr	r0, [r4, #12]
c7e04d18:	e3a01000 	mov	r1, #0	; 0x0
c7e04d1c:	e3a02010 	mov	r2, #16	; 0x10
c7e04d20:	eb00788e 	bl	c7e22f60 <simple_strtoul>
c7e04d24:	e1a03000 	mov	r3, r0
		return 1;

	/* Address is specified since argc > 1
	*/
	addr = simple_strtoul(argv[1], NULL, 16);
	addr += base_address;
c7e04d28:	e0890007 	add	r0, r9, r7
c7e04d2c:	ea000007 	b	c7e04d50 <do_mem_mw+0xac>
	} else {
		count = 1;
	}

	while (count-- > 0) {
		if (size == 4)
c7e04d30:	e3560004 	cmp	r6, #4	; 0x4
			*((ulong  *)addr) = (ulong )writeval;
c7e04d34:	05805000 	streq	r5, [r0]
	} else {
		count = 1;
	}

	while (count-- > 0) {
		if (size == 4)
c7e04d38:	0a000002 	beq	c7e04d48 <do_mem_mw+0xa4>
			*((ulong  *)addr) = (ulong )writeval;
		else if (size == 2)
c7e04d3c:	e3560002 	cmp	r6, #2	; 0x2
			*((ushort *)addr) = (ushort)writeval;
c7e04d40:	01c050b0 	strheq	r5, [r0]
		else
			*((u_char *)addr) = (u_char)writeval;
c7e04d44:	15c05000 	strbne	r5, [r0]
c7e04d48:	e0800006 	add	r0, r0, r6
c7e04d4c:	e2433001 	sub	r3, r3, #1	; 0x1
		count = simple_strtoul(argv[3], NULL, 16);
	} else {
		count = 1;
	}

	while (count-- > 0) {
c7e04d50:	e3530000 	cmp	r3, #0	; 0x0
c7e04d54:	1afffff5 	bne	c7e04d30 <do_mem_mw+0x8c>
c7e04d58:	e1a00003 	mov	r0, r3
		else
			*((u_char *)addr) = (u_char)writeval;
		addr += size;
	}
	return 0;
}
c7e04d5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e04d60:	c7e40194 	.word	0xc7e40194

c7e04d64 <mod_mem>:
 *	mm{.b, .w, .l} {addr}
 *	nm{.b, .w, .l} {addr}
 */
static int
mod_mem(cmd_tbl_t *cmdtp, int incrflag, int flag, int argc, char * const argv[])
{
c7e04d64:	e92d46f7 	push	{r0, r1, r2, r4, r5, r6, r7, r9, sl, lr}
	ulong	addr, i;
	int	nbytes, size;

	if (argc != 2)
c7e04d68:	e3530002 	cmp	r3, #2	; 0x2
 *	mm{.b, .w, .l} {addr}
 *	nm{.b, .w, .l} {addr}
 */
static int
mod_mem(cmd_tbl_t *cmdtp, int incrflag, int flag, int argc, char * const argv[])
{
c7e04d6c:	e1a09001 	mov	r9, r1
c7e04d70:	e59da028 	ldr	sl, [sp, #40]
	ulong	addr, i;
	int	nbytes, size;

	if (argc != 2)
c7e04d74:	13e00000 	mvnne	r0, #0	; 0x0
c7e04d78:	1a000043 	bne	c7e04e8c <mod_mem+0x128>
	reset_cmd_timeout();	/* got a good command to get here */
#endif
	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = mm_last_addr;
c7e04d7c:	e59f410c 	ldr	r4, [pc, #268]	; c7e04e90 <mod_mem+0x12c>
	size = mm_last_size;

	if ((flag & CMD_FLAG_REPEAT) == 0) {
c7e04d80:	e2127001 	ands	r7, r2, #1	; 0x1
#endif
	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = mm_last_addr;
	size = mm_last_size;
c7e04d84:	e5940008 	ldr	r0, [r4, #8]
	reset_cmd_timeout();	/* got a good command to get here */
#endif
	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = mm_last_addr;
c7e04d88:	e5945004 	ldr	r5, [r4, #4]
	size = mm_last_size;
c7e04d8c:	11a06000 	movne	r6, r0

	if ((flag & CMD_FLAG_REPEAT) == 0) {
c7e04d90:	1a00000b 	bne	c7e04dc4 <mod_mem+0x60>
		/* New command specified.  Check for a size specification.
		 * Defaults to long if no or incorrect specification.
		 */
		if ((size = cmd_get_data_size(argv[0], 4)) < 0)
c7e04d94:	e59a0000 	ldr	r0, [sl]
c7e04d98:	e3a01004 	mov	r1, #4	; 0x4
c7e04d9c:	eb000d87 	bl	c7e083c0 <cmd_get_data_size>
c7e04da0:	e2506000 	subs	r6, r0, #0	; 0x0
c7e04da4:	b3a00001 	movlt	r0, #1	; 0x1
c7e04da8:	ba000037 	blt	c7e04e8c <mod_mem+0x128>
			return 1;

		/* Address is specified since argc > 1
		*/
		addr = simple_strtoul(argv[1], NULL, 16);
c7e04dac:	e59a0004 	ldr	r0, [sl, #4]
c7e04db0:	e1a01007 	mov	r1, r7
c7e04db4:	e3a02010 	mov	r2, #16	; 0x10
c7e04db8:	eb007868 	bl	c7e22f60 <simple_strtoul>
		addr += base_address;
c7e04dbc:	e5943000 	ldr	r3, [r4]
c7e04dc0:	e0805003 	add	r5, r0, r3

	/* Print the address, followed by value.  Then accept input for
	 * the next value.  A non-converted value exits.
	 */
	do {
		printf("%08lx:", addr);
c7e04dc4:	e1a01005 	mov	r1, r5
c7e04dc8:	e59f00c4 	ldr	r0, [pc, #196]	; c7e04e94 <mod_mem+0x130>
c7e04dcc:	eb000f21 	bl	c7e08a58 <printf>
		if (size == 4)
c7e04dd0:	e3560004 	cmp	r6, #4	; 0x4
			printf(" %08x", *((uint   *)addr));
c7e04dd4:	05951000 	ldreq	r1, [r5]
c7e04dd8:	059f00b8 	ldreq	r0, [pc, #184]	; c7e04e98 <mod_mem+0x134>
	/* Print the address, followed by value.  Then accept input for
	 * the next value.  A non-converted value exits.
	 */
	do {
		printf("%08lx:", addr);
		if (size == 4)
c7e04ddc:	0a000004 	beq	c7e04df4 <mod_mem+0x90>
			printf(" %08x", *((uint   *)addr));
		else if (size == 2)
c7e04de0:	e3560002 	cmp	r6, #2	; 0x2
			printf(" %04x", *((ushort *)addr));
c7e04de4:	01d510b0 	ldrheq	r1, [r5]
c7e04de8:	059f00ac 	ldreq	r0, [pc, #172]	; c7e04e9c <mod_mem+0x138>
		else
			printf(" %02x", *((u_char *)addr));
c7e04dec:	159f00ac 	ldrne	r0, [pc, #172]	; c7e04ea0 <mod_mem+0x13c>
c7e04df0:	15d51000 	ldrbne	r1, [r5]
c7e04df4:	eb000f17 	bl	c7e08a58 <printf>

		nbytes = readline (" ? ");
c7e04df8:	e59f00a4 	ldr	r0, [pc, #164]	; c7e04ea4 <mod_mem+0x140>
c7e04dfc:	eb0025ad 	bl	c7e0e4b8 <readline>
		if (nbytes == 0 || (nbytes == 1 && console_buffer[0] == '-')) {
c7e04e00:	e3500000 	cmp	r0, #0	; 0x0
c7e04e04:	0a000005 	beq	c7e04e20 <mod_mem+0xbc>
c7e04e08:	e3500001 	cmp	r0, #1	; 0x1
c7e04e0c:	1a00000a 	bne	c7e04e3c <mod_mem+0xd8>
c7e04e10:	e59f3090 	ldr	r3, [pc, #144]	; c7e04ea8 <mod_mem+0x144>
c7e04e14:	e5d33000 	ldrb	r3, [r3]
c7e04e18:	e353002d 	cmp	r3, #45	; 0x2d
c7e04e1c:	1a000006 	bne	c7e04e3c <mod_mem+0xd8>
			/* <CR> pressed as only input, don't modify current
			 * location and move to next. "-" pressed will go back.
			 */
			if (incrflag)
c7e04e20:	e3590000 	cmp	r9, #0	; 0x0
c7e04e24:	0affffe6 	beq	c7e04dc4 <mod_mem+0x60>
				addr += nbytes ? -size : size;
c7e04e28:	e3500000 	cmp	r0, #0	; 0x0
c7e04e2c:	12663000 	rsbne	r3, r6, #0	; 0x0
c7e04e30:	01a03006 	moveq	r3, r6
c7e04e34:	e0855003 	add	r5, r5, r3
c7e04e38:	eaffffe1 	b	c7e04dc4 <mod_mem+0x60>
			break;	/* timed out, exit the command	*/
		}
#endif
		else {
			char *endp;
			i = simple_strtoul(console_buffer, &endp, 16);
c7e04e3c:	e59f4064 	ldr	r4, [pc, #100]	; c7e04ea8 <mod_mem+0x144>
c7e04e40:	e28d1004 	add	r1, sp, #4	; 0x4
c7e04e44:	e1a00004 	mov	r0, r4
c7e04e48:	e3a02010 	mov	r2, #16	; 0x10
c7e04e4c:	eb007843 	bl	c7e22f60 <simple_strtoul>
			nbytes = endp - console_buffer;
			if (nbytes) {
c7e04e50:	e59d3004 	ldr	r3, [sp, #4]
c7e04e54:	e1530004 	cmp	r3, r4
c7e04e58:	0a000008 	beq	c7e04e80 <mod_mem+0x11c>
#ifdef CONFIG_BOOT_RETRY_TIME
				/* good enough to not time out
				 */
				reset_cmd_timeout();
#endif
				if (size == 4)
c7e04e5c:	e3560004 	cmp	r6, #4	; 0x4
					*((uint   *)addr) = i;
c7e04e60:	05850000 	streq	r0, [r5]
#ifdef CONFIG_BOOT_RETRY_TIME
				/* good enough to not time out
				 */
				reset_cmd_timeout();
#endif
				if (size == 4)
c7e04e64:	0a000002 	beq	c7e04e74 <mod_mem+0x110>
					*((uint   *)addr) = i;
				else if (size == 2)
c7e04e68:	e3560002 	cmp	r6, #2	; 0x2
					*((ushort *)addr) = i;
c7e04e6c:	01c500b0 	strheq	r0, [r5]
				else
					*((u_char *)addr) = i;
c7e04e70:	15c50000 	strbne	r0, [r5]
				if (incrflag)
c7e04e74:	e3590000 	cmp	r9, #0	; 0x0
					addr += size;
c7e04e78:	10855006 	addne	r5, r5, r6
c7e04e7c:	eaffffd0 	b	c7e04dc4 <mod_mem+0x60>
			}
		}
	} while (nbytes);

	mm_last_addr = addr;
c7e04e80:	e59f3008 	ldr	r3, [pc, #8]	; c7e04e90 <mod_mem+0x12c>
	mm_last_size = size;
c7e04e84:	e3a00000 	mov	r0, #0	; 0x0
c7e04e88:	e9830060 	stmib	r3, {r5, r6}
	return 0;
}
c7e04e8c:	e8bd86fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r9, sl, pc}
c7e04e90:	c7e40194 	.word	0xc7e40194
c7e04e94:	c7e2ffa1 	.word	0xc7e2ffa1
c7e04e98:	c7e32e26 	.word	0xc7e32e26
c7e04e9c:	c7e2ffa8 	.word	0xc7e2ffa8
c7e04ea0:	c7e2ffae 	.word	0xc7e2ffae
c7e04ea4:	c7e2ffb4 	.word	0xc7e2ffb4
c7e04ea8:	c7e418bc 	.word	0xc7e418bc

c7e04eac <do_mem_nm>:
int do_mem_mm ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	return mod_mem (cmdtp, 1, flag, argc, argv);
}
int do_mem_nm ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04eac:	e92d4007 	push	{r0, r1, r2, lr}
c7e04eb0:	e1a0c002 	mov	ip, r2
	return mod_mem (cmdtp, 0, flag, argc, argv);
c7e04eb4:	e58d3000 	str	r3, [sp]
c7e04eb8:	e1a02001 	mov	r2, r1
c7e04ebc:	e1a0300c 	mov	r3, ip
c7e04ec0:	e3a01000 	mov	r1, #0	; 0x0
c7e04ec4:	ebffffa6 	bl	c7e04d64 <mod_mem>
}
c7e04ec8:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e04ecc <do_mem_mm>:
	dp_last_size = size;
	return (rc);
}

int do_mem_mm ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04ecc:	e92d4007 	push	{r0, r1, r2, lr}
c7e04ed0:	e1a0c002 	mov	ip, r2
	return mod_mem (cmdtp, 1, flag, argc, argv);
c7e04ed4:	e58d3000 	str	r3, [sp]
c7e04ed8:	e1a02001 	mov	r2, r1
c7e04edc:	e1a0300c 	mov	r3, ip
c7e04ee0:	e3a01001 	mov	r1, #1	; 0x1
c7e04ee4:	ebffff9e 	bl	c7e04d64 <mod_mem>
}
c7e04ee8:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e04eec <do_mem_md>:
 * Syntax:
 *	md{.b, .w, .l} {addr} {len}
 */
#define DISP_LINE_LEN	16
int do_mem_md ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04eec:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	int rc = 0;

	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = dp_last_addr;
c7e04ef0:	e59fa0bc 	ldr	sl, [pc, #188]	; c7e04fb4 <do_mem_md+0xc8>
 * Syntax:
 *	md{.b, .w, .l} {addr} {len}
 */
#define DISP_LINE_LEN	16
int do_mem_md ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04ef4:	e1a06003 	mov	r6, r3
	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = dp_last_addr;
	size = dp_last_size;
	length = dp_last_length;
c7e04ef8:	e59f30b8 	ldr	r3, [pc, #184]	; c7e04fb8 <do_mem_md+0xcc>

	if (argc < 2)
c7e04efc:	e3520001 	cmp	r2, #1	; 0x1

	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = dp_last_addr;
	size = dp_last_size;
c7e04f00:	e59a0010 	ldr	r0, [sl, #16]
 * Syntax:
 *	md{.b, .w, .l} {addr} {len}
 */
#define DISP_LINE_LEN	16
int do_mem_md ( cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04f04:	e1a0b002 	mov	fp, r2
	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = dp_last_addr;
	size = dp_last_size;
	length = dp_last_length;
c7e04f08:	e5937000 	ldr	r7, [r3]
	int rc = 0;

	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = dp_last_addr;
c7e04f0c:	e59a400c 	ldr	r4, [sl, #12]
	size = dp_last_size;
	length = dp_last_length;

	if (argc < 2)
c7e04f10:	d3e00000 	mvnle	r0, #0	; 0x0
c7e04f14:	da000025 	ble	c7e04fb0 <do_mem_md+0xc4>
		return CMD_RET_USAGE;

	if ((flag & CMD_FLAG_REPEAT) == 0) {
c7e04f18:	e2119001 	ands	r9, r1, #1	; 0x1

	/* We use the last specified parameters, unless new ones are
	 * entered.
	 */
	addr = dp_last_addr;
	size = dp_last_size;
c7e04f1c:	11a05000 	movne	r5, r0
	length = dp_last_length;

	if (argc < 2)
		return CMD_RET_USAGE;

	if ((flag & CMD_FLAG_REPEAT) == 0) {
c7e04f20:	1a000012 	bne	c7e04f70 <do_mem_md+0x84>
		/* New command specified.  Check for a size specification.
		 * Defaults to long if no or incorrect specification.
		 */
		if ((size = cmd_get_data_size(argv[0], 4)) < 0)
c7e04f24:	e5960000 	ldr	r0, [r6]
c7e04f28:	e3a01004 	mov	r1, #4	; 0x4
c7e04f2c:	eb000d23 	bl	c7e083c0 <cmd_get_data_size>
c7e04f30:	e2505000 	subs	r5, r0, #0	; 0x0
c7e04f34:	b3a00001 	movlt	r0, #1	; 0x1
c7e04f38:	ba00001c 	blt	c7e04fb0 <do_mem_md+0xc4>
			return 1;

		/* Address is specified since argc > 1
		*/
		addr = simple_strtoul(argv[1], NULL, 16);
c7e04f3c:	e5960004 	ldr	r0, [r6, #4]
c7e04f40:	e1a01009 	mov	r1, r9
c7e04f44:	e3a02010 	mov	r2, #16	; 0x10
c7e04f48:	eb007804 	bl	c7e22f60 <simple_strtoul>
		addr += base_address;
c7e04f4c:	e59a3000 	ldr	r3, [sl]

		/* If another parameter, it is the length to display.
		 * Length is the number of objects, not number of bytes.
		 */
		if (argc > 2)
c7e04f50:	e35b0002 	cmp	fp, #2	; 0x2
			return 1;

		/* Address is specified since argc > 1
		*/
		addr = simple_strtoul(argv[1], NULL, 16);
		addr += base_address;
c7e04f54:	e0804003 	add	r4, r0, r3

		/* If another parameter, it is the length to display.
		 * Length is the number of objects, not number of bytes.
		 */
		if (argc > 2)
c7e04f58:	0a000004 	beq	c7e04f70 <do_mem_md+0x84>
			length = simple_strtoul(argv[2], NULL, 16);
c7e04f5c:	e5960008 	ldr	r0, [r6, #8]
c7e04f60:	e1a01009 	mov	r1, r9
c7e04f64:	e3a02010 	mov	r2, #16	; 0x10
c7e04f68:	eb0077fc 	bl	c7e22f60 <simple_strtoul>
c7e04f6c:	e1a07000 	mov	r7, r0
	} else
# endif

	{
		/* Print the lines. */
		print_buffer(addr, (void*)addr, size, length, DISP_LINE_LEN/size);
c7e04f70:	e1a01005 	mov	r1, r5
c7e04f74:	e3a00010 	mov	r0, #16	; 0x10
c7e04f78:	eb0095a7 	bl	c7e2a61c <__divsi3>
c7e04f7c:	e1a01004 	mov	r1, r4
c7e04f80:	e58d0000 	str	r0, [sp]
c7e04f84:	e1a02005 	mov	r2, r5
c7e04f88:	e1a03007 	mov	r3, r7
c7e04f8c:	e1a00004 	mov	r0, r4
c7e04f90:	eb006fcf 	bl	c7e20ed4 <print_buffer>
		addr += size*length;
	}
#endif

	dp_last_addr = addr;
c7e04f94:	e0214597 	mla	r1, r7, r5, r4
c7e04f98:	e59f2014 	ldr	r2, [pc, #20]	; c7e04fb4 <do_mem_md+0xc8>
	dp_last_length = length;
c7e04f9c:	e59f3014 	ldr	r3, [pc, #20]	; c7e04fb8 <do_mem_md+0xcc>
	dp_last_size = size;
c7e04fa0:	e5825010 	str	r5, [r2, #16]
		addr += size*length;
	}
#endif

	dp_last_addr = addr;
	dp_last_length = length;
c7e04fa4:	e5837000 	str	r7, [r3]
		print_buffer(addr, (void*)addr, size, length, DISP_LINE_LEN/size);
		addr += size*length;
	}
#endif

	dp_last_addr = addr;
c7e04fa8:	e582100c 	str	r1, [r2, #12]
	dp_last_length = length;
	dp_last_size = size;
c7e04fac:	e3a00000 	mov	r0, #0	; 0x0
	return (rc);
}
c7e04fb0:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e04fb4:	c7e40194 	.word	0xc7e40194
c7e04fb8:	c7e352e8 	.word	0xc7e352e8

c7e04fbc <do_sleep>:
 */
#include <common.h>
#include <command.h>

int do_sleep (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04fbc:	e92d4070 	push	{r4, r5, r6, lr}
	ulong start = get_timer(0);
c7e04fc0:	e3a00000 	mov	r0, #0	; 0x0
 */
#include <common.h>
#include <command.h>

int do_sleep (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e04fc4:	e1a04002 	mov	r4, r2
c7e04fc8:	e1a05003 	mov	r5, r3
	ulong start = get_timer(0);
c7e04fcc:	ebffee8b 	bl	c7e00a00 <get_timer>
	ulong delay;

	if (argc != 2)
c7e04fd0:	e3540002 	cmp	r4, #2	; 0x2
#include <common.h>
#include <command.h>

int do_sleep (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	ulong start = get_timer(0);
c7e04fd4:	e1a06000 	mov	r6, r0
	ulong delay;

	if (argc != 2)
c7e04fd8:	1a000011 	bne	c7e05024 <do_sleep+0x68>
		return CMD_RET_USAGE;

	delay = simple_strtoul(argv[1], NULL, 10) * CONFIG_SYS_HZ;
c7e04fdc:	e5950004 	ldr	r0, [r5, #4]
c7e04fe0:	e3a01000 	mov	r1, #0	; 0x0
c7e04fe4:	e3a0200a 	mov	r2, #10	; 0xa
c7e04fe8:	eb0077dc 	bl	c7e22f60 <simple_strtoul>
c7e04fec:	e3a03ffa 	mov	r3, #1000	; 0x3e8
c7e04ff0:	e0040093 	mul	r4, r3, r0
c7e04ff4:	ea000004 	b	c7e0500c <do_sleep+0x50>

	while (get_timer(start) < delay) {
		if (ctrlc ())
c7e04ff8:	eb000f42 	bl	c7e08d08 <ctrlc>
c7e04ffc:	e3500000 	cmp	r0, #0	; 0x0
			return (-1);

		udelay (100);
c7e05000:	e3a00064 	mov	r0, #100	; 0x64
		return CMD_RET_USAGE;

	delay = simple_strtoul(argv[1], NULL, 10) * CONFIG_SYS_HZ;

	while (get_timer(start) < delay) {
		if (ctrlc ())
c7e05004:	1a000006 	bne	c7e05024 <do_sleep+0x68>
			return (-1);

		udelay (100);
c7e05008:	eb0077ae 	bl	c7e22ec8 <udelay>
	if (argc != 2)
		return CMD_RET_USAGE;

	delay = simple_strtoul(argv[1], NULL, 10) * CONFIG_SYS_HZ;

	while (get_timer(start) < delay) {
c7e0500c:	e1a00006 	mov	r0, r6
c7e05010:	ebffee7a 	bl	c7e00a00 <get_timer>
c7e05014:	e1500004 	cmp	r0, r4
c7e05018:	3afffff6 	bcc	c7e04ff8 <do_sleep+0x3c>
c7e0501c:	e3a00000 	mov	r0, #0	; 0x0
c7e05020:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e05024:	e3e00000 	mvn	r0, #0	; 0x0

		udelay (100);
	}

	return 0;
}
c7e05028:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0502c <do_mmcops>:

int do_mmcops(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	enum mmc_state state;

	if (argc < 2)
c7e0502c:	e3520001 	cmp	r2, #1	; 0x1
	"display MMC info",
	"- dislay info of the current MMC device"
);

int do_mmcops(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e05030:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e05034:	e1a05002 	mov	r5, r2
c7e05038:	e1a06003 	mov	r6, r3
	enum mmc_state state;

	if (argc < 2)
c7e0503c:	da0000f4 	ble	c7e05414 <do_mmcops+0x3e8>
		return CMD_RET_USAGE;

	if (curr_device < 0) {
c7e05040:	e59f43d4 	ldr	r4, [pc, #980]	; c7e0541c <do_mmcops+0x3f0>
c7e05044:	e5943000 	ldr	r3, [r4]
c7e05048:	e3530000 	cmp	r3, #0	; 0x0
c7e0504c:	aa000005 	bge	c7e05068 <do_mmcops+0x3c>
		if (get_mmc_num() > 0)
c7e05050:	eb002e8e 	bl	c7e10a90 <get_mmc_num>
c7e05054:	e3500000 	cmp	r0, #0	; 0x0
			curr_device = 0;
c7e05058:	c3a03000 	movgt	r3, #0	; 0x0
c7e0505c:	c5843000 	strgt	r3, [r4]
		else {
			puts("No MMC device available\n");
c7e05060:	d59f03b8 	ldrle	r0, [pc, #952]	; c7e05420 <do_mmcops+0x3f4>

	if (argc < 2)
		return CMD_RET_USAGE;

	if (curr_device < 0) {
		if (get_mmc_num() > 0)
c7e05064:	da000026 	ble	c7e05104 <do_mmcops+0xd8>
			puts("No MMC device available\n");
			return 1;
		}
	}

	if (strcmp(argv[1], "rescan") == 0) {
c7e05068:	e5960004 	ldr	r0, [r6, #4]
c7e0506c:	e59f13b0 	ldr	r1, [pc, #944]	; c7e05424 <do_mmcops+0x3f8>
c7e05070:	eb0075fa 	bl	c7e22860 <strcmp>
c7e05074:	e2504000 	subs	r4, r0, #0	; 0x0
c7e05078:	1a00000a 	bne	c7e050a8 <do_mmcops+0x7c>
		struct mmc *mmc = find_mmc_device(curr_device);
c7e0507c:	e59f5398 	ldr	r5, [pc, #920]	; c7e0541c <do_mmcops+0x3f0>
c7e05080:	e5950000 	ldr	r0, [r5]
c7e05084:	eb002eb2 	bl	c7e10b54 <find_mmc_device>

		if (!mmc) {
c7e05088:	e2503000 	subs	r3, r0, #0	; 0x0
			printf("no mmc device at slot %x\n", curr_device);
c7e0508c:	05951000 	ldreq	r1, [r5]
	}

	if (strcmp(argv[1], "rescan") == 0) {
		struct mmc *mmc = find_mmc_device(curr_device);

		if (!mmc) {
c7e05090:	0a0000a2 	beq	c7e05320 <do_mmcops+0x2f4>
			printf("no mmc device at slot %x\n", curr_device);
			return 1;
		}

		mmc->has_init = 0;
c7e05094:	e5834034 	str	r4, [r3, #52]

		if (mmc_init(mmc))
c7e05098:	eb0033b3 	bl	c7e11f6c <mmc_init>
c7e0509c:	e2500000 	subs	r0, r0, #0	; 0x0
c7e050a0:	13a00001 	movne	r0, #1	; 0x1
c7e050a4:	ea0000db 	b	c7e05418 <do_mmcops+0x3ec>
			return 1;
		else
			return 0;
	} else if (strncmp(argv[1], "part", 4) == 0) {
c7e050a8:	e5960004 	ldr	r0, [r6, #4]
c7e050ac:	e59f1374 	ldr	r1, [pc, #884]	; c7e05428 <do_mmcops+0x3fc>
c7e050b0:	e3a02004 	mov	r2, #4	; 0x4
c7e050b4:	eb0075f7 	bl	c7e22898 <strncmp>
c7e050b8:	e2507000 	subs	r7, r0, #0	; 0x0
c7e050bc:	1a000012 	bne	c7e0510c <do_mmcops+0xe0>
		block_dev_desc_t *mmc_dev;
		struct mmc *mmc = find_mmc_device(curr_device);
c7e050c0:	e59f4354 	ldr	r4, [pc, #852]	; c7e0541c <do_mmcops+0x3f0>
c7e050c4:	e5940000 	ldr	r0, [r4]
c7e050c8:	eb002ea1 	bl	c7e10b54 <find_mmc_device>

		if (!mmc) {
c7e050cc:	e3500000 	cmp	r0, #0	; 0x0
c7e050d0:	0a000091 	beq	c7e0531c <do_mmcops+0x2f0>
			printf("no mmc device at slot %x\n", curr_device);
			return 1;
		}
		mmc_init(mmc);
c7e050d4:	eb0033a4 	bl	c7e11f6c <mmc_init>
		mmc_dev = mmc_get_dev(curr_device);
c7e050d8:	e5940000 	ldr	r0, [r4]
c7e050dc:	eb0033d8 	bl	c7e12044 <mmc_get_dev>
		if (mmc_dev != NULL &&
c7e050e0:	e2503000 	subs	r3, r0, #0	; 0x0
c7e050e4:	0a000005 	beq	c7e05100 <do_mmcops+0xd4>
c7e050e8:	e5d3300b 	ldrb	r3, [r3, #11]
c7e050ec:	e35300ff 	cmp	r3, #255	; 0xff
c7e050f0:	0a000002 	beq	c7e05100 <do_mmcops+0xd4>
				mmc_dev->type != DEV_TYPE_UNKNOWN) {
			print_part(mmc_dev);
c7e050f4:	eb002a0f 	bl	c7e0f938 <print_part>
c7e050f8:	e1a00007 	mov	r0, r7
c7e050fc:	ea0000c5 	b	c7e05418 <do_mmcops+0x3ec>
			return 0;
		}

		puts("get mmc type error!\n");
c7e05100:	e59f0324 	ldr	r0, [pc, #804]	; c7e0542c <do_mmcops+0x400>
c7e05104:	eb000e38 	bl	c7e089ec <puts>
c7e05108:	ea000086 	b	c7e05328 <do_mmcops+0x2fc>
		return 1;
	} else if (strcmp(argv[1], "list") == 0) {
c7e0510c:	e5960004 	ldr	r0, [r6, #4]
c7e05110:	e59f1318 	ldr	r1, [pc, #792]	; c7e05430 <do_mmcops+0x404>
c7e05114:	eb0075d1 	bl	c7e22860 <strcmp>
c7e05118:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0511c:	1a000003 	bne	c7e05130 <do_mmcops+0x104>
		print_mmc_devices('\n');
c7e05120:	e280000a 	add	r0, r0, #10	; 0xa
c7e05124:	eb002e5d 	bl	c7e10aa0 <print_mmc_devices>
c7e05128:	e1a00004 	mov	r0, r4
c7e0512c:	ea0000b9 	b	c7e05418 <do_mmcops+0x3ec>
		return 0;
	} else if (strcmp(argv[1], "dev") == 0) {
c7e05130:	e5960004 	ldr	r0, [r6, #4]
c7e05134:	e59f12f8 	ldr	r1, [pc, #760]	; c7e05434 <do_mmcops+0x408>
c7e05138:	eb0075c8 	bl	c7e22860 <strcmp>
c7e0513c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e05140:	1a000047 	bne	c7e05264 <do_mmcops+0x238>
		int dev, part = -1;
		struct mmc *mmc;

		if (argc == 2)
c7e05144:	e3550002 	cmp	r5, #2	; 0x2
			dev = curr_device;
c7e05148:	059f32cc 	ldreq	r3, [pc, #716]	; c7e0541c <do_mmcops+0x3f0>
c7e0514c:	03e04000 	mvneq	r4, #0	; 0x0
c7e05150:	05935000 	ldreq	r5, [r3]
c7e05154:	0a000018 	beq	c7e051bc <do_mmcops+0x190>
		else if (argc == 3)
c7e05158:	e3550003 	cmp	r5, #3	; 0x3
c7e0515c:	1a000006 	bne	c7e0517c <do_mmcops+0x150>
			dev = simple_strtoul(argv[2], NULL, 10);
c7e05160:	e1a01004 	mov	r1, r4
c7e05164:	e5960008 	ldr	r0, [r6, #8]
c7e05168:	e3a0200a 	mov	r2, #10	; 0xa
c7e0516c:	eb00777b 	bl	c7e22f60 <simple_strtoul>
c7e05170:	e3e04000 	mvn	r4, #0	; 0x0
c7e05174:	e1a05000 	mov	r5, r0
c7e05178:	ea00000f 	b	c7e051bc <do_mmcops+0x190>
		else if (argc == 4) {
c7e0517c:	e3550004 	cmp	r5, #4	; 0x4
c7e05180:	1a0000a3 	bne	c7e05414 <do_mmcops+0x3e8>
			dev = (int)simple_strtoul(argv[2], NULL, 10);
c7e05184:	e1a01004 	mov	r1, r4
c7e05188:	e3a0200a 	mov	r2, #10	; 0xa
c7e0518c:	e5960008 	ldr	r0, [r6, #8]
c7e05190:	eb007772 	bl	c7e22f60 <simple_strtoul>
			part = (int)simple_strtoul(argv[3], NULL, 10);
c7e05194:	e1a01004 	mov	r1, r4
		if (argc == 2)
			dev = curr_device;
		else if (argc == 3)
			dev = simple_strtoul(argv[2], NULL, 10);
		else if (argc == 4) {
			dev = (int)simple_strtoul(argv[2], NULL, 10);
c7e05198:	e1a05000 	mov	r5, r0
			part = (int)simple_strtoul(argv[3], NULL, 10);
c7e0519c:	e3a0200a 	mov	r2, #10	; 0xa
c7e051a0:	e596000c 	ldr	r0, [r6, #12]
c7e051a4:	eb00776d 	bl	c7e22f60 <simple_strtoul>
			if (part > PART_ACCESS_MASK) {
c7e051a8:	e3500007 	cmp	r0, #7	; 0x7
			dev = curr_device;
		else if (argc == 3)
			dev = simple_strtoul(argv[2], NULL, 10);
		else if (argc == 4) {
			dev = (int)simple_strtoul(argv[2], NULL, 10);
			part = (int)simple_strtoul(argv[3], NULL, 10);
c7e051ac:	e1a04000 	mov	r4, r0
			if (part > PART_ACCESS_MASK) {
				printf("#part_num shouldn't be larger"
c7e051b0:	c3a01007 	movgt	r1, #7	; 0x7
c7e051b4:	c59f027c 	ldrgt	r0, [pc, #636]	; c7e05438 <do_mmcops+0x40c>
		else if (argc == 3)
			dev = simple_strtoul(argv[2], NULL, 10);
		else if (argc == 4) {
			dev = (int)simple_strtoul(argv[2], NULL, 10);
			part = (int)simple_strtoul(argv[3], NULL, 10);
			if (part > PART_ACCESS_MASK) {
c7e051b8:	ca000059 	bgt	c7e05324 <do_mmcops+0x2f8>
				return 1;
			}
		} else
			return CMD_RET_USAGE;

		mmc = find_mmc_device(dev);
c7e051bc:	e1a00005 	mov	r0, r5
c7e051c0:	eb002e63 	bl	c7e10b54 <find_mmc_device>
		if (!mmc) {
c7e051c4:	e2506000 	subs	r6, r0, #0	; 0x0
			printf("no mmc device at slot %x\n", dev);
c7e051c8:	01a01005 	moveq	r1, r5
			}
		} else
			return CMD_RET_USAGE;

		mmc = find_mmc_device(dev);
		if (!mmc) {
c7e051cc:	0a000053 	beq	c7e05320 <do_mmcops+0x2f4>
			printf("no mmc device at slot %x\n", dev);
			return 1;
		}

		mmc_init(mmc);
c7e051d0:	eb003365 	bl	c7e11f6c <mmc_init>
		if (part != -1) {
c7e051d4:	e3740001 	cmn	r4, #1	; 0x1
c7e051d8:	0a000012 	beq	c7e05228 <do_mmcops+0x1fc>
			int ret;
			if (mmc->part_config == MMCPART_NOAVAILABLE) {
c7e051dc:	e5d63082 	ldrb	r3, [r6, #130]
c7e051e0:	e35300ff 	cmp	r3, #255	; 0xff
c7e051e4:	1a000002 	bne	c7e051f4 <do_mmcops+0x1c8>
				printf("Card doesn't support part_switch\n");
c7e051e8:	e59f024c 	ldr	r0, [pc, #588]	; c7e0543c <do_mmcops+0x410>
c7e051ec:	eb000e19 	bl	c7e08a58 <printf>
c7e051f0:	ea00004c 	b	c7e05328 <do_mmcops+0x2fc>
				return 1;
			}

			if (part != mmc->part_num) {
c7e051f4:	e5d63083 	ldrb	r3, [r6, #131]
c7e051f8:	e1540003 	cmp	r4, r3
c7e051fc:	0a000009 	beq	c7e05228 <do_mmcops+0x1fc>
				ret = mmc_switch_part(dev, part);
c7e05200:	e1a01004 	mov	r1, r4
c7e05204:	e1a00005 	mov	r0, r5
c7e05208:	eb003168 	bl	c7e117b0 <mmc_switch_part>
				if (!ret)
c7e0520c:	e3500000 	cmp	r0, #0	; 0x0
c7e05210:	159f2228 	ldrne	r2, [pc, #552]	; c7e05440 <do_mmcops+0x414>
					mmc->part_num = part;
c7e05214:	059f2228 	ldreq	r2, [pc, #552]	; c7e05444 <do_mmcops+0x418>
c7e05218:	05c64083 	strbeq	r4, [r6, #131]

				printf("switch to partions #%d, %s\n",
c7e0521c:	e1a01004 	mov	r1, r4
c7e05220:	e59f0220 	ldr	r0, [pc, #544]	; c7e05448 <do_mmcops+0x41c>
c7e05224:	eb000e0b 	bl	c7e08a58 <printf>
						part, (!ret) ? "OK" : "ERROR");
			}
		}
		curr_device = dev;
c7e05228:	e59f31ec 	ldr	r3, [pc, #492]	; c7e0541c <do_mmcops+0x3f0>
c7e0522c:	e5835000 	str	r5, [r3]
		if (mmc->part_config == MMCPART_NOAVAILABLE)
c7e05230:	e5d63082 	ldrb	r3, [r6, #130]
c7e05234:	e35300ff 	cmp	r3, #255	; 0xff
c7e05238:	1a000003 	bne	c7e0524c <do_mmcops+0x220>
			printf("mmc%d is current device\n", curr_device);
c7e0523c:	e1a01005 	mov	r1, r5
c7e05240:	e59f0204 	ldr	r0, [pc, #516]	; c7e0544c <do_mmcops+0x420>
c7e05244:	eb000e03 	bl	c7e08a58 <printf>
c7e05248:	ea000003 	b	c7e0525c <do_mmcops+0x230>
		else
			printf("mmc%d(part %d) is current device\n",
c7e0524c:	e1a01005 	mov	r1, r5
c7e05250:	e5d62083 	ldrb	r2, [r6, #131]
c7e05254:	e59f01f4 	ldr	r0, [pc, #500]	; c7e05450 <do_mmcops+0x424>
c7e05258:	eb000dfe 	bl	c7e08a58 <printf>
c7e0525c:	e3a00000 	mov	r0, #0	; 0x0
c7e05260:	ea00006c 	b	c7e05418 <do_mmcops+0x3ec>
				curr_device, mmc->part_num);

		return 0;
	}

	if (strcmp(argv[1], "read") == 0)
c7e05264:	e5960004 	ldr	r0, [r6, #4]
c7e05268:	e59f11e4 	ldr	r1, [pc, #484]	; c7e05454 <do_mmcops+0x428>
c7e0526c:	eb00757b 	bl	c7e22860 <strcmp>
c7e05270:	e3500000 	cmp	r0, #0	; 0x0
c7e05274:	03a0a001 	moveq	sl, #1	; 0x1
c7e05278:	0a00000b 	beq	c7e052ac <do_mmcops+0x280>
		state = MMC_READ;
	else if (strcmp(argv[1], "write") == 0)
c7e0527c:	e5960004 	ldr	r0, [r6, #4]
c7e05280:	e59f11d0 	ldr	r1, [pc, #464]	; c7e05458 <do_mmcops+0x42c>
c7e05284:	eb007575 	bl	c7e22860 <strcmp>
c7e05288:	e3500000 	cmp	r0, #0	; 0x0
c7e0528c:	03a0a002 	moveq	sl, #2	; 0x2
c7e05290:	0a000005 	beq	c7e052ac <do_mmcops+0x280>
		state = MMC_WRITE;
	else if (strcmp(argv[1], "erase") == 0)
c7e05294:	e5960004 	ldr	r0, [r6, #4]
c7e05298:	e59f11bc 	ldr	r1, [pc, #444]	; c7e0545c <do_mmcops+0x430>
c7e0529c:	eb00756f 	bl	c7e22860 <strcmp>
c7e052a0:	e3500000 	cmp	r0, #0	; 0x0
c7e052a4:	1a00005a 	bne	c7e05414 <do_mmcops+0x3e8>
c7e052a8:	e3a0a003 	mov	sl, #3	; 0x3
		state = MMC_ERASE;
	else
		state = MMC_INVALID;

	if (state != MMC_INVALID) {
		struct mmc *mmc = find_mmc_device(curr_device);
c7e052ac:	e59f3168 	ldr	r3, [pc, #360]	; c7e0541c <do_mmcops+0x3f0>
c7e052b0:	e5930000 	ldr	r0, [r3]
c7e052b4:	eb002e26 	bl	c7e10b54 <find_mmc_device>
		int idx = 2;
		u32 blk, cnt, n;
		void *addr;

		if (state != MMC_ERASE) {
c7e052b8:	e35a0003 	cmp	sl, #3	; 0x3
		state = MMC_ERASE;
	else
		state = MMC_INVALID;

	if (state != MMC_INVALID) {
		struct mmc *mmc = find_mmc_device(curr_device);
c7e052bc:	e1a0b000 	mov	fp, r0
		int idx = 2;
		u32 blk, cnt, n;
		void *addr;

		if (state != MMC_ERASE) {
c7e052c0:	03a04002 	moveq	r4, #2	; 0x2
c7e052c4:	03a09000 	moveq	r9, #0	; 0x0
c7e052c8:	0a000005 	beq	c7e052e4 <do_mmcops+0x2b8>
			addr = (void *)simple_strtoul(argv[idx], NULL, 16);
c7e052cc:	e5960008 	ldr	r0, [r6, #8]
c7e052d0:	e3a01000 	mov	r1, #0	; 0x0
c7e052d4:	e3a02010 	mov	r2, #16	; 0x10
c7e052d8:	eb007720 	bl	c7e22f60 <simple_strtoul>
c7e052dc:	e3a04003 	mov	r4, #3	; 0x3
c7e052e0:	e1a09000 	mov	r9, r0
			++idx;
		} else
			addr = 0;
		blk = simple_strtoul(argv[idx], NULL, 16);
c7e052e4:	e3a01000 	mov	r1, #0	; 0x0
c7e052e8:	e3a02010 	mov	r2, #16	; 0x10
c7e052ec:	e7960104 	ldr	r0, [r6, r4, lsl #2]
c7e052f0:	eb00771a 	bl	c7e22f60 <simple_strtoul>
		cnt = simple_strtoul(argv[idx + 1], NULL, 16);
c7e052f4:	e2843001 	add	r3, r4, #1	; 0x1
		if (state != MMC_ERASE) {
			addr = (void *)simple_strtoul(argv[idx], NULL, 16);
			++idx;
		} else
			addr = 0;
		blk = simple_strtoul(argv[idx], NULL, 16);
c7e052f8:	e1a07000 	mov	r7, r0
		cnt = simple_strtoul(argv[idx + 1], NULL, 16);
c7e052fc:	e3a01000 	mov	r1, #0	; 0x0
c7e05300:	e7960103 	ldr	r0, [r6, r3, lsl #2]
c7e05304:	e3a02010 	mov	r2, #16	; 0x10
c7e05308:	eb007714 	bl	c7e22f60 <simple_strtoul>

		if (!mmc) {
c7e0530c:	e35b0000 	cmp	fp, #0	; 0x0
			addr = (void *)simple_strtoul(argv[idx], NULL, 16);
			++idx;
		} else
			addr = 0;
		blk = simple_strtoul(argv[idx], NULL, 16);
		cnt = simple_strtoul(argv[idx + 1], NULL, 16);
c7e05310:	e1a05000 	mov	r5, r0
c7e05314:	e59f4100 	ldr	r4, [pc, #256]	; c7e0541c <do_mmcops+0x3f0>

		if (!mmc) {
c7e05318:	1a000004 	bne	c7e05330 <do_mmcops+0x304>
			printf("no mmc device at slot %x\n", curr_device);
c7e0531c:	e5941000 	ldr	r1, [r4]
c7e05320:	e59f0138 	ldr	r0, [pc, #312]	; c7e05460 <do_mmcops+0x434>
c7e05324:	eb000dcb 	bl	c7e08a58 <printf>
c7e05328:	e3a00001 	mov	r0, #1	; 0x1
c7e0532c:	ea000039 	b	c7e05418 <do_mmcops+0x3ec>
			return 1;
		}

		printf("\nMMC %s: dev # %d, block # %d, count %d ... ",
c7e05330:	e5961004 	ldr	r1, [r6, #4]
c7e05334:	e5942000 	ldr	r2, [r4]
c7e05338:	e1a03007 	mov	r3, r7
c7e0533c:	e59f0120 	ldr	r0, [pc, #288]	; c7e05464 <do_mmcops+0x438>
c7e05340:	e58d5000 	str	r5, [sp]
c7e05344:	eb000dc3 	bl	c7e08a58 <printf>
				argv[1], curr_device, blk, cnt);

		mmc_init(mmc);
c7e05348:	e1a0000b 	mov	r0, fp
c7e0534c:	eb003306 	bl	c7e11f6c <mmc_init>

		switch (state) {
c7e05350:	e35a0002 	cmp	sl, #2	; 0x2
c7e05354:	0a00000e 	beq	c7e05394 <do_mmcops+0x368>
c7e05358:	e35a0003 	cmp	sl, #3	; 0x3
c7e0535c:	0a000013 	beq	c7e053b0 <do_mmcops+0x384>
c7e05360:	e35a0001 	cmp	sl, #1	; 0x1
c7e05364:	1a000018 	bne	c7e053cc <do_mmcops+0x3a0>
		case MMC_READ:
			n = mmc->block_dev.block_read(curr_device, blk,
c7e05368:	e1a01007 	mov	r1, r7
c7e0536c:	e5940000 	ldr	r0, [r4]
c7e05370:	e1a02005 	mov	r2, r5
c7e05374:	e1a03009 	mov	r3, r9
c7e05378:	e1a0e00f 	mov	lr, pc
c7e0537c:	e59bf100 	ldr	pc, [fp, #256]
						      cnt, addr);
			/* flush cache after read */
			flush_cache((ulong)addr, cnt * 512); /* FIXME */
c7e05380:	e1a01485 	lsl	r1, r5, #9

		mmc_init(mmc);

		switch (state) {
		case MMC_READ:
			n = mmc->block_dev.block_read(curr_device, blk,
c7e05384:	e1a04000 	mov	r4, r0
						      cnt, addr);
			/* flush cache after read */
			flush_cache((ulong)addr, cnt * 512); /* FIXME */
c7e05388:	e1a00009 	mov	r0, r9
c7e0538c:	ebffeffb 	bl	c7e01380 <__flush_cache>
c7e05390:	ea000014 	b	c7e053e8 <do_mmcops+0x3bc>
			break;
		case MMC_WRITE:
			n = mmc->block_dev.block_write(curr_device, blk,
c7e05394:	e5940000 	ldr	r0, [r4]
c7e05398:	e1a01007 	mov	r1, r7
c7e0539c:	e1a03009 	mov	r3, r9
c7e053a0:	e1a02005 	mov	r2, r5
c7e053a4:	e1a0e00f 	mov	lr, pc
c7e053a8:	e59bf104 	ldr	pc, [fp, #260]
c7e053ac:	ea000004 	b	c7e053c4 <do_mmcops+0x398>
						      cnt, addr);
			break;
		case MMC_ERASE:
			n = mmc->block_dev.block_erase(curr_device, blk, cnt);
c7e053b0:	e5940000 	ldr	r0, [r4]
c7e053b4:	e1a01007 	mov	r1, r7
c7e053b8:	e1a02005 	mov	r2, r5
c7e053bc:	e1a0e00f 	mov	lr, pc
c7e053c0:	e59bf108 	ldr	pc, [fp, #264]
c7e053c4:	e1a04000 	mov	r4, r0
c7e053c8:	ea000006 	b	c7e053e8 <do_mmcops+0x3bc>
			break;
		default:
			BUG();
c7e053cc:	e59f0094 	ldr	r0, [pc, #148]	; c7e05468 <do_mmcops+0x43c>
c7e053d0:	e59f1094 	ldr	r1, [pc, #148]	; c7e0546c <do_mmcops+0x440>
c7e053d4:	e59f2094 	ldr	r2, [pc, #148]	; c7e05470 <do_mmcops+0x444>
c7e053d8:	e59f3094 	ldr	r3, [pc, #148]	; c7e05474 <do_mmcops+0x448>
c7e053dc:	eb000d9d 	bl	c7e08a58 <printf>
c7e053e0:	e59f0090 	ldr	r0, [pc, #144]	; c7e05478 <do_mmcops+0x44c>
c7e053e4:	eb0077c3 	bl	c7e232f8 <panic>
		}

		printf("%d blocks %s: %s\n",
c7e053e8:	e59f1050 	ldr	r1, [pc, #80]	; c7e05440 <do_mmcops+0x414>
c7e053ec:	e1540005 	cmp	r4, r5
c7e053f0:	e59f304c 	ldr	r3, [pc, #76]	; c7e05444 <do_mmcops+0x418>
c7e053f4:	e5962004 	ldr	r2, [r6, #4]
c7e053f8:	11a03001 	movne	r3, r1
c7e053fc:	e59f0078 	ldr	r0, [pc, #120]	; c7e0547c <do_mmcops+0x450>
c7e05400:	e1a01004 	mov	r1, r4
c7e05404:	eb000d93 	bl	c7e08a58 <printf>
				n, argv[1], (n == cnt) ? "OK" : "ERROR");
		return (n == cnt) ? 0 : 1;
c7e05408:	e0540005 	subs	r0, r4, r5
c7e0540c:	13a00001 	movne	r0, #1	; 0x1
c7e05410:	ea000000 	b	c7e05418 <do_mmcops+0x3ec>
c7e05414:	e3e00000 	mvn	r0, #0	; 0x0
	}

	return CMD_RET_USAGE;
}
c7e05418:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e0541c:	c7e352ec 	.word	0xc7e352ec
c7e05420:	c7e302c9 	.word	0xc7e302c9
c7e05424:	c7e302e2 	.word	0xc7e302e2
c7e05428:	c7e3089e 	.word	0xc7e3089e
c7e0542c:	c7e30303 	.word	0xc7e30303
c7e05430:	c7e30318 	.word	0xc7e30318
c7e05434:	c7e3031d 	.word	0xc7e3031d
c7e05438:	c7e30321 	.word	0xc7e30321
c7e0543c:	c7e30348 	.word	0xc7e30348
c7e05440:	c7e3036a 	.word	0xc7e3036a
c7e05444:	c7e30370 	.word	0xc7e30370
c7e05448:	c7e30373 	.word	0xc7e30373
c7e0544c:	c7e3038f 	.word	0xc7e3038f
c7e05450:	c7e303a8 	.word	0xc7e303a8
c7e05454:	c7e30898 	.word	0xc7e30898
c7e05458:	c7e303ca 	.word	0xc7e303ca
c7e0545c:	c7e303d0 	.word	0xc7e303d0
c7e05460:	c7e302e9 	.word	0xc7e302e9
c7e05464:	c7e303d6 	.word	0xc7e303d6
c7e05468:	c7e30403 	.word	0xc7e30403
c7e0546c:	c7e30420 	.word	0xc7e30420
c7e05470:	0000012d 	.word	0x0000012d
c7e05474:	c7e2b1a4 	.word	0xc7e2b1a4
c7e05478:	c7e3042a 	.word	0xc7e3042a
c7e0547c:	c7e3042f 	.word	0xc7e3042f

c7e05480 <do_mmcinfo>:

	printf("Bus Width: %d-bit\n", mmc->bus_width);
}

int do_mmcinfo (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e05480:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
	struct mmc *mmc;

	if (curr_device < 0) {
c7e05484:	e59f4134 	ldr	r4, [pc, #308]	; c7e055c0 <do_mmcinfo+0x140>
c7e05488:	e5943000 	ldr	r3, [r4]
c7e0548c:	e3530000 	cmp	r3, #0	; 0x0
c7e05490:	aa000007 	bge	c7e054b4 <do_mmcinfo+0x34>
		if (get_mmc_num() > 0)
c7e05494:	eb002d7d 	bl	c7e10a90 <get_mmc_num>
c7e05498:	e3500000 	cmp	r0, #0	; 0x0
			curr_device = 0;
c7e0549c:	c3a03000 	movgt	r3, #0	; 0x0
c7e054a0:	c5843000 	strgt	r3, [r4]
int do_mmcinfo (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	struct mmc *mmc;

	if (curr_device < 0) {
		if (get_mmc_num() > 0)
c7e054a4:	ca000002 	bgt	c7e054b4 <do_mmcinfo+0x34>
			curr_device = 0;
		else {
			puts("No MMC device available\n");
c7e054a8:	e59f0114 	ldr	r0, [pc, #276]	; c7e055c4 <do_mmcinfo+0x144>
c7e054ac:	eb000d4e 	bl	c7e089ec <puts>
c7e054b0:	ea000040 	b	c7e055b8 <do_mmcinfo+0x138>
			return 1;
		}
	}

	mmc = find_mmc_device(curr_device);
c7e054b4:	e59f4104 	ldr	r4, [pc, #260]	; c7e055c0 <do_mmcinfo+0x140>
c7e054b8:	e5940000 	ldr	r0, [r4]
c7e054bc:	eb002da4 	bl	c7e10b54 <find_mmc_device>

	if (mmc) {
c7e054c0:	e2505000 	subs	r5, r0, #0	; 0x0
c7e054c4:	0a000038 	beq	c7e055ac <do_mmcinfo+0x12c>
		mmc_init(mmc);
c7e054c8:	eb0032a7 	bl	c7e11f6c <mmc_init>
	MMC_WRITE,
	MMC_ERASE,
};
static void print_mmcinfo(struct mmc *mmc)
{
	printf("Device: %s\n", mmc->name);
c7e054cc:	e2851008 	add	r1, r5, #8	; 0x8
c7e054d0:	e59f00f0 	ldr	r0, [pc, #240]	; c7e055c8 <do_mmcinfo+0x148>
c7e054d4:	eb000d5f 	bl	c7e08a58 <printf>
	printf("Manufacturer ID: %x\n", mmc->cid[0] >> 24);
c7e054d8:	e5d51073 	ldrb	r1, [r5, #115]
c7e054dc:	e59f00e8 	ldr	r0, [pc, #232]	; c7e055cc <do_mmcinfo+0x14c>
c7e054e0:	eb000d5c 	bl	c7e08a58 <printf>
	printf("OEM: %x\n", (mmc->cid[0] >> 8) & 0xffff);
c7e054e4:	e5951070 	ldr	r1, [r5, #112]
c7e054e8:	e59f00e0 	ldr	r0, [pc, #224]	; c7e055d0 <do_mmcinfo+0x150>
c7e054ec:	e1a01401 	lsl	r1, r1, #8
c7e054f0:	e1a01821 	lsr	r1, r1, #16
c7e054f4:	eb000d57 	bl	c7e08a58 <printf>
	printf("Name: %c%c%c%c%c \n", mmc->cid[0] & 0xff,
c7e054f8:	e595c074 	ldr	ip, [r5, #116]
c7e054fc:	e5d51070 	ldrb	r1, [r5, #112]
c7e05500:	e1a0382c 	lsr	r3, ip, #16
c7e05504:	e1a0442c 	lsr	r4, ip, #8
c7e05508:	e1a02c2c 	lsr	r2, ip, #24
c7e0550c:	e20330ff 	and	r3, r3, #255	; 0xff
c7e05510:	e20cc0ff 	and	ip, ip, #255	; 0xff
c7e05514:	e20440ff 	and	r4, r4, #255	; 0xff
c7e05518:	e59f00b4 	ldr	r0, [pc, #180]	; c7e055d4 <do_mmcinfo+0x154>
c7e0551c:	e88d1010 	stm	sp, {r4, ip}
c7e05520:	eb000d4c 	bl	c7e08a58 <printf>
			(mmc->cid[1] >> 24), (mmc->cid[1] >> 16) & 0xff,
			(mmc->cid[1] >> 8) & 0xff, mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n", mmc->tran_speed);
c7e05524:	e5951084 	ldr	r1, [r5, #132]
c7e05528:	e59f00a8 	ldr	r0, [pc, #168]	; c7e055d8 <do_mmcinfo+0x158>
c7e0552c:	eb000d49 	bl	c7e08a58 <printf>
	printf("Rd Block Len: %d\n", mmc->read_bl_len);
c7e05530:	e5951088 	ldr	r1, [r5, #136]
c7e05534:	e59f00a0 	ldr	r0, [pc, #160]	; c7e055dc <do_mmcinfo+0x15c>
c7e05538:	eb000d46 	bl	c7e08a58 <printf>

	printf("%s version %d.%d\n", IS_SD(mmc) ? "SD" : "MMC",
c7e0553c:	e5953030 	ldr	r3, [r5, #48]
c7e05540:	e59f0098 	ldr	r0, [pc, #152]	; c7e055e0 <do_mmcinfo+0x160>
c7e05544:	e59f1098 	ldr	r1, [pc, #152]	; c7e055e4 <do_mmcinfo+0x164>
c7e05548:	e3130802 	tst	r3, #131072	; 0x20000
c7e0554c:	e1a02223 	lsr	r2, r3, #4
c7e05550:	01a01000 	moveq	r1, r0
c7e05554:	e203300f 	and	r3, r3, #15	; 0xf
c7e05558:	e202200f 	and	r2, r2, #15	; 0xf
c7e0555c:	e59f0084 	ldr	r0, [pc, #132]	; c7e055e8 <do_mmcinfo+0x168>
c7e05560:	eb000d3c 	bl	c7e08a58 <printf>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n", mmc->high_capacity ? "Yes" : "No");
c7e05564:	e5952040 	ldr	r2, [r5, #64]
c7e05568:	e59f307c 	ldr	r3, [pc, #124]	; c7e055ec <do_mmcinfo+0x16c>
c7e0556c:	e3520000 	cmp	r2, #0	; 0x0
c7e05570:	e59f1078 	ldr	r1, [pc, #120]	; c7e055f0 <do_mmcinfo+0x170>
c7e05574:	e59f0078 	ldr	r0, [pc, #120]	; c7e055f4 <do_mmcinfo+0x174>
c7e05578:	01a01003 	moveq	r1, r3
c7e0557c:	eb000d35 	bl	c7e08a58 <printf>
	puts("Capacity: ");
c7e05580:	e59f0070 	ldr	r0, [pc, #112]	; c7e055f8 <do_mmcinfo+0x178>
c7e05584:	eb000d18 	bl	c7e089ec <puts>
	print_size(mmc->capacity, "\n");
c7e05588:	e2851098 	add	r1, r5, #152	; 0x98
c7e0558c:	e8910003 	ldm	r1, {r0, r1}
c7e05590:	e59f2064 	ldr	r2, [pc, #100]	; c7e055fc <do_mmcinfo+0x17c>
c7e05594:	eb006def 	bl	c7e20d58 <print_size>

	printf("Bus Width: %d-bit\n", mmc->bus_width);
c7e05598:	e5951044 	ldr	r1, [r5, #68]
c7e0559c:	e59f005c 	ldr	r0, [pc, #92]	; c7e05600 <do_mmcinfo+0x180>
c7e055a0:	eb000d2c 	bl	c7e08a58 <printf>
c7e055a4:	e3a00000 	mov	r0, #0	; 0x0
c7e055a8:	ea000003 	b	c7e055bc <do_mmcinfo+0x13c>
		mmc_init(mmc);

		print_mmcinfo(mmc);
		return 0;
	} else {
		printf("no mmc device at slot %x\n", curr_device);
c7e055ac:	e5941000 	ldr	r1, [r4]
c7e055b0:	e59f004c 	ldr	r0, [pc, #76]	; c7e05604 <do_mmcinfo+0x184>
c7e055b4:	eb000d27 	bl	c7e08a58 <printf>
c7e055b8:	e3a00001 	mov	r0, #1	; 0x1
		return 1;
	}
}
c7e055bc:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e055c0:	c7e352ec 	.word	0xc7e352ec
c7e055c4:	c7e302c9 	.word	0xc7e302c9
c7e055c8:	c7e30441 	.word	0xc7e30441
c7e055cc:	c7e3044d 	.word	0xc7e3044d
c7e055d0:	c7e30462 	.word	0xc7e30462
c7e055d4:	c7e3046b 	.word	0xc7e3046b
c7e055d8:	c7e3047e 	.word	0xc7e3047e
c7e055dc:	c7e3048e 	.word	0xc7e3048e
c7e055e0:	c7e304a0 	.word	0xc7e304a0
c7e055e4:	c7e32621 	.word	0xc7e32621
c7e055e8:	c7e304a4 	.word	0xc7e304a4
c7e055ec:	c7e304b6 	.word	0xc7e304b6
c7e055f0:	c7e304b9 	.word	0xc7e304b9
c7e055f4:	c7e304bd 	.word	0xc7e304bd
c7e055f8:	c7e304d0 	.word	0xc7e304d0
c7e055fc:	c7e31f94 	.word	0xc7e31f94
c7e05600:	c7e304db 	.word	0xc7e304db
c7e05604:	c7e302e9 	.word	0xc7e302e9

c7e05608 <bootstage_error>:
	show_boot_progress(id);
	return 0;
}

static inline ulong bootstage_error(enum bootstage_id id)
{
c7e05608:	e92d4010 	push	{r4, lr}
	show_boot_progress(-id);
c7e0560c:	e2600000 	rsb	r0, r0, #0	; 0x0
c7e05610:	eb002099 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e05614:	e3a00000 	mov	r0, #0	; 0x0
c7e05618:	e8bd8010 	pop	{r4, pc}

c7e0561c <bootstage_mark>:
 * This is a dummy implementation which just calls show_boot_progress(),
 * and won't even do that unless CONFIG_SHOW_BOOT_PROGRESS is defined
 */

static inline ulong bootstage_mark(enum bootstage_id id)
{
c7e0561c:	e92d4010 	push	{r4, lr}
	show_boot_progress(id);
c7e05620:	eb002095 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e05624:	e3a00000 	mov	r0, #0	; 0x0
c7e05628:	e8bd8010 	pop	{r4, pc}

c7e0562c <do_nandboot>:

	return bootm_maybe_autostart(cmdtp, cmd);
}

int do_nandboot(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e0562c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e05630:	e1a04002 	mov	r4, r2
c7e05634:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e05638:	e58d000c 	str	r0, [sp, #12]
		}
	}
#endif

	bootstage_mark(BOOTSTAGE_ID_NAND_PART);
	switch (argc) {
c7e0563c:	e2444001 	sub	r4, r4, #1	; 0x1
					       part->offset, addr, argv[0]);
		}
	}
#endif

	bootstage_mark(BOOTSTAGE_ID_NAND_PART);
c7e05640:	e3a00034 	mov	r0, #52	; 0x34

	return bootm_maybe_autostart(cmdtp, cmd);
}

int do_nandboot(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e05644:	e1a05003 	mov	r5, r3
					       part->offset, addr, argv[0]);
		}
	}
#endif

	bootstage_mark(BOOTSTAGE_ID_NAND_PART);
c7e05648:	ebfffff3 	bl	c7e0561c <bootstage_mark>
	switch (argc) {
c7e0564c:	e3540003 	cmp	r4, #3	; 0x3
c7e05650:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
c7e05654:	ea000024 	b	c7e056ec <do_nandboot+0xc0>
c7e05658:	c7e05668 	.word	0xc7e05668
c7e0565c:	c7e05674 	.word	0xc7e05674
c7e05660:	c7e0569c 	.word	0xc7e0569c
c7e05664:	c7e056bc 	.word	0xc7e056bc
	case 1:
		addr = CONFIG_SYS_LOAD_ADDR;
		boot_device = getenv("bootdevice");
c7e05668:	e59f0274 	ldr	r0, [pc, #628]	; c7e058e4 <do_nandboot+0x2b8>
c7e0566c:	e3a06205 	mov	r6, #1342177280	; 0x50000000
c7e05670:	ea000005 	b	c7e0568c <do_nandboot+0x60>
		break;
	case 2:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e05674:	e3a01000 	mov	r1, #0	; 0x0
c7e05678:	e3a02010 	mov	r2, #16	; 0x10
c7e0567c:	e5950004 	ldr	r0, [r5, #4]
c7e05680:	eb007636 	bl	c7e22f60 <simple_strtoul>
c7e05684:	e1a06000 	mov	r6, r0
		boot_device = getenv("bootdevice");
c7e05688:	e59f0254 	ldr	r0, [pc, #596]	; c7e058e4 <do_nandboot+0x2b8>
c7e0568c:	eb000682 	bl	c7e0709c <getenv>
c7e05690:	e3a07000 	mov	r7, #0	; 0x0
c7e05694:	e1a04000 	mov	r4, r0
c7e05698:	ea000017 	b	c7e056fc <do_nandboot+0xd0>
		break;
	case 3:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e0569c:	e5950004 	ldr	r0, [r5, #4]
c7e056a0:	e3a01000 	mov	r1, #0	; 0x0
c7e056a4:	e3a02010 	mov	r2, #16	; 0x10
c7e056a8:	eb00762c 	bl	c7e22f60 <simple_strtoul>
		boot_device = argv[2];
c7e056ac:	e3a07000 	mov	r7, #0	; 0x0
	case 2:
		addr = simple_strtoul(argv[1], NULL, 16);
		boot_device = getenv("bootdevice");
		break;
	case 3:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e056b0:	e1a06000 	mov	r6, r0
		boot_device = argv[2];
c7e056b4:	e5954008 	ldr	r4, [r5, #8]
c7e056b8:	ea00000f 	b	c7e056fc <do_nandboot+0xd0>
		break;
	case 4:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e056bc:	e3a01000 	mov	r1, #0	; 0x0
c7e056c0:	e3a02010 	mov	r2, #16	; 0x10
c7e056c4:	e5950004 	ldr	r0, [r5, #4]
c7e056c8:	eb007624 	bl	c7e22f60 <simple_strtoul>
		boot_device = argv[2];
		offset = simple_strtoul(argv[3], NULL, 16);
c7e056cc:	e3a01000 	mov	r1, #0	; 0x0
	case 3:
		addr = simple_strtoul(argv[1], NULL, 16);
		boot_device = argv[2];
		break;
	case 4:
		addr = simple_strtoul(argv[1], NULL, 16);
c7e056d0:	e1a06000 	mov	r6, r0
		boot_device = argv[2];
		offset = simple_strtoul(argv[3], NULL, 16);
c7e056d4:	e3a02010 	mov	r2, #16	; 0x10
c7e056d8:	e595000c 	ldr	r0, [r5, #12]
		addr = simple_strtoul(argv[1], NULL, 16);
		boot_device = argv[2];
		break;
	case 4:
		addr = simple_strtoul(argv[1], NULL, 16);
		boot_device = argv[2];
c7e056dc:	e5954008 	ldr	r4, [r5, #8]
		offset = simple_strtoul(argv[3], NULL, 16);
c7e056e0:	eb00761e 	bl	c7e22f60 <simple_strtoul>
c7e056e4:	e1a07000 	mov	r7, r0
c7e056e8:	ea000003 	b	c7e056fc <do_nandboot+0xd0>
		break;
	default:
#if defined(CONFIG_CMD_MTDPARTS)
usage:
#endif
		bootstage_error(BOOTSTAGE_ID_NAND_SUFFIX);
c7e056ec:	e3a00035 	mov	r0, #53	; 0x35
c7e056f0:	ebffffc4 	bl	c7e05608 <bootstage_error>
c7e056f4:	e3e00000 	mvn	r0, #0	; 0x0
c7e056f8:	ea000077 	b	c7e058dc <do_nandboot+0x2b0>
		return CMD_RET_USAGE;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_SUFFIX);
c7e056fc:	e3a00035 	mov	r0, #53	; 0x35
c7e05700:	ebffffc5 	bl	c7e0561c <bootstage_mark>

	if (!boot_device) {
c7e05704:	e3540000 	cmp	r4, #0	; 0x0
c7e05708:	1a000003 	bne	c7e0571c <do_nandboot+0xf0>
		puts("\n** No boot device **\n");
c7e0570c:	e59f01d4 	ldr	r0, [pc, #468]	; c7e058e8 <do_nandboot+0x2bc>
c7e05710:	eb000cb5 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_NAND_BOOT_DEVICE);
c7e05714:	e3a00036 	mov	r0, #54	; 0x36
c7e05718:	ea000029 	b	c7e057c4 <do_nandboot+0x198>
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_BOOT_DEVICE);
c7e0571c:	e3a00036 	mov	r0, #54	; 0x36
c7e05720:	ebffffbd 	bl	c7e0561c <bootstage_mark>

	idx = simple_strtoul(boot_device, NULL, 16);
c7e05724:	e1a00004 	mov	r0, r4
c7e05728:	e3a01000 	mov	r1, #0	; 0x0
c7e0572c:	e3a02010 	mov	r2, #16	; 0x10
c7e05730:	eb00760a 	bl	c7e22f60 <simple_strtoul>

	if (idx < 0 || idx >= CONFIG_SYS_MAX_NAND_DEVICE || !nand_info[idx].name) {
c7e05734:	e3500000 	cmp	r0, #0	; 0x0
c7e05738:	1a000003 	bne	c7e0574c <do_nandboot+0x120>
c7e0573c:	e59f31a8 	ldr	r3, [pc, #424]	; c7e058ec <do_nandboot+0x2c0>
c7e05740:	e5933020 	ldr	r3, [r3, #32]
c7e05744:	e3530000 	cmp	r3, #0	; 0x0
c7e05748:	1a000003 	bne	c7e0575c <do_nandboot+0x130>
		printf("\n** Device %d not available\n", idx);
c7e0574c:	e1a01000 	mov	r1, r0
c7e05750:	e59f0198 	ldr	r0, [pc, #408]	; c7e058f0 <do_nandboot+0x2c4>
c7e05754:	eb000cbf 	bl	c7e08a58 <printf>
c7e05758:	ea00002d 	b	c7e05814 <do_nandboot+0x1e8>
		bootstage_error(BOOTSTAGE_ID_NAND_AVAILABLE);
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_AVAILABLE);
c7e0575c:	e3a00037 	mov	r0, #55	; 0x37
c7e05760:	ebffffad 	bl	c7e0561c <bootstage_mark>

	return nand_load_image(cmdtp, &nand_info[idx], offset, addr, argv[0]);
c7e05764:	e595b000 	ldr	fp, [r5]
	image_header_t *hdr;
#if defined(CONFIG_FIT)
	const void *fit_hdr = NULL;
#endif

	s = strchr(cmd, '.');
c7e05768:	e3a0102e 	mov	r1, #46	; 0x2e
c7e0576c:	e1a0000b 	mov	r0, fp
c7e05770:	eb00745c 	bl	c7e228e8 <strchr>
	if (s != NULL &&
c7e05774:	e2504000 	subs	r4, r0, #0	; 0x0
c7e05778:	0a000014 	beq	c7e057d0 <do_nandboot+0x1a4>
c7e0577c:	e59f1170 	ldr	r1, [pc, #368]	; c7e058f4 <do_nandboot+0x2c8>
c7e05780:	eb007436 	bl	c7e22860 <strcmp>
c7e05784:	e3500000 	cmp	r0, #0	; 0x0
c7e05788:	0a000010 	beq	c7e057d0 <do_nandboot+0x1a4>
c7e0578c:	e1a00004 	mov	r0, r4
c7e05790:	e59f1160 	ldr	r1, [pc, #352]	; c7e058f8 <do_nandboot+0x2cc>
c7e05794:	eb007431 	bl	c7e22860 <strcmp>
c7e05798:	e3500000 	cmp	r0, #0	; 0x0
c7e0579c:	0a00000b 	beq	c7e057d0 <do_nandboot+0x1a4>
c7e057a0:	e1a00004 	mov	r0, r4
c7e057a4:	e59f1150 	ldr	r1, [pc, #336]	; c7e058fc <do_nandboot+0x2d0>
c7e057a8:	eb00742c 	bl	c7e22860 <strcmp>
c7e057ac:	e3500000 	cmp	r0, #0	; 0x0
c7e057b0:	0a000006 	beq	c7e057d0 <do_nandboot+0x1a4>
	    (strcmp(s, ".jffs2") && strcmp(s, ".e") && strcmp(s, ".i"))) {
		printf("Unknown nand load suffix '%s'\n", s);
c7e057b4:	e1a01004 	mov	r1, r4
c7e057b8:	e59f0140 	ldr	r0, [pc, #320]	; c7e05900 <do_nandboot+0x2d4>
c7e057bc:	eb000ca5 	bl	c7e08a58 <printf>
		bootstage_error(BOOTSTAGE_ID_NAND_SUFFIX);
c7e057c0:	e3a00035 	mov	r0, #53	; 0x35
c7e057c4:	ebffff8f 	bl	c7e05608 <bootstage_error>
c7e057c8:	e3a00001 	mov	r0, #1	; 0x1
c7e057cc:	ea000042 	b	c7e058dc <do_nandboot+0x2b0>
		bootstage_error(BOOTSTAGE_ID_NAND_AVAILABLE);
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_AVAILABLE);

	return nand_load_image(cmdtp, &nand_info[idx], offset, addr, argv[0]);
c7e057d0:	e59f5114 	ldr	r5, [pc, #276]	; c7e058ec <do_nandboot+0x2c0>
		printf("Unknown nand load suffix '%s'\n", s);
		bootstage_error(BOOTSTAGE_ID_NAND_SUFFIX);
		return 1;
	}

	printf("\nLoading from %s, offset 0x%lx\n", nand->name, offset);
c7e057d4:	e1a02007 	mov	r2, r7
c7e057d8:	e5951020 	ldr	r1, [r5, #32]
c7e057dc:	e59f0120 	ldr	r0, [pc, #288]	; c7e05904 <do_nandboot+0x2d8>
c7e057e0:	eb000c9c 	bl	c7e08a58 <printf>

	cnt = nand->writesize;
c7e057e4:	e5953014 	ldr	r3, [r5, #20]
c7e057e8:	e28d4018 	add	r4, sp, #24	; 0x18
c7e057ec:	e5243004 	str	r3, [r4, #-4]!
	r = nand_read_skip_bad(nand, offset, &cnt, (u_char *) addr);
c7e057f0:	e1a00005 	mov	r0, r5
c7e057f4:	e1a02007 	mov	r2, r7
c7e057f8:	e3a03000 	mov	r3, #0	; 0x0
c7e057fc:	e88d0050 	stm	sp, {r4, r6}
c7e05800:	eb003c6b 	bl	c7e149b4 <nand_read_skip_bad>
	if (r) {
c7e05804:	e2509000 	subs	r9, r0, #0	; 0x0
c7e05808:	0a000003 	beq	c7e0581c <do_nandboot+0x1f0>
		puts("** Read error\n");
c7e0580c:	e59f00f4 	ldr	r0, [pc, #244]	; c7e05908 <do_nandboot+0x2dc>
c7e05810:	eb000c75 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_NAND_HDR_READ);
c7e05814:	e3a00037 	mov	r0, #55	; 0x37
c7e05818:	eaffffe9 	b	c7e057c4 <do_nandboot+0x198>
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_HDR_READ);
c7e0581c:	e3a00037 	mov	r0, #55	; 0x37
c7e05820:	ebffff7d 	bl	c7e0561c <bootstage_mark>

	switch (genimg_get_format ((void *)addr)) {
c7e05824:	e1a00006 	mov	r0, r6
c7e05828:	eb001be3 	bl	c7e0c7bc <genimg_get_format>
c7e0582c:	e3500001 	cmp	r0, #1	; 0x1
c7e05830:	e1a0a000 	mov	sl, r0
c7e05834:	1a000016 	bne	c7e05894 <do_nandboot+0x268>
	case IMAGE_FORMAT_LEGACY:
		hdr = (image_header_t *)addr;

		bootstage_mark(BOOTSTAGE_ID_NAND_TYPE);
c7e05838:	e3a00039 	mov	r0, #57	; 0x39
c7e0583c:	ebffff76 	bl	c7e0561c <bootstage_mark>
		image_print_contents (hdr);
c7e05840:	e1a00006 	mov	r0, r6
c7e05844:	eb001c12 	bl	c7e0c894 <image_print_contents>
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
image_get_hdr_l(hcrc)		/* image_get_hcrc */
image_get_hdr_l(time)		/* image_get_time */
image_get_hdr_l(size)		/* image_get_size */
c7e05848:	e596300c 	ldr	r3, [r6, #12]
	default:
		bootstage_error(BOOTSTAGE_ID_NAND_TYPE);
		puts ("** Unknown image type\n");
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_TYPE);
c7e0584c:	e3a00039 	mov	r0, #57	; 0x39
		hdr = (image_header_t *)addr;

		bootstage_mark(BOOTSTAGE_ID_NAND_TYPE);
		image_print_contents (hdr);

		cnt = image_get_image_size (hdr);
c7e05850:	e1a02c03 	lsl	r2, r3, #24
c7e05854:	e2031cff 	and	r1, r3, #65280	; 0xff00
c7e05858:	e1822c23 	orr	r2, r2, r3, lsr #24
c7e0585c:	e1822401 	orr	r2, r2, r1, lsl #8
c7e05860:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
c7e05864:	e1822423 	orr	r2, r2, r3, lsr #8
c7e05868:	e2822040 	add	r2, r2, #64	; 0x40
c7e0586c:	e58d2014 	str	r2, [sp, #20]
	default:
		bootstage_error(BOOTSTAGE_ID_NAND_TYPE);
		puts ("** Unknown image type\n");
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_TYPE);
c7e05870:	ebffff69 	bl	c7e0561c <bootstage_mark>

	r = nand_read_skip_bad(nand, offset, &cnt, (u_char *) addr);
c7e05874:	e1a00005 	mov	r0, r5
c7e05878:	e1a02007 	mov	r2, r7
c7e0587c:	e1a03009 	mov	r3, r9
c7e05880:	e88d0050 	stm	sp, {r4, r6}
c7e05884:	eb003c4a 	bl	c7e149b4 <nand_read_skip_bad>
	if (r) {
c7e05888:	e3500000 	cmp	r0, #0	; 0x0
c7e0588c:	0a00000b 	beq	c7e058c0 <do_nandboot+0x294>
c7e05890:	ea000004 	b	c7e058a8 <do_nandboot+0x27c>

		cnt = fit_get_size (fit_hdr);
		break;
#endif
	default:
		bootstage_error(BOOTSTAGE_ID_NAND_TYPE);
c7e05894:	e3a00039 	mov	r0, #57	; 0x39
c7e05898:	ebffff5a 	bl	c7e05608 <bootstage_error>
		puts ("** Unknown image type\n");
c7e0589c:	e59f0068 	ldr	r0, [pc, #104]	; c7e0590c <do_nandboot+0x2e0>
c7e058a0:	eb000c51 	bl	c7e089ec <puts>
c7e058a4:	eaffffc7 	b	c7e057c8 <do_nandboot+0x19c>
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_TYPE);

	r = nand_read_skip_bad(nand, offset, &cnt, (u_char *) addr);
	if (r) {
		puts("** Read error\n");
c7e058a8:	e59f0058 	ldr	r0, [pc, #88]	; c7e05908 <do_nandboot+0x2dc>
c7e058ac:	eb000c4e 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_NAND_READ);
c7e058b0:	e3a0003a 	mov	r0, #58	; 0x3a
c7e058b4:	ebffff53 	bl	c7e05608 <bootstage_error>
c7e058b8:	e1a0000a 	mov	r0, sl
c7e058bc:	ea000006 	b	c7e058dc <do_nandboot+0x2b0>
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_READ);
c7e058c0:	e3a0003a 	mov	r0, #58	; 0x3a
c7e058c4:	ebffff54 	bl	c7e0561c <bootstage_mark>
	}
#endif

	/* Loading ok, update default load address */

	load_addr = addr;
c7e058c8:	e59f3040 	ldr	r3, [pc, #64]	; c7e05910 <do_nandboot+0x2e4>

	return bootm_maybe_autostart(cmdtp, cmd);
c7e058cc:	e59d000c 	ldr	r0, [sp, #12]
c7e058d0:	e1a0100b 	mov	r1, fp
	}
#endif

	/* Loading ok, update default load address */

	load_addr = addr;
c7e058d4:	e5836000 	str	r6, [r3]

	return bootm_maybe_autostart(cmdtp, cmd);
c7e058d8:	ebfff39b 	bl	c7e0274c <bootm_maybe_autostart>
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NAND_AVAILABLE);

	return nand_load_image(cmdtp, &nand_info[idx], offset, addr, argv[0]);
}
c7e058dc:	e28dd018 	add	sp, sp, #24	; 0x18
c7e058e0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e058e4:	c7e3062b 	.word	0xc7e3062b
c7e058e8:	c7e30636 	.word	0xc7e30636
c7e058ec:	c7e41e50 	.word	0xc7e41e50
c7e058f0:	c7e3064d 	.word	0xc7e3064d
c7e058f4:	c7e3066a 	.word	0xc7e3066a
c7e058f8:	c7e30671 	.word	0xc7e30671
c7e058fc:	c7e30674 	.word	0xc7e30674
c7e05900:	c7e30677 	.word	0xc7e30677
c7e05904:	c7e30696 	.word	0xc7e30696
c7e05908:	c7e306b6 	.word	0xc7e306b6
c7e0590c:	c7e306c5 	.word	0xc7e306c5
c7e05910:	c7e353cc 	.word	0xc7e353cc

c7e05914 <nand_print_and_set_info>:

#endif

static void nand_print_and_set_info(int idx)
{
	nand_info_t *nand = &nand_info[idx];
c7e05914:	e59f20cc 	ldr	r2, [pc, #204]	; c7e059e8 <nand_print_and_set_info+0xd4>
c7e05918:	e3a030a8 	mov	r3, #168	; 0xa8
}

#endif

static void nand_print_and_set_info(int idx)
{
c7e0591c:	e92d4830 	push	{r4, r5, fp, lr}
	nand_info_t *nand = &nand_info[idx];
c7e05920:	e0252093 	mla	r5, r3, r0, r2
	struct nand_chip *chip = nand->priv;
c7e05924:	e5954094 	ldr	r4, [r5, #148]
}

#endif

static void nand_print_and_set_info(int idx)
{
c7e05928:	e1a01000 	mov	r1, r0
c7e0592c:	e28db00c 	add	fp, sp, #12	; 0xc
	nand_info_t *nand = &nand_info[idx];
	struct nand_chip *chip = nand->priv;
	const int bufsz = 32;
	char buf[bufsz];

	printf("Device %d: ", idx);
c7e05930:	e59f00b4 	ldr	r0, [pc, #180]	; c7e059ec <nand_print_and_set_info+0xd8>
static void nand_print_and_set_info(int idx)
{
	nand_info_t *nand = &nand_info[idx];
	struct nand_chip *chip = nand->priv;
	const int bufsz = 32;
	char buf[bufsz];
c7e05934:	e24dd028 	sub	sp, sp, #40	; 0x28

	printf("Device %d: ", idx);
c7e05938:	eb000c46 	bl	c7e08a58 <printf>
	if (chip->numchips > 1)
c7e0593c:	e5941064 	ldr	r1, [r4, #100]
static void nand_print_and_set_info(int idx)
{
	nand_info_t *nand = &nand_info[idx];
	struct nand_chip *chip = nand->priv;
	const int bufsz = 32;
	char buf[bufsz];
c7e05940:	e1a0400d 	mov	r4, sp

	printf("Device %d: ", idx);
	if (chip->numchips > 1)
c7e05944:	e3510001 	cmp	r1, #1	; 0x1
c7e05948:	da000001 	ble	c7e05954 <nand_print_and_set_info+0x40>
		printf("%dx ", chip->numchips);
c7e0594c:	e59f009c 	ldr	r0, [pc, #156]	; c7e059f0 <nand_print_and_set_info+0xdc>
c7e05950:	eb000c40 	bl	c7e08a58 <printf>
	printf("%s, sector size %u KiB\n",
c7e05954:	e5952010 	ldr	r2, [r5, #16]
c7e05958:	e5951020 	ldr	r1, [r5, #32]
c7e0595c:	e1a02522 	lsr	r2, r2, #10
c7e05960:	e59f008c 	ldr	r0, [pc, #140]	; c7e059f4 <nand_print_and_set_info+0xe0>
c7e05964:	eb000c3b 	bl	c7e08a58 <printf>
	       nand->name, nand->erasesize >> 10);
	printf("  Page size  %8d b\n", nand->writesize);
c7e05968:	e5951014 	ldr	r1, [r5, #20]
c7e0596c:	e59f0084 	ldr	r0, [pc, #132]	; c7e059f8 <nand_print_and_set_info+0xe4>
c7e05970:	eb000c38 	bl	c7e08a58 <printf>
	printf("  OOB size   %8d b\n", nand->oobsize);
c7e05974:	e5951018 	ldr	r1, [r5, #24]
c7e05978:	e59f007c 	ldr	r0, [pc, #124]	; c7e059fc <nand_print_and_set_info+0xe8>
c7e0597c:	eb000c35 	bl	c7e08a58 <printf>
	printf("  Erase size %8d b\n", nand->erasesize);
c7e05980:	e5951010 	ldr	r1, [r5, #16]
c7e05984:	e59f0074 	ldr	r0, [pc, #116]	; c7e05a00 <nand_print_and_set_info+0xec>
c7e05988:	eb000c32 	bl	c7e08a58 <printf>

	/* Set geometry info */
	sprintf(buf, "%x", nand->writesize);
c7e0598c:	e5952014 	ldr	r2, [r5, #20]
c7e05990:	e1a00004 	mov	r0, r4
c7e05994:	e59f1068 	ldr	r1, [pc, #104]	; c7e05a04 <nand_print_and_set_info+0xf0>
c7e05998:	eb007924 	bl	c7e23e30 <sprintf>
	setenv("nand_writesize", buf);
c7e0599c:	e1a01004 	mov	r1, r4
c7e059a0:	e59f0060 	ldr	r0, [pc, #96]	; c7e05a08 <nand_print_and_set_info+0xf4>
c7e059a4:	eb000729 	bl	c7e07650 <setenv>

	sprintf(buf, "%x", nand->oobsize);
c7e059a8:	e5952018 	ldr	r2, [r5, #24]
c7e059ac:	e1a00004 	mov	r0, r4
c7e059b0:	e59f104c 	ldr	r1, [pc, #76]	; c7e05a04 <nand_print_and_set_info+0xf0>
c7e059b4:	eb00791d 	bl	c7e23e30 <sprintf>
	setenv("nand_oobsize", buf);
c7e059b8:	e1a01004 	mov	r1, r4
c7e059bc:	e59f0048 	ldr	r0, [pc, #72]	; c7e05a0c <nand_print_and_set_info+0xf8>
c7e059c0:	eb000722 	bl	c7e07650 <setenv>

	sprintf(buf, "%x", nand->erasesize);
c7e059c4:	e1a00004 	mov	r0, r4
c7e059c8:	e5952010 	ldr	r2, [r5, #16]
c7e059cc:	e59f1030 	ldr	r1, [pc, #48]	; c7e05a04 <nand_print_and_set_info+0xf0>
c7e059d0:	eb007916 	bl	c7e23e30 <sprintf>
	setenv("nand_erasesize", buf);
c7e059d4:	e1a01004 	mov	r1, r4
c7e059d8:	e59f0030 	ldr	r0, [pc, #48]	; c7e05a10 <nand_print_and_set_info+0xfc>
c7e059dc:	eb00071b 	bl	c7e07650 <setenv>
}
c7e059e0:	e24bd00c 	sub	sp, fp, #12	; 0xc
c7e059e4:	e8bd8830 	pop	{r4, r5, fp, pc}
c7e059e8:	c7e41e50 	.word	0xc7e41e50
c7e059ec:	c7e344f1 	.word	0xc7e344f1
c7e059f0:	c7e306dc 	.word	0xc7e306dc
c7e059f4:	c7e306e1 	.word	0xc7e306e1
c7e059f8:	c7e306f9 	.word	0xc7e306f9
c7e059fc:	c7e3070d 	.word	0xc7e3070d
c7e05a00:	c7e30721 	.word	0xc7e30721
c7e05a04:	c7e30735 	.word	0xc7e30735
c7e05a08:	c7e30738 	.word	0xc7e30738
c7e05a0c:	c7e30747 	.word	0xc7e30747
c7e05a10:	c7e30754 	.word	0xc7e30754

c7e05a14 <str2off>:

	return 0;
}

static inline int str2off(const char *p, loff_t *num)
{
c7e05a14:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
c7e05a18:	e1a05001 	mov	r5, r1
	char *endptr;

	*num = simple_strtoull(p, &endptr, 16);
c7e05a1c:	e3a02010 	mov	r2, #16	; 0x10
c7e05a20:	e28d1004 	add	r1, sp, #4	; 0x4

	return 0;
}

static inline int str2off(const char *p, loff_t *num)
{
c7e05a24:	e1a04000 	mov	r4, r0
	char *endptr;

	*num = simple_strtoull(p, &endptr, 16);
c7e05a28:	eb0075a1 	bl	c7e230b4 <simple_strtoull>
c7e05a2c:	e8850003 	stm	r5, {r0, r1}
	return *p != '\0' && *endptr == '\0';
c7e05a30:	e5d40000 	ldrb	r0, [r4]
c7e05a34:	e3500000 	cmp	r0, #0	; 0x0
c7e05a38:	0a000003 	beq	c7e05a4c <str2off+0x38>
c7e05a3c:	e59d3004 	ldr	r3, [sp, #4]
c7e05a40:	e5d33000 	ldrb	r3, [r3]
c7e05a44:	e2730001 	rsbs	r0, r3, #1	; 0x1
c7e05a48:	33a00000 	movcc	r0, #0	; 0x0
}
c7e05a4c:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}

c7e05a50 <arg_off>:
	return -1;
#endif
}

static int arg_off(const char *arg, int *idx, loff_t *off, loff_t *maxsize)
{
c7e05a50:	e92d4070 	push	{r4, r5, r6, lr}
c7e05a54:	e1a04001 	mov	r4, r1
	if (!str2off(arg, off))
c7e05a58:	e1a01002 	mov	r1, r2
	return -1;
#endif
}

static int arg_off(const char *arg, int *idx, loff_t *off, loff_t *maxsize)
{
c7e05a5c:	e1a05002 	mov	r5, r2
c7e05a60:	e1a06003 	mov	r6, r3
	if (!str2off(arg, off))
c7e05a64:	ebffffea 	bl	c7e05a14 <str2off>
c7e05a68:	e3500000 	cmp	r0, #0	; 0x0
	if (ret)
		return ret;

	return 0;
#else
	puts("offset is not a number\n");
c7e05a6c:	059f0058 	ldreq	r0, [pc, #88]	; c7e05acc <arg_off+0x7c>
#endif
}

static int arg_off(const char *arg, int *idx, loff_t *off, loff_t *maxsize)
{
	if (!str2off(arg, off))
c7e05a70:	0a00000d 	beq	c7e05aac <arg_off+0x5c>
		return get_part(arg, idx, off, maxsize);

	if (*off >= nand_info[*idx].size) {
c7e05a74:	e5942000 	ldr	r2, [r4]
c7e05a78:	e3a03015 	mov	r3, #21	; 0x15
c7e05a7c:	e0020293 	mul	r2, r3, r2
c7e05a80:	e8950003 	ldm	r5, {r0, r1}
c7e05a84:	e59f3044 	ldr	r3, [pc, #68]	; c7e05ad0 <arg_off+0x80>
c7e05a88:	e0833182 	add	r3, r3, r2, lsl #3
c7e05a8c:	e2833008 	add	r3, r3, #8	; 0x8
c7e05a90:	e893000c 	ldm	r3, {r2, r3}
c7e05a94:	e1530001 	cmp	r3, r1
c7e05a98:	8a000006 	bhi	c7e05ab8 <arg_off+0x68>
c7e05a9c:	1a000001 	bne	c7e05aa8 <arg_off+0x58>
c7e05aa0:	e1520000 	cmp	r2, r0
c7e05aa4:	8a000003 	bhi	c7e05ab8 <arg_off+0x68>
		puts("Offset exceeds device limit\n");
c7e05aa8:	e59f0024 	ldr	r0, [pc, #36]	; c7e05ad4 <arg_off+0x84>
c7e05aac:	eb000bce 	bl	c7e089ec <puts>
c7e05ab0:	e3e00000 	mvn	r0, #0	; 0x0
c7e05ab4:	e8bd8070 	pop	{r4, r5, r6, pc}
		return -1;
	}

	*maxsize = nand_info[*idx].size - *off;
c7e05ab8:	e0522000 	subs	r2, r2, r0
c7e05abc:	e0c33001 	sbc	r3, r3, r1
c7e05ac0:	e886000c 	stm	r6, {r2, r3}
c7e05ac4:	e3a00000 	mov	r0, #0	; 0x0
	return 0;
}
c7e05ac8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e05acc:	c7e30763 	.word	0xc7e30763
c7e05ad0:	c7e41e50 	.word	0xc7e41e50
c7e05ad4:	c7e3077b 	.word	0xc7e3077b

c7e05ad8 <arg_off_size>:

static int arg_off_size(int argc, char *const argv[], int *idx,
			loff_t *off, loff_t *size)
{
c7e05ad8:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	int ret;
	loff_t maxsize = 0;
c7e05adc:	e3a05000 	mov	r5, #0	; 0x0
c7e05ae0:	e3a06000 	mov	r6, #0	; 0x0

	if (argc == 0) {
c7e05ae4:	e250b000 	subs	fp, r0, #0	; 0x0
	return 0;
}

static int arg_off_size(int argc, char *const argv[], int *idx,
			loff_t *off, loff_t *size)
{
c7e05ae8:	e1a04001 	mov	r4, r1
c7e05aec:	e1a0a002 	mov	sl, r2
c7e05af0:	e1a09003 	mov	r9, r3
	int ret;
	loff_t maxsize = 0;
c7e05af4:	e58d5008 	str	r5, [sp, #8]
c7e05af8:	e58d600c 	str	r6, [sp, #12]
	return 0;
}

static int arg_off_size(int argc, char *const argv[], int *idx,
			loff_t *off, loff_t *size)
{
c7e05afc:	e59d7030 	ldr	r7, [sp, #48]
	int ret;
	loff_t maxsize = 0;

	if (argc == 0) {
c7e05b00:	1a000008 	bne	c7e05b28 <arg_off_size+0x50>
		*off = 0;
		*size = nand_info[*idx].size;
c7e05b04:	e5922000 	ldr	r2, [r2]
c7e05b08:	e3a03015 	mov	r3, #21	; 0x15
c7e05b0c:	e0020293 	mul	r2, r3, r2
{
	int ret;
	loff_t maxsize = 0;

	if (argc == 0) {
		*off = 0;
c7e05b10:	e8890060 	stm	r9, {r5, r6}
		*size = nand_info[*idx].size;
c7e05b14:	e59f3100 	ldr	r3, [pc, #256]	; c7e05c1c <arg_off_size+0x144>
c7e05b18:	e0833182 	add	r3, r3, r2, lsl #3
c7e05b1c:	e2834008 	add	r4, r3, #8	; 0x8
c7e05b20:	e8940018 	ldm	r4, {r3, r4}
c7e05b24:	ea00000a 	b	c7e05b54 <arg_off_size+0x7c>
		goto print;
	}

	ret = arg_off(argv[0], idx, off, &maxsize);
c7e05b28:	e5910000 	ldr	r0, [r1]
c7e05b2c:	e1a01002 	mov	r1, r2
c7e05b30:	e1a02003 	mov	r2, r3
c7e05b34:	e28d3008 	add	r3, sp, #8	; 0x8
c7e05b38:	ebffffc4 	bl	c7e05a50 <arg_off>
	if (ret)
c7e05b3c:	e3500000 	cmp	r0, #0	; 0x0
c7e05b40:	1a000033 	bne	c7e05c14 <arg_off_size+0x13c>
		return ret;

	if (argc == 1) {
c7e05b44:	e35b0001 	cmp	fp, #1	; 0x1
c7e05b48:	1a000003 	bne	c7e05b5c <arg_off_size+0x84>
		*size = maxsize;
c7e05b4c:	e28d4008 	add	r4, sp, #8	; 0x8
c7e05b50:	e8940018 	ldm	r4, {r3, r4}
c7e05b54:	e8870018 	stm	r7, {r3, r4}
c7e05b58:	ea000015 	b	c7e05bb4 <arg_off_size+0xdc>
		goto print;
	}

	if (!str2off(argv[1], size)) {
c7e05b5c:	e5940004 	ldr	r0, [r4, #4]
c7e05b60:	e1a01007 	mov	r1, r7
c7e05b64:	ebffffaa 	bl	c7e05a14 <str2off>
c7e05b68:	e3500000 	cmp	r0, #0	; 0x0
c7e05b6c:	1a000003 	bne	c7e05b80 <arg_off_size+0xa8>
		printf("'%s' is not a number\n", argv[1]);
c7e05b70:	e5941004 	ldr	r1, [r4, #4]
c7e05b74:	e59f00a4 	ldr	r0, [pc, #164]	; c7e05c20 <arg_off_size+0x148>
c7e05b78:	eb000bb6 	bl	c7e08a58 <printf>
c7e05b7c:	ea00000a 	b	c7e05bac <arg_off_size+0xd4>
		return -1;
	}

	if (*size > maxsize) {
c7e05b80:	e5972004 	ldr	r2, [r7, #4]
c7e05b84:	e59d300c 	ldr	r3, [sp, #12]
c7e05b88:	e1520003 	cmp	r2, r3
c7e05b8c:	ca000004 	bgt	c7e05ba4 <arg_off_size+0xcc>
c7e05b90:	1a000007 	bne	c7e05bb4 <arg_off_size+0xdc>
c7e05b94:	e5972000 	ldr	r2, [r7]
c7e05b98:	e59d3008 	ldr	r3, [sp, #8]
c7e05b9c:	e1520003 	cmp	r2, r3
c7e05ba0:	9a000003 	bls	c7e05bb4 <arg_off_size+0xdc>
		puts("Size exceeds partition or device limit\n");
c7e05ba4:	e59f0078 	ldr	r0, [pc, #120]	; c7e05c24 <arg_off_size+0x14c>
c7e05ba8:	eb000b8f 	bl	c7e089ec <puts>
c7e05bac:	e3e00000 	mvn	r0, #0	; 0x0
c7e05bb0:	ea000017 	b	c7e05c14 <arg_off_size+0x13c>
		return -1;
	}

print:
	printf("device %d ", *idx);
c7e05bb4:	e59a1000 	ldr	r1, [sl]
c7e05bb8:	e59f0068 	ldr	r0, [pc, #104]	; c7e05c28 <arg_off_size+0x150>
c7e05bbc:	eb000ba5 	bl	c7e08a58 <printf>
	if (*size == nand_info[*idx].size)
c7e05bc0:	e59a2000 	ldr	r2, [sl]
c7e05bc4:	e3a03015 	mov	r3, #21	; 0x15
c7e05bc8:	e0030392 	mul	r3, r2, r3
c7e05bcc:	e59f1048 	ldr	r1, [pc, #72]	; c7e05c1c <arg_off_size+0x144>
c7e05bd0:	e2833001 	add	r3, r3, #1	; 0x1
c7e05bd4:	e7912183 	ldr	r2, [r1, r3, lsl #3]
c7e05bd8:	e8975000 	ldm	r7, {ip, lr}
c7e05bdc:	e152000c 	cmp	r2, ip
c7e05be0:	e0813183 	add	r3, r1, r3, lsl #3
c7e05be4:	1a000005 	bne	c7e05c00 <arg_off_size+0x128>
c7e05be8:	e5933004 	ldr	r3, [r3, #4]
c7e05bec:	e153000e 	cmp	r3, lr
c7e05bf0:	1a000002 	bne	c7e05c00 <arg_off_size+0x128>
		puts("whole chip\n");
c7e05bf4:	e59f0030 	ldr	r0, [pc, #48]	; c7e05c2c <arg_off_size+0x154>
c7e05bf8:	eb000b7b 	bl	c7e089ec <puts>
c7e05bfc:	ea000003 	b	c7e05c10 <arg_off_size+0x138>
	else
		printf("offset 0x%llx, size 0x%llx\n",
c7e05c00:	e899000c 	ldm	r9, {r2, r3}
c7e05c04:	e59f0024 	ldr	r0, [pc, #36]	; c7e05c30 <arg_off_size+0x158>
c7e05c08:	e88d5000 	stm	sp, {ip, lr}
c7e05c0c:	eb000b91 	bl	c7e08a58 <printf>
c7e05c10:	e3a00000 	mov	r0, #0	; 0x0
		       (unsigned long long)*off, (unsigned long long)*size);
	return 0;
}
c7e05c14:	e28dd010 	add	sp, sp, #16	; 0x10
c7e05c18:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e05c1c:	c7e41e50 	.word	0xc7e41e50
c7e05c20:	c7e30798 	.word	0xc7e30798
c7e05c24:	c7e307ae 	.word	0xc7e307ae
c7e05c28:	c7e307d6 	.word	0xc7e307d6
c7e05c2c:	c7e307e1 	.word	0xc7e307e1
c7e05c30:	c7e307ed 	.word	0xc7e307ed

c7e05c34 <do_nand>:

	return ret;
}

int do_nand(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e05c34:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
#ifdef CONFIG_SYS_NAND_QUIET
	int quiet = CONFIG_SYS_NAND_QUIET;
#else
	int quiet = 0;
#endif
	const char *quiet_str = getenv("quiet");
c7e05c38:	e59f0b44 	ldr	r0, [pc, #2884]	; c7e06784 <do_nand+0xb50>

	return ret;
}

int do_nand(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e05c3c:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
c7e05c40:	e1a07002 	mov	r7, r2
c7e05c44:	e1a0b003 	mov	fp, r3
c7e05c48:	e1a04001 	mov	r4, r1
#ifdef CONFIG_SYS_NAND_QUIET
	int quiet = CONFIG_SYS_NAND_QUIET;
#else
	int quiet = 0;
#endif
	const char *quiet_str = getenv("quiet");
c7e05c4c:	eb000512 	bl	c7e0709c <getenv>
	int dev = nand_curr_device;
c7e05c50:	e59f3b30 	ldr	r3, [pc, #2864]	; c7e06788 <do_nand+0xb54>
	int repeat = flag & CMD_FLAG_REPEAT;

	/* at least two arguments please */
	if (argc < 2)
c7e05c54:	e3570001 	cmp	r7, #1	; 0x1
	int quiet = CONFIG_SYS_NAND_QUIET;
#else
	int quiet = 0;
#endif
	const char *quiet_str = getenv("quiet");
	int dev = nand_curr_device;
c7e05c58:	e5933000 	ldr	r3, [r3]
c7e05c5c:	e58d30ac 	str	r3, [sp, #172]
	int repeat = flag & CMD_FLAG_REPEAT;

	/* at least two arguments please */
	if (argc < 2)
c7e05c60:	da0002be 	ble	c7e06760 <do_nand+0xb2c>
		goto usage;

	if (quiet_str)
c7e05c64:	e3500000 	cmp	r0, #0	; 0x0
c7e05c68:	058d0040 	streq	r0, [sp, #64]
c7e05c6c:	0a000005 	beq	c7e05c88 <do_nand+0x54>
		quiet = simple_strtoul(quiet_str, NULL, 0) != 0;
c7e05c70:	e3a01000 	mov	r1, #0	; 0x0
c7e05c74:	e1a02001 	mov	r2, r1
c7e05c78:	eb0074b8 	bl	c7e22f60 <simple_strtoul>
c7e05c7c:	e2500000 	subs	r0, r0, #0	; 0x0
c7e05c80:	13a00001 	movne	r0, #1	; 0x1
c7e05c84:	e58d0040 	str	r0, [sp, #64]

	cmd = argv[1];

	/* Only "dump" is repeatable. */
	if (repeat && strcmp(cmd, "dump"))
c7e05c88:	e214a001 	ands	sl, r4, #1	; 0x1
		goto usage;

	if (quiet_str)
		quiet = simple_strtoul(quiet_str, NULL, 0) != 0;

	cmd = argv[1];
c7e05c8c:	e59b6004 	ldr	r6, [fp, #4]

	/* Only "dump" is repeatable. */
	if (repeat && strcmp(cmd, "dump"))
c7e05c90:	0a000004 	beq	c7e05ca8 <do_nand+0x74>
c7e05c94:	e1a00006 	mov	r0, r6
c7e05c98:	e59f1aec 	ldr	r1, [pc, #2796]	; c7e0678c <do_nand+0xb58>
c7e05c9c:	eb0072ef 	bl	c7e22860 <strcmp>
c7e05ca0:	e3500000 	cmp	r0, #0	; 0x0
c7e05ca4:	1a0002ab 	bne	c7e06758 <do_nand+0xb24>
		return 0;

	if (strcmp(cmd, "info") == 0) {
c7e05ca8:	e1a00006 	mov	r0, r6
c7e05cac:	e59f1adc 	ldr	r1, [pc, #2780]	; c7e06790 <do_nand+0xb5c>
c7e05cb0:	eb0072ea 	bl	c7e22860 <strcmp>
c7e05cb4:	e2504000 	subs	r4, r0, #0	; 0x0
c7e05cb8:	1a000006 	bne	c7e05cd8 <do_nand+0xa4>

		putc('\n');
c7e05cbc:	e280000a 	add	r0, r0, #10	; 0xa
c7e05cc0:	eb000bf4 	bl	c7e08c98 <putc>
		for (i = 0; i < CONFIG_SYS_MAX_NAND_DEVICE; i++) {
			if (nand_info[i].name)
c7e05cc4:	e59f3ac8 	ldr	r3, [pc, #2760]	; c7e06794 <do_nand+0xb60>
c7e05cc8:	e5933020 	ldr	r3, [r3, #32]
c7e05ccc:	e3530000 	cmp	r3, #0	; 0x0
c7e05cd0:	1a000010 	bne	c7e05d18 <do_nand+0xe4>
c7e05cd4:	ea00029f 	b	c7e06758 <do_nand+0xb24>
				nand_print_and_set_info(i);
		}
		return 0;
	}

	if (strcmp(cmd, "device") == 0) {
c7e05cd8:	e1a00006 	mov	r0, r6
c7e05cdc:	e59f1ab4 	ldr	r1, [pc, #2740]	; c7e06798 <do_nand+0xb64>
c7e05ce0:	eb0072de 	bl	c7e22860 <strcmp>
c7e05ce4:	e2505000 	subs	r5, r0, #0	; 0x0
c7e05ce8:	1a000027 	bne	c7e05d8c <do_nand+0x158>
		if (argc < 3) {
c7e05cec:	e3570002 	cmp	r7, #2	; 0x2
c7e05cf0:	1a00000b 	bne	c7e05d24 <do_nand+0xf0>
			putc('\n');
c7e05cf4:	e280000a 	add	r0, r0, #10	; 0xa
c7e05cf8:	eb000be6 	bl	c7e08c98 <putc>
			if (dev < 0 || dev >= CONFIG_SYS_MAX_NAND_DEVICE)
c7e05cfc:	e59d40ac 	ldr	r4, [sp, #172]
c7e05d00:	e3540000 	cmp	r4, #0	; 0x0
c7e05d04:	0a000003 	beq	c7e05d18 <do_nand+0xe4>
				puts("no devices available\n");
c7e05d08:	e59f0a8c 	ldr	r0, [pc, #2700]	; c7e0679c <do_nand+0xb68>
c7e05d0c:	eb000b36 	bl	c7e089ec <puts>
c7e05d10:	e1a04005 	mov	r4, r5
c7e05d14:	ea000292 	b	c7e06764 <do_nand+0xb30>
			else
				nand_print_and_set_info(dev);
c7e05d18:	e1a00004 	mov	r0, r4
c7e05d1c:	ebfffefc 	bl	c7e05914 <nand_print_and_set_info>
c7e05d20:	ea00028f 	b	c7e06764 <do_nand+0xb30>
			return 0;
		}

		dev = (int)simple_strtoul(argv[2], NULL, 10);
c7e05d24:	e59b0008 	ldr	r0, [fp, #8]
c7e05d28:	e1a01005 	mov	r1, r5
c7e05d2c:	e3a0200a 	mov	r2, #10	; 0xa
c7e05d30:	eb00748a 	bl	c7e22f60 <simple_strtoul>

/* ------------------------------------------------------------------------- */

static int set_dev(int dev)
{
	if (dev < 0 || dev >= CONFIG_SYS_MAX_NAND_DEVICE ||
c7e05d34:	e3500000 	cmp	r0, #0	; 0x0
			else
				nand_print_and_set_info(dev);
			return 0;
		}

		dev = (int)simple_strtoul(argv[2], NULL, 10);
c7e05d38:	e1a04000 	mov	r4, r0
c7e05d3c:	e58d00ac 	str	r0, [sp, #172]

/* ------------------------------------------------------------------------- */

static int set_dev(int dev)
{
	if (dev < 0 || dev >= CONFIG_SYS_MAX_NAND_DEVICE ||
c7e05d40:	1a000003 	bne	c7e05d54 <do_nand+0x120>
c7e05d44:	e59f3a48 	ldr	r3, [pc, #2632]	; c7e06794 <do_nand+0xb60>
c7e05d48:	e5932020 	ldr	r2, [r3, #32]
c7e05d4c:	e3520000 	cmp	r2, #0	; 0x0
c7e05d50:	1a000002 	bne	c7e05d60 <do_nand+0x12c>
	    !nand_info[dev].name) {
		puts("No such device\n");
c7e05d54:	e59f0a44 	ldr	r0, [pc, #2628]	; c7e067a0 <do_nand+0xb6c>
c7e05d58:	eb000b23 	bl	c7e089ec <puts>
c7e05d5c:	ea00027d 	b	c7e06758 <do_nand+0xb24>
		return -1;
	}

	if (nand_curr_device == dev)
c7e05d60:	e59f5a20 	ldr	r5, [pc, #2592]	; c7e06788 <do_nand+0xb54>
c7e05d64:	e5953000 	ldr	r3, [r5]
c7e05d68:	e3530000 	cmp	r3, #0	; 0x0
c7e05d6c:	0a000279 	beq	c7e06758 <do_nand+0xb24>
		return 0;

	printf("Device %d: %s", dev, nand_info[dev].name);
c7e05d70:	e1a01000 	mov	r1, r0
c7e05d74:	e59f0a28 	ldr	r0, [pc, #2600]	; c7e067a4 <do_nand+0xb70>
c7e05d78:	eb000b36 	bl	c7e08a58 <printf>
	puts("... is now current device\n");
c7e05d7c:	e59f0a24 	ldr	r0, [pc, #2596]	; c7e067a8 <do_nand+0xb74>
c7e05d80:	eb000b19 	bl	c7e089ec <puts>
	nand_curr_device = dev;
c7e05d84:	e5854000 	str	r4, [r5]
c7e05d88:	ea000275 	b	c7e06764 <do_nand+0xb30>
	 * overridden by a partition specifier.  Note that if somehow the
	 * current device is invalid, it will have to be changed to a valid
	 * one before these commands can run, even if a partition specifier
	 * for another device is to be used.
	 */
	if (dev < 0 || dev >= CONFIG_SYS_MAX_NAND_DEVICE ||
c7e05d8c:	e59d30ac 	ldr	r3, [sp, #172]
c7e05d90:	e3530000 	cmp	r3, #0	; 0x0
c7e05d94:	1a000003 	bne	c7e05da8 <do_nand+0x174>
c7e05d98:	e59f39f4 	ldr	r3, [pc, #2548]	; c7e06794 <do_nand+0xb60>
c7e05d9c:	e5933020 	ldr	r3, [r3, #32]
c7e05da0:	e3530000 	cmp	r3, #0	; 0x0
c7e05da4:	1a000002 	bne	c7e05db4 <do_nand+0x180>
	    !nand_info[dev].name) {
		puts("\nno devices available\n");
c7e05da8:	e59f09fc 	ldr	r0, [pc, #2556]	; c7e067ac <do_nand+0xb78>
c7e05dac:	eb000b0e 	bl	c7e089ec <puts>
c7e05db0:	ea000271 	b	c7e0677c <do_nand+0xb48>
		return 1;
	}
	nand = &nand_info[dev];

	if (strcmp(cmd, "bad") == 0) {
c7e05db4:	e1a00006 	mov	r0, r6
c7e05db8:	e59f19f0 	ldr	r1, [pc, #2544]	; c7e067b0 <do_nand+0xb7c>
c7e05dbc:	eb0072a7 	bl	c7e22860 <strcmp>
c7e05dc0:	e3500000 	cmp	r0, #0	; 0x0
c7e05dc4:	1a000023 	bne	c7e05e58 <do_nand+0x224>
		printf("\nDevice %d bad blocks:\n", dev);
c7e05dc8:	e59f09e4 	ldr	r0, [pc, #2532]	; c7e067b4 <do_nand+0xb80>
c7e05dcc:	e59d10ac 	ldr	r1, [sp, #172]
c7e05dd0:	eb000b20 	bl	c7e08a58 <printf>
		for (off = 0; off < nand->size; off += nand->erasesize)
c7e05dd4:	e3a04000 	mov	r4, #0	; 0x0
c7e05dd8:	e3a03000 	mov	r3, #0	; 0x0
c7e05ddc:	ea00000e 	b	c7e05e1c <do_nand+0x1e8>
	return info->write(info, ofs, *len, (size_t *)len, buf);
}

static inline int nand_block_isbad(nand_info_t *info, loff_t ofs)
{
	return info->block_isbad(info, ofs);
c7e05de0:	e1a02001 	mov	r2, r1
c7e05de4:	e1a0e00f 	mov	lr, pc
c7e05de8:	e594f078 	ldr	pc, [r4, #120]
			if (nand_block_isbad(nand, off))
c7e05dec:	e3500000 	cmp	r0, #0	; 0x0
c7e05df0:	0a000003 	beq	c7e05e04 <do_nand+0x1d0>
				printf("  %08llx\n", (unsigned long long)off);
c7e05df4:	e59f09bc 	ldr	r0, [pc, #2492]	; c7e067b8 <do_nand+0xb84>
c7e05df8:	e28d3098 	add	r3, sp, #152	; 0x98
c7e05dfc:	e893000c 	ldm	r3, {r2, r3}
c7e05e00:	eb000b14 	bl	c7e08a58 <printf>
	}
	nand = &nand_info[dev];

	if (strcmp(cmd, "bad") == 0) {
		printf("\nDevice %d bad blocks:\n", dev);
		for (off = 0; off < nand->size; off += nand->erasesize)
c7e05e04:	e59f3988 	ldr	r3, [pc, #2440]	; c7e06794 <do_nand+0xb60>
c7e05e08:	e5932010 	ldr	r2, [r3, #16]
c7e05e0c:	e28d4098 	add	r4, sp, #152	; 0x98
c7e05e10:	e8940018 	ldm	r4, {r3, r4}
c7e05e14:	e0933002 	adds	r3, r3, r2
c7e05e18:	e2a44000 	adc	r4, r4, #0	; 0x0
c7e05e1c:	e58d3098 	str	r3, [sp, #152]
c7e05e20:	e58d409c 	str	r4, [sp, #156]
c7e05e24:	e59f4968 	ldr	r4, [pc, #2408]	; c7e06794 <do_nand+0xb60>
c7e05e28:	e59d209c 	ldr	r2, [sp, #156]
c7e05e2c:	e594100c 	ldr	r1, [r4, #12]
c7e05e30:	e1a00004 	mov	r0, r4
c7e05e34:	e1510002 	cmp	r1, r2
c7e05e38:	e1a03002 	mov	r3, r2
c7e05e3c:	e59d1098 	ldr	r1, [sp, #152]
c7e05e40:	8affffe6 	bhi	c7e05de0 <do_nand+0x1ac>
c7e05e44:	1a000243 	bne	c7e06758 <do_nand+0xb24>
c7e05e48:	e5942008 	ldr	r2, [r4, #8]
c7e05e4c:	e1520001 	cmp	r2, r1
c7e05e50:	8affffe2 	bhi	c7e05de0 <do_nand+0x1ac>
c7e05e54:	ea00023f 	b	c7e06758 <do_nand+0xb24>
	/*
	 * Syntax is:
	 *   0    1     2       3    4
	 *   nand erase [clean] [off size]
	 */
	if (strncmp(cmd, "erase", 5) == 0 || strncmp(cmd, "scrub", 5) == 0) {
c7e05e58:	e1a00006 	mov	r0, r6
c7e05e5c:	e59f1958 	ldr	r1, [pc, #2392]	; c7e067bc <do_nand+0xb88>
c7e05e60:	e3a02005 	mov	r2, #5	; 0x5
c7e05e64:	eb00728b 	bl	c7e22898 <strncmp>
c7e05e68:	e3500000 	cmp	r0, #0	; 0x0
c7e05e6c:	0a000005 	beq	c7e05e88 <do_nand+0x254>
c7e05e70:	e1a00006 	mov	r0, r6
c7e05e74:	e59f1944 	ldr	r1, [pc, #2372]	; c7e067c0 <do_nand+0xb8c>
c7e05e78:	e3a02005 	mov	r2, #5	; 0x5
c7e05e7c:	eb007285 	bl	c7e22898 <strncmp>
c7e05e80:	e3500000 	cmp	r0, #0	; 0x0
c7e05e84:	1a000076 	bne	c7e06064 <do_nand+0x430>
		nand_erase_options_t opts;
		/* "clean" at index 2 means request to write cleanmarker */
		int clean = argc > 2 && !strcmp("clean", argv[2]);
c7e05e88:	e3570002 	cmp	r7, #2	; 0x2
c7e05e8c:	03a09000 	moveq	r9, #0	; 0x0
c7e05e90:	058d9044 	streq	r9, [sp, #68]
c7e05e94:	0a00000a 	beq	c7e05ec4 <do_nand+0x290>
c7e05e98:	e59b1008 	ldr	r1, [fp, #8]
c7e05e9c:	e59f0920 	ldr	r0, [pc, #2336]	; c7e067c4 <do_nand+0xb90>
c7e05ea0:	eb00726e 	bl	c7e22860 <strcmp>
c7e05ea4:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e05ea8:	33a00000 	movcc	r0, #0	; 0x0
c7e05eac:	e58d0044 	str	r0, [sp, #68]
		int scrub_yes = argc > 2 && !strcmp("-y", argv[2]);
c7e05eb0:	e59b1008 	ldr	r1, [fp, #8]
c7e05eb4:	e59f090c 	ldr	r0, [pc, #2316]	; c7e067c8 <do_nand+0xb94>
c7e05eb8:	eb007268 	bl	c7e22860 <strcmp>
c7e05ebc:	e2709001 	rsbs	r9, r0, #1	; 0x1
c7e05ec0:	33a09000 	movcc	r9, #0	; 0x0
		int o = (clean || scrub_yes) ? 3 : 2;
c7e05ec4:	e59d1044 	ldr	r1, [sp, #68]
		int scrub = !strncmp(cmd, "scrub", 5);
c7e05ec8:	e1a00006 	mov	r0, r6
	if (strncmp(cmd, "erase", 5) == 0 || strncmp(cmd, "scrub", 5) == 0) {
		nand_erase_options_t opts;
		/* "clean" at index 2 means request to write cleanmarker */
		int clean = argc > 2 && !strcmp("clean", argv[2]);
		int scrub_yes = argc > 2 && !strcmp("-y", argv[2]);
		int o = (clean || scrub_yes) ? 3 : 2;
c7e05ecc:	e1911009 	orrs	r1, r1, r9
		int scrub = !strncmp(cmd, "scrub", 5);
c7e05ed0:	e3a02005 	mov	r2, #5	; 0x5
c7e05ed4:	e59f18e4 	ldr	r1, [pc, #2276]	; c7e067c0 <do_nand+0xb8c>
	if (strncmp(cmd, "erase", 5) == 0 || strncmp(cmd, "scrub", 5) == 0) {
		nand_erase_options_t opts;
		/* "clean" at index 2 means request to write cleanmarker */
		int clean = argc > 2 && !strcmp("clean", argv[2]);
		int scrub_yes = argc > 2 && !strcmp("-y", argv[2]);
		int o = (clean || scrub_yes) ? 3 : 2;
c7e05ed8:	03a0a002 	moveq	sl, #2	; 0x2
c7e05edc:	13a0a003 	movne	sl, #3	; 0x3
		int scrub = !strncmp(cmd, "scrub", 5);
c7e05ee0:	eb00726c 	bl	c7e22898 <strncmp>
c7e05ee4:	e58d003c 	str	r0, [sp, #60]
			"Use this command only for testing purposes if you\n"
			"         "
			"are sure of what you are doing!\n"
			"\nReally scrub this NAND flash? <y/N>\n";

		if (cmd[5] != 0) {
c7e05ee8:	e5d63005 	ldrb	r3, [r6, #5]
c7e05eec:	e3530000 	cmp	r3, #0	; 0x0
c7e05ef0:	01a05003 	moveq	r5, r3
c7e05ef4:	02833002 	addeq	r3, r3, #2	; 0x2
c7e05ef8:	0a000015 	beq	c7e05f54 <do_nand+0x320>
			if (!strcmp(&cmd[5], ".spread")) {
c7e05efc:	e2864005 	add	r4, r6, #5	; 0x5
c7e05f00:	e1a00004 	mov	r0, r4
c7e05f04:	e59f18c0 	ldr	r1, [pc, #2240]	; c7e067cc <do_nand+0xb98>
c7e05f08:	eb007254 	bl	c7e22860 <strcmp>
c7e05f0c:	e3500000 	cmp	r0, #0	; 0x0
c7e05f10:	03a05001 	moveq	r5, #1	; 0x1
c7e05f14:	03a03002 	moveq	r3, #2	; 0x2
c7e05f18:	0a00000d 	beq	c7e05f54 <do_nand+0x320>
				spread = 1;
			} else if (!strcmp(&cmd[5], ".part")) {
c7e05f1c:	e1a00004 	mov	r0, r4
c7e05f20:	e59f18a8 	ldr	r1, [pc, #2216]	; c7e067d0 <do_nand+0xb9c>
c7e05f24:	eb00724d 	bl	c7e22860 <strcmp>
c7e05f28:	e3500000 	cmp	r0, #0	; 0x0
c7e05f2c:	01a05000 	moveq	r5, r0
c7e05f30:	03a03001 	moveq	r3, #1	; 0x1
c7e05f34:	0a000006 	beq	c7e05f54 <do_nand+0x320>
				args = 1;
			} else if (!strcmp(&cmd[5], ".chip")) {
c7e05f38:	e1a00004 	mov	r0, r4
c7e05f3c:	e59f1890 	ldr	r1, [pc, #2192]	; c7e067d4 <do_nand+0xba0>
c7e05f40:	eb007246 	bl	c7e22860 <strcmp>
c7e05f44:	e3500000 	cmp	r0, #0	; 0x0
c7e05f48:	1a000204 	bne	c7e06760 <do_nand+0xb2c>
				args = 0;
			} else {
				goto usage;
c7e05f4c:	e1a05000 	mov	r5, r0
c7e05f50:	e1a03000 	mov	r3, r0
		/*
		 * Don't allow missing arguments to cause full chip/partition
		 * erases -- easy to do accidentally, e.g. with a misspelled
		 * variable name.
		 */
		if (argc != o + args)
c7e05f54:	e083300a 	add	r3, r3, sl
c7e05f58:	e1570003 	cmp	r7, r3
c7e05f5c:	1a0001ff 	bne	c7e06760 <do_nand+0xb2c>
			goto usage;

		printf("\nNAND %s: ", cmd);
c7e05f60:	e1a01006 	mov	r1, r6
c7e05f64:	e59f086c 	ldr	r0, [pc, #2156]	; c7e067d8 <do_nand+0xba4>
c7e05f68:	eb000aba 	bl	c7e08a58 <printf>
		/* skip first two or three arguments, look for offset and size */
		if (arg_off_size(argc - o, argv + o, &dev, &off, &size) != 0)
c7e05f6c:	e28dc090 	add	ip, sp, #144	; 0x90
c7e05f70:	e08b110a 	add	r1, fp, sl, lsl #2
c7e05f74:	e06a0007 	rsb	r0, sl, r7
c7e05f78:	e28d20ac 	add	r2, sp, #172	; 0xac
c7e05f7c:	e28d3098 	add	r3, sp, #152	; 0x98
c7e05f80:	e58dc000 	str	ip, [sp]
c7e05f84:	ebfffed3 	bl	c7e05ad8 <arg_off_size>
c7e05f88:	e3500000 	cmp	r0, #0	; 0x0
c7e05f8c:	1a0001fa 	bne	c7e0677c <do_nand+0xb48>
			return 1;

		nand = &nand_info[dev];

		memset(&opts, 0, sizeof(opts));
c7e05f90:	e1a01000 	mov	r1, r0
c7e05f94:	e3a02020 	mov	r2, #32	; 0x20
c7e05f98:	e28d0070 	add	r0, sp, #112	; 0x70
		printf("\nNAND %s: ", cmd);
		/* skip first two or three arguments, look for offset and size */
		if (arg_off_size(argc - o, argv + o, &dev, &off, &size) != 0)
			return 1;

		nand = &nand_info[dev];
c7e05f9c:	e59d60ac 	ldr	r6, [sp, #172]

		memset(&opts, 0, sizeof(opts));
c7e05fa0:	eb0072fb 	bl	c7e22b94 <memset>
		opts.offset = off;
c7e05fa4:	e28d4098 	add	r4, sp, #152	; 0x98
c7e05fa8:	e8940018 	ldm	r4, {r3, r4}
		opts.length = size;
		opts.jffs2  = clean;
		opts.quiet  = quiet;
		opts.spread = spread;

		if (scrub) {
c7e05fac:	e59d203c 	ldr	r2, [sp, #60]
			return 1;

		nand = &nand_info[dev];

		memset(&opts, 0, sizeof(opts));
		opts.offset = off;
c7e05fb0:	e58d3078 	str	r3, [sp, #120]
c7e05fb4:	e58d407c 	str	r4, [sp, #124]
		opts.length = size;
c7e05fb8:	e28d4090 	add	r4, sp, #144	; 0x90
c7e05fbc:	e8940018 	ldm	r4, {r3, r4}
		opts.jffs2  = clean;
		opts.quiet  = quiet;
c7e05fc0:	e59d1040 	ldr	r1, [sp, #64]

		nand = &nand_info[dev];

		memset(&opts, 0, sizeof(opts));
		opts.offset = off;
		opts.length = size;
c7e05fc4:	e58d3070 	str	r3, [sp, #112]
c7e05fc8:	e58d4074 	str	r4, [sp, #116]
		opts.jffs2  = clean;
c7e05fcc:	e59d3044 	ldr	r3, [sp, #68]
		opts.quiet  = quiet;
		opts.spread = spread;

		if (scrub) {
c7e05fd0:	e3520000 	cmp	r2, #0	; 0x0
		nand = &nand_info[dev];

		memset(&opts, 0, sizeof(opts));
		opts.offset = off;
		opts.length = size;
		opts.jffs2  = clean;
c7e05fd4:	e58d3084 	str	r3, [sp, #132]
		opts.quiet  = quiet;
c7e05fd8:	e58d1080 	str	r1, [sp, #128]
		opts.spread = spread;
c7e05fdc:	e58d508c 	str	r5, [sp, #140]

		if (scrub) {
c7e05fe0:	1a000010 	bne	c7e06028 <do_nand+0x3f4>
			if (!scrub_yes)
c7e05fe4:	e3590000 	cmp	r9, #0	; 0x0
c7e05fe8:	1a000009 	bne	c7e06014 <do_nand+0x3e0>
				puts(scrub_warn);
c7e05fec:	e59f07e8 	ldr	r0, [pc, #2024]	; c7e067dc <do_nand+0xba8>
c7e05ff0:	eb000a7d 	bl	c7e089ec <puts>

			if (scrub_yes)
				opts.scrub = 1;
			else if (getc() == 'y') {
c7e05ff4:	eb000b3a 	bl	c7e08ce4 <getc>
c7e05ff8:	e3500079 	cmp	r0, #121	; 0x79
c7e05ffc:	1a000007 	bne	c7e06020 <do_nand+0x3ec>
				puts("y");
c7e06000:	e59f07d8 	ldr	r0, [pc, #2008]	; c7e067e0 <do_nand+0xbac>
c7e06004:	eb000a78 	bl	c7e089ec <puts>
				if (getc() == '\r')
c7e06008:	eb000b35 	bl	c7e08ce4 <getc>
c7e0600c:	e350000d 	cmp	r0, #13	; 0xd
c7e06010:	1a000002 	bne	c7e06020 <do_nand+0x3ec>
					opts.scrub = 1;
c7e06014:	e3a03001 	mov	r3, #1	; 0x1
c7e06018:	e58d3088 	str	r3, [sp, #136]
c7e0601c:	ea000001 	b	c7e06028 <do_nand+0x3f4>
				else {
					puts("scrub aborted\n");
					return -1;
				}
			} else {
				puts("scrub aborted\n");
c7e06020:	e59f07bc 	ldr	r0, [pc, #1980]	; c7e067e4 <do_nand+0xbb0>
c7e06024:	ea0000fa 	b	c7e06414 <do_nand+0x7e0>
				return -1;
			}
		}
		ret = nand_erase_opts(nand, &opts);
c7e06028:	e59f2764 	ldr	r2, [pc, #1892]	; c7e06794 <do_nand+0xb60>
c7e0602c:	e3a030a8 	mov	r3, #168	; 0xa8
c7e06030:	e0202693 	mla	r0, r3, r6, r2
c7e06034:	e28d1070 	add	r1, sp, #112	; 0x70
c7e06038:	eb003b48 	bl	c7e14d60 <nand_erase_opts>
		printf("%s\n", ret ? "ERROR" : "OK");
c7e0603c:	e59f37a4 	ldr	r3, [pc, #1956]	; c7e067e8 <do_nand+0xbb4>
c7e06040:	e3500000 	cmp	r0, #0	; 0x0
c7e06044:	e1a02000 	mov	r2, r0
c7e06048:	e59f179c 	ldr	r1, [pc, #1948]	; c7e067ec <do_nand+0xbb8>
c7e0604c:	e59f079c 	ldr	r0, [pc, #1948]	; c7e067f0 <do_nand+0xbbc>
c7e06050:	01a01003 	moveq	r1, r3

		return ret == 0 ? 0 : 1;
c7e06054:	e2524000 	subs	r4, r2, #0	; 0x0
c7e06058:	13a04001 	movne	r4, #1	; 0x1
				puts("scrub aborted\n");
				return -1;
			}
		}
		ret = nand_erase_opts(nand, &opts);
		printf("%s\n", ret ? "ERROR" : "OK");
c7e0605c:	eb000a7d 	bl	c7e08a58 <printf>
c7e06060:	ea0001bf 	b	c7e06764 <do_nand+0xb30>

		return ret == 0 ? 0 : 1;
	}

	if (strncmp(cmd, "dump", 4) == 0) {
c7e06064:	e1a00006 	mov	r0, r6
c7e06068:	e59f171c 	ldr	r1, [pc, #1820]	; c7e0678c <do_nand+0xb58>
c7e0606c:	e3a02004 	mov	r2, #4	; 0x4
c7e06070:	eb007208 	bl	c7e22898 <strncmp>
c7e06074:	e3500000 	cmp	r0, #0	; 0x0
c7e06078:	1a000097 	bne	c7e062dc <do_nand+0x6a8>
		if (argc < 3)
c7e0607c:	e3570002 	cmp	r7, #2	; 0x2
c7e06080:	0a0001b6 	beq	c7e06760 <do_nand+0xb2c>
			goto usage;

		off = (int)simple_strtoul(argv[2], NULL, 16);
c7e06084:	e3a02010 	mov	r2, #16	; 0x10
c7e06088:	e1a01000 	mov	r1, r0
c7e0608c:	e59b0008 	ldr	r0, [fp, #8]
c7e06090:	eb0073b2 	bl	c7e22f60 <simple_strtoul>
		ret = nand_dump(nand, off, !strcmp(&cmd[4], ".oob"), repeat);
c7e06094:	e59f1758 	ldr	r1, [pc, #1880]	; c7e067f4 <do_nand+0xbc0>

	if (strncmp(cmd, "dump", 4) == 0) {
		if (argc < 3)
			goto usage;

		off = (int)simple_strtoul(argv[2], NULL, 16);
c7e06098:	e1a04000 	mov	r4, r0
c7e0609c:	e1a05fc4 	asr	r5, r4, #31
		ret = nand_dump(nand, off, !strcmp(&cmd[4], ".oob"), repeat);
c7e060a0:	e2860004 	add	r0, r6, #4	; 0x4

	if (strncmp(cmd, "dump", 4) == 0) {
		if (argc < 3)
			goto usage;

		off = (int)simple_strtoul(argv[2], NULL, 16);
c7e060a4:	e58d4098 	str	r4, [sp, #152]
c7e060a8:	e58d509c 	str	r5, [sp, #156]
		ret = nand_dump(nand, off, !strcmp(&cmd[4], ".oob"), repeat);
c7e060ac:	eb0071eb 	bl	c7e22860 <strcmp>
{
	int i;
	u_char *datbuf, *oobbuf, *p;
	static loff_t last;

	if (repeat)
c7e060b0:	e35a0000 	cmp	sl, #0	; 0x0
		off = last + nand->writesize;
c7e060b4:	159f373c 	ldrne	r3, [pc, #1852]	; c7e067f8 <do_nand+0xbc4>

	last = off;

	datbuf = memalign(ARCH_DMA_MINALIGN, nand->writesize);
c7e060b8:	e59f66d4 	ldr	r6, [pc, #1748]	; c7e06794 <do_nand+0xb60>
	int i;
	u_char *datbuf, *oobbuf, *p;
	static loff_t last;

	if (repeat)
		off = last + nand->writesize;
c7e060bc:	15932000 	ldrne	r2, [r3]
c7e060c0:	159f36cc 	ldrne	r3, [pc, #1740]	; c7e06794 <do_nand+0xb60>
	if (strncmp(cmd, "dump", 4) == 0) {
		if (argc < 3)
			goto usage;

		off = (int)simple_strtoul(argv[2], NULL, 16);
		ret = nand_dump(nand, off, !strcmp(&cmd[4], ".oob"), repeat);
c7e060c4:	01a05004 	moveq	r5, r4
	int i;
	u_char *datbuf, *oobbuf, *p;
	static loff_t last;

	if (repeat)
		off = last + nand->writesize;
c7e060c8:	15933014 	ldrne	r3, [r3, #20]

	last = off;

	datbuf = memalign(ARCH_DMA_MINALIGN, nand->writesize);
c7e060cc:	e5961014 	ldr	r1, [r6, #20]
	int i;
	u_char *datbuf, *oobbuf, *p;
	static loff_t last;

	if (repeat)
		off = last + nand->writesize;
c7e060d0:	10825003 	addne	r5, r2, r3

	last = off;
c7e060d4:	e59f271c 	ldr	r2, [pc, #1820]	; c7e067f8 <do_nand+0xbc4>
c7e060d8:	e3a03000 	mov	r3, #0	; 0x0
c7e060dc:	e5823004 	str	r3, [r2, #4]
c7e060e0:	e5825000 	str	r5, [r2]
	if (strncmp(cmd, "dump", 4) == 0) {
		if (argc < 3)
			goto usage;

		off = (int)simple_strtoul(argv[2], NULL, 16);
		ret = nand_dump(nand, off, !strcmp(&cmd[4], ".oob"), repeat);
c7e060e4:	e1a0b000 	mov	fp, r0
	if (repeat)
		off = last + nand->writesize;

	last = off;

	datbuf = memalign(ARCH_DMA_MINALIGN, nand->writesize);
c7e060e8:	e3a00040 	mov	r0, #64	; 0x40
c7e060ec:	eb000db7 	bl	c7e097d0 <memalign>
	oobbuf = memalign(ARCH_DMA_MINALIGN, nand->oobsize);
c7e060f0:	e5961018 	ldr	r1, [r6, #24]
	if (repeat)
		off = last + nand->writesize;

	last = off;

	datbuf = memalign(ARCH_DMA_MINALIGN, nand->writesize);
c7e060f4:	e1a09000 	mov	r9, r0
	oobbuf = memalign(ARCH_DMA_MINALIGN, nand->oobsize);
c7e060f8:	e3a00040 	mov	r0, #64	; 0x40
c7e060fc:	eb000db3 	bl	c7e097d0 <memalign>
	if (!datbuf || !oobbuf) {
c7e06100:	e3500000 	cmp	r0, #0	; 0x0
c7e06104:	13590000 	cmpne	r9, #0	; 0x0
c7e06108:	e1a0a000 	mov	sl, r0
c7e0610c:	13a07000 	movne	r7, #0	; 0x0
c7e06110:	03a07001 	moveq	r7, #1	; 0x1
c7e06114:	1a000002 	bne	c7e06124 <do_nand+0x4f0>
		puts("No memory for page buffer\n");
c7e06118:	e59f06dc 	ldr	r0, [pc, #1756]	; c7e067fc <do_nand+0xbc8>
c7e0611c:	eb000a32 	bl	c7e089ec <puts>
c7e06120:	ea00001f 	b	c7e061a4 <do_nand+0x570>
		return 1;
	}
	off &= ~(nand->writesize - 1);
c7e06124:	e5963014 	ldr	r3, [r6, #20]
	loff_t addr = (loff_t) off;
	struct mtd_oob_ops ops;
	memset(&ops, 0, sizeof(ops));
c7e06128:	e28d4050 	add	r4, sp, #80	; 0x50
	oobbuf = memalign(ARCH_DMA_MINALIGN, nand->oobsize);
	if (!datbuf || !oobbuf) {
		puts("No memory for page buffer\n");
		return 1;
	}
	off &= ~(nand->writesize - 1);
c7e0612c:	e2633000 	rsb	r3, r3, #0	; 0x0
	loff_t addr = (loff_t) off;
	struct mtd_oob_ops ops;
	memset(&ops, 0, sizeof(ops));
c7e06130:	e1a01007 	mov	r1, r7
c7e06134:	e3a02020 	mov	r2, #32	; 0x20
c7e06138:	e1a00004 	mov	r0, r4
	oobbuf = memalign(ARCH_DMA_MINALIGN, nand->oobsize);
	if (!datbuf || !oobbuf) {
		puts("No memory for page buffer\n");
		return 1;
	}
	off &= ~(nand->writesize - 1);
c7e0613c:	e0055003 	and	r5, r5, r3
	loff_t addr = (loff_t) off;
	struct mtd_oob_ops ops;
	memset(&ops, 0, sizeof(ops));
c7e06140:	eb007293 	bl	c7e22b94 <memset>
	ops.datbuf = datbuf;
	ops.oobbuf = oobbuf;
	ops.len = nand->writesize;
c7e06144:	e5963014 	ldr	r3, [r6, #20]
	ops.ooblen = nand->oobsize;
c7e06148:	e5962018 	ldr	r2, [r6, #24]
	loff_t addr = (loff_t) off;
	struct mtd_oob_ops ops;
	memset(&ops, 0, sizeof(ops));
	ops.datbuf = datbuf;
	ops.oobbuf = oobbuf;
	ops.len = nand->writesize;
c7e0614c:	e58d3054 	str	r3, [sp, #84]
	ops.ooblen = nand->oobsize;
	ops.mode = MTD_OOB_RAW;
c7e06150:	e3a03002 	mov	r3, #2	; 0x2
	struct mtd_oob_ops ops;
	memset(&ops, 0, sizeof(ops));
	ops.datbuf = datbuf;
	ops.oobbuf = oobbuf;
	ops.len = nand->writesize;
	ops.ooblen = nand->oobsize;
c7e06154:	e58d205c 	str	r2, [sp, #92]
	ops.mode = MTD_OOB_RAW;
c7e06158:	e58d3050 	str	r3, [sp, #80]
	i = nand->read_oob(nand, addr, &ops);
c7e0615c:	e58d4000 	str	r4, [sp]
	}
	off &= ~(nand->writesize - 1);
	loff_t addr = (loff_t) off;
	struct mtd_oob_ops ops;
	memset(&ops, 0, sizeof(ops));
	ops.datbuf = datbuf;
c7e06160:	e58d9068 	str	r9, [sp, #104]
	ops.oobbuf = oobbuf;
c7e06164:	e58da06c 	str	sl, [sp, #108]
	ops.len = nand->writesize;
	ops.ooblen = nand->oobsize;
	ops.mode = MTD_OOB_RAW;
	i = nand->read_oob(nand, addr, &ops);
c7e06168:	e1a03007 	mov	r3, r7
c7e0616c:	e1a00006 	mov	r0, r6
c7e06170:	e1a02005 	mov	r2, r5
c7e06174:	e1a0e00f 	mov	lr, pc
c7e06178:	e596f04c 	ldr	pc, [r6, #76]
	if (i < 0) {
c7e0617c:	e3500000 	cmp	r0, #0	; 0x0
c7e06180:	aa000009 	bge	c7e061ac <do_nand+0x578>
		printf("Error (%d) reading page %08lx\n", i, off);
c7e06184:	e1a01000 	mov	r1, r0
c7e06188:	e1a02005 	mov	r2, r5
c7e0618c:	e59f066c 	ldr	r0, [pc, #1644]	; c7e06800 <do_nand+0xbcc>
c7e06190:	eb000a30 	bl	c7e08a58 <printf>
		free(datbuf);
c7e06194:	e1a00009 	mov	r0, r9
c7e06198:	eb000b70 	bl	c7e08f60 <free>
		free(oobbuf);
c7e0619c:	e1a0000a 	mov	r0, sl
c7e061a0:	eb000b6e 	bl	c7e08f60 <free>
c7e061a4:	e3a00001 	mov	r0, #1	; 0x1
c7e061a8:	ea000049 	b	c7e062d4 <do_nand+0x6a0>
		return 1;
	}
	printf("Page %08lx dump:\n", off);
c7e061ac:	e1a01005 	mov	r1, r5
c7e061b0:	e59f064c 	ldr	r0, [pc, #1612]	; c7e06804 <do_nand+0xbd0>
c7e061b4:	eb000a27 	bl	c7e08a58 <printf>
	i = nand->writesize >> 4;
c7e061b8:	e5963014 	ldr	r3, [r6, #20]
c7e061bc:	e1a04009 	mov	r4, r9
c7e061c0:	e1a05223 	lsr	r5, r3, #4
c7e061c4:	ea000021 	b	c7e06250 <do_nand+0x61c>
	p = datbuf;

	while (i--) {
		if (!only_oob)
c7e061c8:	e35b0000 	cmp	fp, #0	; 0x0
c7e061cc:	0a00001e 	beq	c7e0624c <do_nand+0x618>
			printf("\t%02x %02x %02x %02x %02x %02x %02x %02x"
c7e061d0:	e5d40003 	ldrb	r0, [r4, #3]
c7e061d4:	e5d41000 	ldrb	r1, [r4]
c7e061d8:	e5d42001 	ldrb	r2, [r4, #1]
c7e061dc:	e5d43002 	ldrb	r3, [r4, #2]
c7e061e0:	e58d0000 	str	r0, [sp]
c7e061e4:	e5d40004 	ldrb	r0, [r4, #4]
c7e061e8:	e58d0004 	str	r0, [sp, #4]
c7e061ec:	e5d40005 	ldrb	r0, [r4, #5]
c7e061f0:	e58d0008 	str	r0, [sp, #8]
c7e061f4:	e5d40006 	ldrb	r0, [r4, #6]
c7e061f8:	e58d000c 	str	r0, [sp, #12]
c7e061fc:	e5d4c007 	ldrb	ip, [r4, #7]
c7e06200:	e59f0600 	ldr	r0, [pc, #1536]	; c7e06808 <do_nand+0xbd4>
c7e06204:	e58dc010 	str	ip, [sp, #16]
c7e06208:	e5d4c008 	ldrb	ip, [r4, #8]
c7e0620c:	e58dc014 	str	ip, [sp, #20]
c7e06210:	e5d4c009 	ldrb	ip, [r4, #9]
c7e06214:	e58dc018 	str	ip, [sp, #24]
c7e06218:	e5d4c00a 	ldrb	ip, [r4, #10]
c7e0621c:	e58dc01c 	str	ip, [sp, #28]
c7e06220:	e5d4c00b 	ldrb	ip, [r4, #11]
c7e06224:	e58dc020 	str	ip, [sp, #32]
c7e06228:	e5d4c00c 	ldrb	ip, [r4, #12]
c7e0622c:	e58dc024 	str	ip, [sp, #36]
c7e06230:	e5d4c00d 	ldrb	ip, [r4, #13]
c7e06234:	e58dc028 	str	ip, [sp, #40]
c7e06238:	e5d4c00e 	ldrb	ip, [r4, #14]
c7e0623c:	e58dc02c 	str	ip, [sp, #44]
c7e06240:	e5d4c00f 	ldrb	ip, [r4, #15]
c7e06244:	e58dc030 	str	ip, [sp, #48]
c7e06248:	eb000a02 	bl	c7e08a58 <printf>
			       "  %02x %02x %02x %02x %02x %02x %02x %02x\n",
			       p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7],
			       p[8], p[9], p[10], p[11], p[12], p[13], p[14],
			       p[15]);
		p += 16;
c7e0624c:	e2844010 	add	r4, r4, #16	; 0x10
	}
	printf("Page %08lx dump:\n", off);
	i = nand->writesize >> 4;
	p = datbuf;

	while (i--) {
c7e06250:	e2555001 	subs	r5, r5, #1	; 0x1
c7e06254:	2affffdb 	bcs	c7e061c8 <do_nand+0x594>
			       p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7],
			       p[8], p[9], p[10], p[11], p[12], p[13], p[14],
			       p[15]);
		p += 16;
	}
	puts("OOB:\n");
c7e06258:	e59f05ac 	ldr	r0, [pc, #1452]	; c7e0680c <do_nand+0xbd8>
c7e0625c:	eb0009e2 	bl	c7e089ec <puts>
	i = nand->oobsize >> 3;
c7e06260:	e59f352c 	ldr	r3, [pc, #1324]	; c7e06794 <do_nand+0xb60>
c7e06264:	e1a0400a 	mov	r4, sl
c7e06268:	e5933018 	ldr	r3, [r3, #24]
c7e0626c:	e1a051a3 	lsr	r5, r3, #3
c7e06270:	ea00000d 	b	c7e062ac <do_nand+0x678>
	p = oobbuf;
	while (i--) {
		printf("\t%02x %02x %02x %02x %02x %02x %02x %02x\n",
c7e06274:	e554c005 	ldrb	ip, [r4, #-5]
c7e06278:	e5541008 	ldrb	r1, [r4, #-8]
c7e0627c:	e5542007 	ldrb	r2, [r4, #-7]
c7e06280:	e5543006 	ldrb	r3, [r4, #-6]
c7e06284:	e58dc000 	str	ip, [sp]
c7e06288:	e554c004 	ldrb	ip, [r4, #-4]
c7e0628c:	e58dc004 	str	ip, [sp, #4]
c7e06290:	e554c003 	ldrb	ip, [r4, #-3]
c7e06294:	e58dc008 	str	ip, [sp, #8]
c7e06298:	e554c002 	ldrb	ip, [r4, #-2]
c7e0629c:	e58dc00c 	str	ip, [sp, #12]
c7e062a0:	e554c001 	ldrb	ip, [r4, #-1]
c7e062a4:	e58dc010 	str	ip, [sp, #16]
c7e062a8:	eb0009ea 	bl	c7e08a58 <printf>
		p += 16;
	}
	puts("OOB:\n");
	i = nand->oobsize >> 3;
	p = oobbuf;
	while (i--) {
c7e062ac:	e2455001 	sub	r5, r5, #1	; 0x1
c7e062b0:	e3750001 	cmn	r5, #1	; 0x1
		printf("\t%02x %02x %02x %02x %02x %02x %02x %02x\n",
c7e062b4:	e59f0554 	ldr	r0, [pc, #1364]	; c7e06810 <do_nand+0xbdc>
		p += 16;
	}
	puts("OOB:\n");
	i = nand->oobsize >> 3;
	p = oobbuf;
	while (i--) {
c7e062b8:	e2844008 	add	r4, r4, #8	; 0x8
c7e062bc:	1affffec 	bne	c7e06274 <do_nand+0x640>
		printf("\t%02x %02x %02x %02x %02x %02x %02x %02x\n",
		       p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
		p += 8;
	}
	free(datbuf);
c7e062c0:	e1a00009 	mov	r0, r9
c7e062c4:	eb000b25 	bl	c7e08f60 <free>
	free(oobbuf);
c7e062c8:	e1a0000a 	mov	r0, sl
c7e062cc:	eb000b23 	bl	c7e08f60 <free>
c7e062d0:	e3a00000 	mov	r0, #0	; 0x0
			goto usage;

		off = (int)simple_strtoul(argv[2], NULL, 16);
		ret = nand_dump(nand, off, !strcmp(&cmd[4], ".oob"), repeat);

		return ret == 0 ? 1 : 0;
c7e062d4:	e2204001 	eor	r4, r0, #1	; 0x1
c7e062d8:	ea000121 	b	c7e06764 <do_nand+0xb30>
	}

	if (strncmp(cmd, "read", 4) == 0 || strncmp(cmd, "write", 5) == 0) {
c7e062dc:	e1a00006 	mov	r0, r6
c7e062e0:	e59f152c 	ldr	r1, [pc, #1324]	; c7e06814 <do_nand+0xbe0>
c7e062e4:	e3a02004 	mov	r2, #4	; 0x4
c7e062e8:	eb00716a 	bl	c7e22898 <strncmp>
c7e062ec:	e3500000 	cmp	r0, #0	; 0x0
c7e062f0:	0a000005 	beq	c7e0630c <do_nand+0x6d8>
c7e062f4:	e1a00006 	mov	r0, r6
c7e062f8:	e59f1518 	ldr	r1, [pc, #1304]	; c7e06818 <do_nand+0xbe4>
c7e062fc:	e3a02005 	mov	r2, #5	; 0x5
c7e06300:	eb007164 	bl	c7e22898 <strncmp>
c7e06304:	e3500000 	cmp	r0, #0	; 0x0
c7e06308:	1a0000e9 	bne	c7e066b4 <do_nand+0xa80>
		size_t rwsize;
		ulong pagecount = 1;
		int read;
		int raw;

		if (argc < 4)
c7e0630c:	e3570003 	cmp	r7, #3	; 0x3
c7e06310:	da000112 	ble	c7e06760 <do_nand+0xb2c>
			goto usage;

		addr = (ulong)simple_strtoul(argv[2], NULL, 16);
c7e06314:	e3a01000 	mov	r1, #0	; 0x0
c7e06318:	e3a02010 	mov	r2, #16	; 0x10
c7e0631c:	e59b0008 	ldr	r0, [fp, #8]
c7e06320:	eb00730e 	bl	c7e22f60 <simple_strtoul>

		read = strncmp(cmd, "read", 4) == 0; /* 1 = read, 0 = write */
c7e06324:	e3a02004 	mov	r2, #4	; 0x4
		int raw;

		if (argc < 4)
			goto usage;

		addr = (ulong)simple_strtoul(argv[2], NULL, 16);
c7e06328:	e58d004c 	str	r0, [sp, #76]

		read = strncmp(cmd, "read", 4) == 0; /* 1 = read, 0 = write */
c7e0632c:	e59f14e0 	ldr	r1, [pc, #1248]	; c7e06814 <do_nand+0xbe0>
c7e06330:	e1a00006 	mov	r0, r6
c7e06334:	eb007157 	bl	c7e22898 <strncmp>
		printf("\nNAND %s: ", read ? "read" : "write");
c7e06338:	e59f34d8 	ldr	r3, [pc, #1240]	; c7e06818 <do_nand+0xbe4>
		if (argc < 4)
			goto usage;

		addr = (ulong)simple_strtoul(argv[2], NULL, 16);

		read = strncmp(cmd, "read", 4) == 0; /* 1 = read, 0 = write */
c7e0633c:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e06340:	33a00000 	movcc	r0, #0	; 0x0
		printf("\nNAND %s: ", read ? "read" : "write");
c7e06344:	e3500000 	cmp	r0, #0	; 0x0
c7e06348:	e59f14c4 	ldr	r1, [pc, #1220]	; c7e06814 <do_nand+0xbe0>
		if (argc < 4)
			goto usage;

		addr = (ulong)simple_strtoul(argv[2], NULL, 16);

		read = strncmp(cmd, "read", 4) == 0; /* 1 = read, 0 = write */
c7e0634c:	e58d0048 	str	r0, [sp, #72]
		printf("\nNAND %s: ", read ? "read" : "write");
c7e06350:	01a01003 	moveq	r1, r3
c7e06354:	e59f047c 	ldr	r0, [pc, #1148]	; c7e067d8 <do_nand+0xba4>
c7e06358:	eb0009be 	bl	c7e08a58 <printf>

		nand = &nand_info[dev];
c7e0635c:	e59fc430 	ldr	ip, [pc, #1072]	; c7e06794 <do_nand+0xb60>
c7e06360:	e59d30ac 	ldr	r3, [sp, #172]
c7e06364:	e3a020a8 	mov	r2, #168	; 0xa8

		s = strchr(cmd, '.');
c7e06368:	e1a00006 	mov	r0, r6
c7e0636c:	e3a0102e 	mov	r1, #46	; 0x2e
		addr = (ulong)simple_strtoul(argv[2], NULL, 16);

		read = strncmp(cmd, "read", 4) == 0; /* 1 = read, 0 = write */
		printf("\nNAND %s: ", read ? "read" : "write");

		nand = &nand_info[dev];
c7e06370:	e02ac392 	mla	sl, r2, r3, ip

		s = strchr(cmd, '.');
c7e06374:	eb00715b 	bl	c7e228e8 <strchr>

		if (s && !strcmp(s, ".raw")) {
c7e06378:	e2505000 	subs	r5, r0, #0	; 0x0
c7e0637c:	0a00002b 	beq	c7e06430 <do_nand+0x7fc>
c7e06380:	e59f1494 	ldr	r1, [pc, #1172]	; c7e0681c <do_nand+0xbe8>
c7e06384:	eb007135 	bl	c7e22860 <strcmp>
c7e06388:	e3500000 	cmp	r0, #0	; 0x0
c7e0638c:	1a000027 	bne	c7e06430 <do_nand+0x7fc>
			raw = 1;

			if (arg_off(argv[3], &dev, &off, &size))
c7e06390:	e59b000c 	ldr	r0, [fp, #12]
c7e06394:	e28d10ac 	add	r1, sp, #172	; 0xac
c7e06398:	e28d2098 	add	r2, sp, #152	; 0x98
c7e0639c:	e28d3090 	add	r3, sp, #144	; 0x90
c7e063a0:	ebfffdaa 	bl	c7e05a50 <arg_off>
c7e063a4:	e3500000 	cmp	r0, #0	; 0x0
c7e063a8:	1a0000f3 	bne	c7e0677c <do_nand+0xb48>
				return 1;

			if (argc > 4 && !str2long(argv[4], &pagecount)) {
c7e063ac:	e3570004 	cmp	r7, #4	; 0x4
c7e063b0:	03a09001 	moveq	r9, #1	; 0x1
c7e063b4:	0a00000c 	beq	c7e063ec <do_nand+0x7b8>
c7e063b8:	e59b4010 	ldr	r4, [fp, #16]

static inline int str2long(const char *p, ulong *num)
{
	char *endptr;

	*num = simple_strtoul(p, &endptr, 16);
c7e063bc:	e28d10a4 	add	r1, sp, #164	; 0xa4
c7e063c0:	e1a00004 	mov	r0, r4
c7e063c4:	e3a02010 	mov	r2, #16	; 0x10
c7e063c8:	eb0072e4 	bl	c7e22f60 <simple_strtoul>
	return *p != '\0' && *endptr == '\0';
c7e063cc:	e5d43000 	ldrb	r3, [r4]

static inline int str2long(const char *p, ulong *num)
{
	char *endptr;

	*num = simple_strtoul(p, &endptr, 16);
c7e063d0:	e1a09000 	mov	r9, r0
	return *p != '\0' && *endptr == '\0';
c7e063d4:	e3530000 	cmp	r3, #0	; 0x0
c7e063d8:	0a0000e4 	beq	c7e06770 <do_nand+0xb3c>
c7e063dc:	e59d30a4 	ldr	r3, [sp, #164]
c7e063e0:	e5d33000 	ldrb	r3, [r3]
c7e063e4:	e3530000 	cmp	r3, #0	; 0x0
c7e063e8:	1a0000e0 	bne	c7e06770 <do_nand+0xb3c>
			if (argc > 4 && !str2long(argv[4], &pagecount)) {
				printf("'%s' is not a number\n", argv[4]);
				return 1;
			}

			if (pagecount * nand->writesize > size) {
c7e063ec:	e59d3094 	ldr	r3, [sp, #148]
c7e063f0:	e59a1014 	ldr	r1, [sl, #20]
c7e063f4:	e3530000 	cmp	r3, #0	; 0x0
c7e063f8:	e0020991 	mul	r2, r1, r9
c7e063fc:	ba000003 	blt	c7e06410 <do_nand+0x7dc>
c7e06400:	1a000005 	bne	c7e0641c <do_nand+0x7e8>
c7e06404:	e59d3090 	ldr	r3, [sp, #144]
c7e06408:	e1530002 	cmp	r3, r2
c7e0640c:	2a000002 	bcs	c7e0641c <do_nand+0x7e8>
				puts("Size exceeds partition or device limit\n");
c7e06410:	e59f0408 	ldr	r0, [pc, #1032]	; c7e06820 <do_nand+0xbec>
c7e06414:	eb000974 	bl	c7e089ec <puts>
c7e06418:	ea0000d0 	b	c7e06760 <do_nand+0xb2c>
				return -1;
			}

			rwsize = pagecount * (nand->writesize + nand->oobsize);
c7e0641c:	e59a3018 	ldr	r3, [sl, #24]
c7e06420:	e0813003 	add	r3, r1, r3
c7e06424:	e0030399 	mul	r3, r9, r3
c7e06428:	e58d30a8 	str	r3, [sp, #168]
c7e0642c:	ea00000d 	b	c7e06468 <do_nand+0x834>
		} else {
			if (arg_off_size(argc - 3, argv + 3, &dev,
c7e06430:	e28dc090 	add	ip, sp, #144	; 0x90
c7e06434:	e2470003 	sub	r0, r7, #3	; 0x3
c7e06438:	e28b100c 	add	r1, fp, #12	; 0xc
c7e0643c:	e28d20ac 	add	r2, sp, #172	; 0xac
c7e06440:	e28d3098 	add	r3, sp, #152	; 0x98
c7e06444:	e58dc000 	str	ip, [sp]
c7e06448:	ebfffda2 	bl	c7e05ad8 <arg_off_size>
c7e0644c:	e3500000 	cmp	r0, #0	; 0x0
c7e06450:	1a0000c9 	bne	c7e0677c <do_nand+0xb48>
						&off, &size) != 0)
				return 1;

			rwsize = size;
c7e06454:	e59d3090 	ldr	r3, [sp, #144]
		}

		if (!s || !strcmp(s, ".jffs2") ||
c7e06458:	e3550000 	cmp	r5, #0	; 0x0
		} else {
			if (arg_off_size(argc - 3, argv + 3, &dev,
						&off, &size) != 0)
				return 1;

			rwsize = size;
c7e0645c:	e58d30a8 	str	r3, [sp, #168]
		}

		if (!s || !strcmp(s, ".jffs2") ||
c7e06460:	0a00000f 	beq	c7e064a4 <do_nand+0x870>
c7e06464:	e3a09001 	mov	r9, #1	; 0x1
c7e06468:	e1a00005 	mov	r0, r5
c7e0646c:	e59f13b0 	ldr	r1, [pc, #944]	; c7e06824 <do_nand+0xbf0>
c7e06470:	eb0070fa 	bl	c7e22860 <strcmp>
c7e06474:	e3500000 	cmp	r0, #0	; 0x0
c7e06478:	0a000009 	beq	c7e064a4 <do_nand+0x870>
c7e0647c:	e1a00005 	mov	r0, r5
c7e06480:	e59f13a0 	ldr	r1, [pc, #928]	; c7e06828 <do_nand+0xbf4>
c7e06484:	eb0070f5 	bl	c7e22860 <strcmp>
c7e06488:	e3500000 	cmp	r0, #0	; 0x0
c7e0648c:	0a000004 	beq	c7e064a4 <do_nand+0x870>
c7e06490:	e1a00005 	mov	r0, r5
c7e06494:	e59f1390 	ldr	r1, [pc, #912]	; c7e0682c <do_nand+0xbf8>
c7e06498:	eb0070f0 	bl	c7e22860 <strcmp>
c7e0649c:	e3500000 	cmp	r0, #0	; 0x0
c7e064a0:	1a000017 	bne	c7e06504 <do_nand+0x8d0>
		    !strcmp(s, ".e") || !strcmp(s, ".i")) {
			if (read)
c7e064a4:	e59d2048 	ldr	r2, [sp, #72]
c7e064a8:	e28dc0a8 	add	ip, sp, #168	; 0xa8
c7e064ac:	e3520000 	cmp	r2, #0	; 0x0
c7e064b0:	e28d2098 	add	r2, sp, #152	; 0x98
c7e064b4:	e8920006 	ldm	r2, {r1, r2}
c7e064b8:	0a000007 	beq	c7e064dc <do_nand+0x8a8>
				ret = nand_read_skip_bad(nand, off, &rwsize,
c7e064bc:	e1a03002 	mov	r3, r2
c7e064c0:	e1a02001 	mov	r2, r1
c7e064c4:	e59d104c 	ldr	r1, [sp, #76]
c7e064c8:	e1a0000a 	mov	r0, sl
c7e064cc:	e58dc000 	str	ip, [sp]
c7e064d0:	e58d1004 	str	r1, [sp, #4]
c7e064d4:	eb003936 	bl	c7e149b4 <nand_read_skip_bad>
c7e064d8:	ea000024 	b	c7e06570 <do_nand+0x93c>
							 (u_char *)addr);
			else
				ret = nand_write_skip_bad(nand, off, &rwsize,
c7e064dc:	e1a03002 	mov	r3, r2
c7e064e0:	e1a02001 	mov	r2, r1
c7e064e4:	e59d104c 	ldr	r1, [sp, #76]
c7e064e8:	e1a0000a 	mov	r0, sl
c7e064ec:	e58d1004 	str	r1, [sp, #4]
c7e064f0:	e59d1048 	ldr	r1, [sp, #72]
c7e064f4:	e58dc000 	str	ip, [sp]
c7e064f8:	e58d1008 	str	r1, [sp, #8]
c7e064fc:	eb0039a3 	bl	c7e14b90 <nand_write_skip_bad>
c7e06500:	ea00001a 	b	c7e06570 <do_nand+0x93c>
			}
			ret = nand_write_skip_bad(nand, off, &rwsize,
						(u_char *)addr,
						WITH_INLINE_OOB);
#endif
		} else if (!strcmp(s, ".oob")) {
c7e06504:	e1a00005 	mov	r0, r5
c7e06508:	e59f12e4 	ldr	r1, [pc, #740]	; c7e067f4 <do_nand+0xbc0>
c7e0650c:	eb0070d3 	bl	c7e22860 <strcmp>
c7e06510:	e3500000 	cmp	r0, #0	; 0x0
c7e06514:	1a00001e 	bne	c7e06594 <do_nand+0x960>
			/* out-of-band data */
			mtd_oob_ops_t ops = {
				.oobbuf = (u8 *)addr,
				.ooblen = rwsize,
				.mode = MTD_OOB_RAW
			};
c7e06518:	e28d5050 	add	r5, sp, #80	; 0x50
c7e0651c:	e1a01000 	mov	r1, r0
c7e06520:	e3a02020 	mov	r2, #32	; 0x20
c7e06524:	e1a00005 	mov	r0, r5
c7e06528:	e59d40a8 	ldr	r4, [sp, #168]
c7e0652c:	eb007198 	bl	c7e22b94 <memset>
c7e06530:	e28d2098 	add	r2, sp, #152	; 0x98
c7e06534:	e8920006 	ldm	r2, {r1, r2}

			if (read)
c7e06538:	e59d3048 	ldr	r3, [sp, #72]
			/* out-of-band data */
			mtd_oob_ops_t ops = {
				.oobbuf = (u8 *)addr,
				.ooblen = rwsize,
				.mode = MTD_OOB_RAW
			};
c7e0653c:	e58d405c 	str	r4, [sp, #92]

			if (read)
c7e06540:	e3530000 	cmp	r3, #0	; 0x0
			/* out-of-band data */
			mtd_oob_ops_t ops = {
				.oobbuf = (u8 *)addr,
				.ooblen = rwsize,
				.mode = MTD_OOB_RAW
			};
c7e06544:	e3a03002 	mov	r3, #2	; 0x2
c7e06548:	e58d3050 	str	r3, [sp, #80]
c7e0654c:	e59d304c 	ldr	r3, [sp, #76]
c7e06550:	e58d306c 	str	r3, [sp, #108]

			if (read)
c7e06554:	0a000007 	beq	c7e06578 <do_nand+0x944>
				ret = nand->read_oob(nand, off, &ops);
c7e06558:	e1a03002 	mov	r3, r2
c7e0655c:	e58d5000 	str	r5, [sp]
c7e06560:	e1a02001 	mov	r2, r1
c7e06564:	e1a0000a 	mov	r0, sl
c7e06568:	e1a0e00f 	mov	lr, pc
c7e0656c:	e59af04c 	ldr	pc, [sl, #76]
c7e06570:	e1a04000 	mov	r4, r0
c7e06574:	ea00003f 	b	c7e06678 <do_nand+0xa44>
			else
				ret = nand->write_oob(nand, off, &ops);
c7e06578:	e1a03002 	mov	r3, r2
c7e0657c:	e58d5000 	str	r5, [sp]
c7e06580:	e1a02001 	mov	r2, r1
c7e06584:	e1a0000a 	mov	r0, sl
c7e06588:	e1a0e00f 	mov	lr, pc
c7e0658c:	e59af050 	ldr	pc, [sl, #80]
c7e06590:	eafffff6 	b	c7e06570 <do_nand+0x93c>
		} else if (raw) {
			ret = raw_access(nand, addr, off, pagecount, read);
c7e06594:	e28d7098 	add	r7, sp, #152	; 0x98
c7e06598:	e89700c0 	ldm	r7, {r6, r7}
c7e0659c:	ea00002e 	b	c7e0665c <do_nand+0xa28>
			.datbuf = (u8 *)addr,
			.oobbuf = ((u8 *)addr) + nand->writesize,
			.len = nand->writesize,
			.ooblen = nand->oobsize,
			.mode = MTD_OOB_RAW
		};
c7e065a0:	e59a4014 	ldr	r4, [sl, #20]
c7e065a4:	e59a5018 	ldr	r5, [sl, #24]
c7e065a8:	eb007179 	bl	c7e22b94 <memset>

		if (read)
c7e065ac:	e59d1048 	ldr	r1, [sp, #72]
			.datbuf = (u8 *)addr,
			.oobbuf = ((u8 *)addr) + nand->writesize,
			.len = nand->writesize,
			.ooblen = nand->oobsize,
			.mode = MTD_OOB_RAW
		};
c7e065b0:	e59d204c 	ldr	r2, [sp, #76]

		if (read)
c7e065b4:	e3510000 	cmp	r1, #0	; 0x0
			.datbuf = (u8 *)addr,
			.oobbuf = ((u8 *)addr) + nand->writesize,
			.len = nand->writesize,
			.ooblen = nand->oobsize,
			.mode = MTD_OOB_RAW
		};
c7e065b8:	e3a01002 	mov	r1, #2	; 0x2
c7e065bc:	e58d1050 	str	r1, [sp, #80]
c7e065c0:	e59d104c 	ldr	r1, [sp, #76]
c7e065c4:	e082c004 	add	ip, r2, r4

		if (read)
			ret = nand->read_oob(nand, off, &ops);
c7e065c8:	e1a0000a 	mov	r0, sl
c7e065cc:	e1a02006 	mov	r2, r6
c7e065d0:	e1a03007 	mov	r3, r7
			.datbuf = (u8 *)addr,
			.oobbuf = ((u8 *)addr) + nand->writesize,
			.len = nand->writesize,
			.ooblen = nand->oobsize,
			.mode = MTD_OOB_RAW
		};
c7e065d4:	e58d505c 	str	r5, [sp, #92]
c7e065d8:	e58dc06c 	str	ip, [sp, #108]
c7e065dc:	e58d1068 	str	r1, [sp, #104]
c7e065e0:	e58d4054 	str	r4, [sp, #84]

		if (read)
c7e065e4:	0a000003 	beq	c7e065f8 <do_nand+0x9c4>
			ret = nand->read_oob(nand, off, &ops);
c7e065e8:	e58db000 	str	fp, [sp]
c7e065ec:	e1a0e00f 	mov	lr, pc
c7e065f0:	e59af04c 	ldr	pc, [sl, #76]
c7e065f4:	ea000005 	b	c7e06610 <do_nand+0x9dc>
		else
			ret = nand->write_oob(nand, off, &ops);
c7e065f8:	e58db000 	str	fp, [sp]
c7e065fc:	e1a02006 	mov	r2, r6
c7e06600:	e1a03007 	mov	r3, r7
c7e06604:	e1a0000a 	mov	r0, sl
c7e06608:	e1a0e00f 	mov	lr, pc
c7e0660c:	e59af050 	ldr	pc, [sl, #80]

		if (ret) {
c7e06610:	e3500000 	cmp	r0, #0	; 0x0
		};

		if (read)
			ret = nand->read_oob(nand, off, &ops);
		else
			ret = nand->write_oob(nand, off, &ops);
c7e06614:	e1a04000 	mov	r4, r0
c7e06618:	e2499001 	sub	r9, r9, #1	; 0x1

		if (ret) {
c7e0661c:	0a000006 	beq	c7e0663c <do_nand+0xa08>
			printf("%s: error at offset %llx, ret %d\n",
c7e06620:	e1a02006 	mov	r2, r6
c7e06624:	e1a03007 	mov	r3, r7
c7e06628:	e59f1200 	ldr	r1, [pc, #512]	; c7e06830 <do_nand+0xbfc>
c7e0662c:	e59f0200 	ldr	r0, [pc, #512]	; c7e06834 <do_nand+0xc00>
c7e06630:	e58d4000 	str	r4, [sp]
c7e06634:	eb000907 	bl	c7e08a58 <printf>
c7e06638:	ea00000e 	b	c7e06678 <do_nand+0xa44>
				__func__, (long long)off, ret);
			break;
		}

		addr += nand->writesize + nand->oobsize;
c7e0663c:	e59a3014 	ldr	r3, [sl, #20]
c7e06640:	e59a2018 	ldr	r2, [sl, #24]
		off += nand->writesize;
c7e06644:	e0966003 	adds	r6, r6, r3
			printf("%s: error at offset %llx, ret %d\n",
				__func__, (long long)off, ret);
			break;
		}

		addr += nand->writesize + nand->oobsize;
c7e06648:	e0833002 	add	r3, r3, r2
c7e0664c:	e59d204c 	ldr	r2, [sp, #76]
		off += nand->writesize;
c7e06650:	e2a77000 	adc	r7, r7, #0	; 0x0
			printf("%s: error at offset %llx, ret %d\n",
				__func__, (long long)off, ret);
			break;
		}

		addr += nand->writesize + nand->oobsize;
c7e06654:	e0822003 	add	r2, r2, r3
c7e06658:	e58d204c 	str	r2, [sp, #76]
			.datbuf = (u8 *)addr,
			.oobbuf = ((u8 *)addr) + nand->writesize,
			.len = nand->writesize,
			.ooblen = nand->oobsize,
			.mode = MTD_OOB_RAW
		};
c7e0665c:	e3a01000 	mov	r1, #0	; 0x0
c7e06660:	e28db050 	add	fp, sp, #80	; 0x50
static int raw_access(nand_info_t *nand, ulong addr, loff_t off, ulong count,
			int read)
{
	int ret = 0;

	while (count--) {
c7e06664:	e1590001 	cmp	r9, r1
			.datbuf = (u8 *)addr,
			.oobbuf = ((u8 *)addr) + nand->writesize,
			.len = nand->writesize,
			.ooblen = nand->oobsize,
			.mode = MTD_OOB_RAW
		};
c7e06668:	e3a02020 	mov	r2, #32	; 0x20
c7e0666c:	e1a0000b 	mov	r0, fp
static int raw_access(nand_info_t *nand, ulong addr, loff_t off, ulong count,
			int read)
{
	int ret = 0;

	while (count--) {
c7e06670:	1affffca 	bne	c7e065a0 <do_nand+0x96c>
c7e06674:	e1a04009 	mov	r4, r9
		} else {
			printf("Unknown nand command suffix '%s'.\n", s);
			return 1;
		}

		printf(" %zu bytes %s: %s\n", rwsize,
c7e06678:	e59d1048 	ldr	r1, [sp, #72]
c7e0667c:	e59f31b4 	ldr	r3, [pc, #436]	; c7e06838 <do_nand+0xc04>
c7e06680:	e3510000 	cmp	r1, #0	; 0x0
c7e06684:	e59f115c 	ldr	r1, [pc, #348]	; c7e067e8 <do_nand+0xbb4>
c7e06688:	e59f2184 	ldr	r2, [pc, #388]	; c7e06814 <do_nand+0xbe0>
c7e0668c:	01a02003 	moveq	r2, r3
c7e06690:	e3540000 	cmp	r4, #0	; 0x0
c7e06694:	e59f3150 	ldr	r3, [pc, #336]	; c7e067ec <do_nand+0xbb8>
c7e06698:	e59f019c 	ldr	r0, [pc, #412]	; c7e0683c <do_nand+0xc08>
c7e0669c:	01a03001 	moveq	r3, r1
c7e066a0:	e59d10a8 	ldr	r1, [sp, #168]
c7e066a4:	eb0008eb 	bl	c7e08a58 <printf>
		       read ? "read" : "written", ret ? "ERROR" : "OK");

		return ret == 0 ? 0 : 1;
c7e066a8:	e2544000 	subs	r4, r4, #0	; 0x0
c7e066ac:	13a04001 	movne	r4, #1	; 0x1
c7e066b0:	ea00002b 	b	c7e06764 <do_nand+0xb30>
	}

	if (strcmp(cmd, "markbad") == 0) {
c7e066b4:	e1a00006 	mov	r0, r6
c7e066b8:	e59f1180 	ldr	r1, [pc, #384]	; c7e06840 <do_nand+0xc0c>
c7e066bc:	eb007067 	bl	c7e22860 <strcmp>
c7e066c0:	e3500000 	cmp	r0, #0	; 0x0
c7e066c4:	1a00001d 	bne	c7e06740 <do_nand+0xb0c>
		argc -= 2;
		argv += 2;

		if (argc <= 0)
c7e066c8:	e2577002 	subs	r7, r7, #2	; 0x2
c7e066cc:	0a000023 	beq	c7e06760 <do_nand+0xb2c>
			goto usage;
c7e066d0:	e1a0600b 	mov	r6, fp
c7e066d4:	e1a04000 	mov	r4, r0

		while (argc > 0) {
			addr = simple_strtoul(*argv, NULL, 16);
c7e066d8:	e3a01000 	mov	r1, #0	; 0x0
c7e066dc:	e3a02010 	mov	r2, #16	; 0x10
c7e066e0:	e5960008 	ldr	r0, [r6, #8]
c7e066e4:	eb00721d 	bl	c7e22f60 <simple_strtoul>

			if (nand->block_markbad(nand, addr)) {
c7e066e8:	e59f10a4 	ldr	r1, [pc, #164]	; c7e06794 <do_nand+0xb60>
c7e066ec:	e1a02000 	mov	r2, r0

		if (argc <= 0)
			goto usage;

		while (argc > 0) {
			addr = simple_strtoul(*argv, NULL, 16);
c7e066f0:	e1a05000 	mov	r5, r0

			if (nand->block_markbad(nand, addr)) {
c7e066f4:	e3a03000 	mov	r3, #0	; 0x0
c7e066f8:	e1a00001 	mov	r0, r1
c7e066fc:	e1a0e00f 	mov	lr, pc
c7e06700:	e591f07c 	ldr	pc, [r1, #124]
c7e06704:	e3500000 	cmp	r0, #0	; 0x0
				printf("block 0x%08lx NOT marked "
c7e06708:	e1a02004 	mov	r2, r4
c7e0670c:	e1a01005 	mov	r1, r5
c7e06710:	e59f012c 	ldr	r0, [pc, #300]	; c7e06844 <do_nand+0xc10>
			goto usage;

		while (argc > 0) {
			addr = simple_strtoul(*argv, NULL, 16);

			if (nand->block_markbad(nand, addr)) {
c7e06714:	0a000002 	beq	c7e06724 <do_nand+0xaf0>
				printf("block 0x%08lx NOT marked "
c7e06718:	eb0008ce 	bl	c7e08a58 <printf>
c7e0671c:	e3a04001 	mov	r4, #1	; 0x1
c7e06720:	ea000002 	b	c7e06730 <do_nand+0xafc>
					"as bad! ERROR %d\n",
					addr, ret);
				ret = 1;
			} else {
				printf("block 0x%08lx successfully "
c7e06724:	e1a01005 	mov	r1, r5
c7e06728:	e59f0118 	ldr	r0, [pc, #280]	; c7e06848 <do_nand+0xc14>
c7e0672c:	eb0008c9 	bl	c7e08a58 <printf>
		argv += 2;

		if (argc <= 0)
			goto usage;

		while (argc > 0) {
c7e06730:	e2577001 	subs	r7, r7, #1	; 0x1
			} else {
				printf("block 0x%08lx successfully "
					"marked as bad\n",
					addr);
			}
			--argc;
c7e06734:	e2866004 	add	r6, r6, #4	; 0x4
		argv += 2;

		if (argc <= 0)
			goto usage;

		while (argc > 0) {
c7e06738:	1affffe6 	bne	c7e066d8 <do_nand+0xaa4>
c7e0673c:	ea000008 	b	c7e06764 <do_nand+0xb30>
			++argv;
		}
		return ret;
	}

	if (strcmp(cmd, "biterr") == 0) {
c7e06740:	e1a00006 	mov	r0, r6
c7e06744:	e59f1100 	ldr	r1, [pc, #256]	; c7e0684c <do_nand+0xc18>
c7e06748:	eb007044 	bl	c7e22860 <strcmp>
c7e0674c:	e3500000 	cmp	r0, #0	; 0x0
c7e06750:	1a000002 	bne	c7e06760 <do_nand+0xb2c>
c7e06754:	ea000008 	b	c7e0677c <do_nand+0xb48>
c7e06758:	e3a04000 	mov	r4, #0	; 0x0
c7e0675c:	ea000000 	b	c7e06764 <do_nand+0xb30>
c7e06760:	e3e04000 	mvn	r4, #0	; 0x0
	}
#endif

usage:
	return CMD_RET_USAGE;
}
c7e06764:	e1a00004 	mov	r0, r4
c7e06768:	e28dd0b0 	add	sp, sp, #176	; 0xb0
c7e0676c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

			if (arg_off(argv[3], &dev, &off, &size))
				return 1;

			if (argc > 4 && !str2long(argv[4], &pagecount)) {
				printf("'%s' is not a number\n", argv[4]);
c7e06770:	e59b1010 	ldr	r1, [fp, #16]
c7e06774:	e59f00d4 	ldr	r0, [pc, #212]	; c7e06850 <do_nand+0xc1c>
c7e06778:	eb0008b6 	bl	c7e08a58 <printf>
c7e0677c:	e3a04001 	mov	r4, #1	; 0x1
c7e06780:	eafffff7 	b	c7e06764 <do_nand+0xb30>
c7e06784:	c7e30809 	.word	0xc7e30809
c7e06788:	c7e395c4 	.word	0xc7e395c4
c7e0678c:	c7e3080f 	.word	0xc7e3080f
c7e06790:	c7e30502 	.word	0xc7e30502
c7e06794:	c7e41e50 	.word	0xc7e41e50
c7e06798:	c7e30528 	.word	0xc7e30528
c7e0679c:	c7e3084e 	.word	0xc7e3084e
c7e067a0:	c7e30814 	.word	0xc7e30814
c7e067a4:	c7e30824 	.word	0xc7e30824
c7e067a8:	c7e30832 	.word	0xc7e30832
c7e067ac:	c7e3084d 	.word	0xc7e3084d
c7e067b0:	c7e30ad7 	.word	0xc7e30ad7
c7e067b4:	c7e30864 	.word	0xc7e30864
c7e067b8:	c7e3087c 	.word	0xc7e3087c
c7e067bc:	c7e303d0 	.word	0xc7e303d0
c7e067c0:	c7e30886 	.word	0xc7e30886
c7e067c4:	c7e3088c 	.word	0xc7e3088c
c7e067c8:	c7e30892 	.word	0xc7e30892
c7e067cc:	c7e30895 	.word	0xc7e30895
c7e067d0:	c7e3089d 	.word	0xc7e3089d
c7e067d4:	c7e308a3 	.word	0xc7e308a3
c7e067d8:	c7e308a9 	.word	0xc7e308a9
c7e067dc:	c7e308b4 	.word	0xc7e308b4
c7e067e0:	c7e2e4cd 	.word	0xc7e2e4cd
c7e067e4:	c7e309ae 	.word	0xc7e309ae
c7e067e8:	c7e30370 	.word	0xc7e30370
c7e067ec:	c7e3036a 	.word	0xc7e3036a
c7e067f0:	c7e319dc 	.word	0xc7e319dc
c7e067f4:	c7e309bd 	.word	0xc7e309bd
c7e067f8:	c7e401a8 	.word	0xc7e401a8
c7e067fc:	c7e309c2 	.word	0xc7e309c2
c7e06800:	c7e309dd 	.word	0xc7e309dd
c7e06804:	c7e309fc 	.word	0xc7e309fc
c7e06808:	c7e30a0e 	.word	0xc7e30a0e
c7e0680c:	c7e30a61 	.word	0xc7e30a61
c7e06810:	c7e30a67 	.word	0xc7e30a67
c7e06814:	c7e30898 	.word	0xc7e30898
c7e06818:	c7e303ca 	.word	0xc7e303ca
c7e0681c:	c7e30a91 	.word	0xc7e30a91
c7e06820:	c7e307ae 	.word	0xc7e307ae
c7e06824:	c7e3066a 	.word	0xc7e3066a
c7e06828:	c7e30671 	.word	0xc7e30671
c7e0682c:	c7e30674 	.word	0xc7e30674
c7e06830:	c7e2b1ae 	.word	0xc7e2b1ae
c7e06834:	c7e30a96 	.word	0xc7e30a96
c7e06838:	c7e30ab8 	.word	0xc7e30ab8
c7e0683c:	c7e30ac0 	.word	0xc7e30ac0
c7e06840:	c7e30ad3 	.word	0xc7e30ad3
c7e06844:	c7e30adb 	.word	0xc7e30adb
c7e06848:	c7e30b06 	.word	0xc7e30b06
c7e0684c:	c7e30b30 	.word	0xc7e30b30
c7e06850:	c7e30798 	.word	0xc7e30798

c7e06854 <do_ping>:
}

#if defined(CONFIG_CMD_PING)
int do_ping (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	if (argc < 2)
c7e06854:	e3520001 	cmp	r2, #1	; 0x1
	return rcode;
}

#if defined(CONFIG_CMD_PING)
int do_ping (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e06858:	e92d4010 	push	{r4, lr}
c7e0685c:	e1a04003 	mov	r4, r3
	if (argc < 2)
c7e06860:	da000013 	ble	c7e068b4 <do_ping+0x60>
		return -1;

	NetPingIP = string_to_ip(argv[1]);
c7e06864:	e5930004 	ldr	r0, [r3, #4]
c7e06868:	eb006f5e 	bl	c7e225e8 <string_to_ip>
c7e0686c:	e59f3048 	ldr	r3, [pc, #72]	; c7e068bc <do_ping+0x68>
	if (NetPingIP == 0)
c7e06870:	e3500000 	cmp	r0, #0	; 0x0
int do_ping (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	if (argc < 2)
		return -1;

	NetPingIP = string_to_ip(argv[1]);
c7e06874:	e5830000 	str	r0, [r3]
	if (NetPingIP == 0)
c7e06878:	0a00000d 	beq	c7e068b4 <do_ping+0x60>
		return CMD_RET_USAGE;

	if (NetLoop(PING) < 0) {
c7e0687c:	e3a00005 	mov	r0, #5	; 0x5
c7e06880:	eb00874e 	bl	c7e285c0 <NetLoop>
c7e06884:	e3500000 	cmp	r0, #0	; 0x0
c7e06888:	aa000004 	bge	c7e068a0 <do_ping+0x4c>
		printf("ping failed; host %s is not alive\n", argv[1]);
c7e0688c:	e5941004 	ldr	r1, [r4, #4]
c7e06890:	e59f0028 	ldr	r0, [pc, #40]	; c7e068c0 <do_ping+0x6c>
c7e06894:	eb00086f 	bl	c7e08a58 <printf>
c7e06898:	e3a00001 	mov	r0, #1	; 0x1
c7e0689c:	e8bd8010 	pop	{r4, pc}
		return 1;
	}

	printf("host %s is alive\n", argv[1]);
c7e068a0:	e5941004 	ldr	r1, [r4, #4]
c7e068a4:	e59f0018 	ldr	r0, [pc, #24]	; c7e068c4 <do_ping+0x70>
c7e068a8:	eb00086a 	bl	c7e08a58 <printf>
c7e068ac:	e3a00000 	mov	r0, #0	; 0x0
c7e068b0:	e8bd8010 	pop	{r4, pc}

	return 0;
c7e068b4:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e068b8:	e8bd8010 	pop	{r4, pc}
c7e068bc:	c7e75208 	.word	0xc7e75208
c7e068c0:	c7e30f73 	.word	0xc7e30f73
c7e068c4:	c7e30f96 	.word	0xc7e30f96

c7e068c8 <bootstage_error>:

static inline ulong bootstage_error(enum bootstage_id id)
{
c7e068c8:	e92d4010 	push	{r4, lr}
	show_boot_progress(-id);
c7e068cc:	e2600000 	rsb	r0, r0, #0	; 0x0
c7e068d0:	eb001be9 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e068d4:	e3a00000 	mov	r0, #0	; 0x0
c7e068d8:	e8bd8010 	pop	{r4, pc}

c7e068dc <bootstage_mark>:
 * This is a dummy implementation which just calls show_boot_progress(),
 * and won't even do that unless CONFIG_SHOW_BOOT_PROGRESS is defined
 */

static inline ulong bootstage_mark(enum bootstage_id id)
{
c7e068dc:	e92d4010 	push	{r4, lr}
	show_boot_progress(id);
c7e068e0:	eb001be5 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e068e4:	e3a00000 	mov	r0, #0	; 0x0
c7e068e8:	e8bd8010 	pop	{r4, pc}

c7e068ec <netboot_common>:
#endif
}

static int netboot_common(enum proto_t proto, cmd_tbl_t *cmdtp, int argc,
		char * const argv[])
{
c7e068ec:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
c7e068f0:	e1a0a000 	mov	sl, r0
c7e068f4:	e24dd024 	sub	sp, sp, #36	; 0x24
	int   rcode = 0;
	int   size;
	ulong addr;

	/* pre-set load_addr */
	if ((s = getenv("loadaddr")) != NULL) {
c7e068f8:	e59f0264 	ldr	r0, [pc, #612]	; c7e06b64 <netboot_common+0x278>
#endif
}

static int netboot_common(enum proto_t proto, cmd_tbl_t *cmdtp, int argc,
		char * const argv[])
{
c7e068fc:	e1a09001 	mov	r9, r1
c7e06900:	e1a04002 	mov	r4, r2
c7e06904:	e1a07003 	mov	r7, r3
	int   rcode = 0;
	int   size;
	ulong addr;

	/* pre-set load_addr */
	if ((s = getenv("loadaddr")) != NULL) {
c7e06908:	eb0001e3 	bl	c7e0709c <getenv>
c7e0690c:	e3500000 	cmp	r0, #0	; 0x0
c7e06910:	0a000004 	beq	c7e06928 <netboot_common+0x3c>
		load_addr = simple_strtoul(s, NULL, 16);
c7e06914:	e3a01000 	mov	r1, #0	; 0x0
c7e06918:	e3a02010 	mov	r2, #16	; 0x10
c7e0691c:	eb00718f 	bl	c7e22f60 <simple_strtoul>
c7e06920:	e59f3240 	ldr	r3, [pc, #576]	; c7e06b68 <netboot_common+0x27c>
c7e06924:	e5830000 	str	r0, [r3]
	}

	switch (argc) {
c7e06928:	e3540002 	cmp	r4, #2	; 0x2
c7e0692c:	0a000004 	beq	c7e06944 <netboot_common+0x58>
c7e06930:	e3540003 	cmp	r4, #3	; 0x3
c7e06934:	0a000014 	beq	c7e0698c <netboot_common+0xa0>
c7e06938:	e3540001 	cmp	r4, #1	; 0x1
c7e0693c:	1a00001d 	bne	c7e069b8 <netboot_common+0xcc>
c7e06940:	ea000020 	b	c7e069c8 <netboot_common+0xdc>
		 * Only one arg - accept two forms:
		 * Just load address, or just boot file name. The latter
		 * form must be written in a format which can not be
		 * mis-interpreted as a valid number.
		 */
		addr = simple_strtoul(argv[1], &end, 16);
c7e06944:	e28d101c 	add	r1, sp, #28	; 0x1c
c7e06948:	e3a02010 	mov	r2, #16	; 0x10
c7e0694c:	e5970004 	ldr	r0, [r7, #4]
c7e06950:	eb007182 	bl	c7e22f60 <simple_strtoul>
		if (end == (argv[1] + strlen(argv[1])))
c7e06954:	e5974004 	ldr	r4, [r7, #4]
		 * Only one arg - accept two forms:
		 * Just load address, or just boot file name. The latter
		 * form must be written in a format which can not be
		 * mis-interpreted as a valid number.
		 */
		addr = simple_strtoul(argv[1], &end, 16);
c7e06958:	e1a06000 	mov	r6, r0
		if (end == (argv[1] + strlen(argv[1])))
c7e0695c:	e1a00004 	mov	r0, r4
c7e06960:	e59d501c 	ldr	r5, [sp, #28]
c7e06964:	eb006ff3 	bl	c7e22938 <strlen>
c7e06968:	e0844000 	add	r4, r4, r0
c7e0696c:	e1550004 	cmp	r5, r4
			load_addr = addr;
c7e06970:	059f31f0 	ldreq	r3, [pc, #496]	; c7e06b68 <netboot_common+0x27c>
c7e06974:	05836000 	streq	r6, [r3]
		 * Just load address, or just boot file name. The latter
		 * form must be written in a format which can not be
		 * mis-interpreted as a valid number.
		 */
		addr = simple_strtoul(argv[1], &end, 16);
		if (end == (argv[1] + strlen(argv[1])))
c7e06978:	0a000012 	beq	c7e069c8 <netboot_common+0xdc>
			load_addr = addr;
		else
			copy_filename(BootFile, argv[1], sizeof(BootFile));
c7e0697c:	e59f01e8 	ldr	r0, [pc, #488]	; c7e06b6c <netboot_common+0x280>
c7e06980:	e5971004 	ldr	r1, [r7, #4]
c7e06984:	e3a02080 	mov	r2, #128	; 0x80
c7e06988:	ea000008 	b	c7e069b0 <netboot_common+0xc4>
		break;

	case 3:	load_addr = simple_strtoul(argv[1], NULL, 16);
c7e0698c:	e3a01000 	mov	r1, #0	; 0x0
c7e06990:	e3a02010 	mov	r2, #16	; 0x10
c7e06994:	e5970004 	ldr	r0, [r7, #4]
c7e06998:	eb007170 	bl	c7e22f60 <simple_strtoul>
c7e0699c:	e59f31c4 	ldr	r3, [pc, #452]	; c7e06b68 <netboot_common+0x27c>
		copy_filename (BootFile, argv[2], sizeof(BootFile));
c7e069a0:	e5971008 	ldr	r1, [r7, #8]
			load_addr = addr;
		else
			copy_filename(BootFile, argv[1], sizeof(BootFile));
		break;

	case 3:	load_addr = simple_strtoul(argv[1], NULL, 16);
c7e069a4:	e5830000 	str	r0, [r3]
		copy_filename (BootFile, argv[2], sizeof(BootFile));
c7e069a8:	e59f01bc 	ldr	r0, [pc, #444]	; c7e06b6c <netboot_common+0x280>
c7e069ac:	e3a02080 	mov	r2, #128	; 0x80
c7e069b0:	eb008453 	bl	c7e27b04 <copy_filename>
c7e069b4:	ea000003 	b	c7e069c8 <netboot_common+0xdc>
		}
		copy_filename(BootFile, argv[3], sizeof(BootFile));
		break;
#endif
	default:
		bootstage_error(BOOTSTAGE_ID_NET_START);
c7e069b8:	e3a00050 	mov	r0, #80	; 0x50
c7e069bc:	ebffffc1 	bl	c7e068c8 <bootstage_error>
c7e069c0:	e3e04000 	mvn	r4, #0	; 0x0
c7e069c4:	ea000063 	b	c7e06b58 <netboot_common+0x26c>
		return CMD_RET_USAGE;
	}
	bootstage_mark(BOOTSTAGE_ID_NET_START);
c7e069c8:	e3a00050 	mov	r0, #80	; 0x50
c7e069cc:	ebffffc2 	bl	c7e068dc <bootstage_mark>

	if ((size = NetLoop(proto)) < 0) {
c7e069d0:	e1a0000a 	mov	r0, sl
c7e069d4:	eb0086f9 	bl	c7e285c0 <NetLoop>
c7e069d8:	e2505000 	subs	r5, r0, #0	; 0x0
c7e069dc:	aa000003 	bge	c7e069f0 <netboot_common+0x104>
		bootstage_error(BOOTSTAGE_ID_NET_NETLOOP_OK);
c7e069e0:	e3a00051 	mov	r0, #81	; 0x51
c7e069e4:	ebffffb7 	bl	c7e068c8 <bootstage_error>
c7e069e8:	e3a04001 	mov	r4, #1	; 0x1
c7e069ec:	ea000059 	b	c7e06b58 <netboot_common+0x26c>
		return 1;
	}
	bootstage_mark(BOOTSTAGE_ID_NET_NETLOOP_OK);
c7e069f0:	e3a00051 	mov	r0, #81	; 0x51
c7e069f4:	ebffffb8 	bl	c7e068dc <bootstage_mark>

static void netboot_update_env (void)
{
	char tmp[22];

	if (NetOurGatewayIP) {
c7e069f8:	e59f3170 	ldr	r3, [pc, #368]	; c7e06b70 <netboot_common+0x284>
c7e069fc:	e5930000 	ldr	r0, [r3]
c7e06a00:	e3500000 	cmp	r0, #0	; 0x0
c7e06a04:	0a000005 	beq	c7e06a20 <netboot_common+0x134>
		ip_to_string (NetOurGatewayIP, tmp);
c7e06a08:	e28d4006 	add	r4, sp, #6	; 0x6
c7e06a0c:	e1a01004 	mov	r1, r4
c7e06a10:	eb00848f 	bl	c7e27c54 <ip_to_string>
		setenv ("gatewayip", tmp);
c7e06a14:	e1a01004 	mov	r1, r4
c7e06a18:	e59f0154 	ldr	r0, [pc, #340]	; c7e06b74 <netboot_common+0x288>
c7e06a1c:	eb00030b 	bl	c7e07650 <setenv>
	}

	if (NetOurSubnetMask) {
c7e06a20:	e59f3150 	ldr	r3, [pc, #336]	; c7e06b78 <netboot_common+0x28c>
c7e06a24:	e5930000 	ldr	r0, [r3]
c7e06a28:	e3500000 	cmp	r0, #0	; 0x0
c7e06a2c:	0a000005 	beq	c7e06a48 <netboot_common+0x15c>
		ip_to_string (NetOurSubnetMask, tmp);
c7e06a30:	e28d4006 	add	r4, sp, #6	; 0x6
c7e06a34:	e1a01004 	mov	r1, r4
c7e06a38:	eb008485 	bl	c7e27c54 <ip_to_string>
		setenv ("netmask", tmp);
c7e06a3c:	e1a01004 	mov	r1, r4
c7e06a40:	e59f0134 	ldr	r0, [pc, #308]	; c7e06b7c <netboot_common+0x290>
c7e06a44:	eb000301 	bl	c7e07650 <setenv>
	}

	if (NetOurHostName[0])
c7e06a48:	e59f1130 	ldr	r1, [pc, #304]	; c7e06b80 <netboot_common+0x294>
c7e06a4c:	e5d13000 	ldrb	r3, [r1]
c7e06a50:	e3530000 	cmp	r3, #0	; 0x0
c7e06a54:	0a000001 	beq	c7e06a60 <netboot_common+0x174>
		setenv ("hostname", NetOurHostName);
c7e06a58:	e59f0124 	ldr	r0, [pc, #292]	; c7e06b84 <netboot_common+0x298>
c7e06a5c:	eb0002fb 	bl	c7e07650 <setenv>

	if (NetOurRootPath[0])
c7e06a60:	e59f1120 	ldr	r1, [pc, #288]	; c7e06b88 <netboot_common+0x29c>
c7e06a64:	e5d13000 	ldrb	r3, [r1]
c7e06a68:	e3530000 	cmp	r3, #0	; 0x0
c7e06a6c:	0a000001 	beq	c7e06a78 <netboot_common+0x18c>
		setenv ("rootpath", NetOurRootPath);
c7e06a70:	e59f0114 	ldr	r0, [pc, #276]	; c7e06b8c <netboot_common+0x2a0>
c7e06a74:	eb0002f5 	bl	c7e07650 <setenv>

	if (NetOurIP) {
c7e06a78:	e59f3110 	ldr	r3, [pc, #272]	; c7e06b90 <netboot_common+0x2a4>
c7e06a7c:	e5930000 	ldr	r0, [r3]
c7e06a80:	e3500000 	cmp	r0, #0	; 0x0
c7e06a84:	0a000005 	beq	c7e06aa0 <netboot_common+0x1b4>
		ip_to_string (NetOurIP, tmp);
c7e06a88:	e28d4006 	add	r4, sp, #6	; 0x6
c7e06a8c:	e1a01004 	mov	r1, r4
c7e06a90:	eb00846f 	bl	c7e27c54 <ip_to_string>
		setenv ("ipaddr", tmp);
c7e06a94:	e1a01004 	mov	r1, r4
c7e06a98:	e59f00f4 	ldr	r0, [pc, #244]	; c7e06b94 <netboot_common+0x2a8>
c7e06a9c:	eb0002eb 	bl	c7e07650 <setenv>
#if !defined(CONFIG_BOOTP_SERVERIP)
	/*
	 * Only attempt to change serverip if net/bootp.c:BootpCopyNetParams()
	 * could have set it
	 */
	if (NetServerIP) {
c7e06aa0:	e59f30f0 	ldr	r3, [pc, #240]	; c7e06b98 <netboot_common+0x2ac>
c7e06aa4:	e5930000 	ldr	r0, [r3]
c7e06aa8:	e3500000 	cmp	r0, #0	; 0x0
c7e06aac:	0a000005 	beq	c7e06ac8 <netboot_common+0x1dc>
		ip_to_string (NetServerIP, tmp);
c7e06ab0:	e28d4006 	add	r4, sp, #6	; 0x6
c7e06ab4:	e1a01004 	mov	r1, r4
c7e06ab8:	eb008465 	bl	c7e27c54 <ip_to_string>
		setenv ("serverip", tmp);
c7e06abc:	e1a01004 	mov	r1, r4
c7e06ac0:	e59f00d4 	ldr	r0, [pc, #212]	; c7e06b9c <netboot_common+0x2b0>
c7e06ac4:	eb0002e1 	bl	c7e07650 <setenv>
	}
#endif
	if (NetOurDNSIP) {
c7e06ac8:	e59f30d0 	ldr	r3, [pc, #208]	; c7e06ba0 <netboot_common+0x2b4>
c7e06acc:	e5930000 	ldr	r0, [r3]
c7e06ad0:	e3500000 	cmp	r0, #0	; 0x0
c7e06ad4:	0a000005 	beq	c7e06af0 <netboot_common+0x204>
		ip_to_string (NetOurDNSIP, tmp);
c7e06ad8:	e28d4006 	add	r4, sp, #6	; 0x6
c7e06adc:	e1a01004 	mov	r1, r4
c7e06ae0:	eb00845b 	bl	c7e27c54 <ip_to_string>
		setenv ("dnsip", tmp);
c7e06ae4:	e1a01004 	mov	r1, r4
c7e06ae8:	e59f00b4 	ldr	r0, [pc, #180]	; c7e06ba4 <netboot_common+0x2b8>
c7e06aec:	eb0002d7 	bl	c7e07650 <setenv>
	if (NetOurDNS2IP) {
		ip_to_string (NetOurDNS2IP, tmp);
		setenv ("dnsip2", tmp);
	}
#endif
	if (NetOurNISDomain[0])
c7e06af0:	e59f10b0 	ldr	r1, [pc, #176]	; c7e06ba8 <netboot_common+0x2bc>
c7e06af4:	e5d13000 	ldrb	r3, [r1]
c7e06af8:	e3530000 	cmp	r3, #0	; 0x0
c7e06afc:	0a000001 	beq	c7e06b08 <netboot_common+0x21c>
		setenv ("domain", NetOurNISDomain);
c7e06b00:	e59f00a4 	ldr	r0, [pc, #164]	; c7e06bac <netboot_common+0x2c0>
c7e06b04:	eb0002d1 	bl	c7e07650 <setenv>

	/* NetLoop ok, update environment */
	netboot_update_env();

	/* done if no file was loaded (no errors though) */
	if (size == 0) {
c7e06b08:	e3550000 	cmp	r5, #0	; 0x0
		bootstage_error(BOOTSTAGE_ID_NET_LOADED);
c7e06b0c:	03a00052 	moveq	r0, #82	; 0x52
c7e06b10:	01a04005 	moveq	r4, r5

	/* NetLoop ok, update environment */
	netboot_update_env();

	/* done if no file was loaded (no errors though) */
	if (size == 0) {
c7e06b14:	0a00000b 	beq	c7e06b48 <netboot_common+0x25c>
		bootstage_error(BOOTSTAGE_ID_NET_LOADED);
		return 0;
	}

	/* flush cache */
	flush_cache(load_addr, size);
c7e06b18:	e59f3048 	ldr	r3, [pc, #72]	; c7e06b68 <netboot_common+0x27c>
c7e06b1c:	e1a01005 	mov	r1, r5
c7e06b20:	e5930000 	ldr	r0, [r3]
c7e06b24:	ebffea15 	bl	c7e01380 <__flush_cache>

	bootstage_mark(BOOTSTAGE_ID_NET_LOADED);
c7e06b28:	e3a00052 	mov	r0, #82	; 0x52
c7e06b2c:	ebffff6a 	bl	c7e068dc <bootstage_mark>

	rcode = bootm_maybe_autostart(cmdtp, argv[0]);
c7e06b30:	e1a00009 	mov	r0, r9
c7e06b34:	e5971000 	ldr	r1, [r7]
c7e06b38:	ebffef03 	bl	c7e0274c <bootm_maybe_autostart>

	if (rcode < 0)
c7e06b3c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e06b40:	aa000002 	bge	c7e06b50 <netboot_common+0x264>
		bootstage_error(BOOTSTAGE_ID_NET_DONE_ERR);
c7e06b44:	e3a00053 	mov	r0, #83	; 0x53
c7e06b48:	ebffff5e 	bl	c7e068c8 <bootstage_error>
c7e06b4c:	ea000001 	b	c7e06b58 <netboot_common+0x26c>
	else
		bootstage_mark(BOOTSTAGE_ID_NET_DONE);
c7e06b50:	e3a00054 	mov	r0, #84	; 0x54
c7e06b54:	ebffff60 	bl	c7e068dc <bootstage_mark>
	return rcode;
}
c7e06b58:	e1a00004 	mov	r0, r4
c7e06b5c:	e28dd024 	add	sp, sp, #36	; 0x24
c7e06b60:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e06b64:	c7e2de92 	.word	0xc7e2de92
c7e06b68:	c7e353cc 	.word	0xc7e353cc
c7e06b6c:	c7e748d8 	.word	0xc7e748d8
c7e06b70:	c7e729ec 	.word	0xc7e729ec
c7e06b74:	c7e30fa8 	.word	0xc7e30fa8
c7e06b78:	c7e729f0 	.word	0xc7e729f0
c7e06b7c:	c7e30fb2 	.word	0xc7e30fb2
c7e06b80:	c7e7486c 	.word	0xc7e7486c
c7e06b84:	c7e2f11b 	.word	0xc7e2f11b
c7e06b88:	c7e7488c 	.word	0xc7e7488c
c7e06b8c:	c7e30fba 	.word	0xc7e30fba
c7e06b90:	c7e729b8 	.word	0xc7e729b8
c7e06b94:	c7e2e352 	.word	0xc7e2e352
c7e06b98:	c7e729f4 	.word	0xc7e729f4
c7e06b9c:	c7e2f10c 	.word	0xc7e2f10c
c7e06ba0:	c7e748cc 	.word	0xc7e748cc
c7e06ba4:	c7e30fc3 	.word	0xc7e30fc3
c7e06ba8:	c7e7484c 	.word	0xc7e7484c
c7e06bac:	c7e30fc9 	.word	0xc7e30fc9

c7e06bb0 <do_nfs>:
);
#endif

#if defined(CONFIG_CMD_NFS)
int do_nfs (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e06bb0:	e1a01000 	mov	r1, r0
	return netboot_common(NFS, cmdtp, argc, argv);
c7e06bb4:	e3a00007 	mov	r0, #7	; 0x7
c7e06bb8:	eaffff4b 	b	c7e068ec <netboot_common>

c7e06bbc <do_tftpb>:
	"boot image via network using BOOTP/TFTP protocol",
	"[loadAddress] [[hostIPaddr:]bootfilename]"
);

int do_tftpb (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e06bbc:	e1a01000 	mov	r1, r0
	int ret;

	bootstage_mark_name(BOOTSTAGE_KERNELREAD_START, "tftp_start");
	ret = netboot_common(TFTPGET, cmdtp, argc, argv);
c7e06bc0:	e3a00003 	mov	r0, #3	; 0x3
c7e06bc4:	eaffff48 	b	c7e068ec <netboot_common>

c7e06bc8 <do_bootp>:
#include <net.h>

static int netboot_common(enum proto_t, cmd_tbl_t *, int, char * const []);

int do_bootp (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e06bc8:	e1a01000 	mov	r1, r0
	return netboot_common (BOOTP, cmdtp, argc, argv);
c7e06bcc:	e3a00000 	mov	r0, #0	; 0x0
c7e06bd0:	eaffff45 	b	c7e068ec <netboot_common>

c7e06bd4 <get_env_id>:
 * example in NetInitLoop()
 */
static int env_id = 1;

int get_env_id(void)
{
c7e06bd4:	e59f3004 	ldr	r3, [pc, #4]	; c7e06be0 <get_env_id+0xc>
	return env_id;
}
c7e06bd8:	e5930000 	ldr	r0, [r3]
c7e06bdc:	e12fff1e 	bx	lr
c7e06be0:	c7e352f0 	.word	0xc7e352f0

c7e06be4 <do_env>:

static int do_env(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	cmd_tbl_t *cp;

	if (argc < 2)
c7e06be4:	e3520001 	cmp	r2, #1	; 0x1
	fixup_cmdtable(cmd_env_sub, ARRAY_SIZE(cmd_env_sub));
}
#endif

static int do_env(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e06be8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e06bec:	e1a05002 	mov	r5, r2
c7e06bf0:	e1a06000 	mov	r6, r0
c7e06bf4:	e1a07001 	mov	r7, r1
	cmd_tbl_t *cp;

	if (argc < 2)
c7e06bf8:	da00000d 	ble	c7e06c34 <do_env+0x50>

	/* drop initial "env" arg */
	argc--;
	argv++;

	cp = find_cmd_tbl(argv[0], cmd_env_sub, ARRAY_SIZE(cmd_env_sub));
c7e06bfc:	e5930004 	ldr	r0, [r3, #4]
c7e06c00:	e59f1034 	ldr	r1, [pc, #52]	; c7e06c3c <do_env+0x58>
c7e06c04:	e3a02009 	mov	r2, #9	; 0x9
	if (argc < 2)
		return CMD_RET_USAGE;

	/* drop initial "env" arg */
	argc--;
	argv++;
c7e06c08:	e2834004 	add	r4, r3, #4	; 0x4

	cp = find_cmd_tbl(argv[0], cmd_env_sub, ARRAY_SIZE(cmd_env_sub));
c7e06c0c:	eb000620 	bl	c7e08494 <find_cmd_tbl>

	if (cp)
c7e06c10:	e250c000 	subs	ip, r0, #0	; 0x0
c7e06c14:	0a000006 	beq	c7e06c34 <do_env+0x50>
		return cp->cmd(cmdtp, flag, argc, argv);
c7e06c18:	e1a00006 	mov	r0, r6
c7e06c1c:	e1a01007 	mov	r1, r7
c7e06c20:	e2452001 	sub	r2, r5, #1	; 0x1
c7e06c24:	e1a03004 	mov	r3, r4
c7e06c28:	e1a0e00f 	mov	lr, pc
c7e06c2c:	e59cf00c 	ldr	pc, [ip, #12]
c7e06c30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e06c34:	e3e00000 	mvn	r0, #0	; 0x0

	return CMD_RET_USAGE;
}
c7e06c38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e06c3c:	c7e352f4 	.word	0xc7e352f4

c7e06c40 <do_env_delete>:
	return cmd_usage(cmdtp);
}

static int do_env_delete(cmd_tbl_t *cmdtp, int flag,
			 int argc, char * const argv[])
{
c7e06c40:	e92d4010 	push	{r4, lr}
	printf("Not implemented yet\n");
c7e06c44:	e59f0008 	ldr	r0, [pc, #8]	; c7e06c54 <do_env_delete+0x14>
c7e06c48:	eb000782 	bl	c7e08a58 <printf>
	return 0;
}
c7e06c4c:	e3a00000 	mov	r0, #0	; 0x0
c7e06c50:	e8bd8010 	pop	{r4, pc}
c7e06c54:	c7e310cb 	.word	0xc7e310cb

c7e06c58 <do_env_import>:
 *	size:	length of input data; if missing, proper '\0'
 *		termination is mandatory
 */
static int do_env_import(cmd_tbl_t *cmdtp, int flag,
			 int argc, char * const argv[])
{
c7e06c58:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
	int	chk = 0;
	int	fmt = 0;
	int	del = 0;
	size_t	size;

	cmd = *argv;
c7e06c5c:	e3a0a000 	mov	sl, #0	; 0x0
 *	size:	length of input data; if missing, proper '\0'
 *		termination is mandatory
 */
static int do_env_import(cmd_tbl_t *cmdtp, int flag,
			 int argc, char * const argv[])
{
c7e06c60:	e1a06002 	mov	r6, r2
c7e06c64:	e24dd01c 	sub	sp, sp, #28	; 0x1c
c7e06c68:	e1a04003 	mov	r4, r3
	int	chk = 0;
	int	fmt = 0;
	int	del = 0;
	size_t	size;

	cmd = *argv;
c7e06c6c:	e5931000 	ldr	r1, [r3]
c7e06c70:	e3a0700a 	mov	r7, #10	; 0xa
c7e06c74:	e1a0200a 	mov	r2, sl
c7e06c78:	e1a0900a 	mov	r9, sl
c7e06c7c:	ea00001d 	b	c7e06cf8 <do_env_import+0xa0>

	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;
		while (*++arg) {
			switch (*arg) {
c7e06c80:	e3530063 	cmp	r3, #99	; 0x63
c7e06c84:	0a00000e 	beq	c7e06cc4 <do_env_import+0x6c>
c7e06c88:	8a000002 	bhi	c7e06c98 <do_env_import+0x40>
c7e06c8c:	e3530062 	cmp	r3, #98	; 0x62
c7e06c90:	1a000075 	bne	c7e06e6c <do_env_import+0x214>
c7e06c94:	ea000006 	b	c7e06cb4 <do_env_import+0x5c>
c7e06c98:	e3530064 	cmp	r3, #100	; 0x64
c7e06c9c:	0a000002 	beq	c7e06cac <do_env_import+0x54>
c7e06ca0:	e3530074 	cmp	r3, #116	; 0x74
c7e06ca4:	1a000070 	bne	c7e06e6c <do_env_import+0x214>
c7e06ca8:	ea00000b 	b	c7e06cdc <do_env_import+0x84>
c7e06cac:	e3a09001 	mov	r9, #1	; 0x1
c7e06cb0:	ea00000d 	b	c7e06cec <do_env_import+0x94>
			case 'b':		/* raw binary format */
				if (fmt++)
c7e06cb4:	e3520000 	cmp	r2, #0	; 0x0
c7e06cb8:	1a000068 	bne	c7e06e60 <do_env_import+0x208>
					goto sep_err;
c7e06cbc:	e1a07002 	mov	r7, r2
c7e06cc0:	ea000008 	b	c7e06ce8 <do_env_import+0x90>
				sep = '\0';
				break;
			case 'c':		/* external checksum format */
				if (fmt++)
c7e06cc4:	e3520000 	cmp	r2, #0	; 0x0
c7e06cc8:	1a000064 	bne	c7e06e60 <do_env_import+0x208>
					goto sep_err;
c7e06ccc:	e1a07002 	mov	r7, r2
c7e06cd0:	e2822001 	add	r2, r2, #1	; 0x1
c7e06cd4:	e1a0a002 	mov	sl, r2
c7e06cd8:	ea000003 	b	c7e06cec <do_env_import+0x94>
				sep = '\0';
				chk = 1;
				break;
			case 't':		/* text format */
				if (fmt++)
c7e06cdc:	e3520000 	cmp	r2, #0	; 0x0
c7e06ce0:	1a00005e 	bne	c7e06e60 <do_env_import+0x208>
					goto sep_err;
c7e06ce4:	e3a0700a 	mov	r7, #10	; 0xa
c7e06ce8:	e2822001 	add	r2, r2, #1	; 0x1

	cmd = *argv;

	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;
		while (*++arg) {
c7e06cec:	e5f03001 	ldrb	r3, [r0, #1]!
c7e06cf0:	e3530000 	cmp	r3, #0	; 0x0
c7e06cf4:	1affffe1 	bne	c7e06c80 <do_env_import+0x28>
	int	del = 0;
	size_t	size;

	cmd = *argv;

	while (--argc > 0 && **++argv == '-') {
c7e06cf8:	e2466001 	sub	r6, r6, #1	; 0x1
c7e06cfc:	e3560000 	cmp	r6, #0	; 0x0
c7e06d00:	da000059 	ble	c7e06e6c <do_env_import+0x214>
c7e06d04:	e5b40004 	ldr	r0, [r4, #4]!
c7e06d08:	e5d03000 	ldrb	r3, [r0]
c7e06d0c:	e353002d 	cmp	r3, #45	; 0x2d
c7e06d10:	0afffff5 	beq	c7e06cec <do_env_import+0x94>
	}

	if (argc < 1)
		return CMD_RET_USAGE;

	if (!fmt)
c7e06d14:	e3520000 	cmp	r2, #0	; 0x0
c7e06d18:	1a000001 	bne	c7e06d24 <do_env_import+0xcc>
		printf("## Warning: defaulting to text format\n");
c7e06d1c:	e59f0154 	ldr	r0, [pc, #340]	; c7e06e78 <do_env_import+0x220>
c7e06d20:	eb00074c 	bl	c7e08a58 <printf>

	addr = (char *)simple_strtoul(argv[0], NULL, 16);
c7e06d24:	e5940000 	ldr	r0, [r4]
c7e06d28:	e3a02010 	mov	r2, #16	; 0x10
c7e06d2c:	e3a01000 	mov	r1, #0	; 0x0
c7e06d30:	eb00708a 	bl	c7e22f60 <simple_strtoul>

	if (argc == 2) {
c7e06d34:	e3560002 	cmp	r6, #2	; 0x2
		return CMD_RET_USAGE;

	if (!fmt)
		printf("## Warning: defaulting to text format\n");

	addr = (char *)simple_strtoul(argv[0], NULL, 16);
c7e06d38:	e1a05000 	mov	r5, r0

	if (argc == 2) {
		size = simple_strtoul(argv[1], NULL, 16);
c7e06d3c:	11a02000 	movne	r2, r0
c7e06d40:	13a04000 	movne	r4, #0	; 0x0
	if (!fmt)
		printf("## Warning: defaulting to text format\n");

	addr = (char *)simple_strtoul(argv[0], NULL, 16);

	if (argc == 2) {
c7e06d44:	1a000005 	bne	c7e06d60 <do_env_import+0x108>
		size = simple_strtoul(argv[1], NULL, 16);
c7e06d48:	e5940004 	ldr	r0, [r4, #4]
c7e06d4c:	e3a01000 	mov	r1, #0	; 0x0
c7e06d50:	e3a02010 	mov	r2, #16	; 0x10
c7e06d54:	eb007081 	bl	c7e22f60 <simple_strtoul>
c7e06d58:	e1a04000 	mov	r4, r0
c7e06d5c:	ea000011 	b	c7e06da8 <do_env_import+0x150>
		char *s = addr;

		size = 0;

		while (size < MAX_ENV_SIZE) {
			if ((*s == sep) && (*(s+1) == '\0'))
c7e06d60:	e7d53004 	ldrb	r3, [r5, r4]
c7e06d64:	e1530007 	cmp	r3, r7
c7e06d68:	1a000002 	bne	c7e06d78 <do_env_import+0x120>
c7e06d6c:	e5d23001 	ldrb	r3, [r2, #1]
c7e06d70:	e3530000 	cmp	r3, #0	; 0x0
c7e06d74:	0a000006 	beq	c7e06d94 <do_env_import+0x13c>
				break;
			++s;
			++size;
c7e06d78:	e2844001 	add	r4, r4, #1	; 0x1
	} else {
		char *s = addr;

		size = 0;

		while (size < MAX_ENV_SIZE) {
c7e06d7c:	e3540601 	cmp	r4, #1048576	; 0x100000
			if ((*s == sep) && (*(s+1) == '\0'))
				break;
			++s;
c7e06d80:	e2822001 	add	r2, r2, #1	; 0x1
	} else {
		char *s = addr;

		size = 0;

		while (size < MAX_ENV_SIZE) {
c7e06d84:	1afffff5 	bne	c7e06d60 <do_env_import+0x108>
				break;
			++s;
			++size;
		}
		if (size == MAX_ENV_SIZE) {
			printf("## Warning: Input data exceeds %d bytes"
c7e06d88:	e59f00ec 	ldr	r0, [pc, #236]	; c7e06e7c <do_env_import+0x224>
c7e06d8c:	e1a01004 	mov	r1, r4
c7e06d90:	eb000730 	bl	c7e08a58 <printf>
				" - truncated\n", MAX_ENV_SIZE);
		}
		size += 2;
c7e06d94:	e2844002 	add	r4, r4, #2	; 0x2
		printf("## Info: input data size = %zu = 0x%zX\n", size, size);
c7e06d98:	e59f00e0 	ldr	r0, [pc, #224]	; c7e06e80 <do_env_import+0x228>
c7e06d9c:	e1a01004 	mov	r1, r4
c7e06da0:	e1a02004 	mov	r2, r4
c7e06da4:	eb00072b 	bl	c7e08a58 <printf>
	}

	if (chk) {
c7e06da8:	e35a0000 	cmp	sl, #0	; 0x0
c7e06dac:	0a00000f 	beq	c7e06df0 <do_env_import+0x198>
		uint32_t crc;
		env_t *ep = (env_t *)addr;

		size -= offsetof(env_t, data);
		memcpy(&crc, &ep->crc, sizeof(crc));
c7e06db0:	e1a01005 	mov	r1, r5
c7e06db4:	e3a02004 	mov	r2, #4	; 0x4

	if (chk) {
		uint32_t crc;
		env_t *ep = (env_t *)addr;

		size -= offsetof(env_t, data);
c7e06db8:	e2444004 	sub	r4, r4, #4	; 0x4
		memcpy(&crc, &ep->crc, sizeof(crc));

		if (crc32(0, ep->data, size) != crc) {
c7e06dbc:	e2855004 	add	r5, r5, #4	; 0x4
	if (chk) {
		uint32_t crc;
		env_t *ep = (env_t *)addr;

		size -= offsetof(env_t, data);
		memcpy(&crc, &ep->crc, sizeof(crc));
c7e06dc0:	e28d0014 	add	r0, sp, #20	; 0x14
c7e06dc4:	eb006f9c 	bl	c7e22c3c <memcpy>

		if (crc32(0, ep->data, size) != crc) {
c7e06dc8:	e3a00000 	mov	r0, #0	; 0x0
c7e06dcc:	e1a01005 	mov	r1, r5
c7e06dd0:	e1a02004 	mov	r2, r4
c7e06dd4:	eb0067ca 	bl	c7e20d04 <crc32>
c7e06dd8:	e59d3014 	ldr	r3, [sp, #20]
c7e06ddc:	e1500003 	cmp	r0, r3
c7e06de0:	0a000002 	beq	c7e06df0 <do_env_import+0x198>
			puts("## Error: bad CRC, import failed\n");
c7e06de4:	e59f0098 	ldr	r0, [pc, #152]	; c7e06e84 <do_env_import+0x22c>
c7e06de8:	eb0006ff 	bl	c7e089ec <puts>
c7e06dec:	ea000014 	b	c7e06e44 <do_env_import+0x1ec>
			return 1;
		}
		addr = (char *)ep->data;
	}

	if (himport_r(&env_htab, addr, size, sep, del ? 0 : H_NOCLEAR,
c7e06df0:	e229c001 	eor	ip, r9, #1	; 0x1
c7e06df4:	e1a02004 	mov	r2, r4
c7e06df8:	e1a01005 	mov	r1, r5
c7e06dfc:	e3a04000 	mov	r4, #0	; 0x0
c7e06e00:	e1a03007 	mov	r3, r7
c7e06e04:	e59f007c 	ldr	r0, [pc, #124]	; c7e06e88 <do_env_import+0x230>
c7e06e08:	e58dc000 	str	ip, [sp]
c7e06e0c:	e58d4004 	str	r4, [sp, #4]
c7e06e10:	e58d4008 	str	r4, [sp, #8]
c7e06e14:	e58d400c 	str	r4, [sp, #12]
c7e06e18:	eb006b47 	bl	c7e21b3c <himport_r>
c7e06e1c:	e1500004 	cmp	r0, r4
c7e06e20:	1a000009 	bne	c7e06e4c <do_env_import+0x1f4>
			0, NULL, 0 /* do_apply */) == 0) {
		error("Environment import failed: errno = %d\n", errno);
c7e06e24:	e59f3060 	ldr	r3, [pc, #96]	; c7e06e8c <do_env_import+0x234>
c7e06e28:	e59fc060 	ldr	ip, [pc, #96]	; c7e06e90 <do_env_import+0x238>
c7e06e2c:	e5931000 	ldr	r1, [r3]
c7e06e30:	e59f005c 	ldr	r0, [pc, #92]	; c7e06e94 <do_env_import+0x23c>
c7e06e34:	e59f205c 	ldr	r2, [pc, #92]	; c7e06e98 <do_env_import+0x240>
c7e06e38:	e59f305c 	ldr	r3, [pc, #92]	; c7e06e9c <do_env_import+0x244>
c7e06e3c:	e58dc000 	str	ip, [sp]
c7e06e40:	eb000704 	bl	c7e08a58 <printf>
c7e06e44:	e3a00001 	mov	r0, #1	; 0x1
c7e06e48:	ea000008 	b	c7e06e70 <do_env_import+0x218>
		return 1;
	}
	gd->flags |= GD_FLG_ENV_READY;
c7e06e4c:	e5983004 	ldr	r3, [r8, #4]
c7e06e50:	e1a00004 	mov	r0, r4
c7e06e54:	e3833080 	orr	r3, r3, #128	; 0x80
c7e06e58:	e5883004 	str	r3, [r8, #4]
c7e06e5c:	ea000003 	b	c7e06e70 <do_env_import+0x218>

	return 0;

sep_err:
	printf("## %s: only one of \"-b\", \"-c\" or \"-t\" allowed\n",
c7e06e60:	e59f0038 	ldr	r0, [pc, #56]	; c7e06ea0 <do_env_import+0x248>
c7e06e64:	eb0006fb 	bl	c7e08a58 <printf>
c7e06e68:	eafffff5 	b	c7e06e44 <do_env_import+0x1ec>
		cmd);
	return 1;
c7e06e6c:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e06e70:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e06e74:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e06e78:	c7e310e0 	.word	0xc7e310e0
c7e06e7c:	c7e31107 	.word	0xc7e31107
c7e06e80:	c7e3113c 	.word	0xc7e3113c
c7e06e84:	c7e31164 	.word	0xc7e31164
c7e06e88:	c7e357e4 	.word	0xc7e357e4
c7e06e8c:	c7e72300 	.word	0xc7e72300
c7e06e90:	c7e2b1bc 	.word	0xc7e2b1bc
c7e06e94:	c7e31186 	.word	0xc7e31186
c7e06e98:	c7e311c3 	.word	0xc7e311c3
c7e06e9c:	000003bd 	.word	0x000003bd
c7e06ea0:	c7e311d0 	.word	0xc7e311d0

c7e06ea4 <do_env_default>:
}

#ifndef CONFIG_SPL_BUILD
static int do_env_default(cmd_tbl_t *cmdtp, int __flag,
			  int argc, char * const argv[])
{
c7e06ea4:	e92d4010 	push	{r4, lr}
c7e06ea8:	e1a01003 	mov	r1, r3
c7e06eac:	e1a04000 	mov	r4, r0
c7e06eb0:	e1a00002 	mov	r0, r2
c7e06eb4:	e3a02000 	mov	r2, #0	; 0x0
c7e06eb8:	ea000008 	b	c7e06ee0 <do_env_default+0x3c>
	debug("Initial value for argc=%d\n", argc);
	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;

		while (*++arg) {
			switch (*arg) {
c7e06ebc:	e3530061 	cmp	r3, #97	; 0x61
c7e06ec0:	0a000002 	beq	c7e06ed0 <do_env_default+0x2c>
c7e06ec4:	e3530066 	cmp	r3, #102	; 0x66
c7e06ec8:	1a00001b 	bne	c7e06f3c <do_env_default+0x98>
c7e06ecc:	ea000000 	b	c7e06ed4 <do_env_default+0x30>
				break;
			case 'f':		/* force */
				flag |= H_FORCE;
				break;
			default:
				return cmd_usage(cmdtp);
c7e06ed0:	e3a02001 	mov	r2, #1	; 0x1

	debug("Initial value for argc=%d\n", argc);
	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;

		while (*++arg) {
c7e06ed4:	e5fc3001 	ldrb	r3, [ip, #1]!
c7e06ed8:	e3530000 	cmp	r3, #0	; 0x0
c7e06edc:	1afffff6 	bne	c7e06ebc <do_env_default+0x18>
			  int argc, char * const argv[])
{
	int all = 0, flag = 0;

	debug("Initial value for argc=%d\n", argc);
	while (--argc > 0 && **++argv == '-') {
c7e06ee0:	e2400001 	sub	r0, r0, #1	; 0x1
c7e06ee4:	e3500000 	cmp	r0, #0	; 0x0
c7e06ee8:	da000003 	ble	c7e06efc <do_env_default+0x58>
c7e06eec:	e5b1c004 	ldr	ip, [r1, #4]!
c7e06ef0:	e5dc3000 	ldrb	r3, [ip]
c7e06ef4:	e353002d 	cmp	r3, #45	; 0x2d
c7e06ef8:	0afffff5 	beq	c7e06ed4 <do_env_default+0x30>
				return cmd_usage(cmdtp);
			}
		}
	}
	debug("Final value for argc=%d\n", argc);
	if (all && (argc == 0)) {
c7e06efc:	e3500000 	cmp	r0, #0	; 0x0
c7e06f00:	13a03000 	movne	r3, #0	; 0x0
c7e06f04:	02023001 	andeq	r3, r2, #1	; 0x1
c7e06f08:	e3530000 	cmp	r3, #0	; 0x0
c7e06f0c:	0a000002 	beq	c7e06f1c <do_env_default+0x78>
		/* Reset the whole environment */
		set_default_env("## Resetting to default environment\n");
c7e06f10:	e59f0038 	ldr	r0, [pc, #56]	; c7e06f50 <do_env_default+0xac>
c7e06f14:	eb000bfe 	bl	c7e09f14 <set_default_env>
c7e06f18:	ea00000a 	b	c7e06f48 <do_env_default+0xa4>
		return 0;
	}
	if (!all && (argc > 0)) {
c7e06f1c:	e2223001 	eor	r3, r2, #1	; 0x1
c7e06f20:	e3500000 	cmp	r0, #0	; 0x0
c7e06f24:	d3a03000 	movle	r3, #0	; 0x0
c7e06f28:	c2033001 	andgt	r3, r3, #1	; 0x1
c7e06f2c:	e3530000 	cmp	r3, #0	; 0x0
c7e06f30:	0a000001 	beq	c7e06f3c <do_env_default+0x98>
		/* Reset individual variables */
		set_default_vars(argc, argv);
c7e06f34:	eb000be8 	bl	c7e09edc <set_default_vars>
c7e06f38:	ea000002 	b	c7e06f48 <do_env_default+0xa4>
		return 0;
	}

	return cmd_usage(cmdtp);
c7e06f3c:	e1a00004 	mov	r0, r4
}
c7e06f40:	e8bd4010 	pop	{r4, lr}
		/* Reset individual variables */
		set_default_vars(argc, argv);
		return 0;
	}

	return cmd_usage(cmdtp);
c7e06f44:	ea00053b 	b	c7e08438 <cmd_usage>
}
c7e06f48:	e3a00000 	mov	r0, #0	; 0x0
c7e06f4c:	e8bd8010 	pop	{r4, pc}
c7e06f50:	c7e311ff 	.word	0xc7e311ff

c7e06f54 <envmatch>:
 * s1 is either a simple 'name', or a 'name=value' pair.
 * i2 is the environment index for a 'name2=value2' pair.
 * If the names match, return the index for the value2, else -1.
 */
int envmatch(uchar *s1, int i2)
{
c7e06f54:	e92d4070 	push	{r4, r5, r6, lr}
c7e06f58:	e1a06000 	mov	r6, r0
c7e06f5c:	e1a05001 	mov	r5, r1
c7e06f60:	ea000002 	b	c7e06f70 <envmatch+0x1c>
	while (*s1 == env_get_char(i2++))
		if (*s1++ == '=')
c7e06f64:	e353003d 	cmp	r3, #61	; 0x3d
c7e06f68:	0a00000f 	beq	c7e06fac <envmatch+0x58>
c7e06f6c:	e1a05004 	mov	r5, r4
 * i2 is the environment index for a 'name2=value2' pair.
 * If the names match, return the index for the value2, else -1.
 */
int envmatch(uchar *s1, int i2)
{
	while (*s1 == env_get_char(i2++))
c7e06f70:	e1a00005 	mov	r0, r5
c7e06f74:	e5d64000 	ldrb	r4, [r6]
c7e06f78:	eb000bcb 	bl	c7e09eac <env_get_char>
c7e06f7c:	e1540000 	cmp	r4, r0
c7e06f80:	e5d63000 	ldrb	r3, [r6]
c7e06f84:	e2854001 	add	r4, r5, #1	; 0x1
		if (*s1++ == '=')
c7e06f88:	e2866001 	add	r6, r6, #1	; 0x1
 * i2 is the environment index for a 'name2=value2' pair.
 * If the names match, return the index for the value2, else -1.
 */
int envmatch(uchar *s1, int i2)
{
	while (*s1 == env_get_char(i2++))
c7e06f8c:	0afffff4 	beq	c7e06f64 <envmatch+0x10>
		if (*s1++ == '=')
			return i2;

	if (*s1 == '\0' && env_get_char(i2-1) == '=')
c7e06f90:	e3530000 	cmp	r3, #0	; 0x0
c7e06f94:	1a000003 	bne	c7e06fa8 <envmatch+0x54>
c7e06f98:	e1a00005 	mov	r0, r5
c7e06f9c:	eb000bc2 	bl	c7e09eac <env_get_char>
c7e06fa0:	e350003d 	cmp	r0, #61	; 0x3d
c7e06fa4:	0a000000 	beq	c7e06fac <envmatch+0x58>
c7e06fa8:	e3e04000 	mvn	r4, #0	; 0x0
		return i2;

	return -1;
}
c7e06fac:	e1a00004 	mov	r0, r4
c7e06fb0:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e06fb4 <getenv_f>:

/*
 * Look up variable from environment for restricted C runtime env.
 */
int getenv_f(const char *name, char *buf, unsigned len)
{
c7e06fb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e06fb8:	e1a09000 	mov	r9, r0
c7e06fbc:	e1a07001 	mov	r7, r1
c7e06fc0:	e1a0a002 	mov	sl, r2
c7e06fc4:	e3a05000 	mov	r5, #0	; 0x0
c7e06fc8:	ea00001f 	b	c7e0704c <getenv_f+0x98>

	for (i = 0; env_get_char(i) != '\0'; i = nxt + 1) {
		int val, n;

		for (nxt = i; env_get_char(nxt) != '\0'; ++nxt) {
			if (nxt >= CONFIG_ENV_SIZE)
c7e06fcc:	e3540901 	cmp	r4, #16384	; 0x4000
c7e06fd0:	aa000022 	bge	c7e07060 <getenv_f+0xac>
	int i, nxt;

	for (i = 0; env_get_char(i) != '\0'; i = nxt + 1) {
		int val, n;

		for (nxt = i; env_get_char(nxt) != '\0'; ++nxt) {
c7e06fd4:	e2844001 	add	r4, r4, #1	; 0x1
c7e06fd8:	e1a00004 	mov	r0, r4
c7e06fdc:	eb000bb2 	bl	c7e09eac <env_get_char>
c7e06fe0:	e2506000 	subs	r6, r0, #0	; 0x0
c7e06fe4:	1afffff8 	bne	c7e06fcc <getenv_f+0x18>
			if (nxt >= CONFIG_ENV_SIZE)
				return -1;
		}

		val = envmatch((uchar *)name, i);
c7e06fe8:	e1a01005 	mov	r1, r5
c7e06fec:	e1a00009 	mov	r0, r9
c7e06ff0:	ebffffd7 	bl	c7e06f54 <envmatch>
		if (val < 0)
c7e06ff4:	e2505000 	subs	r5, r0, #0	; 0x0
c7e06ff8:	ba000012 	blt	c7e07048 <getenv_f+0x94>
			continue;
c7e06ffc:	e1a04006 	mov	r4, r6
c7e07000:	ea000004 	b	c7e07018 <getenv_f+0x64>

		/* found; copy out */
		for (n = 0; n < len; ++n, ++buf) {
			*buf = env_get_char(val++);
c7e07004:	eb000ba8 	bl	c7e09eac <env_get_char>
			if (*buf == '\0')
c7e07008:	e3500000 	cmp	r0, #0	; 0x0
		if (val < 0)
			continue;

		/* found; copy out */
		for (n = 0; n < len; ++n, ++buf) {
			*buf = env_get_char(val++);
c7e0700c:	e7c70004 	strb	r0, [r7, r4]
			if (*buf == '\0')
c7e07010:	0a000013 	beq	c7e07064 <getenv_f+0xb0>
		val = envmatch((uchar *)name, i);
		if (val < 0)
			continue;

		/* found; copy out */
		for (n = 0; n < len; ++n, ++buf) {
c7e07014:	e2844001 	add	r4, r4, #1	; 0x1
c7e07018:	e154000a 	cmp	r4, sl

/*
 * Look up variable from environment for restricted C runtime env.
 */
int getenv_f(const char *name, char *buf, unsigned len)
{
c7e0701c:	e0840005 	add	r0, r4, r5
c7e07020:	e0872004 	add	r2, r7, r4
		val = envmatch((uchar *)name, i);
		if (val < 0)
			continue;

		/* found; copy out */
		for (n = 0; n < len; ++n, ++buf) {
c7e07024:	3afffff6 	bcc	c7e07004 <getenv_f+0x50>
			*buf = env_get_char(val++);
			if (*buf == '\0')
				return n;
		}

		if (n)
c7e07028:	e3540000 	cmp	r4, #0	; 0x0
			*--buf = '\0';
c7e0702c:	13a03000 	movne	r3, #0	; 0x0
c7e07030:	15423001 	strbne	r3, [r2, #-1]

		printf("env_buf [%d bytes] too small for value of \"%s\"\n",
c7e07034:	e1a0100a 	mov	r1, sl
c7e07038:	e1a02009 	mov	r2, r9
c7e0703c:	e59f0028 	ldr	r0, [pc, #40]	; c7e0706c <getenv_f+0xb8>
c7e07040:	eb000684 	bl	c7e08a58 <printf>
c7e07044:	ea000006 	b	c7e07064 <getenv_f+0xb0>
 */
int getenv_f(const char *name, char *buf, unsigned len)
{
	int i, nxt;

	for (i = 0; env_get_char(i) != '\0'; i = nxt + 1) {
c7e07048:	e2845001 	add	r5, r4, #1	; 0x1
c7e0704c:	e1a00005 	mov	r0, r5
c7e07050:	eb000b95 	bl	c7e09eac <env_get_char>
c7e07054:	e3500000 	cmp	r0, #0	; 0x0
c7e07058:	11a04005 	movne	r4, r5
c7e0705c:	1affffdd 	bne	c7e06fd8 <getenv_f+0x24>
c7e07060:	e3e04000 	mvn	r4, #0	; 0x0

		return n;
	}

	return -1;
}
c7e07064:	e1a00004 	mov	r0, r4
c7e07068:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e0706c:	c7e31224 	.word	0xc7e31224

c7e07070 <do_env_save>:

#ifndef CONFIG_SPL_BUILD
#if defined(CONFIG_CMD_SAVEENV) && !defined(CONFIG_ENV_IS_NOWHERE)
int do_env_save(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	printf("Saving Environment to %s...\n", env_name_spec);
c7e07070:	e59f301c 	ldr	r3, [pc, #28]	; c7e07094 <do_env_save+0x24>
}

#ifndef CONFIG_SPL_BUILD
#if defined(CONFIG_CMD_SAVEENV) && !defined(CONFIG_ENV_IS_NOWHERE)
int do_env_save(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e07074:	e92d4010 	push	{r4, lr}
	printf("Saving Environment to %s...\n", env_name_spec);
c7e07078:	e5931000 	ldr	r1, [r3]
c7e0707c:	e59f0014 	ldr	r0, [pc, #20]	; c7e07098 <do_env_save+0x28>
c7e07080:	eb000674 	bl	c7e08a58 <printf>

	return saveenv() ? 1 : 0;
c7e07084:	eb000ca0 	bl	c7e0a30c <saveenv>
}
c7e07088:	e2500000 	subs	r0, r0, #0	; 0x0
c7e0708c:	13a00001 	movne	r0, #1	; 0x1
c7e07090:	e8bd8010 	pop	{r4, pc}
c7e07094:	c7e357f8 	.word	0xc7e357f8
c7e07098:	c7e31254 	.word	0xc7e31254

c7e0709c <getenv>:
 * Look up variable from environment,
 * return address of storage for that variable,
 * or NULL if not found
 */
char *getenv(const char *name)
{
c7e0709c:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (gd->flags & GD_FLG_ENV_READY) { /* after import into hashtable */
c7e070a0:	e5983004 	ldr	r3, [r8, #4]
c7e070a4:	e3130080 	tst	r3, #128	; 0x80
c7e070a8:	0a00000d 	beq	c7e070e4 <getenv+0x48>
		ENTRY e, *ep;

		WATCHDOG_RESET();

		e.key	= name;
		e.data	= NULL;
c7e070ac:	e3a02000 	mov	r2, #0	; 0x0
	if (gd->flags & GD_FLG_ENV_READY) { /* after import into hashtable */
		ENTRY e, *ep;

		WATCHDOG_RESET();

		e.key	= name;
c7e070b0:	e58d000c 	str	r0, [sp, #12]
		e.data	= NULL;
c7e070b4:	e58d2010 	str	r2, [sp, #16]
		hsearch_r(e, FIND, &ep, &env_htab);
c7e070b8:	e28d300c 	add	r3, sp, #12	; 0xc
c7e070bc:	e59fc044 	ldr	ip, [pc, #68]	; c7e07108 <getenv+0x6c>
c7e070c0:	e8930003 	ldm	r3, {r0, r1}
c7e070c4:	e28d3014 	add	r3, sp, #20	; 0x14
c7e070c8:	e58dc000 	str	ip, [sp]
c7e070cc:	eb0069b5 	bl	c7e217a8 <hsearch_r>

		return ep ? ep->data : NULL;
c7e070d0:	e59d0014 	ldr	r0, [sp, #20]
c7e070d4:	e3500000 	cmp	r0, #0	; 0x0
c7e070d8:	15900004 	ldrne	r0, [r0, #4]
c7e070dc:	1a000007 	bne	c7e07100 <getenv+0x64>
c7e070e0:	ea000005 	b	c7e070fc <getenv+0x60>
	}

	/* restricted capabilities before import */
	if (getenv_f(name, (char *)(gd->env_buf), sizeof(gd->env_buf)) > 0)
c7e070e4:	e2881058 	add	r1, r8, #88	; 0x58
c7e070e8:	e3a02020 	mov	r2, #32	; 0x20
c7e070ec:	ebffffb0 	bl	c7e06fb4 <getenv_f>
c7e070f0:	e3500000 	cmp	r0, #0	; 0x0
		return (char *)(gd->env_buf);
c7e070f4:	c2880058 	addgt	r0, r8, #88	; 0x58

		return ep ? ep->data : NULL;
	}

	/* restricted capabilities before import */
	if (getenv_f(name, (char *)(gd->env_buf), sizeof(gd->env_buf)) > 0)
c7e070f8:	ca000000 	bgt	c7e07100 <getenv+0x64>
		return (char *)(gd->env_buf);
c7e070fc:	e3a00000 	mov	r0, #0	; 0x0

	return NULL;
}
c7e07100:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e07104:	e8bd8000 	pop	{pc}
c7e07108:	c7e357e4 	.word	0xc7e357e4

c7e0710c <getenv_ulong>:
 * @param default_val	Default value to return if the variable is not
 *			found
 * @return the decoded value, or default_val if not found
 */
ulong getenv_ulong(const char *name, int base, ulong default_val)
{
c7e0710c:	e92d4070 	push	{r4, r5, r6, lr}
c7e07110:	e1a05001 	mov	r5, r1
c7e07114:	e1a04002 	mov	r4, r2
	/*
	 * We can use getenv() here, even before relocation, since the
	 * environment variable value is an integer and thus short.
	 */
	const char *str = getenv(name);
c7e07118:	ebffffdf 	bl	c7e0709c <getenv>

	return str ? simple_strtoul(str, NULL, base) : default_val;
c7e0711c:	e3500000 	cmp	r0, #0	; 0x0
c7e07120:	0a000003 	beq	c7e07134 <getenv_ulong+0x28>
c7e07124:	e1a02005 	mov	r2, r5
c7e07128:	e3a01000 	mov	r1, #0	; 0x0
}
c7e0712c:	e8bd4070 	pop	{r4, r5, r6, lr}
	 * We can use getenv() here, even before relocation, since the
	 * environment variable value is an integer and thus short.
	 */
	const char *str = getenv(name);

	return str ? simple_strtoul(str, NULL, base) : default_val;
c7e07130:	ea006f8a 	b	c7e22f60 <simple_strtoul>
}
c7e07134:	e1a00004 	mov	r0, r4
c7e07138:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0713c <env_print>:
 * Command interface: print one or all environment variables
 *
 * Returns 0 in case of error, or length of printed string
 */
static int env_print(char *name)
{
c7e0713c:	e92d4010 	push	{r4, lr}
	char *res = NULL;
c7e07140:	e3a02000 	mov	r2, #0	; 0x0
 * Command interface: print one or all environment variables
 *
 * Returns 0 in case of error, or length of printed string
 */
static int env_print(char *name)
{
c7e07144:	e24dd018 	sub	sp, sp, #24	; 0x18
	char *res = NULL;
	size_t len;

	if (name) {		/* print a single name */
c7e07148:	e250c000 	subs	ip, r0, #0	; 0x0
 *
 * Returns 0 in case of error, or length of printed string
 */
static int env_print(char *name)
{
	char *res = NULL;
c7e0714c:	e58d2014 	str	r2, [sp, #20]
c7e07150:	e59fe084 	ldr	lr, [pc, #132]	; c7e071dc <env_print+0xa0>
	size_t len;

	if (name) {		/* print a single name */
c7e07154:	0a000010 	beq	c7e0719c <env_print+0x60>
		ENTRY e, *ep;

		e.key = name;
c7e07158:	e58dc008 	str	ip, [sp, #8]
		e.data = NULL;
c7e0715c:	e58d200c 	str	r2, [sp, #12]
		hsearch_r(e, FIND, &ep, &env_htab);
c7e07160:	e28d3008 	add	r3, sp, #8	; 0x8
c7e07164:	e8930003 	ldm	r3, {r0, r1}
c7e07168:	e28d3010 	add	r3, sp, #16	; 0x10
c7e0716c:	e58de000 	str	lr, [sp]
c7e07170:	eb00698c 	bl	c7e217a8 <hsearch_r>
		if (ep == NULL)
c7e07174:	e59d1010 	ldr	r1, [sp, #16]
c7e07178:	e3510000 	cmp	r1, #0	; 0x0
c7e0717c:	01a04001 	moveq	r4, r1
c7e07180:	0a000012 	beq	c7e071d0 <env_print+0x94>
			return 0;
		len = printf("%s=%s\n", ep->key, ep->data);
c7e07184:	e5912004 	ldr	r2, [r1, #4]
c7e07188:	e59f0050 	ldr	r0, [pc, #80]	; c7e071e0 <env_print+0xa4>
c7e0718c:	e5911000 	ldr	r1, [r1]
c7e07190:	eb000630 	bl	c7e08a58 <printf>
c7e07194:	e1a04000 	mov	r4, r0
c7e07198:	ea00000c 	b	c7e071d0 <env_print+0x94>
		return len;
	}

	/* print whole list */
	len = hexport_r(&env_htab, '\n', &res, 0, 0, NULL);
c7e0719c:	e1a0000e 	mov	r0, lr
c7e071a0:	e1a0300c 	mov	r3, ip
c7e071a4:	e3a0100a 	mov	r1, #10	; 0xa
c7e071a8:	e28d2014 	add	r2, sp, #20	; 0x14
c7e071ac:	e58dc000 	str	ip, [sp]
c7e071b0:	e58dc004 	str	ip, [sp, #4]
c7e071b4:	eb00689d 	bl	c7e21430 <hexport_r>

	if (len > 0) {
c7e071b8:	e2504000 	subs	r4, r0, #0	; 0x0
c7e071bc:	0a000003 	beq	c7e071d0 <env_print+0x94>
		puts(res);
c7e071c0:	e59d0014 	ldr	r0, [sp, #20]
c7e071c4:	eb000608 	bl	c7e089ec <puts>
		free(res);
c7e071c8:	e59d0014 	ldr	r0, [sp, #20]
c7e071cc:	eb000763 	bl	c7e08f60 <free>
		return len;
	}

	/* should never happen */
	return 0;
}
c7e071d0:	e1a00004 	mov	r0, r4
c7e071d4:	e28dd018 	add	sp, sp, #24	; 0x18
c7e071d8:	e8bd8010 	pop	{r4, pc}
c7e071dc:	c7e357e4 	.word	0xc7e357e4
c7e071e0:	c7e31271 	.word	0xc7e31271

c7e071e4 <do_env_print>:
int do_env_print (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	int i;
	int rcode = 0;

	if (argc == 1) {
c7e071e4:	e3520001 	cmp	r2, #1	; 0x1
	/* should never happen */
	return 0;
}

int do_env_print (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e071e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e071ec:	e1a07002 	mov	r7, r2
	int i;
	int rcode = 0;

	if (argc == 1) {
c7e071f0:	11a05003 	movne	r5, r3
c7e071f4:	13a06001 	movne	r6, #1	; 0x1
c7e071f8:	13a04000 	movne	r4, #0	; 0x0
c7e071fc:	1a000013 	bne	c7e07250 <do_env_print+0x6c>
		/* print all env vars */
		rcode = env_print(NULL);
c7e07200:	e3a00000 	mov	r0, #0	; 0x0
c7e07204:	ebffffcc 	bl	c7e0713c <env_print>
		if (!rcode)
c7e07208:	e3500000 	cmp	r0, #0	; 0x0
c7e0720c:	01a04007 	moveq	r4, r7
c7e07210:	0a000011 	beq	c7e0725c <do_env_print+0x78>
			return 1;
		printf("\nEnvironment size: %d/%ld bytes\n",
c7e07214:	e1a01000 	mov	r1, r0
c7e07218:	e59f2044 	ldr	r2, [pc, #68]	; c7e07264 <do_env_print+0x80>
c7e0721c:	e59f0044 	ldr	r0, [pc, #68]	; c7e07268 <do_env_print+0x84>
c7e07220:	eb00060c 	bl	c7e08a58 <printf>
c7e07224:	e3a04000 	mov	r4, #0	; 0x0
c7e07228:	ea00000b 	b	c7e0725c <do_env_print+0x78>
		return 0;
	}

	/* print selected env vars */
	for (i = 1; i < argc; ++i) {
		int rc = env_print(argv[i]);
c7e0722c:	e5950004 	ldr	r0, [r5, #4]
c7e07230:	ebffffc1 	bl	c7e0713c <env_print>
		if (!rc) {
c7e07234:	e3500000 	cmp	r0, #0	; 0x0
c7e07238:	1a000003 	bne	c7e0724c <do_env_print+0x68>
			printf("## Error: \"%s\" not defined\n", argv[i]);
c7e0723c:	e5951004 	ldr	r1, [r5, #4]
c7e07240:	e59f0024 	ldr	r0, [pc, #36]	; c7e0726c <do_env_print+0x88>
c7e07244:	eb000603 	bl	c7e08a58 <printf>
			++rcode;
c7e07248:	e2844001 	add	r4, r4, #1	; 0x1
			rcode, (ulong)ENV_SIZE);
		return 0;
	}

	/* print selected env vars */
	for (i = 1; i < argc; ++i) {
c7e0724c:	e2855004 	add	r5, r5, #4	; 0x4
c7e07250:	e1560007 	cmp	r6, r7
c7e07254:	e2866001 	add	r6, r6, #1	; 0x1
c7e07258:	bafffff3 	blt	c7e0722c <do_env_print+0x48>
			++rcode;
		}
	}

	return rcode;
}
c7e0725c:	e1a00004 	mov	r0, r4
c7e07260:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e07264:	00003ffc 	.word	0x00003ffc
c7e07268:	c7e31278 	.word	0xc7e31278
c7e0726c:	c7e31299 	.word	0xc7e31299

c7e07270 <env_check_apply>:
			const char *newval, int flag)
{
	int   console = -1;

	/* Default value for NULL to protect string-manipulating functions */
	newval = newval ? : "";
c7e07270:	e59fc1bc 	ldr	ip, [pc, #444]	; c7e07434 <env_check_apply+0x1c4>
 * overwriting of write-once variables.
 */

int env_check_apply(const char *name, const char *oldval,
			const char *newval, int flag)
{
c7e07274:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	int   console = -1;

	/* Default value for NULL to protect string-manipulating functions */
	newval = newval ? : "";
c7e07278:	e3520000 	cmp	r2, #0	; 0x0
 * overwriting of write-once variables.
 */

int env_check_apply(const char *name, const char *oldval,
			const char *newval, int flag)
{
c7e0727c:	e1a04001 	mov	r4, r1

	/* Default value for NULL to protect string-manipulating functions */
	newval = newval ? : "";

	/* Check for console redirection */
	if (strcmp(name, "stdin") == 0)
c7e07280:	e59f11b0 	ldr	r1, [pc, #432]	; c7e07438 <env_check_apply+0x1c8>
			const char *newval, int flag)
{
	int   console = -1;

	/* Default value for NULL to protect string-manipulating functions */
	newval = newval ? : "";
c7e07284:	11a07002 	movne	r7, r2
c7e07288:	01a0700c 	moveq	r7, ip
 * overwriting of write-once variables.
 */

int env_check_apply(const char *name, const char *oldval,
			const char *newval, int flag)
{
c7e0728c:	e1a0a003 	mov	sl, r3
c7e07290:	e1a06000 	mov	r6, r0

	/* Default value for NULL to protect string-manipulating functions */
	newval = newval ? : "";

	/* Check for console redirection */
	if (strcmp(name, "stdin") == 0)
c7e07294:	eb006d71 	bl	c7e22860 <strcmp>
c7e07298:	e3500000 	cmp	r0, #0	; 0x0
c7e0729c:	0a00000b 	beq	c7e072d0 <env_check_apply+0x60>
		console = stdin;
	else if (strcmp(name, "stdout") == 0)
c7e072a0:	e1a00006 	mov	r0, r6
c7e072a4:	e59f1190 	ldr	r1, [pc, #400]	; c7e0743c <env_check_apply+0x1cc>
c7e072a8:	eb006d6c 	bl	c7e22860 <strcmp>
c7e072ac:	e3500000 	cmp	r0, #0	; 0x0
c7e072b0:	02800001 	addeq	r0, r0, #1	; 0x1
c7e072b4:	0a000005 	beq	c7e072d0 <env_check_apply+0x60>
		console = stdout;
	else if (strcmp(name, "stderr") == 0)
c7e072b8:	e1a00006 	mov	r0, r6
c7e072bc:	e59f117c 	ldr	r1, [pc, #380]	; c7e07440 <env_check_apply+0x1d0>
c7e072c0:	eb006d66 	bl	c7e22860 <strcmp>
c7e072c4:	e3500000 	cmp	r0, #0	; 0x0
c7e072c8:	1a00000e 	bne	c7e07308 <env_check_apply+0x98>
c7e072cc:	e2800002 	add	r0, r0, #2	; 0x2
		console = stderr;

	if (console != -1) {
		if ((newval == NULL) || (*newval == '\0')) {
c7e072d0:	e3570000 	cmp	r7, #0	; 0x0
c7e072d4:	0a000002 	beq	c7e072e4 <env_check_apply+0x74>
c7e072d8:	e5d73000 	ldrb	r3, [r7]
c7e072dc:	e3530000 	cmp	r3, #0	; 0x0
c7e072e0:	1a000004 	bne	c7e072f8 <env_check_apply+0x88>
			/* We cannot delete stdin/stdout/stderr */
			if ((flag & H_FORCE) == 0)
c7e072e4:	e31a0002 	tst	sl, #2	; 0x2
				printf("Can't delete \"%s\"\n", name);
c7e072e8:	01a01006 	moveq	r1, r6
c7e072ec:	059f0150 	ldreq	r0, [pc, #336]	; c7e07444 <env_check_apply+0x1d4>
		console = stderr;

	if (console != -1) {
		if ((newval == NULL) || (*newval == '\0')) {
			/* We cannot delete stdin/stdout/stderr */
			if ((flag & H_FORCE) == 0)
c7e072f0:	1a00004a 	bne	c7e07420 <env_check_apply+0x1b0>
c7e072f4:	ea000020 	b	c7e0737c <env_check_apply+0x10c>
#ifdef CONFIG_CONSOLE_MUX
		if (iomux_doenv(console, newval))
			return 1;
#else
		/* Try assigning specified device */
		if (console_assign(console, newval) < 0)
c7e072f8:	e1a01007 	mov	r1, r7
c7e072fc:	eb000596 	bl	c7e0895c <console_assign>
c7e07300:	e3500000 	cmp	r0, #0	; 0x0
c7e07304:	ba000045 	blt	c7e07420 <env_check_apply+0x1b0>
	/*
	 * When we change baudrate, or we are doing an env default -a
	 * (which will erase all variables prior to calling this),
	 * we want the baudrate to actually change - for real.
	 */
	if (oldval != NULL ||			/* variable exists */
c7e07308:	e3540000 	cmp	r4, #0	; 0x0
c7e0730c:	1a000001 	bne	c7e07318 <env_check_apply+0xa8>
c7e07310:	e31a0001 	tst	sl, #1	; 0x1
c7e07314:	1a000029 	bne	c7e073c0 <env_check_apply+0x150>
		(flag & H_NOCLEAR) == 0) {	/* or env is clear */
		/*
		 * Switch to new baudrate if new baudrate is supported
		 */
		if (strcmp(name, "baudrate") == 0) {
c7e07318:	e1a00006 	mov	r0, r6
c7e0731c:	e59f1124 	ldr	r1, [pc, #292]	; c7e07448 <env_check_apply+0x1d8>
c7e07320:	eb006d4e 	bl	c7e22860 <strcmp>
c7e07324:	e2505000 	subs	r5, r0, #0	; 0x0
c7e07328:	1a000024 	bne	c7e073c0 <env_check_apply+0x150>
			int baudrate = simple_strtoul(newval, NULL, 10);
c7e0732c:	e1a00007 	mov	r0, r7
c7e07330:	e1a01005 	mov	r1, r5
c7e07334:	e3a0200a 	mov	r2, #10	; 0xa
c7e07338:	eb006f08 	bl	c7e22f60 <simple_strtoul>
c7e0733c:	e1a04000 	mov	r4, r0
c7e07340:	e1a00005 	mov	r0, r5
			int i;
			for (i = 0; i < N_BAUDRATES; ++i) {
				if (baudrate == baudrate_table[i])
c7e07344:	e59f3100 	ldr	r3, [pc, #256]	; c7e0744c <env_check_apply+0x1dc>
c7e07348:	e7933100 	ldr	r3, [r3, r0, lsl #2]
c7e0734c:	e1540003 	cmp	r4, r3
c7e07350:	1a000002 	bne	c7e07360 <env_check_apply+0xf0>
					break;
			}
			if (i == N_BAUDRATES) {
c7e07354:	e3500005 	cmp	r0, #5	; 0x5
c7e07358:	1a000009 	bne	c7e07384 <env_check_apply+0x114>
c7e0735c:	ea000002 	b	c7e0736c <env_check_apply+0xfc>
		 * Switch to new baudrate if new baudrate is supported
		 */
		if (strcmp(name, "baudrate") == 0) {
			int baudrate = simple_strtoul(newval, NULL, 10);
			int i;
			for (i = 0; i < N_BAUDRATES; ++i) {
c7e07360:	e2800001 	add	r0, r0, #1	; 0x1
c7e07364:	e3500005 	cmp	r0, #5	; 0x5
c7e07368:	1afffff5 	bne	c7e07344 <env_check_apply+0xd4>
				if (baudrate == baudrate_table[i])
					break;
			}
			if (i == N_BAUDRATES) {
				if ((flag & H_FORCE) == 0)
c7e0736c:	e31a0002 	tst	sl, #2	; 0x2
c7e07370:	1a00002a 	bne	c7e07420 <env_check_apply+0x1b0>
					printf("## Baudrate %d bps not "
c7e07374:	e59f00d4 	ldr	r0, [pc, #212]	; c7e07450 <env_check_apply+0x1e0>
c7e07378:	e1a01004 	mov	r1, r4
c7e0737c:	eb0005b5 	bl	c7e08a58 <printf>
c7e07380:	ea000026 	b	c7e07420 <env_check_apply+0x1b0>
						"supported\n", baudrate);
				return 1;
			}
			if (gd->baudrate == baudrate) {
c7e07384:	e5983008 	ldr	r3, [r8, #8]
c7e07388:	e1530004 	cmp	r3, r4
c7e0738c:	0a000025 	beq	c7e07428 <env_check_apply+0x1b8>
				/* If unchanged, we just say it's OK */
				return 0;
			}
			printf("## Switch baudrate to %d bps and"
c7e07390:	e1a01004 	mov	r1, r4
c7e07394:	e59f00b8 	ldr	r0, [pc, #184]	; c7e07454 <env_check_apply+0x1e4>
c7e07398:	eb0005ae 	bl	c7e08a58 <printf>
				"press ENTER ...\n", baudrate);
			udelay(50000);
c7e0739c:	e59f00b4 	ldr	r0, [pc, #180]	; c7e07458 <env_check_apply+0x1e8>
c7e073a0:	eb006ec8 	bl	c7e22ec8 <udelay>
			gd->baudrate = baudrate;
c7e073a4:	e5884008 	str	r4, [r8, #8]
#if defined(CONFIG_PPC) || defined(CONFIG_MCF52x2)
			gd->bd->bi_baudrate = baudrate;
#endif

			serial_setbrg();
c7e073a8:	eb004b3e 	bl	c7e1a0a8 <serial_setbrg>
			udelay(50000);
c7e073ac:	e59f00a4 	ldr	r0, [pc, #164]	; c7e07458 <env_check_apply+0x1e8>
c7e073b0:	eb006ec4 	bl	c7e22ec8 <udelay>
			while (getc() != '\r')
c7e073b4:	eb00064a 	bl	c7e08ce4 <getc>
c7e073b8:	e350000d 	cmp	r0, #13	; 0xd
c7e073bc:	1afffffc 	bne	c7e073b4 <env_check_apply+0x144>

	/*
	 * Some variables should be updated when the corresponding
	 * entry in the environment is changed
	 */
	if (strcmp(name, "loadaddr") == 0) {
c7e073c0:	e1a00006 	mov	r0, r6
c7e073c4:	e59f1090 	ldr	r1, [pc, #144]	; c7e0745c <env_check_apply+0x1ec>
c7e073c8:	eb006d24 	bl	c7e22860 <strcmp>
c7e073cc:	e2504000 	subs	r4, r0, #0	; 0x0
c7e073d0:	1a000007 	bne	c7e073f4 <env_check_apply+0x184>
		load_addr = simple_strtoul(newval, NULL, 16);
c7e073d4:	e1a01004 	mov	r1, r4
c7e073d8:	e1a00007 	mov	r0, r7
c7e073dc:	e3a02010 	mov	r2, #16	; 0x10
c7e073e0:	eb006ede 	bl	c7e22f60 <simple_strtoul>
c7e073e4:	e59f3074 	ldr	r3, [pc, #116]	; c7e07460 <env_check_apply+0x1f0>
c7e073e8:	e1a01004 	mov	r1, r4
c7e073ec:	e58300dc 	str	r0, [r3, #220]
c7e073f0:	ea00000d 	b	c7e0742c <env_check_apply+0x1bc>
		return 0;
	}
#if defined(CONFIG_CMD_NET)
	else if (strcmp(name, "bootfile") == 0) {
c7e073f4:	e1a00006 	mov	r0, r6
c7e073f8:	e59f1064 	ldr	r1, [pc, #100]	; c7e07464 <env_check_apply+0x1f4>
c7e073fc:	eb006d17 	bl	c7e22860 <strcmp>
c7e07400:	e2504000 	subs	r4, r0, #0	; 0x0
c7e07404:	1a000007 	bne	c7e07428 <env_check_apply+0x1b8>
		copy_filename(BootFile, newval, sizeof(BootFile));
c7e07408:	e1a01007 	mov	r1, r7
c7e0740c:	e59f0054 	ldr	r0, [pc, #84]	; c7e07468 <env_check_apply+0x1f8>
c7e07410:	e3a02080 	mov	r2, #128	; 0x80
c7e07414:	eb0081ba 	bl	c7e27b04 <copy_filename>
c7e07418:	e1a01004 	mov	r1, r4
c7e0741c:	ea000002 	b	c7e0742c <env_check_apply+0x1bc>
		return 0;
c7e07420:	e3a01001 	mov	r1, #1	; 0x1
c7e07424:	ea000000 	b	c7e0742c <env_check_apply+0x1bc>
c7e07428:	e3a01000 	mov	r1, #0	; 0x0
	}
#endif
	return 0;
}
c7e0742c:	e1a00001 	mov	r0, r1
c7e07430:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e07434:	c7e2fef0 	.word	0xc7e2fef0
c7e07438:	c7e312b5 	.word	0xc7e312b5
c7e0743c:	c7e312bb 	.word	0xc7e312bb
c7e07440:	c7e312c2 	.word	0xc7e312c2
c7e07444:	c7e312c9 	.word	0xc7e312c9
c7e07448:	c7e2de0e 	.word	0xc7e2de0e
c7e0744c:	c7e2b1cc 	.word	0xc7e2b1cc
c7e07450:	c7e312dc 	.word	0xc7e312dc
c7e07454:	c7e312fe 	.word	0xc7e312fe
c7e07458:	0000c350 	.word	0x0000c350
c7e0745c:	c7e2de92 	.word	0xc7e2de92
c7e07460:	c7e352f0 	.word	0xc7e352f0
c7e07464:	c7e2f0e9 	.word	0xc7e2f0e9
c7e07468:	c7e748d8 	.word	0xc7e748d8

c7e0746c <_do_env_set>:
/*
 * Set a new environment variable,
 * or replace or delete an existing one.
*/
int _do_env_set(int flag, int argc, char * const argv[])
{
c7e0746c:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	int   i, len;
	char  *name, *value, *s;
	ENTRY e, *ep;

	name = argv[1];
c7e07470:	e5926004 	ldr	r6, [r2, #4]
/*
 * Set a new environment variable,
 * or replace or delete an existing one.
*/
int _do_env_set(int flag, int argc, char * const argv[])
{
c7e07474:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e07478:	e1a0a001 	mov	sl, r1
	ENTRY e, *ep;

	name = argv[1];
	value = argv[2];

	if (strchr(name, '=')) {
c7e0747c:	e1a00006 	mov	r0, r6
c7e07480:	e3a0103d 	mov	r1, #61	; 0x3d
/*
 * Set a new environment variable,
 * or replace or delete an existing one.
*/
int _do_env_set(int flag, int argc, char * const argv[])
{
c7e07484:	e1a07002 	mov	r7, r2
	int   i, len;
	char  *name, *value, *s;
	ENTRY e, *ep;

	name = argv[1];
	value = argv[2];
c7e07488:	e5924008 	ldr	r4, [r2, #8]

	if (strchr(name, '=')) {
c7e0748c:	eb006d15 	bl	c7e228e8 <strchr>
c7e07490:	e3500000 	cmp	r0, #0	; 0x0
		printf("## Error: illegal character '='"
c7e07494:	11a01006 	movne	r1, r6
c7e07498:	159f0178 	ldrne	r0, [pc, #376]	; c7e07618 <_do_env_set+0x1ac>
	ENTRY e, *ep;

	name = argv[1];
	value = argv[2];

	if (strchr(name, '=')) {
c7e0749c:	1a000032 	bne	c7e0756c <_do_env_set+0x100>
		printf("## Error: illegal character '='"
		       "in variable name \"%s\"\n", name);
		return 1;
	}

	env_id++;
c7e074a0:	e59fe174 	ldr	lr, [pc, #372]	; c7e0761c <_do_env_set+0x1b0>
	/*
	 * search if variable with this name already exists
	 */
	e.key = name;
c7e074a4:	e58d600c 	str	r6, [sp, #12]
		printf("## Error: illegal character '='"
		       "in variable name \"%s\"\n", name);
		return 1;
	}

	env_id++;
c7e074a8:	e59ec000 	ldr	ip, [lr]
	/*
	 * search if variable with this name already exists
	 */
	e.key = name;
	e.data = NULL;
c7e074ac:	e58d0010 	str	r0, [sp, #16]
		printf("## Error: illegal character '='"
		       "in variable name \"%s\"\n", name);
		return 1;
	}

	env_id++;
c7e074b0:	e28cc001 	add	ip, ip, #1	; 0x1
c7e074b4:	e58ec000 	str	ip, [lr]
	/*
	 * search if variable with this name already exists
	 */
	e.key = name;
	e.data = NULL;
	hsearch_r(e, FIND, &ep, &env_htab);
c7e074b8:	e28d300c 	add	r3, sp, #12	; 0xc
c7e074bc:	e59fc15c 	ldr	ip, [pc, #348]	; c7e07620 <_do_env_set+0x1b4>
c7e074c0:	e1a02000 	mov	r2, r0
c7e074c4:	e8930003 	ldm	r3, {r0, r1}
c7e074c8:	e28d3014 	add	r3, sp, #20	; 0x14
c7e074cc:	e58dc000 	str	ip, [sp]
c7e074d0:	eb0068b4 	bl	c7e217a8 <hsearch_r>

	/*
	 * Perform requested checks. Notice how since we are overwriting
	 * a single variable, we need to set H_NOCLEAR
	 */
	if (env_check_apply(name, ep ? ep->data : NULL, value, H_NOCLEAR)) {
c7e074d4:	e59d1014 	ldr	r1, [sp, #20]
c7e074d8:	e1a02004 	mov	r2, r4
c7e074dc:	e3510000 	cmp	r1, #0	; 0x0
c7e074e0:	15911004 	ldrne	r1, [r1, #4]
c7e074e4:	e1a00006 	mov	r0, r6
c7e074e8:	e3a03001 	mov	r3, #1	; 0x1
c7e074ec:	ebffff5f 	bl	c7e07270 <env_check_apply>
c7e074f0:	e3500000 	cmp	r0, #0	; 0x0
c7e074f4:	1a000044 	bne	c7e0760c <_do_env_set+0x1a0>
		debug("check function did not approve, refusing\n");
		return 1;
	}

	/* Delete only ? */
	if (argc < 3 || argv[2] == NULL) {
c7e074f8:	e35a0002 	cmp	sl, #2	; 0x2
c7e074fc:	da000004 	ble	c7e07514 <_do_env_set+0xa8>
c7e07500:	e5973008 	ldr	r3, [r7, #8]
c7e07504:	e3530000 	cmp	r3, #0	; 0x0
		int rc = hdelete_r(name, &env_htab, 0);
		return !rc;
c7e07508:	11a05000 	movne	r5, r0
c7e0750c:	13a04002 	movne	r4, #2	; 0x2
		debug("check function did not approve, refusing\n");
		return 1;
	}

	/* Delete only ? */
	if (argc < 3 || argv[2] == NULL) {
c7e07510:	1a000006 	bne	c7e07530 <_do_env_set+0xc4>
		int rc = hdelete_r(name, &env_htab, 0);
c7e07514:	e1a00006 	mov	r0, r6
c7e07518:	e59f1100 	ldr	r1, [pc, #256]	; c7e07620 <_do_env_set+0x1b4>
c7e0751c:	e3a02000 	mov	r2, #0	; 0x0
c7e07520:	eb006958 	bl	c7e21a88 <hdelete_r>
		return !rc;
c7e07524:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e07528:	33a00000 	movcc	r0, #0	; 0x0
c7e0752c:	ea000037 	b	c7e07610 <_do_env_set+0x1a4>

	/*
	 * Insert / replace new value
	 */
	for (i = 2, len = 0; i < argc; ++i)
		len += strlen(argv[i]) + 1;
c7e07530:	e7970104 	ldr	r0, [r7, r4, lsl #2]
c7e07534:	eb006cff 	bl	c7e22938 <strlen>
	}

	/*
	 * Insert / replace new value
	 */
	for (i = 2, len = 0; i < argc; ++i)
c7e07538:	e2844001 	add	r4, r4, #1	; 0x1
		len += strlen(argv[i]) + 1;
c7e0753c:	e2800001 	add	r0, r0, #1	; 0x1
	}

	/*
	 * Insert / replace new value
	 */
	for (i = 2, len = 0; i < argc; ++i)
c7e07540:	e154000a 	cmp	r4, sl
		len += strlen(argv[i]) + 1;
c7e07544:	e0805005 	add	r5, r0, r5
	}

	/*
	 * Insert / replace new value
	 */
	for (i = 2, len = 0; i < argc; ++i)
c7e07548:	bafffff8 	blt	c7e07530 <_do_env_set+0xc4>
		len += strlen(argv[i]) + 1;

	value = malloc(len);
c7e0754c:	e1a00005 	mov	r0, r5
c7e07550:	eb000711 	bl	c7e0919c <malloc>
	if (value == NULL) {
c7e07554:	e2504000 	subs	r4, r0, #0	; 0x0
		printf("## Can't malloc %d bytes\n", len);
		return 1;
c7e07558:	11a01004 	movne	r1, r4
c7e0755c:	13a0c002 	movne	ip, #2	; 0x2
	 */
	for (i = 2, len = 0; i < argc; ++i)
		len += strlen(argv[i]) + 1;

	value = malloc(len);
	if (value == NULL) {
c7e07560:	1a000003 	bne	c7e07574 <_do_env_set+0x108>
		printf("## Can't malloc %d bytes\n", len);
c7e07564:	e59f00b8 	ldr	r0, [pc, #184]	; c7e07624 <_do_env_set+0x1b8>
c7e07568:	e1a01005 	mov	r1, r5
c7e0756c:	eb000539 	bl	c7e08a58 <printf>
c7e07570:	ea000025 	b	c7e0760c <_do_env_set+0x1a0>
		return 1;
	}
	for (i = 2, s = value; i < argc; ++i) {
		char *v = argv[i];
c7e07574:	e797510c 	ldr	r5, [r7, ip, lsl #2]
c7e07578:	e1a02001 	mov	r2, r1
c7e0757c:	e3a03000 	mov	r3, #0	; 0x0

		while ((*s++ = *v++) != '\0')
c7e07580:	e7d50003 	ldrb	r0, [r5, r3]
c7e07584:	e1a0e002 	mov	lr, r2
c7e07588:	e3500000 	cmp	r0, #0	; 0x0
c7e0758c:	e7c10003 	strb	r0, [r1, r3]
c7e07590:	e2822001 	add	r2, r2, #1	; 0x1
c7e07594:	e2833001 	add	r3, r3, #1	; 0x1
c7e07598:	1afffff8 	bne	c7e07580 <_do_env_set+0x114>
	value = malloc(len);
	if (value == NULL) {
		printf("## Can't malloc %d bytes\n", len);
		return 1;
	}
	for (i = 2, s = value; i < argc; ++i) {
c7e0759c:	e28cc001 	add	ip, ip, #1	; 0x1
		char *v = argv[i];

		while ((*s++ = *v++) != '\0')
			;
		*(s - 1) = ' ';
c7e075a0:	e3a03020 	mov	r3, #32	; 0x20
	value = malloc(len);
	if (value == NULL) {
		printf("## Can't malloc %d bytes\n", len);
		return 1;
	}
	for (i = 2, s = value; i < argc; ++i) {
c7e075a4:	e15c000a 	cmp	ip, sl
		char *v = argv[i];

		while ((*s++ = *v++) != '\0')
			;
		*(s - 1) = ' ';
c7e075a8:	e5ce3000 	strb	r3, [lr]
	value = malloc(len);
	if (value == NULL) {
		printf("## Can't malloc %d bytes\n", len);
		return 1;
	}
	for (i = 2, s = value; i < argc; ++i) {
c7e075ac:	b1a01002 	movlt	r1, r2
c7e075b0:	baffffef 	blt	c7e07574 <_do_env_set+0x108>

		while ((*s++ = *v++) != '\0')
			;
		*(s - 1) = ' ';
	}
	if (s != value)
c7e075b4:	e1520004 	cmp	r2, r4
		*--s = '\0';
c7e075b8:	15420001 	strbne	r0, [r2, #-1]

	e.key	= name;
	e.data	= value;
	hsearch_r(e, ENTER, &ep, &env_htab);
c7e075bc:	e59fc05c 	ldr	ip, [pc, #92]	; c7e07620 <_do_env_set+0x1b4>
		*(s - 1) = ' ';
	}
	if (s != value)
		*--s = '\0';

	e.key	= name;
c7e075c0:	e58d600c 	str	r6, [sp, #12]
	e.data	= value;
c7e075c4:	e58d4010 	str	r4, [sp, #16]
	hsearch_r(e, ENTER, &ep, &env_htab);
c7e075c8:	e28d300c 	add	r3, sp, #12	; 0xc
c7e075cc:	e8930003 	ldm	r3, {r0, r1}
c7e075d0:	e3a02001 	mov	r2, #1	; 0x1
c7e075d4:	e28d3014 	add	r3, sp, #20	; 0x14
c7e075d8:	e58dc000 	str	ip, [sp]
c7e075dc:	eb006871 	bl	c7e217a8 <hsearch_r>
	free(value);
c7e075e0:	e1a00004 	mov	r0, r4
c7e075e4:	eb00065d 	bl	c7e08f60 <free>
	if (!ep) {
c7e075e8:	e59d3014 	ldr	r3, [sp, #20]
c7e075ec:	e3530000 	cmp	r3, #0	; 0x0
c7e075f0:	13a00000 	movne	r0, #0	; 0x0
c7e075f4:	1a000005 	bne	c7e07610 <_do_env_set+0x1a4>
		printf("## Error inserting \"%s\" variable, errno=%d\n",
c7e075f8:	e59f3028 	ldr	r3, [pc, #40]	; c7e07628 <_do_env_set+0x1bc>
c7e075fc:	e1a01006 	mov	r1, r6
c7e07600:	e5932000 	ldr	r2, [r3]
c7e07604:	e59f0020 	ldr	r0, [pc, #32]	; c7e0762c <_do_env_set+0x1c0>
c7e07608:	eb000512 	bl	c7e08a58 <printf>
c7e0760c:	e3a00001 	mov	r0, #1	; 0x1
			name, errno);
		return 1;
	}

	return 0;
}
c7e07610:	e28dd018 	add	sp, sp, #24	; 0x18
c7e07614:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e07618:	c7e3132f 	.word	0xc7e3132f
c7e0761c:	c7e352f0 	.word	0xc7e352f0
c7e07620:	c7e357e4 	.word	0xc7e357e4
c7e07624:	c7e31365 	.word	0xc7e31365
c7e07628:	c7e72300 	.word	0xc7e72300
c7e0762c:	c7e3137f 	.word	0xc7e3137f

c7e07630 <do_env_set>:
}

#ifndef CONFIG_SPL_BUILD
int do_env_set(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	if (argc < 2)
c7e07630:	e3520001 	cmp	r2, #1	; 0x1
	return setenv(varname, str);
}

#ifndef CONFIG_SPL_BUILD
int do_env_set(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e07634:	e1a00001 	mov	r0, r1
	if (argc < 2)
c7e07638:	ca000001 	bgt	c7e07644 <do_env_set+0x14>
		return CMD_RET_USAGE;

	return _do_env_set(flag, argc, argv);
}
c7e0763c:	e3e00000 	mvn	r0, #0	; 0x0
c7e07640:	e12fff1e 	bx	lr
int do_env_set(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	if (argc < 2)
		return CMD_RET_USAGE;

	return _do_env_set(flag, argc, argv);
c7e07644:	e1a01002 	mov	r1, r2
c7e07648:	e1a02003 	mov	r2, r3
c7e0764c:	eaffff86 	b	c7e0746c <_do_env_set>

c7e07650 <setenv>:

	return 0;
}

int setenv(const char *varname, const char *varvalue)
{
c7e07650:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
	const char * const argv[4] = { "setenv", varname, varvalue, NULL };
c7e07654:	e59f303c 	ldr	r3, [pc, #60]	; c7e07698 <setenv+0x48>
c7e07658:	e3a02000 	mov	r2, #0	; 0x0

	if (varvalue == NULL || varvalue[0] == '\0')
c7e0765c:	e3510000 	cmp	r1, #0	; 0x0
	return 0;
}

int setenv(const char *varname, const char *varvalue)
{
	const char * const argv[4] = { "setenv", varname, varvalue, NULL };
c7e07660:	e58d3000 	str	r3, [sp]
c7e07664:	e98d0007 	stmib	sp, {r0, r1, r2}

	if (varvalue == NULL || varvalue[0] == '\0')
c7e07668:	0a000004 	beq	c7e07680 <setenv+0x30>
c7e0766c:	e5d13000 	ldrb	r3, [r1]
c7e07670:	e1530002 	cmp	r3, r2
		return _do_env_set(0, 2, (char * const *)argv);
	else
		return _do_env_set(0, 3, (char * const *)argv);
c7e07674:	11a00002 	movne	r0, r2
c7e07678:	13a01003 	movne	r1, #3	; 0x3

int setenv(const char *varname, const char *varvalue)
{
	const char * const argv[4] = { "setenv", varname, varvalue, NULL };

	if (varvalue == NULL || varvalue[0] == '\0')
c7e0767c:	1a000001 	bne	c7e07688 <setenv+0x38>
		return _do_env_set(0, 2, (char * const *)argv);
c7e07680:	e3a00000 	mov	r0, #0	; 0x0
c7e07684:	e3a01002 	mov	r1, #2	; 0x2
	else
		return _do_env_set(0, 3, (char * const *)argv);
c7e07688:	e1a0200d 	mov	r2, sp
c7e0768c:	ebffff76 	bl	c7e0746c <_do_env_set>
}
c7e07690:	e28dd014 	add	sp, sp, #20	; 0x14
c7e07694:	e8bd8000 	pop	{pc}
c7e07698:	c7e313ab 	.word	0xc7e313ab

c7e0769c <do_env_export>:
 *
 *	=> env import -d -t ${backup_addr}
 */
static int do_env_export(cmd_tbl_t *cmdtp, int flag,
			 int argc, char * const argv[])
{
c7e0769c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	env_t	*envp;
	char	sep = '\n';
	int	chk = 0;
	int	fmt = 0;

	cmd = *argv;
c7e076a0:	e3a06000 	mov	r6, #0	; 0x0
 *
 *	=> env import -d -t ${backup_addr}
 */
static int do_env_export(cmd_tbl_t *cmdtp, int flag,
			 int argc, char * const argv[])
{
c7e076a4:	e24dd038 	sub	sp, sp, #56	; 0x38
c7e076a8:	e1a07003 	mov	r7, r3
c7e076ac:	e58d000c 	str	r0, [sp, #12]
c7e076b0:	e1a04002 	mov	r4, r2
	env_t	*envp;
	char	sep = '\n';
	int	chk = 0;
	int	fmt = 0;

	cmd = *argv;
c7e076b4:	e593b000 	ldr	fp, [r3]
c7e076b8:	e3a0500a 	mov	r5, #10	; 0xa
c7e076bc:	e1a09006 	mov	r9, r6
c7e076c0:	e1a0a006 	mov	sl, r6
c7e076c4:	ea000028 	b	c7e0776c <do_env_export+0xd0>

	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;
		while (*++arg) {
			switch (*arg) {
c7e076c8:	e3530063 	cmp	r3, #99	; 0x63
c7e076cc:	0a00000c 	beq	c7e07704 <do_env_export+0x68>
c7e076d0:	8a000002 	bhi	c7e076e0 <do_env_export+0x44>
c7e076d4:	e3530062 	cmp	r3, #98	; 0x62
c7e076d8:	1a000071 	bne	c7e078a4 <do_env_export+0x208>
c7e076dc:	ea000004 	b	c7e076f4 <do_env_export+0x58>
c7e076e0:	e3530073 	cmp	r3, #115	; 0x73
c7e076e4:	0a00000b 	beq	c7e07718 <do_env_export+0x7c>
c7e076e8:	e3530074 	cmp	r3, #116	; 0x74
c7e076ec:	1a00006c 	bne	c7e078a4 <do_env_export+0x208>
c7e076f0:	ea000013 	b	c7e07744 <do_env_export+0xa8>
			case 'b':		/* raw binary format */
				if (fmt++)
c7e076f4:	e3520000 	cmp	r2, #0	; 0x0
c7e076f8:	1a000064 	bne	c7e07890 <do_env_export+0x1f4>
					goto sep_err;
c7e076fc:	e1a05002 	mov	r5, r2
c7e07700:	ea000012 	b	c7e07750 <do_env_export+0xb4>
				sep = '\0';
				break;
			case 'c':		/* external checksum format */
				if (fmt++)
c7e07704:	e3520000 	cmp	r2, #0	; 0x0
c7e07708:	1a000060 	bne	c7e07890 <do_env_export+0x1f4>
					goto sep_err;
c7e0770c:	e1a05002 	mov	r5, r2
c7e07710:	e3a09001 	mov	r9, #1	; 0x1
c7e07714:	ea00000d 	b	c7e07750 <do_env_export+0xb4>
				sep = '\0';
				chk = 1;
				break;
			case 's':		/* size given */
				if (--argc <= 0)
c7e07718:	e2544001 	subs	r4, r4, #1	; 0x1
c7e0771c:	1a000002 	bne	c7e0772c <do_env_export+0x90>
					return cmd_usage(cmdtp);
c7e07720:	e59d000c 	ldr	r0, [sp, #12]
c7e07724:	eb000343 	bl	c7e08438 <cmd_usage>
c7e07728:	ea00005e 	b	c7e078a8 <do_env_export+0x20c>
				size = simple_strtoul(*++argv, NULL, 16);
c7e0772c:	e5b70004 	ldr	r0, [r7, #4]!
c7e07730:	e3a01000 	mov	r1, #0	; 0x0
c7e07734:	e3a02010 	mov	r2, #16	; 0x10
c7e07738:	eb006e08 	bl	c7e22f60 <simple_strtoul>
c7e0773c:	e1a06000 	mov	r6, r0
c7e07740:	ea000009 	b	c7e0776c <do_env_export+0xd0>
				goto NXTARG;
			case 't':		/* text format */
				if (fmt++)
c7e07744:	e3520000 	cmp	r2, #0	; 0x0
c7e07748:	1a000050 	bne	c7e07890 <do_env_export+0x1f4>
					goto sep_err;
c7e0774c:	e3a0500a 	mov	r5, #10	; 0xa
c7e07750:	e2811001 	add	r1, r1, #1	; 0x1
c7e07754:	e3a02001 	mov	r2, #1	; 0x1

	cmd = *argv;

	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;
		while (*++arg) {
c7e07758:	e06c3000 	rsb	r3, ip, r0
c7e0775c:	e7d33001 	ldrb	r3, [r3, r1]
					return cmd_usage(cmdtp);
				size = simple_strtoul(*++argv, NULL, 16);
				goto NXTARG;
			case 't':		/* text format */
				if (fmt++)
					goto sep_err;
c7e07760:	e1a0a002 	mov	sl, r2

	cmd = *argv;

	while (--argc > 0 && **++argv == '-') {
		char *arg = *argv;
		while (*++arg) {
c7e07764:	e3530000 	cmp	r3, #0	; 0x0
c7e07768:	1affffd6 	bne	c7e076c8 <do_env_export+0x2c>
	int	chk = 0;
	int	fmt = 0;

	cmd = *argv;

	while (--argc > 0 && **++argv == '-') {
c7e0776c:	e2444001 	sub	r4, r4, #1	; 0x1
c7e07770:	e3540000 	cmp	r4, #0	; 0x0
c7e07774:	da00004a 	ble	c7e078a4 <do_env_export+0x208>
c7e07778:	e5b70004 	ldr	r0, [r7, #4]!
c7e0777c:	e5d03000 	ldrb	r3, [r0]
c7e07780:	e353002d 	cmp	r3, #45	; 0x2d
c7e07784:	1a000049 	bne	c7e078b0 <do_env_export+0x214>
c7e07788:	e1a0c00a 	mov	ip, sl
c7e0778c:	e28a1001 	add	r1, sl, #1	; 0x1
c7e07790:	e1a0200a 	mov	r2, sl
c7e07794:	eaffffef 	b	c7e07758 <do_env_export+0xbc>
		return CMD_RET_USAGE;

	addr = (char *)simple_strtoul(argv[0], NULL, 16);

	if (size)
		memset(addr, '\0', size);
c7e07798:	e3a01000 	mov	r1, #0	; 0x0
c7e0779c:	e1a02006 	mov	r2, r6
c7e077a0:	eb006cfb 	bl	c7e22b94 <memset>

	argc--;
	argv++;

	if (sep) {		/* export as text file */
c7e077a4:	e3550000 	cmp	r5, #0	; 0x0
	addr = (char *)simple_strtoul(argv[0], NULL, 16);

	if (size)
		memset(addr, '\0', size);

	argc--;
c7e077a8:	e244c001 	sub	ip, r4, #1	; 0x1
	argv++;
c7e077ac:	e287e004 	add	lr, r7, #4	; 0x4

	if (sep) {		/* export as text file */
c7e077b0:	0a00000f 	beq	c7e077f4 <do_env_export+0x158>
		len = hexport_r(&env_htab, sep, &addr, size, argc, argv);
c7e077b4:	e28d2034 	add	r2, sp, #52	; 0x34
c7e077b8:	e1a01005 	mov	r1, r5
c7e077bc:	e1a03006 	mov	r3, r6
c7e077c0:	e59f0104 	ldr	r0, [pc, #260]	; c7e078cc <do_env_export+0x230>
c7e077c4:	e88d5000 	stm	sp, {ip, lr}
c7e077c8:	eb006718 	bl	c7e21430 <hexport_r>
		if (len < 0) {
c7e077cc:	e3500000 	cmp	r0, #0	; 0x0
			error("Cannot export environment: errno = %d\n", errno);
			return 1;
		}
		sprintf(buf, "%zX", (size_t)len);
c7e077d0:	a28d4010 	addge	r4, sp, #16	; 0x10
c7e077d4:	a1a02000 	movge	r2, r0
	argc--;
	argv++;

	if (sep) {		/* export as text file */
		len = hexport_r(&env_htab, sep, &addr, size, argc, argv);
		if (len < 0) {
c7e077d8:	aa000024 	bge	c7e07870 <do_env_export+0x1d4>
			error("Cannot export environment: errno = %d\n", errno);
c7e077dc:	e59f30ec 	ldr	r3, [pc, #236]	; c7e078d0 <do_env_export+0x234>
c7e077e0:	e59f00ec 	ldr	r0, [pc, #236]	; c7e078d4 <do_env_export+0x238>
c7e077e4:	e5931000 	ldr	r1, [r3]
c7e077e8:	e59f20e8 	ldr	r2, [pc, #232]	; c7e078d8 <do_env_export+0x23c>
c7e077ec:	e59f30e8 	ldr	r3, [pc, #232]	; c7e078dc <do_env_export+0x240>
c7e077f0:	ea000011 	b	c7e0783c <do_env_export+0x1a0>
		setenv("filesize", buf);

		return 0;
	}

	envp = (env_t *)addr;
c7e077f4:	e59d4034 	ldr	r4, [sp, #52]

	if (chk)		/* export as checksum protected block */
c7e077f8:	e3590000 	cmp	r9, #0	; 0x0
		res = (char *)envp->data;
c7e077fc:	12843004 	addne	r3, r4, #4	; 0x4
c7e07800:	158d3030 	strne	r3, [sp, #48]
	else			/* export as raw binary data */
		res = addr;

	len = hexport_r(&env_htab, '\0', &res, ENV_SIZE, argc, argv);
c7e07804:	e59f00c0 	ldr	r0, [pc, #192]	; c7e078cc <do_env_export+0x230>
c7e07808:	e3a01000 	mov	r1, #0	; 0x0
c7e0780c:	e28d2030 	add	r2, sp, #48	; 0x30
c7e07810:	e59f30c8 	ldr	r3, [pc, #200]	; c7e078e0 <do_env_export+0x244>
	envp = (env_t *)addr;

	if (chk)		/* export as checksum protected block */
		res = (char *)envp->data;
	else			/* export as raw binary data */
		res = addr;
c7e07814:	058d4030 	streq	r4, [sp, #48]

	len = hexport_r(&env_htab, '\0', &res, ENV_SIZE, argc, argv);
c7e07818:	e88d5000 	stm	sp, {ip, lr}
c7e0781c:	eb006703 	bl	c7e21430 <hexport_r>
	if (len < 0) {
c7e07820:	e2505000 	subs	r5, r0, #0	; 0x0
c7e07824:	aa000008 	bge	c7e0784c <do_env_export+0x1b0>
		error("Cannot export environment: errno = %d\n", errno);
c7e07828:	e59f30a0 	ldr	r3, [pc, #160]	; c7e078d0 <do_env_export+0x234>
c7e0782c:	e59f00a0 	ldr	r0, [pc, #160]	; c7e078d4 <do_env_export+0x238>
c7e07830:	e5931000 	ldr	r1, [r3]
c7e07834:	e59f209c 	ldr	r2, [pc, #156]	; c7e078d8 <do_env_export+0x23c>
c7e07838:	e59f30a4 	ldr	r3, [pc, #164]	; c7e078e4 <do_env_export+0x248>
c7e0783c:	e59fc0a4 	ldr	ip, [pc, #164]	; c7e078e8 <do_env_export+0x24c>
c7e07840:	e58dc000 	str	ip, [sp]
c7e07844:	eb000483 	bl	c7e08a58 <printf>
c7e07848:	ea000013 	b	c7e0789c <do_env_export+0x200>
		return 1;
	}

	if (chk) {
c7e0784c:	e3590000 	cmp	r9, #0	; 0x0
c7e07850:	0a000004 	beq	c7e07868 <do_env_export+0x1cc>
		envp->crc = crc32(0, envp->data, ENV_SIZE);
c7e07854:	e3a00000 	mov	r0, #0	; 0x0
c7e07858:	e2841004 	add	r1, r4, #4	; 0x4
c7e0785c:	e59f207c 	ldr	r2, [pc, #124]	; c7e078e0 <do_env_export+0x244>
c7e07860:	eb006527 	bl	c7e20d04 <crc32>
c7e07864:	e5840000 	str	r0, [r4]
#ifdef CONFIG_ENV_ADDR_REDUND
		envp->flags = ACTIVE_FLAG;
#endif
	}
	sprintf(buf, "%zX", (size_t)(len + offsetof(env_t, data)));
c7e07868:	e28d4010 	add	r4, sp, #16	; 0x10
c7e0786c:	e2852004 	add	r2, r5, #4	; 0x4
c7e07870:	e59f1074 	ldr	r1, [pc, #116]	; c7e078ec <do_env_export+0x250>
c7e07874:	e1a00004 	mov	r0, r4
c7e07878:	eb00716c 	bl	c7e23e30 <sprintf>
	setenv("filesize", buf);
c7e0787c:	e1a01004 	mov	r1, r4
c7e07880:	e59f0068 	ldr	r0, [pc, #104]	; c7e078f0 <do_env_export+0x254>
c7e07884:	ebffff71 	bl	c7e07650 <setenv>
c7e07888:	e3a00000 	mov	r0, #0	; 0x0
c7e0788c:	ea000005 	b	c7e078a8 <do_env_export+0x20c>

	return 0;

sep_err:
	printf("## %s: only one of \"-b\", \"-c\" or \"-t\" allowed\n",	cmd);
c7e07890:	e1a0100b 	mov	r1, fp
c7e07894:	e59f0058 	ldr	r0, [pc, #88]	; c7e078f4 <do_env_export+0x258>
c7e07898:	eb00046e 	bl	c7e08a58 <printf>
c7e0789c:	e3a00001 	mov	r0, #1	; 0x1
c7e078a0:	ea000000 	b	c7e078a8 <do_env_export+0x20c>
	return 1;
c7e078a4:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e078a8:	e28dd038 	add	sp, sp, #56	; 0x38
c7e078ac:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	}

	if (argc < 1)
		return CMD_RET_USAGE;

	addr = (char *)simple_strtoul(argv[0], NULL, 16);
c7e078b0:	e3a01000 	mov	r1, #0	; 0x0
c7e078b4:	e3a02010 	mov	r2, #16	; 0x10
c7e078b8:	eb006da8 	bl	c7e22f60 <simple_strtoul>

	if (size)
c7e078bc:	e3560000 	cmp	r6, #0	; 0x0
	}

	if (argc < 1)
		return CMD_RET_USAGE;

	addr = (char *)simple_strtoul(argv[0], NULL, 16);
c7e078c0:	e58d0034 	str	r0, [sp, #52]

	if (size)
c7e078c4:	0affffb6 	beq	c7e077a4 <do_env_export+0x108>
c7e078c8:	eaffffb2 	b	c7e07798 <do_env_export+0xfc>
c7e078cc:	c7e357e4 	.word	0xc7e357e4
c7e078d0:	c7e72300 	.word	0xc7e72300
c7e078d4:	c7e313b2 	.word	0xc7e313b2
c7e078d8:	c7e311c3 	.word	0xc7e311c3
c7e078dc:	00000333 	.word	0x00000333
c7e078e0:	00003ffc 	.word	0x00003ffc
c7e078e4:	00000345 	.word	0x00000345
c7e078e8:	c7e2b1e0 	.word	0xc7e2b1e0
c7e078ec:	c7e313ef 	.word	0xc7e313ef
c7e078f0:	c7e2e9fc 	.word	0xc7e2e9fc
c7e078f4:	c7e311d0 	.word	0xc7e311d0

c7e078f8 <do_env_edit>:
/*
 * Interactively edit an environment variable
 */
#if defined(CONFIG_CMD_EDITENV)
int do_env_edit(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e078f8:	e92d4030 	push	{r4, r5, lr}
	char buffer[CONFIG_SYS_CBSIZE];
	char *init_val;

	if (argc < 2)
c7e078fc:	e3520001 	cmp	r2, #1	; 0x1
/*
 * Interactively edit an environment variable
 */
#if defined(CONFIG_CMD_EDITENV)
int do_env_edit(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e07900:	e24ddf41 	sub	sp, sp, #260	; 0x104
c7e07904:	e1a05003 	mov	r5, r3
	char buffer[CONFIG_SYS_CBSIZE];
	char *init_val;

	if (argc < 2)
c7e07908:	d3e00000 	mvnle	r0, #0	; 0x0
c7e0790c:	da000010 	ble	c7e07954 <do_env_edit+0x5c>
		return CMD_RET_USAGE;

	/* Set read buffer to initial value or empty sting */
	init_val = getenv(argv[1]);
c7e07910:	e5930004 	ldr	r0, [r3, #4]
c7e07914:	ebfffde0 	bl	c7e0709c <getenv>
	if (init_val)
c7e07918:	e3500000 	cmp	r0, #0	; 0x0
		sprintf(buffer, "%s", init_val);
	else
		buffer[0] = '\0';
c7e0791c:	05cd0000 	strbeq	r0, [sp]
	if (argc < 2)
		return CMD_RET_USAGE;

	/* Set read buffer to initial value or empty sting */
	init_val = getenv(argv[1]);
	if (init_val)
c7e07920:	0a000003 	beq	c7e07934 <do_env_edit+0x3c>
		sprintf(buffer, "%s", init_val);
c7e07924:	e1a02000 	mov	r2, r0
c7e07928:	e59f102c 	ldr	r1, [pc, #44]	; c7e0795c <do_env_edit+0x64>
c7e0792c:	e1a0000d 	mov	r0, sp
c7e07930:	eb00713e 	bl	c7e23e30 <sprintf>
	else
		buffer[0] = '\0';

	readline_into_buffer("edit: ", buffer, 0);
c7e07934:	e1a0100d 	mov	r1, sp
c7e07938:	e3a02000 	mov	r2, #0	; 0x0
c7e0793c:	e59f001c 	ldr	r0, [pc, #28]	; c7e07960 <do_env_edit+0x68>
c7e07940:	eb0018ad 	bl	c7e0dbfc <readline_into_buffer>

	return setenv(argv[1], buffer);
c7e07944:	e5950004 	ldr	r0, [r5, #4]
c7e07948:	e1a0100d 	mov	r1, sp
	if (init_val)
		sprintf(buffer, "%s", init_val);
	else
		buffer[0] = '\0';

	readline_into_buffer("edit: ", buffer, 0);
c7e0794c:	e1a0400d 	mov	r4, sp

	return setenv(argv[1], buffer);
c7e07950:	ebffff3e 	bl	c7e07650 <setenv>
}
c7e07954:	e28ddf41 	add	sp, sp, #260	; 0x104
c7e07958:	e8bd8030 	pop	{r4, r5, pc}
c7e0795c:	c7e3082f 	.word	0xc7e3082f
c7e07960:	c7e313f3 	.word	0xc7e313f3

c7e07964 <setenv_addr>:
 * @param varname	Environmet variable to set
 * @param addr		Value to set it to
 * @return 0 if ok, 1 on error
 */
int setenv_addr(const char *varname, const void *addr)
{
c7e07964:	e92d4030 	push	{r4, r5, lr}
c7e07968:	e24dd01c 	sub	sp, sp, #28	; 0x1c
	char str[17];

	sprintf(str, "%lx", (uintptr_t)addr);
c7e0796c:	e28d4007 	add	r4, sp, #7	; 0x7
 * @param varname	Environmet variable to set
 * @param addr		Value to set it to
 * @return 0 if ok, 1 on error
 */
int setenv_addr(const char *varname, const void *addr)
{
c7e07970:	e1a02001 	mov	r2, r1
c7e07974:	e1a05000 	mov	r5, r0
	char str[17];

	sprintf(str, "%lx", (uintptr_t)addr);
c7e07978:	e59f1018 	ldr	r1, [pc, #24]	; c7e07998 <setenv_addr+0x34>
c7e0797c:	e1a00004 	mov	r0, r4
c7e07980:	eb00712a 	bl	c7e23e30 <sprintf>
	return setenv(varname, str);
c7e07984:	e1a00005 	mov	r0, r5
c7e07988:	e1a01004 	mov	r1, r4
c7e0798c:	ebffff2f 	bl	c7e07650 <setenv>
}
c7e07990:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e07994:	e8bd8030 	pop	{r4, r5, pc}
c7e07998:	c7e2e66c 	.word	0xc7e2e66c

c7e0799c <setenv_ulong>:
 * @param varname	Environmet variable to set
 * @param value		Value to set it to
 * @return 0 if ok, 1 on error
 */
int setenv_ulong(const char *varname, ulong value)
{
c7e0799c:	e92d4010 	push	{r4, lr}
c7e079a0:	e1a04000 	mov	r4, r0
	/* TODO: this should be unsigned */
	char *str = simple_itoa(value);
c7e079a4:	e1a00001 	mov	r0, r1
c7e079a8:	eb006e3d 	bl	c7e232a4 <simple_itoa>
c7e079ac:	e1a01000 	mov	r1, r0

	return setenv(varname, str);
c7e079b0:	e1a00004 	mov	r0, r4
}
c7e079b4:	e8bd4010 	pop	{r4, lr}
int setenv_ulong(const char *varname, ulong value)
{
	/* TODO: this should be unsigned */
	char *str = simple_itoa(value);

	return setenv(varname, str);
c7e079b8:	eaffff24 	b	c7e07650 <setenv>

c7e079bc <do_reginfo>:
# endif

#endif /* CONFIG_BLACKFIN */

	return 0;
}
c7e079bc:	e3a00000 	mov	r0, #0	; 0x0
c7e079c0:	e12fff1e 	bx	lr

c7e079c4 <__fswab32>:
{
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
c7e079c4:	e1a03000 	mov	r3, r0
c7e079c8:	e1a00c00 	lsl	r0, r0, #24
c7e079cc:	e2032cff 	and	r2, r3, #65280	; 0xff00
c7e079d0:	e1800c23 	orr	r0, r0, r3, lsr #24
c7e079d4:	e1800402 	orr	r0, r0, r2, lsl #8
c7e079d8:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
	return __arch__swab32(x);
}
c7e079dc:	e1800423 	orr	r0, r0, r3, lsr #8
c7e079e0:	e12fff1e 	bx	lr

c7e079e4 <source>:
#include <mpc8xx.h>
#endif

int
source (ulong addr, const char *fit_uname)
{
c7e079e4:	e92d4070 	push	{r4, r5, r6, lr}
c7e079e8:	e1a04000 	mov	r4, r0
	int		noffset;
	const void	*fit_data;
	size_t		fit_len;
#endif

	verify = getenv_yesno ("verify");
c7e079ec:	e59f00b8 	ldr	r0, [pc, #184]	; c7e07aac <source+0xc8>
c7e079f0:	eb00131f 	bl	c7e0c674 <getenv_yesno>
c7e079f4:	e1a05000 	mov	r5, r0

	switch (genimg_get_format ((void *)addr)) {
c7e079f8:	e1a00004 	mov	r0, r4
c7e079fc:	eb00136e 	bl	c7e0c7bc <genimg_get_format>
c7e07a00:	e3500001 	cmp	r0, #1	; 0x1
		data = (ulong *)fit_data;
		len = (ulong)fit_len;
		break;
#endif
	default:
		puts ("Wrong image format for \"source\" command\n");
c7e07a04:	159f00a4 	ldrne	r0, [pc, #164]	; c7e07ab0 <source+0xcc>
	size_t		fit_len;
#endif

	verify = getenv_yesno ("verify");

	switch (genimg_get_format ((void *)addr)) {
c7e07a08:	1a000021 	bne	c7e07a94 <source+0xb0>
#define image_get_hdr_l(f) \
	static inline uint32_t image_get_##f(const image_header_t *hdr) \
	{ \
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
c7e07a0c:	e5940000 	ldr	r0, [r4]
c7e07a10:	ebffffeb 	bl	c7e079c4 <__fswab32>
	case IMAGE_FORMAT_LEGACY:
		hdr = (image_header_t *)addr;

		if (!image_check_magic (hdr)) {
c7e07a14:	e59f3098 	ldr	r3, [pc, #152]	; c7e07ab4 <source+0xd0>
c7e07a18:	e1500003 	cmp	r0, r3
			puts ("Bad magic number\n");
c7e07a1c:	159f0094 	ldrne	r0, [pc, #148]	; c7e07ab8 <source+0xd4>

	switch (genimg_get_format ((void *)addr)) {
	case IMAGE_FORMAT_LEGACY:
		hdr = (image_header_t *)addr;

		if (!image_check_magic (hdr)) {
c7e07a20:	1a00001b 	bne	c7e07a94 <source+0xb0>
			puts ("Bad magic number\n");
			return 1;
		}

		if (!image_check_hcrc (hdr)) {
c7e07a24:	e1a00004 	mov	r0, r4
c7e07a28:	eb001481 	bl	c7e0cc34 <image_check_hcrc>
c7e07a2c:	e3500000 	cmp	r0, #0	; 0x0
			puts ("Bad header crc\n");
c7e07a30:	059f0084 	ldreq	r0, [pc, #132]	; c7e07abc <source+0xd8>
		if (!image_check_magic (hdr)) {
			puts ("Bad magic number\n");
			return 1;
		}

		if (!image_check_hcrc (hdr)) {
c7e07a34:	0a000016 	beq	c7e07a94 <source+0xb0>
			puts ("Bad header crc\n");
			return 1;
		}

		if (verify) {
c7e07a38:	e3550000 	cmp	r5, #0	; 0x0
c7e07a3c:	0a000004 	beq	c7e07a54 <source+0x70>
			if (!image_check_dcrc (hdr)) {
c7e07a40:	e1a00004 	mov	r0, r4
c7e07a44:	eb001468 	bl	c7e0cbec <image_check_dcrc>
c7e07a48:	e3500000 	cmp	r0, #0	; 0x0
				puts ("Bad data crc\n");
c7e07a4c:	059f006c 	ldreq	r0, [pc, #108]	; c7e07ac0 <source+0xdc>
			puts ("Bad header crc\n");
			return 1;
		}

		if (verify) {
			if (!image_check_dcrc (hdr)) {
c7e07a50:	0a00000f 	beq	c7e07a94 <source+0xb0>
				puts ("Bad data crc\n");
				return 1;
			}
		}

		if (!image_check_type (hdr, IH_TYPE_SCRIPT)) {
c7e07a54:	e5d4301e 	ldrb	r3, [r4, #30]
c7e07a58:	e3530006 	cmp	r3, #6	; 0x6
			puts ("Bad image type\n");
c7e07a5c:	159f0060 	ldrne	r0, [pc, #96]	; c7e07ac4 <source+0xe0>
				puts ("Bad data crc\n");
				return 1;
			}
		}

		if (!image_check_type (hdr, IH_TYPE_SCRIPT)) {
c7e07a60:	1a00000b 	bne	c7e07a94 <source+0xb0>
		}

		/* get length of script */
		data = (ulong *)image_get_data (hdr);

		if ((len = uimage_to_cpu (*data)) == 0) {
c7e07a64:	e5940040 	ldr	r0, [r4, #64]
c7e07a68:	ebffffd5 	bl	c7e079c4 <__fswab32>
c7e07a6c:	e2501000 	subs	r1, r0, #0	; 0x0
			puts ("Empty Script\n");
c7e07a70:	059f0050 	ldreq	r0, [pc, #80]	; c7e07ac8 <source+0xe4>
		}

		/* get length of script */
		data = (ulong *)image_get_data (hdr);

		if ((len = uimage_to_cpu (*data)) == 0) {
c7e07a74:	0a000006 	beq	c7e07a94 <source+0xb0>
			puts ("Empty Script\n");
			return 1;
c7e07a78:	e2840044 	add	r0, r4, #68	; 0x44
		/*
		 * scripts are just multi-image files with one component, seek
		 * past the zero-terminated sequence of image lengths to get
		 * to the actual image data
		 */
		while (*data++);
c7e07a7c:	e5102004 	ldr	r2, [r0, #-4]
c7e07a80:	e1a03000 	mov	r3, r0
c7e07a84:	e3520000 	cmp	r2, #0	; 0x0
c7e07a88:	e2800004 	add	r0, r0, #4	; 0x4
c7e07a8c:	1afffffa 	bne	c7e07a7c <source+0x98>
c7e07a90:	ea000002 	b	c7e07aa0 <source+0xbc>
		data = (ulong *)fit_data;
		len = (ulong)fit_len;
		break;
#endif
	default:
		puts ("Wrong image format for \"source\" command\n");
c7e07a94:	eb0003d4 	bl	c7e089ec <puts>
		return 1;
	}

	debug ("** Script length: %ld\n", len);
	return run_command_list((char *)data, len, 0);
}
c7e07a98:	e3a00001 	mov	r0, #1	; 0x1
c7e07a9c:	e8bd8070 	pop	{r4, r5, r6, pc}
		puts ("Wrong image format for \"source\" command\n");
		return 1;
	}

	debug ("** Script length: %ld\n", len);
	return run_command_list((char *)data, len, 0);
c7e07aa0:	e1a00003 	mov	r0, r3
}
c7e07aa4:	e8bd4070 	pop	{r4, r5, r6, lr}
		puts ("Wrong image format for \"source\" command\n");
		return 1;
	}

	debug ("** Script length: %ld\n", len);
	return run_command_list((char *)data, len, 0);
c7e07aa8:	ea001797 	b	c7e0d90c <run_command_list>
c7e07aac:	c7e2e6f2 	.word	0xc7e2e6f2
c7e07ab0:	c7e318b4 	.word	0xc7e318b4
c7e07ab4:	27051956 	.word	0x27051956
c7e07ab8:	c7e31866 	.word	0xc7e31866
c7e07abc:	c7e31878 	.word	0xc7e31878
c7e07ac0:	c7e31888 	.word	0xc7e31888
c7e07ac4:	c7e31896 	.word	0xc7e31896
c7e07ac8:	c7e318a6 	.word	0xc7e318a6

c7e07acc <do_source>:
	ulong addr;
	int rcode;
	const char *fit_uname = NULL;

	/* Find script image */
	if (argc < 2) {
c7e07acc:	e3520001 	cmp	r2, #1	; 0x1

/**************************************************/
#if defined(CONFIG_CMD_SOURCE)
int
do_source (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e07ad0:	e92d4010 	push	{r4, lr}
	ulong addr;
	int rcode;
	const char *fit_uname = NULL;

	/* Find script image */
	if (argc < 2) {
c7e07ad4:	d3a04205 	movle	r4, #1342177280	; 0x50000000
c7e07ad8:	da000004 	ble	c7e07af0 <do_source+0x24>
	} else if (fit_parse_subimage (argv[1], load_addr, &addr, &fit_uname)) {
		debug ("*  source: subimage '%s' from FIT image at 0x%08lx\n",
				fit_uname, addr);
#endif
	} else {
		addr = simple_strtoul(argv[1], NULL, 16);
c7e07adc:	e5930004 	ldr	r0, [r3, #4]
c7e07ae0:	e3a01000 	mov	r1, #0	; 0x0
c7e07ae4:	e3a02010 	mov	r2, #16	; 0x10
c7e07ae8:	eb006d1c 	bl	c7e22f60 <simple_strtoul>
c7e07aec:	e1a04000 	mov	r4, r0
		debug ("*  source: cmdline image address = 0x%08lx\n", addr);
	}

	printf ("## Executing script at %08lx\n", addr);
c7e07af0:	e1a01004 	mov	r1, r4
c7e07af4:	e59f0010 	ldr	r0, [pc, #16]	; c7e07b0c <do_source+0x40>
c7e07af8:	eb0003d6 	bl	c7e08a58 <printf>
	rcode = source (addr, fit_uname);
c7e07afc:	e1a00004 	mov	r0, r4
c7e07b00:	e3a01000 	mov	r1, #0	; 0x0
	return rcode;
}
c7e07b04:	e8bd4010 	pop	{r4, lr}
		addr = simple_strtoul(argv[1], NULL, 16);
		debug ("*  source: cmdline image address = 0x%08lx\n", addr);
	}

	printf ("## Executing script at %08lx\n", addr);
	rcode = source (addr, fit_uname);
c7e07b08:	eaffffb5 	b	c7e079e4 <source>
c7e07b0c:	c7e318dd 	.word	0xc7e318dd

c7e07b10 <do_false>:
);

int do_false(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	return 1;
}
c7e07b10:	e3a00001 	mov	r0, #1	; 0x1
c7e07b14:	e12fff1e 	bx	lr

c7e07b18 <do_true>:
);

int do_true(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	return 0;
}
c7e07b18:	e3a00000 	mov	r0, #0	; 0x0
c7e07b1c:	e12fff1e 	bx	lr

c7e07b20 <do_test>:
{
	char * const *ap;
	int left, adv, expr, last_expr, neg, last_cmp;

	/* args? */
	if (argc < 3)
c7e07b20:	e3520002 	cmp	r2, #2	; 0x2

#include <common.h>
#include <command.h>

int do_test(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e07b24:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	char * const *ap;
	int left, adv, expr, last_expr, neg, last_cmp;

	/* args? */
	if (argc < 3)
c7e07b28:	d3a00001 	movle	r0, #1	; 0x1
c7e07b2c:	d8bd8ef0 	pople	{r4, r5, r6, r7, r9, sl, fp, pc}
	}
#endif

	last_expr = 0;
	left = argc - 1; ap = argv + 1;
	if (left > 0 && strcmp(ap[0], "!") == 0) {
c7e07b30:	e5930004 	ldr	r0, [r3, #4]
c7e07b34:	e59f1424 	ldr	r1, [pc, #1060]	; c7e07f60 <do_test+0x440>
			debug(" '%s'", argv[left++]);
	}
#endif

	last_expr = 0;
	left = argc - 1; ap = argv + 1;
c7e07b38:	e242a001 	sub	sl, r2, #1	; 0x1
c7e07b3c:	e2835004 	add	r5, r3, #4	; 0x4
	if (left > 0 && strcmp(ap[0], "!") == 0) {
c7e07b40:	eb006b46 	bl	c7e22860 <strcmp>
		neg = 1;
		ap++;
		left--;
c7e07b44:	e3e04000 	mvn	r4, #0	; 0x0
	}
#endif

	last_expr = 0;
	left = argc - 1; ap = argv + 1;
	if (left > 0 && strcmp(ap[0], "!") == 0) {
c7e07b48:	e3500000 	cmp	r0, #0	; 0x0
c7e07b4c:	13a0b000 	movne	fp, #0	; 0x0
		neg = 1;
		ap++;
c7e07b50:	02855004 	addeq	r5, r5, #4	; 0x4
		left--;
c7e07b54:	024aa001 	subeq	sl, sl, #1	; 0x1
c7e07b58:	03a0b001 	moveq	fp, #1	; 0x1
c7e07b5c:	e1a09004 	mov	r9, r4
c7e07b60:	e1a07004 	mov	r7, r4
	expr = -1;
	last_cmp = -1;
	last_expr = -1;
	while (left > 0) {

		if (strcmp(ap[0], "-o") == 0 || strcmp(ap[0], "-a") == 0)
c7e07b64:	e5950000 	ldr	r0, [r5]
c7e07b68:	e59f13f4 	ldr	r1, [pc, #1012]	; c7e07f64 <do_test+0x444>
c7e07b6c:	eb006b3b 	bl	c7e22860 <strcmp>
c7e07b70:	e3500000 	cmp	r0, #0	; 0x0
c7e07b74:	0a0000ee 	beq	c7e07f34 <do_test+0x414>
c7e07b78:	e5950000 	ldr	r0, [r5]
c7e07b7c:	e59f13e4 	ldr	r1, [pc, #996]	; c7e07f68 <do_test+0x448>
c7e07b80:	eb006b36 	bl	c7e22860 <strcmp>
c7e07b84:	e3500000 	cmp	r0, #0	; 0x0
c7e07b88:	0a0000e9 	beq	c7e07f34 <do_test+0x414>
			adv = 1;
		else if (strcmp(ap[0], "-z") == 0 || strcmp(ap[0], "-n") == 0)
c7e07b8c:	e5950000 	ldr	r0, [r5]
c7e07b90:	e59f13d4 	ldr	r1, [pc, #980]	; c7e07f6c <do_test+0x44c>
c7e07b94:	eb006b31 	bl	c7e22860 <strcmp>
c7e07b98:	e3500000 	cmp	r0, #0	; 0x0
c7e07b9c:	0a000005 	beq	c7e07bb8 <do_test+0x98>
c7e07ba0:	e5950000 	ldr	r0, [r5]
c7e07ba4:	e59f13c4 	ldr	r1, [pc, #964]	; c7e07f70 <do_test+0x450>
c7e07ba8:	eb006b2c 	bl	c7e22860 <strcmp>
c7e07bac:	e3500000 	cmp	r0, #0	; 0x0
c7e07bb0:	13a06003 	movne	r6, #3	; 0x3
c7e07bb4:	1a000000 	bne	c7e07bbc <do_test+0x9c>
c7e07bb8:	e3a06002 	mov	r6, #2	; 0x2
			adv = 2;
		else
			adv = 3;

		if (left < adv) {
c7e07bbc:	e15a0006 	cmp	sl, r6
c7e07bc0:	aa000007 	bge	c7e07be4 <do_test+0xc4>
c7e07bc4:	ea0000d2 	b	c7e07f14 <do_test+0x3f4>

		if (adv == 1) {
			if (strcmp(ap[0], "-o") == 0) {
				last_expr = expr;
				last_cmp = 0;
			} else if (strcmp(ap[0], "-a") == 0) {
c7e07bc8:	e5950000 	ldr	r0, [r5]
c7e07bcc:	e59f1394 	ldr	r1, [pc, #916]	; c7e07f68 <do_test+0x448>
c7e07bd0:	eb006b22 	bl	c7e22860 <strcmp>
c7e07bd4:	e3500000 	cmp	r0, #0	; 0x0
c7e07bd8:	1a0000cd 	bne	c7e07f14 <do_test+0x3f4>
c7e07bdc:	e3a07001 	mov	r7, #1	; 0x1
c7e07be0:	ea0000d9 	b	c7e07f4c <do_test+0x42c>
				expr = 1;
				break;
			}
		}

		if (adv == 2) {
c7e07be4:	e3560002 	cmp	r6, #2	; 0x2
c7e07be8:	1a00001f 	bne	c7e07c6c <do_test+0x14c>
			if (strcmp(ap[0], "-z") == 0)
c7e07bec:	e5950000 	ldr	r0, [r5]
c7e07bf0:	e59f1374 	ldr	r1, [pc, #884]	; c7e07f6c <do_test+0x44c>
c7e07bf4:	eb006b19 	bl	c7e22860 <strcmp>
c7e07bf8:	e3500000 	cmp	r0, #0	; 0x0
c7e07bfc:	1a000004 	bne	c7e07c14 <do_test+0xf4>
				expr = strlen(ap[1]) == 0 ? 1 : 0;
c7e07c00:	e5950004 	ldr	r0, [r5, #4]
c7e07c04:	eb006b4b 	bl	c7e22938 <strlen>
c7e07c08:	e2704001 	rsbs	r4, r0, #1	; 0x1
c7e07c0c:	33a04000 	movcc	r4, #0	; 0x0
c7e07c10:	ea000008 	b	c7e07c38 <do_test+0x118>
			else if (strcmp(ap[0], "-n") == 0)
c7e07c14:	e5950000 	ldr	r0, [r5]
c7e07c18:	e59f1350 	ldr	r1, [pc, #848]	; c7e07f70 <do_test+0x450>
c7e07c1c:	eb006b0f 	bl	c7e22860 <strcmp>
c7e07c20:	e3500000 	cmp	r0, #0	; 0x0
c7e07c24:	1a0000ba 	bne	c7e07f14 <do_test+0x3f4>
				expr = strlen(ap[1]) == 0 ? 0 : 1;
c7e07c28:	e5950004 	ldr	r0, [r5, #4]
c7e07c2c:	eb006b41 	bl	c7e22938 <strlen>
c7e07c30:	e2504000 	subs	r4, r0, #0	; 0x0
c7e07c34:	13a04001 	movne	r4, #1	; 0x1
			else {
				expr = 1;
				break;
			}

			if (last_cmp == 0)
c7e07c38:	e3570000 	cmp	r7, #0	; 0x0
c7e07c3c:	1a000003 	bne	c7e07c50 <do_test+0x130>
				expr = last_expr || expr;
c7e07c40:	e1944009 	orrs	r4, r4, r9
c7e07c44:	03a04000 	moveq	r4, #0	; 0x0
c7e07c48:	13a04001 	movne	r4, #1	; 0x1
c7e07c4c:	ea0000c1 	b	c7e07f58 <do_test+0x438>
			else if (last_cmp == 1)
c7e07c50:	e3570001 	cmp	r7, #1	; 0x1
c7e07c54:	1a0000bf 	bne	c7e07f58 <do_test+0x438>
				expr = last_expr && expr;
c7e07c58:	e3540000 	cmp	r4, #0	; 0x0
c7e07c5c:	13590000 	cmpne	r9, #0	; 0x0
c7e07c60:	03a04000 	moveq	r4, #0	; 0x0
c7e07c64:	13a04001 	movne	r4, #1	; 0x1
c7e07c68:	ea0000ba 	b	c7e07f58 <do_test+0x438>
			last_cmp = -1;
		}

		if (adv == 3) {
			if (strcmp(ap[1], "=") == 0)
c7e07c6c:	e5950004 	ldr	r0, [r5, #4]
c7e07c70:	e59f12fc 	ldr	r1, [pc, #764]	; c7e07f74 <do_test+0x454>
c7e07c74:	eb006af9 	bl	c7e22860 <strcmp>
c7e07c78:	e3500000 	cmp	r0, #0	; 0x0
c7e07c7c:	e2854004 	add	r4, r5, #4	; 0x4
c7e07c80:	1a000005 	bne	c7e07c9c <do_test+0x17c>
				expr = strcmp(ap[0], ap[2]) == 0;
c7e07c84:	e5950000 	ldr	r0, [r5]
c7e07c88:	e5951008 	ldr	r1, [r5, #8]
c7e07c8c:	eb006af3 	bl	c7e22860 <strcmp>
c7e07c90:	e2704001 	rsbs	r4, r0, #1	; 0x1
c7e07c94:	33a04000 	movcc	r4, #0	; 0x0
c7e07c98:	ea00008a 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "!=") == 0)
c7e07c9c:	e5950004 	ldr	r0, [r5, #4]
c7e07ca0:	e59f12d0 	ldr	r1, [pc, #720]	; c7e07f78 <do_test+0x458>
c7e07ca4:	eb006aed 	bl	c7e22860 <strcmp>
c7e07ca8:	e3500000 	cmp	r0, #0	; 0x0
c7e07cac:	1a000005 	bne	c7e07cc8 <do_test+0x1a8>
				expr = strcmp(ap[0], ap[2]) != 0;
c7e07cb0:	e5950000 	ldr	r0, [r5]
c7e07cb4:	e5951008 	ldr	r1, [r5, #8]
c7e07cb8:	eb006ae8 	bl	c7e22860 <strcmp>
c7e07cbc:	e2504000 	subs	r4, r0, #0	; 0x0
c7e07cc0:	13a04001 	movne	r4, #1	; 0x1
c7e07cc4:	ea00007f 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], ">") == 0)
c7e07cc8:	e5940000 	ldr	r0, [r4]
c7e07ccc:	e59f12a8 	ldr	r1, [pc, #680]	; c7e07f7c <do_test+0x45c>
c7e07cd0:	eb006ae2 	bl	c7e22860 <strcmp>
c7e07cd4:	e3500000 	cmp	r0, #0	; 0x0
c7e07cd8:	1a000006 	bne	c7e07cf8 <do_test+0x1d8>
				expr = strcmp(ap[0], ap[2]) > 0;
c7e07cdc:	e5950000 	ldr	r0, [r5]
c7e07ce0:	e5951008 	ldr	r1, [r5, #8]
c7e07ce4:	eb006add 	bl	c7e22860 <strcmp>
c7e07ce8:	e3500000 	cmp	r0, #0	; 0x0
c7e07cec:	d3a04000 	movle	r4, #0	; 0x0
c7e07cf0:	c3a04001 	movgt	r4, #1	; 0x1
c7e07cf4:	ea000073 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "<") == 0)
c7e07cf8:	e5940000 	ldr	r0, [r4]
c7e07cfc:	e59f127c 	ldr	r1, [pc, #636]	; c7e07f80 <do_test+0x460>
c7e07d00:	eb006ad6 	bl	c7e22860 <strcmp>
c7e07d04:	e3500000 	cmp	r0, #0	; 0x0
c7e07d08:	1a000004 	bne	c7e07d20 <do_test+0x200>
				expr = strcmp(ap[0], ap[2]) < 0;
c7e07d0c:	e5950000 	ldr	r0, [r5]
c7e07d10:	e5951008 	ldr	r1, [r5, #8]
c7e07d14:	eb006ad1 	bl	c7e22860 <strcmp>
c7e07d18:	e1a04fa0 	lsr	r4, r0, #31
c7e07d1c:	ea000069 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "-eq") == 0)
c7e07d20:	e5940000 	ldr	r0, [r4]
c7e07d24:	e59f1258 	ldr	r1, [pc, #600]	; c7e07f84 <do_test+0x464>
c7e07d28:	eb006acc 	bl	c7e22860 <strcmp>
c7e07d2c:	e2506000 	subs	r6, r0, #0	; 0x0
c7e07d30:	1a00000c 	bne	c7e07d68 <do_test+0x248>
				expr = simple_strtol(ap[0], NULL, 10) == simple_strtol(ap[2], NULL, 10);
c7e07d34:	e1a01006 	mov	r1, r6
c7e07d38:	e3a0200a 	mov	r2, #10	; 0xa
c7e07d3c:	e5950000 	ldr	r0, [r5]
c7e07d40:	eb006cb4 	bl	c7e23018 <simple_strtol>
c7e07d44:	e1a01006 	mov	r1, r6
c7e07d48:	e1a04000 	mov	r4, r0
c7e07d4c:	e3a0200a 	mov	r2, #10	; 0xa
c7e07d50:	e5950008 	ldr	r0, [r5, #8]
c7e07d54:	eb006caf 	bl	c7e23018 <simple_strtol>
c7e07d58:	e1540000 	cmp	r4, r0
c7e07d5c:	13a04000 	movne	r4, #0	; 0x0
c7e07d60:	03a04001 	moveq	r4, #1	; 0x1
c7e07d64:	ea000057 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "-ne") == 0)
c7e07d68:	e5940000 	ldr	r0, [r4]
c7e07d6c:	e59f1214 	ldr	r1, [pc, #532]	; c7e07f88 <do_test+0x468>
c7e07d70:	eb006aba 	bl	c7e22860 <strcmp>
c7e07d74:	e2506000 	subs	r6, r0, #0	; 0x0
c7e07d78:	1a00000b 	bne	c7e07dac <do_test+0x28c>
				expr = simple_strtol(ap[0], NULL, 10) != simple_strtol(ap[2], NULL, 10);
c7e07d7c:	e1a01006 	mov	r1, r6
c7e07d80:	e3a0200a 	mov	r2, #10	; 0xa
c7e07d84:	e5950000 	ldr	r0, [r5]
c7e07d88:	eb006ca2 	bl	c7e23018 <simple_strtol>
c7e07d8c:	e1a01006 	mov	r1, r6
c7e07d90:	e1a04000 	mov	r4, r0
c7e07d94:	e3a0200a 	mov	r2, #10	; 0xa
c7e07d98:	e5950008 	ldr	r0, [r5, #8]
c7e07d9c:	eb006c9d 	bl	c7e23018 <simple_strtol>
c7e07da0:	e0544000 	subs	r4, r4, r0
c7e07da4:	13a04001 	movne	r4, #1	; 0x1
c7e07da8:	ea000046 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "-lt") == 0)
c7e07dac:	e5940000 	ldr	r0, [r4]
c7e07db0:	e59f11d4 	ldr	r1, [pc, #468]	; c7e07f8c <do_test+0x46c>
c7e07db4:	eb006aa9 	bl	c7e22860 <strcmp>
c7e07db8:	e2506000 	subs	r6, r0, #0	; 0x0
c7e07dbc:	1a00000c 	bne	c7e07df4 <do_test+0x2d4>
				expr = simple_strtol(ap[0], NULL, 10) < simple_strtol(ap[2], NULL, 10);
c7e07dc0:	e1a01006 	mov	r1, r6
c7e07dc4:	e3a0200a 	mov	r2, #10	; 0xa
c7e07dc8:	e5950000 	ldr	r0, [r5]
c7e07dcc:	eb006c91 	bl	c7e23018 <simple_strtol>
c7e07dd0:	e1a01006 	mov	r1, r6
c7e07dd4:	e1a04000 	mov	r4, r0
c7e07dd8:	e3a0200a 	mov	r2, #10	; 0xa
c7e07ddc:	e5950008 	ldr	r0, [r5, #8]
c7e07de0:	eb006c8c 	bl	c7e23018 <simple_strtol>
c7e07de4:	e1540000 	cmp	r4, r0
c7e07de8:	a3a04000 	movge	r4, #0	; 0x0
c7e07dec:	b3a04001 	movlt	r4, #1	; 0x1
c7e07df0:	ea000034 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "-le") == 0)
c7e07df4:	e5940000 	ldr	r0, [r4]
c7e07df8:	e59f1190 	ldr	r1, [pc, #400]	; c7e07f90 <do_test+0x470>
c7e07dfc:	eb006a97 	bl	c7e22860 <strcmp>
c7e07e00:	e3500000 	cmp	r0, #0	; 0x0
c7e07e04:	1a00000c 	bne	c7e07e3c <do_test+0x31c>
				expr = simple_strtol(ap[0], NULL, 10) <= simple_strtol(ap[2], NULL, 10);
c7e07e08:	e3a01000 	mov	r1, #0	; 0x0
c7e07e0c:	e3a0200a 	mov	r2, #10	; 0xa
c7e07e10:	e5950000 	ldr	r0, [r5]
c7e07e14:	eb006c7f 	bl	c7e23018 <simple_strtol>
c7e07e18:	e3a01000 	mov	r1, #0	; 0x0
c7e07e1c:	e1a04000 	mov	r4, r0
c7e07e20:	e3a0200a 	mov	r2, #10	; 0xa
c7e07e24:	e5950008 	ldr	r0, [r5, #8]
c7e07e28:	eb006c7a 	bl	c7e23018 <simple_strtol>
c7e07e2c:	e1540000 	cmp	r4, r0
c7e07e30:	c3a04000 	movgt	r4, #0	; 0x0
c7e07e34:	d3a04001 	movle	r4, #1	; 0x1
c7e07e38:	ea000022 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "-gt") == 0)
c7e07e3c:	e5940000 	ldr	r0, [r4]
c7e07e40:	e59f114c 	ldr	r1, [pc, #332]	; c7e07f94 <do_test+0x474>
c7e07e44:	eb006a85 	bl	c7e22860 <strcmp>
c7e07e48:	e2506000 	subs	r6, r0, #0	; 0x0
c7e07e4c:	1a00000c 	bne	c7e07e84 <do_test+0x364>
				expr = simple_strtol(ap[0], NULL, 10) > simple_strtol(ap[2], NULL, 10);
c7e07e50:	e1a01006 	mov	r1, r6
c7e07e54:	e3a0200a 	mov	r2, #10	; 0xa
c7e07e58:	e5950000 	ldr	r0, [r5]
c7e07e5c:	eb006c6d 	bl	c7e23018 <simple_strtol>
c7e07e60:	e1a01006 	mov	r1, r6
c7e07e64:	e1a04000 	mov	r4, r0
c7e07e68:	e3a0200a 	mov	r2, #10	; 0xa
c7e07e6c:	e5950008 	ldr	r0, [r5, #8]
c7e07e70:	eb006c68 	bl	c7e23018 <simple_strtol>
c7e07e74:	e1540000 	cmp	r4, r0
c7e07e78:	d3a04000 	movle	r4, #0	; 0x0
c7e07e7c:	c3a04001 	movgt	r4, #1	; 0x1
c7e07e80:	ea000010 	b	c7e07ec8 <do_test+0x3a8>
			else if (strcmp(ap[1], "-ge") == 0)
c7e07e84:	e5940000 	ldr	r0, [r4]
c7e07e88:	e59f1108 	ldr	r1, [pc, #264]	; c7e07f98 <do_test+0x478>
c7e07e8c:	eb006a73 	bl	c7e22860 <strcmp>
c7e07e90:	e2506000 	subs	r6, r0, #0	; 0x0
c7e07e94:	1a00001e 	bne	c7e07f14 <do_test+0x3f4>
				expr = simple_strtol(ap[0], NULL, 10) >= simple_strtol(ap[2], NULL, 10);
c7e07e98:	e1a01006 	mov	r1, r6
c7e07e9c:	e3a0200a 	mov	r2, #10	; 0xa
c7e07ea0:	e5950000 	ldr	r0, [r5]
c7e07ea4:	eb006c5b 	bl	c7e23018 <simple_strtol>
c7e07ea8:	e1a01006 	mov	r1, r6
c7e07eac:	e1a04000 	mov	r4, r0
c7e07eb0:	e3a0200a 	mov	r2, #10	; 0xa
c7e07eb4:	e5950008 	ldr	r0, [r5, #8]
c7e07eb8:	eb006c56 	bl	c7e23018 <simple_strtol>
c7e07ebc:	e1540000 	cmp	r4, r0
c7e07ec0:	b3a04000 	movlt	r4, #0	; 0x0
c7e07ec4:	a3a04001 	movge	r4, #1	; 0x1
			else {
				expr = 1;
				break;
			}

			if (last_cmp == 0)
c7e07ec8:	e3570000 	cmp	r7, #0	; 0x0
c7e07ecc:	1a000003 	bne	c7e07ee0 <do_test+0x3c0>
				expr = last_expr || expr;
c7e07ed0:	e1944009 	orrs	r4, r4, r9
c7e07ed4:	03a04000 	moveq	r4, #0	; 0x0
c7e07ed8:	13a04001 	movne	r4, #1	; 0x1
c7e07edc:	ea000005 	b	c7e07ef8 <do_test+0x3d8>
			else if (last_cmp == 1)
c7e07ee0:	e3570001 	cmp	r7, #1	; 0x1
c7e07ee4:	1a000003 	bne	c7e07ef8 <do_test+0x3d8>
				expr = last_expr && expr;
c7e07ee8:	e3540000 	cmp	r4, #0	; 0x0
c7e07eec:	13590000 	cmpne	r9, #0	; 0x0
c7e07ef0:	03a04000 	moveq	r4, #0	; 0x0
c7e07ef4:	13a04001 	movne	r4, #1	; 0x1
c7e07ef8:	e3e07000 	mvn	r7, #0	; 0x0
c7e07efc:	e3a06003 	mov	r6, #3	; 0x3
			last_cmp = -1;
		}

		ap += adv; left -= adv;
c7e07f00:	e066a00a 	rsb	sl, r6, sl
		neg = 0;

	expr = -1;
	last_cmp = -1;
	last_expr = -1;
	while (left > 0) {
c7e07f04:	e35a0000 	cmp	sl, #0	; 0x0
c7e07f08:	da000002 	ble	c7e07f18 <do_test+0x3f8>
			else if (last_cmp == 1)
				expr = last_expr && expr;
			last_cmp = -1;
		}

		ap += adv; left -= adv;
c7e07f0c:	e0855106 	add	r5, r5, r6, lsl #2
c7e07f10:	eaffff13 	b	c7e07b64 <do_test+0x44>
c7e07f14:	e3a04001 	mov	r4, #1	; 0x1
	}

	if (neg)
c7e07f18:	e35b0000 	cmp	fp, #0	; 0x0
c7e07f1c:	0a000001 	beq	c7e07f28 <do_test+0x408>
		expr = !expr;
c7e07f20:	e2744001 	rsbs	r4, r4, #1	; 0x1
c7e07f24:	33a04000 	movcc	r4, #0	; 0x0

	expr = !expr;
c7e07f28:	e2740001 	rsbs	r0, r4, #1	; 0x1
c7e07f2c:	33a00000 	movcc	r0, #0	; 0x0

	debug (": returns %d\n", expr);

	return expr;
}
c7e07f30:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
			expr = 1;
			break;
		}

		if (adv == 1) {
			if (strcmp(ap[0], "-o") == 0) {
c7e07f34:	e5950000 	ldr	r0, [r5]
c7e07f38:	e59f1024 	ldr	r1, [pc, #36]	; c7e07f64 <do_test+0x444>
c7e07f3c:	eb006a47 	bl	c7e22860 <strcmp>
c7e07f40:	e3500000 	cmp	r0, #0	; 0x0
c7e07f44:	1affff1f 	bne	c7e07bc8 <do_test+0xa8>
c7e07f48:	e1a07000 	mov	r7, r0
c7e07f4c:	e1a09004 	mov	r9, r4
c7e07f50:	e3a06001 	mov	r6, #1	; 0x1
c7e07f54:	eaffffe9 	b	c7e07f00 <do_test+0x3e0>
c7e07f58:	e3e07000 	mvn	r7, #0	; 0x0
c7e07f5c:	eaffffe7 	b	c7e07f00 <do_test+0x3e0>
c7e07f60:	c7e32f39 	.word	0xc7e32f39
c7e07f64:	c7e31967 	.word	0xc7e31967
c7e07f68:	c7e3196a 	.word	0xc7e3196a
c7e07f6c:	c7e3196d 	.word	0xc7e3196d
c7e07f70:	c7e31970 	.word	0xc7e31970
c7e07f74:	c7e2fb1a 	.word	0xc7e2fb1a
c7e07f78:	c7e2fb19 	.word	0xc7e2fb19
c7e07f7c:	c7e2fb1d 	.word	0xc7e2fb1d
c7e07f80:	c7e2fb08 	.word	0xc7e2fb08
c7e07f84:	c7e2fb0e 	.word	0xc7e2fb0e
c7e07f88:	c7e2fb15 	.word	0xc7e2fb15
c7e07f8c:	c7e2fb04 	.word	0xc7e2fb04
c7e07f90:	c7e2fb26 	.word	0xc7e2fb26
c7e07f94:	c7e2fb0a 	.word	0xc7e2fb0a
c7e07f98:	c7e2fb1f 	.word	0xc7e2fb1f

c7e07f9c <do_usbd_dnw>:
#define USBD_DOWN_ADDR 0xC0008000
#endif
static const char pszMe[] = "usbd: ";

int do_usbd_dnw ( cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
{
c7e07f9c:	e92d4010 	push	{r4, lr}
c7e07fa0:	e1a0c003 	mov	ip, r3

	if (argv[0][0] == 'u') {
c7e07fa4:	e5933000 	ldr	r3, [r3]
#define USBD_DOWN_ADDR 0xC0008000
#endif
static const char pszMe[] = "usbd: ";

int do_usbd_dnw ( cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
{
c7e07fa8:	e1a01002 	mov	r1, r2

	if (argv[0][0] == 'u') {
c7e07fac:	e5d33000 	ldrb	r3, [r3]
c7e07fb0:	e59f20dc 	ldr	r2, [pc, #220]	; c7e08094 <do_usbd_dnw+0xf8>
c7e07fb4:	e3530075 	cmp	r3, #117	; 0x75
		DNW = 0;
	}
	else {
		DNW = 1;
c7e07fb8:	13a03001 	movne	r3, #1	; 0x1
c7e07fbc:	15823000 	strne	r3, [r2]
		s3c_got_header = 0;
c7e07fc0:	159f30d0 	ldrne	r3, [pc, #208]	; c7e08098 <do_usbd_dnw+0xfc>

int do_usbd_dnw ( cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
{

	if (argv[0][0] == 'u') {
		DNW = 0;
c7e07fc4:	03a03000 	moveq	r3, #0	; 0x0
	}
	else {
		DNW = 1;
		s3c_got_header = 0;
c7e07fc8:	13a02000 	movne	r2, #0	; 0x0

int do_usbd_dnw ( cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
{

	if (argv[0][0] == 'u') {
		DNW = 0;
c7e07fcc:	05823000 	streq	r3, [r2]
	}
	else {
		DNW = 1;
		s3c_got_header = 0;
c7e07fd0:	15832000 	strne	r2, [r3]
	}

	switch (argc) {
c7e07fd4:	e3510001 	cmp	r1, #1	; 0x1
c7e07fd8:	0a000002 	beq	c7e07fe8 <do_usbd_dnw+0x4c>
c7e07fdc:	e3510002 	cmp	r1, #2	; 0x2
c7e07fe0:	1a00000b 	bne	c7e08014 <do_usbd_dnw+0x78>
c7e07fe4:	ea000003 	b	c7e07ff8 <do_usbd_dnw+0x5c>
	case 1 :
		s3c_usbd_dn_addr = USBD_DOWN_ADDR;	/* Default Address */
c7e07fe8:	e59f30ac 	ldr	r3, [pc, #172]	; c7e0809c <do_usbd_dnw+0x100>
c7e07fec:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
c7e07ff0:	e5832000 	str	r2, [r3]
c7e07ff4:	ea00000b 	b	c7e08028 <do_usbd_dnw+0x8c>
		break;
	case 2 :
		s3c_usbd_dn_addr = simple_strtoul(argv[1], NULL, 16);
c7e07ff8:	e59c0004 	ldr	r0, [ip, #4]
c7e07ffc:	e3a01000 	mov	r1, #0	; 0x0
c7e08000:	e3a02010 	mov	r2, #16	; 0x10
c7e08004:	eb006bd5 	bl	c7e22f60 <simple_strtoul>
c7e08008:	e59f308c 	ldr	r3, [pc, #140]	; c7e0809c <do_usbd_dnw+0x100>
c7e0800c:	e5830000 	str	r0, [r3]
c7e08010:	ea000004 	b	c7e08028 <do_usbd_dnw+0x8c>
		break;
	default:
		printf ("Usage:\n%s\n", cmdtp->usage);
c7e08014:	e5901010 	ldr	r1, [r0, #16]
c7e08018:	e59f0080 	ldr	r0, [pc, #128]	; c7e080a0 <do_usbd_dnw+0x104>
c7e0801c:	eb00028d 	bl	c7e08a58 <printf>
c7e08020:	e3a00001 	mov	r0, #1	; 0x1
c7e08024:	e8bd8010 	pop	{r4, pc}
		return 1;
	}

	s3c_receive_done = 0;
c7e08028:	e59f3074 	ldr	r3, [pc, #116]	; c7e080a4 <do_usbd_dnw+0x108>
c7e0802c:	e3a02000 	mov	r2, #0	; 0x0
c7e08030:	e5832000 	str	r2, [r3]

	s3c_usbctl_init();
c7e08034:	eb005326 	bl	c7e1ccd4 <s3c_usbctl_init>
	s3c_usbc_activate();
c7e08038:	eb00486c 	bl	c7e1a1f0 <s3c_usbc_activate>

	PRINTF("Download address 0x%08x\n", s3c_usbd_dn_addr);
	printf("Now, Waiting for DNW to transmit data\n");
c7e0803c:	e59f0064 	ldr	r0, [pc, #100]	; c7e080a8 <do_usbd_dnw+0x10c>
c7e08040:	eb000284 	bl	c7e08a58 <printf>

	while (1) {
		if (S3C_USBD_DETECT_IRQ()) {
c7e08044:	e3a0431f 	mov	r4, #2080374784	; 0x7c000000
c7e08048:	e5942014 	ldr	r2, [r4, #20]
c7e0804c:	e59f3058 	ldr	r3, [pc, #88]	; c7e080ac <do_usbd_dnw+0x110>
c7e08050:	e0023003 	and	r3, r2, r3
c7e08054:	e3530000 	cmp	r3, #0	; 0x0
c7e08058:	0a000002 	beq	c7e08068 <do_usbd_dnw+0xcc>
			s3c_udc_int_hndlr();
c7e0805c:	eb0052d2 	bl	c7e1cbac <s3c_udc_int_hndlr>
			S3C_USBD_CLEAR_IRQ();
c7e08060:	e3e03000 	mvn	r3, #0	; 0x0
c7e08064:	e5843014 	str	r3, [r4, #20]
		}

		if (s3c_receive_done)
c7e08068:	e59f3034 	ldr	r3, [pc, #52]	; c7e080a4 <do_usbd_dnw+0x108>
c7e0806c:	e5933000 	ldr	r3, [r3]
c7e08070:	e3530000 	cmp	r3, #0	; 0x0
c7e08074:	1a000003 	bne	c7e08088 <do_usbd_dnw+0xec>
			break;

		if (serial_tstc()) {
c7e08078:	eb0047fa 	bl	c7e1a068 <serial_tstc>
c7e0807c:	e3500000 	cmp	r0, #0	; 0x0
c7e08080:	0affffef 	beq	c7e08044 <do_usbd_dnw+0xa8>
			serial_getc();
c7e08084:	eb0047e3 	bl	c7e1a018 <serial_getc>
			break;
		}
	}

	/* when operation is done, usbd must be stopped */
	s3c_usb_stop();
c7e08088:	eb00485a 	bl	c7e1a1f8 <s3c_usb_stop>
c7e0808c:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e08090:	e8bd8010 	pop	{r4, pc}
c7e08094:	c7e421c8 	.word	0xc7e421c8
c7e08098:	c7e421c4 	.word	0xc7e421c4
c7e0809c:	c7e421b4 	.word	0xc7e421b4
c7e080a0:	c7e319d5 	.word	0xc7e319d5
c7e080a4:	c7e421bc 	.word	0xc7e421bc
c7e080a8:	c7e319e0 	.word	0xc7e319e0
c7e080ac:	800c3810 	.word	0x800c3810

c7e080b0 <do_version>:
#include <linux/compiler.h>

const char __weak version_string[] = U_BOOT_VERSION_STRING;

int do_version(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e080b0:	e92d4010 	push	{r4, lr}
	printf("\n%s\n", version_string);
c7e080b4:	e59f101c 	ldr	r1, [pc, #28]	; c7e080d8 <do_version+0x28>
c7e080b8:	e59f001c 	ldr	r0, [pc, #28]	; c7e080dc <do_version+0x2c>
c7e080bc:	eb000265 	bl	c7e08a58 <printf>
#ifdef CC_VERSION_STRING
	puts(CC_VERSION_STRING "\n");
c7e080c0:	e59f0018 	ldr	r0, [pc, #24]	; c7e080e0 <do_version+0x30>
c7e080c4:	eb000248 	bl	c7e089ec <puts>
#endif
#ifdef LD_VERSION_STRING
	puts(LD_VERSION_STRING "\n");
c7e080c8:	e59f0014 	ldr	r0, [pc, #20]	; c7e080e4 <do_version+0x34>
c7e080cc:	eb000246 	bl	c7e089ec <puts>
#endif

	return 0;
}
c7e080d0:	e3a00000 	mov	r0, #0	; 0x0
c7e080d4:	e8bd8010 	pop	{r4, pc}
c7e080d8:	c7e2b1f0 	.word	0xc7e2b1f0
c7e080dc:	c7e319db 	.word	0xc7e319db
c7e080e0:	c7e31a68 	.word	0xc7e31a68
c7e080e4:	c7e31aa8 	.word	0xc7e31aa8

c7e080e8 <do_imgextract>:
#define CONFIG_SYS_XIMG_LEN	0x800000
#endif

int
do_imgextract(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e080e8:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e080ec:	e1a05003 	mov	r5, r3
	ulong		addr = load_addr;
c7e080f0:	e59f3278 	ldr	r3, [pc, #632]	; c7e08370 <do_imgextract+0x288>
#define CONFIG_SYS_XIMG_LEN	0x800000
#endif

int
do_imgextract(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e080f4:	e24dd020 	sub	sp, sp, #32	; 0x20
c7e080f8:	e1a0b000 	mov	fp, r0
	size_t		fit_len;
#endif
	uint		unc_len = CONFIG_SYS_XIMG_LEN;
	uint8_t		comp;

	verify = getenv_yesno("verify");
c7e080fc:	e59f0270 	ldr	r0, [pc, #624]	; c7e08374 <do_imgextract+0x28c>
#define CONFIG_SYS_XIMG_LEN	0x800000
#endif

int
do_imgextract(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e08100:	e1a09002 	mov	r9, r2
	ulong		addr = load_addr;
c7e08104:	e5934000 	ldr	r4, [r3]
	size_t		fit_len;
#endif
	uint		unc_len = CONFIG_SYS_XIMG_LEN;
	uint8_t		comp;

	verify = getenv_yesno("verify");
c7e08108:	eb001159 	bl	c7e0c674 <getenv_yesno>

	if (argc > 1) {
c7e0810c:	e3590001 	cmp	r9, #1	; 0x1
	size_t		fit_len;
#endif
	uint		unc_len = CONFIG_SYS_XIMG_LEN;
	uint8_t		comp;

	verify = getenv_yesno("verify");
c7e08110:	e58d0004 	str	r0, [sp, #4]

	if (argc > 1) {
c7e08114:	da000092 	ble	c7e08364 <do_imgextract+0x27c>
		addr = simple_strtoul(argv[1], NULL, 16);
c7e08118:	e5950004 	ldr	r0, [r5, #4]
c7e0811c:	e3a01000 	mov	r1, #0	; 0x0
c7e08120:	e3a02010 	mov	r2, #16	; 0x10
c7e08124:	eb006b8d 	bl	c7e22f60 <simple_strtoul>
	}
	if (argc > 2) {
c7e08128:	e3590002 	cmp	r9, #2	; 0x2
	uint8_t		comp;

	verify = getenv_yesno("verify");

	if (argc > 1) {
		addr = simple_strtoul(argv[1], NULL, 16);
c7e0812c:	e1a04000 	mov	r4, r0
	}
	if (argc > 2) {
c7e08130:	0a00008b 	beq	c7e08364 <do_imgextract+0x27c>
		part = simple_strtoul(argv[2], NULL, 16);
c7e08134:	e5950008 	ldr	r0, [r5, #8]
c7e08138:	e3a01000 	mov	r1, #0	; 0x0
c7e0813c:	e3a02010 	mov	r2, #16	; 0x10
c7e08140:	eb006b86 	bl	c7e22f60 <simple_strtoul>
#if defined(CONFIG_FIT)
		uname = argv[2];
#endif
	}
	if (argc > 3) {
c7e08144:	e3590003 	cmp	r9, #3	; 0x3

	if (argc > 1) {
		addr = simple_strtoul(argv[1], NULL, 16);
	}
	if (argc > 2) {
		part = simple_strtoul(argv[2], NULL, 16);
c7e08148:	e1a07000 	mov	r7, r0
#if defined(CONFIG_FIT)
		uname = argv[2];
#endif
	}
	if (argc > 3) {
c7e0814c:	03a0a000 	moveq	sl, #0	; 0x0
c7e08150:	0a000004 	beq	c7e08168 <do_imgextract+0x80>
		dest = simple_strtoul(argv[3], NULL, 16);
c7e08154:	e595000c 	ldr	r0, [r5, #12]
c7e08158:	e3a01000 	mov	r1, #0	; 0x0
c7e0815c:	e3a02010 	mov	r2, #16	; 0x10
c7e08160:	eb006b7e 	bl	c7e22f60 <simple_strtoul>
c7e08164:	e1a0a000 	mov	sl, r0
	}

	switch (genimg_get_format((void *)addr)) {
c7e08168:	e1a00004 	mov	r0, r4
c7e0816c:	eb001192 	bl	c7e0c7bc <genimg_get_format>
c7e08170:	e3500001 	cmp	r0, #1	; 0x1
c7e08174:	e1a06000 	mov	r6, r0
c7e08178:	1a000042 	bne	c7e08288 <do_imgextract+0x1a0>
	case IMAGE_FORMAT_LEGACY:

		printf("## Copying part %d from legacy image "
c7e0817c:	e1a01007 	mov	r1, r7
c7e08180:	e1a02004 	mov	r2, r4
c7e08184:	e59f01ec 	ldr	r0, [pc, #492]	; c7e08378 <do_imgextract+0x290>
c7e08188:	eb000232 	bl	c7e08a58 <printf>
c7e0818c:	e5942000 	ldr	r2, [r4]
			"at %08lx ...\n", part, addr);

		hdr = (image_header_t *)addr;
		if (!image_check_magic(hdr)) {
c7e08190:	e1a03c02 	lsl	r3, r2, #24
c7e08194:	e1833c22 	orr	r3, r3, r2, lsr #24
c7e08198:	e2021cff 	and	r1, r2, #65280	; 0xff00
c7e0819c:	e1833401 	orr	r3, r3, r1, lsl #8
c7e081a0:	e20228ff 	and	r2, r2, #16711680	; 0xff0000
c7e081a4:	e1833422 	orr	r3, r3, r2, lsr #8
c7e081a8:	e59f21cc 	ldr	r2, [pc, #460]	; c7e0837c <do_imgextract+0x294>
c7e081ac:	e1530002 	cmp	r3, r2
			printf("Bad Magic Number\n");
c7e081b0:	159f01c8 	ldrne	r0, [pc, #456]	; c7e08380 <do_imgextract+0x298>

		printf("## Copying part %d from legacy image "
			"at %08lx ...\n", part, addr);

		hdr = (image_header_t *)addr;
		if (!image_check_magic(hdr)) {
c7e081b4:	1a000004 	bne	c7e081cc <do_imgextract+0xe4>
			printf("Bad Magic Number\n");
			return 1;
		}

		if (!image_check_hcrc(hdr)) {
c7e081b8:	e1a00004 	mov	r0, r4
c7e081bc:	eb00129c 	bl	c7e0cc34 <image_check_hcrc>
c7e081c0:	e3500000 	cmp	r0, #0	; 0x0
c7e081c4:	1a000003 	bne	c7e081d8 <do_imgextract+0xf0>
			printf("Bad Header Checksum\n");
c7e081c8:	e59f01b4 	ldr	r0, [pc, #436]	; c7e08384 <do_imgextract+0x29c>
c7e081cc:	eb000221 	bl	c7e08a58 <printf>
c7e081d0:	e1a00006 	mov	r0, r6
c7e081d4:	ea000060 	b	c7e0835c <do_imgextract+0x274>
		}
#ifdef DEBUG
		image_print_contents(hdr);
#endif

		if (!image_check_type(hdr, IH_TYPE_MULTI)) {
c7e081d8:	e5d4301e 	ldrb	r3, [r4, #30]
c7e081dc:	e3530004 	cmp	r3, #4	; 0x4
			printf("Wrong Image Type for %s command\n",
c7e081e0:	159b1000 	ldrne	r1, [fp]
c7e081e4:	159f019c 	ldrne	r0, [pc, #412]	; c7e08388 <do_imgextract+0x2a0>
		}
#ifdef DEBUG
		image_print_contents(hdr);
#endif

		if (!image_check_type(hdr, IH_TYPE_MULTI)) {
c7e081e8:	1a000008 	bne	c7e08210 <do_imgextract+0x128>
		return hdr->ih_##f; \
	}
image_get_hdr_b(os)		/* image_get_os */
image_get_hdr_b(arch)		/* image_get_arch */
image_get_hdr_b(type)		/* image_get_type */
image_get_hdr_b(comp)		/* image_get_comp */
c7e081ec:	e5d4501f 	ldrb	r5, [r4, #31]
					cmdtp->name);
			return 1;
		}

		comp = image_get_comp(hdr);
		if ((comp != IH_COMP_NONE) && (argc < 4)) {
c7e081f0:	e2553000 	subs	r3, r5, #0	; 0x0
c7e081f4:	13a03001 	movne	r3, #1	; 0x1
c7e081f8:	e3590003 	cmp	r9, #3	; 0x3
c7e081fc:	c3a03000 	movgt	r3, #0	; 0x0
c7e08200:	e3530000 	cmp	r3, #0	; 0x0
c7e08204:	0a000003 	beq	c7e08218 <do_imgextract+0x130>
			printf("Must specify load address for %s command "
c7e08208:	e59b1000 	ldr	r1, [fp]
c7e0820c:	e59f0178 	ldr	r0, [pc, #376]	; c7e0838c <do_imgextract+0x2a4>
c7e08210:	eb000210 	bl	c7e08a58 <printf>
c7e08214:	eaffffed 	b	c7e081d0 <do_imgextract+0xe8>
					"with compressed image\n",
					cmdtp->name);
			return 1;
		}

		if (verify) {
c7e08218:	e59d3004 	ldr	r3, [sp, #4]
c7e0821c:	e3530000 	cmp	r3, #0	; 0x0
c7e08220:	0a000008 	beq	c7e08248 <do_imgextract+0x160>
			printf("   Verifying Checksum ... ");
c7e08224:	e59f0164 	ldr	r0, [pc, #356]	; c7e08390 <do_imgextract+0x2a8>
c7e08228:	eb00020a 	bl	c7e08a58 <printf>
			if (!image_check_dcrc(hdr)) {
c7e0822c:	e1a00004 	mov	r0, r4
c7e08230:	eb00126d 	bl	c7e0cbec <image_check_dcrc>
c7e08234:	e3500000 	cmp	r0, #0	; 0x0
				printf("Bad Data CRC\n");
c7e08238:	059f0154 	ldreq	r0, [pc, #340]	; c7e08394 <do_imgextract+0x2ac>
			return 1;
		}

		if (verify) {
			printf("   Verifying Checksum ... ");
			if (!image_check_dcrc(hdr)) {
c7e0823c:	0affffe2 	beq	c7e081cc <do_imgextract+0xe4>
				printf("Bad Data CRC\n");
				return 1;
			}
			printf("OK\n");
c7e08240:	e59f0150 	ldr	r0, [pc, #336]	; c7e08398 <do_imgextract+0x2b0>
c7e08244:	eb000203 	bl	c7e08a58 <printf>
		}

		count = image_multi_count(hdr);
c7e08248:	e1a00004 	mov	r0, r4
c7e0824c:	eb0010d9 	bl	c7e0c5b8 <image_multi_count>
		if (part >= count) {
c7e08250:	e1570000 	cmp	r7, r0
c7e08254:	3a000002 	bcc	c7e08264 <do_imgextract+0x17c>
			printf("Bad Image Part\n");
c7e08258:	e59f013c 	ldr	r0, [pc, #316]	; c7e0839c <do_imgextract+0x2b4>
c7e0825c:	eb0001fd 	bl	c7e08a58 <printf>
c7e08260:	ea000029 	b	c7e0830c <do_imgextract+0x224>
			return 1;
		}

		image_multi_getimg(hdr, part, &data, &len);
c7e08264:	e28d6018 	add	r6, sp, #24	; 0x18
c7e08268:	e1a00004 	mov	r0, r4
c7e0826c:	e1a01007 	mov	r1, r7
c7e08270:	e28d201c 	add	r2, sp, #28	; 0x1c
c7e08274:	e1a03006 	mov	r3, r6
c7e08278:	eb001158 	bl	c7e0c7e0 <image_multi_getimg>
	default:
		puts("Invalid image type for imxtract\n");
		return 1;
	}

	if (argc > 3) {
c7e0827c:	e3590003 	cmp	r9, #3	; 0x3
c7e08280:	ca000003 	bgt	c7e08294 <do_imgextract+0x1ac>
c7e08284:	ea000024 	b	c7e0831c <do_imgextract+0x234>
		data = (ulong)fit_data;
		len = (ulong)fit_len;
		break;
#endif
	default:
		puts("Invalid image type for imxtract\n");
c7e08288:	e59f0110 	ldr	r0, [pc, #272]	; c7e083a0 <do_imgextract+0x2b8>
c7e0828c:	eb0001d6 	bl	c7e089ec <puts>
c7e08290:	ea00001d 	b	c7e0830c <do_imgextract+0x224>
		return 1;
	}

	if (argc > 3) {
		switch (comp) {
c7e08294:	e3550000 	cmp	r5, #0	; 0x0
c7e08298:	0a000002 	beq	c7e082a8 <do_imgextract+0x1c0>
c7e0829c:	e3550001 	cmp	r5, #1	; 0x1
c7e082a0:	1a000016 	bne	c7e08300 <do_imgextract+0x218>
c7e082a4:	ea000007 	b	c7e082c8 <do_imgextract+0x1e0>
					from += tail;
					l -= tail;
				}
			}
#else	/* !(CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG) */
			printf("   Loading part %d ... ", part);
c7e082a8:	e1a01007 	mov	r1, r7
c7e082ac:	e59f00f0 	ldr	r0, [pc, #240]	; c7e083a4 <do_imgextract+0x2bc>
c7e082b0:	eb0001e8 	bl	c7e08a58 <printf>
			memmove((char *) dest, (char *)data, len);
c7e082b4:	e1a0000a 	mov	r0, sl
c7e082b8:	e59d101c 	ldr	r1, [sp, #28]
c7e082bc:	e59d2018 	ldr	r2, [sp, #24]
c7e082c0:	eb006a7e 	bl	c7e22cc0 <memmove>
c7e082c4:	ea000012 	b	c7e08314 <do_imgextract+0x22c>
#endif	/* CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG */
			break;
#ifdef CONFIG_GZIP
		case IH_COMP_GZIP:
			printf("   Uncompressing part %d ... ", part);
c7e082c8:	e1a01007 	mov	r1, r7
c7e082cc:	e59f00d4 	ldr	r0, [pc, #212]	; c7e083a8 <do_imgextract+0x2c0>
c7e082d0:	eb0001e0 	bl	c7e08a58 <printf>
			if (gunzip((void *) dest, unc_len,
c7e082d4:	e1a0000a 	mov	r0, sl
c7e082d8:	e1a03006 	mov	r3, r6
c7e082dc:	e3a01502 	mov	r1, #8388608	; 0x800000
c7e082e0:	e59d201c 	ldr	r2, [sp, #28]
c7e082e4:	eb0063d5 	bl	c7e21240 <gunzip>
c7e082e8:	e3500000 	cmp	r0, #0	; 0x0
c7e082ec:	0a000008 	beq	c7e08314 <do_imgextract+0x22c>
				   (uchar *) data, &len) != 0) {
				puts("GUNZIP ERROR - image not loaded\n");
c7e082f0:	e59f00b4 	ldr	r0, [pc, #180]	; c7e083ac <do_imgextract+0x2c4>
c7e082f4:	eb0001bc 	bl	c7e089ec <puts>
c7e082f8:	e1a00005 	mov	r0, r5
c7e082fc:	ea000016 	b	c7e0835c <do_imgextract+0x274>
				}
			}
			break;
#endif /* CONFIG_BZIP2 */
		default:
			printf("Unimplemented compression type %d\n", comp);
c7e08300:	e1a01005 	mov	r1, r5
c7e08304:	e59f00a4 	ldr	r0, [pc, #164]	; c7e083b0 <do_imgextract+0x2c8>
c7e08308:	eb0001d2 	bl	c7e08a58 <printf>
c7e0830c:	e3a00001 	mov	r0, #1	; 0x1
c7e08310:	ea000011 	b	c7e0835c <do_imgextract+0x274>
			return 1;
		}
		puts("OK\n");
c7e08314:	e59f007c 	ldr	r0, [pc, #124]	; c7e08398 <do_imgextract+0x2b0>
c7e08318:	eb0001b3 	bl	c7e089ec <puts>
	}

	sprintf(pbuf, "%8lx", data);
c7e0831c:	e28d400e 	add	r4, sp, #14	; 0xe
c7e08320:	e59d201c 	ldr	r2, [sp, #28]
c7e08324:	e59f1088 	ldr	r1, [pc, #136]	; c7e083b4 <do_imgextract+0x2cc>
c7e08328:	e1a00004 	mov	r0, r4
c7e0832c:	eb006ebf 	bl	c7e23e30 <sprintf>
	setenv("fileaddr", pbuf);
c7e08330:	e1a01004 	mov	r1, r4
c7e08334:	e59f007c 	ldr	r0, [pc, #124]	; c7e083b8 <do_imgextract+0x2d0>
c7e08338:	ebfffcc4 	bl	c7e07650 <setenv>
	sprintf(pbuf, "%8lx", len);
c7e0833c:	e59f1070 	ldr	r1, [pc, #112]	; c7e083b4 <do_imgextract+0x2cc>
c7e08340:	e59d2018 	ldr	r2, [sp, #24]
c7e08344:	e1a00004 	mov	r0, r4
c7e08348:	eb006eb8 	bl	c7e23e30 <sprintf>
	setenv("filesize", pbuf);
c7e0834c:	e1a01004 	mov	r1, r4
c7e08350:	e59f0064 	ldr	r0, [pc, #100]	; c7e083bc <do_imgextract+0x2d4>
c7e08354:	ebfffcbd 	bl	c7e07650 <setenv>
c7e08358:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e0835c:	e28dd020 	add	sp, sp, #32	; 0x20
c7e08360:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	}

	sprintf(pbuf, "%8lx", data);
	setenv("fileaddr", pbuf);
	sprintf(pbuf, "%8lx", len);
	setenv("filesize", pbuf);
c7e08364:	e3a0a000 	mov	sl, #0	; 0x0
c7e08368:	e1a0700a 	mov	r7, sl
c7e0836c:	eaffff7d 	b	c7e08168 <do_imgextract+0x80>
c7e08370:	c7e353cc 	.word	0xc7e353cc
c7e08374:	c7e2e6f2 	.word	0xc7e2e6f2
c7e08378:	c7e31b0a 	.word	0xc7e31b0a
c7e0837c:	27051956 	.word	0x27051956
c7e08380:	c7e2e5f3 	.word	0xc7e2e5f3
c7e08384:	c7e2e608 	.word	0xc7e2e608
c7e08388:	c7e2e74a 	.word	0xc7e2e74a
c7e0838c:	c7e31b3d 	.word	0xc7e31b3d
c7e08390:	c7e2e61d 	.word	0xc7e2e61d
c7e08394:	c7e2e63b 	.word	0xc7e2e63b
c7e08398:	c7e2e649 	.word	0xc7e2e649
c7e0839c:	c7e31b7d 	.word	0xc7e31b7d
c7e083a0:	c7e31b8d 	.word	0xc7e31b8d
c7e083a4:	c7e31bae 	.word	0xc7e31bae
c7e083a8:	c7e31bc6 	.word	0xc7e31bc6
c7e083ac:	c7e31be4 	.word	0xc7e31be4
c7e083b0:	c7e2e8a6 	.word	0xc7e2e8a6
c7e083b4:	c7e31c05 	.word	0xc7e31c05
c7e083b8:	c7e31c0a 	.word	0xc7e31c0a
c7e083bc:	c7e2e9fc 	.word	0xc7e2e9fc

c7e083c0 <cmd_get_data_size>:

#endif

#ifdef CMD_DATA_SIZE
int cmd_get_data_size(char* arg, int default_size)
{
c7e083c0:	e92d4070 	push	{r4, r5, r6, lr}
c7e083c4:	e1a04001 	mov	r4, r1
c7e083c8:	e1a05000 	mov	r5, r0
	/* Check for a size specification .b, .w or .l.
	 */
	int len = strlen(arg);
c7e083cc:	eb006959 	bl	c7e22938 <strlen>
	if (len > 2 && arg[len-2] == '.') {
c7e083d0:	e3500002 	cmp	r0, #2	; 0x2
c7e083d4:	da000015 	ble	c7e08430 <cmd_get_data_size+0x70>
c7e083d8:	e0850000 	add	r0, r5, r0
c7e083dc:	e5503002 	ldrb	r3, [r0, #-2]
c7e083e0:	e353002e 	cmp	r3, #46	; 0x2e
c7e083e4:	1a000011 	bne	c7e08430 <cmd_get_data_size+0x70>
		switch(arg[len-1]) {
c7e083e8:	e5500001 	ldrb	r0, [r0, #-1]
c7e083ec:	e350006c 	cmp	r0, #108	; 0x6c
c7e083f0:	03a04004 	moveq	r4, #4	; 0x4
c7e083f4:	0a00000d 	beq	c7e08430 <cmd_get_data_size+0x70>
c7e083f8:	8a000002 	bhi	c7e08408 <cmd_get_data_size+0x48>
c7e083fc:	e3500062 	cmp	r0, #98	; 0x62
c7e08400:	1a000009 	bne	c7e0842c <cmd_get_data_size+0x6c>
c7e08404:	ea000006 	b	c7e08424 <cmd_get_data_size+0x64>
c7e08408:	e3500073 	cmp	r0, #115	; 0x73
		case 'b':
			return 1;
		case 'w':
			return 2;
		case 'l':
			return 4;
c7e0840c:	03e04001 	mvneq	r4, #1	; 0x1
{
	/* Check for a size specification .b, .w or .l.
	 */
	int len = strlen(arg);
	if (len > 2 && arg[len-2] == '.') {
		switch(arg[len-1]) {
c7e08410:	0a000006 	beq	c7e08430 <cmd_get_data_size+0x70>
c7e08414:	e3500077 	cmp	r0, #119	; 0x77
c7e08418:	03a04002 	moveq	r4, #2	; 0x2
c7e0841c:	1a000002 	bne	c7e0842c <cmd_get_data_size+0x6c>
c7e08420:	ea000002 	b	c7e08430 <cmd_get_data_size+0x70>
c7e08424:	e3a04001 	mov	r4, #1	; 0x1
c7e08428:	ea000000 	b	c7e08430 <cmd_get_data_size+0x70>
		case 'w':
			return 2;
		case 'l':
			return 4;
		case 's':
			return -2;
c7e0842c:	e3e04000 	mvn	r4, #0	; 0x0
		default:
			return -1;
		}
	}
	return default_size;
}
c7e08430:	e1a00004 	mov	r0, r4
c7e08434:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e08438 <cmd_usage>:
	int len = &__u_boot_cmd_end - &__u_boot_cmd_start;
	return find_cmd_tbl(cmd, &__u_boot_cmd_start, len);
}

int cmd_usage(const cmd_tbl_t *cmdtp)
{
c7e08438:	e92d4010 	push	{r4, lr}
	printf("%s - %s\n\n", cmdtp->name, cmdtp->usage);
c7e0843c:	e5901000 	ldr	r1, [r0]
	int len = &__u_boot_cmd_end - &__u_boot_cmd_start;
	return find_cmd_tbl(cmd, &__u_boot_cmd_start, len);
}

int cmd_usage(const cmd_tbl_t *cmdtp)
{
c7e08440:	e1a04000 	mov	r4, r0
	printf("%s - %s\n\n", cmdtp->name, cmdtp->usage);
c7e08444:	e5902010 	ldr	r2, [r0, #16]
c7e08448:	e59f0038 	ldr	r0, [pc, #56]	; c7e08488 <cmd_usage+0x50>
c7e0844c:	eb000181 	bl	c7e08a58 <printf>

#ifdef	CONFIG_SYS_LONGHELP
	printf("Usage:\n%s ", cmdtp->name);
c7e08450:	e59f0034 	ldr	r0, [pc, #52]	; c7e0848c <cmd_usage+0x54>
c7e08454:	e5941000 	ldr	r1, [r4]
c7e08458:	eb00017e 	bl	c7e08a58 <printf>

	if (!cmdtp->help) {
c7e0845c:	e5940014 	ldr	r0, [r4, #20]
c7e08460:	e3500000 	cmp	r0, #0	; 0x0
c7e08464:	1a000002 	bne	c7e08474 <cmd_usage+0x3c>
		puts ("- No additional help available.\n");
c7e08468:	e59f0020 	ldr	r0, [pc, #32]	; c7e08490 <cmd_usage+0x58>
c7e0846c:	eb00015e 	bl	c7e089ec <puts>
c7e08470:	ea000002 	b	c7e08480 <cmd_usage+0x48>
		return 1;
	}

	puts (cmdtp->help);
c7e08474:	eb00015c 	bl	c7e089ec <puts>
	putc ('\n');
c7e08478:	e3a0000a 	mov	r0, #10	; 0xa
c7e0847c:	eb000205 	bl	c7e08c98 <putc>
#endif	/* CONFIG_SYS_LONGHELP */
	return 1;
}
c7e08480:	e3a00001 	mov	r0, #1	; 0x1
c7e08484:	e8bd8010 	pop	{r4, pc}
c7e08488:	c7e31c91 	.word	0xc7e31c91
c7e0848c:	c7e31c9b 	.word	0xc7e31c9b
c7e08490:	c7e31ca6 	.word	0xc7e31ca6

c7e08494 <find_cmd_tbl>:

/***************************************************************************
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
c7e08494:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	cmd_tbl_t *cmdtp_temp = table;	/*Init value */
	const char *p;
	int len;
	int n_found = 0;

	if (!cmd)
c7e08498:	e250a000 	subs	sl, r0, #0	; 0x0

/***************************************************************************
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
c7e0849c:	e1a04001 	mov	r4, r1
c7e084a0:	e1a05002 	mov	r5, r2
	cmd_tbl_t *cmdtp_temp = table;	/*Init value */
	const char *p;
	int len;
	int n_found = 0;

	if (!cmd)
c7e084a4:	0a00001e 	beq	c7e08524 <find_cmd_tbl+0x90>
		return NULL;
	/*
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);
c7e084a8:	e3a0102e 	mov	r1, #46	; 0x2e
c7e084ac:	eb00690d 	bl	c7e228e8 <strchr>
c7e084b0:	e3500000 	cmp	r0, #0	; 0x0
c7e084b4:	106a7000 	rsbne	r7, sl, r0
c7e084b8:	1a000002 	bne	c7e084c8 <find_cmd_tbl+0x34>
c7e084bc:	e1a0000a 	mov	r0, sl
c7e084c0:	eb00691c 	bl	c7e22938 <strlen>
c7e084c4:	e1a07000 	mov	r7, r0

	for (cmdtp = table;
	     cmdtp != table + table_len;
c7e084c8:	e3a03018 	mov	r3, #24	; 0x18
c7e084cc:	e0294593 	mla	r9, r3, r5, r4
c7e084d0:	e1a06004 	mov	r6, r4
c7e084d4:	e3a05000 	mov	r5, #0	; 0x0
c7e084d8:	ea00000a 	b	c7e08508 <find_cmd_tbl+0x74>
	     cmdtp++) {
		if (strncmp (cmd, cmdtp->name, len) == 0) {
c7e084dc:	e5941000 	ldr	r1, [r4]
c7e084e0:	eb0068ec 	bl	c7e22898 <strncmp>
c7e084e4:	e3500000 	cmp	r0, #0	; 0x0
c7e084e8:	1a000005 	bne	c7e08504 <find_cmd_tbl+0x70>
			if (len == strlen (cmdtp->name))
c7e084ec:	e5940000 	ldr	r0, [r4]
c7e084f0:	eb006910 	bl	c7e22938 <strlen>
c7e084f4:	e1570000 	cmp	r7, r0
c7e084f8:	0a00000a 	beq	c7e08528 <find_cmd_tbl+0x94>
				return cmdtp;	/* full match */

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
c7e084fc:	e2855001 	add	r5, r5, #1	; 0x1
c7e08500:	e1a06004 	mov	r6, r4
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
	     cmdtp != table + table_len;
	     cmdtp++) {
c7e08504:	e2844018 	add	r4, r4, #24	; 0x18
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
	     cmdtp != table + table_len;
c7e08508:	e1540009 	cmp	r4, r9
	     cmdtp++) {
		if (strncmp (cmd, cmdtp->name, len) == 0) {
c7e0850c:	e1a02007 	mov	r2, r7
c7e08510:	e1a0000a 	mov	r0, sl
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
	     cmdtp != table + table_len;
c7e08514:	1afffff0 	bne	c7e084dc <find_cmd_tbl+0x48>

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
		}
	}
	if (n_found == 1) {			/* exactly one match */
c7e08518:	e3550001 	cmp	r5, #1	; 0x1
c7e0851c:	01a04006 	moveq	r4, r6
c7e08520:	0a000000 	beq	c7e08528 <find_cmd_tbl+0x94>
c7e08524:	e3a04000 	mov	r4, #0	; 0x0
		return cmdtp_temp;
	}

	return NULL;	/* not found or ambiguous command */
}
c7e08528:	e1a00004 	mov	r0, r4
c7e0852c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

c7e08530 <find_cmd>:

cmd_tbl_t *find_cmd (const char *cmd)
{
	int len = &__u_boot_cmd_end - &__u_boot_cmd_start;
	return find_cmd_tbl(cmd, &__u_boot_cmd_start, len);
c7e08530:	e59f1014 	ldr	r1, [pc, #20]	; c7e0854c <find_cmd+0x1c>
c7e08534:	e59f3014 	ldr	r3, [pc, #20]	; c7e08550 <find_cmd+0x20>
c7e08538:	e59f2014 	ldr	r2, [pc, #20]	; c7e08554 <find_cmd+0x24>
c7e0853c:	e0613003 	rsb	r3, r1, r3
c7e08540:	e1a031c3 	asr	r3, r3, #3
c7e08544:	e0020293 	mul	r2, r3, r2
c7e08548:	eaffffd1 	b	c7e08494 <find_cmd_tbl>
	...
c7e08554:	aaaaaaab 	.word	0xaaaaaaab

c7e08558 <cmd_process>:
	return result;
}

enum command_ret_t cmd_process(int flag, int argc, char * const argv[],
			       int *repeatable)
{
c7e08558:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e0855c:	e1a04000 	mov	r4, r0
	enum command_ret_t rc = CMD_RET_SUCCESS;
	cmd_tbl_t *cmdtp;

	/* Look up command in command table */
	cmdtp = find_cmd(argv[0]);
c7e08560:	e5920000 	ldr	r0, [r2]
	return result;
}

enum command_ret_t cmd_process(int flag, int argc, char * const argv[],
			       int *repeatable)
{
c7e08564:	e1a06002 	mov	r6, r2
c7e08568:	e1a07001 	mov	r7, r1
c7e0856c:	e1a0a003 	mov	sl, r3
	enum command_ret_t rc = CMD_RET_SUCCESS;
	cmd_tbl_t *cmdtp;

	/* Look up command in command table */
	cmdtp = find_cmd(argv[0]);
c7e08570:	ebffffee 	bl	c7e08530 <find_cmd>
	if (cmdtp == NULL) {
c7e08574:	e2505000 	subs	r5, r0, #0	; 0x0
c7e08578:	1a000003 	bne	c7e0858c <cmd_process+0x34>
		printf("Unknown command '%s' - try 'help'\n", argv[0]);
c7e0857c:	e5961000 	ldr	r1, [r6]
c7e08580:	e59f0078 	ldr	r0, [pc, #120]	; c7e08600 <cmd_process+0xa8>
c7e08584:	eb000133 	bl	c7e08a58 <printf>
c7e08588:	ea00000b 	b	c7e085bc <cmd_process+0x64>
		return 1;
	}

	/* found - check max args */
	if (argc > cmdtp->maxargs)
c7e0858c:	e5953004 	ldr	r3, [r5, #4]
c7e08590:	e1570003 	cmp	r7, r3
c7e08594:	ca00000a 	bgt	c7e085c4 <cmd_process+0x6c>
		rc = CMD_RET_USAGE;

#if defined(CONFIG_CMD_BOOTD)
	/* avoid "bootd" recursion */
	else if (cmdtp->cmd == do_bootd) {
c7e08598:	e595c00c 	ldr	ip, [r5, #12]
c7e0859c:	e59f3060 	ldr	r3, [pc, #96]	; c7e08604 <cmd_process+0xac>
c7e085a0:	e15c0003 	cmp	ip, r3
c7e085a4:	1a000009 	bne	c7e085d0 <cmd_process+0x78>
		if (flag & CMD_FLAG_BOOTD) {
c7e085a8:	e3140002 	tst	r4, #2	; 0x2
			puts("'bootd' recursion detected\n");
			rc = CMD_RET_FAILURE;
		} else {
			flag |= CMD_FLAG_BOOTD;
c7e085ac:	03844002 	orreq	r4, r4, #2	; 0x2
		rc = CMD_RET_USAGE;

#if defined(CONFIG_CMD_BOOTD)
	/* avoid "bootd" recursion */
	else if (cmdtp->cmd == do_bootd) {
		if (flag & CMD_FLAG_BOOTD) {
c7e085b0:	0a000006 	beq	c7e085d0 <cmd_process+0x78>
			puts("'bootd' recursion detected\n");
c7e085b4:	e59f004c 	ldr	r0, [pc, #76]	; c7e08608 <cmd_process+0xb0>
c7e085b8:	eb00010b 	bl	c7e089ec <puts>
c7e085bc:	e3a00001 	mov	r0, #1	; 0x1
c7e085c0:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
	if (!rc) {
		rc = cmd_call(cmdtp, flag, argc, argv);
		*repeatable &= cmdtp->repeatable;
	}
	if (rc == CMD_RET_USAGE)
		rc = cmd_usage(cmdtp);
c7e085c4:	e1a00005 	mov	r0, r5
	return rc;
}
c7e085c8:	e8bd44f0 	pop	{r4, r5, r6, r7, sl, lr}
	if (!rc) {
		rc = cmd_call(cmdtp, flag, argc, argv);
		*repeatable &= cmdtp->repeatable;
	}
	if (rc == CMD_RET_USAGE)
		rc = cmd_usage(cmdtp);
c7e085cc:	eaffff99 	b	c7e08438 <cmd_usage>
 */
static int cmd_call(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	int result;

	result = (cmdtp->cmd)(cmdtp, flag, argc, argv);
c7e085d0:	e1a02007 	mov	r2, r7
c7e085d4:	e1a03006 	mov	r3, r6
c7e085d8:	e1a01004 	mov	r1, r4
c7e085dc:	e1a00005 	mov	r0, r5
c7e085e0:	e12fff3c 	blx	ip
#endif

	/* If OK so far, then do the command */
	if (!rc) {
		rc = cmd_call(cmdtp, flag, argc, argv);
		*repeatable &= cmdtp->repeatable;
c7e085e4:	e59a3000 	ldr	r3, [sl]
c7e085e8:	e5952008 	ldr	r2, [r5, #8]
	}
	if (rc == CMD_RET_USAGE)
c7e085ec:	e3700001 	cmn	r0, #1	; 0x1
#endif

	/* If OK so far, then do the command */
	if (!rc) {
		rc = cmd_call(cmdtp, flag, argc, argv);
		*repeatable &= cmdtp->repeatable;
c7e085f0:	e0033002 	and	r3, r3, r2
c7e085f4:	e58a3000 	str	r3, [sl]
	}
	if (rc == CMD_RET_USAGE)
c7e085f8:	18bd84f0 	popne	{r4, r5, r6, r7, sl, pc}
c7e085fc:	eafffff0 	b	c7e085c4 <cmd_process+0x6c>
c7e08600:	c7e31cc7 	.word	0xc7e31cc7
c7e08604:	c7e01aa0 	.word	0xc7e01aa0
c7e08608:	c7e31cea 	.word	0xc7e31cea

c7e0860c <_do_help>:
 * for long help messages
 */

int _do_help (cmd_tbl_t *cmd_start, int cmd_items, cmd_tbl_t * cmdtp, int
	      flag, int argc, char * const argv[])
{
c7e0860c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e08610:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e08614:	e24dd008 	sub	sp, sp, #8	; 0x8
c7e08618:	e59ba004 	ldr	sl, [fp, #4]
c7e0861c:	e1a07000 	mov	r7, r0
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
c7e08620:	e35a0001 	cmp	sl, #1	; 0x1
 * for long help messages
 */

int _do_help (cmd_tbl_t *cmd_start, int cmd_items, cmd_tbl_t * cmdtp, int
	      flag, int argc, char * const argv[])
{
c7e08624:	e1a09001 	mov	r9, r1
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
c7e08628:	159b5008 	ldrne	r5, [fp, #8]
c7e0862c:	13a06001 	movne	r6, #1	; 0x1
c7e08630:	13a04000 	movne	r4, #0	; 0x0
c7e08634:	1a00004b 	bne	c7e08768 <_do_help+0x15c>
		cmd_tbl_t *cmd_array[cmd_items];
c7e08638:	e1a03101 	lsl	r3, r1, #2
c7e0863c:	e283300e 	add	r3, r3, #14	; 0xe
c7e08640:	e3c33007 	bic	r3, r3, #7	; 0x7
	      flag, int argc, char * const argv[])
{
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
c7e08644:	e50bd020 	str	sp, [fp, #-32]
		cmd_tbl_t *cmd_array[cmd_items];
c7e08648:	e04dd003 	sub	sp, sp, r3
c7e0864c:	e1a0a00d 	mov	sl, sp
c7e08650:	e3a03000 	mov	r3, #0	; 0x0
c7e08654:	ea000002 	b	c7e08664 <_do_help+0x58>
		int i, j, swaps;

		/* Make array of commands from .uboot_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
			cmd_array[i] = cmdtp++;
c7e08658:	e78a0103 	str	r0, [sl, r3, lsl #2]
c7e0865c:	e2800018 	add	r0, r0, #24	; 0x18
		cmd_tbl_t *cmd_array[cmd_items];
		int i, j, swaps;

		/* Make array of commands from .uboot_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
c7e08660:	e2833001 	add	r3, r3, #1	; 0x1
c7e08664:	e1530009 	cmp	r3, r9
c7e08668:	bafffffa 	blt	c7e08658 <_do_help+0x4c>
			cmd_array[i] = cmdtp++;
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
c7e0866c:	e2497001 	sub	r7, r9, #1	; 0x1
c7e08670:	ea000014 	b	c7e086c8 <_do_help+0xbc>
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
c7e08674:	e5943000 	ldr	r3, [r4]
c7e08678:	e5942004 	ldr	r2, [r4, #4]
c7e0867c:	e5930000 	ldr	r0, [r3]
c7e08680:	e5921000 	ldr	r1, [r2]
c7e08684:	eb006875 	bl	c7e22860 <strcmp>
c7e08688:	e3500000 	cmp	r0, #0	; 0x0
					    cmd_array[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
c7e0868c:	c5942000 	ldrgt	r2, [r4]
					cmd_array[j] = cmd_array[j + 1];
c7e08690:	c5943004 	ldrgt	r3, [r4, #4]

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
c7e08694:	e2855001 	add	r5, r5, #1	; 0x1
					    cmd_array[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
c7e08698:	c5843000 	strgt	r3, [r4]
					cmd_array[j + 1] = tmp;
c7e0869c:	c5842004 	strgt	r2, [r4, #4]
					++swaps;
c7e086a0:	c2866001 	addgt	r6, r6, #1	; 0x1
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
c7e086a4:	e1550007 	cmp	r5, r7
					    cmd_array[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
					cmd_array[j + 1] = tmp;
					++swaps;
c7e086a8:	e2844004 	add	r4, r4, #4	; 0x4
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
c7e086ac:	bafffff0 	blt	c7e08674 <_do_help+0x68>
					cmd_array[j] = cmd_array[j + 1];
					cmd_array[j + 1] = tmp;
					++swaps;
				}
			}
			if (!swaps)
c7e086b0:	e3560000 	cmp	r6, #0	; 0x0
c7e086b4:	1a000002 	bne	c7e086c4 <_do_help+0xb8>
c7e086b8:	e3a05000 	mov	r5, #0	; 0x0
c7e086bc:	e1a04005 	mov	r4, r5
c7e086c0:	ea000015 	b	c7e0871c <_do_help+0x110>
		for (i = 0; i < cmd_items; i++) {
			cmd_array[i] = cmdtp++;
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
c7e086c4:	e2477001 	sub	r7, r7, #1	; 0x1
c7e086c8:	e3570000 	cmp	r7, #0	; 0x0
c7e086cc:	dafffff9 	ble	c7e086b8 <_do_help+0xac>
c7e086d0:	e3a05000 	mov	r5, #0	; 0x0
c7e086d4:	e1a0400a 	mov	r4, sl
c7e086d8:	e1a06005 	mov	r6, r5
c7e086dc:	eaffffe4 	b	c7e08674 <_do_help+0x68>
				break;
		}

		/* print short help (usage) */
		for (i = 0; i < cmd_items; i++) {
			const char *usage = cmd_array[i]->usage;
c7e086e0:	e79a3004 	ldr	r3, [sl, r4]
c7e086e4:	e5936010 	ldr	r6, [r3, #16]

			/* allow user abort */
			if (ctrlc ())
c7e086e8:	eb000186 	bl	c7e08d08 <ctrlc>
c7e086ec:	e3500000 	cmp	r0, #0	; 0x0
				return 1;
			if (usage == NULL)
				continue;
			printf("%-*s- %s\n", CONFIG_SYS_HELP_CMD_WIDTH,
c7e086f0:	e1a03006 	mov	r3, r6
c7e086f4:	e3a01008 	mov	r1, #8	; 0x8
c7e086f8:	e59f0084 	ldr	r0, [pc, #132]	; c7e08784 <_do_help+0x178>
		/* print short help (usage) */
		for (i = 0; i < cmd_items; i++) {
			const char *usage = cmd_array[i]->usage;

			/* allow user abort */
			if (ctrlc ())
c7e086fc:	13a04001 	movne	r4, #1	; 0x1
c7e08700:	1a000009 	bne	c7e0872c <_do_help+0x120>
				return 1;
			if (usage == NULL)
c7e08704:	e3560000 	cmp	r6, #0	; 0x0
c7e08708:	0a000002 	beq	c7e08718 <_do_help+0x10c>
				continue;
			printf("%-*s- %s\n", CONFIG_SYS_HELP_CMD_WIDTH,
c7e0870c:	e79a2004 	ldr	r2, [sl, r4]
c7e08710:	e5922000 	ldr	r2, [r2]
c7e08714:	eb0000cf 	bl	c7e08a58 <printf>
			if (!swaps)
				break;
		}

		/* print short help (usage) */
		for (i = 0; i < cmd_items; i++) {
c7e08718:	e2844004 	add	r4, r4, #4	; 0x4
c7e0871c:	e1550009 	cmp	r5, r9
c7e08720:	e2855001 	add	r5, r5, #1	; 0x1
c7e08724:	baffffed 	blt	c7e086e0 <_do_help+0xd4>
c7e08728:	e3a04000 	mov	r4, #0	; 0x0
c7e0872c:	e51bd020 	ldr	sp, [fp, #-32]
c7e08730:	ea000010 	b	c7e08778 <_do_help+0x16c>
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
c7e08734:	e5950004 	ldr	r0, [r5, #4]
c7e08738:	ebffff55 	bl	c7e08494 <find_cmd_tbl>
c7e0873c:	e3500000 	cmp	r0, #0	; 0x0
c7e08740:	0a000002 	beq	c7e08750 <_do_help+0x144>
			rcode |= cmd_usage(cmdtp);
c7e08744:	ebffff3b 	bl	c7e08438 <cmd_usage>
c7e08748:	e1844000 	orr	r4, r4, r0
c7e0874c:	ea000003 	b	c7e08760 <_do_help+0x154>
		} else {
			printf ("Unknown command '%s' - try 'help'"
c7e08750:	e5951004 	ldr	r1, [r5, #4]
c7e08754:	e59f002c 	ldr	r0, [pc, #44]	; c7e08788 <_do_help+0x17c>
c7e08758:	eb0000be 	bl	c7e08a58 <printf>
c7e0875c:	e3a04001 	mov	r4, #1	; 0x1
		return 0;
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
c7e08760:	e2866001 	add	r6, r6, #1	; 0x1
c7e08764:	e2855004 	add	r5, r5, #4	; 0x4
c7e08768:	e156000a 	cmp	r6, sl
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
c7e0876c:	e1a01007 	mov	r1, r7
c7e08770:	e1a02009 	mov	r2, r9
		return 0;
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
c7e08774:	baffffee 	blt	c7e08734 <_do_help+0x128>
					);
			rcode = 1;
		}
	}
	return rcode;
}
c7e08778:	e1a00004 	mov	r0, r4
c7e0877c:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e08780:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e08784:	c7e31d06 	.word	0xc7e31d06
c7e08788:	c7e31d10 	.word	0xc7e31d10

c7e0878c <console_setfile>:
#endif /* CONFIG_SYS_CONSOLE_OVERWRITE_ROUTINE */

#endif /* CONFIG_SYS_CONSOLE_IS_IN_ENV */

static int console_setfile(int file, struct stdio_dev * dev)
{
c7e0878c:	e92d4070 	push	{r4, r5, r6, lr}
	int error = 0;

	if (dev == NULL)
c7e08790:	e2515000 	subs	r5, r1, #0	; 0x0
#endif /* CONFIG_SYS_CONSOLE_OVERWRITE_ROUTINE */

#endif /* CONFIG_SYS_CONSOLE_IS_IN_ENV */

static int console_setfile(int file, struct stdio_dev * dev)
{
c7e08794:	e1a04000 	mov	r4, r0
	int error = 0;

	if (dev == NULL)
c7e08798:	0a000020 	beq	c7e08820 <console_setfile+0x94>
		return -1;

	switch (file) {
c7e0879c:	e3500002 	cmp	r0, #2	; 0x2
c7e087a0:	8a00001e 	bhi	c7e08820 <console_setfile+0x94>
	case stdin:
	case stdout:
	case stderr:
		/* Start new device */
		if (dev->start) {
c7e087a4:	e5950018 	ldr	r0, [r5, #24]
c7e087a8:	e3500000 	cmp	r0, #0	; 0x0
c7e087ac:	01a06000 	moveq	r6, r0
c7e087b0:	0a000002 	beq	c7e087c0 <console_setfile+0x34>
			error = dev->start();
c7e087b4:	e12fff30 	blx	r0
			/* If it's not started dont use it */
			if (error < 0)
c7e087b8:	e2506000 	subs	r6, r0, #0	; 0x0
c7e087bc:	ba000018 	blt	c7e08824 <console_setfile+0x98>
				break;
		}

		/* Assign the new device (leaving the existing one started) */
		stdio_devices[file] = dev;
c7e087c0:	e59f3064 	ldr	r3, [pc, #100]	; c7e0882c <console_setfile+0xa0>

		/*
		 * Update monitor functions
		 * (to use the console stuff by other applications)
		 */
		switch (file) {
c7e087c4:	e3540000 	cmp	r4, #0	; 0x0
			if (error < 0)
				break;
		}

		/* Assign the new device (leaving the existing one started) */
		stdio_devices[file] = dev;
c7e087c8:	e7835104 	str	r5, [r3, r4, lsl #2]

		/*
		 * Update monitor functions
		 * (to use the console stuff by other applications)
		 */
		switch (file) {
c7e087cc:	0a000002 	beq	c7e087dc <console_setfile+0x50>
c7e087d0:	e3540001 	cmp	r4, #1	; 0x1
c7e087d4:	1a000012 	bne	c7e08824 <console_setfile+0x98>
c7e087d8:	ea000006 	b	c7e087f8 <console_setfile+0x6c>
		case stdin:
			gd->jt[XF_getc] = dev->getc;
c7e087dc:	e5982054 	ldr	r2, [r8, #84]
			gd->jt[XF_tstc] = dev->tstc;
c7e087e0:	e5950028 	ldr	r0, [r5, #40]
c7e087e4:	e5981054 	ldr	r1, [r8, #84]
		 * Update monitor functions
		 * (to use the console stuff by other applications)
		 */
		switch (file) {
		case stdin:
			gd->jt[XF_getc] = dev->getc;
c7e087e8:	e595302c 	ldr	r3, [r5, #44]
c7e087ec:	e5823004 	str	r3, [r2, #4]
			gd->jt[XF_tstc] = dev->tstc;
c7e087f0:	e5810008 	str	r0, [r1, #8]
c7e087f4:	ea00000a 	b	c7e08824 <console_setfile+0x98>
			break;
		case stdout:
			gd->jt[XF_putc] = dev->putc;
c7e087f8:	e5980054 	ldr	r0, [r8, #84]
			gd->jt[XF_puts] = dev->puts;
c7e087fc:	e5954024 	ldr	r4, [r5, #36]
c7e08800:	e5981054 	ldr	r1, [r8, #84]
		case stdin:
			gd->jt[XF_getc] = dev->getc;
			gd->jt[XF_tstc] = dev->tstc;
			break;
		case stdout:
			gd->jt[XF_putc] = dev->putc;
c7e08804:	e5952020 	ldr	r2, [r5, #32]
			gd->jt[XF_puts] = dev->puts;
			gd->jt[XF_printf] = printf;
c7e08808:	e598c054 	ldr	ip, [r8, #84]
c7e0880c:	e59f301c 	ldr	r3, [pc, #28]	; c7e08830 <console_setfile+0xa4>
		case stdin:
			gd->jt[XF_getc] = dev->getc;
			gd->jt[XF_tstc] = dev->tstc;
			break;
		case stdout:
			gd->jt[XF_putc] = dev->putc;
c7e08810:	e580200c 	str	r2, [r0, #12]
			gd->jt[XF_puts] = dev->puts;
c7e08814:	e5814010 	str	r4, [r1, #16]
			gd->jt[XF_printf] = printf;
c7e08818:	e58c3014 	str	r3, [ip, #20]
c7e0881c:	ea000000 	b	c7e08824 <console_setfile+0x98>
c7e08820:	e3e06000 	mvn	r6, #0	; 0x0

	default:		/* Invalid file ID */
		error = -1;
	}
	return error;
}
c7e08824:	e1a00006 	mov	r0, r6
c7e08828:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0882c:	c7e419fc 	.word	0xc7e419fc
c7e08830:	c7e08a58 	.word	0xc7e08a58

c7e08834 <fgetc>:
	return i;
}

int fgetc(int file)
{
	if (file < MAX_FILES) {
c7e08834:	e3500002 	cmp	r0, #2	; 0x2
	serial_puts(printbuffer);
	return i;
}

int fgetc(int file)
{
c7e08838:	e92d4010 	push	{r4, lr}
	if (file < MAX_FILES) {
c7e0883c:	c3e00000 	mvngt	r0, #0	; 0x0
c7e08840:	c8bd8010 	popgt	{r4, pc}
	iomux_doenv(file, dev->name);
}
#else
static inline int console_getc(int file)
{
	return stdio_devices[file]->getc();
c7e08844:	e59f300c 	ldr	r3, [pc, #12]	; c7e08858 <fgetc+0x24>
c7e08848:	e7933100 	ldr	r3, [r3, r0, lsl #2]
c7e0884c:	e1a0e00f 	mov	lr, pc
c7e08850:	e593f02c 	ldr	pc, [r3, #44]
		return console_getc(file);
#endif
	}

	return -1;
}
c7e08854:	e8bd8010 	pop	{r4, pc}
c7e08858:	c7e419fc 	.word	0xc7e419fc

c7e0885c <ftstc>:

int ftstc(int file)
{
	if (file < MAX_FILES)
c7e0885c:	e3500002 	cmp	r0, #2	; 0x2

	return -1;
}

int ftstc(int file)
{
c7e08860:	e92d4010 	push	{r4, lr}
	if (file < MAX_FILES)
c7e08864:	c3e00000 	mvngt	r0, #0	; 0x0
c7e08868:	c8bd8010 	popgt	{r4, pc}
	return stdio_devices[file]->getc();
}

static inline int console_tstc(int file)
{
	return stdio_devices[file]->tstc();
c7e0886c:	e59f300c 	ldr	r3, [pc, #12]	; c7e08880 <ftstc+0x24>
c7e08870:	e7933100 	ldr	r3, [r3, r0, lsl #2]
c7e08874:	e1a0e00f 	mov	lr, pc
c7e08878:	e593f028 	ldr	pc, [r3, #40]
{
	if (file < MAX_FILES)
		return console_tstc(file);

	return -1;
}
c7e0887c:	e8bd8010 	pop	{r4, pc}
c7e08880:	c7e419fc 	.word	0xc7e419fc

c7e08884 <fputc>:

void fputc(int file, const char c)
{
	if (file < MAX_FILES)
c7e08884:	e3500002 	cmp	r0, #2	; 0x2

	return -1;
}

void fputc(int file, const char c)
{
c7e08888:	e1a02000 	mov	r2, r0
c7e0888c:	e92d4010 	push	{r4, lr}
c7e08890:	e1a00001 	mov	r0, r1
	if (file < MAX_FILES)
c7e08894:	c8bd8010 	popgt	{r4, pc}
	return stdio_devices[file]->tstc();
}

static inline void console_putc(int file, const char c)
{
	stdio_devices[file]->putc(c);
c7e08898:	e59f300c 	ldr	r3, [pc, #12]	; c7e088ac <fputc+0x28>
c7e0889c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
c7e088a0:	e1a0e00f 	mov	lr, pc
c7e088a4:	e593f020 	ldr	pc, [r3, #32]
c7e088a8:	e8bd8010 	pop	{r4, pc}
c7e088ac:	c7e419fc 	.word	0xc7e419fc

c7e088b0 <fputs>:
		console_putc(file, c);
}

void fputs(int file, const char *s)
{
	if (file < MAX_FILES)
c7e088b0:	e3500002 	cmp	r0, #2	; 0x2
	if (file < MAX_FILES)
		console_putc(file, c);
}

void fputs(int file, const char *s)
{
c7e088b4:	e1a02000 	mov	r2, r0
c7e088b8:	e92d4010 	push	{r4, lr}
c7e088bc:	e1a00001 	mov	r0, r1
	if (file < MAX_FILES)
c7e088c0:	c8bd8010 	popgt	{r4, pc}
	stdio_devices[file]->putc(c);
}

static inline void console_puts(int file, const char *s)
{
	stdio_devices[file]->puts(s);
c7e088c4:	e59f300c 	ldr	r3, [pc, #12]	; c7e088d8 <fputs+0x28>
c7e088c8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
c7e088cc:	e1a0e00f 	mov	lr, pc
c7e088d0:	e593f024 	ldr	pc, [r3, #36]
c7e088d4:	e8bd8010 	pop	{r4, pc}
c7e088d8:	c7e419fc 	.word	0xc7e419fc

c7e088dc <disable_ctrlc>:
/* pass 1 to disable ctrlc() checking, 0 to enable.
 * returns previous state
 */
int disable_ctrlc(int disable)
{
	int prev = ctrlc_disabled;	/* save previous state */
c7e088dc:	e59f300c 	ldr	r3, [pc, #12]	; c7e088f0 <disable_ctrlc+0x14>
c7e088e0:	e5932000 	ldr	r2, [r3]

	ctrlc_disabled = disable;
c7e088e4:	e5830000 	str	r0, [r3]
	return prev;
}
c7e088e8:	e1a00002 	mov	r0, r2
c7e088ec:	e12fff1e 	bx	lr
c7e088f0:	c7e401b8 	.word	0xc7e401b8

c7e088f4 <had_ctrlc>:

int had_ctrlc (void)
{
c7e088f4:	e59f3004 	ldr	r3, [pc, #4]	; c7e08900 <had_ctrlc+0xc>
	return ctrlc_was_pressed;
}
c7e088f8:	e5930004 	ldr	r0, [r3, #4]
c7e088fc:	e12fff1e 	bx	lr
c7e08900:	c7e401b8 	.word	0xc7e401b8

c7e08904 <clear_ctrlc>:

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
c7e08904:	e59f3008 	ldr	r3, [pc, #8]	; c7e08914 <clear_ctrlc+0x10>
c7e08908:	e3a02000 	mov	r2, #0	; 0x0
c7e0890c:	e5832004 	str	r2, [r3, #4]
}
c7e08910:	e12fff1e 	bx	lr
c7e08914:	c7e401b8 	.word	0xc7e401b8

c7e08918 <dbg>:
	cursor += strlen(printbuffer);

}
#else
inline void dbg(const char *fmt, ...)
{
c7e08918:	e92d000f 	push	{r0, r1, r2, r3}
}
c7e0891c:	e28dd010 	add	sp, sp, #16	; 0x10
c7e08920:	e12fff1e 	bx	lr

c7e08924 <console_init_f>:
}

/* Called before relocation - use serial functions */
int console_init_f(void)
{
	gd->have_console = 1;
c7e08924:	e3a03001 	mov	r3, #1	; 0x1
c7e08928:	e588300c 	str	r3, [r8, #12]
#endif

	print_pre_console_buffer();

	return 0;
}
c7e0892c:	e3a00000 	mov	r0, #0	; 0x0
c7e08930:	e12fff1e 	bx	lr

c7e08934 <search_device>:
#endif

/** U-Boot INIT FUNCTIONS *************************************************/

struct stdio_dev *search_device(int flags, const char *name)
{
c7e08934:	e92d4010 	push	{r4, lr}
c7e08938:	e1a04000 	mov	r4, r0
	struct stdio_dev *dev;

	dev = stdio_get_by_name(name);
c7e0893c:	e1a00001 	mov	r0, r1
c7e08940:	eb001871 	bl	c7e0eb0c <stdio_get_by_name>

	if (dev && (dev->flags & flags))
c7e08944:	e3500000 	cmp	r0, #0	; 0x0
c7e08948:	08bd8010 	popeq	{r4, pc}
c7e0894c:	e5903000 	ldr	r3, [r0]
c7e08950:	e0143003 	ands	r3, r4, r3
c7e08954:	01a00003 	moveq	r0, r3
		return dev;

	return NULL;
}
c7e08958:	e8bd8010 	pop	{r4, pc}

c7e0895c <console_assign>:

int console_assign(int file, const char *devname)
{
c7e0895c:	e92d4010 	push	{r4, lr}
	int flag;
	struct stdio_dev *dev;

	/* Check for valid file */
	switch (file) {
c7e08960:	e2504000 	subs	r4, r0, #0	; 0x0
c7e08964:	03a00001 	moveq	r0, #1	; 0x1
c7e08968:	0a000003 	beq	c7e0897c <console_assign+0x20>
c7e0896c:	ba000008 	blt	c7e08994 <console_assign+0x38>
c7e08970:	e3540002 	cmp	r4, #2	; 0x2
c7e08974:	d3a00002 	movle	r0, #2	; 0x2
c7e08978:	ca000005 	bgt	c7e08994 <console_assign+0x38>
		return -1;
	}

	/* Check for valid device name */

	dev = search_device(flag, devname);
c7e0897c:	ebffffec 	bl	c7e08934 <search_device>

	if (dev)
c7e08980:	e2501000 	subs	r1, r0, #0	; 0x0
c7e08984:	0a000002 	beq	c7e08994 <console_assign+0x38>
		return console_setfile(file, dev);
c7e08988:	e1a00004 	mov	r0, r4

	return -1;
}
c7e0898c:	e8bd4010 	pop	{r4, lr}
	/* Check for valid device name */

	dev = search_device(flag, devname);

	if (dev)
		return console_setfile(file, dev);
c7e08990:	eaffff7d 	b	c7e0878c <console_setfile>

	return -1;
}
c7e08994:	e3e00000 	mvn	r0, #0	; 0x0
c7e08998:	e8bd8010 	pop	{r4, pc}

c7e0899c <fprintf>:
	if (file < MAX_FILES)
		console_puts(file, s);
}

int fprintf(int file, const char *fmt, ...)
{
c7e0899c:	e92d000e 	push	{r1, r2, r3}
c7e089a0:	e92d4070 	push	{r4, r5, r6, lr}
c7e089a4:	e24ddf63 	sub	sp, sp, #396	; 0x18c
	va_list args;
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

	va_start(args, fmt);
c7e089a8:	e28d3e1a 	add	r3, sp, #416	; 0x1a0

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e089ac:	e28d5004 	add	r5, sp, #4	; 0x4
	if (file < MAX_FILES)
		console_puts(file, s);
}

int fprintf(int file, const char *fmt, ...)
{
c7e089b0:	e1a06000 	mov	r6, r0
	va_start(args, fmt);

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e089b4:	e1a02003 	mov	r2, r3
c7e089b8:	e59d119c 	ldr	r1, [sp, #412]
c7e089bc:	e1a00005 	mov	r0, r5
{
	va_list args;
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

	va_start(args, fmt);
c7e089c0:	e58d3184 	str	r3, [sp, #388]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e089c4:	eb006b74 	bl	c7e2379c <vsprintf>
	va_end(args);

	/* Send to desired file */
	fputs(file, printbuffer);
c7e089c8:	e1a01005 	mov	r1, r5
	va_start(args, fmt);

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e089cc:	e1a04000 	mov	r4, r0
	va_end(args);

	/* Send to desired file */
	fputs(file, printbuffer);
c7e089d0:	e1a00006 	mov	r0, r6
c7e089d4:	ebffffb5 	bl	c7e088b0 <fputs>
	return i;
}
c7e089d8:	e1a00004 	mov	r0, r4
c7e089dc:	e28ddf63 	add	sp, sp, #396	; 0x18c
c7e089e0:	e8bd4070 	pop	{r4, r5, r6, lr}
c7e089e4:	e28dd00c 	add	sp, sp, #12	; 0xc
c7e089e8:	e12fff1e 	bx	lr

c7e089ec <puts>:
#ifdef CONFIG_DISABLE_CONSOLE
	if (gd->flags & GD_FLG_DISABLE_CONSOLE)
		return;
#endif

	if (!gd->have_console)
c7e089ec:	e598300c 	ldr	r3, [r8, #12]
		serial_putc(c);
	}
}

void puts(const char *s)
{
c7e089f0:	e1a01000 	mov	r1, r0
#ifdef CONFIG_DISABLE_CONSOLE
	if (gd->flags & GD_FLG_DISABLE_CONSOLE)
		return;
#endif

	if (!gd->have_console)
c7e089f4:	e3530000 	cmp	r3, #0	; 0x0
c7e089f8:	012fff1e 	bxeq	lr
		return pre_console_puts(s);

	if (gd->flags & GD_FLG_DEVINIT) {
c7e089fc:	e5983004 	ldr	r3, [r8, #4]
c7e08a00:	e3130002 	tst	r3, #2	; 0x2
c7e08a04:	0a000001 	beq	c7e08a10 <puts+0x24>
		/* Send to the standard output */
		fputs(stdout, s);
c7e08a08:	e3a00001 	mov	r0, #1	; 0x1
c7e08a0c:	eaffffa7 	b	c7e088b0 <fputs>
	} else {
		/* Send directly to the handler */
		serial_puts(s);
c7e08a10:	ea00459a 	b	c7e1a080 <serial_puts>

c7e08a14 <vprintf>:
	puts(printbuffer);
	return i;
}

int vprintf(const char *fmt, va_list args)
{
c7e08a14:	e92d4030 	push	{r4, r5, lr}
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

#ifndef CONFIG_PRE_CONSOLE_BUFFER
	if (!gd->have_console)
c7e08a18:	e598300c 	ldr	r3, [r8, #12]
	puts(printbuffer);
	return i;
}

int vprintf(const char *fmt, va_list args)
{
c7e08a1c:	e24ddf61 	sub	sp, sp, #388	; 0x184
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

#ifndef CONFIG_PRE_CONSOLE_BUFFER
	if (!gd->have_console)
c7e08a20:	e3530000 	cmp	r3, #0	; 0x0
	puts(printbuffer);
	return i;
}

int vprintf(const char *fmt, va_list args)
{
c7e08a24:	e1a02001 	mov	r2, r1
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

#ifndef CONFIG_PRE_CONSOLE_BUFFER
	if (!gd->have_console)
c7e08a28:	01a05003 	moveq	r5, r3
c7e08a2c:	0a000006 	beq	c7e08a4c <vprintf+0x38>
#endif

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e08a30:	e1a01000 	mov	r1, r0
c7e08a34:	e1a0000d 	mov	r0, sp
c7e08a38:	eb006b57 	bl	c7e2379c <vsprintf>
c7e08a3c:	e1a05000 	mov	r5, r0

	/* Print the string */
	puts(printbuffer);
c7e08a40:	e1a0000d 	mov	r0, sp
#endif

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e08a44:	e1a0400d 	mov	r4, sp

	/* Print the string */
	puts(printbuffer);
c7e08a48:	ebffffe7 	bl	c7e089ec <puts>
	return i;
}
c7e08a4c:	e1a00005 	mov	r0, r5
c7e08a50:	e28ddf61 	add	sp, sp, #388	; 0x184
c7e08a54:	e8bd8030 	pop	{r4, r5, pc}

c7e08a58 <printf>:
		serial_puts(s);
	}
}

int printf(const char *fmt, ...)
{
c7e08a58:	e92d000f 	push	{r0, r1, r2, r3}
c7e08a5c:	e92d4030 	push	{r4, r5, lr}
	va_list args;
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

#ifndef CONFIG_PRE_CONSOLE_BUFFER
	if (!gd->have_console)
c7e08a60:	e598000c 	ldr	r0, [r8, #12]
		serial_puts(s);
	}
}

int printf(const char *fmt, ...)
{
c7e08a64:	e24ddf63 	sub	sp, sp, #396	; 0x18c
	va_list args;
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

#ifndef CONFIG_PRE_CONSOLE_BUFFER
	if (!gd->have_console)
c7e08a68:	e3500000 	cmp	r0, #0	; 0x0
c7e08a6c:	01a05000 	moveq	r5, r0
c7e08a70:	0a000009 	beq	c7e08a9c <printf+0x44>
		return 0;
#endif

	va_start(args, fmt);
c7e08a74:	e28d3f67 	add	r3, sp, #412	; 0x19c

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e08a78:	e28d4004 	add	r4, sp, #4	; 0x4
c7e08a7c:	e59d1198 	ldr	r1, [sp, #408]
c7e08a80:	e1a02003 	mov	r2, r3
c7e08a84:	e1a00004 	mov	r0, r4
#ifndef CONFIG_PRE_CONSOLE_BUFFER
	if (!gd->have_console)
		return 0;
#endif

	va_start(args, fmt);
c7e08a88:	e58d3184 	str	r3, [sp, #388]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e08a8c:	eb006b42 	bl	c7e2379c <vsprintf>
c7e08a90:	e1a05000 	mov	r5, r0
	va_end(args);

	/* Print the string */
	puts(printbuffer);
c7e08a94:	e1a00004 	mov	r0, r4
c7e08a98:	ebffffd3 	bl	c7e089ec <puts>
	return i;
}
c7e08a9c:	e1a00005 	mov	r0, r5
c7e08aa0:	e28ddf63 	add	sp, sp, #396	; 0x18c
c7e08aa4:	e8bd4030 	pop	{r4, r5, lr}
c7e08aa8:	e28dd010 	add	sp, sp, #16	; 0x10
c7e08aac:	e12fff1e 	bx	lr

c7e08ab0 <stdio_print_current_devices>:

	return 0;
}

void stdio_print_current_devices(void)
{
c7e08ab0:	e92d4010 	push	{r4, lr}
#ifndef CONFIG_SYS_CONSOLE_INFO_QUIET
	/* Print information */
	puts("In:    ");
c7e08ab4:	e59f008c 	ldr	r0, [pc, #140]	; c7e08b48 <stdio_print_current_devices+0x98>
c7e08ab8:	ebffffcb 	bl	c7e089ec <puts>
	if (stdio_devices[stdin] == NULL) {
c7e08abc:	e59f3088 	ldr	r3, [pc, #136]	; c7e08b4c <stdio_print_current_devices+0x9c>
c7e08ac0:	e5931000 	ldr	r1, [r3]
c7e08ac4:	e3510000 	cmp	r1, #0	; 0x0
c7e08ac8:	1a000002 	bne	c7e08ad8 <stdio_print_current_devices+0x28>
		puts("No input devices available!\n");
c7e08acc:	e59f007c 	ldr	r0, [pc, #124]	; c7e08b50 <stdio_print_current_devices+0xa0>
c7e08ad0:	ebffffc5 	bl	c7e089ec <puts>
c7e08ad4:	ea000002 	b	c7e08ae4 <stdio_print_current_devices+0x34>
	} else {
		printf ("%s\n", stdio_devices[stdin]->name);
c7e08ad8:	e2811008 	add	r1, r1, #8	; 0x8
c7e08adc:	e59f0070 	ldr	r0, [pc, #112]	; c7e08b54 <stdio_print_current_devices+0xa4>
c7e08ae0:	ebffffdc 	bl	c7e08a58 <printf>
	}

	puts("Out:   ");
c7e08ae4:	e59f006c 	ldr	r0, [pc, #108]	; c7e08b58 <stdio_print_current_devices+0xa8>
c7e08ae8:	ebffffbf 	bl	c7e089ec <puts>
	if (stdio_devices[stdout] == NULL) {
c7e08aec:	e59f3058 	ldr	r3, [pc, #88]	; c7e08b4c <stdio_print_current_devices+0x9c>
c7e08af0:	e5931004 	ldr	r1, [r3, #4]
c7e08af4:	e3510000 	cmp	r1, #0	; 0x0
c7e08af8:	1a000002 	bne	c7e08b08 <stdio_print_current_devices+0x58>
		puts("No output devices available!\n");
c7e08afc:	e59f0058 	ldr	r0, [pc, #88]	; c7e08b5c <stdio_print_current_devices+0xac>
c7e08b00:	ebffffb9 	bl	c7e089ec <puts>
c7e08b04:	ea000002 	b	c7e08b14 <stdio_print_current_devices+0x64>
	} else {
		printf ("%s\n", stdio_devices[stdout]->name);
c7e08b08:	e2811008 	add	r1, r1, #8	; 0x8
c7e08b0c:	e59f0040 	ldr	r0, [pc, #64]	; c7e08b54 <stdio_print_current_devices+0xa4>
c7e08b10:	ebffffd0 	bl	c7e08a58 <printf>
	}

	puts("Err:   ");
c7e08b14:	e59f0044 	ldr	r0, [pc, #68]	; c7e08b60 <stdio_print_current_devices+0xb0>
c7e08b18:	ebffffb3 	bl	c7e089ec <puts>
	if (stdio_devices[stderr] == NULL) {
c7e08b1c:	e59f3028 	ldr	r3, [pc, #40]	; c7e08b4c <stdio_print_current_devices+0x9c>
c7e08b20:	e5931008 	ldr	r1, [r3, #8]
c7e08b24:	e3510000 	cmp	r1, #0	; 0x0
c7e08b28:	1a000002 	bne	c7e08b38 <stdio_print_current_devices+0x88>
		puts("No error devices available!\n");
c7e08b2c:	e59f0030 	ldr	r0, [pc, #48]	; c7e08b64 <stdio_print_current_devices+0xb4>
	} else {
		printf ("%s\n", stdio_devices[stderr]->name);
	}
#endif /* CONFIG_SYS_CONSOLE_INFO_QUIET */
}
c7e08b30:	e8bd4010 	pop	{r4, lr}
		printf ("%s\n", stdio_devices[stdout]->name);
	}

	puts("Err:   ");
	if (stdio_devices[stderr] == NULL) {
		puts("No error devices available!\n");
c7e08b34:	eaffffac 	b	c7e089ec <puts>
	} else {
		printf ("%s\n", stdio_devices[stderr]->name);
c7e08b38:	e59f0014 	ldr	r0, [pc, #20]	; c7e08b54 <stdio_print_current_devices+0xa4>
c7e08b3c:	e2811008 	add	r1, r1, #8	; 0x8
	}
#endif /* CONFIG_SYS_CONSOLE_INFO_QUIET */
}
c7e08b40:	e8bd4010 	pop	{r4, lr}

	puts("Err:   ");
	if (stdio_devices[stderr] == NULL) {
		puts("No error devices available!\n");
	} else {
		printf ("%s\n", stdio_devices[stderr]->name);
c7e08b44:	eaffffc3 	b	c7e08a58 <printf>
c7e08b48:	c7e31d65 	.word	0xc7e31d65
c7e08b4c:	c7e419fc 	.word	0xc7e419fc
c7e08b50:	c7e31d6d 	.word	0xc7e31d6d
c7e08b54:	c7e319dc 	.word	0xc7e319dc
c7e08b58:	c7e31d8a 	.word	0xc7e31d8a
c7e08b5c:	c7e31d92 	.word	0xc7e31d92
c7e08b60:	c7e31db0 	.word	0xc7e31db0
c7e08b64:	c7e31db8 	.word	0xc7e31db8

c7e08b68 <console_init_r>:

#else /* CONFIG_SYS_CONSOLE_IS_IN_ENV */

/* Called after the relocation - use desired console functions */
int console_init_r(void)
{
c7e08b68:	e92d4070 	push	{r4, r5, r6, lr}
	struct stdio_dev *inputdev = NULL, *outputdev = NULL;
	int i;
	struct list_head *list = stdio_get_list();
c7e08b6c:	eb00179d 	bl	c7e0e9e8 <stdio_get_list>
			outputdev = search_device (DEV_FLAGS_OUTPUT, "serial");
	}
#endif

	/* Scan devices looking for input and output devices */
	list_for_each(pos, list) {
c7e08b70:	e3a05000 	mov	r5, #0	; 0x0
c7e08b74:	e590c000 	ldr	ip, [r0]
c7e08b78:	e1a04005 	mov	r4, r5
c7e08b7c:	ea00000d 	b	c7e08bb8 <console_init_r+0x50>
		dev = list_entry(pos, struct stdio_dev, list);

		if ((dev->flags & DEV_FLAGS_INPUT) && (inputdev == NULL)) {
c7e08b80:	e51c3034 	ldr	r3, [ip, #-52]
			inputdev = dev;
		}
		if ((dev->flags & DEV_FLAGS_OUTPUT) && (outputdev == NULL)) {
c7e08b84:	e2741001 	rsbs	r1, r4, #1	; 0x1
c7e08b88:	33a01000 	movcc	r1, #0	; 0x0

	/* Scan devices looking for input and output devices */
	list_for_each(pos, list) {
		dev = list_entry(pos, struct stdio_dev, list);

		if ((dev->flags & DEV_FLAGS_INPUT) && (inputdev == NULL)) {
c7e08b8c:	e3550000 	cmp	r5, #0	; 0x0
c7e08b90:	13a02000 	movne	r2, #0	; 0x0
c7e08b94:	02032001 	andeq	r2, r3, #1	; 0x1
c7e08b98:	e3520000 	cmp	r2, #0	; 0x0
c7e08b9c:	11a0500e 	movne	r5, lr
			inputdev = dev;
		}
		if ((dev->flags & DEV_FLAGS_OUTPUT) && (outputdev == NULL)) {
c7e08ba0:	e01110a3 	ands	r1, r1, r3, lsr #1
c7e08ba4:	11a0400e 	movne	r4, lr
			outputdev = dev;
		}
		if(inputdev && outputdev)
c7e08ba8:	e3550000 	cmp	r5, #0	; 0x0
c7e08bac:	13540000 	cmpne	r4, #0	; 0x0
c7e08bb0:	1a000003 	bne	c7e08bc4 <console_init_r+0x5c>
			outputdev = search_device (DEV_FLAGS_OUTPUT, "serial");
	}
#endif

	/* Scan devices looking for input and output devices */
	list_for_each(pos, list) {
c7e08bb4:	e59cc000 	ldr	ip, [ip]
c7e08bb8:	e15c0000 	cmp	ip, r0
		dev = list_entry(pos, struct stdio_dev, list);
c7e08bbc:	e24ce034 	sub	lr, ip, #52	; 0x34
			outputdev = search_device (DEV_FLAGS_OUTPUT, "serial");
	}
#endif

	/* Scan devices looking for input and output devices */
	list_for_each(pos, list) {
c7e08bc0:	1affffee 	bne	c7e08b80 <console_init_r+0x18>
		if(inputdev && outputdev)
			break;
	}

	/* Initializes output console first */
	if (outputdev != NULL) {
c7e08bc4:	e3540000 	cmp	r4, #0	; 0x0
c7e08bc8:	0a000005 	beq	c7e08be4 <console_init_r+0x7c>
		console_setfile(stdout, outputdev);
c7e08bcc:	e1a01004 	mov	r1, r4
c7e08bd0:	e3a00001 	mov	r0, #1	; 0x1
c7e08bd4:	ebfffeec 	bl	c7e0878c <console_setfile>
		console_setfile(stderr, outputdev);
c7e08bd8:	e1a01004 	mov	r1, r4
c7e08bdc:	e3a00002 	mov	r0, #2	; 0x2
c7e08be0:	ebfffee9 	bl	c7e0878c <console_setfile>
		console_devices[stderr][0] = outputdev;
#endif
	}

	/* Initializes input console */
	if (inputdev != NULL) {
c7e08be4:	e3550000 	cmp	r5, #0	; 0x0
c7e08be8:	0a000002 	beq	c7e08bf8 <console_init_r+0x90>
		console_setfile(stdin, inputdev);
c7e08bec:	e1a01005 	mov	r1, r5
c7e08bf0:	e3a00000 	mov	r0, #0	; 0x0
c7e08bf4:	ebfffee4 	bl	c7e0878c <console_setfile>
#ifdef CONFIG_CONSOLE_MUX
		console_devices[stdin][0] = inputdev;
#endif
	}

	gd->flags |= GD_FLG_DEVINIT;	/* device initialization completed */
c7e08bf8:	e5983004 	ldr	r3, [r8, #4]

	stdio_print_current_devices();

	/* Setting environment variables */
	for (i = 0; i < 3; i++) {
		setenv(stdio_names[i], stdio_devices[i]->name);
c7e08bfc:	e59f5044 	ldr	r5, [pc, #68]	; c7e08c48 <console_init_r+0xe0>
#ifdef CONFIG_CONSOLE_MUX
		console_devices[stdin][0] = inputdev;
#endif
	}

	gd->flags |= GD_FLG_DEVINIT;	/* device initialization completed */
c7e08c00:	e3833002 	orr	r3, r3, #2	; 0x2
c7e08c04:	e5883004 	str	r3, [r8, #4]

	stdio_print_current_devices();
c7e08c08:	ebffffa8 	bl	c7e08ab0 <stdio_print_current_devices>

	/* Setting environment variables */
	for (i = 0; i < 3; i++) {
		setenv(stdio_names[i], stdio_devices[i]->name);
c7e08c0c:	e59f4038 	ldr	r4, [pc, #56]	; c7e08c4c <console_init_r+0xe4>
c7e08c10:	e5951000 	ldr	r1, [r5]
c7e08c14:	e5940000 	ldr	r0, [r4]
c7e08c18:	e2811008 	add	r1, r1, #8	; 0x8
c7e08c1c:	ebfffa8b 	bl	c7e07650 <setenv>
c7e08c20:	e5951004 	ldr	r1, [r5, #4]
c7e08c24:	e5940004 	ldr	r0, [r4, #4]
c7e08c28:	e2811008 	add	r1, r1, #8	; 0x8
c7e08c2c:	ebfffa87 	bl	c7e07650 <setenv>
c7e08c30:	e5951008 	ldr	r1, [r5, #8]
c7e08c34:	e5940008 	ldr	r0, [r4, #8]
c7e08c38:	e2811008 	add	r1, r1, #8	; 0x8
c7e08c3c:	ebfffa83 	bl	c7e07650 <setenv>
	if ((stdio_devices[stdin] == NULL) && (stdio_devices[stdout] == NULL))
		return 0;
#endif

	return 0;
}
c7e08c40:	e3a00000 	mov	r0, #0	; 0x0
c7e08c44:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e08c48:	c7e419fc 	.word	0xc7e419fc
c7e08c4c:	c7e394ec 	.word	0xc7e394ec

c7e08c50 <serial_printf>:
#endif /* defined(CONFIG_CONSOLE_MUX) */

/** U-Boot INITIAL CONSOLE-NOT COMPATIBLE FUNCTIONS *************************/

int serial_printf(const char *fmt, ...)
{
c7e08c50:	e92d000f 	push	{r0, r1, r2, r3}
c7e08c54:	e92d4030 	push	{r4, r5, lr}
c7e08c58:	e24ddf63 	sub	sp, sp, #396	; 0x18c
	va_list args;
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

	va_start(args, fmt);
c7e08c5c:	e28d3f67 	add	r3, sp, #412	; 0x19c

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e08c60:	e28d5004 	add	r5, sp, #4	; 0x4
c7e08c64:	e1a02003 	mov	r2, r3
c7e08c68:	e59d1198 	ldr	r1, [sp, #408]
c7e08c6c:	e1a00005 	mov	r0, r5
{
	va_list args;
	uint i;
	char printbuffer[CONFIG_SYS_PBSIZE];

	va_start(args, fmt);
c7e08c70:	e58d3184 	str	r3, [sp, #388]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	i = vscnprintf(printbuffer, sizeof(printbuffer), fmt, args);
c7e08c74:	eb006ac8 	bl	c7e2379c <vsprintf>
c7e08c78:	e1a04000 	mov	r4, r0
	va_end(args);

	serial_puts(printbuffer);
c7e08c7c:	e1a00005 	mov	r0, r5
c7e08c80:	eb0044fe 	bl	c7e1a080 <serial_puts>
	return i;
}
c7e08c84:	e1a00004 	mov	r0, r4
c7e08c88:	e28ddf63 	add	sp, sp, #396	; 0x18c
c7e08c8c:	e8bd4030 	pop	{r4, r5, lr}
c7e08c90:	e28dd010 	add	sp, sp, #16	; 0x10
c7e08c94:	e12fff1e 	bx	lr

c7e08c98 <putc>:
#ifdef CONFIG_DISABLE_CONSOLE
	if (gd->flags & GD_FLG_DISABLE_CONSOLE)
		return;
#endif

	if (!gd->have_console)
c7e08c98:	e598300c 	ldr	r3, [r8, #12]
static inline void pre_console_puts(const char *s) {}
static inline void print_pre_console_buffer(void) {}
#endif

void putc(const char c)
{
c7e08c9c:	e1a01000 	mov	r1, r0
#ifdef CONFIG_DISABLE_CONSOLE
	if (gd->flags & GD_FLG_DISABLE_CONSOLE)
		return;
#endif

	if (!gd->have_console)
c7e08ca0:	e3530000 	cmp	r3, #0	; 0x0
c7e08ca4:	012fff1e 	bxeq	lr
		return pre_console_putc(c);

	if (gd->flags & GD_FLG_DEVINIT) {
c7e08ca8:	e5983004 	ldr	r3, [r8, #4]
c7e08cac:	e3130002 	tst	r3, #2	; 0x2
c7e08cb0:	0a000001 	beq	c7e08cbc <putc+0x24>
		/* Send to the standard output */
		fputc(stdout, c);
c7e08cb4:	e3a00001 	mov	r0, #1	; 0x1
c7e08cb8:	eafffef1 	b	c7e08884 <fputc>
	} else {
		/* Send directly to the handler */
		serial_putc(c);
c7e08cbc:	ea0044dd 	b	c7e1a038 <serial_putc>

c7e08cc0 <tstc>:
#ifdef CONFIG_DISABLE_CONSOLE
	if (gd->flags & GD_FLG_DISABLE_CONSOLE)
		return 0;
#endif

	if (!gd->have_console)
c7e08cc0:	e598000c 	ldr	r0, [r8, #12]
c7e08cc4:	e3500000 	cmp	r0, #0	; 0x0
c7e08cc8:	012fff1e 	bxeq	lr
		return 0;

	if (gd->flags & GD_FLG_DEVINIT) {
c7e08ccc:	e5983004 	ldr	r3, [r8, #4]
c7e08cd0:	e3130002 	tst	r3, #2	; 0x2
c7e08cd4:	0a000001 	beq	c7e08ce0 <tstc+0x20>
		/* Test the standard input */
		return ftstc(stdin);
c7e08cd8:	e3a00000 	mov	r0, #0	; 0x0
c7e08cdc:	eafffede 	b	c7e0885c <ftstc>
	}

	/* Send directly to the handler */
	return serial_tstc();
c7e08ce0:	ea0044e0 	b	c7e1a068 <serial_tstc>

c7e08ce4 <getc>:
#ifdef CONFIG_DISABLE_CONSOLE
	if (gd->flags & GD_FLG_DISABLE_CONSOLE)
		return 0;
#endif

	if (!gd->have_console)
c7e08ce4:	e598000c 	ldr	r0, [r8, #12]
c7e08ce8:	e3500000 	cmp	r0, #0	; 0x0
c7e08cec:	012fff1e 	bxeq	lr
		return 0;

	if (gd->flags & GD_FLG_DEVINIT) {
c7e08cf0:	e5983004 	ldr	r3, [r8, #4]
c7e08cf4:	e3130002 	tst	r3, #2	; 0x2
c7e08cf8:	0a000001 	beq	c7e08d04 <getc+0x20>
		/* Get from the standard input */
		return fgetc(stdin);
c7e08cfc:	e3a00000 	mov	r0, #0	; 0x0
c7e08d00:	eafffecb 	b	c7e08834 <fgetc>
	}

	/* Send directly to the handler */
	return serial_getc();
c7e08d04:	ea0044c3 	b	c7e1a018 <serial_getc>

c7e08d08 <ctrlc>:

/* test if ctrl-c was pressed */
static int ctrlc_disabled = 0;	/* see disable_ctrl() */
static int ctrlc_was_pressed = 0;
int ctrlc(void)
{
c7e08d08:	e92d4010 	push	{r4, lr}
	if (!ctrlc_disabled && gd->have_console) {
c7e08d0c:	e59f4040 	ldr	r4, [pc, #64]	; c7e08d54 <ctrlc+0x4c>
c7e08d10:	e5943000 	ldr	r3, [r4]
c7e08d14:	e3530000 	cmp	r3, #0	; 0x0
c7e08d18:	1a00000b 	bne	c7e08d4c <ctrlc+0x44>
c7e08d1c:	e598300c 	ldr	r3, [r8, #12]
c7e08d20:	e3530000 	cmp	r3, #0	; 0x0
c7e08d24:	0a000008 	beq	c7e08d4c <ctrlc+0x44>
		if (tstc()) {
c7e08d28:	ebffffe4 	bl	c7e08cc0 <tstc>
c7e08d2c:	e3500000 	cmp	r0, #0	; 0x0
c7e08d30:	0a000005 	beq	c7e08d4c <ctrlc+0x44>
			switch (getc()) {
c7e08d34:	ebffffea 	bl	c7e08ce4 <getc>
c7e08d38:	e3500003 	cmp	r0, #3	; 0x3
			case 0x03:		/* ^C - Control C */
				ctrlc_was_pressed = 1;
c7e08d3c:	03a03001 	moveq	r3, #1	; 0x1
c7e08d40:	05843004 	streq	r3, [r4, #4]
c7e08d44:	01a00003 	moveq	r0, r3
static int ctrlc_was_pressed = 0;
int ctrlc(void)
{
	if (!ctrlc_disabled && gd->have_console) {
		if (tstc()) {
			switch (getc()) {
c7e08d48:	08bd8010 	popeq	{r4, pc}
			case 0x03:		/* ^C - Control C */
				ctrlc_was_pressed = 1;
				return 1;
c7e08d4c:	e3a00000 	mov	r0, #0	; 0x0
				break;
			}
		}
	}
	return 0;
}
c7e08d50:	e8bd8010 	pop	{r4, pc}
c7e08d54:	c7e401b8 	.word	0xc7e401b8

c7e08d58 <malloc_usable_size>:
#else
size_t malloc_usable_size(mem) Void_t* mem;
#endif
{
  mchunkptr p;
  if (mem == 0)
c7e08d58:	e3500000 	cmp	r0, #0	; 0x0
c7e08d5c:	0a00000c 	beq	c7e08d94 <malloc_usable_size+0x3c>
    return 0;
  else
  {
    p = mem2chunk(mem);
    if(!chunk_is_mmapped(p))
c7e08d60:	e5102004 	ldr	r2, [r0, #-4]
  mchunkptr p;
  if (mem == 0)
    return 0;
  else
  {
    p = mem2chunk(mem);
c7e08d64:	e2400008 	sub	r0, r0, #8	; 0x8
    if(!chunk_is_mmapped(p))
c7e08d68:	e3120002 	tst	r2, #2	; 0x2
    {
      if (!inuse(p)) return 0;
      check_inuse_chunk(p);
      return chunksize(p) - SIZE_SZ;
    }
    return chunksize(p) - 2*SIZE_SZ;
c7e08d6c:	13c23003 	bicne	r3, r2, #3	; 0x3
c7e08d70:	12430008 	subne	r0, r3, #8	; 0x8
  if (mem == 0)
    return 0;
  else
  {
    p = mem2chunk(mem);
    if(!chunk_is_mmapped(p))
c7e08d74:	112fff1e 	bxne	lr
    {
      if (!inuse(p)) return 0;
c7e08d78:	e3c23001 	bic	r3, r2, #1	; 0x1
c7e08d7c:	e0803003 	add	r3, r0, r3
c7e08d80:	e5933004 	ldr	r3, [r3, #4]
c7e08d84:	e3130001 	tst	r3, #1	; 0x1
      check_inuse_chunk(p);
      return chunksize(p) - SIZE_SZ;
c7e08d88:	13c23003 	bicne	r3, r2, #3	; 0x3
c7e08d8c:	12430004 	subne	r0, r3, #4	; 0x4
  else
  {
    p = mem2chunk(mem);
    if(!chunk_is_mmapped(p))
    {
      if (!inuse(p)) return 0;
c7e08d90:	112fff1e 	bxne	lr
      check_inuse_chunk(p);
      return chunksize(p) - SIZE_SZ;
    }
    return chunksize(p) - 2*SIZE_SZ;
c7e08d94:	e3a00000 	mov	r0, #0	; 0x0
  }
}
c7e08d98:	e12fff1e 	bx	lr

c7e08d9c <mallopt>:
int mALLOPt(int param_number, int value)
#else
int mALLOPt(param_number, value) int param_number; int value;
#endif
{
  switch(param_number)
c7e08d9c:	e2800004 	add	r0, r0, #4	; 0x4
c7e08da0:	e3500003 	cmp	r0, #3	; 0x3
c7e08da4:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
c7e08da8:	ea000013 	b	c7e08dfc <mallopt+0x60>
c7e08dac:	c7e08de4 	.word	0xc7e08de4
c7e08db0:	c7e08dd8 	.word	0xc7e08dd8
c7e08db4:	c7e08dc8 	.word	0xc7e08dc8
c7e08db8:	c7e08dbc 	.word	0xc7e08dbc
  {
    case M_TRIM_THRESHOLD:
      trim_threshold = value; return 1;
c7e08dbc:	e3a00001 	mov	r0, #1	; 0x1
c7e08dc0:	e59f303c 	ldr	r3, [pc, #60]	; c7e08e04 <mallopt+0x68>
c7e08dc4:	ea000001 	b	c7e08dd0 <mallopt+0x34>
    case M_TOP_PAD:
      top_pad = value; return 1;
c7e08dc8:	e59f3038 	ldr	r3, [pc, #56]	; c7e08e08 <mallopt+0x6c>
c7e08dcc:	e3a00001 	mov	r0, #1	; 0x1
c7e08dd0:	e5831000 	str	r1, [r3]
c7e08dd4:	e12fff1e 	bx	lr
    case M_MMAP_THRESHOLD:
      mmap_threshold = value; return 1;
c7e08dd8:	e3a00001 	mov	r0, #1	; 0x1
c7e08ddc:	e59f3020 	ldr	r3, [pc, #32]	; c7e08e04 <mallopt+0x68>
c7e08de0:	ea000003 	b	c7e08df4 <mallopt+0x58>
    case M_MMAP_MAX:
#if HAVE_MMAP
      n_mmaps_max = value; return 1;
#else
      if (value != 0) return 0; else  n_mmaps_max = value; return 1;
c7e08de4:	e3510000 	cmp	r1, #0	; 0x0
c7e08de8:	1a000003 	bne	c7e08dfc <mallopt+0x60>
c7e08dec:	e59f3014 	ldr	r3, [pc, #20]	; c7e08e08 <mallopt+0x6c>
c7e08df0:	e3a00001 	mov	r0, #1	; 0x1
c7e08df4:	e5831004 	str	r1, [r3, #4]
c7e08df8:	e12fff1e 	bx	lr
c7e08dfc:	e3a00000 	mov	r0, #0	; 0x0
#endif

    default:
      return 0;
  }
}
c7e08e00:	e12fff1e 	bx	lr
c7e08e04:	c7e353d0 	.word	0xc7e353d0
c7e08e08:	c7e401c0 	.word	0xc7e401c0

c7e08e0c <mem_malloc_init>:

	return (void *)old;
}

void mem_malloc_init(ulong start, ulong size)
{
c7e08e0c:	e92d4010 	push	{r4, lr}
	mem_malloc_start = start;
c7e08e10:	e59fc020 	ldr	ip, [pc, #32]	; c7e08e38 <mem_malloc_init+0x2c>
	mem_malloc_end = start + size;
c7e08e14:	e0813000 	add	r3, r1, r0
	mem_malloc_brk = start;

	memset((void *)mem_malloc_start, 0, size);
c7e08e18:	e1a02001 	mov	r2, r1

	return (void *)old;
}

void mem_malloc_init(ulong start, ulong size)
{
c7e08e1c:	e1a04000 	mov	r4, r0
	mem_malloc_start = start;
	mem_malloc_end = start + size;
	mem_malloc_brk = start;

	memset((void *)mem_malloc_start, 0, size);
c7e08e20:	e3a01000 	mov	r1, #0	; 0x0

void mem_malloc_init(ulong start, ulong size)
{
	mem_malloc_start = start;
	mem_malloc_end = start + size;
	mem_malloc_brk = start;
c7e08e24:	e58c0010 	str	r0, [ip, #16]
}

void mem_malloc_init(ulong start, ulong size)
{
	mem_malloc_start = start;
	mem_malloc_end = start + size;
c7e08e28:	e58c300c 	str	r3, [ip, #12]
	return (void *)old;
}

void mem_malloc_init(ulong start, ulong size)
{
	mem_malloc_start = start;
c7e08e2c:	e58c0008 	str	r0, [ip, #8]
	mem_malloc_end = start + size;
	mem_malloc_brk = start;

	memset((void *)mem_malloc_start, 0, size);
}
c7e08e30:	e8bd4010 	pop	{r4, lr}
{
	mem_malloc_start = start;
	mem_malloc_end = start + size;
	mem_malloc_brk = start;

	memset((void *)mem_malloc_start, 0, size);
c7e08e34:	ea006756 	b	c7e22b94 <memset>
c7e08e38:	c7e401c0 	.word	0xc7e401c0

c7e08e3c <sbrk>:
ulong mem_malloc_end = 0;
ulong mem_malloc_brk = 0;

void *sbrk(ptrdiff_t increment)
{
	ulong old = mem_malloc_brk;
c7e08e3c:	e59f304c 	ldr	r3, [pc, #76]	; c7e08e90 <sbrk+0x54>
ulong mem_malloc_start = 0;
ulong mem_malloc_end = 0;
ulong mem_malloc_brk = 0;

void *sbrk(ptrdiff_t increment)
{
c7e08e40:	e92d4070 	push	{r4, r5, r6, lr}
	ulong old = mem_malloc_brk;
c7e08e44:	e5935010 	ldr	r5, [r3, #16]

	/*
	 * if we are giving memory back make sure we clear it out since
	 * we set MORECORE_CLEARS to 1
	 */
	if (increment < 0)
c7e08e48:	e3500000 	cmp	r0, #0	; 0x0
ulong mem_malloc_brk = 0;

void *sbrk(ptrdiff_t increment)
{
	ulong old = mem_malloc_brk;
	ulong new = old + increment;
c7e08e4c:	e0804005 	add	r4, r0, r5

	/*
	 * if we are giving memory back make sure we clear it out since
	 * we set MORECORE_CLEARS to 1
	 */
	if (increment < 0)
c7e08e50:	aa000003 	bge	c7e08e64 <sbrk+0x28>
		memset((void *)new, 0, -increment);
c7e08e54:	e2602000 	rsb	r2, r0, #0	; 0x0
c7e08e58:	e3a01000 	mov	r1, #0	; 0x0
c7e08e5c:	e1a00004 	mov	r0, r4
c7e08e60:	eb00674b 	bl	c7e22b94 <memset>

	if ((new < mem_malloc_start) || (new > mem_malloc_end))
c7e08e64:	e59f2024 	ldr	r2, [pc, #36]	; c7e08e90 <sbrk+0x54>
c7e08e68:	e5923008 	ldr	r3, [r2, #8]
c7e08e6c:	e1540003 	cmp	r4, r3
c7e08e70:	3a000004 	bcc	c7e08e88 <sbrk+0x4c>
c7e08e74:	e592300c 	ldr	r3, [r2, #12]
c7e08e78:	e1540003 	cmp	r4, r3
		return (void *)MORECORE_FAILURE;

	mem_malloc_brk = new;
c7e08e7c:	95824010 	strls	r4, [r2, #16]

	return (void *)old;
c7e08e80:	91a00005 	movls	r0, r5
	 * we set MORECORE_CLEARS to 1
	 */
	if (increment < 0)
		memset((void *)new, 0, -increment);

	if ((new < mem_malloc_start) || (new > mem_malloc_end))
c7e08e84:	98bd8070 	popls	{r4, r5, r6, pc}
		return (void *)MORECORE_FAILURE;

	mem_malloc_brk = new;

	return (void *)old;
c7e08e88:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e08e8c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e08e90:	c7e401c0 	.word	0xc7e401c0

c7e08e94 <malloc_trim>:
#if __STD_C
int malloc_trim(size_t pad)
#else
int malloc_trim(pad) size_t pad;
#endif
{
c7e08e94:	e92d4070 	push	{r4, r5, r6, lr}
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;

  top_size = chunksize(top);
c7e08e98:	e59f60b8 	ldr	r6, [pc, #184]	; c7e08f58 <malloc_trim+0xc4>
c7e08e9c:	e5963010 	ldr	r3, [r6, #16]
c7e08ea0:	e5933004 	ldr	r3, [r3, #4]
c7e08ea4:	e3c35003 	bic	r5, r3, #3	; 0x3
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
c7e08ea8:	e0600005 	rsb	r0, r0, r5
c7e08eac:	e2800efe 	add	r0, r0, #4064	; 0xfe0
c7e08eb0:	e280000f 	add	r0, r0, #15	; 0xf
c7e08eb4:	e3c00eff 	bic	r0, r0, #4080	; 0xff0
c7e08eb8:	e3c0000f 	bic	r0, r0, #15	; 0xf
c7e08ebc:	e2404a01 	sub	r4, r0, #4096	; 0x1000

  if (extra < (long)pagesz)  /* Not enough memory to release */
c7e08ec0:	e3540a01 	cmp	r4, #4096	; 0x1000
c7e08ec4:	ba000021 	blt	c7e08f50 <malloc_trim+0xbc>
    return 0;

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
c7e08ec8:	e3a00000 	mov	r0, #0	; 0x0
c7e08ecc:	ebffffda 	bl	c7e08e3c <sbrk>
    if (current_brk != (char*)(top) + top_size)
c7e08ed0:	e5963010 	ldr	r3, [r6, #16]
c7e08ed4:	e0833005 	add	r3, r3, r5
c7e08ed8:	e1500003 	cmp	r0, r3
c7e08edc:	1a00001b 	bne	c7e08f50 <malloc_trim+0xbc>
      return 0;     /* Apparently we don't own memory; must fail */

    else
    {
      new_brk = (char*)(MORECORE (-extra));
c7e08ee0:	e2640000 	rsb	r0, r4, #0	; 0x0
c7e08ee4:	ebffffd4 	bl	c7e08e3c <sbrk>

      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
c7e08ee8:	e3700001 	cmn	r0, #1	; 0x1
c7e08eec:	1a00000d 	bne	c7e08f28 <malloc_trim+0x94>
      {
	/* Try to figure out what we have */
	current_brk = (char*)(MORECORE (0));
c7e08ef0:	e2800001 	add	r0, r0, #1	; 0x1
c7e08ef4:	ebffffd0 	bl	c7e08e3c <sbrk>
	top_size = current_brk - (char*)top;
c7e08ef8:	e596c010 	ldr	ip, [r6, #16]
c7e08efc:	e06c1000 	rsb	r1, ip, r0
	if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
c7e08f00:	e351000f 	cmp	r1, #15	; 0xf
c7e08f04:	da000011 	ble	c7e08f50 <malloc_trim+0xbc>
	{
	  sbrked_mem = current_brk - sbrk_base;
c7e08f08:	e5963410 	ldr	r3, [r6, #1040]
c7e08f0c:	e59f2048 	ldr	r2, [pc, #72]	; c7e08f5c <malloc_trim+0xc8>
c7e08f10:	e0633000 	rsb	r3, r3, r0
	  set_head(top, top_size | PREV_INUSE);
c7e08f14:	e3811001 	orr	r1, r1, #1	; 0x1
	/* Try to figure out what we have */
	current_brk = (char*)(MORECORE (0));
	top_size = current_brk - (char*)top;
	if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
	{
	  sbrked_mem = current_brk - sbrk_base;
c7e08f18:	e5823014 	str	r3, [r2, #20]
	  set_head(top, top_size | PREV_INUSE);
c7e08f1c:	e3a00000 	mov	r0, #0	; 0x0
c7e08f20:	e58c1004 	str	r1, [ip, #4]
c7e08f24:	e8bd8070 	pop	{r4, r5, r6, pc}
      }

      else
      {
	/* Success. Adjust top accordingly. */
	set_head(top, (top_size - extra) | PREV_INUSE);
c7e08f28:	e5961010 	ldr	r1, [r6, #16]
c7e08f2c:	e0643005 	rsb	r3, r4, r5
c7e08f30:	e3833001 	orr	r3, r3, #1	; 0x1
	sbrked_mem -= extra;
c7e08f34:	e59f2020 	ldr	r2, [pc, #32]	; c7e08f5c <malloc_trim+0xc8>
      }

      else
      {
	/* Success. Adjust top accordingly. */
	set_head(top, (top_size - extra) | PREV_INUSE);
c7e08f38:	e5813004 	str	r3, [r1, #4]
	sbrked_mem -= extra;
c7e08f3c:	e5923014 	ldr	r3, [r2, #20]
c7e08f40:	e3a00001 	mov	r0, #1	; 0x1
c7e08f44:	e0643003 	rsb	r3, r4, r3
c7e08f48:	e5823014 	str	r3, [r2, #20]
c7e08f4c:	e8bd8070 	pop	{r4, r5, r6, pc}
	check_chunk(top);
	return 1;
c7e08f50:	e3a00000 	mov	r0, #0	; 0x0
      }
    }
  }
}
c7e08f54:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e08f58:	c7e353d0 	.word	0xc7e353d0
c7e08f5c:	c7e401c0 	.word	0xc7e401c0

c7e08f60 <free>:
#if __STD_C
void fREe(Void_t* mem)
#else
void fREe(mem) Void_t* mem;
#endif
{
c7e08f60:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
c7e08f64:	e2506000 	subs	r6, r0, #0	; 0x0
c7e08f68:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
    return;

  p = mem2chunk(mem);
  hd = p->size;
c7e08f6c:	e5163004 	ldr	r3, [r6, #-4]

  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);

  if (next == top)                            /* merge with top */
c7e08f70:	e59fa210 	ldr	sl, [pc, #528]	; c7e09188 <free+0x228>
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;

  p = mem2chunk(mem);
c7e08f74:	e2464008 	sub	r4, r6, #8	; 0x8
  }
#endif

  check_inuse_chunk(p);

  sz = hd & ~PREV_INUSE;
c7e08f78:	e3c3c001 	bic	ip, r3, #1	; 0x1
  next = chunk_at_offset(p, sz);
c7e08f7c:	e084000c 	add	r0, r4, ip
  nextsz = chunksize(next);

  if (next == top)                            /* merge with top */
c7e08f80:	e59a2010 	ldr	r2, [sl, #16]

  check_inuse_chunk(p);

  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
c7e08f84:	e5901004 	ldr	r1, [r0, #4]

  if (next == top)                            /* merge with top */
c7e08f88:	e1500002 	cmp	r0, r2

  check_inuse_chunk(p);

  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
c7e08f8c:	e3c17003 	bic	r7, r1, #3	; 0x3
c7e08f90:	e2035001 	and	r5, r3, #1	; 0x1

  if (next == top)                            /* merge with top */
c7e08f94:	1a000014 	bne	c7e08fec <free+0x8c>
  {
    sz += nextsz;

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
c7e08f98:	e3550000 	cmp	r5, #0	; 0x0
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);

  if (next == top)                            /* merge with top */
  {
    sz += nextsz;
c7e08f9c:	e087c00c 	add	ip, r7, ip

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
c7e08fa0:	1a000006 	bne	c7e08fc0 <free+0x60>
    {
      prevsz = p->prev_size;
c7e08fa4:	e5163008 	ldr	r3, [r6, #-8]
      p = chunk_at_offset(p, -((long) prevsz));
c7e08fa8:	e0634004 	rsb	r4, r3, r4
      sz += prevsz;
      unlink(p, bck, fwd);
c7e08fac:	e594100c 	ldr	r1, [r4, #12]
c7e08fb0:	e5942008 	ldr	r2, [r4, #8]

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
    {
      prevsz = p->prev_size;
      p = chunk_at_offset(p, -((long) prevsz));
      sz += prevsz;
c7e08fb4:	e08cc003 	add	ip, ip, r3
      unlink(p, bck, fwd);
c7e08fb8:	e5812008 	str	r2, [r1, #8]
c7e08fbc:	e582100c 	str	r1, [r2, #12]
    }

    set_head(p, sz | PREV_INUSE);
    top = p;
c7e08fc0:	e59f31c0 	ldr	r3, [pc, #448]	; c7e09188 <free+0x228>
      p = chunk_at_offset(p, -((long) prevsz));
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
c7e08fc4:	e38c2001 	orr	r2, ip, #1	; 0x1
c7e08fc8:	e5842004 	str	r2, [r4, #4]
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold)
c7e08fcc:	e5932000 	ldr	r2, [r3]
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
    top = p;
c7e08fd0:	e5834010 	str	r4, [r3, #16]
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold)
c7e08fd4:	e15c0002 	cmp	ip, r2
c7e08fd8:	38bd84f0 	popcc	{r4, r5, r6, r7, sl, pc}
      malloc_trim(top_pad);
c7e08fdc:	e59f31a8 	ldr	r3, [pc, #424]	; c7e0918c <free+0x22c>
c7e08fe0:	e5930000 	ldr	r0, [r3]

  set_head(p, sz | PREV_INUSE);
  set_foot(p, sz);
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);
}
c7e08fe4:	e8bd44f0 	pop	{r4, r5, r6, r7, sl, lr}
    }

    set_head(p, sz | PREV_INUSE);
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold)
      malloc_trim(top_pad);
c7e08fe8:	eaffffa9 	b	c7e08e94 <malloc_trim>

  set_head(next, nextsz);                    /* clear inuse bit */

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
c7e08fec:	e3550000 	cmp	r5, #0	; 0x0
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold)
      malloc_trim(top_pad);
    return;
  }

  set_head(next, nextsz);                    /* clear inuse bit */
c7e08ff0:	e5807004 	str	r7, [r0, #4]

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
c7e08ff4:	13a05000 	movne	r5, #0	; 0x0
c7e08ff8:	1a000009 	bne	c7e09024 <free+0xc4>
  {
    prevsz = p->prev_size;
c7e08ffc:	e5163008 	ldr	r3, [r6, #-8]
    p = chunk_at_offset(p, -((long) prevsz));
    sz += prevsz;

    if (p->fd == last_remainder)             /* keep as last_remainder */
c7e09000:	e28a2010 	add	r2, sl, #16	; 0x10
  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -((long) prevsz));
c7e09004:	e0634004 	rsb	r4, r3, r4
    sz += prevsz;

    if (p->fd == last_remainder)             /* keep as last_remainder */
c7e09008:	e5941008 	ldr	r1, [r4, #8]

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -((long) prevsz));
    sz += prevsz;
c7e0900c:	e08cc003 	add	ip, ip, r3

    if (p->fd == last_remainder)             /* keep as last_remainder */
c7e09010:	e1510002 	cmp	r1, r2
      islr = 1;
    else
      unlink(p, bck, fwd);
c7e09014:	1594300c 	ldrne	r3, [r4, #12]
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -((long) prevsz));
    sz += prevsz;

    if (p->fd == last_remainder)             /* keep as last_remainder */
c7e09018:	03a05001 	moveq	r5, #1	; 0x1
      islr = 1;
    else
      unlink(p, bck, fwd);
c7e0901c:	15831008 	strne	r1, [r3, #8]
c7e09020:	1581300c 	strne	r3, [r1, #12]
  }

  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
c7e09024:	e0803007 	add	r3, r0, r7
c7e09028:	e5933004 	ldr	r3, [r3, #4]
c7e0902c:	e3130001 	tst	r3, #1	; 0x1
c7e09030:	1a000010 	bne	c7e09078 <free+0x118>
  {
    sz += nextsz;

    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
c7e09034:	e3550000 	cmp	r5, #0	; 0x0
      unlink(p, bck, fwd);
  }

  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
c7e09038:	e08cc007 	add	ip, ip, r7

    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
c7e0903c:	1a000009 	bne	c7e09068 <free+0x108>
c7e09040:	e5902008 	ldr	r2, [r0, #8]
c7e09044:	e59f3144 	ldr	r3, [pc, #324]	; c7e09190 <free+0x230>
c7e09048:	e1520003 	cmp	r2, r3
c7e0904c:	1a000005 	bne	c7e09068 <free+0x108>
    {
      islr = 1;
      link_last_remainder(p);
c7e09050:	e582400c 	str	r4, [r2, #12]
c7e09054:	e5824008 	str	r4, [r2, #8]
c7e09058:	e584200c 	str	r2, [r4, #12]
c7e0905c:	e5842008 	str	r2, [r4, #8]
c7e09060:	e2855001 	add	r5, r5, #1	; 0x1
c7e09064:	ea000003 	b	c7e09078 <free+0x118>
    }
    else
      unlink(next, bck, fwd);
c7e09068:	e5902008 	ldr	r2, [r0, #8]
c7e0906c:	e590300c 	ldr	r3, [r0, #12]
c7e09070:	e5832008 	str	r2, [r3, #8]
c7e09074:	e582300c 	str	r3, [r2, #12]
  }


  set_head(p, sz | PREV_INUSE);
c7e09078:	e38c3001 	orr	r3, ip, #1	; 0x1
  set_foot(p, sz);
  if (!islr)
c7e0907c:	e3550000 	cmp	r5, #0	; 0x0
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
c7e09080:	e5843004 	str	r3, [r4, #4]
  set_foot(p, sz);
c7e09084:	e784c00c 	str	ip, [r4, ip]
  if (!islr)
c7e09088:	18bd84f0 	popne	{r4, r5, r6, r7, sl, pc}
    frontlink(p, sz, idx, bck, fwd);
c7e0908c:	e35c0c02 	cmp	ip, #512	; 0x200
c7e09090:	2a00000d 	bcs	c7e090cc <free+0x16c>
c7e09094:	e59f10ec 	ldr	r1, [pc, #236]	; c7e09188 <free+0x228>
c7e09098:	e1a0c1ac 	lsr	ip, ip, #3
c7e0909c:	e591200c 	ldr	r2, [r1, #12]
c7e090a0:	e3a03001 	mov	r3, #1	; 0x1
c7e090a4:	e1a0014c 	asr	r0, ip, #2
c7e090a8:	e1822013 	orr	r2, r2, r3, lsl r0
c7e090ac:	e2813008 	add	r3, r1, #8	; 0x8
c7e090b0:	e581200c 	str	r2, [r1, #12]
c7e090b4:	e083318c 	add	r3, r3, ip, lsl #3
c7e090b8:	e5932008 	ldr	r2, [r3, #8]
c7e090bc:	e584300c 	str	r3, [r4, #12]
c7e090c0:	e5842008 	str	r2, [r4, #8]
c7e090c4:	e582400c 	str	r4, [r2, #12]
c7e090c8:	ea00002c 	b	c7e09180 <free+0x220>
c7e090cc:	e1a014ac 	lsr	r1, ip, #9
c7e090d0:	e3510004 	cmp	r1, #4	; 0x4
c7e090d4:	91a0332c 	lsrls	r3, ip, #6
c7e090d8:	92831038 	addls	r1, r3, #56	; 0x38
c7e090dc:	9a00000f 	bls	c7e09120 <free+0x1c0>
c7e090e0:	e3510014 	cmp	r1, #20	; 0x14
c7e090e4:	9281105b 	addls	r1, r1, #91	; 0x5b
c7e090e8:	9a00000c 	bls	c7e09120 <free+0x1c0>
c7e090ec:	e3510054 	cmp	r1, #84	; 0x54
c7e090f0:	91a0362c 	lsrls	r3, ip, #12
c7e090f4:	9283106e 	addls	r1, r3, #110	; 0x6e
c7e090f8:	9a000008 	bls	c7e09120 <free+0x1c0>
c7e090fc:	e3510f55 	cmp	r1, #340	; 0x154
c7e09100:	91a037ac 	lsrls	r3, ip, #15
c7e09104:	92831077 	addls	r1, r3, #119	; 0x77
c7e09108:	9a000004 	bls	c7e09120 <free+0x1c0>
c7e0910c:	e59f3080 	ldr	r3, [pc, #128]	; c7e09194 <free+0x234>
c7e09110:	e1510003 	cmp	r1, r3
c7e09114:	91a0392c 	lsrls	r3, ip, #18
c7e09118:	83a0107e 	movhi	r1, #126	; 0x7e
c7e0911c:	9283107c 	addls	r1, r3, #124	; 0x7c
c7e09120:	e59f5060 	ldr	r5, [pc, #96]	; c7e09188 <free+0x228>
c7e09124:	e2853008 	add	r3, r5, #8	; 0x8
c7e09128:	e0832181 	add	r2, r3, r1, lsl #3
c7e0912c:	e5920008 	ldr	r0, [r2, #8]
c7e09130:	e1500002 	cmp	r0, r2
c7e09134:	1a000009 	bne	c7e09160 <free+0x200>
c7e09138:	e595300c 	ldr	r3, [r5, #12]
c7e0913c:	e1a01141 	asr	r1, r1, #2
c7e09140:	e3a02001 	mov	r2, #1	; 0x1
c7e09144:	e1833112 	orr	r3, r3, r2, lsl r1
c7e09148:	e585300c 	str	r3, [r5, #12]
c7e0914c:	e1a03000 	mov	r3, r0
c7e09150:	ea000007 	b	c7e09174 <free+0x214>
c7e09154:	e5900008 	ldr	r0, [r0, #8]
c7e09158:	e1500002 	cmp	r0, r2
c7e0915c:	0a000003 	beq	c7e09170 <free+0x210>
c7e09160:	e5903004 	ldr	r3, [r0, #4]
c7e09164:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e09168:	e15c0003 	cmp	ip, r3
c7e0916c:	3afffff8 	bcc	c7e09154 <free+0x1f4>
c7e09170:	e590300c 	ldr	r3, [r0, #12]
c7e09174:	e584300c 	str	r3, [r4, #12]
c7e09178:	e5840008 	str	r0, [r4, #8]
c7e0917c:	e580400c 	str	r4, [r0, #12]
c7e09180:	e5834008 	str	r4, [r3, #8]
c7e09184:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e09188:	c7e353d0 	.word	0xc7e353d0
c7e0918c:	c7e401c0 	.word	0xc7e401c0
c7e09190:	c7e353e0 	.word	0xc7e353e0
c7e09194:	00000554 	.word	0x00000554

c7e09198 <cfree>:
void cfree(Void_t *mem)
#else
void cfree(mem) Void_t *mem;
#endif
{
  fREe(mem);
c7e09198:	eaffff70 	b	c7e08f60 <free>

c7e0919c <malloc>:
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb;

  /* check if mem_malloc_init() was run */
  if ((mem_malloc_start == 0) && (mem_malloc_end == 0)) {
c7e0919c:	e59f2618 	ldr	r2, [pc, #1560]	; c7e097bc <malloc+0x620>
#if __STD_C
Void_t* mALLOc(size_t bytes)
#else
Void_t* mALLOc(bytes) size_t bytes;
#endif
{
c7e091a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb;

  /* check if mem_malloc_init() was run */
  if ((mem_malloc_start == 0) && (mem_malloc_end == 0)) {
c7e091a4:	e5923008 	ldr	r3, [r2, #8]
c7e091a8:	e3530000 	cmp	r3, #0	; 0x0
c7e091ac:	1a000002 	bne	c7e091bc <malloc+0x20>
c7e091b0:	e592300c 	ldr	r3, [r2, #12]
c7e091b4:	e3530000 	cmp	r3, #0	; 0x0
c7e091b8:	0a00017c 	beq	c7e097b0 <malloc+0x614>
    /* not initialized yet */
    return 0;
  }

  if ((long)bytes < 0) return 0;
c7e091bc:	e3500000 	cmp	r0, #0	; 0x0
c7e091c0:	ba00017a 	blt	c7e097b0 <malloc+0x614>

  nb = request2size(bytes);  /* padded request size; */
c7e091c4:	e280000b 	add	r0, r0, #11	; 0xb
c7e091c8:	e3500016 	cmp	r0, #22	; 0x16
c7e091cc:	d3a0a010 	movle	sl, #16	; 0x10
c7e091d0:	da000002 	ble	c7e091e0 <malloc+0x44>
c7e091d4:	e3c0a007 	bic	sl, r0, #7	; 0x7

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
c7e091d8:	e35a0f7e 	cmp	sl, #504	; 0x1f8
c7e091dc:	2a000015 	bcs	c7e09238 <malloc+0x9c>
  {
    idx = smallbin_index(nb);

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
c7e091e0:	e59f35d8 	ldr	r3, [pc, #1496]	; c7e097c0 <malloc+0x624>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
  {
    idx = smallbin_index(nb);
c7e091e4:	e1a021aa 	lsr	r2, sl, #3

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
c7e091e8:	e0833182 	add	r3, r3, r2, lsl #3
    victim = last(q);
c7e091ec:	e593c00c 	ldr	ip, [r3, #12]

    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
c7e091f0:	e15c0003 	cmp	ip, r3
c7e091f4:	1a000004 	bne	c7e0920c <malloc+0x70>
    {
      q = next_bin(q);
c7e091f8:	e28c3008 	add	r3, ip, #8	; 0x8
      victim = last(q);
c7e091fc:	e593c00c 	ldr	ip, [r3, #12]
    }
    if (victim != q)
c7e09200:	e15c0003 	cmp	ip, r3
      set_inuse_bit_at_offset(victim, victim_size);
      check_malloced_chunk(victim, nb);
      return chunk2mem(victim);
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
c7e09204:	02826002 	addeq	r6, r2, #2	; 0x2
    if (victim == q)
    {
      q = next_bin(q);
      victim = last(q);
    }
    if (victim != q)
c7e09208:	0a00003b 	beq	c7e092fc <malloc+0x160>
    {
      victim_size = chunksize(victim);
c7e0920c:	e59c2004 	ldr	r2, [ip, #4]
      unlink(victim, bck, fwd);
c7e09210:	e59c000c 	ldr	r0, [ip, #12]
      q = next_bin(q);
      victim = last(q);
    }
    if (victim != q)
    {
      victim_size = chunksize(victim);
c7e09214:	e3c22003 	bic	r2, r2, #3	; 0x3
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
c7e09218:	e08c2002 	add	r2, ip, r2
c7e0921c:	e5923004 	ldr	r3, [r2, #4]
      victim = last(q);
    }
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
c7e09220:	e59c1008 	ldr	r1, [ip, #8]
      set_inuse_bit_at_offset(victim, victim_size);
c7e09224:	e3833001 	orr	r3, r3, #1	; 0x1
      victim = last(q);
    }
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
c7e09228:	e5801008 	str	r1, [r0, #8]
      set_inuse_bit_at_offset(victim, victim_size);
c7e0922c:	e5823004 	str	r3, [r2, #4]
      victim = last(q);
    }
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
c7e09230:	e581000c 	str	r0, [r1, #12]
c7e09234:	ea000044 	b	c7e0934c <malloc+0x1b0>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
c7e09238:	e1b024aa 	lsrs	r2, sl, #9
c7e0923c:	01a021aa 	lsreq	r2, sl, #3
c7e09240:	0a000013 	beq	c7e09294 <malloc+0xf8>
c7e09244:	e3520004 	cmp	r2, #4	; 0x4
c7e09248:	91a0332a 	lsrls	r3, sl, #6
c7e0924c:	92832038 	addls	r2, r3, #56	; 0x38
c7e09250:	9a00000f 	bls	c7e09294 <malloc+0xf8>
c7e09254:	e3520014 	cmp	r2, #20	; 0x14
c7e09258:	9282205b 	addls	r2, r2, #91	; 0x5b
c7e0925c:	9a00000c 	bls	c7e09294 <malloc+0xf8>
c7e09260:	e3520054 	cmp	r2, #84	; 0x54
c7e09264:	91a0362a 	lsrls	r3, sl, #12
c7e09268:	9283206e 	addls	r2, r3, #110	; 0x6e
c7e0926c:	9a000008 	bls	c7e09294 <malloc+0xf8>
c7e09270:	e3520f55 	cmp	r2, #340	; 0x154
c7e09274:	91a037aa 	lsrls	r3, sl, #15
c7e09278:	92832077 	addls	r2, r3, #119	; 0x77
c7e0927c:	9a000004 	bls	c7e09294 <malloc+0xf8>
c7e09280:	e59f353c 	ldr	r3, [pc, #1340]	; c7e097c4 <malloc+0x628>
c7e09284:	e1520003 	cmp	r2, r3
c7e09288:	91a0392a 	lsrls	r3, sl, #18
c7e0928c:	83a0207e 	movhi	r2, #126	; 0x7e
c7e09290:	9283207c 	addls	r2, r3, #124	; 0x7c
    bin = bin_at(idx);
c7e09294:	e59f3524 	ldr	r3, [pc, #1316]	; c7e097c0 <malloc+0x624>
c7e09298:	e0834182 	add	r4, r3, r2, lsl #3

    for (victim = last(bin); victim != bin; victim = victim->bk)
c7e0929c:	e594000c 	ldr	r0, [r4, #12]
c7e092a0:	ea000012 	b	c7e092f0 <malloc+0x154>
    {
      victim_size = chunksize(victim);
c7e092a4:	e5903004 	ldr	r3, [r0, #4]
c7e092a8:	e3c33003 	bic	r3, r3, #3	; 0x3
      remainder_size = victim_size - nb;
c7e092ac:	e06a1003 	rsb	r1, sl, r3

      if (remainder_size >= (long)MINSIZE) /* too big */
c7e092b0:	e351000f 	cmp	r1, #15	; 0xf
      {
	--idx; /* adjust to rescan below after checking last remainder */
c7e092b4:	c2422001 	subgt	r2, r2, #1	; 0x1
c7e092b8:	ca00000e 	bgt	c7e092f8 <malloc+0x15c>
	break;
      }

      else if (remainder_size >= 0) /* exact fit */
c7e092bc:	e3510000 	cmp	r1, #0	; 0x0
c7e092c0:	e590c00c 	ldr	ip, [r0, #12]
c7e092c4:	ba000008 	blt	c7e092ec <malloc+0x150>
      {
	unlink(victim, bck, fwd);
	set_inuse_bit_at_offset(victim, victim_size);
c7e092c8:	e0803003 	add	r3, r0, r3
c7e092cc:	e5932004 	ldr	r2, [r3, #4]
	break;
      }

      else if (remainder_size >= 0) /* exact fit */
      {
	unlink(victim, bck, fwd);
c7e092d0:	e5901008 	ldr	r1, [r0, #8]
	set_inuse_bit_at_offset(victim, victim_size);
c7e092d4:	e3822001 	orr	r2, r2, #1	; 0x1
	break;
      }

      else if (remainder_size >= 0) /* exact fit */
      {
	unlink(victim, bck, fwd);
c7e092d8:	e58c1008 	str	r1, [ip, #8]
	set_inuse_bit_at_offset(victim, victim_size);
c7e092dc:	e5832004 	str	r2, [r3, #4]
	break;
      }

      else if (remainder_size >= 0) /* exact fit */
      {
	unlink(victim, bck, fwd);
c7e092e0:	e581c00c 	str	ip, [r1, #12]
	set_inuse_bit_at_offset(victim, victim_size);
	check_malloced_chunk(victim, nb);
	return chunk2mem(victim);
c7e092e4:	e2806008 	add	r6, r0, #8	; 0x8
c7e092e8:	ea000131 	b	c7e097b4 <malloc+0x618>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
c7e092ec:	e1a0000c 	mov	r0, ip
c7e092f0:	e1500004 	cmp	r0, r4
c7e092f4:	1affffea 	bne	c7e092a4 <malloc+0x108>
	check_malloced_chunk(victim, nb);
	return chunk2mem(victim);
      }
    }

    ++idx;
c7e092f8:	e2826001 	add	r6, r2, #1	; 0x1

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
c7e092fc:	e59f54c4 	ldr	r5, [pc, #1220]	; c7e097c8 <malloc+0x62c>
c7e09300:	e2859010 	add	r9, r5, #16	; 0x10
c7e09304:	e599c008 	ldr	ip, [r9, #8]
c7e09308:	e2857008 	add	r7, r5, #8	; 0x8
c7e0930c:	e15c0009 	cmp	ip, r9
c7e09310:	0a000056 	beq	c7e09470 <malloc+0x2d4>
  {
    victim_size = chunksize(victim);
c7e09314:	e59c3004 	ldr	r3, [ip, #4]
c7e09318:	e3c34003 	bic	r4, r3, #3	; 0x3
    remainder_size = victim_size - nb;
c7e0931c:	e06a0004 	rsb	r0, sl, r4

    if (remainder_size >= (long)MINSIZE) /* re-split */
c7e09320:	e350000f 	cmp	r0, #15	; 0xf
c7e09324:	da00000a 	ble	c7e09354 <malloc+0x1b8>
    {
      remainder = chunk_at_offset(victim, nb);
c7e09328:	e08c200a 	add	r2, ip, sl
      set_head(victim, nb | PREV_INUSE);
c7e0932c:	e38a3001 	orr	r3, sl, #1	; 0x1
      link_last_remainder(remainder);
      set_head(remainder, remainder_size | PREV_INUSE);
c7e09330:	e3801001 	orr	r1, r0, #1	; 0x1
    remainder_size = victim_size - nb;

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
c7e09334:	e58c3004 	str	r3, [ip, #4]
      link_last_remainder(remainder);
c7e09338:	e589200c 	str	r2, [r9, #12]
c7e0933c:	e5892008 	str	r2, [r9, #8]
      set_head(remainder, remainder_size | PREV_INUSE);
      set_foot(remainder, remainder_size);
c7e09340:	e7820000 	str	r0, [r2, r0]
    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
      set_head(remainder, remainder_size | PREV_INUSE);
c7e09344:	e9820202 	stmib	r2, {r1, r9}

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
c7e09348:	e582900c 	str	r9, [r2, #12]
      set_head(remainder, remainder_size | PREV_INUSE);
      set_foot(remainder, remainder_size);
      check_malloced_chunk(victim, nb);
      return chunk2mem(victim);
c7e0934c:	e28c6008 	add	r6, ip, #8	; 0x8
c7e09350:	ea000117 	b	c7e097b4 <malloc+0x618>
    }

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
c7e09354:	e3500000 	cmp	r0, #0	; 0x0
      set_foot(remainder, remainder_size);
      check_malloced_chunk(victim, nb);
      return chunk2mem(victim);
    }

    clear_last_remainder;
c7e09358:	e589900c 	str	r9, [r9, #12]
c7e0935c:	e5899008 	str	r9, [r9, #8]

    if (remainder_size >= 0)  /* exhaust */
c7e09360:	ba000005 	blt	c7e0937c <malloc+0x1e0>
    {
      set_inuse_bit_at_offset(victim, victim_size);
c7e09364:	e08c2004 	add	r2, ip, r4
c7e09368:	e5923004 	ldr	r3, [r2, #4]
      check_malloced_chunk(victim, nb);
      return chunk2mem(victim);
c7e0936c:	e28c6008 	add	r6, ip, #8	; 0x8

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
    {
      set_inuse_bit_at_offset(victim, victim_size);
c7e09370:	e3833001 	orr	r3, r3, #1	; 0x1
c7e09374:	e5823004 	str	r3, [r2, #4]
c7e09378:	ea00010d 	b	c7e097b4 <malloc+0x618>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
c7e0937c:	e3540c02 	cmp	r4, #512	; 0x200
c7e09380:	2a00000c 	bcs	c7e093b8 <malloc+0x21c>
c7e09384:	e595300c 	ldr	r3, [r5, #12]
c7e09388:	e1a011a4 	lsr	r1, r4, #3
c7e0938c:	e1a00141 	asr	r0, r1, #2
c7e09390:	e3a02001 	mov	r2, #1	; 0x1
c7e09394:	e1833012 	orr	r3, r3, r2, lsl r0
c7e09398:	e0871181 	add	r1, r7, r1, lsl #3
c7e0939c:	e585300c 	str	r3, [r5, #12]
c7e093a0:	e5913008 	ldr	r3, [r1, #8]
c7e093a4:	e58c100c 	str	r1, [ip, #12]
c7e093a8:	e58c3008 	str	r3, [ip, #8]
c7e093ac:	e583c00c 	str	ip, [r3, #12]
c7e093b0:	e581c008 	str	ip, [r1, #8]
c7e093b4:	ea00002d 	b	c7e09470 <malloc+0x2d4>
c7e093b8:	e1a014a4 	lsr	r1, r4, #9
c7e093bc:	e3510004 	cmp	r1, #4	; 0x4
c7e093c0:	91a03324 	lsrls	r3, r4, #6
c7e093c4:	92831038 	addls	r1, r3, #56	; 0x38
c7e093c8:	9a00000f 	bls	c7e0940c <malloc+0x270>
c7e093cc:	e3510014 	cmp	r1, #20	; 0x14
c7e093d0:	9281105b 	addls	r1, r1, #91	; 0x5b
c7e093d4:	9a00000c 	bls	c7e0940c <malloc+0x270>
c7e093d8:	e3510054 	cmp	r1, #84	; 0x54
c7e093dc:	91a03624 	lsrls	r3, r4, #12
c7e093e0:	9283106e 	addls	r1, r3, #110	; 0x6e
c7e093e4:	9a000008 	bls	c7e0940c <malloc+0x270>
c7e093e8:	e3510f55 	cmp	r1, #340	; 0x154
c7e093ec:	91a037a4 	lsrls	r3, r4, #15
c7e093f0:	92831077 	addls	r1, r3, #119	; 0x77
c7e093f4:	9a000004 	bls	c7e0940c <malloc+0x270>
c7e093f8:	e59f33c4 	ldr	r3, [pc, #964]	; c7e097c4 <malloc+0x628>
c7e093fc:	e1510003 	cmp	r1, r3
c7e09400:	91a03924 	lsrls	r3, r4, #18
c7e09404:	83a0107e 	movhi	r1, #126	; 0x7e
c7e09408:	9283107c 	addls	r1, r3, #124	; 0x7c
c7e0940c:	e59f53b4 	ldr	r5, [pc, #948]	; c7e097c8 <malloc+0x62c>
c7e09410:	e2853008 	add	r3, r5, #8	; 0x8
c7e09414:	e0832181 	add	r2, r3, r1, lsl #3
c7e09418:	e5920008 	ldr	r0, [r2, #8]
c7e0941c:	e1500002 	cmp	r0, r2
c7e09420:	1a000009 	bne	c7e0944c <malloc+0x2b0>
c7e09424:	e595300c 	ldr	r3, [r5, #12]
c7e09428:	e1a01141 	asr	r1, r1, #2
c7e0942c:	e3a02001 	mov	r2, #1	; 0x1
c7e09430:	e1833112 	orr	r3, r3, r2, lsl r1
c7e09434:	e585300c 	str	r3, [r5, #12]
c7e09438:	e1a03000 	mov	r3, r0
c7e0943c:	ea000007 	b	c7e09460 <malloc+0x2c4>
c7e09440:	e5900008 	ldr	r0, [r0, #8]
c7e09444:	e1500002 	cmp	r0, r2
c7e09448:	0a000003 	beq	c7e0945c <malloc+0x2c0>
c7e0944c:	e5903004 	ldr	r3, [r0, #4]
c7e09450:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e09454:	e1540003 	cmp	r4, r3
c7e09458:	3afffff8 	bcc	c7e09440 <malloc+0x2a4>
c7e0945c:	e590300c 	ldr	r3, [r0, #12]
c7e09460:	e58c300c 	str	r3, [ip, #12]
c7e09464:	e58c0008 	str	r0, [ip, #8]
c7e09468:	e580c00c 	str	ip, [r0, #12]
c7e0946c:	e583c008 	str	ip, [r3, #8]
  /*
     If there are any possibly nonempty big-enough blocks,
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks_r)
c7e09470:	e1a03146 	asr	r3, r6, #2
c7e09474:	e3a02001 	mov	r2, #1	; 0x1
c7e09478:	e1a00312 	lsl	r0, r2, r3
c7e0947c:	e59f3344 	ldr	r3, [pc, #836]	; c7e097c8 <malloc+0x62c>
c7e09480:	e593200c 	ldr	r2, [r3, #12]
c7e09484:	e1500002 	cmp	r0, r2
c7e09488:	8a000050 	bhi	c7e095d0 <malloc+0x434>
  {

    /* Get to the first marked block */

    if ( (block & binblocks_r) == 0)
c7e0948c:	e1100002 	tst	r0, r2
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
c7e09490:	03c63003 	biceq	r3, r6, #3	; 0x3
c7e09494:	02836004 	addeq	r6, r3, #4	; 0x4
  if ( (block = idx2binblock(idx)) <= binblocks_r)
  {

    /* Get to the first marked block */

    if ( (block & binblocks_r) == 0)
c7e09498:	0a000001 	beq	c7e094a4 <malloc+0x308>
c7e0949c:	ea000003 	b	c7e094b0 <malloc+0x314>
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks_r) == 0)
      {
	idx += BINBLOCKWIDTH;
c7e094a0:	e2866004 	add	r6, r6, #4	; 0x4
	block <<= 1;
c7e094a4:	e1a00080 	lsl	r0, r0, #1
    if ( (block & binblocks_r) == 0)
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks_r) == 0)
c7e094a8:	e1100002 	tst	r0, r2
c7e094ac:	0afffffb 	beq	c7e094a0 <malloc+0x304>

    /* For each possibly nonempty block ... */
    for (;;)
    {
      startidx = idx;          /* (track incomplete blocks) */
      q = bin = bin_at(idx);
c7e094b0:	e59f3308 	ldr	r3, [pc, #776]	; c7e097c0 <malloc+0x624>
c7e094b4:	e1a04006 	mov	r4, r6
c7e094b8:	e0831186 	add	r1, r3, r6, lsl #3
c7e094bc:	e1a02001 	mov	r2, r1
      /* For each bin in this block ... */
      do
      {
	/* Find and use first big enough chunk ... */

	for (victim = last(bin); victim != bin; victim = victim->bk)
c7e094c0:	e592500c 	ldr	r5, [r2, #12]
c7e094c4:	ea000021 	b	c7e09550 <malloc+0x3b4>
	{
	  victim_size = chunksize(victim);
c7e094c8:	e5953004 	ldr	r3, [r5, #4]
c7e094cc:	e3c33003 	bic	r3, r3, #3	; 0x3
	  remainder_size = victim_size - nb;
c7e094d0:	e06a7003 	rsb	r7, sl, r3

	  if (remainder_size >= (long)MINSIZE) /* split */
c7e094d4:	e357000f 	cmp	r7, #15	; 0xf
c7e094d8:	da00000f 	ble	c7e0951c <malloc+0x380>
	  {
	    remainder = chunk_at_offset(victim, nb);
	    set_head(victim, nb | PREV_INUSE);
	    unlink(victim, bck, fwd);
c7e094dc:	e1a06005 	mov	r6, r5
c7e094e0:	e595c00c 	ldr	ip, [r5, #12]
c7e094e4:	e5b60008 	ldr	r0, [r6, #8]!
	    link_last_remainder(remainder);
c7e094e8:	e59f42dc 	ldr	r4, [pc, #732]	; c7e097cc <malloc+0x630>
	  victim_size = chunksize(victim);
	  remainder_size = victim_size - nb;

	  if (remainder_size >= (long)MINSIZE) /* split */
	  {
	    remainder = chunk_at_offset(victim, nb);
c7e094ec:	e085300a 	add	r3, r5, sl
	    set_head(victim, nb | PREV_INUSE);
c7e094f0:	e38a2001 	orr	r2, sl, #1	; 0x1
	    unlink(victim, bck, fwd);
	    link_last_remainder(remainder);
	    set_head(remainder, remainder_size | PREV_INUSE);
c7e094f4:	e3871001 	orr	r1, r7, #1	; 0x1

	  if (remainder_size >= (long)MINSIZE) /* split */
	  {
	    remainder = chunk_at_offset(victim, nb);
	    set_head(victim, nb | PREV_INUSE);
	    unlink(victim, bck, fwd);
c7e094f8:	e58c0008 	str	r0, [ip, #8]
c7e094fc:	e580c00c 	str	ip, [r0, #12]
	  remainder_size = victim_size - nb;

	  if (remainder_size >= (long)MINSIZE) /* split */
	  {
	    remainder = chunk_at_offset(victim, nb);
	    set_head(victim, nb | PREV_INUSE);
c7e09500:	e5852004 	str	r2, [r5, #4]
	    unlink(victim, bck, fwd);
	    link_last_remainder(remainder);
c7e09504:	e5893008 	str	r3, [r9, #8]
c7e09508:	e589300c 	str	r3, [r9, #12]
	    set_head(remainder, remainder_size | PREV_INUSE);
	    set_foot(remainder, remainder_size);
c7e0950c:	e7837007 	str	r7, [r3, r7]
	  {
	    remainder = chunk_at_offset(victim, nb);
	    set_head(victim, nb | PREV_INUSE);
	    unlink(victim, bck, fwd);
	    link_last_remainder(remainder);
	    set_head(remainder, remainder_size | PREV_INUSE);
c7e09510:	e9830012 	stmib	r3, {r1, r4}
	  if (remainder_size >= (long)MINSIZE) /* split */
	  {
	    remainder = chunk_at_offset(victim, nb);
	    set_head(victim, nb | PREV_INUSE);
	    unlink(victim, bck, fwd);
	    link_last_remainder(remainder);
c7e09514:	e583400c 	str	r4, [r3, #12]
c7e09518:	ea0000a5 	b	c7e097b4 <malloc+0x618>
	    set_foot(remainder, remainder_size);
	    check_malloced_chunk(victim, nb);
	    return chunk2mem(victim);
	  }

	  else if (remainder_size >= 0)  /* take */
c7e0951c:	e3570000 	cmp	r7, #0	; 0x0
c7e09520:	e595c00c 	ldr	ip, [r5, #12]
c7e09524:	ba000008 	blt	c7e0954c <malloc+0x3b0>
	  {
	    set_inuse_bit_at_offset(victim, victim_size);
c7e09528:	e0853003 	add	r3, r5, r3
c7e0952c:	e5932004 	ldr	r2, [r3, #4]
	    unlink(victim, bck, fwd);
c7e09530:	e1a06005 	mov	r6, r5
c7e09534:	e5b61008 	ldr	r1, [r6, #8]!
	    return chunk2mem(victim);
	  }

	  else if (remainder_size >= 0)  /* take */
	  {
	    set_inuse_bit_at_offset(victim, victim_size);
c7e09538:	e3822001 	orr	r2, r2, #1	; 0x1
c7e0953c:	e5832004 	str	r2, [r3, #4]
	    unlink(victim, bck, fwd);
c7e09540:	e58c1008 	str	r1, [ip, #8]
c7e09544:	e581c00c 	str	ip, [r1, #12]
c7e09548:	ea000099 	b	c7e097b4 <malloc+0x618>
      /* For each bin in this block ... */
      do
      {
	/* Find and use first big enough chunk ... */

	for (victim = last(bin); victim != bin; victim = victim->bk)
c7e0954c:	e1a0500c 	mov	r5, ip
c7e09550:	e1550002 	cmp	r5, r2
c7e09554:	1affffdb 	bne	c7e094c8 <malloc+0x32c>

	}

       bin = next_bin(bin);

      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
c7e09558:	e2844001 	add	r4, r4, #1	; 0x1
c7e0955c:	e3140003 	tst	r4, #3	; 0x3
	    return chunk2mem(victim);
	  }

	}

       bin = next_bin(bin);
c7e09560:	12822008 	addne	r2, r2, #8	; 0x8
c7e09564:	1affffd5 	bne	c7e094c0 <malloc+0x324>
c7e09568:	e1a03006 	mov	r3, r6

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
	if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
c7e0956c:	e3130003 	tst	r3, #3	; 0x3
	{
	  av_[1] = (mbinptr)(binblocks_r & ~block);
	  break;
	}
	--startidx;
       q = prev_bin(q);
c7e09570:	e1a02001 	mov	r2, r1
	if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
	{
	  av_[1] = (mbinptr)(binblocks_r & ~block);
	  break;
	}
	--startidx;
c7e09574:	e2433001 	sub	r3, r3, #1	; 0x1

      do   /* Possibly backtrack to try to clear a partial block */
      {
	if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
	{
	  av_[1] = (mbinptr)(binblocks_r & ~block);
c7e09578:	059f2248 	ldreq	r2, [pc, #584]	; c7e097c8 <malloc+0x62c>
c7e0957c:	0592300c 	ldreq	r3, [r2, #12]
c7e09580:	01c33000 	biceq	r3, r3, r0
c7e09584:	0582300c 	streq	r3, [r2, #12]
c7e09588:	0a000002 	beq	c7e09598 <malloc+0x3fc>
	  break;
	}
	--startidx;
       q = prev_bin(q);
      } while (first(q) == q);
c7e0958c:	e4121008 	ldr	r1, [r2], #-8
c7e09590:	e1510002 	cmp	r1, r2
c7e09594:	0afffff4 	beq	c7e0956c <malloc+0x3d0>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks_r && (block != 0) )
c7e09598:	e59f3228 	ldr	r3, [pc, #552]	; c7e097c8 <malloc+0x62c>
c7e0959c:	e1a00080 	lsl	r0, r0, #1
c7e095a0:	e593300c 	ldr	r3, [r3, #12]
c7e095a4:	e1500003 	cmp	r0, r3
c7e095a8:	8a000008 	bhi	c7e095d0 <malloc+0x434>
c7e095ac:	e3500000 	cmp	r0, #0	; 0x0
c7e095b0:	0a000006 	beq	c7e095d0 <malloc+0x434>
c7e095b4:	e1a06004 	mov	r6, r4
c7e095b8:	ea000001 	b	c7e095c4 <malloc+0x428>
      {
	while ((block & binblocks_r) == 0)
	{
	  idx += BINBLOCKWIDTH;
c7e095bc:	e2866004 	add	r6, r6, #4	; 0x4
	  block <<= 1;
c7e095c0:	e1a00080 	lsl	r0, r0, #1

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks_r && (block != 0) )
      {
	while ((block & binblocks_r) == 0)
c7e095c4:	e1100003 	tst	r0, r3
c7e095c8:	1affffb8 	bne	c7e094b0 <malloc+0x314>
c7e095cc:	eafffffa 	b	c7e095bc <malloc+0x420>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  if ( (remainder_size = chunksize(top) - nb) < (long)MINSIZE)
c7e095d0:	e59f21f0 	ldr	r2, [pc, #496]	; c7e097c8 <malloc+0x62c>
c7e095d4:	e5926010 	ldr	r6, [r2, #16]
c7e095d8:	e5963004 	ldr	r3, [r6, #4]
c7e095dc:	e3c37003 	bic	r7, r3, #3	; 0x3
c7e095e0:	e06a3007 	rsb	r3, sl, r7
c7e095e4:	e353000f 	cmp	r3, #15	; 0xf
c7e095e8:	ca000066 	bgt	c7e09788 <malloc+0x5ec>
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */

  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
c7e095ec:	e59f31c8 	ldr	r3, [pc, #456]	; c7e097bc <malloc+0x620>

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
c7e095f0:	e5922410 	ldr	r2, [r2, #1040]
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */

  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
c7e095f4:	e5933000 	ldr	r3, [r3]

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
c7e095f8:	e3720001 	cmn	r2, #1	; 0x1
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */

  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
c7e095fc:	e2833010 	add	r3, r3, #16	; 0x10
c7e09600:	e083500a 	add	r5, r3, sl
  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
c7e09604:	12853eff 	addne	r3, r5, #4080	; 0xff0
c7e09608:	1283300f 	addne	r3, r3, #15	; 0xf
c7e0960c:	13c35eff 	bicne	r5, r3, #4080	; 0xff0
c7e09610:	13c5500f 	bicne	r5, r5, #15	; 0xf

  brk = (char*)(MORECORE (sbrk_size));
c7e09614:	e1a00005 	mov	r0, r5
c7e09618:	ebfffe07 	bl	c7e08e3c <sbrk>

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) ||
c7e0961c:	e3700001 	cmn	r0, #1	; 0x1
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));
c7e09620:	e1a04000 	mov	r4, r0

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) ||
c7e09624:	0a000050 	beq	c7e0976c <malloc+0x5d0>
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
c7e09628:	e0862007 	add	r2, r6, r7
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) ||
c7e0962c:	e1500002 	cmp	r0, r2
c7e09630:	2a000002 	bcs	c7e09640 <malloc+0x4a4>
c7e09634:	e59f3184 	ldr	r3, [pc, #388]	; c7e097c0 <malloc+0x624>
c7e09638:	e1560003 	cmp	r6, r3
c7e0963c:	1a00004a 	bne	c7e0976c <malloc+0x5d0>
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
c7e09640:	e59fc174 	ldr	ip, [pc, #372]	; c7e097bc <malloc+0x620>

  if (brk == old_end) /* can just add bytes to current top */
c7e09644:	e1540002 	cmp	r4, r2
  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) ||
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
c7e09648:	e59c3014 	ldr	r3, [ip, #20]
c7e0964c:	e59f0174 	ldr	r0, [pc, #372]	; c7e097c8 <malloc+0x62c>
c7e09650:	e0851003 	add	r1, r5, r3
c7e09654:	e58c1014 	str	r1, [ip, #20]

  if (brk == old_end) /* can just add bytes to current top */
  {
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
c7e09658:	00853007 	addeq	r3, r5, r7
c7e0965c:	05902010 	ldreq	r2, [r0, #16]
c7e09660:	03833001 	orreq	r3, r3, #1	; 0x1
c7e09664:	05823004 	streq	r3, [r2, #4]
c7e09668:	0a000036 	beq	c7e09748 <malloc+0x5ac>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
c7e0966c:	e5903410 	ldr	r3, [r0, #1040]
c7e09670:	e3730001 	cmn	r3, #1	; 0x1
      sbrk_base = brk;
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
c7e09674:	10843001 	addne	r3, r4, r1
c7e09678:	10623003 	rsbne	r3, r2, r3
    set_head(top, top_size | PREV_INUSE);
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
      sbrk_base = brk;
c7e0967c:	05804410 	streq	r4, [r0, #1040]
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
c7e09680:	158c3014 	strne	r3, [ip, #20]

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (unsigned long)chunk2mem(brk) & MALLOC_ALIGN_MASK;
    if (front_misalign > 0)
c7e09684:	e2143007 	ands	r3, r4, #7	; 0x7
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
c7e09688:	12630008 	rsbne	r0, r3, #8	; 0x8
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (unsigned long)chunk2mem(brk) & MALLOC_ALIGN_MASK;
    if (front_misalign > 0)
c7e0968c:	01a00003 	moveq	r0, r3
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */

    correction += ((((unsigned long)(brk + sbrk_size))+(pagesz-1)) &
c7e09690:	e2853eff 	add	r3, r5, #4080	; 0xff0
    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (unsigned long)chunk2mem(brk) & MALLOC_ALIGN_MASK;
    if (front_misalign > 0)
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
      brk += correction;
c7e09694:	10844000 	addne	r4, r4, r0
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */

    correction += ((((unsigned long)(brk + sbrk_size))+(pagesz-1)) &
c7e09698:	e283300f 	add	r3, r3, #15	; 0xf
c7e0969c:	e0843003 	add	r3, r4, r3
c7e096a0:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
c7e096a4:	e0842005 	add	r2, r4, r5
c7e096a8:	e3c3300f 	bic	r3, r3, #15	; 0xf
c7e096ac:	e0623003 	rsb	r3, r2, r3
c7e096b0:	e0835000 	add	r5, r3, r0
		   ~(pagesz - 1)) - ((unsigned long)(brk + sbrk_size));

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
c7e096b4:	e1a00005 	mov	r0, r5
c7e096b8:	ebfffddf 	bl	c7e08e3c <sbrk>
    if (new_brk == (char*)(MORECORE_FAILURE)) return;
c7e096bc:	e3700001 	cmn	r0, #1	; 0x1

    correction += ((((unsigned long)(brk + sbrk_size))+(pagesz-1)) &
		   ~(pagesz - 1)) - ((unsigned long)(brk + sbrk_size));

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
c7e096c0:	e1a02000 	mov	r2, r0
    if (new_brk == (char*)(MORECORE_FAILURE)) return;
c7e096c4:	0a000028 	beq	c7e0976c <malloc+0x5d0>

    sbrked_mem += correction;
c7e096c8:	e59f00ec 	ldr	r0, [pc, #236]	; c7e097bc <malloc+0x620>

    top = (mchunkptr)brk;
c7e096cc:	e59fc0f4 	ldr	ip, [pc, #244]	; c7e097c8 <malloc+0x62c>

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
    if (new_brk == (char*)(MORECORE_FAILURE)) return;

    sbrked_mem += correction;
c7e096d0:	e5901014 	ldr	r1, [r0, #20]

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
c7e096d4:	e0642002 	rsb	r2, r4, r2
c7e096d8:	e0852002 	add	r2, r5, r2

    if (old_top != initial_top)
c7e096dc:	e28c3008 	add	r3, ip, #8	; 0x8

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
    if (new_brk == (char*)(MORECORE_FAILURE)) return;

    sbrked_mem += correction;
c7e096e0:	e0851001 	add	r1, r5, r1

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
c7e096e4:	e3822001 	orr	r2, r2, #1	; 0x1

    if (old_top != initial_top)
c7e096e8:	e1560003 	cmp	r6, r3

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
    if (new_brk == (char*)(MORECORE_FAILURE)) return;

    sbrked_mem += correction;
c7e096ec:	e5801014 	str	r1, [r0, #20]

    top = (mchunkptr)brk;
c7e096f0:	e58c4010 	str	r4, [ip, #16]
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
c7e096f4:	e5842004 	str	r2, [r4, #4]

    if (old_top != initial_top)
c7e096f8:	0a000012 	beq	c7e09748 <malloc+0x5ac>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE)
c7e096fc:	e357000f 	cmp	r7, #15	; 0xf
      {
	set_head(top, PREV_INUSE); /* will force null return from malloc */
c7e09700:	959c2010 	ldrls	r2, [ip, #16]
c7e09704:	93a03001 	movls	r3, #1	; 0x1
c7e09708:	95823004 	strls	r3, [r2, #4]

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE)
c7e0970c:	9a000016 	bls	c7e0976c <malloc+0x5d0>
	return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
c7e09710:	e5963004 	ldr	r3, [r6, #4]
	set_head(top, PREV_INUSE); /* will force null return from malloc */
	return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
c7e09714:	e247200c 	sub	r2, r7, #12	; 0xc
c7e09718:	e3c22007 	bic	r2, r2, #7	; 0x7
      set_head_size(old_top, old_top_size);
c7e0971c:	e2033001 	and	r3, r3, #1	; 0x1
c7e09720:	e1823003 	orr	r3, r2, r3
      chunk_at_offset(old_top, old_top_size          )->size =
c7e09724:	e3a01005 	mov	r1, #5	; 0x5
	SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
	SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE)
c7e09728:	e352000f 	cmp	r2, #15	; 0xf
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
      chunk_at_offset(old_top, old_top_size          )->size =
c7e0972c:	e0862002 	add	r2, r6, r2
	return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
c7e09730:	e5863004 	str	r3, [r6, #4]
      chunk_at_offset(old_top, old_top_size          )->size =
	SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
c7e09734:	e5821008 	str	r1, [r2, #8]
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
      chunk_at_offset(old_top, old_top_size          )->size =
c7e09738:	e5821004 	str	r1, [r2, #4]
	SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
	SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE)
c7e0973c:	9a000001 	bls	c7e09748 <malloc+0x5ac>
	fREe(chunk2mem(old_top));
c7e09740:	e2860008 	add	r0, r6, #8	; 0x8
c7e09744:	ebfffe05 	bl	c7e08f60 <free>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem)
c7e09748:	e59f106c 	ldr	r1, [pc, #108]	; c7e097bc <malloc+0x620>
c7e0974c:	e5912014 	ldr	r2, [r1, #20]
c7e09750:	e591303c 	ldr	r3, [r1, #60]
c7e09754:	e1520003 	cmp	r2, r3
    max_sbrked_mem = sbrked_mem;
c7e09758:	8581203c 	strhi	r2, [r1, #60]
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem)
c7e0975c:	e59f1058 	ldr	r1, [pc, #88]	; c7e097bc <malloc+0x620>
c7e09760:	e5913040 	ldr	r3, [r1, #64]
c7e09764:	e1520003 	cmp	r2, r3
    max_total_mem = mmapped_mem + sbrked_mem;
c7e09768:	85812040 	strhi	r2, [r1, #64]
      return chunk2mem(victim);
#endif

    /* Try to extend */
    malloc_extend_top(nb);
    if ( (remainder_size = chunksize(top) - nb) < (long)MINSIZE)
c7e0976c:	e59f3054 	ldr	r3, [pc, #84]	; c7e097c8 <malloc+0x62c>
c7e09770:	e5933010 	ldr	r3, [r3, #16]
c7e09774:	e5933004 	ldr	r3, [r3, #4]
c7e09778:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e0977c:	e06a3003 	rsb	r3, sl, r3
c7e09780:	e353000f 	cmp	r3, #15	; 0xf
c7e09784:	da000009 	ble	c7e097b0 <malloc+0x614>
      return 0; /* propagate failure */
  }

  victim = top;
c7e09788:	e59f0038 	ldr	r0, [pc, #56]	; c7e097c8 <malloc+0x62c>
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
c7e0978c:	e383c001 	orr	ip, r3, #1	; 0x1
    malloc_extend_top(nb);
    if ( (remainder_size = chunksize(top) - nb) < (long)MINSIZE)
      return 0; /* propagate failure */
  }

  victim = top;
c7e09790:	e5903010 	ldr	r3, [r0, #16]
  set_head(victim, nb | PREV_INUSE);
c7e09794:	e38a2001 	orr	r2, sl, #1	; 0x1
  top = chunk_at_offset(victim, nb);
c7e09798:	e083100a 	add	r1, r3, sl
    if ( (remainder_size = chunksize(top) - nb) < (long)MINSIZE)
      return 0; /* propagate failure */
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
c7e0979c:	e5832004 	str	r2, [r3, #4]
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  return chunk2mem(victim);
c7e097a0:	e2836008 	add	r6, r3, #8	; 0x8
      return 0; /* propagate failure */
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
c7e097a4:	e5801010 	str	r1, [r0, #16]
  set_head(top, remainder_size | PREV_INUSE);
c7e097a8:	e581c004 	str	ip, [r1, #4]
c7e097ac:	ea000000 	b	c7e097b4 <malloc+0x618>
  check_malloced_chunk(victim, nb);
  return chunk2mem(victim);
c7e097b0:	e3a06000 	mov	r6, #0	; 0x0

}
c7e097b4:	e1a00006 	mov	r0, r6
c7e097b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e097bc:	c7e401c0 	.word	0xc7e401c0
c7e097c0:	c7e353d8 	.word	0xc7e353d8
c7e097c4:	00000554 	.word	0x00000554
c7e097c8:	c7e353d0 	.word	0xc7e353d0
c7e097cc:	c7e353e0 	.word	0xc7e353e0

c7e097d0 <memalign>:
  INTERNAL_SIZE_T  newsize;   /* its size */
  INTERNAL_SIZE_T  leadsize;  /* leading space befor alignment point */
  mchunkptr remainder;        /* spare room at end to split off */
  long      remainder_size;   /* its size */

  if ((long)bytes < 0) return 0;
c7e097d0:	e3510000 	cmp	r1, #0	; 0x0
#if __STD_C
Void_t* mEMALIGn(size_t alignment, size_t bytes)
#else
Void_t* mEMALIGn(alignment, bytes) size_t alignment; size_t bytes;
#endif
{
c7e097d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e097d8:	e1a04000 	mov	r4, r0
  INTERNAL_SIZE_T  newsize;   /* its size */
  INTERNAL_SIZE_T  leadsize;  /* leading space befor alignment point */
  mchunkptr remainder;        /* spare room at end to split off */
  long      remainder_size;   /* its size */

  if ((long)bytes < 0) return 0;
c7e097dc:	ba00003d 	blt	c7e098d8 <memalign+0x108>

  /* If need less alignment than we give anyway, just relay to malloc */

  if (alignment <= MALLOC_ALIGNMENT) return mALLOc(bytes);
c7e097e0:	e3500008 	cmp	r0, #8	; 0x8
c7e097e4:	8a000002 	bhi	c7e097f4 <memalign+0x24>
c7e097e8:	e1a00001 	mov	r0, r1
  }

  check_inuse_chunk(p);
  return chunk2mem(p);

}
c7e097ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}

  if ((long)bytes < 0) return 0;

  /* If need less alignment than we give anyway, just relay to malloc */

  if (alignment <= MALLOC_ALIGNMENT) return mALLOc(bytes);
c7e097f0:	eafffe69 	b	c7e0919c <malloc>

  if (alignment <  MINSIZE) alignment = MINSIZE;

  /* Call malloc with worst case padding to hit alignment. */

  nb = request2size(bytes);
c7e097f4:	e281000b 	add	r0, r1, #11	; 0xb

  if (alignment <= MALLOC_ALIGNMENT) return mALLOc(bytes);

  /* Otherwise, ensure that it is at least a minimum chunk size */

  if (alignment <  MINSIZE) alignment = MINSIZE;
c7e097f8:	e354000f 	cmp	r4, #15	; 0xf
c7e097fc:	93a04010 	movls	r4, #16	; 0x10

  /* Call malloc with worst case padding to hit alignment. */

  nb = request2size(bytes);
c7e09800:	e3500016 	cmp	r0, #22	; 0x16
c7e09804:	c3c07007 	bicgt	r7, r0, #7	; 0x7
c7e09808:	d3a07010 	movle	r7, #16	; 0x10
  m  = (char*)(mALLOc(nb + alignment + MINSIZE));
c7e0980c:	e2840010 	add	r0, r4, #16	; 0x10
c7e09810:	e0800007 	add	r0, r0, r7
c7e09814:	ebfffe60 	bl	c7e0919c <malloc>

  if (m == 0) return 0; /* propagate failure */
c7e09818:	e2506000 	subs	r6, r0, #0	; 0x0
c7e0981c:	0a00002d 	beq	c7e098d8 <memalign+0x108>

  p = mem2chunk(m);

  if ((((unsigned long)(m)) % alignment) == 0) /* aligned */
c7e09820:	e1a01004 	mov	r1, r4
c7e09824:	eb008374 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e09828:	e3510000 	cmp	r1, #0	; 0x0
  nb = request2size(bytes);
  m  = (char*)(mALLOc(nb + alignment + MINSIZE));

  if (m == 0) return 0; /* propagate failure */

  p = mem2chunk(m);
c7e0982c:	e2465008 	sub	r5, r6, #8	; 0x8

  if ((((unsigned long)(m)) % alignment) == 0) /* aligned */
c7e09830:	0a000018 	beq	c7e09898 <memalign+0xc8>
      a spot with less than MINSIZE leader, we can move to the
      next aligned spot -- we've allocated enough total room so that
      this is always possible.
    */

    brk = (char*)mem2chunk(((unsigned long)(m + alignment - 1)) & -((signed) alignment));
c7e09834:	e2443001 	sub	r3, r4, #1	; 0x1
c7e09838:	e2642000 	rsb	r2, r4, #0	; 0x0
c7e0983c:	e0863003 	add	r3, r6, r3
c7e09840:	e0033002 	and	r3, r3, r2
c7e09844:	e243c008 	sub	ip, r3, #8	; 0x8
    if ((long)(brk - (char*)(p)) < MINSIZE) brk = brk + alignment;
c7e09848:	e065300c 	rsb	r3, r5, ip
c7e0984c:	e353000f 	cmp	r3, #15	; 0xf

    newp = (mchunkptr)brk;
    leadsize = brk - (char*)(p);
    newsize = chunksize(p) - leadsize;
c7e09850:	e5163004 	ldr	r3, [r6, #-4]
      next aligned spot -- we've allocated enough total room so that
      this is always possible.
    */

    brk = (char*)mem2chunk(((unsigned long)(m + alignment - 1)) & -((signed) alignment));
    if ((long)(brk - (char*)(p)) < MINSIZE) brk = brk + alignment;
c7e09854:	908cc004 	addls	ip, ip, r4

    newp = (mchunkptr)brk;
    leadsize = brk - (char*)(p);
c7e09858:	e065100c 	rsb	r1, r5, ip
    newsize = chunksize(p) - leadsize;
c7e0985c:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e09860:	e0613003 	rsb	r3, r1, r3
    }
#endif

    /* give back leader, use the rest */

    set_head(newp, newsize | PREV_INUSE);
c7e09864:	e3832001 	orr	r2, r3, #1	; 0x1
c7e09868:	e58c2004 	str	r2, [ip, #4]
    set_inuse_bit_at_offset(newp, newsize);
c7e0986c:	e08c3003 	add	r3, ip, r3
c7e09870:	e5932004 	ldr	r2, [r3, #4]
    set_head_size(p, leadsize);
    fREe(chunk2mem(p));
c7e09874:	e2850008 	add	r0, r5, #8	; 0x8
#endif

    /* give back leader, use the rest */

    set_head(newp, newsize | PREV_INUSE);
    set_inuse_bit_at_offset(newp, newsize);
c7e09878:	e3822001 	orr	r2, r2, #1	; 0x1
c7e0987c:	e5832004 	str	r2, [r3, #4]
    set_head_size(p, leadsize);
c7e09880:	e5163004 	ldr	r3, [r6, #-4]
    fREe(chunk2mem(p));
c7e09884:	e1a0500c 	mov	r5, ip

    /* give back leader, use the rest */

    set_head(newp, newsize | PREV_INUSE);
    set_inuse_bit_at_offset(newp, newsize);
    set_head_size(p, leadsize);
c7e09888:	e2033001 	and	r3, r3, #1	; 0x1
c7e0988c:	e1811003 	orr	r1, r1, r3
c7e09890:	e5061004 	str	r1, [r6, #-4]
    fREe(chunk2mem(p));
c7e09894:	ebfffdb1 	bl	c7e08f60 <free>
    assert (newsize >= nb && (((unsigned long)(chunk2mem(p))) % alignment) == 0);
  }

  /* Also give back spare room at the end */

  remainder_size = chunksize(p) - nb;
c7e09898:	e5953004 	ldr	r3, [r5, #4]
c7e0989c:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e098a0:	e0673003 	rsb	r3, r7, r3

  if (remainder_size >= (long)MINSIZE)
c7e098a4:	e353000f 	cmp	r3, #15	; 0xf
c7e098a8:	da000008 	ble	c7e098d0 <memalign+0x100>
  {
    remainder = chunk_at_offset(p, nb);
    set_head(remainder, remainder_size | PREV_INUSE);
c7e098ac:	e3833001 	orr	r3, r3, #1	; 0x1

  remainder_size = chunksize(p) - nb;

  if (remainder_size >= (long)MINSIZE)
  {
    remainder = chunk_at_offset(p, nb);
c7e098b0:	e0850007 	add	r0, r5, r7
    set_head(remainder, remainder_size | PREV_INUSE);
c7e098b4:	e5803004 	str	r3, [r0, #4]
    set_head_size(p, nb);
c7e098b8:	e5953004 	ldr	r3, [r5, #4]
    fREe(chunk2mem(remainder));
c7e098bc:	e2800008 	add	r0, r0, #8	; 0x8

  if (remainder_size >= (long)MINSIZE)
  {
    remainder = chunk_at_offset(p, nb);
    set_head(remainder, remainder_size | PREV_INUSE);
    set_head_size(p, nb);
c7e098c0:	e2033001 	and	r3, r3, #1	; 0x1
c7e098c4:	e1873003 	orr	r3, r7, r3
c7e098c8:	e5853004 	str	r3, [r5, #4]
    fREe(chunk2mem(remainder));
c7e098cc:	ebfffda3 	bl	c7e08f60 <free>
  }

  check_inuse_chunk(p);
  return chunk2mem(p);
c7e098d0:	e2850008 	add	r0, r5, #8	; 0x8
c7e098d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e098d8:	e3a00000 	mov	r0, #0	; 0x0

}
c7e098dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e098e0 <pvalloc>:
#else
Void_t* pvALLOc(bytes) size_t bytes;
#endif
{
  size_t pagesize = malloc_getpagesize;
  return mEMALIGn (pagesize, (bytes + pagesize - 1) & ~(pagesize - 1));
c7e098e0:	e2801eff 	add	r1, r0, #4080	; 0xff0
c7e098e4:	e281100f 	add	r1, r1, #15	; 0xf
c7e098e8:	e3c11eff 	bic	r1, r1, #4080	; 0xff0
c7e098ec:	e3c1100f 	bic	r1, r1, #15	; 0xf
c7e098f0:	e3a00a01 	mov	r0, #4096	; 0x1000
c7e098f4:	eaffffb5 	b	c7e097d0 <memalign>

c7e098f8 <valloc>:
#if __STD_C
Void_t* vALLOc(size_t bytes)
#else
Void_t* vALLOc(bytes) size_t bytes;
#endif
{
c7e098f8:	e1a01000 	mov	r1, r0
  return mEMALIGn (malloc_getpagesize, bytes);
c7e098fc:	e3a00a01 	mov	r0, #4096	; 0x1000
c7e09900:	eaffffb2 	b	c7e097d0 <memalign>

c7e09904 <calloc>:
#if __STD_C
Void_t* cALLOc(size_t n, size_t elem_size)
#else
Void_t* cALLOc(n, elem_size) size_t n; size_t elem_size;
#endif
{
c7e09904:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  INTERNAL_SIZE_T sz = n * elem_size;


  /* check if expand_top called, in which case don't need to clear */
#if MORECORE_CLEARS
  mchunkptr oldtop = top;
c7e09908:	e59f30d0 	ldr	r3, [pc, #208]	; c7e099e0 <calloc+0xdc>
#if __STD_C
Void_t* cALLOc(size_t n, size_t elem_size)
#else
Void_t* cALLOc(n, elem_size) size_t n; size_t elem_size;
#endif
{
c7e0990c:	e1a04000 	mov	r4, r0
  INTERNAL_SIZE_T sz = n * elem_size;


  /* check if expand_top called, in which case don't need to clear */
#if MORECORE_CLEARS
  mchunkptr oldtop = top;
c7e09910:	e5937010 	ldr	r7, [r3, #16]
  INTERNAL_SIZE_T oldtopsize = chunksize(top);
#endif
  Void_t* mem = mALLOc (sz);
c7e09914:	e0000194 	mul	r0, r4, r1


  /* check if expand_top called, in which case don't need to clear */
#if MORECORE_CLEARS
  mchunkptr oldtop = top;
  INTERNAL_SIZE_T oldtopsize = chunksize(top);
c7e09918:	e5976004 	ldr	r6, [r7, #4]
#endif
  Void_t* mem = mALLOc (sz);
c7e0991c:	ebfffe1e 	bl	c7e0919c <malloc>

  if ((long)n < 0) return 0;
c7e09920:	e3540000 	cmp	r4, #0	; 0x0
  /* check if expand_top called, in which case don't need to clear */
#if MORECORE_CLEARS
  mchunkptr oldtop = top;
  INTERNAL_SIZE_T oldtopsize = chunksize(top);
#endif
  Void_t* mem = mALLOc (sz);
c7e09924:	e1a05000 	mov	r5, r0

  if ((long)n < 0) return 0;
c7e09928:	b3a05000 	movlt	r5, #0	; 0x0
c7e0992c:	ba000029 	blt	c7e099d8 <calloc+0xd4>

  if (mem == 0)
c7e09930:	e3550000 	cmp	r5, #0	; 0x0
c7e09934:	0a000027 	beq	c7e099d8 <calloc+0xd4>

#if HAVE_MMAP
    if (chunk_is_mmapped(p)) return mem;
#endif

    csz = chunksize(p);
c7e09938:	e5153004 	ldr	r3, [r5, #-4]


  /* check if expand_top called, in which case don't need to clear */
#if MORECORE_CLEARS
  mchunkptr oldtop = top;
  INTERNAL_SIZE_T oldtopsize = chunksize(top);
c7e0993c:	e3c61003 	bic	r1, r6, #3	; 0x3

#if HAVE_MMAP
    if (chunk_is_mmapped(p)) return mem;
#endif

    csz = chunksize(p);
c7e09940:	e3c33003 	bic	r3, r3, #3	; 0x3

  if (mem == 0)
    return 0;
  else
  {
    p = mem2chunk(mem);
c7e09944:	e2452008 	sub	r2, r5, #8	; 0x8
#endif

    csz = chunksize(p);

#if MORECORE_CLEARS
    if (p == oldtop && csz > oldtopsize)
c7e09948:	e1520007 	cmp	r2, r7
c7e0994c:	13a02000 	movne	r2, #0	; 0x0
c7e09950:	03a02001 	moveq	r2, #1	; 0x1
c7e09954:	e1530001 	cmp	r3, r1
c7e09958:	93a02000 	movls	r2, #0	; 0x0
c7e0995c:	e3520000 	cmp	r2, #0	; 0x0
c7e09960:	11a03001 	movne	r3, r1
      /* clear only the bytes from non-freshly-sbrked memory */
      csz = oldtopsize;
    }
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
c7e09964:	e2432004 	sub	r2, r3, #4	; 0x4
c7e09968:	e3520024 	cmp	r2, #36	; 0x24
c7e0996c:	8a000017 	bhi	c7e099d0 <calloc+0xcc>
c7e09970:	e3520013 	cmp	r2, #19	; 0x13
c7e09974:	e1a01005 	mov	r1, r5
c7e09978:	9a00000e 	bls	c7e099b8 <calloc+0xb4>
c7e0997c:	e3a0c000 	mov	ip, #0	; 0x0
c7e09980:	e1a00005 	mov	r0, r5
c7e09984:	e480c004 	str	ip, [r0], #4
c7e09988:	e352001b 	cmp	r2, #27	; 0x1b
c7e0998c:	e585c004 	str	ip, [r5, #4]
c7e09990:	e2801004 	add	r1, r0, #4	; 0x4
c7e09994:	9a000007 	bls	c7e099b8 <calloc+0xb4>
c7e09998:	e2813004 	add	r3, r1, #4	; 0x4
c7e0999c:	e3520024 	cmp	r2, #36	; 0x24
c7e099a0:	e580c004 	str	ip, [r0, #4]
c7e099a4:	e581c004 	str	ip, [r1, #4]
c7e099a8:	e2831004 	add	r1, r3, #4	; 0x4
c7e099ac:	0583c004 	streq	ip, [r3, #4]
c7e099b0:	0581c004 	streq	ip, [r1, #4]
c7e099b4:	02811008 	addeq	r1, r1, #8	; 0x8
c7e099b8:	e3a02000 	mov	r2, #0	; 0x0
c7e099bc:	e1a03001 	mov	r3, r1
c7e099c0:	e4832004 	str	r2, [r3], #4
c7e099c4:	e5812004 	str	r2, [r1, #4]
c7e099c8:	e5832004 	str	r2, [r3, #4]
c7e099cc:	ea000001 	b	c7e099d8 <calloc+0xd4>
c7e099d0:	e3a01000 	mov	r1, #0	; 0x0
c7e099d4:	eb00646e 	bl	c7e22b94 <memset>
    return mem;
  }
}
c7e099d8:	e1a00005 	mov	r0, r5
c7e099dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e099e0:	c7e353d0 	.word	0xc7e353d0

c7e099e4 <realloc>:
#if __STD_C
Void_t* rEALLOc(Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(oldmem, bytes) Void_t* oldmem; size_t bytes;
#endif
{
c7e099e4:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}

#ifdef REALLOC_ZERO_BYTES_FREES
  if (bytes == 0) { fREe(oldmem); return 0; }
#endif

  if ((long)bytes < 0) return 0;
c7e099e8:	e3510000 	cmp	r1, #0	; 0x0
c7e099ec:	e58d1004 	str	r1, [sp, #4]
#if __STD_C
Void_t* rEALLOc(Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(oldmem, bytes) Void_t* oldmem; size_t bytes;
#endif
{
c7e099f0:	e1a05000 	mov	r5, r0

#ifdef REALLOC_ZERO_BYTES_FREES
  if (bytes == 0) { fREe(oldmem); return 0; }
#endif

  if ((long)bytes < 0) return 0;
c7e099f4:	b3a06000 	movlt	r6, #0	; 0x0
c7e099f8:	ba000118 	blt	c7e09e60 <realloc+0x47c>

  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(bytes);
c7e099fc:	e3500000 	cmp	r0, #0	; 0x0
c7e09a00:	1a000003 	bne	c7e09a14 <realloc+0x30>
c7e09a04:	e59d0004 	ldr	r0, [sp, #4]
    set_inuse_bit_at_offset(newp, newsize);
  }

  check_inuse_chunk(newp);
  return chunk2mem(newp);
}
c7e09a08:	e28dd008 	add	sp, sp, #8	; 0x8
c7e09a0c:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
#endif

  if ((long)bytes < 0) return 0;

  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(bytes);
c7e09a10:	eafffde1 	b	c7e0919c <malloc>

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);


  nb = request2size(bytes);
c7e09a14:	e59d2004 	ldr	r2, [sp, #4]

  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(bytes);

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);
c7e09a18:	e5101004 	ldr	r1, [r0, #-4]


  nb = request2size(bytes);
c7e09a1c:	e282300b 	add	r3, r2, #11	; 0xb
c7e09a20:	e3530016 	cmp	r3, #22	; 0x16

  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(bytes);

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);
c7e09a24:	e3c17003 	bic	r7, r1, #3	; 0x3


  nb = request2size(bytes);
c7e09a28:	d3a09010 	movle	r9, #16	; 0x10
c7e09a2c:	c3c39007 	bicgt	r9, r3, #7	; 0x7
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))
c7e09a30:	e1570009 	cmp	r7, r9
  if ((long)bytes < 0) return 0;

  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(bytes);

  newp    = oldp    = mem2chunk(oldmem);
c7e09a34:	e240a008 	sub	sl, r0, #8	; 0x8
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
    fREe(oldmem);
    return newmem;
c7e09a38:	a1a0400a 	movge	r4, sl
c7e09a3c:	a1a0b007 	movge	fp, r7
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))
c7e09a40:	aa0000ed 	bge	c7e09dfc <realloc+0x418>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next))
c7e09a44:	e59f3420 	ldr	r3, [pc, #1056]	; c7e09e6c <realloc+0x488>
  if ((long)(oldsize) < (long)(nb))
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
c7e09a48:	e08a0007 	add	r0, sl, r7
    if (next == top || !inuse(next))
c7e09a4c:	e5936010 	ldr	r6, [r3, #16]
c7e09a50:	e1500006 	cmp	r0, r6
c7e09a54:	0a000007 	beq	c7e09a78 <realloc+0x94>
c7e09a58:	e5903004 	ldr	r3, [r0, #4]
c7e09a5c:	e3c33001 	bic	r3, r3, #1	; 0x1
c7e09a60:	e0803003 	add	r3, r0, r3
c7e09a64:	e5933004 	ldr	r3, [r3, #4]
c7e09a68:	e3130001 	tst	r3, #1	; 0x1
      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
      {
	unlink(next, bck, fwd);
	newsize  += nextsize;
	goto split;
c7e09a6c:	13a00000 	movne	r0, #0	; 0x0
c7e09a70:	11a0c000 	movne	ip, r0
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next))
c7e09a74:	1a00001c 	bne	c7e09aec <realloc+0x108>
    {
      nextsize = chunksize(next);
c7e09a78:	e5903004 	ldr	r3, [r0, #4]

      /* Forward into top only if a remainder */
      if (next == top)
c7e09a7c:	e1500006 	cmp	r0, r6
    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next))
    {
      nextsize = chunksize(next);
c7e09a80:	e3c3c003 	bic	ip, r3, #3	; 0x3
c7e09a84:	e08c2007 	add	r2, ip, r7

      /* Forward into top only if a remainder */
      if (next == top)
c7e09a88:	1a00000e 	bne	c7e09ac8 <realloc+0xe4>
      {
	if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
c7e09a8c:	e2893010 	add	r3, r9, #16	; 0x10
c7e09a90:	e1520003 	cmp	r2, r3
c7e09a94:	ba000014 	blt	c7e09aec <realloc+0x108>
	{
	  newsize += nextsize;
	  top = chunk_at_offset(oldp, nb);
c7e09a98:	e59f33cc 	ldr	r3, [pc, #972]	; c7e09e6c <realloc+0x488>
	  set_head(top, (newsize - nb) | PREV_INUSE);
c7e09a9c:	e0692002 	rsb	r2, r9, r2
      if (next == top)
      {
	if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
	{
	  newsize += nextsize;
	  top = chunk_at_offset(oldp, nb);
c7e09aa0:	e08a1009 	add	r1, sl, r9
	  set_head(top, (newsize - nb) | PREV_INUSE);
c7e09aa4:	e3822001 	orr	r2, r2, #1	; 0x1
      if (next == top)
      {
	if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
	{
	  newsize += nextsize;
	  top = chunk_at_offset(oldp, nb);
c7e09aa8:	e5831010 	str	r1, [r3, #16]
	  set_head(top, (newsize - nb) | PREV_INUSE);
c7e09aac:	e5812004 	str	r2, [r1, #4]
	  set_head_size(oldp, nb);
c7e09ab0:	e5153004 	ldr	r3, [r5, #-4]
	  return chunk2mem(oldp);
c7e09ab4:	e28a6008 	add	r6, sl, #8	; 0x8
	if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
	{
	  newsize += nextsize;
	  top = chunk_at_offset(oldp, nb);
	  set_head(top, (newsize - nb) | PREV_INUSE);
	  set_head_size(oldp, nb);
c7e09ab8:	e2033001 	and	r3, r3, #1	; 0x1
c7e09abc:	e1893003 	orr	r3, r9, r3
c7e09ac0:	e5053004 	str	r3, [r5, #-4]
c7e09ac4:	ea0000e5 	b	c7e09e60 <realloc+0x47c>
	  return chunk2mem(oldp);
	}
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
c7e09ac8:	e1520009 	cmp	r2, r9
c7e09acc:	e1a0b002 	mov	fp, r2
c7e09ad0:	ba000005 	blt	c7e09aec <realloc+0x108>
      {
	unlink(next, bck, fwd);
c7e09ad4:	e5902008 	ldr	r2, [r0, #8]
c7e09ad8:	e590300c 	ldr	r3, [r0, #12]
c7e09adc:	e1a0400a 	mov	r4, sl
c7e09ae0:	e5832008 	str	r2, [r3, #8]
c7e09ae4:	e582300c 	str	r3, [r2, #12]
c7e09ae8:	ea0000c3 	b	c7e09dfc <realloc+0x418>
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
c7e09aec:	e3110001 	tst	r1, #1	; 0x1
c7e09af0:	1a000084 	bne	c7e09d08 <realloc+0x324>
    {
      prev = prev_chunk(oldp);
c7e09af4:	e5153008 	ldr	r3, [r5, #-8]
      prevsize = chunksize(prev);

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
c7e09af8:	e3500000 	cmp	r0, #0	; 0x0

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
    {
      prev = prev_chunk(oldp);
c7e09afc:	e063400a 	rsb	r4, r3, sl
      prevsize = chunksize(prev);
c7e09b00:	e5943004 	ldr	r3, [r4, #4]
c7e09b04:	e3c31003 	bic	r1, r3, #3	; 0x3

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
c7e09b08:	0a00004b 	beq	c7e09c3c <realloc+0x258>
      {
	/* into top */
	if (next == top)
c7e09b0c:	e1500006 	cmp	r0, r6
c7e09b10:	e0812007 	add	r2, r1, r7
c7e09b14:	1a00003f 	bne	c7e09c18 <realloc+0x234>
	{
	  if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
c7e09b18:	e082b00c 	add	fp, r2, ip
c7e09b1c:	e2893010 	add	r3, r9, #16	; 0x10
c7e09b20:	e15b0003 	cmp	fp, r3
c7e09b24:	ba000044 	blt	c7e09c3c <realloc+0x258>
	  {
	    unlink(prev, bck, fwd);
c7e09b28:	e1a06004 	mov	r6, r4
c7e09b2c:	e594200c 	ldr	r2, [r4, #12]
c7e09b30:	e5b63008 	ldr	r3, [r6, #8]!
	    newp = prev;
	    newsize += prevsize + nextsize;
	    newmem = chunk2mem(newp);
	    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
c7e09b34:	e2477004 	sub	r7, r7, #4	; 0x4
c7e09b38:	e3570024 	cmp	r7, #36	; 0x24
	/* into top */
	if (next == top)
	{
	  if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
	  {
	    unlink(prev, bck, fwd);
c7e09b3c:	e5823008 	str	r3, [r2, #8]
c7e09b40:	e583200c 	str	r2, [r3, #12]
	    newp = prev;
	    newsize += prevsize + nextsize;
	    newmem = chunk2mem(newp);
	    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
c7e09b44:	8a000024 	bhi	c7e09bdc <realloc+0x1f8>
c7e09b48:	e3570013 	cmp	r7, #19	; 0x13
c7e09b4c:	e1a00005 	mov	r0, r5
c7e09b50:	e1a0c006 	mov	ip, r6
c7e09b54:	9a000017 	bls	c7e09bb8 <realloc+0x1d4>
c7e09b58:	e5953000 	ldr	r3, [r5]
c7e09b5c:	e2852004 	add	r2, r5, #4	; 0x4
c7e09b60:	e5843008 	str	r3, [r4, #8]
c7e09b64:	e5953004 	ldr	r3, [r5, #4]
c7e09b68:	e357001b 	cmp	r7, #27	; 0x1b
c7e09b6c:	e584300c 	str	r3, [r4, #12]
c7e09b70:	e284c010 	add	ip, r4, #16	; 0x10
c7e09b74:	e2820004 	add	r0, r2, #4	; 0x4
c7e09b78:	9a00000e 	bls	c7e09bb8 <realloc+0x1d4>
c7e09b7c:	e5923004 	ldr	r3, [r2, #4]
c7e09b80:	e3570024 	cmp	r7, #36	; 0x24
c7e09b84:	e5843010 	str	r3, [r4, #16]
c7e09b88:	e5903004 	ldr	r3, [r0, #4]
c7e09b8c:	e2802004 	add	r2, r0, #4	; 0x4
c7e09b90:	e5843014 	str	r3, [r4, #20]
c7e09b94:	e284c018 	add	ip, r4, #24	; 0x18
c7e09b98:	e2820004 	add	r0, r2, #4	; 0x4
c7e09b9c:	1a000005 	bne	c7e09bb8 <realloc+0x1d4>
c7e09ba0:	e5923004 	ldr	r3, [r2, #4]
c7e09ba4:	e284c020 	add	ip, r4, #32	; 0x20
c7e09ba8:	e5843018 	str	r3, [r4, #24]
c7e09bac:	e5903004 	ldr	r3, [r0, #4]
c7e09bb0:	e2800008 	add	r0, r0, #8	; 0x8
c7e09bb4:	e584301c 	str	r3, [r4, #28]
c7e09bb8:	e1a01000 	mov	r1, r0
c7e09bbc:	e4913004 	ldr	r3, [r1], #4
c7e09bc0:	e1a0200c 	mov	r2, ip
c7e09bc4:	e4823004 	str	r3, [r2], #4
c7e09bc8:	e5903004 	ldr	r3, [r0, #4]
c7e09bcc:	e58c3004 	str	r3, [ip, #4]
c7e09bd0:	e5913004 	ldr	r3, [r1, #4]
c7e09bd4:	e5823004 	str	r3, [r2, #4]
c7e09bd8:	ea000003 	b	c7e09bec <realloc+0x208>
c7e09bdc:	e1a01005 	mov	r1, r5
c7e09be0:	e1a02007 	mov	r2, r7
c7e09be4:	e1a00006 	mov	r0, r6
c7e09be8:	eb006413 	bl	c7e22c3c <memcpy>
	    top = chunk_at_offset(newp, nb);
c7e09bec:	e59f3278 	ldr	r3, [pc, #632]	; c7e09e6c <realloc+0x488>
	    set_head(top, (newsize - nb) | PREV_INUSE);
c7e09bf0:	e069200b 	rsb	r2, r9, fp
	    unlink(prev, bck, fwd);
	    newp = prev;
	    newsize += prevsize + nextsize;
	    newmem = chunk2mem(newp);
	    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
	    top = chunk_at_offset(newp, nb);
c7e09bf4:	e0841009 	add	r1, r4, r9
	    set_head(top, (newsize - nb) | PREV_INUSE);
c7e09bf8:	e3822001 	orr	r2, r2, #1	; 0x1
	    unlink(prev, bck, fwd);
	    newp = prev;
	    newsize += prevsize + nextsize;
	    newmem = chunk2mem(newp);
	    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
	    top = chunk_at_offset(newp, nb);
c7e09bfc:	e5831010 	str	r1, [r3, #16]
	    set_head(top, (newsize - nb) | PREV_INUSE);
c7e09c00:	e5812004 	str	r2, [r1, #4]
	    set_head_size(newp, nb);
c7e09c04:	e5943004 	ldr	r3, [r4, #4]
c7e09c08:	e2033001 	and	r3, r3, #1	; 0x1
c7e09c0c:	e1893003 	orr	r3, r9, r3
c7e09c10:	e5843004 	str	r3, [r4, #4]
c7e09c14:	ea000091 	b	c7e09e60 <realloc+0x47c>
	    return newmem;
	  }
	}

	/* into next chunk */
	else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
c7e09c18:	e082b00c 	add	fp, r2, ip
c7e09c1c:	e15b0009 	cmp	fp, r9
c7e09c20:	ba000005 	blt	c7e09c3c <realloc+0x258>
	{
	  unlink(next, bck, fwd);
c7e09c24:	e5902008 	ldr	r2, [r0, #8]
c7e09c28:	e590300c 	ldr	r3, [r0, #12]
	  unlink(prev, bck, fwd);
c7e09c2c:	e1a00004 	mov	r0, r4
	}

	/* into next chunk */
	else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
	{
	  unlink(next, bck, fwd);
c7e09c30:	e5832008 	str	r2, [r3, #8]
c7e09c34:	e582300c 	str	r3, [r2, #12]
c7e09c38:	ea000003 	b	c7e09c4c <realloc+0x268>
	  goto split;
	}
      }

      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)
c7e09c3c:	e081b007 	add	fp, r1, r7
c7e09c40:	e15b0009 	cmp	fp, r9
c7e09c44:	ba00002f 	blt	c7e09d08 <realloc+0x324>
      {
	unlink(prev, bck, fwd);
c7e09c48:	e1a00004 	mov	r0, r4
c7e09c4c:	e594200c 	ldr	r2, [r4, #12]
c7e09c50:	e5b03008 	ldr	r3, [r0, #8]!
	newp = prev;
	newsize += prevsize;
	newmem = chunk2mem(newp);
	MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
c7e09c54:	e2476004 	sub	r6, r7, #4	; 0x4
c7e09c58:	e3560024 	cmp	r6, #36	; 0x24
      }

      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)
      {
	unlink(prev, bck, fwd);
c7e09c5c:	e5823008 	str	r3, [r2, #8]
c7e09c60:	e583200c 	str	r2, [r3, #12]
	newp = prev;
	newsize += prevsize;
	newmem = chunk2mem(newp);
	MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
c7e09c64:	8a000023 	bhi	c7e09cf8 <realloc+0x314>
c7e09c68:	e3560013 	cmp	r6, #19	; 0x13
c7e09c6c:	e1a0c005 	mov	ip, r5
c7e09c70:	9a000017 	bls	c7e09cd4 <realloc+0x2f0>
c7e09c74:	e5953000 	ldr	r3, [r5]
c7e09c78:	e2852004 	add	r2, r5, #4	; 0x4
c7e09c7c:	e5843008 	str	r3, [r4, #8]
c7e09c80:	e5953004 	ldr	r3, [r5, #4]
c7e09c84:	e356001b 	cmp	r6, #27	; 0x1b
c7e09c88:	e584300c 	str	r3, [r4, #12]
c7e09c8c:	e2840010 	add	r0, r4, #16	; 0x10
c7e09c90:	e282c004 	add	ip, r2, #4	; 0x4
c7e09c94:	9a00000e 	bls	c7e09cd4 <realloc+0x2f0>
c7e09c98:	e5923004 	ldr	r3, [r2, #4]
c7e09c9c:	e3560024 	cmp	r6, #36	; 0x24
c7e09ca0:	e5843010 	str	r3, [r4, #16]
c7e09ca4:	e59c3004 	ldr	r3, [ip, #4]
c7e09ca8:	e28c2004 	add	r2, ip, #4	; 0x4
c7e09cac:	e5843014 	str	r3, [r4, #20]
c7e09cb0:	e2840018 	add	r0, r4, #24	; 0x18
c7e09cb4:	e282c004 	add	ip, r2, #4	; 0x4
c7e09cb8:	1a000005 	bne	c7e09cd4 <realloc+0x2f0>
c7e09cbc:	e5923004 	ldr	r3, [r2, #4]
c7e09cc0:	e2840020 	add	r0, r4, #32	; 0x20
c7e09cc4:	e5843018 	str	r3, [r4, #24]
c7e09cc8:	e59c3004 	ldr	r3, [ip, #4]
c7e09ccc:	e28cc008 	add	ip, ip, #8	; 0x8
c7e09cd0:	e584301c 	str	r3, [r4, #28]
c7e09cd4:	e1a0300c 	mov	r3, ip
c7e09cd8:	e4931004 	ldr	r1, [r3], #4
c7e09cdc:	e1a02000 	mov	r2, r0
c7e09ce0:	e4821004 	str	r1, [r2], #4
c7e09ce4:	e59c1004 	ldr	r1, [ip, #4]
c7e09ce8:	e5801004 	str	r1, [r0, #4]
c7e09cec:	e5933004 	ldr	r3, [r3, #4]
c7e09cf0:	e5823004 	str	r3, [r2, #4]
c7e09cf4:	ea000040 	b	c7e09dfc <realloc+0x418>
c7e09cf8:	e1a01005 	mov	r1, r5
c7e09cfc:	e1a02006 	mov	r2, r6
c7e09d00:	eb0063cd 	bl	c7e22c3c <memcpy>
c7e09d04:	ea00003c 	b	c7e09dfc <realloc+0x418>
      }
    }

    /* Must allocate */

    newmem = mALLOc (bytes);
c7e09d08:	e59d0004 	ldr	r0, [sp, #4]
c7e09d0c:	ebfffd22 	bl	c7e0919c <malloc>

    if (newmem == 0)  /* propagate failure */
c7e09d10:	e2506000 	subs	r6, r0, #0	; 0x0
c7e09d14:	0a000051 	beq	c7e09e60 <realloc+0x47c>
      return 0;

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp))
c7e09d18:	e5153004 	ldr	r3, [r5, #-4]
c7e09d1c:	e2462008 	sub	r2, r6, #8	; 0x8
c7e09d20:	e3c33001 	bic	r3, r3, #1	; 0x1
c7e09d24:	e08a3003 	add	r3, sl, r3
c7e09d28:	e1520003 	cmp	r2, r3
    {
      newsize += chunksize(newp);
c7e09d2c:	05163004 	ldreq	r3, [r6, #-4]
c7e09d30:	01a0400a 	moveq	r4, sl
c7e09d34:	03c33003 	biceq	r3, r3, #3	; 0x3
c7e09d38:	0083b007 	addeq	fp, r3, r7
c7e09d3c:	0a00002e 	beq	c7e09dfc <realloc+0x418>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
c7e09d40:	e2472004 	sub	r2, r7, #4	; 0x4
c7e09d44:	e3520024 	cmp	r2, #36	; 0x24
c7e09d48:	8a000026 	bhi	c7e09de8 <realloc+0x404>
c7e09d4c:	e3520013 	cmp	r2, #19	; 0x13
c7e09d50:	e1a00005 	mov	r0, r5
c7e09d54:	e1a0c006 	mov	ip, r6
c7e09d58:	9a000019 	bls	c7e09dc4 <realloc+0x3e0>
c7e09d5c:	e1a01005 	mov	r1, r5
c7e09d60:	e4913004 	ldr	r3, [r1], #4
c7e09d64:	e1a0e006 	mov	lr, r6
c7e09d68:	e48e3004 	str	r3, [lr], #4
c7e09d6c:	e5953004 	ldr	r3, [r5, #4]
c7e09d70:	e352001b 	cmp	r2, #27	; 0x1b
c7e09d74:	e5863004 	str	r3, [r6, #4]
c7e09d78:	e28ec004 	add	ip, lr, #4	; 0x4
c7e09d7c:	e2810004 	add	r0, r1, #4	; 0x4
c7e09d80:	9a00000f 	bls	c7e09dc4 <realloc+0x3e0>
c7e09d84:	e5913004 	ldr	r3, [r1, #4]
c7e09d88:	e3520024 	cmp	r2, #36	; 0x24
c7e09d8c:	e58e3004 	str	r3, [lr, #4]
c7e09d90:	e5903004 	ldr	r3, [r0, #4]
c7e09d94:	e28c1004 	add	r1, ip, #4	; 0x4
c7e09d98:	e2802004 	add	r2, r0, #4	; 0x4
c7e09d9c:	e58c3004 	str	r3, [ip, #4]
c7e09da0:	e2820004 	add	r0, r2, #4	; 0x4
c7e09da4:	e281c004 	add	ip, r1, #4	; 0x4
c7e09da8:	1a000005 	bne	c7e09dc4 <realloc+0x3e0>
c7e09dac:	e5923004 	ldr	r3, [r2, #4]
c7e09db0:	e5813004 	str	r3, [r1, #4]
c7e09db4:	e5903004 	ldr	r3, [r0, #4]
c7e09db8:	e2800008 	add	r0, r0, #8	; 0x8
c7e09dbc:	e58c3004 	str	r3, [ip, #4]
c7e09dc0:	e28cc008 	add	ip, ip, #8	; 0x8
c7e09dc4:	e1a01000 	mov	r1, r0
c7e09dc8:	e4913004 	ldr	r3, [r1], #4
c7e09dcc:	e1a0200c 	mov	r2, ip
c7e09dd0:	e4823004 	str	r3, [r2], #4
c7e09dd4:	e5903004 	ldr	r3, [r0, #4]
c7e09dd8:	e58c3004 	str	r3, [ip, #4]
c7e09ddc:	e5913004 	ldr	r3, [r1, #4]
c7e09de0:	e5823004 	str	r3, [r2, #4]
c7e09de4:	ea000001 	b	c7e09df0 <realloc+0x40c>
c7e09de8:	e1a01005 	mov	r1, r5
c7e09dec:	eb006392 	bl	c7e22c3c <memcpy>
    fREe(oldmem);
c7e09df0:	e1a00005 	mov	r0, r5
c7e09df4:	ebfffc59 	bl	c7e08f60 <free>
c7e09df8:	ea000018 	b	c7e09e60 <realloc+0x47c>
  }


 split:  /* split off extra room in old or expanded chunk */

  if (newsize - nb >= MINSIZE) /* split off remainder */
c7e09dfc:	e069100b 	rsb	r1, r9, fp
c7e09e00:	e351000f 	cmp	r1, #15	; 0xf
c7e09e04:	e5943004 	ldr	r3, [r4, #4]
c7e09e08:	9a00000c 	bls	c7e09e40 <realloc+0x45c>
  {
    remainder = chunk_at_offset(newp, nb);
    remainder_size = newsize - nb;
    set_head_size(newp, nb);
c7e09e0c:	e2033001 	and	r3, r3, #1	; 0x1

 split:  /* split off extra room in old or expanded chunk */

  if (newsize - nb >= MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
c7e09e10:	e0840009 	add	r0, r4, r9
    remainder_size = newsize - nb;
    set_head_size(newp, nb);
c7e09e14:	e1893003 	orr	r3, r9, r3
    set_head(remainder, remainder_size | PREV_INUSE);
c7e09e18:	e3812001 	orr	r2, r1, #1	; 0x1

  if (newsize - nb >= MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
    remainder_size = newsize - nb;
    set_head_size(newp, nb);
c7e09e1c:	e5843004 	str	r3, [r4, #4]
    set_head(remainder, remainder_size | PREV_INUSE);
c7e09e20:	e5802004 	str	r2, [r0, #4]
    set_inuse_bit_at_offset(remainder, remainder_size);
c7e09e24:	e0802001 	add	r2, r0, r1
c7e09e28:	e5923004 	ldr	r3, [r2, #4]
    fREe(chunk2mem(remainder)); /* let free() deal with it */
c7e09e2c:	e2800008 	add	r0, r0, #8	; 0x8
  {
    remainder = chunk_at_offset(newp, nb);
    remainder_size = newsize - nb;
    set_head_size(newp, nb);
    set_head(remainder, remainder_size | PREV_INUSE);
    set_inuse_bit_at_offset(remainder, remainder_size);
c7e09e30:	e3833001 	orr	r3, r3, #1	; 0x1
c7e09e34:	e5823004 	str	r3, [r2, #4]
    fREe(chunk2mem(remainder)); /* let free() deal with it */
c7e09e38:	ebfffc48 	bl	c7e08f60 <free>
c7e09e3c:	ea000006 	b	c7e09e5c <realloc+0x478>
  }
  else
  {
    set_head_size(newp, newsize);
c7e09e40:	e2033001 	and	r3, r3, #1	; 0x1
c7e09e44:	e18b3003 	orr	r3, fp, r3
c7e09e48:	e5843004 	str	r3, [r4, #4]
    set_inuse_bit_at_offset(newp, newsize);
c7e09e4c:	e084200b 	add	r2, r4, fp
c7e09e50:	e5923004 	ldr	r3, [r2, #4]
c7e09e54:	e3833001 	orr	r3, r3, #1	; 0x1
c7e09e58:	e5823004 	str	r3, [r2, #4]
  }

  check_inuse_chunk(newp);
  return chunk2mem(newp);
c7e09e5c:	e2846008 	add	r6, r4, #8	; 0x8
}
c7e09e60:	e1a00006 	mov	r0, r6
c7e09e64:	e28dd008 	add	sp, sp, #8	; 0x8
c7e09e68:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e09e6c:	c7e353d0 	.word	0xc7e353d0

c7e09e70 <env_get_char_spec>:
	.apply = env_check_apply,
};

static uchar __env_get_char_spec(int index)
{
	return *((uchar *)(gd->env_addr + index));
c7e09e70:	e5983010 	ldr	r3, [r8, #16]
}
c7e09e74:	e7d00003 	ldrb	r0, [r0, r3]
c7e09e78:	e12fff1e 	bx	lr

c7e09e7c <env_get_addr>:
		return env_get_char_init(index);
}

const uchar *env_get_addr(int index)
{
	if (gd->env_valid)
c7e09e7c:	e5983014 	ldr	r3, [r8, #20]
c7e09e80:	e3530000 	cmp	r3, #0	; 0x0
		return (uchar *)(gd->env_addr + index);
c7e09e84:	15983010 	ldrne	r3, [r8, #16]
	else
		return &default_environment[index];
c7e09e88:	059f3008 	ldreq	r3, [pc, #8]	; c7e09e98 <env_get_addr+0x1c>
}

const uchar *env_get_addr(int index)
{
	if (gd->env_valid)
		return (uchar *)(gd->env_addr + index);
c7e09e8c:	10800003 	addne	r0, r0, r3
	else
		return &default_environment[index];
c7e09e90:	00830000 	addeq	r0, r3, r0
}
c7e09e94:	e12fff1e 	bx	lr
c7e09e98:	c7e2b225 	.word	0xc7e2b225

c7e09e9c <env_get_char_memory>:
	else
		return default_environment[index];
}

uchar env_get_char_memory(int index)
{
c7e09e9c:	e92d4010 	push	{r4, lr}
	return *env_get_addr(index);
c7e09ea0:	ebfffff5 	bl	c7e09e7c <env_get_addr>
}
c7e09ea4:	e5d00000 	ldrb	r0, [r0]
c7e09ea8:	e8bd8010 	pop	{r4, pc}

c7e09eac <env_get_char>:

uchar env_get_char(int index)
{
	/* if relocated to RAM */
	if (gd->flags & GD_FLG_RELOC)
c7e09eac:	e5983004 	ldr	r3, [r8, #4]
c7e09eb0:	e3130001 	tst	r3, #1	; 0x1
c7e09eb4:	0a000000 	beq	c7e09ebc <env_get_char+0x10>
		return env_get_char_memory(index);
c7e09eb8:	eafffff7 	b	c7e09e9c <env_get_char_memory>
	__attribute__((weak, alias("__env_get_char_spec")));

static uchar env_get_char_init(int index)
{
	/* if crc was bad, use the default environment */
	if (gd->env_valid)
c7e09ebc:	e5983014 	ldr	r3, [r8, #20]
c7e09ec0:	e3530000 	cmp	r3, #0	; 0x0
c7e09ec4:	0a000000 	beq	c7e09ecc <env_get_char+0x20>
		return env_get_char_spec(index);
c7e09ec8:	eaffffe8 	b	c7e09e70 <env_get_char_spec>
	else
		return default_environment[index];
c7e09ecc:	e59f3004 	ldr	r3, [pc, #4]	; c7e09ed8 <env_get_char+0x2c>
	/* if relocated to RAM */
	if (gd->flags & GD_FLG_RELOC)
		return env_get_char_memory(index);
	else
		return env_get_char_init(index);
}
c7e09ed0:	e7d30000 	ldrb	r0, [r3, r0]
c7e09ed4:	e12fff1e 	bx	lr
c7e09ed8:	c7e2b225 	.word	0xc7e2b225

c7e09edc <set_default_vars>:
}


/* [re]set individual variables to their value in the default environment */
int set_default_vars(int nvars, char * const vars[])
{
c7e09edc:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
	/*
	 * Special use-case: import from default environment
	 * (and use \0 as a separator)
	 */
	return himport_r(&env_htab, (const char *)default_environment,
c7e09ee0:	e3a0c001 	mov	ip, #1	; 0x1
c7e09ee4:	e98d0003 	stmib	sp, {r0, r1}
c7e09ee8:	e3a020ee 	mov	r2, #238	; 0xee
c7e09eec:	e59f1018 	ldr	r1, [pc, #24]	; c7e09f0c <set_default_vars+0x30>
c7e09ef0:	e3a03000 	mov	r3, #0	; 0x0
c7e09ef4:	e59f0014 	ldr	r0, [pc, #20]	; c7e09f10 <set_default_vars+0x34>
c7e09ef8:	e58dc00c 	str	ip, [sp, #12]
c7e09efc:	e58dc000 	str	ip, [sp]
c7e09f00:	eb005f0d 	bl	c7e21b3c <himport_r>
				sizeof(default_environment), '\0', H_NOCLEAR,
				nvars, vars, 1 /* do_apply */);
}
c7e09f04:	e28dd014 	add	sp, sp, #20	; 0x14
c7e09f08:	e8bd8000 	pop	{pc}
c7e09f0c:	c7e2b225 	.word	0xc7e2b225
c7e09f10:	c7e357e4 	.word	0xc7e357e4

c7e09f14 <set_default_env>:
	else
		return &default_environment[index];
}

void set_default_env(const char *s)
{
c7e09f14:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
	if (sizeof(default_environment) > ENV_SIZE) {
		puts("*** Error - default environment is too large\n\n");
		return;
	}

	if (s) {
c7e09f18:	e2504000 	subs	r4, r0, #0	; 0x0
c7e09f1c:	0a00000a 	beq	c7e09f4c <set_default_env+0x38>
		if (*s == '!') {
c7e09f20:	e5d43000 	ldrb	r3, [r4]
c7e09f24:	e3530021 	cmp	r3, #33	; 0x21
c7e09f28:	1a000004 	bne	c7e09f40 <set_default_env+0x2c>
			printf("*** Warning - %s, "
c7e09f2c:	e2841001 	add	r1, r4, #1	; 0x1
c7e09f30:	e59f0080 	ldr	r0, [pc, #128]	; c7e09fb8 <set_default_env+0xa4>
c7e09f34:	ebfffac7 	bl	c7e08a58 <printf>
c7e09f38:	e3a0e000 	mov	lr, #0	; 0x0
c7e09f3c:	ea000005 	b	c7e09f58 <set_default_env+0x44>
			 * mechanism.  Therefore we check every single
			 * variable and apply changes to the system
			 * right away (e.g. baudrate, console).
			 */
			do_apply = 1;
			puts(s);
c7e09f40:	ebfffaa9 	bl	c7e089ec <puts>
c7e09f44:	e3a0e001 	mov	lr, #1	; 0x1
c7e09f48:	ea000002 	b	c7e09f58 <set_default_env+0x44>
		}
	} else {
		puts("Using default environment\n\n");
c7e09f4c:	e59f0068 	ldr	r0, [pc, #104]	; c7e09fbc <set_default_env+0xa8>
c7e09f50:	ebfffaa5 	bl	c7e089ec <puts>
c7e09f54:	e1a0e004 	mov	lr, r4
	}

	if (himport_r(&env_htab, (char *)default_environment,
c7e09f58:	e3a0c000 	mov	ip, #0	; 0x0
c7e09f5c:	e1a0300c 	mov	r3, ip
c7e09f60:	e59f0058 	ldr	r0, [pc, #88]	; c7e09fc0 <set_default_env+0xac>
c7e09f64:	e59f1058 	ldr	r1, [pc, #88]	; c7e09fc4 <set_default_env+0xb0>
c7e09f68:	e3a020ee 	mov	r2, #238	; 0xee
c7e09f6c:	e58de00c 	str	lr, [sp, #12]
c7e09f70:	e58dc000 	str	ip, [sp]
c7e09f74:	e58dc004 	str	ip, [sp, #4]
c7e09f78:	e58dc008 	str	ip, [sp, #8]
c7e09f7c:	eb005eee 	bl	c7e21b3c <himport_r>
c7e09f80:	e3500000 	cmp	r0, #0	; 0x0
c7e09f84:	1a000007 	bne	c7e09fa8 <set_default_env+0x94>
			sizeof(default_environment), '\0', 0,
			0, NULL, do_apply) == 0)
		error("Environment import failed: errno = %d\n", errno);
c7e09f88:	e59f3038 	ldr	r3, [pc, #56]	; c7e09fc8 <set_default_env+0xb4>
c7e09f8c:	e59fc038 	ldr	ip, [pc, #56]	; c7e09fcc <set_default_env+0xb8>
c7e09f90:	e5931000 	ldr	r1, [r3]
c7e09f94:	e59f0034 	ldr	r0, [pc, #52]	; c7e09fd0 <set_default_env+0xbc>
c7e09f98:	e59f2034 	ldr	r2, [pc, #52]	; c7e09fd4 <set_default_env+0xc0>
c7e09f9c:	e3a030d8 	mov	r3, #216	; 0xd8
c7e09fa0:	e58dc000 	str	ip, [sp]
c7e09fa4:	ebfffaab 	bl	c7e08a58 <printf>

	gd->flags |= GD_FLG_ENV_READY;
c7e09fa8:	e5983004 	ldr	r3, [r8, #4]
c7e09fac:	e3833080 	orr	r3, r3, #128	; 0x80
c7e09fb0:	e5883004 	str	r3, [r8, #4]
}
c7e09fb4:	e8bd801f 	pop	{r0, r1, r2, r3, r4, pc}
c7e09fb8:	c7e31dd5 	.word	0xc7e31dd5
c7e09fbc:	c7e31e03 	.word	0xc7e31e03
c7e09fc0:	c7e357e4 	.word	0xc7e357e4
c7e09fc4:	c7e2b225 	.word	0xc7e2b225
c7e09fc8:	c7e72300 	.word	0xc7e72300
c7e09fcc:	c7e2b313 	.word	0xc7e2b313
c7e09fd0:	c7e31186 	.word	0xc7e31186
c7e09fd4:	c7e31e1f 	.word	0xc7e31e1f

c7e09fd8 <env_relocate>:
void env_relocate(void)
{
#if defined(CONFIG_NEEDS_MANUAL_RELOC)
	env_reloc();
#endif
	if (gd->env_valid == 0) {
c7e09fd8:	e5983014 	ldr	r3, [r8, #20]
	return 0;
}
#endif

void env_relocate(void)
{
c7e09fdc:	e92d4010 	push	{r4, lr}
#if defined(CONFIG_NEEDS_MANUAL_RELOC)
	env_reloc();
#endif
	if (gd->env_valid == 0) {
c7e09fe0:	e3530000 	cmp	r3, #0	; 0x0
c7e09fe4:	1a000004 	bne	c7e09ffc <env_relocate+0x24>

static inline ulong bootstage_error(enum bootstage_id id)
{
	show_boot_progress(-id);
c7e09fe8:	e3e0003b 	mvn	r0, #59	; 0x3b
c7e09fec:	eb000e22 	bl	c7e0d87c <__show_boot_progress>
#if defined(CONFIG_ENV_IS_NOWHERE) || defined(CONFIG_SPL_BUILD)
		/* Environment not changable */
		set_default_env(NULL);
#else
		bootstage_error(BOOTSTAGE_ID_NET_CHECKSUM);
		set_default_env("!bad CRC");
c7e09ff0:	e59f000c 	ldr	r0, [pc, #12]	; c7e0a004 <env_relocate+0x2c>
#endif
	} else {
		env_relocate_spec();
	}
}
c7e09ff4:	e8bd4010 	pop	{r4, lr}
#if defined(CONFIG_ENV_IS_NOWHERE) || defined(CONFIG_SPL_BUILD)
		/* Environment not changable */
		set_default_env(NULL);
#else
		bootstage_error(BOOTSTAGE_ID_NET_CHECKSUM);
		set_default_env("!bad CRC");
c7e09ff8:	eaffffc5 	b	c7e09f14 <set_default_env>
#endif
	} else {
		env_relocate_spec();
	}
}
c7e09ffc:	e8bd4010 	pop	{r4, lr}
#else
		bootstage_error(BOOTSTAGE_ID_NET_CHECKSUM);
		set_default_env("!bad CRC");
#endif
	} else {
		env_relocate_spec();
c7e0a000:	ea000093 	b	c7e0a254 <env_relocate_spec>
c7e0a004:	c7e31e2c 	.word	0xc7e31e2c

c7e0a008 <env_import>:
/*
 * Check if CRC is valid and (if yes) import the environment.
 * Note that "buf" may or may not be aligned.
 */
int env_import(const char *buf, int check)
{
c7e0a008:	e92d4010 	push	{r4, lr}
	env_t *ep = (env_t *)buf;

	if (check) {
c7e0a00c:	e3510000 	cmp	r1, #0	; 0x0
/*
 * Check if CRC is valid and (if yes) import the environment.
 * Note that "buf" may or may not be aligned.
 */
int env_import(const char *buf, int check)
{
c7e0a010:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e0a014:	e1a04000 	mov	r4, r0
	env_t *ep = (env_t *)buf;

	if (check) {
c7e0a018:	0a00000e 	beq	c7e0a058 <env_import+0x50>
		uint32_t crc;

		memcpy(&crc, &ep->crc, sizeof(crc));
c7e0a01c:	e1a01000 	mov	r1, r0
c7e0a020:	e3a02004 	mov	r2, #4	; 0x4
c7e0a024:	e28d0014 	add	r0, sp, #20	; 0x14
c7e0a028:	eb006303 	bl	c7e22c3c <memcpy>

		if (crc32(0, ep->data, ENV_SIZE) != crc) {
c7e0a02c:	e3a00000 	mov	r0, #0	; 0x0
c7e0a030:	e2841004 	add	r1, r4, #4	; 0x4
c7e0a034:	e59f2090 	ldr	r2, [pc, #144]	; c7e0a0cc <env_import+0xc4>
c7e0a038:	eb005b31 	bl	c7e20d04 <crc32>
c7e0a03c:	e59d3014 	ldr	r3, [sp, #20]
c7e0a040:	e1500003 	cmp	r0, r3
c7e0a044:	0a000003 	beq	c7e0a058 <env_import+0x50>
			set_default_env("!bad CRC");
c7e0a048:	e59f0080 	ldr	r0, [pc, #128]	; c7e0a0d0 <env_import+0xc8>
c7e0a04c:	ebffffb0 	bl	c7e09f14 <set_default_env>
c7e0a050:	e3a00000 	mov	r0, #0	; 0x0
c7e0a054:	ea00001a 	b	c7e0a0c4 <env_import+0xbc>
			return 0;
		}
	}

	if (himport_r(&env_htab, (char *)ep->data, ENV_SIZE, '\0', 0,
c7e0a058:	e3a0c000 	mov	ip, #0	; 0x0
c7e0a05c:	e2841004 	add	r1, r4, #4	; 0x4
c7e0a060:	e1a0300c 	mov	r3, ip
c7e0a064:	e59f0068 	ldr	r0, [pc, #104]	; c7e0a0d4 <env_import+0xcc>
c7e0a068:	e59f205c 	ldr	r2, [pc, #92]	; c7e0a0cc <env_import+0xc4>
c7e0a06c:	e58dc000 	str	ip, [sp]
c7e0a070:	e58dc004 	str	ip, [sp, #4]
c7e0a074:	e58dc008 	str	ip, [sp, #8]
c7e0a078:	e58dc00c 	str	ip, [sp, #12]
c7e0a07c:	eb005eae 	bl	c7e21b3c <himport_r>
c7e0a080:	e2504000 	subs	r4, r0, #0	; 0x0
			0, NULL, 0 /* do_apply */)) {
		gd->flags |= GD_FLG_ENV_READY;
c7e0a084:	15983004 	ldrne	r3, [r8, #4]
c7e0a088:	13a00001 	movne	r0, #1	; 0x1
c7e0a08c:	13833080 	orrne	r3, r3, #128	; 0x80
c7e0a090:	15883004 	strne	r3, [r8, #4]
c7e0a094:	1a00000a 	bne	c7e0a0c4 <env_import+0xbc>
		return 1;
	}

	error("Cannot import environment: errno = %d\n", errno);
c7e0a098:	e59f3038 	ldr	r3, [pc, #56]	; c7e0a0d8 <env_import+0xd0>
c7e0a09c:	e59fc038 	ldr	ip, [pc, #56]	; c7e0a0dc <env_import+0xd4>
c7e0a0a0:	e5931000 	ldr	r1, [r3]
c7e0a0a4:	e59f2034 	ldr	r2, [pc, #52]	; c7e0a0e0 <env_import+0xd8>
c7e0a0a8:	e3a03f41 	mov	r3, #260	; 0x104
c7e0a0ac:	e59f0030 	ldr	r0, [pc, #48]	; c7e0a0e4 <env_import+0xdc>
c7e0a0b0:	e58dc000 	str	ip, [sp]
c7e0a0b4:	ebfffa67 	bl	c7e08a58 <printf>

	set_default_env("!import failed");
c7e0a0b8:	e59f0028 	ldr	r0, [pc, #40]	; c7e0a0e8 <env_import+0xe0>
c7e0a0bc:	ebffff94 	bl	c7e09f14 <set_default_env>
c7e0a0c0:	e1a00004 	mov	r0, r4

	return 0;
}
c7e0a0c4:	e28dd018 	add	sp, sp, #24	; 0x18
c7e0a0c8:	e8bd8010 	pop	{r4, pc}
c7e0a0cc:	00003ffc 	.word	0x00003ffc
c7e0a0d0:	c7e31e2c 	.word	0xc7e31e2c
c7e0a0d4:	c7e357e4 	.word	0xc7e357e4
c7e0a0d8:	c7e72300 	.word	0xc7e72300
c7e0a0dc:	c7e2b323 	.word	0xc7e2b323
c7e0a0e0:	c7e31e1f 	.word	0xc7e31e1f
c7e0a0e4:	c7e31e35 	.word	0xc7e31e35
c7e0a0e8:	c7e31e72 	.word	0xc7e31e72

c7e0a0ec <nand_block_isbad>:
{
	return info->write(info, ofs, *len, (size_t *)len, buf);
}

static inline int nand_block_isbad(nand_info_t *info, loff_t ofs)
{
c7e0a0ec:	e92d4010 	push	{r4, lr}
	return info->block_isbad(info, ofs);
c7e0a0f0:	e1a0e00f 	mov	lr, pc
c7e0a0f4:	e590f078 	ldr	pc, [r0, #120]
}
c7e0a0f8:	e8bd8010 	pop	{r4, pc}

c7e0a0fc <writeenv>:
/*
 * The legacy NAND code saved the environment in the first NAND device i.e.,
 * nand_dev_desc + 0. This is also the behaviour using the new NAND code.
 */
int writeenv(size_t offset, u_char *buf)
{
c7e0a0fc:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
	size_t end = offset + CONFIG_ENV_RANGE;
	size_t amount_saved = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
c7e0a100:	e59f30a0 	ldr	r3, [pc, #160]	; c7e0a1a8 <writeenv+0xac>
/*
 * The legacy NAND code saved the environment in the first NAND device i.e.,
 * nand_dev_desc + 0. This is also the behaviour using the new NAND code.
 */
int writeenv(size_t offset, u_char *buf)
{
c7e0a104:	e24dd01c 	sub	sp, sp, #28	; 0x1c
	size_t end = offset + CONFIG_ENV_RANGE;
	size_t amount_saved = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
c7e0a108:	e5937010 	ldr	r7, [r3, #16]
/*
 * The legacy NAND code saved the environment in the first NAND device i.e.,
 * nand_dev_desc + 0. This is also the behaviour using the new NAND code.
 */
int writeenv(size_t offset, u_char *buf)
{
c7e0a10c:	e1a05000 	mov	r5, r0
	size_t amount_saved = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	len = min(blocksize, CONFIG_ENV_SIZE);
c7e0a110:	e3570901 	cmp	r7, #16384	; 0x4000
c7e0a114:	31a03007 	movcc	r3, r7
c7e0a118:	23a03901 	movcs	r3, #16384	; 0x4000
/*
 * The legacy NAND code saved the environment in the first NAND device i.e.,
 * nand_dev_desc + 0. This is also the behaviour using the new NAND code.
 */
int writeenv(size_t offset, u_char *buf)
{
c7e0a11c:	e1a09001 	mov	r9, r1
	size_t amount_saved = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	len = min(blocksize, CONFIG_ENV_SIZE);
c7e0a120:	e58d3014 	str	r3, [sp, #20]
 * The legacy NAND code saved the environment in the first NAND device i.e.,
 * nand_dev_desc + 0. This is also the behaviour using the new NAND code.
 */
int writeenv(size_t offset, u_char *buf)
{
	size_t end = offset + CONFIG_ENV_RANGE;
c7e0a124:	e280a901 	add	sl, r0, #16384	; 0x4000
	size_t amount_saved = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	len = min(blocksize, CONFIG_ENV_SIZE);
c7e0a128:	e3a04000 	mov	r4, #0	; 0x0
c7e0a12c:	ea000012 	b	c7e0a17c <writeenv+0x80>

	while (amount_saved < CONFIG_ENV_SIZE && offset < end) {
		if (nand_block_isbad(&nand_info[0], offset)) {
c7e0a130:	ebffffed 	bl	c7e0a0ec <nand_block_isbad>
c7e0a134:	e3500000 	cmp	r0, #0	; 0x0
c7e0a138:	1a00000e 	bne	c7e0a178 <writeenv+0x7c>
	return info->read(info, ofs, *len, (size_t *)len, buf);
}

static inline int nand_write(nand_info_t *info, loff_t ofs, size_t *len, u_char *buf)
{
	return info->write(info, ofs, *len, (size_t *)len, buf);
c7e0a13c:	e28d3018 	add	r3, sp, #24	; 0x18
c7e0a140:	e5332004 	ldr	r2, [r3, #-4]!
c7e0a144:	e0891004 	add	r1, r9, r4
c7e0a148:	e88d000c 	stm	sp, {r2, r3}
c7e0a14c:	e58d1008 	str	r1, [sp, #8]
c7e0a150:	e1a03000 	mov	r3, r0
c7e0a154:	e1a02005 	mov	r2, r5
c7e0a158:	e1a00006 	mov	r0, r6
c7e0a15c:	e1a0e00f 	mov	lr, pc
c7e0a160:	e596f044 	ldr	pc, [r6, #68]
			offset += blocksize;
		} else {
			char_ptr = &buf[amount_saved];
			if (nand_write(&nand_info[0], offset, &len, char_ptr))
c7e0a164:	e3500000 	cmp	r0, #0	; 0x0
c7e0a168:	13a00001 	movne	r0, #1	; 0x1
c7e0a16c:	1a00000b 	bne	c7e0a1a0 <writeenv+0xa4>
				return 1;

			offset += blocksize;
			amount_saved += len;
c7e0a170:	e59d3014 	ldr	r3, [sp, #20]
c7e0a174:	e0844003 	add	r4, r4, r3
c7e0a178:	e0855007 	add	r5, r5, r7

	blocksize = nand_info[0].erasesize;
	len = min(blocksize, CONFIG_ENV_SIZE);

	while (amount_saved < CONFIG_ENV_SIZE && offset < end) {
		if (nand_block_isbad(&nand_info[0], offset)) {
c7e0a17c:	e59f6024 	ldr	r6, [pc, #36]	; c7e0a1a8 <writeenv+0xac>
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	len = min(blocksize, CONFIG_ENV_SIZE);

	while (amount_saved < CONFIG_ENV_SIZE && offset < end) {
c7e0a180:	e3540901 	cmp	r4, #16384	; 0x4000
c7e0a184:	3155000a 	cmpcc	r5, sl
		if (nand_block_isbad(&nand_info[0], offset)) {
c7e0a188:	e1a02005 	mov	r2, r5
c7e0a18c:	e3a03000 	mov	r3, #0	; 0x0
c7e0a190:	e1a00006 	mov	r0, r6
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	len = min(blocksize, CONFIG_ENV_SIZE);

	while (amount_saved < CONFIG_ENV_SIZE && offset < end) {
c7e0a194:	3affffe5 	bcc	c7e0a130 <writeenv+0x34>
c7e0a198:	e2540901 	subs	r0, r4, #16384	; 0x4000
c7e0a19c:	13a00001 	movne	r0, #1	; 0x1
	}
	if (amount_saved != CONFIG_ENV_SIZE)
		return 1;

	return 0;
}
c7e0a1a0:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e0a1a4:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e0a1a8:	c7e41e50 	.word	0xc7e41e50

c7e0a1ac <readenv>:
}
#endif /* CONFIG_ENV_OFFSET_REDUND */
#endif /* CMD_SAVEENV */

int readenv(size_t offset, u_char *buf)
{
c7e0a1ac:	e92d44ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, sl, lr}
	size_t end = offset + CONFIG_ENV_RANGE;
	size_t amount_loaded = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
c7e0a1b0:	e59f3098 	ldr	r3, [pc, #152]	; c7e0a250 <readenv+0xa4>
}
#endif /* CONFIG_ENV_OFFSET_REDUND */
#endif /* CMD_SAVEENV */

int readenv(size_t offset, u_char *buf)
{
c7e0a1b4:	e1a05000 	mov	r5, r0
	size_t end = offset + CONFIG_ENV_RANGE;
	size_t amount_loaded = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
c7e0a1b8:	e5936010 	ldr	r6, [r3, #16]
}
#endif /* CONFIG_ENV_OFFSET_REDUND */
#endif /* CMD_SAVEENV */

int readenv(size_t offset, u_char *buf)
{
c7e0a1bc:	e1a0a001 	mov	sl, r1
	size_t amount_loaded = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	if (!blocksize)
c7e0a1c0:	e3560000 	cmp	r6, #0	; 0x0
#endif /* CONFIG_ENV_OFFSET_REDUND */
#endif /* CMD_SAVEENV */

int readenv(size_t offset, u_char *buf)
{
	size_t end = offset + CONFIG_ENV_RANGE;
c7e0a1c4:	e2807901 	add	r7, r0, #16384	; 0x4000
	size_t amount_loaded = 0;
	size_t blocksize, len;
	u_char *char_ptr;

	blocksize = nand_info[0].erasesize;
	if (!blocksize)
c7e0a1c8:	0a00001d 	beq	c7e0a244 <readenv+0x98>
		return 1;

	len = min(blocksize, CONFIG_ENV_SIZE);
c7e0a1cc:	e3560901 	cmp	r6, #16384	; 0x4000
c7e0a1d0:	31a03006 	movcc	r3, r6
c7e0a1d4:	23a03901 	movcs	r3, #16384	; 0x4000
c7e0a1d8:	e58d300c 	str	r3, [sp, #12]
c7e0a1dc:	e3a04000 	mov	r4, #0	; 0x0
c7e0a1e0:	ea00000e 	b	c7e0a220 <readenv+0x74>

	while (amount_loaded < CONFIG_ENV_SIZE && offset < end) {
		if (nand_block_isbad(&nand_info[0], offset)) {
c7e0a1e4:	ebffffc0 	bl	c7e0a0ec <nand_block_isbad>
c7e0a1e8:	e3500000 	cmp	r0, #0	; 0x0
c7e0a1ec:	1a00000a 	bne	c7e0a21c <readenv+0x70>
			offset += blocksize;
		} else {
			char_ptr = &buf[amount_loaded];
			if (nand_read_skip_bad(&nand_info[0], offset,
c7e0a1f0:	e1a03000 	mov	r3, r0
c7e0a1f4:	e08ac004 	add	ip, sl, r4
c7e0a1f8:	e28d100c 	add	r1, sp, #12	; 0xc
c7e0a1fc:	e1a02005 	mov	r2, r5
c7e0a200:	e59f0048 	ldr	r0, [pc, #72]	; c7e0a250 <readenv+0xa4>
c7e0a204:	e88d1002 	stm	sp, {r1, ip}
c7e0a208:	eb0029e9 	bl	c7e149b4 <nand_read_skip_bad>
c7e0a20c:	e3500000 	cmp	r0, #0	; 0x0
c7e0a210:	1a00000b 	bne	c7e0a244 <readenv+0x98>
					       &len, char_ptr))
				return 1;

			offset += blocksize;
			amount_loaded += len;
c7e0a214:	e59d300c 	ldr	r3, [sp, #12]
c7e0a218:	e0844003 	add	r4, r4, r3
c7e0a21c:	e0855006 	add	r5, r5, r6
	if (!blocksize)
		return 1;

	len = min(blocksize, CONFIG_ENV_SIZE);

	while (amount_loaded < CONFIG_ENV_SIZE && offset < end) {
c7e0a220:	e3540901 	cmp	r4, #16384	; 0x4000
c7e0a224:	31550007 	cmpcc	r5, r7
		if (nand_block_isbad(&nand_info[0], offset)) {
c7e0a228:	e1a02005 	mov	r2, r5
c7e0a22c:	e3a03000 	mov	r3, #0	; 0x0
c7e0a230:	e59f0018 	ldr	r0, [pc, #24]	; c7e0a250 <readenv+0xa4>
	if (!blocksize)
		return 1;

	len = min(blocksize, CONFIG_ENV_SIZE);

	while (amount_loaded < CONFIG_ENV_SIZE && offset < end) {
c7e0a234:	3affffea 	bcc	c7e0a1e4 <readenv+0x38>
c7e0a238:	e2540901 	subs	r0, r4, #16384	; 0x4000
c7e0a23c:	13a00001 	movne	r0, #1	; 0x1
c7e0a240:	ea000000 	b	c7e0a248 <readenv+0x9c>
c7e0a244:	e3a00001 	mov	r0, #1	; 0x1

	if (amount_loaded != CONFIG_ENV_SIZE)
		return 1;

	return 0;
}
c7e0a248:	e28dd010 	add	sp, sp, #16	; 0x10
c7e0a24c:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0a250:	c7e41e50 	.word	0xc7e41e50

c7e0a254 <env_relocate_spec>:
 * The legacy NAND code saved the environment in the first NAND
 * device i.e., nand_dev_desc + 0. This is also the behaviour using
 * the new NAND code.
 */
void env_relocate_spec(void)
{
c7e0a254:	e92d4010 	push	{r4, lr}
c7e0a258:	e24dd901 	sub	sp, sp, #16384	; 0x4000
c7e0a25c:	e24dd040 	sub	sp, sp, #64	; 0x40
#if !defined(ENV_IS_EMBEDDED)
	int ret;
	ALLOC_CACHE_ALIGN_BUFFER(char, buf, CONFIG_ENV_SIZE);
c7e0a260:	e28d3040 	add	r3, sp, #64	; 0x40
c7e0a264:	e3c3403f 	bic	r4, r3, #63	; 0x3f
		set_default_env("!no env offset in OOB");
		return;
	}
#endif

	ret = readenv(CONFIG_ENV_OFFSET, (u_char *)buf);
c7e0a268:	e3a00701 	mov	r0, #262144	; 0x40000
c7e0a26c:	e1a01004 	mov	r1, r4
c7e0a270:	ebffffcd 	bl	c7e0a1ac <readenv>
	if (ret) {
c7e0a274:	e3500000 	cmp	r0, #0	; 0x0
c7e0a278:	0a000002 	beq	c7e0a288 <env_relocate_spec+0x34>
		set_default_env("!readenv() failed");
c7e0a27c:	e59f001c 	ldr	r0, [pc, #28]	; c7e0a2a0 <env_relocate_spec+0x4c>
c7e0a280:	ebffff23 	bl	c7e09f14 <set_default_env>
c7e0a284:	ea000002 	b	c7e0a294 <env_relocate_spec+0x40>
		return;
	}

	env_import(buf, 1);
c7e0a288:	e1a00004 	mov	r0, r4
c7e0a28c:	e3a01001 	mov	r1, #1	; 0x1
c7e0a290:	ebffff5c 	bl	c7e0a008 <env_import>
#endif /* ! ENV_IS_EMBEDDED */
}
c7e0a294:	e28dd040 	add	sp, sp, #64	; 0x40
c7e0a298:	e28dd901 	add	sp, sp, #16384	; 0x4000
c7e0a29c:	e8bd8010 	pop	{r4, pc}
c7e0a2a0:	c7e31e81 	.word	0xc7e31e81

c7e0a2a4 <env_init>:
 * can be embedded or attached to the U-Boot image in NAND flash.
 * This way the SPL loads not only the U-Boot image from NAND but
 * also the environment.
 */
int env_init(void)
{
c7e0a2a4:	e92d4070 	push	{r4, r5, r6, lr}
	env_t *tmp_env2;

	tmp_env2 = (env_t *)((ulong)env_ptr + CONFIG_ENV_SIZE);
	crc2_ok = crc32(0, tmp_env2->data, ENV_SIZE) == tmp_env2->crc;
#endif
	tmp_env1 = env_ptr;
c7e0a2a8:	e59f5054 	ldr	r5, [pc, #84]	; c7e0a304 <env_init+0x60>
	crc1_ok = crc32(0, tmp_env1->data, ENV_SIZE) == tmp_env1->crc;
c7e0a2ac:	e3a00000 	mov	r0, #0	; 0x0
	env_t *tmp_env2;

	tmp_env2 = (env_t *)((ulong)env_ptr + CONFIG_ENV_SIZE);
	crc2_ok = crc32(0, tmp_env2->data, ENV_SIZE) == tmp_env2->crc;
#endif
	tmp_env1 = env_ptr;
c7e0a2b0:	e5954000 	ldr	r4, [r5]
	crc1_ok = crc32(0, tmp_env1->data, ENV_SIZE) == tmp_env1->crc;
c7e0a2b4:	e59f204c 	ldr	r2, [pc, #76]	; c7e0a308 <env_init+0x64>
c7e0a2b8:	e2841004 	add	r1, r4, #4	; 0x4
c7e0a2bc:	eb005a90 	bl	c7e20d04 <crc32>

	if (!crc1_ok && !crc2_ok) {
c7e0a2c0:	e5943000 	ldr	r3, [r4]
c7e0a2c4:	e1500003 	cmp	r0, r3
		gd->env_addr	= 0;
c7e0a2c8:	13a03000 	movne	r3, #0	; 0x0
c7e0a2cc:	15883010 	strne	r3, [r8, #16]
		gd->env_valid	= 0;
c7e0a2d0:	15883014 	strne	r3, [r8, #20]
c7e0a2d4:	1a000008 	bne	c7e0a2fc <env_init+0x58>

		return 0;
	} else if (crc1_ok && !crc2_ok) {
		gd->env_valid = 1;
c7e0a2d8:	e3a03001 	mov	r3, #1	; 0x1
c7e0a2dc:	e5883014 	str	r3, [r8, #20]

	if (gd->env_valid == 2)
		env_ptr = tmp_env2;
	else
#endif
	if (gd->env_valid == 1)
c7e0a2e0:	e5983014 	ldr	r3, [r8, #20]
c7e0a2e4:	e3530001 	cmp	r3, #1	; 0x1
		env_ptr = tmp_env1;

	gd->env_addr = (ulong)env_ptr->data;
c7e0a2e8:	e59f3014 	ldr	r3, [pc, #20]	; c7e0a304 <env_init+0x60>
	if (gd->env_valid == 2)
		env_ptr = tmp_env2;
	else
#endif
	if (gd->env_valid == 1)
		env_ptr = tmp_env1;
c7e0a2ec:	05854000 	streq	r4, [r5]

	gd->env_addr = (ulong)env_ptr->data;
c7e0a2f0:	e5933000 	ldr	r3, [r3]
c7e0a2f4:	e2833004 	add	r3, r3, #4	; 0x4
c7e0a2f8:	e5883010 	str	r3, [r8, #16]
	gd->env_addr	= (ulong)&default_environment[0];
	gd->env_valid	= 1;
#endif /* ENV_IS_EMBEDDED || CONFIG_NAND_ENV_DST */

	return 0;
}
c7e0a2fc:	e3a00000 	mov	r0, #0	; 0x0
c7e0a300:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0a304:	c7e357f4 	.word	0xc7e357f4
c7e0a308:	00003ffc 	.word	0x00003ffc

c7e0a30c <saveenv>:

	return ret;
}
#else /* ! CONFIG_ENV_OFFSET_REDUND */
int saveenv(void)
{
c7e0a30c:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
c7e0a310:	e24dd901 	sub	sp, sp, #16384	; 0x4000
c7e0a314:	e24dd074 	sub	sp, sp, #116	; 0x74
	ALLOC_CACHE_ALIGN_BUFFER(env_t, env_new, 1);
	ssize_t	len;
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
c7e0a318:	e28d9901 	add	r9, sp, #16384	; 0x4000
}
#else /* ! CONFIG_ENV_OFFSET_REDUND */
int saveenv(void)
{
	int	ret = 0;
	ALLOC_CACHE_ALIGN_BUFFER(env_t, env_new, 1);
c7e0a31c:	e28d3070 	add	r3, sp, #112	; 0x70
	ssize_t	len;
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
c7e0a320:	e2899048 	add	r9, r9, #72	; 0x48
}
#else /* ! CONFIG_ENV_OFFSET_REDUND */
int saveenv(void)
{
	int	ret = 0;
	ALLOC_CACHE_ALIGN_BUFFER(env_t, env_new, 1);
c7e0a324:	e2433028 	sub	r3, r3, #40	; 0x28
	ssize_t	len;
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
c7e0a328:	e3a01000 	mov	r1, #0	; 0x0
c7e0a32c:	e3a02020 	mov	r2, #32	; 0x20
c7e0a330:	e1a00009 	mov	r0, r9
}
#else /* ! CONFIG_ENV_OFFSET_REDUND */
int saveenv(void)
{
	int	ret = 0;
	ALLOC_CACHE_ALIGN_BUFFER(env_t, env_new, 1);
c7e0a334:	e3c3703f 	bic	r7, r3, #63	; 0x3f
	ssize_t	len;
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
c7e0a338:	eb006215 	bl	c7e22b94 <memset>
	nand_erase_options.length = CONFIG_ENV_RANGE;
c7e0a33c:	e28dc901 	add	ip, sp, #16384	; 0x4000
c7e0a340:	e28cc050 	add	ip, ip, #80	; 0x50
c7e0a344:	e3a04901 	mov	r4, #16384	; 0x4000
c7e0a348:	e3a05000 	mov	r5, #0	; 0x0
	nand_erase_options.offset = CONFIG_ENV_OFFSET;

	if (CONFIG_ENV_RANGE < CONFIG_ENV_SIZE)
		return 1;

	res = (char *)&env_new->data;
c7e0a34c:	e28d2901 	add	r2, sp, #16384	; 0x4000
	ssize_t	len;
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
	nand_erase_options.length = CONFIG_ENV_RANGE;
c7e0a350:	e90c0030 	stmdb	ip, {r4, r5}

	if (CONFIG_ENV_RANGE < CONFIG_ENV_SIZE)
		return 1;

	res = (char *)&env_new->data;
	len = hexport_r(&env_htab, '\0', &res, ENV_SIZE, 0, NULL);
c7e0a354:	e3a06000 	mov	r6, #0	; 0x0
	nand_erase_options.offset = CONFIG_ENV_OFFSET;

	if (CONFIG_ENV_RANGE < CONFIG_ENV_SIZE)
		return 1;

	res = (char *)&env_new->data;
c7e0a358:	e2822070 	add	r2, r2, #112	; 0x70
c7e0a35c:	e287a004 	add	sl, r7, #4	; 0x4
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
	nand_erase_options.length = CONFIG_ENV_RANGE;
	nand_erase_options.offset = CONFIG_ENV_OFFSET;
c7e0a360:	e3a04701 	mov	r4, #262144	; 0x40000
c7e0a364:	e3a05000 	mov	r5, #0	; 0x0

	if (CONFIG_ENV_RANGE < CONFIG_ENV_SIZE)
		return 1;

	res = (char *)&env_new->data;
c7e0a368:	e522a004 	str	sl, [r2, #-4]!
	char	*res;
	nand_erase_options_t nand_erase_options;

	memset(&nand_erase_options, 0, sizeof(nand_erase_options));
	nand_erase_options.length = CONFIG_ENV_RANGE;
	nand_erase_options.offset = CONFIG_ENV_OFFSET;
c7e0a36c:	e88c0030 	stm	ip, {r4, r5}

	if (CONFIG_ENV_RANGE < CONFIG_ENV_SIZE)
		return 1;

	res = (char *)&env_new->data;
	len = hexport_r(&env_htab, '\0', &res, ENV_SIZE, 0, NULL);
c7e0a370:	e59f00b0 	ldr	r0, [pc, #176]	; c7e0a428 <saveenv+0x11c>
c7e0a374:	e1a01006 	mov	r1, r6
c7e0a378:	e59f30ac 	ldr	r3, [pc, #172]	; c7e0a42c <saveenv+0x120>
c7e0a37c:	e58d6000 	str	r6, [sp]
c7e0a380:	e58d6004 	str	r6, [sp, #4]
c7e0a384:	eb005c29 	bl	c7e21430 <hexport_r>
	if (len < 0) {
c7e0a388:	e1500006 	cmp	r0, r6
c7e0a38c:	aa000008 	bge	c7e0a3b4 <saveenv+0xa8>
		error("Cannot export environment: errno = %d\n", errno);
c7e0a390:	e59f3098 	ldr	r3, [pc, #152]	; c7e0a430 <saveenv+0x124>
c7e0a394:	e59fc098 	ldr	ip, [pc, #152]	; c7e0a434 <saveenv+0x128>
c7e0a398:	e5931000 	ldr	r1, [r3]
c7e0a39c:	e59f2094 	ldr	r2, [pc, #148]	; c7e0a438 <saveenv+0x12c>
c7e0a3a0:	e3a030f4 	mov	r3, #244	; 0xf4
c7e0a3a4:	e59f0090 	ldr	r0, [pc, #144]	; c7e0a43c <saveenv+0x130>
c7e0a3a8:	e58dc000 	str	ip, [sp]
c7e0a3ac:	ebfff9a9 	bl	c7e08a58 <printf>
c7e0a3b0:	ea000014 	b	c7e0a408 <saveenv+0xfc>
		return 1;
	}
	env_new->crc = crc32(0, env_new->data, ENV_SIZE);
c7e0a3b4:	e1a0100a 	mov	r1, sl
c7e0a3b8:	e59f206c 	ldr	r2, [pc, #108]	; c7e0a42c <saveenv+0x120>
c7e0a3bc:	e1a00006 	mov	r0, r6
c7e0a3c0:	eb005a4f 	bl	c7e20d04 <crc32>
c7e0a3c4:	e5870000 	str	r0, [r7]

	puts("Erasing Nand...\n");
c7e0a3c8:	e59f0070 	ldr	r0, [pc, #112]	; c7e0a440 <saveenv+0x134>
c7e0a3cc:	ebfff986 	bl	c7e089ec <puts>
	if (nand_erase_opts(&nand_info[0], &nand_erase_options))
c7e0a3d0:	e1a01009 	mov	r1, r9
c7e0a3d4:	e59f0068 	ldr	r0, [pc, #104]	; c7e0a444 <saveenv+0x138>
c7e0a3d8:	eb002a60 	bl	c7e14d60 <nand_erase_opts>
c7e0a3dc:	e3500000 	cmp	r0, #0	; 0x0
c7e0a3e0:	1a000008 	bne	c7e0a408 <saveenv+0xfc>
		return 1;

	puts("Writing to Nand... ");
c7e0a3e4:	e59f005c 	ldr	r0, [pc, #92]	; c7e0a448 <saveenv+0x13c>
c7e0a3e8:	ebfff97f 	bl	c7e089ec <puts>
	if (writeenv(CONFIG_ENV_OFFSET, (u_char *)env_new)) {
c7e0a3ec:	e1a01007 	mov	r1, r7
c7e0a3f0:	e3a00701 	mov	r0, #262144	; 0x40000
c7e0a3f4:	ebffff40 	bl	c7e0a0fc <writeenv>
c7e0a3f8:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0a3fc:	0a000003 	beq	c7e0a410 <saveenv+0x104>
		puts("FAILED!\n");
c7e0a400:	e59f0044 	ldr	r0, [pc, #68]	; c7e0a44c <saveenv+0x140>
c7e0a404:	ebfff978 	bl	c7e089ec <puts>
c7e0a408:	e3a00001 	mov	r0, #1	; 0x1
c7e0a40c:	ea000002 	b	c7e0a41c <saveenv+0x110>
		return 1;
	}

	puts("done\n");
c7e0a410:	e59f0038 	ldr	r0, [pc, #56]	; c7e0a450 <saveenv+0x144>
c7e0a414:	ebfff974 	bl	c7e089ec <puts>
c7e0a418:	e1a00004 	mov	r0, r4
	return ret;
}
c7e0a41c:	e28dd074 	add	sp, sp, #116	; 0x74
c7e0a420:	e28dd901 	add	sp, sp, #16384	; 0x4000
c7e0a424:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e0a428:	c7e357e4 	.word	0xc7e357e4
c7e0a42c:	00003ffc 	.word	0x00003ffc
c7e0a430:	c7e72300 	.word	0xc7e72300
c7e0a434:	c7e2b32e 	.word	0xc7e2b32e
c7e0a438:	c7e31e93 	.word	0xc7e31e93
c7e0a43c:	c7e313b2 	.word	0xc7e313b2
c7e0a440:	c7e31e9e 	.word	0xc7e31e9e
c7e0a444:	c7e41e50 	.word	0xc7e41e50
c7e0a448:	c7e31eaf 	.word	0xc7e31eaf
c7e0a44c:	c7e31ec3 	.word	0xc7e31ec3
c7e0a450:	c7e34f96 	.word	0xc7e34f96

c7e0a454 <dummy>:

DECLARE_GLOBAL_DATA_PTR;

__attribute__((unused)) static void dummy(void)
{
}
c7e0a454:	e12fff1e 	bx	lr

c7e0a458 <get_version>:

unsigned long get_version(void)
{
	return XF_VERSION;
}
c7e0a458:	e3a00006 	mov	r0, #6	; 0x6
c7e0a45c:	e12fff1e 	bx	lr

c7e0a460 <jumptable_init>:
# define spi_release_bus   dummy
# define spi_xfer          dummy
#endif

void jumptable_init(void)
{
c7e0a460:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	gd->jt = malloc(XF_MAX * sizeof(void *));
c7e0a464:	e3a00070 	mov	r0, #112	; 0x70
# define spi_release_bus   dummy
# define spi_xfer          dummy
#endif

void jumptable_init(void)
{
c7e0a468:	e24dd060 	sub	sp, sp, #96	; 0x60
	gd->jt = malloc(XF_MAX * sizeof(void *));
c7e0a46c:	e1a04008 	mov	r4, r8
c7e0a470:	ebfffb49 	bl	c7e0919c <malloc>
c7e0a474:	e5840054 	str	r0, [r4, #84]
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
c7e0a478:	e5983054 	ldr	r3, [r8, #84]
EXPORT_FUNC(getc)
c7e0a47c:	e5982054 	ldr	r2, [r8, #84]
EXPORT_FUNC(tstc)
c7e0a480:	e5981054 	ldr	r1, [r8, #84]
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
c7e0a484:	e58d300c 	str	r3, [sp, #12]
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
EXPORT_FUNC(putc)
c7e0a488:	e5980054 	ldr	r0, [r8, #84]
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
c7e0a48c:	e58d1004 	str	r1, [sp, #4]
EXPORT_FUNC(putc)
EXPORT_FUNC(puts)
c7e0a490:	e598c054 	ldr	ip, [r8, #84]
EXPORT_FUNC(printf)
c7e0a494:	e5984054 	ldr	r4, [r8, #84]
EXPORT_FUNC(install_hdlr)
c7e0a498:	e5985054 	ldr	r5, [r8, #84]
EXPORT_FUNC(free_hdlr)
c7e0a49c:	e5986054 	ldr	r6, [r8, #84]
EXPORT_FUNC(malloc)
c7e0a4a0:	e5987054 	ldr	r7, [r8, #84]
EXPORT_FUNC(free)
c7e0a4a4:	e598a054 	ldr	sl, [r8, #84]
EXPORT_FUNC(udelay)
c7e0a4a8:	e5989054 	ldr	r9, [r8, #84]
EXPORT_FUNC(get_timer)
c7e0a4ac:	e5981054 	ldr	r1, [r8, #84]
EXPORT_FUNC(vprintf)
c7e0a4b0:	e5983054 	ldr	r3, [r8, #84]
EXPORT_FUNC(do_reset)
EXPORT_FUNC(getenv)
EXPORT_FUNC(setenv)
c7e0a4b4:	e1a0b008 	mov	fp, r8
EXPORT_FUNC(simple_strtoul)
c7e0a4b8:	e1a0e008 	mov	lr, r8
EXPORT_FUNC(install_hdlr)
EXPORT_FUNC(free_hdlr)
EXPORT_FUNC(malloc)
EXPORT_FUNC(free)
EXPORT_FUNC(udelay)
EXPORT_FUNC(get_timer)
c7e0a4bc:	e58d1014 	str	r1, [sp, #20]
EXPORT_FUNC(vprintf)
c7e0a4c0:	e58d3018 	str	r3, [sp, #24]
EXPORT_FUNC(do_reset)
c7e0a4c4:	e5981054 	ldr	r1, [r8, #84]
EXPORT_FUNC(getenv)
c7e0a4c8:	e5983054 	ldr	r3, [r8, #84]
EXPORT_FUNC(setenv)
c7e0a4cc:	e59bb054 	ldr	fp, [fp, #84]
EXPORT_FUNC(simple_strtoul)
c7e0a4d0:	e59ee054 	ldr	lr, [lr, #84]
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
c7e0a4d4:	e58d2010 	str	r2, [sp, #16]
EXPORT_FUNC(malloc)
EXPORT_FUNC(free)
EXPORT_FUNC(udelay)
EXPORT_FUNC(get_timer)
EXPORT_FUNC(vprintf)
EXPORT_FUNC(do_reset)
c7e0a4d8:	e58d101c 	str	r1, [sp, #28]
EXPORT_FUNC(getenv)
c7e0a4dc:	e58d3020 	str	r3, [sp, #32]
EXPORT_FUNC(setenv)
c7e0a4e0:	e58db024 	str	fp, [sp, #36]
EXPORT_FUNC(simple_strtoul)
c7e0a4e4:	e58de028 	str	lr, [sp, #40]
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
c7e0a4e8:	e59f3140 	ldr	r3, [pc, #320]	; c7e0a630 <jumptable_init+0x1d0>
EXPORT_FUNC(install_hdlr)
EXPORT_FUNC(free_hdlr)
EXPORT_FUNC(malloc)
EXPORT_FUNC(free)
EXPORT_FUNC(udelay)
EXPORT_FUNC(get_timer)
c7e0a4ec:	e58d802c 	str	r8, [sp, #44]
EXPORT_FUNC(vprintf)
c7e0a4f0:	e58d8030 	str	r8, [sp, #48]
EXPORT_FUNC(do_reset)
c7e0a4f4:	e58d8034 	str	r8, [sp, #52]
EXPORT_FUNC(getenv)
c7e0a4f8:	e58d8038 	str	r8, [sp, #56]
EXPORT_FUNC(setenv)
EXPORT_FUNC(simple_strtoul)
EXPORT_FUNC(strict_strtoul)
c7e0a4fc:	e58d803c 	str	r8, [sp, #60]
EXPORT_FUNC(simple_strtol)
c7e0a500:	e58d8040 	str	r8, [sp, #64]
EXPORT_FUNC(strcmp)
c7e0a504:	e58d8044 	str	r8, [sp, #68]
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
c7e0a508:	e59d100c 	ldr	r1, [sp, #12]
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
EXPORT_FUNC(putc)
EXPORT_FUNC(puts)
EXPORT_FUNC(printf)
EXPORT_FUNC(install_hdlr)
c7e0a50c:	e59f2120 	ldr	r2, [pc, #288]	; c7e0a634 <jumptable_init+0x1d4>
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
c7e0a510:	e5813000 	str	r3, [r1]
EXPORT_FUNC(getc)
c7e0a514:	e59d1010 	ldr	r1, [sp, #16]
c7e0a518:	e59f3118 	ldr	r3, [pc, #280]	; c7e0a638 <jumptable_init+0x1d8>
EXPORT_FUNC(setenv)
EXPORT_FUNC(simple_strtoul)
EXPORT_FUNC(strict_strtoul)
EXPORT_FUNC(simple_strtol)
EXPORT_FUNC(strcmp)
EXPORT_FUNC(i2c_write)
c7e0a51c:	e58d8048 	str	r8, [sp, #72]
/*
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
c7e0a520:	e5813004 	str	r3, [r1, #4]
EXPORT_FUNC(tstc)
c7e0a524:	e59d1004 	ldr	r1, [sp, #4]
c7e0a528:	e59f310c 	ldr	r3, [pc, #268]	; c7e0a63c <jumptable_init+0x1dc>
EXPORT_FUNC(simple_strtoul)
EXPORT_FUNC(strict_strtoul)
EXPORT_FUNC(simple_strtol)
EXPORT_FUNC(strcmp)
EXPORT_FUNC(i2c_write)
EXPORT_FUNC(i2c_read)
c7e0a52c:	e58d804c 	str	r8, [sp, #76]
 * You do not need to use #ifdef around functions that may not exist
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
c7e0a530:	e5813008 	str	r3, [r1, #8]
EXPORT_FUNC(putc)
c7e0a534:	e59f3104 	ldr	r3, [pc, #260]	; c7e0a640 <jumptable_init+0x1e0>
EXPORT_FUNC(install_hdlr)
EXPORT_FUNC(free_hdlr)
EXPORT_FUNC(malloc)
EXPORT_FUNC(free)
EXPORT_FUNC(udelay)
EXPORT_FUNC(get_timer)
c7e0a538:	e59d1014 	ldr	r1, [sp, #20]
 * in the final configuration (such as i2c).
 */
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
EXPORT_FUNC(putc)
c7e0a53c:	e580300c 	str	r3, [r0, #12]
EXPORT_FUNC(puts)
c7e0a540:	e59f30fc 	ldr	r3, [pc, #252]	; c7e0a644 <jumptable_init+0x1e4>
EXPORT_FUNC(strict_strtoul)
EXPORT_FUNC(simple_strtol)
EXPORT_FUNC(strcmp)
EXPORT_FUNC(i2c_write)
EXPORT_FUNC(i2c_read)
EXPORT_FUNC(spi_init)
c7e0a544:	e58d8050 	str	r8, [sp, #80]
 */
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
EXPORT_FUNC(putc)
EXPORT_FUNC(puts)
c7e0a548:	e58c3010 	str	r3, [ip, #16]
EXPORT_FUNC(printf)
c7e0a54c:	e59f30f4 	ldr	r3, [pc, #244]	; c7e0a648 <jumptable_init+0x1e8>
EXPORT_FUNC(simple_strtol)
EXPORT_FUNC(strcmp)
EXPORT_FUNC(i2c_write)
EXPORT_FUNC(i2c_read)
EXPORT_FUNC(spi_init)
EXPORT_FUNC(spi_setup_slave)
c7e0a550:	e58d8054 	str	r8, [sp, #84]
EXPORT_FUNC(get_version)
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
EXPORT_FUNC(putc)
EXPORT_FUNC(puts)
EXPORT_FUNC(printf)
c7e0a554:	e5843014 	str	r3, [r4, #20]
EXPORT_FUNC(install_hdlr)
EXPORT_FUNC(free_hdlr)
EXPORT_FUNC(malloc)
c7e0a558:	e59f30ec 	ldr	r3, [pc, #236]	; c7e0a64c <jumptable_init+0x1ec>
EXPORT_FUNC(getc)
EXPORT_FUNC(tstc)
EXPORT_FUNC(putc)
EXPORT_FUNC(puts)
EXPORT_FUNC(printf)
EXPORT_FUNC(install_hdlr)
c7e0a55c:	e5852018 	str	r2, [r5, #24]
EXPORT_FUNC(free_hdlr)
c7e0a560:	e586201c 	str	r2, [r6, #28]
EXPORT_FUNC(malloc)
c7e0a564:	e5873020 	str	r3, [r7, #32]
EXPORT_FUNC(free)
c7e0a568:	e59f30e0 	ldr	r3, [pc, #224]	; c7e0a650 <jumptable_init+0x1f0>
EXPORT_FUNC(strcmp)
EXPORT_FUNC(i2c_write)
EXPORT_FUNC(i2c_read)
EXPORT_FUNC(spi_init)
EXPORT_FUNC(spi_setup_slave)
EXPORT_FUNC(spi_free_slave)
c7e0a56c:	e58d8058 	str	r8, [sp, #88]
EXPORT_FUNC(puts)
EXPORT_FUNC(printf)
EXPORT_FUNC(install_hdlr)
EXPORT_FUNC(free_hdlr)
EXPORT_FUNC(malloc)
EXPORT_FUNC(free)
c7e0a570:	e58a3024 	str	r3, [sl, #36]
EXPORT_FUNC(udelay)
c7e0a574:	e59f30d8 	ldr	r3, [pc, #216]	; c7e0a654 <jumptable_init+0x1f4>
EXPORT_FUNC(i2c_write)
EXPORT_FUNC(i2c_read)
EXPORT_FUNC(spi_init)
EXPORT_FUNC(spi_setup_slave)
EXPORT_FUNC(spi_free_slave)
EXPORT_FUNC(spi_claim_bus)
c7e0a578:	e58d805c 	str	r8, [sp, #92]
EXPORT_FUNC(printf)
EXPORT_FUNC(install_hdlr)
EXPORT_FUNC(free_hdlr)
EXPORT_FUNC(malloc)
EXPORT_FUNC(free)
EXPORT_FUNC(udelay)
c7e0a57c:	e5893028 	str	r3, [r9, #40]
EXPORT_FUNC(get_timer)
c7e0a580:	e59f30d0 	ldr	r3, [pc, #208]	; c7e0a658 <jumptable_init+0x1f8>
c7e0a584:	e581302c 	str	r3, [r1, #44]
EXPORT_FUNC(vprintf)
c7e0a588:	e59d1018 	ldr	r1, [sp, #24]
c7e0a58c:	e59f30c8 	ldr	r3, [pc, #200]	; c7e0a65c <jumptable_init+0x1fc>
c7e0a590:	e5813030 	str	r3, [r1, #48]
EXPORT_FUNC(do_reset)
c7e0a594:	e59d101c 	ldr	r1, [sp, #28]
c7e0a598:	e59f30c0 	ldr	r3, [pc, #192]	; c7e0a660 <jumptable_init+0x200>
c7e0a59c:	e5813034 	str	r3, [r1, #52]
EXPORT_FUNC(getenv)
c7e0a5a0:	e59d1020 	ldr	r1, [sp, #32]
c7e0a5a4:	e59f30b8 	ldr	r3, [pc, #184]	; c7e0a664 <jumptable_init+0x204>
c7e0a5a8:	e5813038 	str	r3, [r1, #56]
EXPORT_FUNC(setenv)
c7e0a5ac:	e59d1024 	ldr	r1, [sp, #36]
c7e0a5b0:	e59f30b0 	ldr	r3, [pc, #176]	; c7e0a668 <jumptable_init+0x208>
c7e0a5b4:	e581303c 	str	r3, [r1, #60]
EXPORT_FUNC(simple_strtoul)
c7e0a5b8:	e59d1028 	ldr	r1, [sp, #40]
c7e0a5bc:	e59f30a8 	ldr	r3, [pc, #168]	; c7e0a66c <jumptable_init+0x20c>
c7e0a5c0:	e5813040 	str	r3, [r1, #64]
EXPORT_FUNC(strict_strtoul)
c7e0a5c4:	e5981054 	ldr	r1, [r8, #84]
c7e0a5c8:	e59f30a0 	ldr	r3, [pc, #160]	; c7e0a670 <jumptable_init+0x210>
EXPORT_FUNC(simple_strtol)
c7e0a5cc:	e5980054 	ldr	r0, [r8, #84]
EXPORT_FUNC(strcmp)
c7e0a5d0:	e598c054 	ldr	ip, [r8, #84]
EXPORT_FUNC(i2c_write)
c7e0a5d4:	e5984054 	ldr	r4, [r8, #84]
EXPORT_FUNC(i2c_read)
c7e0a5d8:	e5985054 	ldr	r5, [r8, #84]
EXPORT_FUNC(spi_init)
c7e0a5dc:	e5986054 	ldr	r6, [r8, #84]
EXPORT_FUNC(spi_setup_slave)
c7e0a5e0:	e5987054 	ldr	r7, [r8, #84]
EXPORT_FUNC(spi_free_slave)
c7e0a5e4:	e598a054 	ldr	sl, [r8, #84]
EXPORT_FUNC(spi_claim_bus)
c7e0a5e8:	e5989054 	ldr	r9, [r8, #84]
EXPORT_FUNC(spi_release_bus)
c7e0a5ec:	e598b054 	ldr	fp, [r8, #84]
EXPORT_FUNC(spi_xfer)
c7e0a5f0:	e598e054 	ldr	lr, [r8, #84]
EXPORT_FUNC(vprintf)
EXPORT_FUNC(do_reset)
EXPORT_FUNC(getenv)
EXPORT_FUNC(setenv)
EXPORT_FUNC(simple_strtoul)
EXPORT_FUNC(strict_strtoul)
c7e0a5f4:	e5813044 	str	r3, [r1, #68]
EXPORT_FUNC(simple_strtol)
c7e0a5f8:	e59f3074 	ldr	r3, [pc, #116]	; c7e0a674 <jumptable_init+0x214>
c7e0a5fc:	e5803048 	str	r3, [r0, #72]
EXPORT_FUNC(strcmp)
c7e0a600:	e59f3070 	ldr	r3, [pc, #112]	; c7e0a678 <jumptable_init+0x218>
c7e0a604:	e58c304c 	str	r3, [ip, #76]
EXPORT_FUNC(i2c_write)
c7e0a608:	e5842050 	str	r2, [r4, #80]
EXPORT_FUNC(i2c_read)
c7e0a60c:	e5852054 	str	r2, [r5, #84]
EXPORT_FUNC(spi_init)
c7e0a610:	e5862058 	str	r2, [r6, #88]
EXPORT_FUNC(spi_setup_slave)
c7e0a614:	e587205c 	str	r2, [r7, #92]
EXPORT_FUNC(spi_free_slave)
c7e0a618:	e58a2060 	str	r2, [sl, #96]
EXPORT_FUNC(spi_claim_bus)
c7e0a61c:	e5892064 	str	r2, [r9, #100]
EXPORT_FUNC(spi_release_bus)
c7e0a620:	e58b2068 	str	r2, [fp, #104]
EXPORT_FUNC(spi_xfer)
c7e0a624:	e58e206c 	str	r2, [lr, #108]
#include <_exports.h>
}
c7e0a628:	e28dd060 	add	sp, sp, #96	; 0x60
c7e0a62c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0a630:	c7e0a458 	.word	0xc7e0a458
c7e0a634:	c7e0a454 	.word	0xc7e0a454
c7e0a638:	c7e08ce4 	.word	0xc7e08ce4
c7e0a63c:	c7e08cc0 	.word	0xc7e08cc0
c7e0a640:	c7e08c98 	.word	0xc7e08c98
c7e0a644:	c7e089ec 	.word	0xc7e089ec
c7e0a648:	c7e08a58 	.word	0xc7e08a58
c7e0a64c:	c7e0919c 	.word	0xc7e0919c
c7e0a650:	c7e08f60 	.word	0xc7e08f60
c7e0a654:	c7e22ec8 	.word	0xc7e22ec8
c7e0a658:	c7e00a00 	.word	0xc7e00a00
c7e0a65c:	c7e08a14 	.word	0xc7e08a14
c7e0a660:	c7e01350 	.word	0xc7e01350
c7e0a664:	c7e0709c 	.word	0xc7e0709c
c7e0a668:	c7e07650 	.word	0xc7e07650
c7e0a66c:	c7e22f60 	.word	0xc7e22f60
c7e0a670:	c7e23e58 	.word	0xc7e23e58
c7e0a674:	c7e23018 	.word	0xc7e23018
c7e0a678:	c7e22860 	.word	0xc7e22860

c7e0a67c <b_reset>:

static void b_reset(o_string *o)
{
	o->length = 0;
	o->nonnull = 0;
	if (o->data != NULL) *o->data = '\0';
c7e0a67c:	e5902000 	ldr	r2, [r0]
	return 0;
}

static void b_reset(o_string *o)
{
	o->length = 0;
c7e0a680:	e3a03000 	mov	r3, #0	; 0x0
	o->nonnull = 0;
	if (o->data != NULL) *o->data = '\0';
c7e0a684:	e1520003 	cmp	r2, r3
	return 0;
}

static void b_reset(o_string *o)
{
	o->length = 0;
c7e0a688:	e5803004 	str	r3, [r0, #4]
	o->nonnull = 0;
c7e0a68c:	e5803010 	str	r3, [r0, #16]
	if (o->data != NULL) *o->data = '\0';
c7e0a690:	15c23000 	strbne	r3, [r2]
c7e0a694:	e12fff1e 	bx	lr

c7e0a698 <static_get>:
}
#endif

static int static_get(struct in_str *i)
{
	int ch = *i->p++;
c7e0a698:	e5903000 	ldr	r3, [r0]
c7e0a69c:	e4d32001 	ldrb	r2, [r3], #1
	if (ch=='\0') return EOF;
c7e0a6a0:	e3520000 	cmp	r2, #0	; 0x0
}
#endif

static int static_get(struct in_str *i)
{
	int ch = *i->p++;
c7e0a6a4:	e5803000 	str	r3, [r0]
	if (ch=='\0') return EOF;
	return ch;
}
c7e0a6a8:	11a00002 	movne	r0, r2
c7e0a6ac:	03e00000 	mvneq	r0, #0	; 0x0
c7e0a6b0:	e12fff1e 	bx	lr

c7e0a6b4 <static_peek>:

static int static_peek(struct in_str *i)
{
c7e0a6b4:	e5903000 	ldr	r3, [r0]
	return *i->p;
}
c7e0a6b8:	e5d30000 	ldrb	r0, [r3]
c7e0a6bc:	e12fff1e 	bx	lr

c7e0a6c0 <file_peek>:

/* All the callers guarantee this routine will never be
 * used right after a newline, so prompting is not needed.
 */
static int file_peek(struct in_str *i)
{
c7e0a6c0:	e5903000 	ldr	r3, [r0]
		i->p = i->peek_buf;
		debug_printf("b_peek: got a %d\n", *i->p);
		return *i->p;
	}
#endif
}
c7e0a6c4:	e5d30000 	ldrb	r0, [r3]
c7e0a6c8:	e12fff1e 	bx	lr

c7e0a6cc <setup_string_in_str>:
	i->p = NULL;
}

static void setup_string_in_str(struct in_str *i, const char *s)
{
	i->peek = static_peek;
c7e0a6cc:	e59f301c 	ldr	r3, [pc, #28]	; c7e0a6f0 <setup_string_in_str+0x24>
	i->get = static_get;
	i->__promptme=1;
c7e0a6d0:	e3a02001 	mov	r2, #1	; 0x1
	i->p = NULL;
}

static void setup_string_in_str(struct in_str *i, const char *s)
{
	i->peek = static_peek;
c7e0a6d4:	e5803010 	str	r3, [r0, #16]
	i->get = static_get;
c7e0a6d8:	e59f3014 	ldr	r3, [pc, #20]	; c7e0a6f4 <setup_string_in_str+0x28>
	i->__promptme=1;
	i->promptmode=1;
	i->p = s;
c7e0a6dc:	e5801000 	str	r1, [r0]
}

static void setup_string_in_str(struct in_str *i, const char *s)
{
	i->peek = static_peek;
	i->get = static_get;
c7e0a6e0:	e580300c 	str	r3, [r0, #12]
	i->__promptme=1;
	i->promptmode=1;
c7e0a6e4:	e5802008 	str	r2, [r0, #8]

static void setup_string_in_str(struct in_str *i, const char *s)
{
	i->peek = static_peek;
	i->get = static_get;
	i->__promptme=1;
c7e0a6e8:	e5802004 	str	r2, [r0, #4]
	i->promptmode=1;
	i->p = s;
}
c7e0a6ec:	e12fff1e 	bx	lr
c7e0a6f0:	c7e0a6b4 	.word	0xc7e0a6b4
c7e0a6f4:	c7e0a698 	.word	0xc7e0a698

c7e0a6f8 <indenter>:
	return rcode;
}

/* broken, of course, but OK for testing */
static char *indenter(int i)
{
c7e0a6f8:	e59f3004 	ldr	r3, [pc, #4]	; c7e0a704 <indenter+0xc>
	static char blanks[]="                                    ";
	return &blanks[sizeof(blanks)-i-1];
}
c7e0a6fc:	e0600003 	rsb	r0, r0, r3
c7e0a700:	e12fff1e 	bx	lr
c7e0a704:	c7e35820 	.word	0xc7e35820

c7e0a708 <is_assignment>:
	}
}

static int is_assignment(const char *s)
{
	if (s == NULL)
c7e0a708:	e3500000 	cmp	r0, #0	; 0x0
c7e0a70c:	0a000011 	beq	c7e0a758 <is_assignment+0x50>
		return 0;

	if (!isalpha(*s)) return 0;
c7e0a710:	e5d03000 	ldrb	r3, [r0]
c7e0a714:	e59f2044 	ldr	r2, [pc, #68]	; c7e0a760 <is_assignment+0x58>
c7e0a718:	e7d23003 	ldrb	r3, [r2, r3]
c7e0a71c:	e3130003 	tst	r3, #3	; 0x3
c7e0a720:	0a00000c 	beq	c7e0a758 <is_assignment+0x50>
c7e0a724:	e1a02000 	mov	r2, r0
	++s;
	while(isalnum(*s) || *s=='_') ++s;
c7e0a728:	e5d20001 	ldrb	r0, [r2, #1]
c7e0a72c:	e59f302c 	ldr	r3, [pc, #44]	; c7e0a760 <is_assignment+0x58>
c7e0a730:	e2822001 	add	r2, r2, #1	; 0x1
c7e0a734:	e7d33000 	ldrb	r3, [r3, r0]
c7e0a738:	e3130007 	tst	r3, #7	; 0x7
c7e0a73c:	1afffff9 	bne	c7e0a728 <is_assignment+0x20>
c7e0a740:	e350005f 	cmp	r0, #95	; 0x5f
c7e0a744:	0afffff7 	beq	c7e0a728 <is_assignment+0x20>
	return *s=='=';
c7e0a748:	e350003d 	cmp	r0, #61	; 0x3d
c7e0a74c:	13a00000 	movne	r0, #0	; 0x0
c7e0a750:	03a00001 	moveq	r0, #1	; 0x1
c7e0a754:	e12fff1e 	bx	lr
c7e0a758:	e3a00000 	mov	r0, #0	; 0x0
}
c7e0a75c:	e12fff1e 	bx	lr
c7e0a760:	c7e2d144 	.word	0xc7e2d144

c7e0a764 <mapset>:
	if (end_trigger != '\0') return -1;
	return 0;
}

void mapset(const unsigned char *set, int code)
{
c7e0a764:	e3a02000 	mov	r2, #0	; 0x0
c7e0a768:	ea000001 	b	c7e0a774 <mapset+0x10>
	const unsigned char *s;
	for (s=set; *s; s++) map[*s] = code;
c7e0a76c:	e59f3014 	ldr	r3, [pc, #20]	; c7e0a788 <mapset+0x24>
c7e0a770:	e7c3100c 	strb	r1, [r3, ip]
c7e0a774:	e7d0c002 	ldrb	ip, [r0, r2]
c7e0a778:	e2822001 	add	r2, r2, #1	; 0x1
c7e0a77c:	e35c0000 	cmp	ip, #0	; 0x0
c7e0a780:	1afffff9 	bne	c7e0a76c <mapset+0x8>
}
c7e0a784:	e12fff1e 	bx	lr
c7e0a788:	c7e40204 	.word	0xc7e40204

c7e0a78c <syntax_err>:
#endif
#define final_printf debug_printf

#ifdef __U_BOOT__
static void syntax_err(void) {
	 printf("syntax error\n");
c7e0a78c:	e59f0000 	ldr	r0, [pc, #0]	; c7e0a794 <syntax_err+0x8>
c7e0a790:	eafff8b0 	b	c7e08a58 <printf>
c7e0a794:	c7e31ed1 	.word	0xc7e31ed1

c7e0a798 <do_showvar>:
{
	int i, k;
	int rcode = 0;
	struct variables *cur;

	if (argc == 1) {		/* Print all env variables	*/
c7e0a798:	e3520001 	cmp	r2, #1	; 0x1
	return str;
}

#ifdef __U_BOOT__
int do_showvar (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e0a79c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0a7a0:	e1a0b003 	mov	fp, r3
	int i, k;
	int rcode = 0;
	struct variables *cur;

	if (argc == 1) {		/* Print all env variables	*/
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a7a4:	059f30c8 	ldreq	r3, [pc, #200]	; c7e0a874 <do_showvar+0xdc>
	return str;
}

#ifdef __U_BOOT__
int do_showvar (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
c7e0a7a8:	e1a09002 	mov	r9, r2
	int i, k;
	int rcode = 0;
	struct variables *cur;

	if (argc == 1) {		/* Print all env variables	*/
c7e0a7ac:	13a06001 	movne	r6, #1	; 0x1
c7e0a7b0:	13a05000 	movne	r5, #0	; 0x0
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a7b4:	05934100 	ldreq	r4, [r3, #256]
{
	int i, k;
	int rcode = 0;
	struct variables *cur;

	if (argc == 1) {		/* Print all env variables	*/
c7e0a7b8:	1a000029 	bne	c7e0a864 <do_showvar+0xcc>
c7e0a7bc:	ea000005 	b	c7e0a7d8 <do_showvar+0x40>
		for (cur = top_vars; cur; cur = cur->next) {
			printf ("%s=%s\n", cur->name, cur->value);
c7e0a7c0:	e8940006 	ldm	r4, {r1, r2}
c7e0a7c4:	ebfff8a3 	bl	c7e08a58 <printf>
			if (ctrlc ()) {
c7e0a7c8:	ebfff94e 	bl	c7e08d08 <ctrlc>
c7e0a7cc:	e3500000 	cmp	r0, #0	; 0x0
c7e0a7d0:	1a000015 	bne	c7e0a82c <do_showvar+0x94>
	int i, k;
	int rcode = 0;
	struct variables *cur;

	if (argc == 1) {		/* Print all env variables	*/
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a7d4:	e5944010 	ldr	r4, [r4, #16]
c7e0a7d8:	e3540000 	cmp	r4, #0	; 0x0
			printf ("%s=%s\n", cur->name, cur->value);
c7e0a7dc:	e59f0094 	ldr	r0, [pc, #148]	; c7e0a878 <do_showvar+0xe0>
	int i, k;
	int rcode = 0;
	struct variables *cur;

	if (argc == 1) {		/* Print all env variables	*/
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a7e0:	1afffff6 	bne	c7e0a7c0 <do_showvar+0x28>
c7e0a7e4:	e1a05004 	mov	r5, r4
c7e0a7e8:	ea00001f 	b	c7e0a86c <do_showvar+0xd4>
	}
	for (i = 1; i < argc; ++i) {	/* print single env variables	*/
		char *name = argv[i];

		k = -1;
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a7ec:	e59f3080 	ldr	r3, [pc, #128]	; c7e0a874 <do_showvar+0xdc>
			}
		}
		return 0;
	}
	for (i = 1; i < argc; ++i) {	/* print single env variables	*/
		char *name = argv[i];
c7e0a7f0:	e79ba106 	ldr	sl, [fp, r6, lsl #2]

		k = -1;
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a7f4:	e5934100 	ldr	r4, [r3, #256]
c7e0a7f8:	e3e07000 	mvn	r7, #0	; 0x0
c7e0a7fc:	ea00000f 	b	c7e0a840 <do_showvar+0xa8>
			if(strcmp (cur->name, name) == 0) {
c7e0a800:	e5940000 	ldr	r0, [r4]
c7e0a804:	eb006015 	bl	c7e22860 <strcmp>
c7e0a808:	e3500000 	cmp	r0, #0	; 0x0
c7e0a80c:	1a000003 	bne	c7e0a820 <do_showvar+0x88>
				k = 0;
				printf ("%s=%s\n", cur->name, cur->value);
c7e0a810:	e1a07000 	mov	r7, r0
c7e0a814:	e8940006 	ldm	r4, {r1, r2}
c7e0a818:	e59f0058 	ldr	r0, [pc, #88]	; c7e0a878 <do_showvar+0xe0>
c7e0a81c:	ebfff88d 	bl	c7e08a58 <printf>
			}
			if (ctrlc ()) {
c7e0a820:	ebfff938 	bl	c7e08d08 <ctrlc>
c7e0a824:	e3500000 	cmp	r0, #0	; 0x0
c7e0a828:	0a000003 	beq	c7e0a83c <do_showvar+0xa4>
				puts ("\n ** Abort\n");
c7e0a82c:	e59f0048 	ldr	r0, [pc, #72]	; c7e0a87c <do_showvar+0xe4>
c7e0a830:	ebfff86d 	bl	c7e089ec <puts>
c7e0a834:	e3a05001 	mov	r5, #1	; 0x1
c7e0a838:	ea00000b 	b	c7e0a86c <do_showvar+0xd4>
	}
	for (i = 1; i < argc; ++i) {	/* print single env variables	*/
		char *name = argv[i];

		k = -1;
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a83c:	e5944010 	ldr	r4, [r4, #16]
c7e0a840:	e3540000 	cmp	r4, #0	; 0x0
			if(strcmp (cur->name, name) == 0) {
c7e0a844:	e1a0100a 	mov	r1, sl
	}
	for (i = 1; i < argc; ++i) {	/* print single env variables	*/
		char *name = argv[i];

		k = -1;
		for (cur = top_vars; cur; cur = cur->next) {
c7e0a848:	1affffec 	bne	c7e0a800 <do_showvar+0x68>
			if (ctrlc ()) {
				puts ("\n ** Abort\n");
				return 1;
			}
		}
		if (k < 0) {
c7e0a84c:	e3770001 	cmn	r7, #1	; 0x1
c7e0a850:	1a000002 	bne	c7e0a860 <do_showvar+0xc8>
			printf ("## Error: \"%s\" not defined\n", name);
c7e0a854:	e59f0024 	ldr	r0, [pc, #36]	; c7e0a880 <do_showvar+0xe8>
c7e0a858:	ebfff87e 	bl	c7e08a58 <printf>
			rcode ++;
c7e0a85c:	e2855001 	add	r5, r5, #1	; 0x1
				return 1;
			}
		}
		return 0;
	}
	for (i = 1; i < argc; ++i) {	/* print single env variables	*/
c7e0a860:	e2866001 	add	r6, r6, #1	; 0x1
c7e0a864:	e1560009 	cmp	r6, r9
c7e0a868:	baffffdf 	blt	c7e0a7ec <do_showvar+0x54>
			printf ("## Error: \"%s\" not defined\n", name);
			rcode ++;
		}
	}
	return rcode;
}
c7e0a86c:	e1a00005 	mov	r0, r5
c7e0a870:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0a874:	c7e40204 	.word	0xc7e40204
c7e0a878:	c7e31271 	.word	0xc7e31271
c7e0a87c:	c7e31edf 	.word	0xc7e31edf
c7e0a880:	c7e31299 	.word	0xc7e31299

c7e0a884 <u_boot_hush_start>:
	}
}
#endif

int u_boot_hush_start(void)
{
c7e0a884:	e92d4070 	push	{r4, r5, r6, lr}
	if (top_vars == NULL) {
c7e0a888:	e59f5038 	ldr	r5, [pc, #56]	; c7e0a8c8 <u_boot_hush_start+0x44>
c7e0a88c:	e5954100 	ldr	r4, [r5, #256]
c7e0a890:	e3540000 	cmp	r4, #0	; 0x0
c7e0a894:	1a000009 	bne	c7e0a8c0 <u_boot_hush_start+0x3c>
		top_vars = malloc(sizeof(struct variables));
c7e0a898:	e3a00014 	mov	r0, #20	; 0x14
c7e0a89c:	ebfffa3e 	bl	c7e0919c <malloc>
		top_vars->name = "HUSH_VERSION";
		top_vars->value = "0.01";
		top_vars->next = 0;
		top_vars->flg_export = 0;
		top_vars->flg_read_only = 1;
c7e0a8a0:	e3a03001 	mov	r3, #1	; 0x1
c7e0a8a4:	e580300c 	str	r3, [r0, #12]

int u_boot_hush_start(void)
{
	if (top_vars == NULL) {
		top_vars = malloc(sizeof(struct variables));
		top_vars->name = "HUSH_VERSION";
c7e0a8a8:	e59f301c 	ldr	r3, [pc, #28]	; c7e0a8cc <u_boot_hush_start+0x48>
#endif

int u_boot_hush_start(void)
{
	if (top_vars == NULL) {
		top_vars = malloc(sizeof(struct variables));
c7e0a8ac:	e5850100 	str	r0, [r5, #256]
		top_vars->name = "HUSH_VERSION";
c7e0a8b0:	e5803000 	str	r3, [r0]
		top_vars->value = "0.01";
c7e0a8b4:	e59f3014 	ldr	r3, [pc, #20]	; c7e0a8d0 <u_boot_hush_start+0x4c>
		top_vars->next = 0;
		top_vars->flg_export = 0;
c7e0a8b8:	e9800018 	stmib	r0, {r3, r4}
{
	if (top_vars == NULL) {
		top_vars = malloc(sizeof(struct variables));
		top_vars->name = "HUSH_VERSION";
		top_vars->value = "0.01";
		top_vars->next = 0;
c7e0a8bc:	e5804010 	str	r4, [r0, #16]
#ifdef CONFIG_NEEDS_MANUAL_RELOC
		u_boot_hush_reloc();
#endif
	}
	return 0;
}
c7e0a8c0:	e3a00000 	mov	r0, #0	; 0x0
c7e0a8c4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0a8c8:	c7e40204 	.word	0xc7e40204
c7e0a8cc:	c7e31eeb 	.word	0xc7e31eeb
c7e0a8d0:	c7e31ef8 	.word	0xc7e31ef8

c7e0a8d4 <xmalloc>:

static void *xmalloc(size_t size)
{
c7e0a8d4:	e92d4010 	push	{r4, lr}
	void *p = NULL;

	if (!(p = malloc(size))) {
c7e0a8d8:	ebfffa2f 	bl	c7e0919c <malloc>
c7e0a8dc:	e3500000 	cmp	r0, #0	; 0x0
c7e0a8e0:	18bd8010 	popne	{r4, pc}
	    printf("ERROR : memory not allocated\n");
c7e0a8e4:	e59f0004 	ldr	r0, [pc, #4]	; c7e0a8f0 <xmalloc+0x1c>
c7e0a8e8:	ebfff85a 	bl	c7e08a58 <printf>
c7e0a8ec:	eafffffe 	b	c7e0a8ec <xmalloc+0x18>
c7e0a8f0:	c7e31efd 	.word	0xc7e31efd

c7e0a8f4 <new_pipe>:
	}
	return 0;
}
#endif

struct pipe *new_pipe(void) {
c7e0a8f4:	e92d4010 	push	{r4, lr}
	struct pipe *pi;
	pi = xmalloc(sizeof(struct pipe));
c7e0a8f8:	e3a00014 	mov	r0, #20	; 0x14
c7e0a8fc:	ebfffff4 	bl	c7e0a8d4 <xmalloc>
	pi->num_progs = 0;
c7e0a900:	e3a03000 	mov	r3, #0	; 0x0
	pi->progs = NULL;
	pi->next = NULL;
	pi->followup = 0;  /* invalid */
	pi->r_mode = RES_NONE;
c7e0a904:	e5803010 	str	r3, [r0, #16]
#endif

struct pipe *new_pipe(void) {
	struct pipe *pi;
	pi = xmalloc(sizeof(struct pipe));
	pi->num_progs = 0;
c7e0a908:	e5803000 	str	r3, [r0]
	pi->progs = NULL;
c7e0a90c:	e5803004 	str	r3, [r0, #4]
	pi->next = NULL;
c7e0a910:	e5803008 	str	r3, [r0, #8]
	pi->followup = 0;  /* invalid */
c7e0a914:	e580300c 	str	r3, [r0, #12]
	pi->r_mode = RES_NONE;
	return pi;
}
c7e0a918:	e8bd8010 	pop	{r4, pc}

c7e0a91c <file_get>:
{
	int ch;

	ch = 0;
	/* If there is data waiting, eat it up */
	if (i->p && *i->p) {
c7e0a91c:	e5903000 	ldr	r3, [r0]
}

/* This is the magic location that prints prompts
 * and gets data back from the user */
static int file_get(struct in_str *i)
{
c7e0a920:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int ch;

	ch = 0;
	/* If there is data waiting, eat it up */
	if (i->p && *i->p) {
c7e0a924:	e3530000 	cmp	r3, #0	; 0x0
}

/* This is the magic location that prints prompts
 * and gets data back from the user */
static int file_get(struct in_str *i)
{
c7e0a928:	e1a06000 	mov	r6, r0
	int ch;

	ch = 0;
	/* If there is data waiting, eat it up */
	if (i->p && *i->p) {
c7e0a92c:	0a000056 	beq	c7e0aa8c <file_get+0x170>
c7e0a930:	e5d30000 	ldrb	r0, [r3]
c7e0a934:	e3500000 	cmp	r0, #0	; 0x0
		ch = *i->p++;
c7e0a938:	12833001 	addne	r3, r3, #1	; 0x1
{
	int ch;

	ch = 0;
	/* If there is data waiting, eat it up */
	if (i->p && *i->p) {
c7e0a93c:	0a000052 	beq	c7e0aa8c <file_get+0x170>
c7e0a940:	ea000060 	b	c7e0aac8 <file_get+0x1ac>
#	error "This currently only works with CONFIG_RESET_TO_RETRY enabled"
#  endif
	reset_cmd_timeout();
#endif
	i->__promptme = 1;
	if (i->promptmode == 1) {
c7e0a944:	e5963008 	ldr	r3, [r6, #8]
#endif
	if (n == -1 ) {
		flag_repeat = 0;
		i->__promptme = 0;
	}
	n = strlen(console_buffer);
c7e0a948:	e59f4188 	ldr	r4, [pc, #392]	; c7e0aad8 <file_get+0x1bc>
#	error "This currently only works with CONFIG_RESET_TO_RETRY enabled"
#  endif
	reset_cmd_timeout();
#endif
	i->__promptme = 1;
	if (i->promptmode == 1) {
c7e0a94c:	e3530001 	cmp	r3, #1	; 0x1
#  ifndef CONFIG_RESET_TO_RETRY
#	error "This currently only works with CONFIG_RESET_TO_RETRY enabled"
#  endif
	reset_cmd_timeout();
#endif
	i->__promptme = 1;
c7e0a950:	e3a03001 	mov	r3, #1	; 0x1
c7e0a954:	e5863004 	str	r3, [r6, #4]
	if (i->promptmode == 1) {
		n = readline(CONFIG_SYS_PROMPT);
c7e0a958:	059f017c 	ldreq	r0, [pc, #380]	; c7e0aadc <file_get+0x1c0>
	} else {
		n = readline(CONFIG_SYS_PROMPT_HUSH_PS2);
c7e0a95c:	159f017c 	ldrne	r0, [pc, #380]	; c7e0aae0 <file_get+0x1c4>
c7e0a960:	eb000ed4 	bl	c7e0e4b8 <readline>
#  else
#	error "This currently only works with CONFIG_RESET_TO_RETRY enabled"
#  endif
	}
#endif
	if (n == -1 ) {
c7e0a964:	e3700001 	cmn	r0, #1	; 0x1
		flag_repeat = 0;
c7e0a968:	059f3174 	ldreq	r3, [pc, #372]	; c7e0aae4 <file_get+0x1c8>
c7e0a96c:	03a02000 	moveq	r2, #0	; 0x0
c7e0a970:	05832104 	streq	r2, [r3, #260]
		i->__promptme = 0;
	}
	n = strlen(console_buffer);
c7e0a974:	e1a00004 	mov	r0, r4
#  endif
	}
#endif
	if (n == -1 ) {
		flag_repeat = 0;
		i->__promptme = 0;
c7e0a978:	05862004 	streq	r2, [r6, #4]
	}
	n = strlen(console_buffer);
c7e0a97c:	eb005fed 	bl	c7e22938 <strlen>
	console_buffer[n] = '\n';
c7e0a980:	e3a0300a 	mov	r3, #10	; 0xa
c7e0a984:	e7e43000 	strb	r3, [r4, r0]!
	console_buffer[n+1]= '\0';
c7e0a988:	e3a05000 	mov	r5, #0	; 0x0
c7e0a98c:	e5c45001 	strb	r5, [r4, #1]
	if (had_ctrlc()) flag_repeat = 0;
c7e0a990:	ebfff7d7 	bl	c7e088f4 <had_ctrlc>
c7e0a994:	e1500005 	cmp	r0, r5
c7e0a998:	159f3144 	ldrne	r3, [pc, #324]	; c7e0aae4 <file_get+0x1c8>
	clear_ctrlc();
	do_repeat = 0;
c7e0a99c:	e3a09000 	mov	r9, #0	; 0x0
		i->__promptme = 0;
	}
	n = strlen(console_buffer);
	console_buffer[n] = '\n';
	console_buffer[n+1]= '\0';
	if (had_ctrlc()) flag_repeat = 0;
c7e0a9a0:	15835104 	strne	r5, [r3, #260]
	clear_ctrlc();
c7e0a9a4:	ebfff7d6 	bl	c7e08904 <clear_ctrlc>
	do_repeat = 0;
	if (i->promptmode == 1) {
c7e0a9a8:	e5964008 	ldr	r4, [r6, #8]
	n = strlen(console_buffer);
	console_buffer[n] = '\n';
	console_buffer[n+1]= '\0';
	if (had_ctrlc()) flag_repeat = 0;
	clear_ctrlc();
	do_repeat = 0;
c7e0a9ac:	e59f5130 	ldr	r5, [pc, #304]	; c7e0aae4 <file_get+0x1c8>
	if (i->promptmode == 1) {
c7e0a9b0:	e3540001 	cmp	r4, #1	; 0x1
	n = strlen(console_buffer);
	console_buffer[n] = '\n';
	console_buffer[n+1]= '\0';
	if (had_ctrlc()) flag_repeat = 0;
	clear_ctrlc();
	do_repeat = 0;
c7e0a9b4:	e5859108 	str	r9, [r5, #264]
c7e0a9b8:	e59fa118 	ldr	sl, [pc, #280]	; c7e0aad8 <file_get+0x1bc>
	if (i->promptmode == 1) {
c7e0a9bc:	1a000010 	bne	c7e0aa04 <file_get+0xe8>
		if (console_buffer[0] == '\n'&& flag_repeat == 0) {
c7e0a9c0:	e5da3000 	ldrb	r3, [sl]
c7e0a9c4:	e353000a 	cmp	r3, #10	; 0xa
c7e0a9c8:	1a000007 	bne	c7e0a9ec <file_get+0xd0>
c7e0a9cc:	e5953104 	ldr	r3, [r5, #260]
c7e0a9d0:	e1530009 	cmp	r3, r9
			if (console_buffer[0] != '\n') {
				strcpy(the_command,console_buffer);
				flag_repeat = 1;
			}
			else {
				do_repeat = 1;
c7e0a9d4:	15854108 	strne	r4, [r5, #264]
	console_buffer[n+1]= '\0';
	if (had_ctrlc()) flag_repeat = 0;
	clear_ctrlc();
	do_repeat = 0;
	if (i->promptmode == 1) {
		if (console_buffer[0] == '\n'&& flag_repeat == 0) {
c7e0a9d8:	1a000007 	bne	c7e0a9fc <file_get+0xe0>
			strcpy(the_command,console_buffer);
c7e0a9dc:	e2850f43 	add	r0, r5, #268	; 0x10c
c7e0a9e0:	e1a0100a 	mov	r1, sl
c7e0a9e4:	eb005f66 	bl	c7e22784 <strcpy>
c7e0a9e8:	ea000003 	b	c7e0a9fc <file_get+0xe0>
		}
		else {
			if (console_buffer[0] != '\n') {
				strcpy(the_command,console_buffer);
c7e0a9ec:	e1a0100a 	mov	r1, sl
c7e0a9f0:	e2850f43 	add	r0, r5, #268	; 0x10c
c7e0a9f4:	eb005f62 	bl	c7e22784 <strcpy>
				flag_repeat = 1;
c7e0a9f8:	e5854104 	str	r4, [r5, #260]
			}
			else {
				do_repeat = 1;
			}
		}
		i->p = the_command;
c7e0a9fc:	e59f30e4 	ldr	r3, [pc, #228]	; c7e0aae8 <file_get+0x1cc>
c7e0aa00:	ea000020 	b	c7e0aa88 <file_get+0x16c>
	}
	else {
		if (console_buffer[0] != '\n') {
c7e0aa04:	e5da3000 	ldrb	r3, [sl]
c7e0aa08:	e353000a 	cmp	r3, #10	; 0xa
c7e0aa0c:	0a000016 	beq	c7e0aa6c <file_get+0x150>
			if (strlen(the_command) + strlen(console_buffer)
c7e0aa10:	e2857f43 	add	r7, r5, #268	; 0x10c
c7e0aa14:	e1a00007 	mov	r0, r7
c7e0aa18:	eb005fc6 	bl	c7e22938 <strlen>
c7e0aa1c:	e1a04000 	mov	r4, r0
c7e0aa20:	e1a0000a 	mov	r0, sl
c7e0aa24:	eb005fc3 	bl	c7e22938 <strlen>
c7e0aa28:	e0800004 	add	r0, r0, r4
c7e0aa2c:	e35000ff 	cmp	r0, #255	; 0xff
c7e0aa30:	8a000009 	bhi	c7e0aa5c <file_get+0x140>
			    < CONFIG_SYS_CBSIZE) {
				n = strlen(the_command);
c7e0aa34:	e1a00007 	mov	r0, r7
c7e0aa38:	eb005fbe 	bl	c7e22938 <strlen>
c7e0aa3c:	e1a03000 	mov	r3, r0
				the_command[n-1] = ' ';
c7e0aa40:	e0853003 	add	r3, r5, r3
c7e0aa44:	e3a02020 	mov	r2, #32	; 0x20
				strcpy(&the_command[n],console_buffer);
c7e0aa48:	e0870000 	add	r0, r7, r0
c7e0aa4c:	e1a0100a 	mov	r1, sl
	else {
		if (console_buffer[0] != '\n') {
			if (strlen(the_command) + strlen(console_buffer)
			    < CONFIG_SYS_CBSIZE) {
				n = strlen(the_command);
				the_command[n-1] = ' ';
c7e0aa50:	e5c3210b 	strb	r2, [r3, #267]
				strcpy(&the_command[n],console_buffer);
c7e0aa54:	eb005f4a 	bl	c7e22784 <strcpy>
c7e0aa58:	ea000003 	b	c7e0aa6c <file_get+0x150>
			}
			else {
				the_command[0] = '\n';
c7e0aa5c:	e3a0300a 	mov	r3, #10	; 0xa
				the_command[1] = '\0';
				flag_repeat = 0;
c7e0aa60:	e5859104 	str	r9, [r5, #260]
				n = strlen(the_command);
				the_command[n-1] = ' ';
				strcpy(&the_command[n],console_buffer);
			}
			else {
				the_command[0] = '\n';
c7e0aa64:	e5c5310c 	strb	r3, [r5, #268]
				the_command[1] = '\0';
c7e0aa68:	e5c5910d 	strb	r9, [r5, #269]
				flag_repeat = 0;
			}
		}
		if (i->__promptme == 0) {
c7e0aa6c:	e5963004 	ldr	r3, [r6, #4]
c7e0aa70:	e3530000 	cmp	r3, #0	; 0x0
			the_command[0] = '\n';
c7e0aa74:	059f2068 	ldreq	r2, [pc, #104]	; c7e0aae4 <file_get+0x1c8>
			the_command[1] = '\0';
c7e0aa78:	05c2310d 	strbeq	r3, [r2, #269]
				the_command[1] = '\0';
				flag_repeat = 0;
			}
		}
		if (i->__promptme == 0) {
			the_command[0] = '\n';
c7e0aa7c:	0283300a 	addeq	r3, r3, #10	; 0xa
c7e0aa80:	05c2310c 	strbeq	r3, [r2, #268]
			the_command[1] = '\0';
		}
		i->p = console_buffer;
c7e0aa84:	e59f304c 	ldr	r3, [pc, #76]	; c7e0aad8 <file_get+0x1bc>
c7e0aa88:	e5863000 	str	r3, [r6]
		 * more complicated by now, like sourcing or substituting. */
#ifndef __U_BOOT__
		if (i->__promptme && interactive && i->file == stdin) {
			while(! i->p || (interactive && strlen(i->p)==0) ) {
#else
			while(! i->p  || strlen(i->p)==0 ) {
c7e0aa8c:	e5960000 	ldr	r0, [r6]
c7e0aa90:	e3500000 	cmp	r0, #0	; 0x0
c7e0aa94:	0affffaa 	beq	c7e0a944 <file_get+0x28>
c7e0aa98:	eb005fa6 	bl	c7e22938 <strlen>
c7e0aa9c:	e3500000 	cmp	r0, #0	; 0x0
c7e0aaa0:	0affffa7 	beq	c7e0a944 <file_get+0x28>
			}
			i->promptmode=2;
#ifndef __U_BOOT__
			i->__promptme = 0;
#endif
			if (i->p && *i->p) {
c7e0aaa4:	e5962000 	ldr	r2, [r6]
#else
			while(! i->p  || strlen(i->p)==0 ) {
#endif
				get_user_input(i);
			}
			i->promptmode=2;
c7e0aaa8:	e3a03002 	mov	r3, #2	; 0x2
#ifndef __U_BOOT__
			i->__promptme = 0;
#endif
			if (i->p && *i->p) {
c7e0aaac:	e3520000 	cmp	r2, #0	; 0x0
#else
			while(! i->p  || strlen(i->p)==0 ) {
#endif
				get_user_input(i);
			}
			i->promptmode=2;
c7e0aab0:	e5863008 	str	r3, [r6, #8]
#ifndef __U_BOOT__
			i->__promptme = 0;
#endif
			if (i->p && *i->p) {
c7e0aab4:	0a000005 	beq	c7e0aad0 <file_get+0x1b4>
c7e0aab8:	e5d20000 	ldrb	r0, [r2]
c7e0aabc:	e3500000 	cmp	r0, #0	; 0x0
c7e0aac0:	0a000002 	beq	c7e0aad0 <file_get+0x1b4>
				ch = *i->p++;
c7e0aac4:	e2823001 	add	r3, r2, #1	; 0x1
c7e0aac8:	e5863000 	str	r3, [r6]
c7e0aacc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e0aad0:	e3a00000 	mov	r0, #0	; 0x0
	}
#ifndef __U_BOOT__
	if (ch == '\n') i->__promptme=1;
#endif
	return ch;
}
c7e0aad4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e0aad8:	c7e418bc 	.word	0xc7e418bc
c7e0aadc:	c7e31f1b 	.word	0xc7e31f1b
c7e0aae0:	c7e34402 	.word	0xc7e34402
c7e0aae4:	c7e40204 	.word	0xc7e40204
c7e0aae8:	c7e40310 	.word	0xc7e40310

c7e0aaec <free_pipe_list>:
	pi->progs=NULL;
	return ret_code;
}

static int free_pipe_list(struct pipe *head, int indent)
{
c7e0aaec:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0aaf0:	e1a0b001 	mov	fp, r1
c7e0aaf4:	e1a06000 	mov	r6, r0
c7e0aaf8:	e3a0a000 	mov	sl, #0	; 0x0
c7e0aafc:	ea00002c 	b	c7e0abb4 <free_pipe_list+0xc8>
	if (pi->stopped_progs > 0)
		return ret_code;
	final_printf("%s run pipe: (pid %d)\n",ind,getpid());
#endif
	for (i=0; i<pi->num_progs; i++) {
		child = &pi->progs[i];
c7e0ab00:	e5963004 	ldr	r3, [r6, #4]
		final_printf("%s  command %d:\n",ind,i);
		if (child->argv) {
c7e0ab04:	e7931007 	ldr	r1, [r3, r7]
	if (pi->stopped_progs > 0)
		return ret_code;
	final_printf("%s run pipe: (pid %d)\n",ind,getpid());
#endif
	for (i=0; i<pi->num_progs; i++) {
		child = &pi->progs[i];
c7e0ab08:	e0835007 	add	r5, r3, r7
		final_printf("%s  command %d:\n",ind,i);
		if (child->argv) {
c7e0ab0c:	e3510000 	cmp	r1, #0	; 0x0
c7e0ab10:	0a000013 	beq	c7e0ab64 <free_pipe_list+0x78>
c7e0ab14:	e3a03000 	mov	r3, #0	; 0x0
			for (a=0,p=child->argv; *p; a++,p++) {
c7e0ab18:	e7912003 	ldr	r2, [r1, r3]
c7e0ab1c:	e2833004 	add	r3, r3, #4	; 0x4
c7e0ab20:	e3520000 	cmp	r2, #0	; 0x0
c7e0ab24:	1afffffb 	bne	c7e0ab18 <free_pipe_list+0x2c>
c7e0ab28:	e1a04002 	mov	r4, r2
c7e0ab2c:	ea000003 	b	c7e0ab40 <free_pipe_list+0x54>
			}
#ifndef __U_BOOT__
			globfree(&child->glob_result);
#else
			for (a = 0; a < child->argc; a++) {
				free(child->argv[a]);
c7e0ab30:	e5953000 	ldr	r3, [r5]
c7e0ab34:	e7930104 	ldr	r0, [r3, r4, lsl #2]
c7e0ab38:	ebfff908 	bl	c7e08f60 <free>
				final_printf("%s   argv[%d] = %s\n",ind,a,*p);
			}
#ifndef __U_BOOT__
			globfree(&child->glob_result);
#else
			for (a = 0; a < child->argc; a++) {
c7e0ab3c:	e2844001 	add	r4, r4, #1	; 0x1
c7e0ab40:	e5953004 	ldr	r3, [r5, #4]
c7e0ab44:	e1540003 	cmp	r4, r3
c7e0ab48:	bafffff8 	blt	c7e0ab30 <free_pipe_list+0x44>
				free(child->argv[a]);
			}
					free(child->argv);
c7e0ab4c:	e5950000 	ldr	r0, [r5]
c7e0ab50:	ebfff902 	bl	c7e08f60 <free>
			child->argc = 0;
c7e0ab54:	e3a03000 	mov	r3, #0	; 0x0
#endif
			child->argv=NULL;
c7e0ab58:	e5853000 	str	r3, [r5]
#else
			for (a = 0; a < child->argc; a++) {
				free(child->argv[a]);
			}
					free(child->argv);
			child->argc = 0;
c7e0ab5c:	e5853004 	str	r3, [r5, #4]
c7e0ab60:	ea000005 	b	c7e0ab7c <free_pipe_list+0x90>
#endif
			child->argv=NULL;
		} else if (child->group) {
c7e0ab64:	e5950008 	ldr	r0, [r5, #8]
c7e0ab68:	e3500000 	cmp	r0, #0	; 0x0
c7e0ab6c:	0a000002 	beq	c7e0ab7c <free_pipe_list+0x90>
#ifndef __U_BOOT__
			final_printf("%s   begin group (subshell:%d)\n",ind, child->subshell);
#endif
			ret_code = free_pipe_list(child->group,indent+3);
c7e0ab70:	e28b1003 	add	r1, fp, #3	; 0x3
c7e0ab74:	ebffffdc 	bl	c7e0aaec <free_pipe_list>
c7e0ab78:	e1a0a000 	mov	sl, r0
#ifndef __U_BOOT__
	if (pi->stopped_progs > 0)
		return ret_code;
	final_printf("%s run pipe: (pid %d)\n",ind,getpid());
#endif
	for (i=0; i<pi->num_progs; i++) {
c7e0ab7c:	e2899001 	add	r9, r9, #1	; 0x1
c7e0ab80:	e2877014 	add	r7, r7, #20	; 0x14
c7e0ab84:	e5963000 	ldr	r3, [r6]
c7e0ab88:	e1590003 	cmp	r9, r3
c7e0ab8c:	baffffdb 	blt	c7e0ab00 <free_pipe_list+0x14>
			free(r);
		}
		child->redirects=NULL;
#endif
	}
	free(pi->progs);   /* children are an array, they get freed all at once */
c7e0ab90:	e5960004 	ldr	r0, [r6, #4]
c7e0ab94:	ebfff8f1 	bl	c7e08f60 <free>
	pi->progs=NULL;
c7e0ab98:	e3a03000 	mov	r3, #0	; 0x0
	char *ind = indenter(indent);
	for (pi=head; pi; pi=next) {
		final_printf("%s pipe reserved mode %d\n", ind, pi->r_mode);
		rcode = free_pipe(pi, indent);
		final_printf("%s pipe followup code %d\n", ind, pi->followup);
		next=pi->next;
c7e0ab9c:	e5964008 	ldr	r4, [r6, #8]
		}
		child->redirects=NULL;
#endif
	}
	free(pi->progs);   /* children are an array, they get freed all at once */
	pi->progs=NULL;
c7e0aba0:	e5863004 	str	r3, [r6, #4]
		final_printf("%s pipe reserved mode %d\n", ind, pi->r_mode);
		rcode = free_pipe(pi, indent);
		final_printf("%s pipe followup code %d\n", ind, pi->followup);
		next=pi->next;
		pi->next=NULL;
		free(pi);
c7e0aba4:	e1a00006 	mov	r0, r6
	for (pi=head; pi; pi=next) {
		final_printf("%s pipe reserved mode %d\n", ind, pi->r_mode);
		rcode = free_pipe(pi, indent);
		final_printf("%s pipe followup code %d\n", ind, pi->followup);
		next=pi->next;
		pi->next=NULL;
c7e0aba8:	e5863008 	str	r3, [r6, #8]
		free(pi);
c7e0abac:	ebfff8eb 	bl	c7e08f60 <free>
c7e0abb0:	e1a06004 	mov	r6, r4
static int free_pipe_list(struct pipe *head, int indent)
{
	int rcode=0;   /* if list has no members */
	struct pipe *pi, *next;
	char *ind = indenter(indent);
	for (pi=head; pi; pi=next) {
c7e0abb4:	e3560000 	cmp	r6, #0	; 0x0
c7e0abb8:	13a0a000 	movne	sl, #0	; 0x0
c7e0abbc:	11a0900a 	movne	r9, sl
c7e0abc0:	11a0700a 	movne	r7, sl
c7e0abc4:	1affffee 	bne	c7e0ab84 <free_pipe_list+0x98>
		next=pi->next;
		pi->next=NULL;
		free(pi);
	}
	return rcode;
}
c7e0abc8:	e1a0000a 	mov	r0, sl
c7e0abcc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e0abd0 <b_free>:
	o->nonnull = 0;
	if (o->data != NULL) *o->data = '\0';
}

static void b_free(o_string *o)
{
c7e0abd0:	e92d4010 	push	{r4, lr}
c7e0abd4:	e1a04000 	mov	r4, r0
	b_reset(o);
c7e0abd8:	ebfffea7 	bl	c7e0a67c <b_reset>
	free(o->data);
c7e0abdc:	e5940000 	ldr	r0, [r4]
c7e0abe0:	ebfff8de 	bl	c7e08f60 <free>
	o->data = NULL;
c7e0abe4:	e3a03000 	mov	r3, #0	; 0x0
	o->maxlen = 0;
c7e0abe8:	e5843008 	str	r3, [r4, #8]

static void b_free(o_string *o)
{
	b_reset(o);
	free(o->data);
	o->data = NULL;
c7e0abec:	e5843000 	str	r3, [r4]
	o->maxlen = 0;
}
c7e0abf0:	e8bd8010 	pop	{r4, pc}

c7e0abf4 <unset_local_var>:
#endif
	return result;
}

void unset_local_var(const char *name)
{
c7e0abf4:	e92d4070 	push	{r4, r5, r6, lr}
	struct variables *cur;

	if (name) {
c7e0abf8:	e2506000 	subs	r6, r0, #0	; 0x0
		for (cur = top_vars; cur; cur=cur->next) {
c7e0abfc:	159f3084 	ldrne	r3, [pc, #132]	; c7e0ac88 <unset_local_var+0x94>
c7e0ac00:	15934100 	ldrne	r4, [r3, #256]

void unset_local_var(const char *name)
{
	struct variables *cur;

	if (name) {
c7e0ac04:	1a000005 	bne	c7e0ac20 <unset_local_var+0x2c>
c7e0ac08:	e8bd8070 	pop	{r4, r5, r6, pc}
		for (cur = top_vars; cur; cur=cur->next) {
			if(strcmp(cur->name, name)==0)
c7e0ac0c:	e5940000 	ldr	r0, [r4]
c7e0ac10:	eb005f12 	bl	c7e22860 <strcmp>
c7e0ac14:	e3500000 	cmp	r0, #0	; 0x0
c7e0ac18:	0a000004 	beq	c7e0ac30 <unset_local_var+0x3c>
void unset_local_var(const char *name)
{
	struct variables *cur;

	if (name) {
		for (cur = top_vars; cur; cur=cur->next) {
c7e0ac1c:	e5944010 	ldr	r4, [r4, #16]
c7e0ac20:	e3540000 	cmp	r4, #0	; 0x0
			if(strcmp(cur->name, name)==0)
c7e0ac24:	e1a01006 	mov	r1, r6
void unset_local_var(const char *name)
{
	struct variables *cur;

	if (name) {
		for (cur = top_vars; cur; cur=cur->next) {
c7e0ac28:	1afffff7 	bne	c7e0ac0c <unset_local_var+0x18>
c7e0ac2c:	e8bd8070 	pop	{r4, r5, r6, pc}
			if(strcmp(cur->name, name)==0)
				break;
		}
		if(cur!=0) {
			struct variables *next = top_vars;
			if(cur->flg_read_only) {
c7e0ac30:	e594300c 	ldr	r3, [r4, #12]
c7e0ac34:	e3530000 	cmp	r3, #0	; 0x0
		for (cur = top_vars; cur; cur=cur->next) {
			if(strcmp(cur->name, name)==0)
				break;
		}
		if(cur!=0) {
			struct variables *next = top_vars;
c7e0ac38:	e59f3048 	ldr	r3, [pc, #72]	; c7e0ac88 <unset_local_var+0x94>
c7e0ac3c:	e5935100 	ldr	r5, [r3, #256]
			if(cur->flg_read_only) {
c7e0ac40:	0a000003 	beq	c7e0ac54 <unset_local_var+0x60>
				error_msg("%s: readonly variable", name);
c7e0ac44:	e59f0040 	ldr	r0, [pc, #64]	; c7e0ac8c <unset_local_var+0x98>
c7e0ac48:	e1a01006 	mov	r1, r6
				next->next = cur->next;
			}
			free(cur);
		}
	}
}
c7e0ac4c:	e8bd4070 	pop	{r4, r5, r6, lr}
				break;
		}
		if(cur!=0) {
			struct variables *next = top_vars;
			if(cur->flg_read_only) {
				error_msg("%s: readonly variable", name);
c7e0ac50:	eafff780 	b	c7e08a58 <printf>
			} else {
#ifndef __U_BOOT__
				if(cur->flg_export)
					unsetenv(cur->name);
#endif
				free(cur->name);
c7e0ac54:	e5940000 	ldr	r0, [r4]
c7e0ac58:	ebfff8c0 	bl	c7e08f60 <free>
				free(cur->value);
c7e0ac5c:	e5940004 	ldr	r0, [r4, #4]
c7e0ac60:	ebfff8be 	bl	c7e08f60 <free>
				while (next->next != cur)
c7e0ac64:	e1a02005 	mov	r2, r5
c7e0ac68:	e5955010 	ldr	r5, [r5, #16]
c7e0ac6c:	e1550004 	cmp	r5, r4
c7e0ac70:	1afffffb 	bne	c7e0ac64 <unset_local_var+0x70>
					next = next->next;
				next->next = cur->next;
c7e0ac74:	e5953010 	ldr	r3, [r5, #16]
			}
			free(cur);
c7e0ac78:	e1a00005 	mov	r0, r5
#endif
				free(cur->name);
				free(cur->value);
				while (next->next != cur)
					next = next->next;
				next->next = cur->next;
c7e0ac7c:	e5823010 	str	r3, [r2, #16]
			}
			free(cur);
		}
	}
}
c7e0ac80:	e8bd4070 	pop	{r4, r5, r6, lr}
				free(cur->value);
				while (next->next != cur)
					next = next->next;
				next->next = cur->next;
			}
			free(cur);
c7e0ac84:	eafff8b5 	b	c7e08f60 <free>
c7e0ac88:	c7e40204 	.word	0xc7e40204
c7e0ac8c:	c7e31f27 	.word	0xc7e31f27

c7e0ac90 <xrealloc>:
	}
	return p;
}

static void *xrealloc(void *ptr, size_t size)
{
c7e0ac90:	e92d4010 	push	{r4, lr}
	void *p = NULL;

	if (!(p = realloc(ptr, size))) {
c7e0ac94:	ebfffb52 	bl	c7e099e4 <realloc>
c7e0ac98:	e3500000 	cmp	r0, #0	; 0x0
c7e0ac9c:	18bd8010 	popne	{r4, pc}
	    printf("ERROR : memory not allocated\n");
c7e0aca0:	e59f0004 	ldr	r0, [pc, #4]	; c7e0acac <xrealloc+0x1c>
c7e0aca4:	ebfff76b 	bl	c7e08a58 <printf>
c7e0aca8:	eafffffe 	b	c7e0aca8 <xrealloc+0x18>
c7e0acac:	c7e31efd 	.word	0xc7e31efd

c7e0acb0 <done_command>:
	 * advance the pipe counter and make a new, null child.
	 * Only real trickiness here is that the uncommitted
	 * child structure, to which ctx->child points, is not
	 * counted in pi->num_progs. */
	struct pipe *pi=ctx->pipe;
	struct child_prog *prog=ctx->child;
c7e0acb0:	e5902000 	ldr	r2, [r0]
}

/* The only possible error here is out of memory, in which case
 * xmalloc exits. */
static int done_command(struct p_context *ctx)
{
c7e0acb4:	e92d4070 	push	{r4, r5, r6, lr}
	 * child structure, to which ctx->child points, is not
	 * counted in pi->num_progs. */
	struct pipe *pi=ctx->pipe;
	struct child_prog *prog=ctx->child;

	if (prog && prog->group == NULL
c7e0acb8:	e3520000 	cmp	r2, #0	; 0x0
}

/* The only possible error here is out of memory, in which case
 * xmalloc exits. */
static int done_command(struct p_context *ctx)
{
c7e0acbc:	e1a06000 	mov	r6, r0
	/* The child is really already in the pipe structure, so
	 * advance the pipe counter and make a new, null child.
	 * Only real trickiness here is that the uncommitted
	 * child structure, to which ctx->child points, is not
	 * counted in pi->num_progs. */
	struct pipe *pi=ctx->pipe;
c7e0acc0:	e5905008 	ldr	r5, [r0, #8]
	struct child_prog *prog=ctx->child;

	if (prog && prog->group == NULL
c7e0acc4:	0a000008 	beq	c7e0acec <done_command+0x3c>
c7e0acc8:	e5923008 	ldr	r3, [r2, #8]
c7e0accc:	e3530000 	cmp	r3, #0	; 0x0
c7e0acd0:	1a000002 	bne	c7e0ace0 <done_command+0x30>
c7e0acd4:	e5923000 	ldr	r3, [r2]
c7e0acd8:	e3530000 	cmp	r3, #0	; 0x0
c7e0acdc:	0a000013 	beq	c7e0ad30 <done_command+0x80>
										) {
#endif
		debug_printf("done_command: skipping null command\n");
		return 0;
	} else if (prog) {
		pi->num_progs++;
c7e0ace0:	e5953000 	ldr	r3, [r5]
c7e0ace4:	e2833001 	add	r3, r3, #1	; 0x1
c7e0ace8:	e5853000 	str	r3, [r5]
		debug_printf("done_command: num_progs incremented to %d\n",pi->num_progs);
	} else {
		debug_printf("done_command: initializing\n");
	}
	pi->progs = xrealloc(pi->progs, sizeof(*pi->progs) * (pi->num_progs+1));
c7e0acec:	e5953000 	ldr	r3, [r5]
c7e0acf0:	e3a04014 	mov	r4, #20	; 0x14
c7e0acf4:	e2833001 	add	r3, r3, #1	; 0x1
c7e0acf8:	e0010394 	mul	r1, r4, r3
c7e0acfc:	e5950004 	ldr	r0, [r5, #4]
c7e0ad00:	ebffffe2 	bl	c7e0ac90 <xrealloc>

	prog = pi->progs + pi->num_progs;
c7e0ad04:	e5953000 	ldr	r3, [r5]
#ifndef __U_BOOT__
	prog->redirects = NULL;
#endif
	prog->argv = NULL;
c7e0ad08:	e3a02000 	mov	r2, #0	; 0x0
	} else {
		debug_printf("done_command: initializing\n");
	}
	pi->progs = xrealloc(pi->progs, sizeof(*pi->progs) * (pi->num_progs+1));

	prog = pi->progs + pi->num_progs;
c7e0ad0c:	e00c0394 	mul	ip, r4, r3
c7e0ad10:	e080300c 	add	r3, r0, ip
	prog->group = NULL;
#ifndef __U_BOOT__
	prog->glob_result.gl_pathv = NULL;
	prog->family = pi;
#endif
	prog->sp = 0;
c7e0ad14:	e583200c 	str	r2, [r3, #12]
	ctx->child = prog;
	prog->type = ctx->type;
c7e0ad18:	e5961018 	ldr	r1, [r6, #24]
		pi->num_progs++;
		debug_printf("done_command: num_progs incremented to %d\n",pi->num_progs);
	} else {
		debug_printf("done_command: initializing\n");
	}
	pi->progs = xrealloc(pi->progs, sizeof(*pi->progs) * (pi->num_progs+1));
c7e0ad1c:	e5850004 	str	r0, [r5, #4]

	prog = pi->progs + pi->num_progs;
#ifndef __U_BOOT__
	prog->redirects = NULL;
#endif
	prog->argv = NULL;
c7e0ad20:	e780200c 	str	r2, [r0, ip]
	prog->glob_result.gl_pathv = NULL;
	prog->family = pi;
#endif
	prog->sp = 0;
	ctx->child = prog;
	prog->type = ctx->type;
c7e0ad24:	e5831010 	str	r1, [r3, #16]
#endif
	prog->argv = NULL;
#ifndef __U_BOOT__
	prog->is_stopped = 0;
#endif
	prog->group = NULL;
c7e0ad28:	e5832008 	str	r2, [r3, #8]
#ifndef __U_BOOT__
	prog->glob_result.gl_pathv = NULL;
	prog->family = pi;
#endif
	prog->sp = 0;
	ctx->child = prog;
c7e0ad2c:	e5863000 	str	r3, [r6]
	prog->type = ctx->type;

	/* but ctx->pipe and ctx->list_head remain unchanged */
	return 0;
}
c7e0ad30:	e3a00000 	mov	r0, #0	; 0x0
c7e0ad34:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0ad38 <initialize_context>:
	pi->r_mode = RES_NONE;
	return pi;
}

static void initialize_context(struct p_context *ctx)
{
c7e0ad38:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->pipe=NULL;
c7e0ad3c:	e3a05000 	mov	r5, #0	; 0x0
c7e0ad40:	e5805008 	str	r5, [r0, #8]
#ifndef __U_BOOT__
	ctx->pending_redirect=NULL;
#endif
	ctx->child=NULL;
c7e0ad44:	e5805000 	str	r5, [r0]
	pi->r_mode = RES_NONE;
	return pi;
}

static void initialize_context(struct p_context *ctx)
{
c7e0ad48:	e1a04000 	mov	r4, r0
	ctx->pipe=NULL;
#ifndef __U_BOOT__
	ctx->pending_redirect=NULL;
#endif
	ctx->child=NULL;
	ctx->list_head=new_pipe();
c7e0ad4c:	ebfffee8 	bl	c7e0a8f4 <new_pipe>
	ctx->pipe=ctx->list_head;
c7e0ad50:	e5840008 	str	r0, [r4, #8]
	ctx->pipe=NULL;
#ifndef __U_BOOT__
	ctx->pending_redirect=NULL;
#endif
	ctx->child=NULL;
	ctx->list_head=new_pipe();
c7e0ad54:	e5840004 	str	r0, [r4, #4]
	ctx->w=RES_NONE;
	ctx->stack=NULL;
#ifdef __U_BOOT__
	ctx->old_flag=0;
#endif
	done_command(ctx);   /* creates the memory for working child */
c7e0ad58:	e1a00004 	mov	r0, r4
	ctx->list_head=new_pipe();
	ctx->pipe=ctx->list_head;
	ctx->w=RES_NONE;
	ctx->stack=NULL;
#ifdef __U_BOOT__
	ctx->old_flag=0;
c7e0ad5c:	e5845010 	str	r5, [r4, #16]
	ctx->pending_redirect=NULL;
#endif
	ctx->child=NULL;
	ctx->list_head=new_pipe();
	ctx->pipe=ctx->list_head;
	ctx->w=RES_NONE;
c7e0ad60:	e584500c 	str	r5, [r4, #12]
	ctx->stack=NULL;
c7e0ad64:	e5845014 	str	r5, [r4, #20]
#ifdef __U_BOOT__
	ctx->old_flag=0;
#endif
	done_command(ctx);   /* creates the memory for working child */
}
c7e0ad68:	e8bd4070 	pop	{r4, r5, r6, lr}
	ctx->w=RES_NONE;
	ctx->stack=NULL;
#ifdef __U_BOOT__
	ctx->old_flag=0;
#endif
	done_command(ctx);   /* creates the memory for working child */
c7e0ad6c:	eaffffcf 	b	c7e0acb0 <done_command>

c7e0ad70 <done_pipe>:
	/* but ctx->pipe and ctx->list_head remain unchanged */
	return 0;
}

static int done_pipe(struct p_context *ctx, pipe_style type)
{
c7e0ad70:	e92d4070 	push	{r4, r5, r6, lr}
c7e0ad74:	e1a04000 	mov	r4, r0
c7e0ad78:	e1a05001 	mov	r5, r1
	struct pipe *new_p;
	done_command(ctx);  /* implicit closure of previous command */
c7e0ad7c:	ebffffcb 	bl	c7e0acb0 <done_command>
	debug_printf("done_pipe, type %d\n", type);
	ctx->pipe->followup = type;
c7e0ad80:	e5943008 	ldr	r3, [r4, #8]
	ctx->pipe->r_mode = ctx->w;
c7e0ad84:	e594200c 	ldr	r2, [r4, #12]
static int done_pipe(struct p_context *ctx, pipe_style type)
{
	struct pipe *new_p;
	done_command(ctx);  /* implicit closure of previous command */
	debug_printf("done_pipe, type %d\n", type);
	ctx->pipe->followup = type;
c7e0ad88:	e583500c 	str	r5, [r3, #12]
	ctx->pipe->r_mode = ctx->w;
c7e0ad8c:	e5832010 	str	r2, [r3, #16]
	new_p=new_pipe();
c7e0ad90:	ebfffed7 	bl	c7e0a8f4 <new_pipe>
	ctx->pipe->next = new_p;
c7e0ad94:	e5943008 	ldr	r3, [r4, #8]
	ctx->pipe = new_p;
	ctx->child = NULL;
c7e0ad98:	e3a05000 	mov	r5, #0	; 0x0
	done_command(ctx);  /* implicit closure of previous command */
	debug_printf("done_pipe, type %d\n", type);
	ctx->pipe->followup = type;
	ctx->pipe->r_mode = ctx->w;
	new_p=new_pipe();
	ctx->pipe->next = new_p;
c7e0ad9c:	e5830008 	str	r0, [r3, #8]
	ctx->pipe = new_p;
	ctx->child = NULL;
c7e0ada0:	e5845000 	str	r5, [r4]
	debug_printf("done_pipe, type %d\n", type);
	ctx->pipe->followup = type;
	ctx->pipe->r_mode = ctx->w;
	new_p=new_pipe();
	ctx->pipe->next = new_p;
	ctx->pipe = new_p;
c7e0ada4:	e5840008 	str	r0, [r4, #8]
	ctx->child = NULL;
	done_command(ctx);  /* set up new pipe to accept commands */
c7e0ada8:	e1a00004 	mov	r0, r4
c7e0adac:	ebffffbf 	bl	c7e0acb0 <done_command>
	return 0;
}
c7e0adb0:	e1a00005 	mov	r0, r5
c7e0adb4:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0adb8 <reserved_word>:
	{ "done",  RES_DONE,  FLAG_END  }
};
#define NRES (sizeof(reserved_list)/sizeof(struct reserved_combo))

int reserved_word(o_string *dest, struct p_context *ctx)
{
c7e0adb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e0adbc:	e1a07000 	mov	r7, r0
c7e0adc0:	e1a05001 	mov	r5, r1
c7e0adc4:	e59f611c 	ldr	r6, [pc, #284]	; c7e0aee8 <reserved_word+0x130>
c7e0adc8:	ea000041 	b	c7e0aed4 <reserved_word+0x11c>
	struct reserved_combo *r;
	for (r=reserved_list;
		r<reserved_list+NRES; r++) {
		if (strcmp(dest->data, r->literal) == 0) {
c7e0adcc:	e5961000 	ldr	r1, [r6]
c7e0add0:	e5970000 	ldr	r0, [r7]
c7e0add4:	eb005ea1 	bl	c7e22860 <strcmp>
c7e0add8:	e3500000 	cmp	r0, #0	; 0x0
c7e0addc:	1a00003b 	bne	c7e0aed0 <reserved_word+0x118>
			debug_printf("found reserved word %s, code %d\n",r->literal,r->code);
			if (r->flag & FLAG_START) {
c7e0ade0:	e5963008 	ldr	r3, [r6, #8]
c7e0ade4:	e3130b02 	tst	r3, #2048	; 0x800
c7e0ade8:	0a000014 	beq	c7e0ae40 <reserved_word+0x88>
				struct p_context *new = xmalloc(sizeof(struct p_context));
c7e0adec:	e280001c 	add	r0, r0, #28	; 0x1c
c7e0adf0:	ebfffeb7 	bl	c7e0a8d4 <xmalloc>
				debug_printf("push stack\n");
				if (ctx->w == RES_IN || ctx->w == RES_FOR) {
c7e0adf4:	e595300c 	ldr	r3, [r5, #12]
	for (r=reserved_list;
		r<reserved_list+NRES; r++) {
		if (strcmp(dest->data, r->literal) == 0) {
			debug_printf("found reserved word %s, code %d\n",r->literal,r->code);
			if (r->flag & FLAG_START) {
				struct p_context *new = xmalloc(sizeof(struct p_context));
c7e0adf8:	e1a04000 	mov	r4, r0
				debug_printf("push stack\n");
				if (ctx->w == RES_IN || ctx->w == RES_FOR) {
c7e0adfc:	e3530006 	cmp	r3, #6	; 0x6
c7e0ae00:	1353000c 	cmpne	r3, #12	; 0xc
c7e0ae04:	1a000003 	bne	c7e0ae18 <reserved_word+0x60>
					syntax();
c7e0ae08:	ebfffe5f 	bl	c7e0a78c <syntax_err>
					free(new);
c7e0ae0c:	e1a00004 	mov	r0, r4
c7e0ae10:	ebfff852 	bl	c7e08f60 <free>
c7e0ae14:	ea000012 	b	c7e0ae64 <reserved_word+0xac>
					ctx->w = RES_SNTX;
					b_reset(dest);
					return 1;
				}
				*new = *ctx;   /* physical copy */
c7e0ae18:	e1a0c005 	mov	ip, r5
c7e0ae1c:	e1a0e004 	mov	lr, r4
c7e0ae20:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
c7e0ae24:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
c7e0ae28:	e89c0007 	ldm	ip, {r0, r1, r2}
c7e0ae2c:	e88e0007 	stm	lr, {r0, r1, r2}
				initialize_context(ctx);
c7e0ae30:	e1a00005 	mov	r0, r5
c7e0ae34:	ebffffbf 	bl	c7e0ad38 <initialize_context>
				ctx->stack=new;
c7e0ae38:	e5854014 	str	r4, [r5, #20]
c7e0ae3c:	ea00000b 	b	c7e0ae70 <reserved_word+0xb8>
			} else if ( ctx->w == RES_NONE || ! (ctx->old_flag & (1<<r->code))) {
c7e0ae40:	e595300c 	ldr	r3, [r5, #12]
c7e0ae44:	e3530000 	cmp	r3, #0	; 0x0
c7e0ae48:	0a000004 	beq	c7e0ae60 <reserved_word+0xa8>
c7e0ae4c:	e5953010 	ldr	r3, [r5, #16]
c7e0ae50:	e5962004 	ldr	r2, [r6, #4]
c7e0ae54:	e1a03253 	asr	r3, r3, r2
c7e0ae58:	e3130001 	tst	r3, #1	; 0x1
c7e0ae5c:	1a000003 	bne	c7e0ae70 <reserved_word+0xb8>
				syntax();
c7e0ae60:	ebfffe49 	bl	c7e0a78c <syntax_err>
				ctx->w = RES_SNTX;
c7e0ae64:	e3a0300d 	mov	r3, #13	; 0xd
c7e0ae68:	e585300c 	str	r3, [r5, #12]
c7e0ae6c:	ea000013 	b	c7e0aec0 <reserved_word+0x108>
				b_reset(dest);
				return 1;
			}
			ctx->w=r->code;
			ctx->old_flag = r->flag;
c7e0ae70:	e5962008 	ldr	r2, [r6, #8]
				syntax();
				ctx->w = RES_SNTX;
				b_reset(dest);
				return 1;
			}
			ctx->w=r->code;
c7e0ae74:	e5963004 	ldr	r3, [r6, #4]
			ctx->old_flag = r->flag;
			if (ctx->old_flag & FLAG_END) {
c7e0ae78:	e3120001 	tst	r2, #1	; 0x1
				syntax();
				ctx->w = RES_SNTX;
				b_reset(dest);
				return 1;
			}
			ctx->w=r->code;
c7e0ae7c:	e585300c 	str	r3, [r5, #12]
			ctx->old_flag = r->flag;
c7e0ae80:	e5852010 	str	r2, [r5, #16]
			if (ctx->old_flag & FLAG_END) {
c7e0ae84:	0a00000d 	beq	c7e0aec0 <reserved_word+0x108>
				struct p_context *old;
				debug_printf("pop stack\n");
				done_pipe(ctx,PIPE_SEQ);
c7e0ae88:	e3a01001 	mov	r1, #1	; 0x1
c7e0ae8c:	e1a00005 	mov	r0, r5
c7e0ae90:	ebffffb6 	bl	c7e0ad70 <done_pipe>
				old = ctx->stack;
c7e0ae94:	e5954014 	ldr	r4, [r5, #20]
				old->child->group = ctx->list_head;
c7e0ae98:	e5952004 	ldr	r2, [r5, #4]
c7e0ae9c:	e5943000 	ldr	r3, [r4]
#ifndef __U_BOOT__
				old->child->subshell = 0;
#endif
				*ctx = *old;   /* physical copy */
c7e0aea0:	e1a0c004 	mov	ip, r4
			if (ctx->old_flag & FLAG_END) {
				struct p_context *old;
				debug_printf("pop stack\n");
				done_pipe(ctx,PIPE_SEQ);
				old = ctx->stack;
				old->child->group = ctx->list_head;
c7e0aea4:	e5832008 	str	r2, [r3, #8]
#ifndef __U_BOOT__
				old->child->subshell = 0;
#endif
				*ctx = *old;   /* physical copy */
c7e0aea8:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
c7e0aeac:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
c7e0aeb0:	e89c0007 	ldm	ip, {r0, r1, r2}
c7e0aeb4:	e8850007 	stm	r5, {r0, r1, r2}
				free(old);
c7e0aeb8:	e1a00004 	mov	r0, r4
c7e0aebc:	ebfff827 	bl	c7e08f60 <free>
			}
			b_reset (dest);
c7e0aec0:	e1a00007 	mov	r0, r7
c7e0aec4:	ebfffdec 	bl	c7e0a67c <b_reset>
c7e0aec8:	e3a00001 	mov	r0, #1	; 0x1
c7e0aecc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

int reserved_word(o_string *dest, struct p_context *ctx)
{
	struct reserved_combo *r;
	for (r=reserved_list;
		r<reserved_list+NRES; r++) {
c7e0aed0:	e286600c 	add	r6, r6, #12	; 0xc
c7e0aed4:	e59f3010 	ldr	r3, [pc, #16]	; c7e0aeec <reserved_word+0x134>
c7e0aed8:	e1560003 	cmp	r6, r3
c7e0aedc:	1affffba 	bne	c7e0adcc <reserved_word+0x14>
c7e0aee0:	e3a00000 	mov	r0, #0	; 0x0
			b_reset (dest);
			return 1;
		}
	}
	return 0;
}
c7e0aee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e0aee8:	c7e35824 	.word	0xc7e35824
c7e0aeec:	c7e358a8 	.word	0xc7e358a8

c7e0aef0 <b_addchr>:

static int b_check_space(o_string *o, int len)
{
	/* It would be easy to drop a more restrictive policy
	 * in here, such as setting a maximum string length */
	if (o->length + len > o->maxlen) {
c7e0aef0:	e5902008 	ldr	r2, [r0, #8]
c7e0aef4:	e5903004 	ldr	r3, [r0, #4]
	}
	return o->data == NULL;
}

static int b_addchr(o_string *o, int ch)
{
c7e0aef8:	e92d4070 	push	{r4, r5, r6, lr}

static int b_check_space(o_string *o, int len)
{
	/* It would be easy to drop a more restrictive policy
	 * in here, such as setting a maximum string length */
	if (o->length + len > o->maxlen) {
c7e0aefc:	e1530002 	cmp	r3, r2
	}
	return o->data == NULL;
}

static int b_addchr(o_string *o, int ch)
{
c7e0af00:	e1a04000 	mov	r4, r0
c7e0af04:	e1a06001 	mov	r6, r1

static int b_check_space(o_string *o, int len)
{
	/* It would be easy to drop a more restrictive policy
	 * in here, such as setting a maximum string length */
	if (o->length + len > o->maxlen) {
c7e0af08:	ba00000a 	blt	c7e0af38 <b_addchr+0x48>
		char *old_data = o->data;
c7e0af0c:	e5905000 	ldr	r5, [r0]
		/* assert (data == NULL || o->maxlen != 0); */
		o->maxlen += max(2*len, B_CHUNK);
c7e0af10:	e2823064 	add	r3, r2, #100	; 0x64
c7e0af14:	e5803008 	str	r3, [r0, #8]
		o->data = realloc(o->data, 1 + o->maxlen);
c7e0af18:	e2821065 	add	r1, r2, #101	; 0x65
c7e0af1c:	e1a00005 	mov	r0, r5
c7e0af20:	ebfffaaf 	bl	c7e099e4 <realloc>
		if (o->data == NULL) {
c7e0af24:	e3500000 	cmp	r0, #0	; 0x0
	 * in here, such as setting a maximum string length */
	if (o->length + len > o->maxlen) {
		char *old_data = o->data;
		/* assert (data == NULL || o->maxlen != 0); */
		o->maxlen += max(2*len, B_CHUNK);
		o->data = realloc(o->data, 1 + o->maxlen);
c7e0af28:	e5840000 	str	r0, [r4]
		if (o->data == NULL) {
c7e0af2c:	1a000001 	bne	c7e0af38 <b_addchr+0x48>
			free(old_data);
c7e0af30:	e1a00005 	mov	r0, r5
c7e0af34:	ebfff809 	bl	c7e08f60 <free>
		}
	}
	return o->data == NULL;
c7e0af38:	e5942000 	ldr	r2, [r4]
}

static int b_addchr(o_string *o, int ch)
{
	debug_printf("b_addchr: %c %d %p\n", ch, o->length, o);
	if (b_check_space(o, 1)) return B_NOSPAC;
c7e0af3c:	e3520000 	cmp	r2, #0	; 0x0
c7e0af40:	03a00001 	moveq	r0, #1	; 0x1
c7e0af44:	08bd8070 	popeq	{r4, r5, r6, pc}
	o->data[o->length] = ch;
c7e0af48:	e5943004 	ldr	r3, [r4, #4]
	o->length++;
	o->data[o->length] = '\0';
c7e0af4c:	e3a01000 	mov	r1, #0	; 0x0

static int b_addchr(o_string *o, int ch)
{
	debug_printf("b_addchr: %c %d %p\n", ch, o->length, o);
	if (b_check_space(o, 1)) return B_NOSPAC;
	o->data[o->length] = ch;
c7e0af50:	e7c26003 	strb	r6, [r2, r3]
	o->length++;
c7e0af54:	e894000c 	ldm	r4, {r2, r3}
c7e0af58:	e2833001 	add	r3, r3, #1	; 0x1
c7e0af5c:	e5843004 	str	r3, [r4, #4]
	o->data[o->length] = '\0';
c7e0af60:	e1a00001 	mov	r0, r1
c7e0af64:	e7c21003 	strb	r1, [r2, r3]
	return 0;
}
c7e0af68:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0af6c <done_word>:
	char *str, *s;
	int argc, cnt;
#endif

	debug_printf("done_word: %s %p\n", dest->data, child);
	if (dest->length == 0 && !dest->nonnull) {
c7e0af6c:	e5903004 	ldr	r3, [r0, #4]
}

/* normal return is 0.
 * Syntax or xglob errors return 1. */
static int done_word(o_string *dest, struct p_context *ctx)
{
c7e0af70:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	char *str, *s;
	int argc, cnt;
#endif

	debug_printf("done_word: %s %p\n", dest->data, child);
	if (dest->length == 0 && !dest->nonnull) {
c7e0af74:	e3530000 	cmp	r3, #0	; 0x0
}

/* normal return is 0.
 * Syntax or xglob errors return 1. */
static int done_word(o_string *dest, struct p_context *ctx)
{
c7e0af78:	e1a06000 	mov	r6, r0
c7e0af7c:	e1a07001 	mov	r7, r1
	struct child_prog *child=ctx->child;
c7e0af80:	e5915000 	ldr	r5, [r1]
	char *str, *s;
	int argc, cnt;
#endif

	debug_printf("done_word: %s %p\n", dest->data, child);
	if (dest->length == 0 && !dest->nonnull) {
c7e0af84:	1a000002 	bne	c7e0af94 <done_word+0x28>
c7e0af88:	e5903010 	ldr	r3, [r0, #16]
c7e0af8c:	e3530000 	cmp	r3, #0	; 0x0
c7e0af90:	0a000051 	beq	c7e0b0dc <done_word+0x170>
#ifndef __U_BOOT__
	if (ctx->pending_redirect) {
		glob_target = &ctx->pending_redirect->word;
	} else {
#endif
		if (child->group) {
c7e0af94:	e5953008 	ldr	r3, [r5, #8]
c7e0af98:	e3530000 	cmp	r3, #0	; 0x0
c7e0af9c:	0a000002 	beq	c7e0afac <done_word+0x40>
			syntax();
c7e0afa0:	ebfffdf9 	bl	c7e0a78c <syntax_err>
c7e0afa4:	e3a00001 	mov	r0, #1	; 0x1
c7e0afa8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
			return 1;  /* syntax error, groups and arglists don't mix */
		}
		if (!child->argv && (ctx->type & FLAG_PARSE_SEMICOLON)) {
c7e0afac:	e5953000 	ldr	r3, [r5]
c7e0afb0:	e3530000 	cmp	r3, #0	; 0x0
c7e0afb4:	1a00000c 	bne	c7e0afec <done_word+0x80>
c7e0afb8:	e5973018 	ldr	r3, [r7, #24]
c7e0afbc:	e3130002 	tst	r3, #2	; 0x2
c7e0afc0:	0a000009 	beq	c7e0afec <done_word+0x80>
			debug_printf("checking %s for reserved-ness\n",dest->data);
			if (reserved_word(dest,ctx)) return ctx->w==RES_SNTX;
c7e0afc4:	e1a00006 	mov	r0, r6
c7e0afc8:	e1a01007 	mov	r1, r7
c7e0afcc:	ebffff79 	bl	c7e0adb8 <reserved_word>
c7e0afd0:	e3500000 	cmp	r0, #0	; 0x0
c7e0afd4:	0a000004 	beq	c7e0afec <done_word+0x80>
c7e0afd8:	e597300c 	ldr	r3, [r7, #12]
c7e0afdc:	e353000d 	cmp	r3, #13	; 0xd
c7e0afe0:	13a00000 	movne	r0, #0	; 0x0
c7e0afe4:	03a00001 	moveq	r0, #1	; 0x1
c7e0afe8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
		}
#ifndef __U_BOOT__
		glob_target = &child->glob_result;
		if (child->argv) flags |= GLOB_APPEND;
#else
		for (cnt = 1, s = dest->data; s && *s; s++) {
c7e0afec:	e5963000 	ldr	r3, [r6]
c7e0aff0:	e3a00001 	mov	r0, #1	; 0x1
c7e0aff4:	ea000003 	b	c7e0b008 <done_word+0x9c>
			if (*s == '\\') s++;
c7e0aff8:	e352005c 	cmp	r2, #92	; 0x5c
c7e0affc:	02833001 	addeq	r3, r3, #1	; 0x1
			cnt++;
c7e0b000:	e2800001 	add	r0, r0, #1	; 0x1
		}
#ifndef __U_BOOT__
		glob_target = &child->glob_result;
		if (child->argv) flags |= GLOB_APPEND;
#else
		for (cnt = 1, s = dest->data; s && *s; s++) {
c7e0b004:	e2833001 	add	r3, r3, #1	; 0x1
c7e0b008:	e3530000 	cmp	r3, #0	; 0x0
c7e0b00c:	0a000002 	beq	c7e0b01c <done_word+0xb0>
c7e0b010:	e5d32000 	ldrb	r2, [r3]
c7e0b014:	e3520000 	cmp	r2, #0	; 0x0
c7e0b018:	1afffff6 	bne	c7e0aff8 <done_word+0x8c>
			if (*s == '\\') s++;
			cnt++;
		}
		str = malloc(cnt);
c7e0b01c:	ebfff85e 	bl	c7e0919c <malloc>
		if (!str) return 1;
c7e0b020:	e250a000 	subs	sl, r0, #0	; 0x0
c7e0b024:	0a00002e 	beq	c7e0b0e4 <done_word+0x178>
		if ( child->argv == NULL) {
c7e0b028:	e5953000 	ldr	r3, [r5]
			child->argc=0;
		}
		argc = ++child->argc;
		child->argv = realloc(child->argv, (argc+1)*sizeof(*child->argv));
c7e0b02c:	e5950000 	ldr	r0, [r5]
			if (*s == '\\') s++;
			cnt++;
		}
		str = malloc(cnt);
		if (!str) return 1;
		if ( child->argv == NULL) {
c7e0b030:	e3530000 	cmp	r3, #0	; 0x0
			child->argc=0;
c7e0b034:	05853004 	streq	r3, [r5, #4]
		}
		argc = ++child->argc;
c7e0b038:	e5953004 	ldr	r3, [r5, #4]
c7e0b03c:	e2834001 	add	r4, r3, #1	; 0x1
		child->argv = realloc(child->argv, (argc+1)*sizeof(*child->argv));
c7e0b040:	e2841001 	add	r1, r4, #1	; 0x1
		str = malloc(cnt);
		if (!str) return 1;
		if ( child->argv == NULL) {
			child->argc=0;
		}
		argc = ++child->argc;
c7e0b044:	e5854004 	str	r4, [r5, #4]
		child->argv = realloc(child->argv, (argc+1)*sizeof(*child->argv));
c7e0b048:	e1a01101 	lsl	r1, r1, #2
c7e0b04c:	ebfffa64 	bl	c7e099e4 <realloc>
		if (child->argv == NULL) return 1;
c7e0b050:	e3500000 	cmp	r0, #0	; 0x0
		if (!str) return 1;
		if ( child->argv == NULL) {
			child->argc=0;
		}
		argc = ++child->argc;
		child->argv = realloc(child->argv, (argc+1)*sizeof(*child->argv));
c7e0b054:	e5850000 	str	r0, [r5]
		if (child->argv == NULL) return 1;
c7e0b058:	0a000021 	beq	c7e0b0e4 <done_word+0x178>
		child->argv[argc-1]=str;
c7e0b05c:	e2642001 	rsb	r2, r4, #1	; 0x1
c7e0b060:	e3e03003 	mvn	r3, #3	; 0x3
c7e0b064:	e0030392 	mul	r3, r2, r3
c7e0b068:	e780a003 	str	sl, [r0, r3]
		child->argv[argc]=NULL;
c7e0b06c:	e3a03000 	mov	r3, #0	; 0x0
c7e0b070:	e7803104 	str	r3, [r0, r4, lsl #2]
		for (s = dest->data; s && *s; s++,str++) {
c7e0b074:	e5962000 	ldr	r2, [r6]
c7e0b078:	ea000003 	b	c7e0b08c <done_word+0x120>
			if (*s == '\\') s++;
c7e0b07c:	e353005c 	cmp	r3, #92	; 0x5c
c7e0b080:	02822001 	addeq	r2, r2, #1	; 0x1
			*str = *s;
c7e0b084:	e4d23001 	ldrb	r3, [r2], #1
c7e0b088:	e4ca3001 	strb	r3, [sl], #1
		argc = ++child->argc;
		child->argv = realloc(child->argv, (argc+1)*sizeof(*child->argv));
		if (child->argv == NULL) return 1;
		child->argv[argc-1]=str;
		child->argv[argc]=NULL;
		for (s = dest->data; s && *s; s++,str++) {
c7e0b08c:	e3520000 	cmp	r2, #0	; 0x0
c7e0b090:	0a000002 	beq	c7e0b0a0 <done_word+0x134>
c7e0b094:	e5d23000 	ldrb	r3, [r2]
c7e0b098:	e3530000 	cmp	r3, #0	; 0x0
c7e0b09c:	1afffff6 	bne	c7e0b07c <done_word+0x110>
			if (*s == '\\') s++;
			*str = *s;
		}
		*str = '\0';
c7e0b0a0:	e3a04000 	mov	r4, #0	; 0x0
c7e0b0a4:	e5ca4000 	strb	r4, [sl]
	}
	gr = xglob(dest, flags, glob_target);
	if (gr != 0) return 1;
#endif

	b_reset(dest);
c7e0b0a8:	e1a00006 	mov	r0, r6
c7e0b0ac:	ebfffd72 	bl	c7e0a67c <b_reset>
		}
	} else {
		child->argv = glob_target->gl_pathv;
	}
#endif
	if (ctx->w == RES_FOR) {
c7e0b0b0:	e597300c 	ldr	r3, [r7, #12]
c7e0b0b4:	e3530006 	cmp	r3, #6	; 0x6
c7e0b0b8:	1a000007 	bne	c7e0b0dc <done_word+0x170>
		done_word(dest,ctx);
c7e0b0bc:	e1a01007 	mov	r1, r7
c7e0b0c0:	e1a00006 	mov	r0, r6
c7e0b0c4:	ebffffa8 	bl	c7e0af6c <done_word>
		done_pipe(ctx,PIPE_SEQ);
c7e0b0c8:	e1a00007 	mov	r0, r7
c7e0b0cc:	e3a01001 	mov	r1, #1	; 0x1
c7e0b0d0:	ebffff26 	bl	c7e0ad70 <done_pipe>
c7e0b0d4:	e1a00004 	mov	r0, r4
c7e0b0d8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0b0dc:	e3a00000 	mov	r0, #0	; 0x0
c7e0b0e0:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0b0e4:	e3a00001 	mov	r0, #1	; 0x1
	}
	return 0;
}
c7e0b0e8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

c7e0b0ec <b_addqchr>:
/* My analysis of quoting semantics tells me that state information
 * is associated with a destination, not a source.
 */
static int b_addqchr(o_string *o, int ch, int quote)
{
	if (quote && strchr("*?[\\",ch)) {
c7e0b0ec:	e3520000 	cmp	r2, #0	; 0x0

/* My analysis of quoting semantics tells me that state information
 * is associated with a destination, not a source.
 */
static int b_addqchr(o_string *o, int ch, int quote)
{
c7e0b0f0:	e92d4070 	push	{r4, r5, r6, lr}
c7e0b0f4:	e1a04000 	mov	r4, r0
c7e0b0f8:	e1a05001 	mov	r5, r1
	if (quote && strchr("*?[\\",ch)) {
c7e0b0fc:	0a000008 	beq	c7e0b124 <b_addqchr+0x38>
c7e0b100:	e59f002c 	ldr	r0, [pc, #44]	; c7e0b134 <b_addqchr+0x48>
c7e0b104:	eb005df7 	bl	c7e228e8 <strchr>
c7e0b108:	e3500000 	cmp	r0, #0	; 0x0
c7e0b10c:	0a000004 	beq	c7e0b124 <b_addqchr+0x38>
		int rc;
		rc = b_addchr(o, '\\');
c7e0b110:	e1a00004 	mov	r0, r4
c7e0b114:	e3a0105c 	mov	r1, #92	; 0x5c
c7e0b118:	ebffff74 	bl	c7e0aef0 <b_addchr>
		if (rc) return rc;
c7e0b11c:	e3500000 	cmp	r0, #0	; 0x0
c7e0b120:	18bd8070 	popne	{r4, r5, r6, pc}
	}
	return b_addchr(o, ch);
c7e0b124:	e1a00004 	mov	r0, r4
c7e0b128:	e1a01005 	mov	r1, r5
}
c7e0b12c:	e8bd4070 	pop	{r4, r5, r6, lr}
	if (quote && strchr("*?[\\",ch)) {
		int rc;
		rc = b_addchr(o, '\\');
		if (rc) return rc;
	}
	return b_addchr(o, ch);
c7e0b130:	eaffff6e 	b	c7e0aef0 <b_addchr>
c7e0b134:	c7e31f3d 	.word	0xc7e31f3d

c7e0b138 <get_local_var>:
static char *get_dollar_var(char ch);
#endif

/* This is used to get/check local shell variables */
char *get_local_var(const char *s)
{
c7e0b138:	e92d4070 	push	{r4, r5, r6, lr}
	struct variables *cur;

	if (!s)
c7e0b13c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e0b140:	0a00001a 	beq	c7e0b1b0 <get_local_var+0x78>
		return NULL;

#ifdef __U_BOOT__
	if (*s == '$')
c7e0b144:	e5d53000 	ldrb	r3, [r5]
c7e0b148:	e59f4068 	ldr	r4, [pc, #104]	; c7e0b1b8 <get_local_var+0x80>
c7e0b14c:	e3530024 	cmp	r3, #36	; 0x24
c7e0b150:	1a00000a 	bne	c7e0b180 <get_local_var+0x48>
		return get_dollar_var(s[1]);
c7e0b154:	e5d53001 	ldrb	r3, [r5, #1]
#ifdef __U_BOOT__
static char *get_dollar_var(char ch)
{
	static char buf[40];

	buf[0] = '\0';
c7e0b158:	e3a00000 	mov	r0, #0	; 0x0
	switch (ch) {
c7e0b15c:	e353003f 	cmp	r3, #63	; 0x3f
#ifdef __U_BOOT__
static char *get_dollar_var(char ch)
{
	static char buf[40];

	buf[0] = '\0';
c7e0b160:	e5c4020c 	strb	r0, [r4, #524]
	switch (ch) {
c7e0b164:	18bd8070 	popne	{r4, r5, r6, pc}
		case '?':
			sprintf(buf, "%u", (unsigned int)last_return_code);
c7e0b168:	e2840f83 	add	r0, r4, #524	; 0x20c
c7e0b16c:	e59f1048 	ldr	r1, [pc, #72]	; c7e0b1bc <get_local_var+0x84>
c7e0b170:	e5942234 	ldr	r2, [r4, #564]
c7e0b174:	eb00632d 	bl	c7e23e30 <sprintf>
c7e0b178:	e2840f83 	add	r0, r4, #524	; 0x20c
c7e0b17c:	e8bd8070 	pop	{r4, r5, r6, pc}
#ifdef __U_BOOT__
	if (*s == '$')
		return get_dollar_var(s[1]);
#endif

	for (cur = top_vars; cur; cur=cur->next)
c7e0b180:	e5944100 	ldr	r4, [r4, #256]
c7e0b184:	ea000006 	b	c7e0b1a4 <get_local_var+0x6c>
		if(strcmp(cur->name, s)==0)
c7e0b188:	e5940000 	ldr	r0, [r4]
c7e0b18c:	eb005db3 	bl	c7e22860 <strcmp>
c7e0b190:	e3500000 	cmp	r0, #0	; 0x0
c7e0b194:	1a000001 	bne	c7e0b1a0 <get_local_var+0x68>
			return cur->value;
c7e0b198:	e5940004 	ldr	r0, [r4, #4]
c7e0b19c:	e8bd8070 	pop	{r4, r5, r6, pc}
#ifdef __U_BOOT__
	if (*s == '$')
		return get_dollar_var(s[1]);
#endif

	for (cur = top_vars; cur; cur=cur->next)
c7e0b1a0:	e5944010 	ldr	r4, [r4, #16]
c7e0b1a4:	e3540000 	cmp	r4, #0	; 0x0
		if(strcmp(cur->name, s)==0)
c7e0b1a8:	e1a01005 	mov	r1, r5
#ifdef __U_BOOT__
	if (*s == '$')
		return get_dollar_var(s[1]);
#endif

	for (cur = top_vars; cur; cur=cur->next)
c7e0b1ac:	1afffff5 	bne	c7e0b188 <get_local_var+0x50>
c7e0b1b0:	e3a00000 	mov	r0, #0	; 0x0
		if(strcmp(cur->name, s)==0)
			return cur->value;
	return NULL;
}
c7e0b1b4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0b1b8:	c7e40204 	.word	0xc7e40204
c7e0b1bc:	c7e31f42 	.word	0xc7e31f42

c7e0b1c0 <set_local_var>:
/* This is used to set local shell variables
   flg_export==0 if only local (not exporting) variable
   flg_export==1 if "new" exporting environ
   flg_export>1  if current startup environ (not call putenv()) */
int set_local_var(const char *s, int flg_export)
{
c7e0b1c0:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	int result=0;
	struct variables *cur;

#ifdef __U_BOOT__
	/* might be possible! */
	if (!isalpha(*s))
c7e0b1c4:	e59f2194 	ldr	r2, [pc, #404]	; c7e0b360 <set_local_var+0x1a0>
c7e0b1c8:	e5d03000 	ldrb	r3, [r0]
/* This is used to set local shell variables
   flg_export==0 if only local (not exporting) variable
   flg_export==1 if "new" exporting environ
   flg_export>1  if current startup environ (not call putenv()) */
int set_local_var(const char *s, int flg_export)
{
c7e0b1cc:	e1a07001 	mov	r7, r1
	int result=0;
	struct variables *cur;

#ifdef __U_BOOT__
	/* might be possible! */
	if (!isalpha(*s))
c7e0b1d0:	e7d23003 	ldrb	r3, [r2, r3]
c7e0b1d4:	e3130003 	tst	r3, #3	; 0x3
c7e0b1d8:	0a000008 	beq	c7e0b200 <set_local_var+0x40>
		return -1;
#endif

	name=strdup(s);
c7e0b1dc:	eb005f11 	bl	c7e22e28 <strdup>
c7e0b1e0:	e1a0a000 	mov	sl, r0

#ifdef __U_BOOT__
	if (getenv(name) != NULL) {
c7e0b1e4:	ebffefac 	bl	c7e0709c <getenv>
c7e0b1e8:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0b1ec:	0a000005 	beq	c7e0b208 <set_local_var+0x48>
		printf ("ERROR: "
c7e0b1f0:	e59f016c 	ldr	r0, [pc, #364]	; c7e0b364 <set_local_var+0x1a4>
c7e0b1f4:	ebfff617 	bl	c7e08a58 <printf>
				"There is a global environment variable with the same name.\n");
		free(name);
c7e0b1f8:	e1a0000a 	mov	r0, sl
c7e0b1fc:	ebfff757 	bl	c7e08f60 <free>
c7e0b200:	e3e04000 	mvn	r4, #0	; 0x0
c7e0b204:	ea00004e 	b	c7e0b344 <set_local_var+0x184>
	}
#endif
	/* Assume when we enter this function that we are already in
	 * NAME=VALUE format.  So the first order of business is to
	 * split 's' on the '=' into 'name' and 'value' */
	value = strchr(name, '=');
c7e0b208:	e1a0000a 	mov	r0, sl
c7e0b20c:	e3a0103d 	mov	r1, #61	; 0x3d
c7e0b210:	eb005db4 	bl	c7e228e8 <strchr>
	if (value==0 && ++value==0) {
		free(name);
		return -1;
	}
	*value++ = 0;
c7e0b214:	e3500000 	cmp	r0, #0	; 0x0
c7e0b218:	11a05000 	movne	r5, r0
c7e0b21c:	03a05001 	moveq	r5, #1	; 0x1

	for(cur = top_vars; cur; cur = cur->next) {
c7e0b220:	e59f3140 	ldr	r3, [pc, #320]	; c7e0b368 <set_local_var+0x1a8>
	value = strchr(name, '=');
	if (value==0 && ++value==0) {
		free(name);
		return -1;
	}
	*value++ = 0;
c7e0b224:	e4c54001 	strb	r4, [r5], #1

	for(cur = top_vars; cur; cur = cur->next) {
c7e0b228:	e5936100 	ldr	r6, [r3, #256]
c7e0b22c:	ea000004 	b	c7e0b244 <set_local_var+0x84>
		if(strcmp(cur->name, name)==0)
c7e0b230:	e5960000 	ldr	r0, [r6]
c7e0b234:	eb005d89 	bl	c7e22860 <strcmp>
c7e0b238:	e3500000 	cmp	r0, #0	; 0x0
c7e0b23c:	0a000004 	beq	c7e0b254 <set_local_var+0x94>
		free(name);
		return -1;
	}
	*value++ = 0;

	for(cur = top_vars; cur; cur = cur->next) {
c7e0b240:	e5966010 	ldr	r6, [r6, #16]
c7e0b244:	e3560000 	cmp	r6, #0	; 0x0
		if(strcmp(cur->name, name)==0)
c7e0b248:	e1a0100a 	mov	r1, sl
		free(name);
		return -1;
	}
	*value++ = 0;

	for(cur = top_vars; cur; cur = cur->next) {
c7e0b24c:	1afffff7 	bne	c7e0b230 <set_local_var+0x70>
c7e0b250:	ea00003d 	b	c7e0b34c <set_local_var+0x18c>
		if(strcmp(cur->name, name)==0)
			break;
	}

	if(cur) {
		if(strcmp(cur->value, value)==0) {
c7e0b254:	e5960004 	ldr	r0, [r6, #4]
c7e0b258:	e1a01005 	mov	r1, r5
c7e0b25c:	eb005d7f 	bl	c7e22860 <strcmp>
c7e0b260:	e3500000 	cmp	r0, #0	; 0x0
c7e0b264:	1a000007 	bne	c7e0b288 <set_local_var+0xc8>
			if(flg_export>0 && cur->flg_export==0)
c7e0b268:	e3570000 	cmp	r7, #0	; 0x0
c7e0b26c:	da000031 	ble	c7e0b338 <set_local_var+0x178>
c7e0b270:	e5960008 	ldr	r0, [r6, #8]
c7e0b274:	e3500000 	cmp	r0, #0	; 0x0
				cur->flg_export=flg_export;
c7e0b278:	05867008 	streq	r7, [r6, #8]
c7e0b27c:	01a04000 	moveq	r4, r0
			break;
	}

	if(cur) {
		if(strcmp(cur->value, value)==0) {
			if(flg_export>0 && cur->flg_export==0)
c7e0b280:	0a00002d 	beq	c7e0b33c <set_local_var+0x17c>
c7e0b284:	ea00002b 	b	c7e0b338 <set_local_var+0x178>
				cur->flg_export=flg_export;
			else
				result++;
		} else {
			if(cur->flg_read_only) {
c7e0b288:	e596300c 	ldr	r3, [r6, #12]
c7e0b28c:	e3530000 	cmp	r3, #0	; 0x0
c7e0b290:	0a000003 	beq	c7e0b2a4 <set_local_var+0xe4>
				error_msg("%s: readonly variable", name);
c7e0b294:	e1a0100a 	mov	r1, sl
c7e0b298:	e59f00cc 	ldr	r0, [pc, #204]	; c7e0b36c <set_local_var+0x1ac>
c7e0b29c:	ebfff5ed 	bl	c7e08a58 <printf>
c7e0b2a0:	ea000014 	b	c7e0b2f8 <set_local_var+0x138>
				result = -1;
			} else {
				if(flg_export>0 || cur->flg_export>1)
c7e0b2a4:	e3570000 	cmp	r7, #0	; 0x0
c7e0b2a8:	ca000002 	bgt	c7e0b2b8 <set_local_var+0xf8>
c7e0b2ac:	e5963008 	ldr	r3, [r6, #8]
c7e0b2b0:	e3530001 	cmp	r3, #1	; 0x1
c7e0b2b4:	da000001 	ble	c7e0b2c0 <set_local_var+0x100>
					cur->flg_export=1;
c7e0b2b8:	e3a03001 	mov	r3, #1	; 0x1
c7e0b2bc:	e5863008 	str	r3, [r6, #8]
				free(cur->value);
c7e0b2c0:	e5960004 	ldr	r0, [r6, #4]
c7e0b2c4:	ebfff725 	bl	c7e08f60 <free>

				cur->value = strdup(value);
c7e0b2c8:	e1a00005 	mov	r0, r5
c7e0b2cc:	eb005ed5 	bl	c7e22e28 <strdup>
c7e0b2d0:	e3a04000 	mov	r4, #0	; 0x0
c7e0b2d4:	e5860004 	str	r0, [r6, #4]
c7e0b2d8:	ea000017 	b	c7e0b33c <set_local_var+0x17c>
	} else {
		cur = malloc(sizeof(struct variables));
		if(!cur) {
			result = -1;
		} else {
			cur->name = strdup(name);
c7e0b2dc:	e1a0000a 	mov	r0, sl
c7e0b2e0:	eb005ed0 	bl	c7e22e28 <strdup>
			if(cur->name == 0) {
c7e0b2e4:	e3500000 	cmp	r0, #0	; 0x0
	} else {
		cur = malloc(sizeof(struct variables));
		if(!cur) {
			result = -1;
		} else {
			cur->name = strdup(name);
c7e0b2e8:	e5840000 	str	r0, [r4]
			if(cur->name == 0) {
c7e0b2ec:	1a000003 	bne	c7e0b300 <set_local_var+0x140>
				free(cur);
c7e0b2f0:	e1a00004 	mov	r0, r4
c7e0b2f4:	ebfff719 	bl	c7e08f60 <free>
c7e0b2f8:	e3e04000 	mvn	r4, #0	; 0x0
c7e0b2fc:	ea00000e 	b	c7e0b33c <set_local_var+0x17c>
				result = -1;
			} else {
				struct variables *bottom = top_vars;
c7e0b300:	e59f3060 	ldr	r3, [pc, #96]	; c7e0b368 <set_local_var+0x1a8>
				cur->value = strdup(value);
c7e0b304:	e1a00005 	mov	r0, r5
			cur->name = strdup(name);
			if(cur->name == 0) {
				free(cur);
				result = -1;
			} else {
				struct variables *bottom = top_vars;
c7e0b308:	e5935100 	ldr	r5, [r3, #256]
				cur->value = strdup(value);
c7e0b30c:	eb005ec5 	bl	c7e22e28 <strdup>
				cur->next = 0;
				cur->flg_export = flg_export;
c7e0b310:	e9840081 	stmib	r4, {r0, r7}
				cur->flg_read_only = 0;
c7e0b314:	e584600c 	str	r6, [r4, #12]
				free(cur);
				result = -1;
			} else {
				struct variables *bottom = top_vars;
				cur->value = strdup(value);
				cur->next = 0;
c7e0b318:	e5846010 	str	r6, [r4, #16]
				cur->flg_export = flg_export;
				cur->flg_read_only = 0;
				while(bottom->next) bottom=bottom->next;
c7e0b31c:	e1a03005 	mov	r3, r5
c7e0b320:	e5955010 	ldr	r5, [r5, #16]
c7e0b324:	e3550000 	cmp	r5, #0	; 0x0
c7e0b328:	1afffffb 	bne	c7e0b31c <set_local_var+0x15c>
				bottom->next = cur;
c7e0b32c:	e5834010 	str	r4, [r3, #16]
c7e0b330:	e1a04005 	mov	r4, r5
c7e0b334:	ea000000 	b	c7e0b33c <set_local_var+0x17c>
c7e0b338:	e3a04001 	mov	r4, #1	; 0x1
	if(result==0 && cur->flg_export==1) {
		*(value-1) = '=';
		result = putenv(name);
	} else {
#endif
		free(name);
c7e0b33c:	e1a0000a 	mov	r0, sl
c7e0b340:	ebfff706 	bl	c7e08f60 <free>
		if(result>0)            /* equivalent to previous set */
			result = 0;
	}
#endif
	return result;
}
c7e0b344:	e1a00004 	mov	r0, r4
c7e0b348:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

				cur->value = strdup(value);
			}
		}
	} else {
		cur = malloc(sizeof(struct variables));
c7e0b34c:	e3a00014 	mov	r0, #20	; 0x14
c7e0b350:	ebfff791 	bl	c7e0919c <malloc>
		if(!cur) {
c7e0b354:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0b358:	1affffdf 	bne	c7e0b2dc <set_local_var+0x11c>
c7e0b35c:	eaffffe5 	b	c7e0b2f8 <set_local_var+0x138>
c7e0b360:	c7e2d144 	.word	0xc7e2d144
c7e0b364:	c7e31f45 	.word	0xc7e31f45
c7e0b368:	c7e40204 	.word	0xc7e40204
c7e0b36c:	c7e31f27 	.word	0xc7e31f27

c7e0b370 <insert_var_value_sub>:
{
	return insert_var_value_sub(inp, 0);
}

static char *insert_var_value_sub(char *inp, int tag_subst)
{
c7e0b370:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
c7e0b374:	e3a05000 	mov	r5, #0	; 0x0
c7e0b378:	e1a06000 	mov	r6, r0
c7e0b37c:	e58d1004 	str	r1, [sp, #4]
c7e0b380:	e1a04005 	mov	r4, r5
c7e0b384:	e1a0a005 	mov	sl, r5
c7e0b388:	ea000084 	b	c7e0b5a0 <insert_var_value_sub+0x230>
	int done = 0;
	char *p, *p1, *res_str = NULL;

	while ((p = strchr(inp, SPECIAL_VAR_SYMBOL))) {
		/* check the beginning of the string for normal charachters */
		if (p != inp) {
c7e0b38c:	e1570006 	cmp	r7, r6
c7e0b390:	058d5008 	streq	r5, [sp, #8]
c7e0b394:	0a00000a 	beq	c7e0b3c4 <insert_var_value_sub+0x54>
			/* copy any charachters to the result string */
			len = p - inp;
c7e0b398:	e0664007 	rsb	r4, r6, r7
			res_str = xrealloc(res_str, (res_str_len + len));
c7e0b39c:	e0842005 	add	r2, r4, r5
c7e0b3a0:	e1a01002 	mov	r1, r2
c7e0b3a4:	e1a0000a 	mov	r0, sl
c7e0b3a8:	e58d2008 	str	r2, [sp, #8]
c7e0b3ac:	ebfffe37 	bl	c7e0ac90 <xrealloc>
			strncpy((res_str + res_str_len), inp, len);
c7e0b3b0:	e1a01006 	mov	r1, r6
	while ((p = strchr(inp, SPECIAL_VAR_SYMBOL))) {
		/* check the beginning of the string for normal charachters */
		if (p != inp) {
			/* copy any charachters to the result string */
			len = p - inp;
			res_str = xrealloc(res_str, (res_str_len + len));
c7e0b3b4:	e1a0a000 	mov	sl, r0
			strncpy((res_str + res_str_len), inp, len);
c7e0b3b8:	e1a02004 	mov	r2, r4
c7e0b3bc:	e0800005 	add	r0, r0, r5
c7e0b3c0:	eb005cf6 	bl	c7e227a0 <strncpy>
			res_str_len += len;
		}
		inp = ++p;
c7e0b3c4:	e2879001 	add	r9, r7, #1	; 0x1
		/* find the ending marker */
		p = strchr(inp, SPECIAL_VAR_SYMBOL);
c7e0b3c8:	e1a00009 	mov	r0, r9
c7e0b3cc:	e3a01003 	mov	r1, #3	; 0x3
c7e0b3d0:	eb005d44 	bl	c7e228e8 <strchr>
		*p = '\0';
c7e0b3d4:	e3a04000 	mov	r4, #0	; 0x0
	char *sep;
	char *default_val = NULL;
	int assign = 0;
	int expand_empty = 0;

	if (!src)
c7e0b3d8:	e3590000 	cmp	r9, #0	; 0x0
			strncpy((res_str + res_str_len), inp, len);
			res_str_len += len;
		}
		inp = ++p;
		/* find the ending marker */
		p = strchr(inp, SPECIAL_VAR_SYMBOL);
c7e0b3dc:	e58d000c 	str	r0, [sp, #12]
		*p = '\0';
c7e0b3e0:	e5c04000 	strb	r4, [r0]
	char *sep;
	char *default_val = NULL;
	int assign = 0;
	int expand_empty = 0;

	if (!src)
c7e0b3e4:	0a000068 	beq	c7e0b58c <insert_var_value_sub+0x21c>
		return NULL;

	sep = strchr(src, ':');
c7e0b3e8:	e1a00009 	mov	r0, r9
c7e0b3ec:	e3a0103a 	mov	r1, #58	; 0x3a
c7e0b3f0:	eb005d3c 	bl	c7e228e8 <strchr>

	if (sep) {
c7e0b3f4:	e250b000 	subs	fp, r0, #0	; 0x0
c7e0b3f8:	0a00000e 	beq	c7e0b438 <insert_var_value_sub+0xc8>
		*sep = '\0';
		if (*(sep + 1) == '-')
c7e0b3fc:	e5db3001 	ldrb	r3, [fp, #1]
		return NULL;

	sep = strchr(src, ':');

	if (sep) {
		*sep = '\0';
c7e0b400:	e5cb4000 	strb	r4, [fp]
		if (*(sep + 1) == '-')
c7e0b404:	e353002d 	cmp	r3, #45	; 0x2d
			default_val = sep+2;
c7e0b408:	028b5002 	addeq	r5, fp, #2	; 0x2
c7e0b40c:	01a07004 	moveq	r7, r4

	sep = strchr(src, ':');

	if (sep) {
		*sep = '\0';
		if (*(sep + 1) == '-')
c7e0b410:	0a00000b 	beq	c7e0b444 <insert_var_value_sub+0xd4>
			default_val = sep+2;
		if (*(sep + 1) == '=') {
c7e0b414:	e353003d 	cmp	r3, #61	; 0x3d
			default_val = sep+2;
c7e0b418:	028b5002 	addeq	r5, fp, #2	; 0x2
c7e0b41c:	03a07001 	moveq	r7, #1	; 0x1

	if (sep) {
		*sep = '\0';
		if (*(sep + 1) == '-')
			default_val = sep+2;
		if (*(sep + 1) == '=') {
c7e0b420:	0a000007 	beq	c7e0b444 <insert_var_value_sub+0xd4>
			default_val = sep+2;
			assign = 1;
		}
		if (*(sep + 1) == '+') {
c7e0b424:	e353002b 	cmp	r3, #43	; 0x2b
			default_val = sep+2;
c7e0b428:	01a07004 	moveq	r7, r4
c7e0b42c:	028b5002 	addeq	r5, fp, #2	; 0x2
c7e0b430:	03a04001 	moveq	r4, #1	; 0x1
			default_val = sep+2;
		if (*(sep + 1) == '=') {
			default_val = sep+2;
			assign = 1;
		}
		if (*(sep + 1) == '+') {
c7e0b434:	0a000002 	beq	c7e0b444 <insert_var_value_sub+0xd4>
			default_val = sep+2;
c7e0b438:	e3a04000 	mov	r4, #0	; 0x0
c7e0b43c:	e1a07004 	mov	r7, r4
c7e0b440:	e1a05004 	mov	r5, r4
			expand_empty = 1;
		}
	}

	p = getenv(src);
c7e0b444:	e1a00009 	mov	r0, r9
c7e0b448:	ebffef13 	bl	c7e0709c <getenv>
	if (!p)
c7e0b44c:	e2506000 	subs	r6, r0, #0	; 0x0
c7e0b450:	1a000003 	bne	c7e0b464 <insert_var_value_sub+0xf4>
		p = get_local_var(src);
c7e0b454:	e1a00009 	mov	r0, r9
c7e0b458:	ebffff36 	bl	c7e0b138 <get_local_var>

	if (!p || strlen(p) == 0) {
c7e0b45c:	e2506000 	subs	r6, r0, #0	; 0x0
c7e0b460:	0a000003 	beq	c7e0b474 <insert_var_value_sub+0x104>
c7e0b464:	e1a00006 	mov	r0, r6
c7e0b468:	eb005d32 	bl	c7e22938 <strlen>
c7e0b46c:	e3500000 	cmp	r0, #0	; 0x0
c7e0b470:	1a000016 	bne	c7e0b4d0 <insert_var_value_sub+0x160>
		p = default_val;
		if (assign) {
c7e0b474:	e3570000 	cmp	r7, #0	; 0x0
c7e0b478:	0a000012 	beq	c7e0b4c8 <insert_var_value_sub+0x158>
			char *var = malloc(strlen(src)+strlen(default_val)+2);
c7e0b47c:	e1a00009 	mov	r0, r9
c7e0b480:	eb005d2c 	bl	c7e22938 <strlen>
c7e0b484:	e1a04000 	mov	r4, r0
c7e0b488:	e1a00005 	mov	r0, r5
c7e0b48c:	eb005d29 	bl	c7e22938 <strlen>
c7e0b490:	e0844000 	add	r4, r4, r0
c7e0b494:	e2840002 	add	r0, r4, #2	; 0x2
c7e0b498:	ebfff73f 	bl	c7e0919c <malloc>
			if (var) {
c7e0b49c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0b4a0:	0a000006 	beq	c7e0b4c0 <insert_var_value_sub+0x150>
				sprintf(var, "%s=%s", src, default_val);
c7e0b4a4:	e59f116c 	ldr	r1, [pc, #364]	; c7e0b618 <insert_var_value_sub+0x2a8>
c7e0b4a8:	e1a02009 	mov	r2, r9
c7e0b4ac:	e1a03005 	mov	r3, r5
c7e0b4b0:	eb00625e 	bl	c7e23e30 <sprintf>
				set_local_var(var, 0);
c7e0b4b4:	e1a00004 	mov	r0, r4
c7e0b4b8:	e3a01000 	mov	r1, #0	; 0x0
c7e0b4bc:	ebffff3f 	bl	c7e0b1c0 <set_local_var>
			}
			free(var);
c7e0b4c0:	e1a00004 	mov	r0, r4
c7e0b4c4:	ebfff6a5 	bl	c7e08f60 <free>
c7e0b4c8:	e1a06005 	mov	r6, r5
c7e0b4cc:	ea000004 	b	c7e0b4e4 <insert_var_value_sub+0x174>
		}
	} else if (expand_empty) {
c7e0b4d0:	e3540000 	cmp	r4, #0	; 0x0
c7e0b4d4:	0a000002 	beq	c7e0b4e4 <insert_var_value_sub+0x174>
		p += strlen(p);
c7e0b4d8:	e1a00006 	mov	r0, r6
c7e0b4dc:	eb005d15 	bl	c7e22938 <strlen>
c7e0b4e0:	e0866000 	add	r6, r6, r0
	}

	if (sep)
c7e0b4e4:	e35b0000 	cmp	fp, #0	; 0x0
		*sep = ':';
c7e0b4e8:	13a0303a 	movne	r3, #58	; 0x3a
c7e0b4ec:	15cb3000 	strbne	r3, [fp]
		inp = ++p;
		/* find the ending marker */
		p = strchr(inp, SPECIAL_VAR_SYMBOL);
		*p = '\0';
		/* look up the value to substitute */
		if ((p1 = lookup_param(inp))) {
c7e0b4f0:	e3560000 	cmp	r6, #0	; 0x0
c7e0b4f4:	0a000024 	beq	c7e0b58c <insert_var_value_sub+0x21c>
			if (tag_subst)
c7e0b4f8:	e59d3004 	ldr	r3, [sp, #4]
c7e0b4fc:	e3530000 	cmp	r3, #0	; 0x0
c7e0b500:	0a000004 	beq	c7e0b518 <insert_var_value_sub+0x1a8>
				len = res_str_len + strlen(p1) + 2;
c7e0b504:	e1a00006 	mov	r0, r6
c7e0b508:	eb005d0a 	bl	c7e22938 <strlen>
c7e0b50c:	e59d2008 	ldr	r2, [sp, #8]
c7e0b510:	e2823002 	add	r3, r2, #2	; 0x2
c7e0b514:	ea000002 	b	c7e0b524 <insert_var_value_sub+0x1b4>
			else
				len = res_str_len + strlen(p1);
c7e0b518:	e1a00006 	mov	r0, r6
c7e0b51c:	eb005d05 	bl	c7e22938 <strlen>
c7e0b520:	e59d3008 	ldr	r3, [sp, #8]
c7e0b524:	e0807003 	add	r7, r0, r3
			res_str = xrealloc(res_str, (1 + len));
c7e0b528:	e2871001 	add	r1, r7, #1	; 0x1
c7e0b52c:	e1a0000a 	mov	r0, sl
c7e0b530:	ebfffdd6 	bl	c7e0ac90 <xrealloc>
			if (tag_subst) {
c7e0b534:	e59d2004 	ldr	r2, [sp, #4]
		if ((p1 = lookup_param(inp))) {
			if (tag_subst)
				len = res_str_len + strlen(p1) + 2;
			else
				len = res_str_len + strlen(p1);
			res_str = xrealloc(res_str, (1 + len));
c7e0b538:	e1a0a000 	mov	sl, r0
			if (tag_subst) {
c7e0b53c:	e3520000 	cmp	r2, #0	; 0x0
c7e0b540:	0a00000c 	beq	c7e0b578 <insert_var_value_sub+0x208>
				/*
				 * copy the variable value to the result
				 * string
				 */
				strcpy((res_str + res_str_len + 1), p1);
c7e0b544:	e59d3008 	ldr	r3, [sp, #8]
c7e0b548:	e1a01006 	mov	r1, r6
c7e0b54c:	e2835001 	add	r5, r3, #1	; 0x1
c7e0b550:	e0800005 	add	r0, r0, r5
c7e0b554:	eb005c8a 	bl	c7e22784 <strcpy>

				/*
				 * mark the replaced text to be accepted as
				 * is
				 */
				res_str[res_str_len] = SUBSTED_VAR_SYMBOL;
c7e0b558:	e59d2008 	ldr	r2, [sp, #8]
c7e0b55c:	e3a04004 	mov	r4, #4	; 0x4
c7e0b560:	e7ca4002 	strb	r4, [sl, r2]
				res_str[res_str_len + 1 + strlen(p1)] =
c7e0b564:	e1a00006 	mov	r0, r6
c7e0b568:	eb005cf2 	bl	c7e22938 <strlen>
c7e0b56c:	e08a0000 	add	r0, sl, r0
c7e0b570:	e7c04005 	strb	r4, [r0, r5]
c7e0b574:	ea000003 	b	c7e0b588 <insert_var_value_sub+0x218>
			} else
				/*
				 * copy the variable value to the result
				 * string
				 */
				strcpy((res_str + res_str_len), p1);
c7e0b578:	e59d3008 	ldr	r3, [sp, #8]
c7e0b57c:	e1a01006 	mov	r1, r6
c7e0b580:	e0800003 	add	r0, r0, r3
c7e0b584:	eb005c7e 	bl	c7e22784 <strcpy>
c7e0b588:	e58d7008 	str	r7, [sp, #8]

			res_str_len = len;
		}
		*p = SPECIAL_VAR_SYMBOL;
c7e0b58c:	e59d600c 	ldr	r6, [sp, #12]
c7e0b590:	e3a03003 	mov	r3, #3	; 0x3
c7e0b594:	e4c63001 	strb	r3, [r6], #1
c7e0b598:	e59d5008 	ldr	r5, [sp, #8]
c7e0b59c:	e3a04001 	mov	r4, #1	; 0x1
	int res_str_len = 0;
	int len;
	int done = 0;
	char *p, *p1, *res_str = NULL;

	while ((p = strchr(inp, SPECIAL_VAR_SYMBOL))) {
c7e0b5a0:	e1a00006 	mov	r0, r6
c7e0b5a4:	e3a01003 	mov	r1, #3	; 0x3
c7e0b5a8:	eb005cce 	bl	c7e228e8 <strchr>
c7e0b5ac:	e2507000 	subs	r7, r0, #0	; 0x0
c7e0b5b0:	1affff75 	bne	c7e0b38c <insert_var_value_sub+0x1c>
		}
		*p = SPECIAL_VAR_SYMBOL;
		inp = ++p;
		done = 1;
	}
	if (done) {
c7e0b5b4:	e3540000 	cmp	r4, #0	; 0x0
c7e0b5b8:	0a000011 	beq	c7e0b604 <insert_var_value_sub+0x294>
		res_str = xrealloc(res_str, (1 + res_str_len + strlen(inp)));
c7e0b5bc:	e1a00006 	mov	r0, r6
c7e0b5c0:	eb005cdc 	bl	c7e22938 <strlen>
c7e0b5c4:	e2851001 	add	r1, r5, #1	; 0x1
c7e0b5c8:	e0811000 	add	r1, r1, r0
c7e0b5cc:	e1a0000a 	mov	r0, sl
c7e0b5d0:	ebfffdae 	bl	c7e0ac90 <xrealloc>
		strcpy((res_str + res_str_len), inp);
c7e0b5d4:	e1a01006 	mov	r1, r6
		*p = SPECIAL_VAR_SYMBOL;
		inp = ++p;
		done = 1;
	}
	if (done) {
		res_str = xrealloc(res_str, (1 + res_str_len + strlen(inp)));
c7e0b5d8:	e1a0a000 	mov	sl, r0
		strcpy((res_str + res_str_len), inp);
c7e0b5dc:	e0800005 	add	r0, r0, r5
c7e0b5e0:	eb005c67 	bl	c7e22784 <strcpy>
c7e0b5e4:	ea000001 	b	c7e0b5f0 <insert_var_value_sub+0x280>
		while ((p = strchr(res_str, '\n'))) {
			*p = ' ';
c7e0b5e8:	e3a03020 	mov	r3, #32	; 0x20
c7e0b5ec:	e5c03000 	strb	r3, [r0]
		done = 1;
	}
	if (done) {
		res_str = xrealloc(res_str, (1 + res_str_len + strlen(inp)));
		strcpy((res_str + res_str_len), inp);
		while ((p = strchr(res_str, '\n'))) {
c7e0b5f0:	e1a0000a 	mov	r0, sl
c7e0b5f4:	e3a0100a 	mov	r1, #10	; 0xa
c7e0b5f8:	eb005cba 	bl	c7e228e8 <strchr>
c7e0b5fc:	e3500000 	cmp	r0, #0	; 0x0
c7e0b600:	1afffff8 	bne	c7e0b5e8 <insert_var_value_sub+0x278>
			*p = ' ';
		}
	}
	return (res_str == NULL) ? inp : res_str;
}
c7e0b604:	e35a0000 	cmp	sl, #0	; 0x0
c7e0b608:	11a0000a 	movne	r0, sl
c7e0b60c:	01a00006 	moveq	r0, r6
c7e0b610:	e28dd010 	add	sp, sp, #16	; 0x10
c7e0b614:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0b618:	c7e31f88 	.word	0xc7e31f88

c7e0b61c <insert_var_value>:
}
#endif

static char *insert_var_value(char *inp)
{
	return insert_var_value_sub(inp, 0);
c7e0b61c:	e3a01000 	mov	r1, #0	; 0x0
c7e0b620:	eaffff52 	b	c7e0b370 <insert_var_value_sub>

c7e0b624 <update_ifs_map>:
	const unsigned char *s;
	for (s=set; *s; s++) map[*s] = code;
}

void update_ifs_map(void)
{
c7e0b624:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
	/* char *ifs and char map[256] are both globals. */
	ifs = (uchar *)getenv("IFS");
c7e0b628:	e59f0070 	ldr	r0, [pc, #112]	; c7e0b6a0 <update_ifs_map+0x7c>
c7e0b62c:	ebffee9a 	bl	c7e0709c <getenv>
	if (ifs == NULL) ifs=(uchar *)" \t\n";
c7e0b630:	e3500000 	cmp	r0, #0	; 0x0
c7e0b634:	059f3068 	ldreq	r3, [pc, #104]	; c7e0b6a4 <update_ifs_map+0x80>
}

void update_ifs_map(void)
{
	/* char *ifs and char map[256] are both globals. */
	ifs = (uchar *)getenv("IFS");
c7e0b638:	e59f2068 	ldr	r2, [pc, #104]	; c7e0b6a8 <update_ifs_map+0x84>
	 * quickly up front.  Computation is necessary because of IFS.
	 * Special case handling of IFS == " \t\n" is not implemented.
	 * The map[] array only really needs two bits each, and on most machines
	 * that would be faster because of the reduced L1 cache footprint.
	 */
	memset(map,0,sizeof(map)); /* most characters flow through always */
c7e0b63c:	e59f5064 	ldr	r5, [pc, #100]	; c7e0b6a8 <update_ifs_map+0x84>
}

void update_ifs_map(void)
{
	/* char *ifs and char map[256] are both globals. */
	ifs = (uchar *)getenv("IFS");
c7e0b640:	e5820238 	str	r0, [r2, #568]
#ifndef __U_BOOT__
	mapset((uchar *)"\\$'\"`", 3);      /* never flow through */
	mapset((uchar *)"<>;&|(){}#", 1);   /* flow through if quoted */
#else
	{
		uchar subst[2] = {SUBSTED_VAR_SYMBOL, 0};
c7e0b644:	e28d4006 	add	r4, sp, #6	; 0x6

void update_ifs_map(void)
{
	/* char *ifs and char map[256] are both globals. */
	ifs = (uchar *)getenv("IFS");
	if (ifs == NULL) ifs=(uchar *)" \t\n";
c7e0b648:	05823238 	streq	r3, [r2, #568]
	 * quickly up front.  Computation is necessary because of IFS.
	 * Special case handling of IFS == " \t\n" is not implemented.
	 * The map[] array only really needs two bits each, and on most machines
	 * that would be faster because of the reduced L1 cache footprint.
	 */
	memset(map,0,sizeof(map)); /* most characters flow through always */
c7e0b64c:	e3a01000 	mov	r1, #0	; 0x0
c7e0b650:	e3a02c01 	mov	r2, #256	; 0x100
c7e0b654:	e1a00005 	mov	r0, r5
c7e0b658:	eb005d4d 	bl	c7e22b94 <memset>
#ifndef __U_BOOT__
	mapset((uchar *)"\\$'\"`", 3);      /* never flow through */
	mapset((uchar *)"<>;&|(){}#", 1);   /* flow through if quoted */
#else
	{
		uchar subst[2] = {SUBSTED_VAR_SYMBOL, 0};
c7e0b65c:	e3a02002 	mov	r2, #2	; 0x2
c7e0b660:	e59f1044 	ldr	r1, [pc, #68]	; c7e0b6ac <update_ifs_map+0x88>
c7e0b664:	e1a00004 	mov	r0, r4
c7e0b668:	eb005d73 	bl	c7e22c3c <memcpy>
		mapset(subst, 3);       /* never flow through */
c7e0b66c:	e1a00004 	mov	r0, r4
c7e0b670:	e3a01003 	mov	r1, #3	; 0x3
c7e0b674:	ebfffc3a 	bl	c7e0a764 <mapset>
	}
	mapset((uchar *)"\\$'\"", 3);       /* never flow through */
c7e0b678:	e59f0030 	ldr	r0, [pc, #48]	; c7e0b6b0 <update_ifs_map+0x8c>
c7e0b67c:	e3a01003 	mov	r1, #3	; 0x3
c7e0b680:	ebfffc37 	bl	c7e0a764 <mapset>
	mapset((uchar *)";&|#", 1);         /* flow through if quoted */
c7e0b684:	e59f0028 	ldr	r0, [pc, #40]	; c7e0b6b4 <update_ifs_map+0x90>
c7e0b688:	e3a01001 	mov	r1, #1	; 0x1
c7e0b68c:	ebfffc34 	bl	c7e0a764 <mapset>
#endif
	mapset(ifs, 2);            /* also flow through if quoted */
c7e0b690:	e5950238 	ldr	r0, [r5, #568]
c7e0b694:	e3a01002 	mov	r1, #2	; 0x2
c7e0b698:	ebfffc31 	bl	c7e0a764 <mapset>
}
c7e0b69c:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e0b6a0:	c7e31f8e 	.word	0xc7e31f8e
c7e0b6a4:	c7e31f92 	.word	0xc7e31f92
c7e0b6a8:	c7e40204 	.word	0xc7e40204
c7e0b6ac:	c7e2b336 	.word	0xc7e2b336
c7e0b6b0:	c7e31f96 	.word	0xc7e31f96
c7e0b6b4:	c7e31f9b 	.word	0xc7e31f9b

c7e0b6b8 <parse_stream_outer>:

/* most recursion does not come through here, the exeception is
 * from builtin_source() */
int parse_stream_outer(struct in_str *inp, int flag)
{
c7e0b6b8:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0b6bc:	e24dd030 	sub	sp, sp, #48	; 0x30
c7e0b6c0:	e1a06000 	mov	r6, r0
c7e0b6c4:	e1a0b001 	mov	fp, r1

	struct p_context ctx;
	o_string temp=NULL_O_STRING;
c7e0b6c8:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0b6cc:	e3a01000 	mov	r1, #0	; 0x0
c7e0b6d0:	e3a02014 	mov	r2, #20	; 0x14
c7e0b6d4:	eb005d2e 	bl	c7e22b94 <memset>
c7e0b6d8:	e3a09000 	mov	r9, #0	; 0x0
#ifdef __U_BOOT__
	int code = 0;
#endif
	do {
		ctx.type = flag;
		initialize_context(&ctx);
c7e0b6dc:	e1a0000d 	mov	r0, sp
	int rcode;
#ifdef __U_BOOT__
	int code = 0;
#endif
	do {
		ctx.type = flag;
c7e0b6e0:	e58db018 	str	fp, [sp, #24]
		initialize_context(&ctx);
c7e0b6e4:	ebfffd93 	bl	c7e0ad38 <initialize_context>
		update_ifs_map();
c7e0b6e8:	ebffffcd 	bl	c7e0b624 <update_ifs_map>
		if (!(flag & FLAG_PARSE_SEMICOLON) || (flag & FLAG_REPARSING)) mapset((uchar *)";$&|", 0);
c7e0b6ec:	e31b0002 	tst	fp, #2	; 0x2
c7e0b6f0:	0a000001 	beq	c7e0b6fc <parse_stream_outer+0x44>
c7e0b6f4:	e31b0004 	tst	fp, #4	; 0x4
c7e0b6f8:	0a000002 	beq	c7e0b708 <parse_stream_outer+0x50>
c7e0b6fc:	e59f05c8 	ldr	r0, [pc, #1480]	; c7e0bccc <parse_stream_outer+0x614>
c7e0b700:	e3a01000 	mov	r1, #0	; 0x0
c7e0b704:	ebfffc16 	bl	c7e0a764 <mapset>
		inp->promptmode=1;
c7e0b708:	e3a03001 	mov	r3, #1	; 0x1
c7e0b70c:	e5863008 	str	r3, [r6, #8]
c7e0b710:	ea000116 	b	c7e0bb70 <parse_stream_outer+0x4b8>

	debug_printf("parse_stream, end_trigger=%d\n",end_trigger);
	while ((ch=b_getch(input))!=EOF) {
		m = map[ch];
#ifdef __U_BOOT__
		if (input->__promptme == 0) return 1;
c7e0b714:	e5963004 	ldr	r3, [r6, #4]
c7e0b718:	e3530000 	cmp	r3, #0	; 0x0
	 * A single-quote triggers a bypass of the main loop until its mate is
	 * found.  When recursing, quote state is passed in via dest->quote. */

	debug_printf("parse_stream, end_trigger=%d\n",end_trigger);
	while ((ch=b_getch(input))!=EOF) {
		m = map[ch];
c7e0b71c:	e59f35ac 	ldr	r3, [pc, #1452]	; c7e0bcd0 <parse_stream_outer+0x618>
c7e0b720:	e7d34005 	ldrb	r4, [r3, r5]
#ifdef __U_BOOT__
		if (input->__promptme == 0) return 1;
c7e0b724:	0a000118 	beq	c7e0bb8c <parse_stream_outer+0x4d4>
#endif
		next = (ch == '\n') ? 0 : b_peek(input);
c7e0b728:	e355000a 	cmp	r5, #10	; 0xa
c7e0b72c:	03a07000 	moveq	r7, #0	; 0x0
c7e0b730:	0a000003 	beq	c7e0b744 <parse_stream_outer+0x8c>
c7e0b734:	e1a00006 	mov	r0, r6
c7e0b738:	e1a0e00f 	mov	lr, pc
c7e0b73c:	e596f010 	ldr	pc, [r6, #16]
c7e0b740:	e1a07000 	mov	r7, r0

		debug_printf("parse_stream: ch=%c (%d) m=%d quote=%d - %c\n",
			ch >= ' ' ? ch : '.', ch, m,
			dest->quote, ctx->stack == NULL ? '*' : '.');

		if (m==0 || ((m==1 || m==2) && dest->quote)) {
c7e0b744:	e3540000 	cmp	r4, #0	; 0x0
c7e0b748:	0a000005 	beq	c7e0b764 <parse_stream_outer+0xac>
c7e0b74c:	e2443001 	sub	r3, r4, #1	; 0x1
c7e0b750:	e3530001 	cmp	r3, #1	; 0x1
c7e0b754:	8a000005 	bhi	c7e0b770 <parse_stream_outer+0xb8>
c7e0b758:	e59d3028 	ldr	r3, [sp, #40]
c7e0b75c:	e3530000 	cmp	r3, #0	; 0x0
c7e0b760:	0a000002 	beq	c7e0b770 <parse_stream_outer+0xb8>
			b_addqchr(dest, ch, dest->quote);
c7e0b764:	e1a01005 	mov	r1, r5
c7e0b768:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0b76c:	ea000044 	b	c7e0b884 <parse_stream_outer+0x1cc>
		} else {
			if (m==2) {  /* unquoted IFS */
c7e0b770:	e3540002 	cmp	r4, #2	; 0x2
c7e0b774:	1a00000b 	bne	c7e0b7a8 <parse_stream_outer+0xf0>
				if (done_word(dest, ctx)) {
c7e0b778:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0b77c:	e1a0100d 	mov	r1, sp
c7e0b780:	ebfffdf9 	bl	c7e0af6c <done_word>
c7e0b784:	e3500000 	cmp	r0, #0	; 0x0
c7e0b788:	e1a0a00d 	mov	sl, sp
c7e0b78c:	1a0000fe 	bne	c7e0bb8c <parse_stream_outer+0x4d4>
					return 1;
				}
				/* If we aren't performing a substitution, treat a newline as a
				 * command separator.  */
				if (end_trigger != '\0' && ch=='\n')
c7e0b790:	e355000a 	cmp	r5, #10	; 0xa
c7e0b794:	1a0000f5 	bne	c7e0bb70 <parse_stream_outer+0x4b8>
					done_pipe(ctx,PIPE_SEQ);
c7e0b798:	e1a0000d 	mov	r0, sp
c7e0b79c:	e3a01001 	mov	r1, #1	; 0x1
c7e0b7a0:	ebfffd72 	bl	c7e0ad70 <done_pipe>
c7e0b7a4:	ea000001 	b	c7e0b7b0 <parse_stream_outer+0xf8>
			}
			if (ch == end_trigger && !dest->quote && ctx->w==RES_NONE) {
c7e0b7a8:	e355000a 	cmp	r5, #10	; 0xa
c7e0b7ac:	1a000008 	bne	c7e0b7d4 <parse_stream_outer+0x11c>
c7e0b7b0:	e59d3028 	ldr	r3, [sp, #40]
c7e0b7b4:	e3530000 	cmp	r3, #0	; 0x0
c7e0b7b8:	1a000003 	bne	c7e0b7cc <parse_stream_outer+0x114>
c7e0b7bc:	e59d300c 	ldr	r3, [sp, #12]
c7e0b7c0:	e3530000 	cmp	r3, #0	; 0x0
c7e0b7c4:	01a07003 	moveq	r7, r3
c7e0b7c8:	0a00013b 	beq	c7e0bcbc <parse_stream_outer+0x604>
				done_pipe(ctx,PIPE_SEQ);
				run_list(ctx->list_head);
				initialize_context(ctx);
			}
#endif
			if (m!=2) switch (ch) {
c7e0b7cc:	e3540002 	cmp	r4, #2	; 0x2
c7e0b7d0:	0a0000e6 	beq	c7e0bb70 <parse_stream_outer+0x4b8>
c7e0b7d4:	e3550026 	cmp	r5, #38	; 0x26
c7e0b7d8:	0a0000b7 	beq	c7e0babc <parse_stream_outer+0x404>
c7e0b7dc:	8a00000a 	bhi	c7e0b80c <parse_stream_outer+0x154>
c7e0b7e0:	e3550022 	cmp	r5, #34	; 0x22
c7e0b7e4:	0a0000a6 	beq	c7e0ba84 <parse_stream_outer+0x3cc>
c7e0b7e8:	8a000002 	bhi	c7e0b7f8 <parse_stream_outer+0x140>
c7e0b7ec:	e3550004 	cmp	r5, #4	; 0x4
c7e0b7f0:	1a0000dc 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
c7e0b7f4:	ea0000c9 	b	c7e0bb20 <parse_stream_outer+0x468>
c7e0b7f8:	e3550023 	cmp	r5, #35	; 0x23
c7e0b7fc:	0a00000d 	beq	c7e0b838 <parse_stream_outer+0x180>
c7e0b800:	e3550024 	cmp	r5, #36	; 0x24
c7e0b804:	1a0000d7 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
c7e0b808:	ea00002d 	b	c7e0b8c4 <parse_stream_outer+0x20c>
c7e0b80c:	e355003b 	cmp	r5, #59	; 0x3b
c7e0b810:	0a0000a2 	beq	c7e0baa0 <parse_stream_outer+0x3e8>
c7e0b814:	8a000002 	bhi	c7e0b824 <parse_stream_outer+0x16c>
c7e0b818:	e3550027 	cmp	r5, #39	; 0x27
c7e0b81c:	1a0000d1 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
c7e0b820:	ea000086 	b	c7e0ba40 <parse_stream_outer+0x388>
c7e0b824:	e355005c 	cmp	r5, #92	; 0x5c
c7e0b828:	0a000018 	beq	c7e0b890 <parse_stream_outer+0x1d8>
c7e0b82c:	e355007c 	cmp	r5, #124	; 0x7c
c7e0b830:	1a0000cc 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
c7e0b834:	ea0000ac 	b	c7e0baec <parse_stream_outer+0x434>
		case '#':
			if (dest->length == 0 && !dest->quote) {
c7e0b838:	e59d3020 	ldr	r3, [sp, #32]
c7e0b83c:	e3530000 	cmp	r3, #0	; 0x0
c7e0b840:	1a00000d 	bne	c7e0b87c <parse_stream_outer+0x1c4>
c7e0b844:	e59d3028 	ldr	r3, [sp, #40]
c7e0b848:	e3530000 	cmp	r3, #0	; 0x0
c7e0b84c:	1a00000a 	bne	c7e0b87c <parse_stream_outer+0x1c4>
c7e0b850:	ea000001 	b	c7e0b85c <parse_stream_outer+0x1a4>
				while(ch=b_peek(input),ch!=EOF && ch!='\n') { b_getch(input); }
c7e0b854:	e1a0e00f 	mov	lr, pc
c7e0b858:	e596f00c 	ldr	pc, [r6, #12]
c7e0b85c:	e1a00006 	mov	r0, r6
c7e0b860:	e1a0e00f 	mov	lr, pc
c7e0b864:	e596f010 	ldr	pc, [r6, #16]
c7e0b868:	e350000a 	cmp	r0, #10	; 0xa
c7e0b86c:	13700001 	cmnne	r0, #1	; 0x1
c7e0b870:	e1a00006 	mov	r0, r6
c7e0b874:	1afffff6 	bne	c7e0b854 <parse_stream_outer+0x19c>
c7e0b878:	ea0000bc 	b	c7e0bb70 <parse_stream_outer+0x4b8>
			} else {
				b_addqchr(dest, ch, dest->quote);
c7e0b87c:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0b880:	e3a01023 	mov	r1, #35	; 0x23
c7e0b884:	e59d2028 	ldr	r2, [sp, #40]
c7e0b888:	ebfffe17 	bl	c7e0b0ec <b_addqchr>
c7e0b88c:	ea0000b7 	b	c7e0bb70 <parse_stream_outer+0x4b8>
			}
			break;
		case '\\':
			if (next == EOF) {
c7e0b890:	e3770001 	cmn	r7, #1	; 0x1
c7e0b894:	0a0000b3 	beq	c7e0bb68 <parse_stream_outer+0x4b0>
				syntax();
				return 1;
			}
			b_addqchr(dest, '\\', dest->quote);
c7e0b898:	e28d401c 	add	r4, sp, #28	; 0x1c
c7e0b89c:	e1a01005 	mov	r1, r5
c7e0b8a0:	e59d2028 	ldr	r2, [sp, #40]
c7e0b8a4:	e1a00004 	mov	r0, r4
c7e0b8a8:	ebfffe0f 	bl	c7e0b0ec <b_addqchr>
			b_addqchr(dest, b_getch(input), dest->quote);
c7e0b8ac:	e1a00006 	mov	r0, r6
c7e0b8b0:	e1a0e00f 	mov	lr, pc
c7e0b8b4:	e596f00c 	ldr	pc, [r6, #12]
c7e0b8b8:	e1a01000 	mov	r1, r0
c7e0b8bc:	e1a00004 	mov	r0, r4
c7e0b8c0:	eaffffef 	b	c7e0b884 <parse_stream_outer+0x1cc>
	int advance=0;
#endif
#ifndef __U_BOOT__
	char sep[]=" ";
#endif
	int ch = input->peek(input);  /* first character after the $ */
c7e0b8c4:	e1a00006 	mov	r0, r6
c7e0b8c8:	e1a0e00f 	mov	lr, pc
c7e0b8cc:	e596f010 	ldr	pc, [r6, #16]
	debug_printf("handle_dollar: ch=%c\n",ch);
	if (isalpha(ch)) {
c7e0b8d0:	e59f23fc 	ldr	r2, [pc, #1020]	; c7e0bcd4 <parse_stream_outer+0x61c>
c7e0b8d4:	e20030ff 	and	r3, r0, #255	; 0xff
c7e0b8d8:	e7d23003 	ldrb	r3, [r2, r3]
	int advance=0;
#endif
#ifndef __U_BOOT__
	char sep[]=" ";
#endif
	int ch = input->peek(input);  /* first character after the $ */
c7e0b8dc:	e1a07000 	mov	r7, r0
	debug_printf("handle_dollar: ch=%c\n",ch);
	if (isalpha(ch)) {
c7e0b8e0:	e3130003 	tst	r3, #3	; 0x3
c7e0b8e4:	0a00001d 	beq	c7e0b960 <parse_stream_outer+0x2a8>
		b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b8e8:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0b8ec:	e3a01003 	mov	r1, #3	; 0x3
c7e0b8f0:	ebfffd7e 	bl	c7e0aef0 <b_addchr>
		ctx->child->sp++;
c7e0b8f4:	e59d2000 	ldr	r2, [sp]
c7e0b8f8:	e592300c 	ldr	r3, [r2, #12]
c7e0b8fc:	e2833001 	add	r3, r3, #1	; 0x1
c7e0b900:	e582300c 	str	r3, [r2, #12]
c7e0b904:	ea000004 	b	c7e0b91c <parse_stream_outer+0x264>
		while(ch=b_peek(input),isalnum(ch) || ch=='_') {
			b_getch(input);
c7e0b908:	e1a0e00f 	mov	lr, pc
c7e0b90c:	e596f00c 	ldr	pc, [r6, #12]
			b_addchr(dest,ch);
c7e0b910:	e1a00004 	mov	r0, r4
c7e0b914:	e1a01005 	mov	r1, r5
c7e0b918:	ebfffd74 	bl	c7e0aef0 <b_addchr>
	int ch = input->peek(input);  /* first character after the $ */
	debug_printf("handle_dollar: ch=%c\n",ch);
	if (isalpha(ch)) {
		b_addchr(dest, SPECIAL_VAR_SYMBOL);
		ctx->child->sp++;
		while(ch=b_peek(input),isalnum(ch) || ch=='_') {
c7e0b91c:	e1a00006 	mov	r0, r6
c7e0b920:	e1a0e00f 	mov	lr, pc
c7e0b924:	e596f010 	ldr	pc, [r6, #16]
c7e0b928:	e59f33a4 	ldr	r3, [pc, #932]	; c7e0bcd4 <parse_stream_outer+0x61c>
c7e0b92c:	e1a05000 	mov	r5, r0
c7e0b930:	e20520ff 	and	r2, r5, #255	; 0xff
c7e0b934:	e7d33002 	ldrb	r3, [r3, r2]
			b_getch(input);
c7e0b938:	e1a00006 	mov	r0, r6
	int ch = input->peek(input);  /* first character after the $ */
	debug_printf("handle_dollar: ch=%c\n",ch);
	if (isalpha(ch)) {
		b_addchr(dest, SPECIAL_VAR_SYMBOL);
		ctx->child->sp++;
		while(ch=b_peek(input),isalnum(ch) || ch=='_') {
c7e0b93c:	e2133007 	ands	r3, r3, #7	; 0x7
c7e0b940:	13a03001 	movne	r3, #1	; 0x1
c7e0b944:	e355005f 	cmp	r5, #95	; 0x5f
c7e0b948:	03833001 	orreq	r3, r3, #1	; 0x1
c7e0b94c:	e3530000 	cmp	r3, #0	; 0x0
c7e0b950:	e28d401c 	add	r4, sp, #28	; 0x1c
c7e0b954:	1affffeb 	bne	c7e0b908 <parse_stream_outer+0x250>
			b_getch(input);
			b_addchr(dest,ch);
		}
		b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b958:	e1a00004 	mov	r0, r4
c7e0b95c:	ea000034 	b	c7e0ba34 <parse_stream_outer+0x37c>
		if (i<global_argc) {
			parse_string(dest, ctx, global_argv[i]); /* recursion */
		}
		advance = 1;
#endif
	} else switch (ch) {
c7e0b960:	e350003f 	cmp	r0, #63	; 0x3f
c7e0b964:	0a000005 	beq	c7e0b980 <parse_stream_outer+0x2c8>
c7e0b968:	e350007b 	cmp	r0, #123	; 0x7b
c7e0b96c:	e28d401c 	add	r4, sp, #28	; 0x1c
			error_msg("unhandled syntax: $%c",ch);
			return 1;
			break;
#endif
		default:
			b_addqchr(dest,'$',dest->quote);
c7e0b970:	11a00004 	movne	r0, r4
c7e0b974:	11a01005 	movne	r1, r5
		if (i<global_argc) {
			parse_string(dest, ctx, global_argv[i]); /* recursion */
		}
		advance = 1;
#endif
	} else switch (ch) {
c7e0b978:	1affffc1 	bne	c7e0b884 <parse_stream_outer+0x1cc>
c7e0b97c:	ea000014 	b	c7e0b9d4 <parse_stream_outer+0x31c>
#endif
		case '?':
#ifndef __U_BOOT__
			b_adduint(dest,last_return_code);
#else
			ctx->child->sp++;
c7e0b980:	e59d2000 	ldr	r2, [sp]
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b984:	e28d401c 	add	r4, sp, #28	; 0x1c
#endif
		case '?':
#ifndef __U_BOOT__
			b_adduint(dest,last_return_code);
#else
			ctx->child->sp++;
c7e0b988:	e592300c 	ldr	r3, [r2, #12]
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b98c:	e1a00004 	mov	r0, r4
#endif
		case '?':
#ifndef __U_BOOT__
			b_adduint(dest,last_return_code);
#else
			ctx->child->sp++;
c7e0b990:	e2833001 	add	r3, r3, #1	; 0x1
c7e0b994:	e582300c 	str	r3, [r2, #12]
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b998:	e3a01003 	mov	r1, #3	; 0x3
c7e0b99c:	ebfffd53 	bl	c7e0aef0 <b_addchr>
			b_addchr(dest, '$');
c7e0b9a0:	e1a01005 	mov	r1, r5
c7e0b9a4:	e1a00004 	mov	r0, r4
c7e0b9a8:	ebfffd50 	bl	c7e0aef0 <b_addchr>
			b_addchr(dest, '?');
c7e0b9ac:	e1a01007 	mov	r1, r7
c7e0b9b0:	e1a00004 	mov	r0, r4
c7e0b9b4:	ebfffd4d 	bl	c7e0aef0 <b_addchr>
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b9b8:	e1a00004 	mov	r0, r4
c7e0b9bc:	e3a01003 	mov	r1, #3	; 0x3
c7e0b9c0:	ebfffd4a 	bl	c7e0aef0 <b_addchr>
	/* Eat the character if the flag was set.  If the compiler
	 * is smart enough, we could substitute "b_getch(input);"
	 * for all the "advance = 1;" above, and also end up with
	 * a nice size-optimized program.  Hah!  That'll be the day.
	 */
	if (advance) b_getch(input);
c7e0b9c4:	e1a00006 	mov	r0, r6
c7e0b9c8:	e1a0e00f 	mov	lr, pc
c7e0b9cc:	e596f00c 	ldr	pc, [r6, #12]
c7e0b9d0:	ea000066 	b	c7e0bb70 <parse_stream_outer+0x4b8>
			b_adduint(dest,global_argc ? global_argc-1 : 0);
			advance = 1;
			break;
#endif
		case '{':
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0b9d4:	e1a00004 	mov	r0, r4
c7e0b9d8:	e3a01003 	mov	r1, #3	; 0x3
c7e0b9dc:	ebfffd43 	bl	c7e0aef0 <b_addchr>
			ctx->child->sp++;
c7e0b9e0:	e59d2000 	ldr	r2, [sp]
			b_getch(input);
c7e0b9e4:	e1a00006 	mov	r0, r6
			advance = 1;
			break;
#endif
		case '{':
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
			ctx->child->sp++;
c7e0b9e8:	e592300c 	ldr	r3, [r2, #12]
c7e0b9ec:	e2833001 	add	r3, r3, #1	; 0x1
c7e0b9f0:	e582300c 	str	r3, [r2, #12]
			b_getch(input);
c7e0b9f4:	e1a0e00f 	mov	lr, pc
c7e0b9f8:	e596f00c 	ldr	pc, [r6, #12]
c7e0b9fc:	ea000000 	b	c7e0ba04 <parse_stream_outer+0x34c>
			/* XXX maybe someone will try to escape the '}' */
			while(ch=b_getch(input),ch!=EOF && ch!='}') {
				b_addchr(dest,ch);
c7e0ba00:	ebfffd3a 	bl	c7e0aef0 <b_addchr>
		case '{':
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
			ctx->child->sp++;
			b_getch(input);
			/* XXX maybe someone will try to escape the '}' */
			while(ch=b_getch(input),ch!=EOF && ch!='}') {
c7e0ba04:	e1a00006 	mov	r0, r6
c7e0ba08:	e1a0e00f 	mov	lr, pc
c7e0ba0c:	e596f00c 	ldr	pc, [r6, #12]
c7e0ba10:	e1a03000 	mov	r3, r0
c7e0ba14:	e353007d 	cmp	r3, #125	; 0x7d
c7e0ba18:	13730001 	cmnne	r3, #1	; 0x1
				b_addchr(dest,ch);
c7e0ba1c:	e1a01000 	mov	r1, r0
c7e0ba20:	e28d001c 	add	r0, sp, #28	; 0x1c
		case '{':
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
			ctx->child->sp++;
			b_getch(input);
			/* XXX maybe someone will try to escape the '}' */
			while(ch=b_getch(input),ch!=EOF && ch!='}') {
c7e0ba24:	1afffff5 	bne	c7e0ba00 <parse_stream_outer+0x348>
				b_addchr(dest,ch);
			}
			if (ch != '}') {
c7e0ba28:	e353007d 	cmp	r3, #125	; 0x7d
c7e0ba2c:	1a00004d 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
				syntax();
				return 1;
			}
			b_addchr(dest, SPECIAL_VAR_SYMBOL);
c7e0ba30:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0ba34:	e3a01003 	mov	r1, #3	; 0x3
c7e0ba38:	ebfffd2c 	bl	c7e0aef0 <b_addchr>
c7e0ba3c:	ea00004b 	b	c7e0bb70 <parse_stream_outer+0x4b8>
			break;
		case '$':
			if (handle_dollar(dest, ctx, input)!=0) return 1;
			break;
		case '\'':
			dest->nonnull = 1;
c7e0ba40:	e3a03001 	mov	r3, #1	; 0x1
c7e0ba44:	e58d302c 	str	r3, [sp, #44]
c7e0ba48:	ea000003 	b	c7e0ba5c <parse_stream_outer+0x3a4>
			while(ch=b_getch(input),ch!=EOF && ch!='\'') {
#ifdef __U_BOOT__
				if(input->__promptme == 0) return 1;
c7e0ba4c:	e5963004 	ldr	r3, [r6, #4]
c7e0ba50:	e3530000 	cmp	r3, #0	; 0x0
c7e0ba54:	0a00004c 	beq	c7e0bb8c <parse_stream_outer+0x4d4>
#endif
				b_addchr(dest,ch);
c7e0ba58:	ebfffd24 	bl	c7e0aef0 <b_addchr>
		case '$':
			if (handle_dollar(dest, ctx, input)!=0) return 1;
			break;
		case '\'':
			dest->nonnull = 1;
			while(ch=b_getch(input),ch!=EOF && ch!='\'') {
c7e0ba5c:	e1a00006 	mov	r0, r6
c7e0ba60:	e1a0e00f 	mov	lr, pc
c7e0ba64:	e596f00c 	ldr	pc, [r6, #12]
c7e0ba68:	e1a03000 	mov	r3, r0
c7e0ba6c:	e3530027 	cmp	r3, #39	; 0x27
c7e0ba70:	13730001 	cmnne	r3, #1	; 0x1
#ifdef __U_BOOT__
				if(input->__promptme == 0) return 1;
#endif
				b_addchr(dest,ch);
c7e0ba74:	e1a01000 	mov	r1, r0
c7e0ba78:	e28d001c 	add	r0, sp, #28	; 0x1c
		case '$':
			if (handle_dollar(dest, ctx, input)!=0) return 1;
			break;
		case '\'':
			dest->nonnull = 1;
			while(ch=b_getch(input),ch!=EOF && ch!='\'') {
c7e0ba7c:	1afffff2 	bne	c7e0ba4c <parse_stream_outer+0x394>
c7e0ba80:	ea000036 	b	c7e0bb60 <parse_stream_outer+0x4a8>
				return 1;
			}
			break;
		case '"':
			dest->nonnull = 1;
			dest->quote = !dest->quote;
c7e0ba84:	e59d3028 	ldr	r3, [sp, #40]
				syntax();
				return 1;
			}
			break;
		case '"':
			dest->nonnull = 1;
c7e0ba88:	e3a02001 	mov	r2, #1	; 0x1
			dest->quote = !dest->quote;
c7e0ba8c:	e2733001 	rsbs	r3, r3, #1	; 0x1
c7e0ba90:	33a03000 	movcc	r3, #0	; 0x0
				syntax();
				return 1;
			}
			break;
		case '"':
			dest->nonnull = 1;
c7e0ba94:	e58d202c 	str	r2, [sp, #44]
			dest->quote = !dest->quote;
c7e0ba98:	e58d3028 	str	r3, [sp, #40]
c7e0ba9c:	ea000033 	b	c7e0bb70 <parse_stream_outer+0x4b8>
			}
			setup_redirect(ctx, redir_fd, redir_style, input);
			break;
#endif
		case ';':
			done_word(dest, ctx);
c7e0baa0:	e1a0100d 	mov	r1, sp
c7e0baa4:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0baa8:	ebfffd2f 	bl	c7e0af6c <done_word>
c7e0baac:	e1a0400d 	mov	r4, sp
			done_pipe(ctx,PIPE_SEQ);
c7e0bab0:	e1a0000d 	mov	r0, sp
c7e0bab4:	e3a01001 	mov	r1, #1	; 0x1
c7e0bab8:	ea000016 	b	c7e0bb18 <parse_stream_outer+0x460>
			break;
		case '&':
			done_word(dest, ctx);
c7e0babc:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0bac0:	e1a0100d 	mov	r1, sp
c7e0bac4:	ebfffd28 	bl	c7e0af6c <done_word>
			if (next=='&') {
c7e0bac8:	e3570026 	cmp	r7, #38	; 0x26
		case ';':
			done_word(dest, ctx);
			done_pipe(ctx,PIPE_SEQ);
			break;
		case '&':
			done_word(dest, ctx);
c7e0bacc:	e1a0400d 	mov	r4, sp
			if (next=='&') {
c7e0bad0:	1a000024 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
				b_getch(input);
c7e0bad4:	e1a00006 	mov	r0, r6
c7e0bad8:	e1a0e00f 	mov	lr, pc
c7e0badc:	e596f00c 	ldr	pc, [r6, #12]
				done_pipe(ctx,PIPE_AND);
c7e0bae0:	e1a0000d 	mov	r0, sp
c7e0bae4:	e3a01002 	mov	r1, #2	; 0x2
c7e0bae8:	ea00000a 	b	c7e0bb18 <parse_stream_outer+0x460>
				return 1;
#endif
			}
			break;
		case '|':
			done_word(dest, ctx);
c7e0baec:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0baf0:	e1a0100d 	mov	r1, sp
c7e0baf4:	ebfffd1c 	bl	c7e0af6c <done_word>
			if (next=='|') {
c7e0baf8:	e357007c 	cmp	r7, #124	; 0x7c
				return 1;
#endif
			}
			break;
		case '|':
			done_word(dest, ctx);
c7e0bafc:	e1a0400d 	mov	r4, sp
			if (next=='|') {
c7e0bb00:	1a000018 	bne	c7e0bb68 <parse_stream_outer+0x4b0>
				b_getch(input);
c7e0bb04:	e1a00006 	mov	r0, r6
c7e0bb08:	e1a0e00f 	mov	lr, pc
c7e0bb0c:	e596f00c 	ldr	pc, [r6, #12]
				done_pipe(ctx,PIPE_OR);
c7e0bb10:	e1a0000d 	mov	r0, sp
c7e0bb14:	e3a01003 	mov	r1, #3	; 0x3
c7e0bb18:	ebfffc94 	bl	c7e0ad70 <done_pipe>
c7e0bb1c:	ea000013 	b	c7e0bb70 <parse_stream_outer+0x4b8>
			syntax();   /* Proper use of this character caught by end_trigger */
			return 1;
			break;
#endif
		case SUBSTED_VAR_SYMBOL:
			dest->nonnull = 1;
c7e0bb20:	e3a03001 	mov	r3, #1	; 0x1
c7e0bb24:	e58d302c 	str	r3, [sp, #44]
c7e0bb28:	ea000003 	b	c7e0bb3c <parse_stream_outer+0x484>
			while (ch = b_getch(input), ch != EOF &&
			    ch != SUBSTED_VAR_SYMBOL) {
				debug_printf("subst, pass=%d\n", ch);
				if (input->__promptme == 0)
c7e0bb2c:	e5963004 	ldr	r3, [r6, #4]
c7e0bb30:	e3530000 	cmp	r3, #0	; 0x0
c7e0bb34:	0a000014 	beq	c7e0bb8c <parse_stream_outer+0x4d4>
					return 1;
				b_addchr(dest, ch);
c7e0bb38:	ebfffcec 	bl	c7e0aef0 <b_addchr>
			return 1;
			break;
#endif
		case SUBSTED_VAR_SYMBOL:
			dest->nonnull = 1;
			while (ch = b_getch(input), ch != EOF &&
c7e0bb3c:	e1a00006 	mov	r0, r6
c7e0bb40:	e1a0e00f 	mov	lr, pc
c7e0bb44:	e596f00c 	ldr	pc, [r6, #12]
c7e0bb48:	e1a03000 	mov	r3, r0
c7e0bb4c:	e3530004 	cmp	r3, #4	; 0x4
c7e0bb50:	13730001 	cmnne	r3, #1	; 0x1
			    ch != SUBSTED_VAR_SYMBOL) {
				debug_printf("subst, pass=%d\n", ch);
				if (input->__promptme == 0)
					return 1;
				b_addchr(dest, ch);
c7e0bb54:	e1a01000 	mov	r1, r0
c7e0bb58:	e28d001c 	add	r0, sp, #28	; 0x1c
			return 1;
			break;
#endif
		case SUBSTED_VAR_SYMBOL:
			dest->nonnull = 1;
			while (ch = b_getch(input), ch != EOF &&
c7e0bb5c:	1afffff2 	bne	c7e0bb2c <parse_stream_outer+0x474>
				if (input->__promptme == 0)
					return 1;
				b_addchr(dest, ch);
			}
			debug_printf("subst, term=%d\n", ch);
			if (ch == EOF) {
c7e0bb60:	e3730001 	cmn	r3, #1	; 0x1
c7e0bb64:	1a000001 	bne	c7e0bb70 <parse_stream_outer+0x4b8>
				syntax();
				return 1;
			}
			break;
		default:
			syntax();   /* this is really an internal logic error */
c7e0bb68:	ebfffb07 	bl	c7e0a78c <syntax_err>
c7e0bb6c:	ea000006 	b	c7e0bb8c <parse_stream_outer+0x4d4>
	/* Only double-quote state is handled in the state variable dest->quote.
	 * A single-quote triggers a bypass of the main loop until its mate is
	 * found.  When recursing, quote state is passed in via dest->quote. */

	debug_printf("parse_stream, end_trigger=%d\n",end_trigger);
	while ((ch=b_getch(input))!=EOF) {
c7e0bb70:	e1a00006 	mov	r0, r6
c7e0bb74:	e1a0e00f 	mov	lr, pc
c7e0bb78:	e596f00c 	ldr	pc, [r6, #12]
c7e0bb7c:	e3700001 	cmn	r0, #1	; 0x1
c7e0bb80:	e1a05000 	mov	r5, r0
c7e0bb84:	1afffee2 	bne	c7e0b714 <parse_stream_outer+0x5c>
c7e0bb88:	ea00004a 	b	c7e0bcb8 <parse_stream_outer+0x600>
		update_ifs_map();
		if (!(flag & FLAG_PARSE_SEMICOLON) || (flag & FLAG_REPARSING)) mapset((uchar *)";$&|", 0);
		inp->promptmode=1;
		rcode = parse_stream(&temp, &ctx, inp, '\n');
#ifdef __U_BOOT__
		if (rcode == 1) flag_repeat = 0;
c7e0bb8c:	e59f313c 	ldr	r3, [pc, #316]	; c7e0bcd0 <parse_stream_outer+0x618>
c7e0bb90:	e3a02000 	mov	r2, #0	; 0x0
c7e0bb94:	e5832104 	str	r2, [r3, #260]
c7e0bb98:	e3a07001 	mov	r7, #1	; 0x1
c7e0bb9c:	ea000023 	b	c7e0bc30 <parse_stream_outer+0x578>
#endif
		if (rcode != 1 && ctx.old_flag != 0) {
			syntax();
c7e0bba0:	ebfffaf9 	bl	c7e0a78c <syntax_err>
#ifdef __U_BOOT__
			flag_repeat = 0;
c7e0bba4:	e59f3124 	ldr	r3, [pc, #292]	; c7e0bcd0 <parse_stream_outer+0x618>
c7e0bba8:	e3a02000 	mov	r2, #0	; 0x0
c7e0bbac:	e5832104 	str	r2, [r3, #260]
c7e0bbb0:	ea00003c 	b	c7e0bca8 <parse_stream_outer+0x5f0>
#endif
		}
		if (rcode != 1 && ctx.old_flag == 0) {
			done_word(&temp, &ctx);
c7e0bbb4:	e28da01c 	add	sl, sp, #28	; 0x1c
c7e0bbb8:	e1a0100d 	mov	r1, sp
c7e0bbbc:	e1a0000a 	mov	r0, sl
c7e0bbc0:	ebfffce9 	bl	c7e0af6c <done_word>
			done_pipe(&ctx,PIPE_SEQ);
c7e0bbc4:	e3a01001 	mov	r1, #1	; 0x1
c7e0bbc8:	e1a0000d 	mov	r0, sp
c7e0bbcc:	ebfffc67 	bl	c7e0ad70 <done_pipe>
#ifndef __U_BOOT__
			run_list(ctx.list_head);
#else
			code = run_list(ctx.list_head);
c7e0bbd0:	e59d4004 	ldr	r4, [sp, #4]
{
	int rcode=0;
#ifndef __U_BOOT__
	if (fake_mode==0) {
#endif
		rcode = run_list_real(pi);
c7e0bbd4:	e1a00004 	mov	r0, r4
c7e0bbd8:	eb000084 	bl	c7e0bdf0 <run_list_real>
	}
#endif
	/* free_pipe_list has the side effect of clearing memory
	 * In the long run that function can be merged with run_list_real,
	 * but doing that now would hobble the debugging effort. */
	free_pipe_list(pi,0);
c7e0bbdc:	e1a01005 	mov	r1, r5
{
	int rcode=0;
#ifndef __U_BOOT__
	if (fake_mode==0) {
#endif
		rcode = run_list_real(pi);
c7e0bbe0:	e1a09000 	mov	r9, r0
	}
#endif
	/* free_pipe_list has the side effect of clearing memory
	 * In the long run that function can be merged with run_list_real,
	 * but doing that now would hobble the debugging effort. */
	free_pipe_list(pi,0);
c7e0bbe4:	e1a00004 	mov	r0, r4
c7e0bbe8:	ebfffbbf 	bl	c7e0aaec <free_pipe_list>
			done_pipe(&ctx,PIPE_SEQ);
#ifndef __U_BOOT__
			run_list(ctx.list_head);
#else
			code = run_list(ctx.list_head);
			if (code == -2) {	/* exit */
c7e0bbec:	e3790002 	cmn	r9, #2	; 0x2
c7e0bbf0:	1a00000a 	bne	c7e0bc20 <parse_stream_outer+0x568>
				b_free(&temp);
c7e0bbf4:	e1a0000a 	mov	r0, sl
c7e0bbf8:	ebfffbf4 	bl	c7e0abd0 <b_free>
				code = 0;
				/* XXX hackish way to not allow exit from main loop */
				if (inp->peek == file_peek) {
c7e0bbfc:	e5962010 	ldr	r2, [r6, #16]
c7e0bc00:	e59f30d0 	ldr	r3, [pc, #208]	; c7e0bcd8 <parse_stream_outer+0x620>
c7e0bc04:	e1520003 	cmp	r2, r3
c7e0bc08:	11a09005 	movne	r9, r5
c7e0bc0c:	1a000021 	bne	c7e0bc98 <parse_stream_outer+0x5e0>
					printf("exit not allowed from main input shell.\n");
c7e0bc10:	e59f00c4 	ldr	r0, [pc, #196]	; c7e0bcdc <parse_stream_outer+0x624>
c7e0bc14:	e1a09005 	mov	r9, r5
c7e0bc18:	ebfff38e 	bl	c7e08a58 <printf>
c7e0bc1c:	ea000019 	b	c7e0bc88 <parse_stream_outer+0x5d0>
					continue;
				}
				break;
			}
			if (code == -1)
c7e0bc20:	e3790001 	cmn	r9, #1	; 0x1
			    flag_repeat = 0;
c7e0bc24:	059f30a4 	ldreq	r3, [pc, #164]	; c7e0bcd0 <parse_stream_outer+0x618>
c7e0bc28:	05835104 	streq	r5, [r3, #260]
c7e0bc2c:	ea000013 	b	c7e0bc80 <parse_stream_outer+0x5c8>
#endif
		} else {
			if (ctx.old_flag != 0) {
c7e0bc30:	e59d3010 	ldr	r3, [sp, #16]
c7e0bc34:	e3530000 	cmp	r3, #0	; 0x0
c7e0bc38:	0a000003 	beq	c7e0bc4c <parse_stream_outer+0x594>
				free(ctx.stack);
c7e0bc3c:	e59d0014 	ldr	r0, [sp, #20]
c7e0bc40:	ebfff4c6 	bl	c7e08f60 <free>
				b_reset(&temp);
c7e0bc44:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0bc48:	ebfffa8b 	bl	c7e0a67c <b_reset>
			}
#ifdef __U_BOOT__
			if (inp->__promptme == 0) printf("<INTERRUPT>\n");
c7e0bc4c:	e5963004 	ldr	r3, [r6, #4]
c7e0bc50:	e3530000 	cmp	r3, #0	; 0x0
c7e0bc54:	1a000001 	bne	c7e0bc60 <parse_stream_outer+0x5a8>
c7e0bc58:	e59f0080 	ldr	r0, [pc, #128]	; c7e0bce0 <parse_stream_outer+0x628>
c7e0bc5c:	ebfff37d 	bl	c7e08a58 <printf>
			inp->__promptme = 1;
#endif
			temp.nonnull = 0;
c7e0bc60:	e3a02000 	mov	r2, #0	; 0x0
				free(ctx.stack);
				b_reset(&temp);
			}
#ifdef __U_BOOT__
			if (inp->__promptme == 0) printf("<INTERRUPT>\n");
			inp->__promptme = 1;
c7e0bc64:	e3a03001 	mov	r3, #1	; 0x1
c7e0bc68:	e886000c 	stm	r6, {r2, r3}
#endif
			temp.nonnull = 0;
			temp.quote = 0;
			inp->p = NULL;
			free_pipe_list(ctx.list_head,0);
c7e0bc6c:	e1a01002 	mov	r1, r2
c7e0bc70:	e59d0004 	ldr	r0, [sp, #4]
			}
#ifdef __U_BOOT__
			if (inp->__promptme == 0) printf("<INTERRUPT>\n");
			inp->__promptme = 1;
#endif
			temp.nonnull = 0;
c7e0bc74:	e58d202c 	str	r2, [sp, #44]
			temp.quote = 0;
c7e0bc78:	e58d2028 	str	r2, [sp, #40]
			inp->p = NULL;
			free_pipe_list(ctx.list_head,0);
c7e0bc7c:	ebfffb9a 	bl	c7e0aaec <free_pipe_list>
		}
		b_free(&temp);
c7e0bc80:	e28d001c 	add	r0, sp, #28	; 0x1c
c7e0bc84:	ebfffbd1 	bl	c7e0abd0 <b_free>
	} while (rcode != -1 && !(flag & FLAG_EXIT_FROM_LOOP));   /* loop on syntax errors, return on EOF */
c7e0bc88:	e3770001 	cmn	r7, #1	; 0x1
c7e0bc8c:	0a000001 	beq	c7e0bc98 <parse_stream_outer+0x5e0>
c7e0bc90:	e31b0001 	tst	fp, #1	; 0x1
c7e0bc94:	0afffe90 	beq	c7e0b6dc <parse_stream_outer+0x24>
#ifndef __U_BOOT__
	return 0;
#else
	return (code != 0) ? 1 : 0;
#endif /* __U_BOOT__ */
}
c7e0bc98:	e2590000 	subs	r0, r9, #0	; 0x0
c7e0bc9c:	13a00001 	movne	r0, #1	; 0x1
c7e0bca0:	e28dd030 	add	sp, sp, #48	; 0x30
c7e0bca4:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
			syntax();
#ifdef __U_BOOT__
			flag_repeat = 0;
#endif
		}
		if (rcode != 1 && ctx.old_flag == 0) {
c7e0bca8:	e59d5010 	ldr	r5, [sp, #16]
c7e0bcac:	e3550000 	cmp	r5, #0	; 0x0
c7e0bcb0:	1affffde 	bne	c7e0bc30 <parse_stream_outer+0x578>
c7e0bcb4:	eaffffbe 	b	c7e0bbb4 <parse_stream_outer+0x4fc>
c7e0bcb8:	e1a07000 	mov	r7, r0
		inp->promptmode=1;
		rcode = parse_stream(&temp, &ctx, inp, '\n');
#ifdef __U_BOOT__
		if (rcode == 1) flag_repeat = 0;
#endif
		if (rcode != 1 && ctx.old_flag != 0) {
c7e0bcbc:	e59d3010 	ldr	r3, [sp, #16]
c7e0bcc0:	e3530000 	cmp	r3, #0	; 0x0
c7e0bcc4:	0afffff7 	beq	c7e0bca8 <parse_stream_outer+0x5f0>
c7e0bcc8:	eaffffb4 	b	c7e0bba0 <parse_stream_outer+0x4e8>
c7e0bccc:	c7e31fa0 	.word	0xc7e31fa0
c7e0bcd0:	c7e40204 	.word	0xc7e40204
c7e0bcd4:	c7e2d144 	.word	0xc7e2d144
c7e0bcd8:	c7e0a6c0 	.word	0xc7e0a6c0
c7e0bcdc:	c7e31fa5 	.word	0xc7e31fa5
c7e0bce0:	c7e31fce 	.word	0xc7e31fce

c7e0bce4 <parse_file_outer>:
#ifndef __U_BOOT__
static int parse_file_outer(FILE *f)
#else
int parse_file_outer(void)
#endif
{
c7e0bce4:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	i->__promptme=1;
	i->promptmode=1;
#ifndef __U_BOOT__
	i->file = f;
#endif
	i->p = NULL;
c7e0bce8:	e3a03000 	mov	r3, #0	; 0x0
c7e0bcec:	e28d0018 	add	r0, sp, #24	; 0x18
c7e0bcf0:	e5203014 	str	r3, [r0, #-20]!
static void setup_file_in_str(struct in_str *i, FILE *f)
#else
static void setup_file_in_str(struct in_str *i)
#endif
{
	i->peek = file_peek;
c7e0bcf4:	e59f3024 	ldr	r3, [pc, #36]	; c7e0bd20 <parse_file_outer+0x3c>
	i->get = file_get;
	i->__promptme=1;
c7e0bcf8:	e3a02001 	mov	r2, #1	; 0x1
static void setup_file_in_str(struct in_str *i, FILE *f)
#else
static void setup_file_in_str(struct in_str *i)
#endif
{
	i->peek = file_peek;
c7e0bcfc:	e58d3014 	str	r3, [sp, #20]
	i->get = file_get;
c7e0bd00:	e59f301c 	ldr	r3, [pc, #28]	; c7e0bd24 <parse_file_outer+0x40>
#ifndef __U_BOOT__
	setup_file_in_str(&input, f);
#else
	setup_file_in_str(&input);
#endif
	rcode = parse_stream_outer(&input, FLAG_PARSE_SEMICOLON);
c7e0bd04:	e3a01002 	mov	r1, #2	; 0x2
#else
static void setup_file_in_str(struct in_str *i)
#endif
{
	i->peek = file_peek;
	i->get = file_get;
c7e0bd08:	e58d3010 	str	r3, [sp, #16]
	i->__promptme=1;
	i->promptmode=1;
c7e0bd0c:	e58d200c 	str	r2, [sp, #12]
static void setup_file_in_str(struct in_str *i)
#endif
{
	i->peek = file_peek;
	i->get = file_get;
	i->__promptme=1;
c7e0bd10:	e58d2008 	str	r2, [sp, #8]
#ifndef __U_BOOT__
	setup_file_in_str(&input, f);
#else
	setup_file_in_str(&input);
#endif
	rcode = parse_stream_outer(&input, FLAG_PARSE_SEMICOLON);
c7e0bd14:	ebfffe67 	bl	c7e0b6b8 <parse_stream_outer>
	return rcode;
}
c7e0bd18:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e0bd1c:	e8bd8000 	pop	{pc}
c7e0bd20:	c7e0a6c0 	.word	0xc7e0a6c0
c7e0bd24:	c7e0a91c 	.word	0xc7e0a91c

c7e0bd28 <parse_string_outer>:
#ifndef __U_BOOT__
static int parse_string_outer(const char *s, int flag)
#else
int parse_string_outer(const char *s, int flag)
#endif	/* __U_BOOT__ */
{
c7e0bd28:	e92d4070 	push	{r4, r5, r6, lr}
	struct in_str input;
#ifdef __U_BOOT__
	char *p = NULL;
	int rcode;
	if ( !s || !*s)
c7e0bd2c:	e2505000 	subs	r5, r0, #0	; 0x0
#ifndef __U_BOOT__
static int parse_string_outer(const char *s, int flag)
#else
int parse_string_outer(const char *s, int flag)
#endif	/* __U_BOOT__ */
{
c7e0bd30:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e0bd34:	e1a06001 	mov	r6, r1
	struct in_str input;
#ifdef __U_BOOT__
	char *p = NULL;
	int rcode;
	if ( !s || !*s)
c7e0bd38:	0a000027 	beq	c7e0bddc <parse_string_outer+0xb4>
c7e0bd3c:	e5d53000 	ldrb	r3, [r5]
c7e0bd40:	e3530000 	cmp	r3, #0	; 0x0
c7e0bd44:	0a000024 	beq	c7e0bddc <parse_string_outer+0xb4>
		return 1;
	if (!(p = strchr(s, '\n')) || *++p) {
c7e0bd48:	e3a0100a 	mov	r1, #10	; 0xa
c7e0bd4c:	eb005ae5 	bl	c7e228e8 <strchr>
c7e0bd50:	e3500000 	cmp	r0, #0	; 0x0
c7e0bd54:	0a000002 	beq	c7e0bd64 <parse_string_outer+0x3c>
c7e0bd58:	e5d03001 	ldrb	r3, [r0, #1]
c7e0bd5c:	e3530000 	cmp	r3, #0	; 0x0
c7e0bd60:	0a000014 	beq	c7e0bdb8 <parse_string_outer+0x90>
		p = xmalloc(strlen(s) + 2);
c7e0bd64:	e1a00005 	mov	r0, r5
c7e0bd68:	eb005af2 	bl	c7e22938 <strlen>
c7e0bd6c:	e2800002 	add	r0, r0, #2	; 0x2
c7e0bd70:	ebfffad7 	bl	c7e0a8d4 <xmalloc>
		strcpy(p, s);
c7e0bd74:	e1a01005 	mov	r1, r5
	char *p = NULL;
	int rcode;
	if ( !s || !*s)
		return 1;
	if (!(p = strchr(s, '\n')) || *++p) {
		p = xmalloc(strlen(s) + 2);
c7e0bd78:	e1a04000 	mov	r4, r0
		strcpy(p, s);
		strcat(p, "\n");
		setup_string_in_str(&input, p);
c7e0bd7c:	e28d5004 	add	r5, sp, #4	; 0x4
	int rcode;
	if ( !s || !*s)
		return 1;
	if (!(p = strchr(s, '\n')) || *++p) {
		p = xmalloc(strlen(s) + 2);
		strcpy(p, s);
c7e0bd80:	eb005a7f 	bl	c7e22784 <strcpy>
		strcat(p, "\n");
c7e0bd84:	e1a00004 	mov	r0, r4
c7e0bd88:	e59f105c 	ldr	r1, [pc, #92]	; c7e0bdec <parse_string_outer+0xc4>
c7e0bd8c:	eb005a8d 	bl	c7e227c8 <strcat>
		setup_string_in_str(&input, p);
c7e0bd90:	e1a00005 	mov	r0, r5
c7e0bd94:	e1a01004 	mov	r1, r4
c7e0bd98:	ebfffa4b 	bl	c7e0a6cc <setup_string_in_str>
		rcode = parse_stream_outer(&input, flag);
c7e0bd9c:	e1a00005 	mov	r0, r5
c7e0bda0:	e1a01006 	mov	r1, r6
c7e0bda4:	ebfffe43 	bl	c7e0b6b8 <parse_stream_outer>
c7e0bda8:	e1a05000 	mov	r5, r0
		free(p);
c7e0bdac:	e1a00004 	mov	r0, r4
c7e0bdb0:	ebfff46a 	bl	c7e08f60 <free>
c7e0bdb4:	ea000009 	b	c7e0bde0 <parse_string_outer+0xb8>
		return rcode;
	} else {
#endif
	setup_string_in_str(&input, s);
c7e0bdb8:	e28d4004 	add	r4, sp, #4	; 0x4
c7e0bdbc:	e1a01005 	mov	r1, r5
c7e0bdc0:	e1a00004 	mov	r0, r4
c7e0bdc4:	ebfffa40 	bl	c7e0a6cc <setup_string_in_str>
	return parse_stream_outer(&input, flag);
c7e0bdc8:	e1a00004 	mov	r0, r4
c7e0bdcc:	e1a01006 	mov	r1, r6
c7e0bdd0:	ebfffe38 	bl	c7e0b6b8 <parse_stream_outer>
c7e0bdd4:	e1a05000 	mov	r5, r0
c7e0bdd8:	ea000000 	b	c7e0bde0 <parse_string_outer+0xb8>
c7e0bddc:	e3a05001 	mov	r5, #1	; 0x1
#ifdef __U_BOOT__
	}
#endif
}
c7e0bde0:	e1a00005 	mov	r0, r5
c7e0bde4:	e28dd018 	add	sp, sp, #24	; 0x18
c7e0bde8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0bdec:	c7e31f94 	.word	0xc7e31f94

c7e0bdf0 <run_list_real>:
#endif
	return -1;
}

static int run_list_real(struct pipe *pi)
{
c7e0bdf0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0bdf4:	e1a02000 	mov	r2, r0
c7e0bdf8:	e24dd040 	sub	sp, sp, #64	; 0x40
c7e0bdfc:	e1a09000 	mov	r9, r0
c7e0be00:	ea000020 	b	c7e0be88 <run_list_real+0x98>
	int flag_restore = 0;
	int if_code=0, next_if_code=0;  /* need double-buffer to handle elif */
	reserved_style rmode, skip_more_in_this_rmode=RES_XXXX;
	/* check syntax for "for" */
	for (rpipe = pi; rpipe; rpipe = rpipe->next) {
		if ((rpipe->r_mode == RES_IN ||
c7e0be04:	e5923010 	ldr	r3, [r2, #16]
c7e0be08:	e3530006 	cmp	r3, #6	; 0x6
c7e0be0c:	1353000c 	cmpne	r3, #12	; 0xc
c7e0be10:	1a000010 	bne	c7e0be58 <run_list_real+0x68>
c7e0be14:	e5924008 	ldr	r4, [r2, #8]
c7e0be18:	e3540000 	cmp	r4, #0	; 0x0
c7e0be1c:	1a000004 	bne	c7e0be34 <run_list_real+0x44>
		    rpipe->r_mode == RES_FOR) &&
		    (rpipe->next == NULL)) {
				syntax();
c7e0be20:	ebfffa59 	bl	c7e0a78c <syntax_err>
#ifdef __U_BOOT__
				flag_repeat = 0;
c7e0be24:	e59f3738 	ldr	r3, [pc, #1848]	; c7e0c564 <run_list_real+0x774>
c7e0be28:	e3a07001 	mov	r7, #1	; 0x1
c7e0be2c:	e5834104 	str	r4, [r3, #260]
c7e0be30:	ea0001c4 	b	c7e0c548 <run_list_real+0x758>
#endif
				return 1;
		}
		if ((rpipe->r_mode == RES_IN &&
c7e0be34:	e353000c 	cmp	r3, #12	; 0xc
c7e0be38:	1a000006 	bne	c7e0be58 <run_list_real+0x68>
c7e0be3c:	e5943010 	ldr	r3, [r4, #16]
c7e0be40:	e353000c 	cmp	r3, #12	; 0xc
c7e0be44:	1a00000e 	bne	c7e0be84 <run_list_real+0x94>
c7e0be48:	e5943004 	ldr	r3, [r4, #4]
c7e0be4c:	e5933000 	ldr	r3, [r3]
c7e0be50:	e3530000 	cmp	r3, #0	; 0x0
c7e0be54:	ea000004 	b	c7e0be6c <run_list_real+0x7c>
c7e0be58:	e3530006 	cmp	r3, #6	; 0x6
c7e0be5c:	1a000008 	bne	c7e0be84 <run_list_real+0x94>
c7e0be60:	e5923008 	ldr	r3, [r2, #8]
c7e0be64:	e5933010 	ldr	r3, [r3, #16]
c7e0be68:	e353000c 	cmp	r3, #12	; 0xc
c7e0be6c:	0a000004 	beq	c7e0be84 <run_list_real+0x94>
			(rpipe->next->r_mode == RES_IN &&
			rpipe->next->progs->argv != NULL))||
			(rpipe->r_mode == RES_FOR &&
			rpipe->next->r_mode != RES_IN)) {
				syntax();
c7e0be70:	ebfffa45 	bl	c7e0a78c <syntax_err>
#ifdef __U_BOOT__
				flag_repeat = 0;
c7e0be74:	e59f36e8 	ldr	r3, [pc, #1768]	; c7e0c564 <run_list_real+0x774>
c7e0be78:	e3a02000 	mov	r2, #0	; 0x0
c7e0be7c:	e5832104 	str	r2, [r3, #260]
c7e0be80:	ea000016 	b	c7e0bee0 <run_list_real+0xf0>
	int rcode=0, flag_skip=1;
	int flag_restore = 0;
	int if_code=0, next_if_code=0;  /* need double-buffer to handle elif */
	reserved_style rmode, skip_more_in_this_rmode=RES_XXXX;
	/* check syntax for "for" */
	for (rpipe = pi; rpipe; rpipe = rpipe->next) {
c7e0be84:	e5922008 	ldr	r2, [r2, #8]
c7e0be88:	e3520000 	cmp	r2, #0	; 0x0
c7e0be8c:	1affffdc 	bne	c7e0be04 <run_list_real+0x14>
c7e0be90:	e58d2038 	str	r2, [sp, #56]
c7e0be94:	e3a04001 	mov	r4, #1	; 0x1
c7e0be98:	e58d2018 	str	r2, [sp, #24]
c7e0be9c:	e58d201c 	str	r2, [sp, #28]
c7e0bea0:	e58d2020 	str	r2, [sp, #32]
c7e0bea4:	e3a0500b 	mov	r5, #11	; 0xb
c7e0bea8:	e58d200c 	str	r2, [sp, #12]
c7e0beac:	e1a0b002 	mov	fp, r2
c7e0beb0:	e58d2010 	str	r2, [sp, #16]
c7e0beb4:	e58d2014 	str	r2, [sp, #20]
c7e0beb8:	e1a07002 	mov	r7, r2
c7e0bebc:	ea00019f 	b	c7e0c540 <run_list_real+0x750>
#endif
				return 1;
		}
	}
	for (; pi; pi = (flag_restore != 0) ? rpipe : pi->next) {
		if (pi->r_mode == RES_WHILE || pi->r_mode == RES_UNTIL ||
c7e0bec0:	e5993010 	ldr	r3, [r9, #16]
c7e0bec4:	e2433006 	sub	r3, r3, #6	; 0x6
c7e0bec8:	e3530002 	cmp	r3, #2	; 0x2
c7e0becc:	8a00000b 	bhi	c7e0bf00 <run_list_real+0x110>
			pi->r_mode == RES_FOR) {
#ifdef __U_BOOT__
				/* check Ctrl-C */
				ctrlc();
c7e0bed0:	ebfff38c 	bl	c7e08d08 <ctrlc>
				if ((had_ctrlc())) {
c7e0bed4:	ebfff286 	bl	c7e088f4 <had_ctrlc>
c7e0bed8:	e3500000 	cmp	r0, #0	; 0x0
c7e0bedc:	0a000001 	beq	c7e0bee8 <run_list_real+0xf8>
c7e0bee0:	e3a07001 	mov	r7, #1	; 0x1
c7e0bee4:	ea000197 	b	c7e0c548 <run_list_real+0x758>
					return 1;
				}
#endif
				flag_restore = 0;
				if (!rpipe) {
c7e0bee8:	e59d1038 	ldr	r1, [sp, #56]
c7e0beec:	e3510000 	cmp	r1, #0	; 0x0
c7e0bef0:	058d0018 	streq	r0, [sp, #24]
c7e0bef4:	058d9038 	streq	r9, [sp, #56]
c7e0bef8:	058d0014 	streq	r0, [sp, #20]
c7e0befc:	158d0018 	strne	r0, [sp, #24]
					flag_rep = 0;
					rpipe = pi;
				}
		}
		rmode = pi->r_mode;
c7e0bf00:	e5992010 	ldr	r2, [r9, #16]
		debug_printf("rmode=%d  if_code=%d  next_if_code=%d skip_more=%d\n", rmode, if_code, next_if_code, skip_more_in_this_rmode);
		if (rmode == skip_more_in_this_rmode && flag_skip) {
c7e0bf04:	e1520005 	cmp	r2, r5
c7e0bf08:	13a03000 	movne	r3, #0	; 0x0
c7e0bf0c:	02043001 	andeq	r3, r4, #1	; 0x1
c7e0bf10:	e3530000 	cmp	r3, #0	; 0x0
				if (!rpipe) {
					flag_rep = 0;
					rpipe = pi;
				}
		}
		rmode = pi->r_mode;
c7e0bf14:	e58d2024 	str	r2, [sp, #36]
		debug_printf("rmode=%d  if_code=%d  next_if_code=%d skip_more=%d\n", rmode, if_code, next_if_code, skip_more_in_this_rmode);
		if (rmode == skip_more_in_this_rmode && flag_skip) {
c7e0bf18:	0a000003 	beq	c7e0bf2c <run_list_real+0x13c>
			if (pi->followup == PIPE_SEQ) flag_skip=0;
c7e0bf1c:	e599300c 	ldr	r3, [r9, #12]
c7e0bf20:	e2534001 	subs	r4, r3, #1	; 0x1
c7e0bf24:	13a04001 	movne	r4, #1	; 0x1
c7e0bf28:	ea000180 	b	c7e0c530 <run_list_real+0x740>
			continue;
		}
		flag_skip = 1;
		skip_more_in_this_rmode = RES_XXXX;
		if (rmode == RES_THEN || rmode == RES_ELSE) if_code = next_if_code;
c7e0bf2c:	e59d0024 	ldr	r0, [sp, #36]
c7e0bf30:	e3500002 	cmp	r0, #2	; 0x2
c7e0bf34:	13a03000 	movne	r3, #0	; 0x0
c7e0bf38:	03a03001 	moveq	r3, #1	; 0x1
c7e0bf3c:	e3500004 	cmp	r0, #4	; 0x4
c7e0bf40:	13a01000 	movne	r1, #0	; 0x0
c7e0bf44:	03a01001 	moveq	r1, #1	; 0x1
c7e0bf48:	e1932001 	orrs	r2, r3, r1
c7e0bf4c:	e59d001c 	ldr	r0, [sp, #28]
c7e0bf50:	e59d2020 	ldr	r2, [sp, #32]
c7e0bf54:	11a00002 	movne	r0, r2
		if (rmode == RES_THEN &&  if_code) continue;
c7e0bf58:	e3500000 	cmp	r0, #0	; 0x0
c7e0bf5c:	03a02000 	moveq	r2, #0	; 0x0
c7e0bf60:	12032001 	andne	r2, r3, #1	; 0x1
c7e0bf64:	e3520000 	cmp	r2, #0	; 0x0
			if (pi->followup == PIPE_SEQ) flag_skip=0;
			continue;
		}
		flag_skip = 1;
		skip_more_in_this_rmode = RES_XXXX;
		if (rmode == RES_THEN || rmode == RES_ELSE) if_code = next_if_code;
c7e0bf68:	e58d001c 	str	r0, [sp, #28]
		if (rmode == RES_THEN &&  if_code) continue;
c7e0bf6c:	1a00016d 	bne	c7e0c528 <run_list_real+0x738>
		if (rmode == RES_ELSE && !if_code) continue;
c7e0bf70:	e2703001 	rsbs	r3, r0, #1	; 0x1
c7e0bf74:	33a03000 	movcc	r3, #0	; 0x0
c7e0bf78:	e1110003 	tst	r1, r3
c7e0bf7c:	158d201c 	strne	r2, [sp, #28]
c7e0bf80:	1a000168 	bne	c7e0c528 <run_list_real+0x738>
		if (rmode == RES_ELIF && !if_code) break;
c7e0bf84:	e59d0024 	ldr	r0, [sp, #36]
c7e0bf88:	e3500003 	cmp	r0, #3	; 0x3
c7e0bf8c:	13a00000 	movne	r0, #0	; 0x0
c7e0bf90:	03a00001 	moveq	r0, #1	; 0x1
c7e0bf94:	e0101003 	ands	r1, r0, r3
c7e0bf98:	e58d0000 	str	r0, [sp]
c7e0bf9c:	1a000169 	bne	c7e0c548 <run_list_real+0x758>
		if (rmode == RES_FOR && pi->num_progs) {
c7e0bfa0:	e59d2024 	ldr	r2, [sp, #36]
c7e0bfa4:	e3520006 	cmp	r2, #6	; 0x6
c7e0bfa8:	1a00007a 	bne	c7e0c198 <run_list_real+0x3a8>
c7e0bfac:	e5993000 	ldr	r3, [r9]
c7e0bfb0:	e3530000 	cmp	r3, #0	; 0x0
c7e0bfb4:	0a00008b 	beq	c7e0c1e8 <run_list_real+0x3f8>
			if (!list) {
c7e0bfb8:	e35b0000 	cmp	fp, #0	; 0x0
c7e0bfbc:	1a000059 	bne	c7e0c128 <run_list_real+0x338>
				/* if no variable values after "in" we skip "for" */
				if (!pi->next->progs->argv) continue;
c7e0bfc0:	e5993008 	ldr	r3, [r9, #8]
c7e0bfc4:	e5933004 	ldr	r3, [r3, #4]
c7e0bfc8:	e5933000 	ldr	r3, [r3]
c7e0bfcc:	e3530000 	cmp	r3, #0	; 0x0
c7e0bfd0:	e58d3004 	str	r3, [sp, #4]
c7e0bfd4:	0a000153 	beq	c7e0c528 <run_list_real+0x738>
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
c7e0bfd8:	e5993004 	ldr	r3, [r9, #4]
	int n = 0;
	char **list;
	char *p1, *p2, *p3;

	/* create list of variable values */
	list = xmalloc(sizeof(*list));
c7e0bfdc:	e1a06001 	mov	r6, r1
		if (rmode == RES_FOR && pi->num_progs) {
			if (!list) {
				/* if no variable values after "in" we skip "for" */
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
c7e0bfe0:	e5933000 	ldr	r3, [r3]
	int n = 0;
	char **list;
	char *p1, *p2, *p3;

	/* create list of variable values */
	list = xmalloc(sizeof(*list));
c7e0bfe4:	e58d1034 	str	r1, [sp, #52]
		if (rmode == RES_FOR && pi->num_progs) {
			if (!list) {
				/* if no variable values after "in" we skip "for" */
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
c7e0bfe8:	e5933000 	ldr	r3, [r3]
}

static char **make_list_in(char **inp, char *name)
{
	int len, i;
	int name_len = strlen(name);
c7e0bfec:	e1a00003 	mov	r0, r3
		if (rmode == RES_FOR && pi->num_progs) {
			if (!list) {
				/* if no variable values after "in" we skip "for" */
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
c7e0bff0:	e58d3008 	str	r3, [sp, #8]
}

static char **make_list_in(char **inp, char *name)
{
	int len, i;
	int name_len = strlen(name);
c7e0bff4:	eb005a4f 	bl	c7e22938 <strlen>
c7e0bff8:	e58d002c 	str	r0, [sp, #44]
	int n = 0;
	char **list;
	char *p1, *p2, *p3;

	/* create list of variable values */
	list = xmalloc(sizeof(*list));
c7e0bffc:	e3a00004 	mov	r0, #4	; 0x4
c7e0c000:	ebfffa33 	bl	c7e0a8d4 <xmalloc>
c7e0c004:	e1a0b000 	mov	fp, r0
c7e0c008:	ea000038 	b	c7e0c0f0 <run_list_real+0x300>
	for (i = 0; inp[i]; i++) {
		p3 = insert_var_value(inp[i]);
c7e0c00c:	ebfffd82 	bl	c7e0b61c <insert_var_value>
c7e0c010:	e58d0028 	str	r0, [sp, #40]
c7e0c014:	e1a04000 	mov	r4, r0
c7e0c018:	ea000025 	b	c7e0c0b4 <run_list_real+0x2c4>
		p1 = p3;
		while (*p1) {
			if ((*p1 == ' ')) {
c7e0c01c:	e3530020 	cmp	r3, #32	; 0x20
				p1++;
c7e0c020:	02844001 	addeq	r4, r4, #1	; 0x1
	list = xmalloc(sizeof(*list));
	for (i = 0; inp[i]; i++) {
		p3 = insert_var_value(inp[i]);
		p1 = p3;
		while (*p1) {
			if ((*p1 == ' ')) {
c7e0c024:	0a000022 	beq	c7e0c0b4 <run_list_real+0x2c4>
				p1++;
				continue;
			}
			if ((p2 = strchr(p1, ' '))) {
c7e0c028:	eb005a2e 	bl	c7e228e8 <strchr>
c7e0c02c:	e250a000 	subs	sl, r0, #0	; 0x0
				len = p2 - p1;
c7e0c030:	1064500a 	rsbne	r5, r4, sl
		while (*p1) {
			if ((*p1 == ' ')) {
				p1++;
				continue;
			}
			if ((p2 = strchr(p1, ' '))) {
c7e0c034:	1a000003 	bne	c7e0c048 <run_list_real+0x258>
				len = p2 - p1;
			} else {
				len = strlen(p1);
c7e0c038:	e1a00004 	mov	r0, r4
c7e0c03c:	eb005a3d 	bl	c7e22938 <strlen>
c7e0c040:	e1a05000 	mov	r5, r0
				p2 = p1 + len;
c7e0c044:	e084a000 	add	sl, r4, r0
			}
			/* we use n + 2 in realloc for list,because we add
			 * new element and then we will add NULL element */
			list = xrealloc(list, sizeof(*list) * (n + 2));
c7e0c048:	e2861002 	add	r1, r6, #2	; 0x2
c7e0c04c:	e1a01101 	lsl	r1, r1, #2
c7e0c050:	e1a0000b 	mov	r0, fp
c7e0c054:	ebfffb0d 	bl	c7e0ac90 <xrealloc>
			list[n] = xmalloc(2 + name_len + len);
c7e0c058:	e59d302c 	ldr	r3, [sp, #44]
				len = strlen(p1);
				p2 = p1 + len;
			}
			/* we use n + 2 in realloc for list,because we add
			 * new element and then we will add NULL element */
			list = xrealloc(list, sizeof(*list) * (n + 2));
c7e0c05c:	e1a0b000 	mov	fp, r0
			list[n] = xmalloc(2 + name_len + len);
c7e0c060:	e2830002 	add	r0, r3, #2	; 0x2
c7e0c064:	e0800005 	add	r0, r0, r5
c7e0c068:	ebfffa19 	bl	c7e0a8d4 <xmalloc>
			strcpy(list[n], name);
c7e0c06c:	e59d1008 	ldr	r1, [sp, #8]
				p2 = p1 + len;
			}
			/* we use n + 2 in realloc for list,because we add
			 * new element and then we will add NULL element */
			list = xrealloc(list, sizeof(*list) * (n + 2));
			list[n] = xmalloc(2 + name_len + len);
c7e0c070:	e78b0106 	str	r0, [fp, r6, lsl #2]
			strcpy(list[n], name);
c7e0c074:	eb0059c2 	bl	c7e22784 <strcpy>
			strcat(list[n], "=");
c7e0c078:	e79b0106 	ldr	r0, [fp, r6, lsl #2]
c7e0c07c:	e59f14e4 	ldr	r1, [pc, #1252]	; c7e0c568 <run_list_real+0x778>
c7e0c080:	eb0059d0 	bl	c7e227c8 <strcat>
			strncat(list[n], p1, len);
c7e0c084:	e1a01004 	mov	r1, r4
c7e0c088:	e79b0106 	ldr	r0, [fp, r6, lsl #2]
c7e0c08c:	e1a02005 	mov	r2, r5
c7e0c090:	eb0059d9 	bl	c7e227fc <strncat>
			list[n++][name_len + len + 1] = '\0';
c7e0c094:	e79b3106 	ldr	r3, [fp, r6, lsl #2]
c7e0c098:	e59d002c 	ldr	r0, [sp, #44]
c7e0c09c:	e0833005 	add	r3, r3, r5
c7e0c0a0:	e0833000 	add	r3, r3, r0
c7e0c0a4:	e3a02000 	mov	r2, #0	; 0x0
c7e0c0a8:	e5c32001 	strb	r2, [r3, #1]
c7e0c0ac:	e2866001 	add	r6, r6, #1	; 0x1
c7e0c0b0:	e1a0400a 	mov	r4, sl
	/* create list of variable values */
	list = xmalloc(sizeof(*list));
	for (i = 0; inp[i]; i++) {
		p3 = insert_var_value(inp[i]);
		p1 = p3;
		while (*p1) {
c7e0c0b4:	e5d43000 	ldrb	r3, [r4]
			if ((*p1 == ' ')) {
				p1++;
				continue;
			}
			if ((p2 = strchr(p1, ' '))) {
c7e0c0b8:	e3a01020 	mov	r1, #32	; 0x20
	/* create list of variable values */
	list = xmalloc(sizeof(*list));
	for (i = 0; inp[i]; i++) {
		p3 = insert_var_value(inp[i]);
		p1 = p3;
		while (*p1) {
c7e0c0bc:	e3530000 	cmp	r3, #0	; 0x0
			if ((*p1 == ' ')) {
				p1++;
				continue;
			}
			if ((p2 = strchr(p1, ' '))) {
c7e0c0c0:	e1a00004 	mov	r0, r4
	/* create list of variable values */
	list = xmalloc(sizeof(*list));
	for (i = 0; inp[i]; i++) {
		p3 = insert_var_value(inp[i]);
		p1 = p3;
		while (*p1) {
c7e0c0c4:	1affffd4 	bne	c7e0c01c <run_list_real+0x22c>
			strcat(list[n], "=");
			strncat(list[n], p1, len);
			list[n++][name_len + len + 1] = '\0';
			p1 = p2;
		}
		if (p3 != inp[i]) free(p3);
c7e0c0c8:	e59d2004 	ldr	r2, [sp, #4]
c7e0c0cc:	e59d1034 	ldr	r1, [sp, #52]
c7e0c0d0:	e59d0028 	ldr	r0, [sp, #40]
c7e0c0d4:	e7923001 	ldr	r3, [r2, r1]
c7e0c0d8:	e1500003 	cmp	r0, r3
c7e0c0dc:	0a000000 	beq	c7e0c0e4 <run_list_real+0x2f4>
c7e0c0e0:	ebfff39e 	bl	c7e08f60 <free>
c7e0c0e4:	e59d1034 	ldr	r1, [sp, #52]
c7e0c0e8:	e2811004 	add	r1, r1, #4	; 0x4
c7e0c0ec:	e58d1034 	str	r1, [sp, #52]
	char **list;
	char *p1, *p2, *p3;

	/* create list of variable values */
	list = xmalloc(sizeof(*list));
	for (i = 0; inp[i]; i++) {
c7e0c0f0:	e59d3004 	ldr	r3, [sp, #4]
c7e0c0f4:	e59d2034 	ldr	r2, [sp, #52]
c7e0c0f8:	e7930002 	ldr	r0, [r3, r2]
c7e0c0fc:	e3500000 	cmp	r0, #0	; 0x0
c7e0c100:	1affffc1 	bne	c7e0c00c <run_list_real+0x21c>
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
					pi->progs->argv[0]);
				save_list = list;
				save_name = pi->progs->argv[0];
c7e0c104:	e5993004 	ldr	r3, [r9, #4]
			list[n++][name_len + len + 1] = '\0';
			p1 = p2;
		}
		if (p3 != inp[i]) free(p3);
	}
	list[n] = NULL;
c7e0c108:	e78b0106 	str	r0, [fp, r6, lsl #2]
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
					pi->progs->argv[0]);
				save_list = list;
				save_name = pi->progs->argv[0];
c7e0c10c:	e5933000 	ldr	r3, [r3]
				pi->progs->argv[0] = NULL;
c7e0c110:	e3a02001 	mov	r2, #1	; 0x1
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
					pi->progs->argv[0]);
				save_list = list;
				save_name = pi->progs->argv[0];
c7e0c114:	e5931000 	ldr	r1, [r3]
				pi->progs->argv[0] = NULL;
c7e0c118:	e58db010 	str	fp, [sp, #16]
				if (!pi->next->progs->argv) continue;
				/* create list of variable values */
				list = make_list_in(pi->next->progs->argv,
					pi->progs->argv[0]);
				save_list = list;
				save_name = pi->progs->argv[0];
c7e0c11c:	e58d100c 	str	r1, [sp, #12]
				pi->progs->argv[0] = NULL;
c7e0c120:	e5830000 	str	r0, [r3]
c7e0c124:	e58d2014 	str	r2, [sp, #20]
				flag_rep = 1;
			}
			if (!(*list)) {
c7e0c128:	e59b2000 	ldr	r2, [fp]
c7e0c12c:	e5993004 	ldr	r3, [r9, #4]
c7e0c130:	e3520000 	cmp	r2, #0	; 0x0
c7e0c134:	1a00000d 	bne	c7e0c170 <run_list_real+0x380>
				free(pi->progs->argv[0]);
c7e0c138:	e5933000 	ldr	r3, [r3]
				free(save_list);
				list = NULL;
				flag_rep = 0;
				pi->progs->argv[0] = save_name;
c7e0c13c:	e1a0b002 	mov	fp, r2
				save_name = pi->progs->argv[0];
				pi->progs->argv[0] = NULL;
				flag_rep = 1;
			}
			if (!(*list)) {
				free(pi->progs->argv[0]);
c7e0c140:	e5930000 	ldr	r0, [r3]
c7e0c144:	ebfff385 	bl	c7e08f60 <free>
				free(save_list);
c7e0c148:	e59d0010 	ldr	r0, [sp, #16]
c7e0c14c:	ebfff383 	bl	c7e08f60 <free>
				list = NULL;
				flag_rep = 0;
				pi->progs->argv[0] = save_name;
c7e0c150:	e5993004 	ldr	r3, [r9, #4]
c7e0c154:	e59d000c 	ldr	r0, [sp, #12]
c7e0c158:	e5933000 	ldr	r3, [r3]
c7e0c15c:	e3a04001 	mov	r4, #1	; 0x1
c7e0c160:	e3a0500b 	mov	r5, #11	; 0xb
c7e0c164:	e5830000 	str	r0, [r3]
c7e0c168:	e58db014 	str	fp, [sp, #20]
c7e0c16c:	ea0000ef 	b	c7e0c530 <run_list_real+0x740>
					pi->progs->argv[0];
#endif
				continue;
			} else {
				/* insert new value from list for variable */
				if (pi->progs->argv[0])
c7e0c170:	e5933000 	ldr	r3, [r3]
c7e0c174:	e5930000 	ldr	r0, [r3]
c7e0c178:	e3500000 	cmp	r0, #0	; 0x0
c7e0c17c:	0a000000 	beq	c7e0c184 <run_list_real+0x394>
					free(pi->progs->argv[0]);
c7e0c180:	ebfff376 	bl	c7e08f60 <free>
				pi->progs->argv[0] = *list++;
c7e0c184:	e5993004 	ldr	r3, [r9, #4]
c7e0c188:	e49b2004 	ldr	r2, [fp], #4
c7e0c18c:	e5933000 	ldr	r3, [r3]
c7e0c190:	e5832000 	str	r2, [r3]
c7e0c194:	ea000013 	b	c7e0c1e8 <run_list_real+0x3f8>
				pi->progs->glob_result.gl_pathv[0] =
					pi->progs->argv[0];
#endif
			}
		}
		if (rmode == RES_IN) continue;
c7e0c198:	e59d1024 	ldr	r1, [sp, #36]
c7e0c19c:	e351000c 	cmp	r1, #12	; 0xc
c7e0c1a0:	0a0000e0 	beq	c7e0c528 <run_list_real+0x738>
		if (rmode == RES_DO) {
c7e0c1a4:	e3510009 	cmp	r1, #9	; 0x9
c7e0c1a8:	1a000003 	bne	c7e0c1bc <run_list_real+0x3cc>
			if (!flag_rep) continue;
c7e0c1ac:	e59d2014 	ldr	r2, [sp, #20]
c7e0c1b0:	e3520000 	cmp	r2, #0	; 0x0
c7e0c1b4:	0a0000db 	beq	c7e0c528 <run_list_real+0x738>
c7e0c1b8:	ea00000a 	b	c7e0c1e8 <run_list_real+0x3f8>
		}
		if ((rmode == RES_DONE)) {
c7e0c1bc:	e59d3024 	ldr	r3, [sp, #36]
c7e0c1c0:	e353000a 	cmp	r3, #10	; 0xa
c7e0c1c4:	1a000007 	bne	c7e0c1e8 <run_list_real+0x3f8>
			if (flag_rep) {
c7e0c1c8:	e59d0014 	ldr	r0, [sp, #20]
c7e0c1cc:	e59d1038 	ldr	r1, [sp, #56]
c7e0c1d0:	e59d2018 	ldr	r2, [sp, #24]
c7e0c1d4:	e3500000 	cmp	r0, #0	; 0x0
c7e0c1d8:	03a01000 	moveq	r1, #0	; 0x0
c7e0c1dc:	13a02001 	movne	r2, #1	; 0x1
c7e0c1e0:	e58d1038 	str	r1, [sp, #56]
c7e0c1e4:	e58d2018 	str	r2, [sp, #24]
				flag_restore = 1;
			} else {
				rpipe = NULL;
			}
		}
		if (pi->num_progs == 0) continue;
c7e0c1e8:	e5993000 	ldr	r3, [r9]
c7e0c1ec:	e3530000 	cmp	r3, #0	; 0x0
c7e0c1f0:	0a0000cc 	beq	c7e0c528 <run_list_real+0x738>

	/* Check if this is a simple builtin (not part of a pipe).
	 * Builtins within pipes have to fork anyway, and are handled in
	 * pseudo_exec.  "echo foo | read bar" doesn't work on bash, either.
	 */
	if (pi->num_progs == 1) child = & (pi->progs[0]);
c7e0c1f4:	e3530001 	cmp	r3, #1	; 0x1
	(void) &nextout;
	(void) &child;
# endif
#else
	int nextin;
	int flag = do_repeat ? CMD_FLAG_REPEAT : 0;
c7e0c1f8:	e59f3364 	ldr	r3, [pc, #868]	; c7e0c564 <run_list_real+0x774>
c7e0c1fc:	e5937108 	ldr	r7, [r3, #264]

	/* Check if this is a simple builtin (not part of a pipe).
	 * Builtins within pipes have to fork anyway, and are handled in
	 * pseudo_exec.  "echo foo | read bar" doesn't work on bash, either.
	 */
	if (pi->num_progs == 1) child = & (pi->progs[0]);
c7e0c200:	1a0000d5 	bne	c7e0c55c <run_list_real+0x76c>
c7e0c204:	e5995004 	ldr	r5, [r9, #4]
		/* XXX could we merge code with following builtin case,
		 * by creating a pseudo builtin that calls run_list_real? */
		rcode = run_list_real(child->group);
		restore_redirects(squirrel);
#else
		if (pi->num_progs == 1 && child->group) {
c7e0c208:	e5950008 	ldr	r0, [r5, #8]
c7e0c20c:	e3500000 	cmp	r0, #0	; 0x0
c7e0c210:	0a000001 	beq	c7e0c21c <run_list_real+0x42c>
		int rcode;
		debug_printf("non-subshell grouping\n");
		rcode = run_list_real(child->group);
c7e0c214:	ebfffef5 	bl	c7e0bdf0 <run_list_real>
c7e0c218:	ea00009b 	b	c7e0c48c <run_list_real+0x69c>
#endif
		return rcode;
	} else if (pi->num_progs == 1 && pi->progs[0].argv != NULL) {
c7e0c21c:	e5953000 	ldr	r3, [r5]
c7e0c220:	e3530000 	cmp	r3, #0	; 0x0
c7e0c224:	11a04000 	movne	r4, r0
c7e0c228:	1a000001 	bne	c7e0c234 <run_list_real+0x444>
c7e0c22c:	ea0000ca 	b	c7e0c55c <run_list_real+0x76c>
		for (i=0; is_assignment(child->argv[i]); i++) { /* nothing */ }
c7e0c230:	e2844001 	add	r4, r4, #1	; 0x1
c7e0c234:	e5953000 	ldr	r3, [r5]
c7e0c238:	e1a06104 	lsl	r6, r4, #2
c7e0c23c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
c7e0c240:	ebfff930 	bl	c7e0a708 <is_assignment>
c7e0c244:	e3500000 	cmp	r0, #0	; 0x0
c7e0c248:	1afffff8 	bne	c7e0c230 <run_list_real+0x440>
		if (i!=0 && child->argv[i]==NULL) {
c7e0c24c:	e3540000 	cmp	r4, #0	; 0x0
c7e0c250:	0a000031 	beq	c7e0c31c <run_list_real+0x52c>
c7e0c254:	e5953000 	ldr	r3, [r5]
c7e0c258:	e7933006 	ldr	r3, [r3, r6]
c7e0c25c:	e3530000 	cmp	r3, #0	; 0x0
c7e0c260:	01a06003 	moveq	r6, r3
c7e0c264:	1a00002c 	bne	c7e0c31c <run_list_real+0x52c>
c7e0c268:	ea000015 	b	c7e0c2c4 <run_list_real+0x4d4>
				 * not exported, we need only set this as a local variable.
				 * This junk is all to decide whether or not to export this
				 * variable. */
				int export_me=0;
				char *name, *value;
				name = xstrdup(child->argv[i]);
c7e0c26c:	eb005aed 	bl	c7e22e28 <strdup>
				debug_printf("Local environment set: %s\n", name);
				value = strchr(name, '=');
c7e0c270:	e3a0103d 	mov	r1, #61	; 0x3d
				 * not exported, we need only set this as a local variable.
				 * This junk is all to decide whether or not to export this
				 * variable. */
				int export_me=0;
				char *name, *value;
				name = xstrdup(child->argv[i]);
c7e0c274:	e1a04000 	mov	r4, r0
				debug_printf("Local environment set: %s\n", name);
				value = strchr(name, '=');
c7e0c278:	eb00599a 	bl	c7e228e8 <strchr>
				if (value)
c7e0c27c:	e2502000 	subs	r2, r0, #0	; 0x0
					*value=0;
c7e0c280:	13a03000 	movne	r3, #0	; 0x0
c7e0c284:	15c23000 	strbne	r3, [r2]
#ifndef __U_BOOT__
				if ( get_local_var(name)) {
					export_me=1;
				}
#endif
				free(name);
c7e0c288:	e1a00004 	mov	r0, r4
c7e0c28c:	ebfff333 	bl	c7e08f60 <free>
				p = insert_var_value(child->argv[i]);
c7e0c290:	e5953000 	ldr	r3, [r5]
c7e0c294:	e7930006 	ldr	r0, [r3, r6]
c7e0c298:	ebfffcdf 	bl	c7e0b61c <insert_var_value>
				set_local_var(p, export_me);
c7e0c29c:	e3a01000 	mov	r1, #0	; 0x0
				if ( get_local_var(name)) {
					export_me=1;
				}
#endif
				free(name);
				p = insert_var_value(child->argv[i]);
c7e0c2a0:	e1a04000 	mov	r4, r0
				set_local_var(p, export_me);
c7e0c2a4:	ebfffbc5 	bl	c7e0b1c0 <set_local_var>
				if (p != child->argv[i]) free(p);
c7e0c2a8:	e5953000 	ldr	r3, [r5]
c7e0c2ac:	e1a00004 	mov	r0, r4
c7e0c2b0:	e7933006 	ldr	r3, [r3, r6]
c7e0c2b4:	e2866004 	add	r6, r6, #4	; 0x4
c7e0c2b8:	e1540003 	cmp	r4, r3
c7e0c2bc:	0a000000 	beq	c7e0c2c4 <run_list_real+0x4d4>
c7e0c2c0:	ebfff326 	bl	c7e08f60 <free>
		return rcode;
	} else if (pi->num_progs == 1 && pi->progs[0].argv != NULL) {
		for (i=0; is_assignment(child->argv[i]); i++) { /* nothing */ }
		if (i!=0 && child->argv[i]==NULL) {
			/* assignments, but no command: set the local environment */
			for (i=0; child->argv[i]!=NULL; i++) {
c7e0c2c4:	e5953000 	ldr	r3, [r5]
c7e0c2c8:	e7933006 	ldr	r3, [r3, r6]
c7e0c2cc:	e2530000 	subs	r0, r3, #0	; 0x0
c7e0c2d0:	1affffe5 	bne	c7e0c26c <run_list_real+0x47c>
c7e0c2d4:	ea00009e 	b	c7e0c554 <run_list_real+0x764>
				if (p != child->argv[i]) free(p);
			}
			return EXIT_SUCCESS;   /* don't worry about errors in set_local_var() yet */
		}
		for (i = 0; is_assignment(child->argv[i]); i++) {
			p = insert_var_value(child->argv[i]);
c7e0c2d8:	e5953000 	ldr	r3, [r5]
c7e0c2dc:	e7930006 	ldr	r0, [r3, r6]
c7e0c2e0:	ebfffccd 	bl	c7e0b61c <insert_var_value>
#ifndef __U_BOOT__
			putenv(strdup(p));
#else
			set_local_var(p, 0);
c7e0c2e4:	e3a01000 	mov	r1, #0	; 0x0
				if (p != child->argv[i]) free(p);
			}
			return EXIT_SUCCESS;   /* don't worry about errors in set_local_var() yet */
		}
		for (i = 0; is_assignment(child->argv[i]); i++) {
			p = insert_var_value(child->argv[i]);
c7e0c2e8:	e1a04000 	mov	r4, r0
#ifndef __U_BOOT__
			putenv(strdup(p));
#else
			set_local_var(p, 0);
c7e0c2ec:	ebfffbb3 	bl	c7e0b1c0 <set_local_var>
#endif
			if (p != child->argv[i]) {
c7e0c2f0:	e5953000 	ldr	r3, [r5]
				child->sp--;
				free(p);
c7e0c2f4:	e1a00004 	mov	r0, r4
#ifndef __U_BOOT__
			putenv(strdup(p));
#else
			set_local_var(p, 0);
#endif
			if (p != child->argv[i]) {
c7e0c2f8:	e7933006 	ldr	r3, [r3, r6]
				child->sp--;
				free(p);
c7e0c2fc:	e2866004 	add	r6, r6, #4	; 0x4
#ifndef __U_BOOT__
			putenv(strdup(p));
#else
			set_local_var(p, 0);
#endif
			if (p != child->argv[i]) {
c7e0c300:	e1540003 	cmp	r4, r3
c7e0c304:	0a000005 	beq	c7e0c320 <run_list_real+0x530>
				child->sp--;
c7e0c308:	e595300c 	ldr	r3, [r5, #12]
c7e0c30c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0c310:	e585300c 	str	r3, [r5, #12]
				free(p);
c7e0c314:	ebfff311 	bl	c7e08f60 <free>
c7e0c318:	ea000000 	b	c7e0c320 <run_list_real+0x530>
c7e0c31c:	e3a06000 	mov	r6, #0	; 0x0
				set_local_var(p, export_me);
				if (p != child->argv[i]) free(p);
			}
			return EXIT_SUCCESS;   /* don't worry about errors in set_local_var() yet */
		}
		for (i = 0; is_assignment(child->argv[i]); i++) {
c7e0c320:	e5953000 	ldr	r3, [r5]
c7e0c324:	e7930006 	ldr	r0, [r3, r6]
c7e0c328:	ebfff8f6 	bl	c7e0a708 <is_assignment>
c7e0c32c:	e3500000 	cmp	r0, #0	; 0x0
c7e0c330:	1affffe8 	bne	c7e0c2d8 <run_list_real+0x4e8>
			if (p != child->argv[i]) {
				child->sp--;
				free(p);
			}
		}
		if (child->sp) {
c7e0c334:	e595300c 	ldr	r3, [r5, #12]
c7e0c338:	e5952000 	ldr	r2, [r5]
c7e0c33c:	e3530000 	cmp	r3, #0	; 0x0
c7e0c340:	0a000041 	beq	c7e0c44c <run_list_real+0x65c>
			char * str = NULL;

			str = make_string((child->argv + i));
c7e0c344:	e0822006 	add	r2, r2, r6
	int n;
	int len = 2;
	char *noeval_str;
	int noeval = 0;

	noeval_str = get_local_var("HUSH_NO_EVAL");
c7e0c348:	e59f021c 	ldr	r0, [pc, #540]	; c7e0c56c <run_list_real+0x77c>
			}
		}
		if (child->sp) {
			char * str = NULL;

			str = make_string((child->argv + i));
c7e0c34c:	e58d203c 	str	r2, [sp, #60]
	int n;
	int len = 2;
	char *noeval_str;
	int noeval = 0;

	noeval_str = get_local_var("HUSH_NO_EVAL");
c7e0c350:	ebfffb78 	bl	c7e0b138 <get_local_var>
	if (noeval_str != NULL && *noeval_str != '0' && *noeval_str != '\0')
c7e0c354:	e3500000 	cmp	r0, #0	; 0x0
c7e0c358:	0a000006 	beq	c7e0c378 <run_list_real+0x588>
c7e0c35c:	e5d00000 	ldrb	r0, [r0]
c7e0c360:	e3500030 	cmp	r0, #48	; 0x30
c7e0c364:	0a000003 	beq	c7e0c378 <run_list_real+0x588>
c7e0c368:	e2500000 	subs	r0, r0, #0	; 0x0
c7e0c36c:	13a00001 	movne	r0, #1	; 0x1
c7e0c370:	e58d0030 	str	r0, [sp, #48]
c7e0c374:	ea000001 	b	c7e0c380 <run_list_real+0x590>
c7e0c378:	e3a03000 	mov	r3, #0	; 0x0
c7e0c37c:	e58d3030 	str	r3, [sp, #48]
c7e0c380:	e3a06000 	mov	r6, #0	; 0x0
c7e0c384:	e3a0a002 	mov	sl, #2	; 0x2
c7e0c388:	e1a05006 	mov	r5, r6
c7e0c38c:	e1a07006 	mov	r7, r6
c7e0c390:	ea00001a 	b	c7e0c400 <run_list_real+0x610>
		noeval = 1;
	for (n = 0; inp[n]; n++) {
		p = insert_var_value_sub(inp[n], noeval);
c7e0c394:	ebfffbf5 	bl	c7e0b370 <insert_var_value_sub>
c7e0c398:	e1a04000 	mov	r4, r0
		str = xrealloc(str, (len + strlen(p)));
c7e0c39c:	eb005965 	bl	c7e22938 <strlen>
c7e0c3a0:	e080100a 	add	r1, r0, sl
c7e0c3a4:	e1a00005 	mov	r0, r5
c7e0c3a8:	ebfffa38 	bl	c7e0ac90 <xrealloc>
		if (n) {
c7e0c3ac:	e3560000 	cmp	r6, #0	; 0x0
	noeval_str = get_local_var("HUSH_NO_EVAL");
	if (noeval_str != NULL && *noeval_str != '0' && *noeval_str != '\0')
		noeval = 1;
	for (n = 0; inp[n]; n++) {
		p = insert_var_value_sub(inp[n], noeval);
		str = xrealloc(str, (len + strlen(p)));
c7e0c3b0:	e1a05000 	mov	r5, r0
		if (n) {
			strcat(str, " ");
		} else {
			*str = '\0';
c7e0c3b4:	05c06000 	strbeq	r6, [r0]
	if (noeval_str != NULL && *noeval_str != '0' && *noeval_str != '\0')
		noeval = 1;
	for (n = 0; inp[n]; n++) {
		p = insert_var_value_sub(inp[n], noeval);
		str = xrealloc(str, (len + strlen(p)));
		if (n) {
c7e0c3b8:	0a000001 	beq	c7e0c3c4 <run_list_real+0x5d4>
			strcat(str, " ");
c7e0c3bc:	e59f11ac 	ldr	r1, [pc, #428]	; c7e0c570 <run_list_real+0x780>
c7e0c3c0:	eb005900 	bl	c7e227c8 <strcat>
		} else {
			*str = '\0';
		}
		strcat(str, p);
c7e0c3c4:	e1a01004 	mov	r1, r4
c7e0c3c8:	e1a00005 	mov	r0, r5
c7e0c3cc:	eb0058fd 	bl	c7e227c8 <strcat>
		len = strlen(str) + 3;
c7e0c3d0:	e1a00005 	mov	r0, r5
c7e0c3d4:	eb005957 	bl	c7e22938 <strlen>
		if (p != inp[n]) free(p);
c7e0c3d8:	e59d103c 	ldr	r1, [sp, #60]
			strcat(str, " ");
		} else {
			*str = '\0';
		}
		strcat(str, p);
		len = strlen(str) + 3;
c7e0c3dc:	e1a02000 	mov	r2, r0
		if (p != inp[n]) free(p);
c7e0c3e0:	e7913007 	ldr	r3, [r1, r7]
c7e0c3e4:	e1a00004 	mov	r0, r4
c7e0c3e8:	e1540003 	cmp	r4, r3
			strcat(str, " ");
		} else {
			*str = '\0';
		}
		strcat(str, p);
		len = strlen(str) + 3;
c7e0c3ec:	e282a003 	add	sl, r2, #3	; 0x3
	int noeval = 0;

	noeval_str = get_local_var("HUSH_NO_EVAL");
	if (noeval_str != NULL && *noeval_str != '0' && *noeval_str != '\0')
		noeval = 1;
	for (n = 0; inp[n]; n++) {
c7e0c3f0:	e2866001 	add	r6, r6, #1	; 0x1
c7e0c3f4:	e2877004 	add	r7, r7, #4	; 0x4
		} else {
			*str = '\0';
		}
		strcat(str, p);
		len = strlen(str) + 3;
		if (p != inp[n]) free(p);
c7e0c3f8:	0a000000 	beq	c7e0c400 <run_list_real+0x610>
c7e0c3fc:	ebfff2d7 	bl	c7e08f60 <free>
	int noeval = 0;

	noeval_str = get_local_var("HUSH_NO_EVAL");
	if (noeval_str != NULL && *noeval_str != '0' && *noeval_str != '\0')
		noeval = 1;
	for (n = 0; inp[n]; n++) {
c7e0c400:	e59d203c 	ldr	r2, [sp, #60]
		p = insert_var_value_sub(inp[n], noeval);
c7e0c404:	e59d1030 	ldr	r1, [sp, #48]
	int noeval = 0;

	noeval_str = get_local_var("HUSH_NO_EVAL");
	if (noeval_str != NULL && *noeval_str != '0' && *noeval_str != '\0')
		noeval = 1;
	for (n = 0; inp[n]; n++) {
c7e0c408:	e7924007 	ldr	r4, [r2, r7]
c7e0c40c:	e2540000 	subs	r0, r4, #0	; 0x0
c7e0c410:	1affffdf 	bne	c7e0c394 <run_list_real+0x5a4>
		}
		strcat(str, p);
		len = strlen(str) + 3;
		if (p != inp[n]) free(p);
	}
	len = strlen(str);
c7e0c414:	e1a00005 	mov	r0, r5
c7e0c418:	eb005946 	bl	c7e22938 <strlen>
	*(str + len) = '\n';
c7e0c41c:	e1a03005 	mov	r3, r5
c7e0c420:	e3a0200a 	mov	r2, #10	; 0xa
c7e0c424:	e7e32000 	strb	r2, [r3, r0]!
	*(str + len + 1) = '\0';
c7e0c428:	e5c34001 	strb	r4, [r3, #1]
		}
		if (child->sp) {
			char * str = NULL;

			str = make_string((child->argv + i));
			parse_string_outer(str, FLAG_EXIT_FROM_LOOP | FLAG_REPARSING);
c7e0c42c:	e3a01005 	mov	r1, #5	; 0x5
c7e0c430:	e1a00005 	mov	r0, r5
c7e0c434:	ebfffe3b 	bl	c7e0bd28 <parse_string_outer>
			free(str);
c7e0c438:	e1a00005 	mov	r0, r5
c7e0c43c:	ebfff2c7 	bl	c7e08f60 <free>
			return last_return_code;
c7e0c440:	e59f311c 	ldr	r3, [pc, #284]	; c7e0c564 <run_list_real+0x774>
c7e0c444:	e5937234 	ldr	r7, [r3, #564]
c7e0c448:	ea000010 	b	c7e0c490 <run_list_real+0x6a0>
		}
#else
		/* check ";", because ,example , argv consist from
		 * "help;flinfo" must not execute
		 */
		if (strchr(child->argv[i], ';')) {
c7e0c44c:	e7920006 	ldr	r0, [r2, r6]
c7e0c450:	e3a0103b 	mov	r1, #59	; 0x3b
c7e0c454:	eb005923 	bl	c7e228e8 <strchr>
c7e0c458:	e3500000 	cmp	r0, #0	; 0x0
c7e0c45c:	0a000004 	beq	c7e0c474 <run_list_real+0x684>
			printf("Unknown command '%s' - try 'help' or use "
c7e0c460:	e5953000 	ldr	r3, [r5]
c7e0c464:	e59f0108 	ldr	r0, [pc, #264]	; c7e0c574 <run_list_real+0x784>
c7e0c468:	e7931006 	ldr	r1, [r3, r6]
c7e0c46c:	ebfff179 	bl	c7e08a58 <printf>
c7e0c470:	ea000039 	b	c7e0c55c <run_list_real+0x76c>
					"'run' command\n", child->argv[i]);
			return -1;
		}
		/* Process the command */
		return cmd_process(flag, child->argc, child->argv,
c7e0c474:	e2570000 	subs	r0, r7, #0	; 0x0
c7e0c478:	13a00001 	movne	r0, #1	; 0x1
c7e0c47c:	e5952000 	ldr	r2, [r5]
c7e0c480:	e5951004 	ldr	r1, [r5, #4]
c7e0c484:	e59f30ec 	ldr	r3, [pc, #236]	; c7e0c578 <run_list_real+0x788>
c7e0c488:	ebfff032 	bl	c7e08558 <cmd_process>
c7e0c48c:	e1a07000 	mov	r7, r0
			}
			debug_printf("checkjobs returned %d\n",rcode);
		}
		last_return_code=rcode;
#else
		if (rcode < -1) {
c7e0c490:	e3770001 	cmn	r7, #1	; 0x1
c7e0c494:	aa000005 	bge	c7e0c4b0 <run_list_real+0x6c0>
			last_return_code = -rcode - 2;
c7e0c498:	e3e03001 	mvn	r3, #1	; 0x1
c7e0c49c:	e59f20c0 	ldr	r2, [pc, #192]	; c7e0c564 <run_list_real+0x774>
c7e0c4a0:	e0673003 	rsb	r3, r7, r3
c7e0c4a4:	e5823234 	str	r3, [r2, #564]
c7e0c4a8:	e3e07001 	mvn	r7, #1	; 0x1
c7e0c4ac:	ea000025 	b	c7e0c548 <run_list_real+0x758>
		last_return_code=(rcode == 0) ? 0 : 1;
#endif
#ifndef __U_BOOT__
		pi->num_progs = save_num_progs; /* restore number of programs */
#endif
		if ( rmode == RES_IF || rmode == RES_ELIF )
c7e0c4b0:	e59d0024 	ldr	r0, [sp, #36]
c7e0c4b4:	e59d3000 	ldr	r3, [sp]
c7e0c4b8:	e59d1020 	ldr	r1, [sp, #32]
c7e0c4bc:	e3500001 	cmp	r0, #1	; 0x1
c7e0c4c0:	03833001 	orreq	r3, r3, #1	; 0x1
c7e0c4c4:	e3530000 	cmp	r3, #0	; 0x0
#else
		if (rcode < -1) {
			last_return_code = -rcode - 2;
			return -2;	/* exit */
		}
		last_return_code=(rcode == 0) ? 0 : 1;
c7e0c4c8:	e59f3094 	ldr	r3, [pc, #148]	; c7e0c564 <run_list_real+0x774>
#endif
#ifndef __U_BOOT__
		pi->num_progs = save_num_progs; /* restore number of programs */
#endif
		if ( rmode == RES_IF || rmode == RES_ELIF )
c7e0c4cc:	11a01007 	movne	r1, r7
#else
		if (rcode < -1) {
			last_return_code = -rcode - 2;
			return -2;	/* exit */
		}
		last_return_code=(rcode == 0) ? 0 : 1;
c7e0c4d0:	e2572000 	subs	r2, r7, #0	; 0x0
c7e0c4d4:	13a02001 	movne	r2, #1	; 0x1
#ifndef __U_BOOT__
		pi->num_progs = save_num_progs; /* restore number of programs */
#endif
		if ( rmode == RES_IF || rmode == RES_ELIF )
			next_if_code=rcode;  /* can be overwritten a number of times */
		if (rmode == RES_WHILE)
c7e0c4d8:	e3500007 	cmp	r0, #7	; 0x7
#else
		if (rcode < -1) {
			last_return_code = -rcode - 2;
			return -2;	/* exit */
		}
		last_return_code=(rcode == 0) ? 0 : 1;
c7e0c4dc:	e5832234 	str	r2, [r3, #564]
		pi->num_progs = save_num_progs; /* restore number of programs */
#endif
		if ( rmode == RES_IF || rmode == RES_ELIF )
			next_if_code=rcode;  /* can be overwritten a number of times */
		if (rmode == RES_WHILE)
			flag_rep = !last_return_code;
c7e0c4e0:	02222001 	eoreq	r2, r2, #1	; 0x1
		last_return_code=(rcode == 0) ? 0 : 1;
#endif
#ifndef __U_BOOT__
		pi->num_progs = save_num_progs; /* restore number of programs */
#endif
		if ( rmode == RES_IF || rmode == RES_ELIF )
c7e0c4e4:	e58d1020 	str	r1, [sp, #32]
			next_if_code=rcode;  /* can be overwritten a number of times */
		if (rmode == RES_WHILE)
			flag_rep = !last_return_code;
c7e0c4e8:	058d2014 	streq	r2, [sp, #20]
#ifndef __U_BOOT__
		pi->num_progs = save_num_progs; /* restore number of programs */
#endif
		if ( rmode == RES_IF || rmode == RES_ELIF )
			next_if_code=rcode;  /* can be overwritten a number of times */
		if (rmode == RES_WHILE)
c7e0c4ec:	0a000004 	beq	c7e0c504 <run_list_real+0x714>
			flag_rep = !last_return_code;
		if (rmode == RES_UNTIL)
			flag_rep = last_return_code;
c7e0c4f0:	e59d0024 	ldr	r0, [sp, #36]
c7e0c4f4:	e59d3014 	ldr	r3, [sp, #20]
c7e0c4f8:	e3500008 	cmp	r0, #8	; 0x8
c7e0c4fc:	01a03002 	moveq	r3, r2
c7e0c500:	e58d3014 	str	r3, [sp, #20]
		if ( (rcode==EXIT_SUCCESS && pi->followup==PIPE_OR) ||
c7e0c504:	e3570000 	cmp	r7, #0	; 0x0
c7e0c508:	e599300c 	ldr	r3, [r9, #12]
c7e0c50c:	1a000001 	bne	c7e0c518 <run_list_real+0x728>
c7e0c510:	e3530003 	cmp	r3, #3	; 0x3
c7e0c514:	ea000000 	b	c7e0c51c <run_list_real+0x72c>
c7e0c518:	e3530002 	cmp	r3, #2	; 0x2
c7e0c51c:	059d5024 	ldreq	r5, [sp, #36]
c7e0c520:	03a04001 	moveq	r4, #1	; 0x1
c7e0c524:	0a000001 	beq	c7e0c530 <run_list_real+0x740>
c7e0c528:	e3a04001 	mov	r4, #1	; 0x1
c7e0c52c:	e3a0500b 	mov	r5, #11	; 0xb
				flag_repeat = 0;
#endif
				return 1;
		}
	}
	for (; pi; pi = (flag_restore != 0) ? rpipe : pi->next) {
c7e0c530:	e59d1018 	ldr	r1, [sp, #24]
c7e0c534:	e3510000 	cmp	r1, #0	; 0x0
c7e0c538:	159d9038 	ldrne	r9, [sp, #56]
c7e0c53c:	05999008 	ldreq	r9, [r9, #8]
c7e0c540:	e3590000 	cmp	r9, #0	; 0x0
c7e0c544:	1afffe5d 	bne	c7e0bec0 <run_list_real+0xd0>
#ifndef __U_BOOT__
		checkjobs(NULL);
#endif
	}
	return rcode;
}
c7e0c548:	e1a00007 	mov	r0, r7
c7e0c54c:	e28dd040 	add	sp, sp, #64	; 0x40
c7e0c550:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
				flag_repeat = 0;
#endif
				return 1;
		}
	}
	for (; pi; pi = (flag_restore != 0) ? rpipe : pi->next) {
c7e0c554:	e1a07003 	mov	r7, r3
c7e0c558:	eaffffd4 	b	c7e0c4b0 <run_list_real+0x6c0>
c7e0c55c:	e3e07000 	mvn	r7, #0	; 0x0
c7e0c560:	eaffffd2 	b	c7e0c4b0 <run_list_real+0x6c0>
c7e0c564:	c7e40204 	.word	0xc7e40204
c7e0c568:	c7e2fb1a 	.word	0xc7e2fb1a
c7e0c56c:	c7e31fdb 	.word	0xc7e31fdb
c7e0c570:	c7e34f60 	.word	0xc7e34f60
c7e0c574:	c7e31fe8 	.word	0xc7e31fe8
c7e0c578:	c7e40308 	.word	0xc7e40308

c7e0c57c <__fswab32>:
{
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
c7e0c57c:	e1a03000 	mov	r3, r0
c7e0c580:	e1a00c00 	lsl	r0, r0, #24
c7e0c584:	e2032cff 	and	r2, r3, #65280	; 0xff00
c7e0c588:	e1800c23 	orr	r0, r0, r3, lsr #24
c7e0c58c:	e1800402 	orr	r0, r0, r2, lsl #8
c7e0c590:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
	return __arch__swab32(x);
}
c7e0c594:	e1800423 	orr	r0, r0, r3, lsr #8
c7e0c598:	e12fff1e 	bx	lr

c7e0c59c <image_get_data>:
 *     image payload data start address
 */
static inline ulong image_get_data(const image_header_t *hdr)
{
	return ((ulong)hdr + image_get_header_size());
}
c7e0c59c:	e2800040 	add	r0, r0, #64	; 0x40
c7e0c5a0:	e12fff1e 	bx	lr

c7e0c5a4 <image_check_type>:
static inline int image_check_magic(const image_header_t *hdr)
{
	return (image_get_magic(hdr) == IH_MAGIC);
}
static inline int image_check_type(const image_header_t *hdr, uint8_t type)
{
c7e0c5a4:	e5d0001e 	ldrb	r0, [r0, #30]
	return (image_get_type(hdr) == type);
}
c7e0c5a8:	e1500001 	cmp	r0, r1
c7e0c5ac:	13a00000 	movne	r0, #0	; 0x0
c7e0c5b0:	03a00001 	moveq	r0, #1	; 0x1
c7e0c5b4:	e12fff1e 	bx	lr

c7e0c5b8 <image_multi_count>:
 *
 * returns:
 *     number of components
 */
ulong image_multi_count(const image_header_t *hdr)
{
c7e0c5b8:	e92d4010 	push	{r4, lr}
	ulong i, count = 0;
	uint32_t *size;

	/* get start of the image payload, which in case of multi
	 * component images that points to a table of component sizes */
	size = (uint32_t *)image_get_data(hdr);
c7e0c5bc:	ebfffff6 	bl	c7e0c59c <image_get_data>
c7e0c5c0:	e1a02000 	mov	r2, r0
c7e0c5c4:	e3a00000 	mov	r0, #0	; 0x0
c7e0c5c8:	ea000000 	b	c7e0c5d0 <image_multi_count+0x18>

	/* count non empty slots */
	for (i = 0; size[i]; ++i)
c7e0c5cc:	e2800001 	add	r0, r0, #1	; 0x1
c7e0c5d0:	e7923100 	ldr	r3, [r2, r0, lsl #2]
c7e0c5d4:	e3530000 	cmp	r3, #0	; 0x0
c7e0c5d8:	1afffffb 	bne	c7e0c5cc <image_multi_count+0x14>
		count++;

	return count;
}
c7e0c5dc:	e8bd8010 	pop	{r4, pc}

c7e0c5e0 <get_table_entry_name>:
 * returns:
 *     long entry name if translation succeeds
 *     msg otherwise
 */
char *get_table_entry_name(const table_entry_t *table, char *msg, int id)
{
c7e0c5e0:	ea000003 	b	c7e0c5f4 <get_table_entry_name+0x14>
	for (; table->id >= 0; ++table) {
		if (table->id == id)
c7e0c5e4:	e1530002 	cmp	r3, r2
#if defined(USE_HOSTCC) || !defined(CONFIG_NEEDS_MANUAL_RELOC)
			return table->lname;
c7e0c5e8:	05901008 	ldreq	r1, [r0, #8]
c7e0c5ec:	0a000003 	beq	c7e0c600 <get_table_entry_name+0x20>
 *     long entry name if translation succeeds
 *     msg otherwise
 */
char *get_table_entry_name(const table_entry_t *table, char *msg, int id)
{
	for (; table->id >= 0; ++table) {
c7e0c5f0:	e280000c 	add	r0, r0, #12	; 0xc
c7e0c5f4:	e5903000 	ldr	r3, [r0]
c7e0c5f8:	e3530000 	cmp	r3, #0	; 0x0
c7e0c5fc:	aafffff8 	bge	c7e0c5e4 <get_table_entry_name+0x4>
#else
			return table->lname + gd->reloc_off;
#endif
	}
	return (msg);
}
c7e0c600:	e1a00001 	mov	r0, r1
c7e0c604:	e12fff1e 	bx	lr

c7e0c608 <genimg_get_os_name>:

const char *genimg_get_os_name(uint8_t os)
{
c7e0c608:	e1a02000 	mov	r2, r0
	return (get_table_entry_name(uimage_os, "Unknown OS", os));
c7e0c60c:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c618 <genimg_get_os_name+0x10>
c7e0c610:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c61c <genimg_get_os_name+0x14>
c7e0c614:	eafffff1 	b	c7e0c5e0 <get_table_entry_name>
c7e0c618:	c7e320de 	.word	0xc7e320de
c7e0c61c:	c7e2b338 	.word	0xc7e2b338

c7e0c620 <genimg_get_arch_name>:
}

const char *genimg_get_arch_name(uint8_t arch)
{
c7e0c620:	e1a02000 	mov	r2, r0
	return (get_table_entry_name(uimage_arch, "Unknown Architecture",
c7e0c624:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c630 <genimg_get_arch_name+0x10>
c7e0c628:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c634 <genimg_get_arch_name+0x14>
c7e0c62c:	eaffffeb 	b	c7e0c5e0 <get_table_entry_name>
c7e0c630:	c7e320e9 	.word	0xc7e320e9
c7e0c634:	c7e2b3a4 	.word	0xc7e2b3a4

c7e0c638 <genimg_get_type_name>:
					arch));
}

const char *genimg_get_type_name(uint8_t type)
{
c7e0c638:	e1a02000 	mov	r2, r0
	return (get_table_entry_name(uimage_type, "Unknown Image", type));
c7e0c63c:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c648 <genimg_get_type_name+0x10>
c7e0c640:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c64c <genimg_get_type_name+0x14>
c7e0c644:	eaffffe5 	b	c7e0c5e0 <get_table_entry_name>
c7e0c648:	c7e320fe 	.word	0xc7e320fe
c7e0c64c:	c7e2b4a0 	.word	0xc7e2b4a0

c7e0c650 <genimg_get_comp_name>:
}

const char *genimg_get_comp_name(uint8_t comp)
{
c7e0c650:	e1a02000 	mov	r2, r0
	return (get_table_entry_name(uimage_comp, "Unknown Compression",
c7e0c654:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c660 <genimg_get_comp_name+0x10>
c7e0c658:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c664 <genimg_get_comp_name+0x14>
c7e0c65c:	eaffffdf 	b	c7e0c5e0 <get_table_entry_name>
c7e0c660:	c7e3210c 	.word	0xc7e3210c
c7e0c664:	c7e2b56c 	.word	0xc7e2b56c

c7e0c668 <genimg_get_image>:

	}
#endif /* CONFIG_HAS_DATAFLASH */

	return ram_addr;
}
c7e0c668:	e12fff1e 	bx	lr

c7e0c66c <genimg_has_config>:
#if defined(CONFIG_FIT)
	if (images->fit_uname_cfg)
		return 1;
#endif
	return 0;
}
c7e0c66c:	e3a00000 	mov	r0, #0	; 0x0
c7e0c670:	e12fff1e 	bx	lr

c7e0c674 <getenv_yesno>:
/*****************************************************************************/
/* Shared dual-format routines */
/*****************************************************************************/
#ifndef USE_HOSTCC
int getenv_yesno(char *var)
{
c7e0c674:	e92d4010 	push	{r4, lr}
	char *s = getenv(var);
c7e0c678:	ebffea87 	bl	c7e0709c <getenv>
	return (s && (*s == 'n')) ? 0 : 1;
c7e0c67c:	e3500000 	cmp	r0, #0	; 0x0
c7e0c680:	03a00001 	moveq	r0, #1	; 0x1
c7e0c684:	08bd8010 	popeq	{r4, pc}
c7e0c688:	e5d03000 	ldrb	r3, [r0]
c7e0c68c:	e253006e 	subs	r0, r3, #110	; 0x6e
c7e0c690:	13a00001 	movne	r0, #1	; 0x1
}
c7e0c694:	e8bd8010 	pop	{r4, pc}

c7e0c698 <getenv_bootm_low>:

ulong getenv_bootm_low(void)
{
c7e0c698:	e92d4010 	push	{r4, lr}
	char *s = getenv("bootm_low");
c7e0c69c:	e59f0020 	ldr	r0, [pc, #32]	; c7e0c6c4 <getenv_bootm_low+0x2c>
c7e0c6a0:	ebffea7d 	bl	c7e0709c <getenv>
	if (s) {
c7e0c6a4:	e3500000 	cmp	r0, #0	; 0x0
c7e0c6a8:	1a000001 	bne	c7e0c6b4 <getenv_bootm_low+0x1c>
#elif defined(CONFIG_ARM)
	return gd->bd->bi_dram[0].start;
#else
	return 0;
#endif
}
c7e0c6ac:	e2800205 	add	r0, r0, #1342177280	; 0x50000000
c7e0c6b0:	e8bd8010 	pop	{r4, pc}

ulong getenv_bootm_low(void)
{
	char *s = getenv("bootm_low");
	if (s) {
		ulong tmp = simple_strtoul(s, NULL, 16);
c7e0c6b4:	e3a01000 	mov	r1, #0	; 0x0
c7e0c6b8:	e3a02010 	mov	r2, #16	; 0x10
#elif defined(CONFIG_ARM)
	return gd->bd->bi_dram[0].start;
#else
	return 0;
#endif
}
c7e0c6bc:	e8bd4010 	pop	{r4, lr}

ulong getenv_bootm_low(void)
{
	char *s = getenv("bootm_low");
	if (s) {
		ulong tmp = simple_strtoul(s, NULL, 16);
c7e0c6c0:	ea005a26 	b	c7e22f60 <simple_strtoul>
c7e0c6c4:	c7e32120 	.word	0xc7e32120

c7e0c6c8 <bootstage_mark>:
 * This is a dummy implementation which just calls show_boot_progress(),
 * and won't even do that unless CONFIG_SHOW_BOOT_PROGRESS is defined
 */

static inline ulong bootstage_mark(enum bootstage_id id)
{
c7e0c6c8:	e92d4010 	push	{r4, lr}
	show_boot_progress(id);
c7e0c6cc:	eb00046a 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e0c6d0:	e3a00000 	mov	r0, #0	; 0x0
c7e0c6d4:	e8bd8010 	pop	{r4, pc}

c7e0c6d8 <bootstage_error>:

static inline ulong bootstage_error(enum bootstage_id id)
{
c7e0c6d8:	e92d4010 	push	{r4, lr}
	show_boot_progress(-id);
c7e0c6dc:	e2600000 	rsb	r0, r0, #0	; 0x0
c7e0c6e0:	eb000465 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e0c6e4:	e3a00000 	mov	r0, #0	; 0x0
c7e0c6e8:	e8bd8010 	pop	{r4, pc}

c7e0c6ec <get_table_entry_id>:
 *     entry id if translation succeeds
 *     -1 otherwise
 */
int get_table_entry_id(const table_entry_t *table,
		const char *table_name, const char *name)
{
c7e0c6ec:	e92d4070 	push	{r4, r5, r6, lr}
c7e0c6f0:	e1a05002 	mov	r5, r2
c7e0c6f4:	e1a04000 	mov	r4, r0
c7e0c6f8:	ea000008 	b	c7e0c720 <get_table_entry_id+0x34>
#else
	for (t = table; t->id >= 0; ++t) {
#ifdef CONFIG_NEEDS_MANUAL_RELOC
		if (t->sname && strcmp(t->sname + gd->reloc_off, name) == 0)
#else
		if (t->sname && strcmp(t->sname, name) == 0)
c7e0c6fc:	e5943004 	ldr	r3, [r4, #4]
c7e0c700:	e2530000 	subs	r0, r3, #0	; 0x0
c7e0c704:	0a000004 	beq	c7e0c71c <get_table_entry_id+0x30>
c7e0c708:	eb005854 	bl	c7e22860 <strcmp>
c7e0c70c:	e3500000 	cmp	r0, #0	; 0x0
c7e0c710:	1a000001 	bne	c7e0c71c <get_table_entry_id+0x30>
#endif
			return (t->id);
c7e0c714:	e5940000 	ldr	r0, [r4]
c7e0c718:	e8bd8070 	pop	{r4, r5, r6, pc}
		fprintf(stderr, "%c %s", (first) ? ':' : ',', t->sname);
		first = 0;
	}
	fprintf(stderr, "\n");
#else
	for (t = table; t->id >= 0; ++t) {
c7e0c71c:	e284400c 	add	r4, r4, #12	; 0xc
c7e0c720:	e5943000 	ldr	r3, [r4]
#ifdef CONFIG_NEEDS_MANUAL_RELOC
		if (t->sname && strcmp(t->sname + gd->reloc_off, name) == 0)
#else
		if (t->sname && strcmp(t->sname, name) == 0)
c7e0c724:	e1a01005 	mov	r1, r5
		fprintf(stderr, "%c %s", (first) ? ':' : ',', t->sname);
		first = 0;
	}
	fprintf(stderr, "\n");
#else
	for (t = table; t->id >= 0; ++t) {
c7e0c728:	e3530000 	cmp	r3, #0	; 0x0
c7e0c72c:	aafffff2 	bge	c7e0c6fc <get_table_entry_id+0x10>
c7e0c730:	e3e00000 	mvn	r0, #0	; 0x0
			return (t->id);
	}
	debug("Invalid %s Type: %s\n", table_name, name);
#endif /* USE_HOSTCC */
	return (-1);
}
c7e0c734:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0c738 <genimg_get_comp_id>:
{
	return (get_table_entry_id(uimage_type, "Image", name));
}

int genimg_get_comp_id(const char *name)
{
c7e0c738:	e1a02000 	mov	r2, r0
	return (get_table_entry_id(uimage_comp, "Compression", name));
c7e0c73c:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c748 <genimg_get_comp_id+0x10>
c7e0c740:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c74c <genimg_get_comp_id+0x14>
c7e0c744:	eaffffe8 	b	c7e0c6ec <get_table_entry_id>
c7e0c748:	c7e32114 	.word	0xc7e32114
c7e0c74c:	c7e2b56c 	.word	0xc7e2b56c

c7e0c750 <genimg_get_type_id>:
{
	return (get_table_entry_id(uimage_arch, "CPU", name));
}

int genimg_get_type_id(const char *name)
{
c7e0c750:	e1a02000 	mov	r2, r0
	return (get_table_entry_id(uimage_type, "Image", name));
c7e0c754:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c760 <genimg_get_type_id+0x10>
c7e0c758:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c764 <genimg_get_type_id+0x14>
c7e0c75c:	eaffffe2 	b	c7e0c6ec <get_table_entry_id>
c7e0c760:	c7e3244a 	.word	0xc7e3244a
c7e0c764:	c7e2b4a0 	.word	0xc7e2b4a0

c7e0c768 <genimg_get_arch_id>:
{
	return (get_table_entry_id(uimage_os, "OS", name));
}

int genimg_get_arch_id(const char *name)
{
c7e0c768:	e1a02000 	mov	r2, r0
	return (get_table_entry_id(uimage_arch, "CPU", name));
c7e0c76c:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c778 <genimg_get_arch_id+0x10>
c7e0c770:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c77c <genimg_get_arch_id+0x14>
c7e0c774:	eaffffdc 	b	c7e0c6ec <get_table_entry_id>
c7e0c778:	c7e2e5b4 	.word	0xc7e2e5b4
c7e0c77c:	c7e2b3a4 	.word	0xc7e2b3a4

c7e0c780 <genimg_get_os_id>:
#endif /* USE_HOSTCC */
	return (-1);
}

int genimg_get_os_id(const char *name)
{
c7e0c780:	e1a02000 	mov	r2, r0
	return (get_table_entry_id(uimage_os, "OS", name));
c7e0c784:	e59f1004 	ldr	r1, [pc, #4]	; c7e0c790 <genimg_get_os_id+0x10>
c7e0c788:	e59f0004 	ldr	r0, [pc, #4]	; c7e0c794 <genimg_get_os_id+0x14>
c7e0c78c:	eaffffd6 	b	c7e0c6ec <get_table_entry_id>
c7e0c790:	c7e32607 	.word	0xc7e32607
c7e0c794:	c7e2b338 	.word	0xc7e2b338

c7e0c798 <image_check_magic>:
phys_size_t getenv_bootm_mapsize(void);
void memmove_wd(void *to, void *from, size_t len, ulong chunksz);
#endif

static inline int image_check_magic(const image_header_t *hdr)
{
c7e0c798:	e92d4010 	push	{r4, lr}
#define image_get_hdr_l(f) \
	static inline uint32_t image_get_##f(const image_header_t *hdr) \
	{ \
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
c7e0c79c:	e5900000 	ldr	r0, [r0]
c7e0c7a0:	ebffff75 	bl	c7e0c57c <__fswab32>
c7e0c7a4:	e59f300c 	ldr	r3, [pc, #12]	; c7e0c7b8 <image_check_magic+0x20>
#endif

static inline int image_check_magic(const image_header_t *hdr)
{
	return (image_get_magic(hdr) == IH_MAGIC);
}
c7e0c7a8:	e1500003 	cmp	r0, r3
c7e0c7ac:	13a00000 	movne	r0, #0	; 0x0
c7e0c7b0:	03a00001 	moveq	r0, #1	; 0x1
c7e0c7b4:	e8bd8010 	pop	{r4, pc}
c7e0c7b8:	27051956 	.word	0x27051956

c7e0c7bc <genimg_get_format>:
 *
 * returns:
 *     image format type or IMAGE_FORMAT_INVALID if no image is present
 */
int genimg_get_format(void *img_addr)
{
c7e0c7bc:	e92d4010 	push	{r4, lr}
#if defined(CONFIG_FIT) || defined(CONFIG_OF_LIBFDT)
	char *fit_hdr;
#endif

	hdr = (const image_header_t *)img_addr;
	if (image_check_magic(hdr))
c7e0c7c0:	ebfffff4 	bl	c7e0c798 <image_check_magic>
			format = IMAGE_FORMAT_FIT;
	}
#endif

	return format;
}
c7e0c7c4:	e2500000 	subs	r0, r0, #0	; 0x0
c7e0c7c8:	13a00001 	movne	r0, #1	; 0x1
c7e0c7cc:	e8bd8010 	pop	{r4, pc}

c7e0c7d0 <image_get_data_size>:
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
image_get_hdr_l(hcrc)		/* image_get_hcrc */
image_get_hdr_l(time)		/* image_get_time */
image_get_hdr_l(size)		/* image_get_size */
c7e0c7d0:	e590000c 	ldr	r0, [r0, #12]
c7e0c7d4:	eaffff68 	b	c7e0c57c <__fswab32>

c7e0c7d8 <image_get_load>:
image_get_hdr_l(load)		/* image_get_load */
c7e0c7d8:	e5900010 	ldr	r0, [r0, #16]
c7e0c7dc:	eaffff66 	b	c7e0c57c <__fswab32>

c7e0c7e0 <image_multi_getimg>:
 *     data address and size of the component, if idx is valid
 *     0 in data and len, if idx is out of range
 */
void image_multi_getimg(const image_header_t *hdr, ulong idx,
			ulong *data, ulong *len)
{
c7e0c7e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e0c7e4:	e1a05003 	mov	r5, r3
c7e0c7e8:	e1a07001 	mov	r7, r1
c7e0c7ec:	e1a09002 	mov	r9, r2
c7e0c7f0:	e1a04000 	mov	r4, r0
	int i;
	uint32_t *size;
	ulong offset, count, img_data;

	/* get number of component */
	count = image_multi_count(hdr);
c7e0c7f4:	ebffff6f 	bl	c7e0c5b8 <image_multi_count>

	/* get address of the proper component data start, which means
	 * skipping sizes table (add 1 for last, null entry) */
	img_data = image_get_data(hdr) + (count + 1) * sizeof(uint32_t);

	if (idx < count) {
c7e0c7f8:	e1570000 	cmp	r7, r0
		}

		/* calculate idx-th component data address */
		*data = img_data + offset;
	} else {
		*len = 0;
c7e0c7fc:	23a03000 	movcs	r3, #0	; 0x0
	int i;
	uint32_t *size;
	ulong offset, count, img_data;

	/* get number of component */
	count = image_multi_count(hdr);
c7e0c800:	e1a0a000 	mov	sl, r0
		}

		/* calculate idx-th component data address */
		*data = img_data + offset;
	} else {
		*len = 0;
c7e0c804:	25853000 	strcs	r3, [r5]

	/* get address of the proper component data start, which means
	 * skipping sizes table (add 1 for last, null entry) */
	img_data = image_get_data(hdr) + (count + 1) * sizeof(uint32_t);

	if (idx < count) {
c7e0c808:	2a000013 	bcs	c7e0c85c <image_multi_getimg+0x7c>
	/* get number of component */
	count = image_multi_count(hdr);

	/* get start of the image payload, which in case of multi
	 * component images that points to a table of component sizes */
	size = (uint32_t *)image_get_data(hdr);
c7e0c80c:	e1a00004 	mov	r0, r4
c7e0c810:	ebffff61 	bl	c7e0c59c <image_get_data>
c7e0c814:	e1a06000 	mov	r6, r0
	/* get address of the proper component data start, which means
	 * skipping sizes table (add 1 for last, null entry) */
	img_data = image_get_data(hdr) + (count + 1) * sizeof(uint32_t);

	if (idx < count) {
		*len = uimage_to_cpu(size[idx]);
c7e0c818:	e7900107 	ldr	r0, [r0, r7, lsl #2]
c7e0c81c:	ebffff56 	bl	c7e0c57c <__fswab32>
c7e0c820:	e3a04000 	mov	r4, #0	; 0x0
c7e0c824:	e5850000 	str	r0, [r5]
c7e0c828:	e1a05004 	mov	r5, r4
c7e0c82c:	ea000005 	b	c7e0c848 <image_multi_getimg+0x68>
		offset = 0;

		/* go over all indices preceding requested component idx */
		for (i = 0; i < idx; i++) {
			/* add up i-th component size, rounding up to 4 bytes */
			offset += (uimage_to_cpu(size[i]) + 3) & ~3 ;
c7e0c830:	e7960104 	ldr	r0, [r6, r4, lsl #2]
c7e0c834:	ebffff50 	bl	c7e0c57c <__fswab32>
c7e0c838:	e2800003 	add	r0, r0, #3	; 0x3
c7e0c83c:	e3c00003 	bic	r0, r0, #3	; 0x3
c7e0c840:	e0855000 	add	r5, r5, r0
	if (idx < count) {
		*len = uimage_to_cpu(size[idx]);
		offset = 0;

		/* go over all indices preceding requested component idx */
		for (i = 0; i < idx; i++) {
c7e0c844:	e2844001 	add	r4, r4, #1	; 0x1
c7e0c848:	e1540007 	cmp	r4, r7
c7e0c84c:	3afffff7 	bcc	c7e0c830 <image_multi_getimg+0x50>
			/* add up i-th component size, rounding up to 4 bytes */
			offset += (uimage_to_cpu(size[i]) + 3) & ~3 ;
		}

		/* calculate idx-th component data address */
		*data = img_data + offset;
c7e0c850:	e28a3001 	add	r3, sl, #1	; 0x1
c7e0c854:	e0863103 	add	r3, r6, r3, lsl #2
c7e0c858:	e0833005 	add	r3, r3, r5
	} else {
		*len = 0;
		*data = 0;
c7e0c85c:	e5893000 	str	r3, [r9]
c7e0c860:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

c7e0c864 <genimg_print_size>:
#endif	/* CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG */
}
#endif /* !USE_HOSTCC */

void genimg_print_size(uint32_t size)
{
c7e0c864:	e92d4010 	push	{r4, lr}
#ifndef USE_HOSTCC
	printf("%d Bytes = ", size);
c7e0c868:	e1a01000 	mov	r1, r0
#endif	/* CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG */
}
#endif /* !USE_HOSTCC */

void genimg_print_size(uint32_t size)
{
c7e0c86c:	e1a04000 	mov	r4, r0
#ifndef USE_HOSTCC
	printf("%d Bytes = ", size);
c7e0c870:	e59f0014 	ldr	r0, [pc, #20]	; c7e0c88c <genimg_print_size+0x28>
c7e0c874:	ebfff077 	bl	c7e08a58 <printf>
	print_size(size, "\n");
c7e0c878:	e59f2010 	ldr	r2, [pc, #16]	; c7e0c890 <genimg_print_size+0x2c>
c7e0c87c:	e1a00004 	mov	r0, r4
c7e0c880:	e3a01000 	mov	r1, #0	; 0x0
#else
	printf("%d Bytes = %.2f kB = %.2f MB\n",
			size, (double)size / 1.024e3,
			(double)size / 1.048576e6);
#endif
}
c7e0c884:	e8bd4010 	pop	{r4, lr}

void genimg_print_size(uint32_t size)
{
#ifndef USE_HOSTCC
	printf("%d Bytes = ", size);
	print_size(size, "\n");
c7e0c888:	ea005132 	b	c7e20d58 <print_size>
c7e0c88c:	c7e3212a 	.word	0xc7e3212a
c7e0c890:	c7e31f94 	.word	0xc7e31f94

c7e0c894 <image_print_contents>:
 *
 * returns:
 *     no returned results
 */
void image_print_contents(const void *ptr)
{
c7e0c894:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	p = "";
#else
	p = "   ";
#endif

	printf("%sImage Name:   %.*s\n", p, IH_NMLEN, image_get_name(hdr));
c7e0c898:	e3a02020 	mov	r2, #32	; 0x20
 *
 * returns:
 *     no returned results
 */
void image_print_contents(const void *ptr)
{
c7e0c89c:	e24dd014 	sub	sp, sp, #20	; 0x14
c7e0c8a0:	e1a07000 	mov	r7, r0
	p = "";
#else
	p = "   ";
#endif

	printf("%sImage Name:   %.*s\n", p, IH_NMLEN, image_get_name(hdr));
c7e0c8a4:	e0803002 	add	r3, r0, r2
c7e0c8a8:	e59f1150 	ldr	r1, [pc, #336]	; c7e0ca00 <image_print_contents+0x16c>
c7e0c8ac:	e59f0150 	ldr	r0, [pc, #336]	; c7e0ca04 <image_print_contents+0x170>
c7e0c8b0:	ebfff068 	bl	c7e08a58 <printf>
#if defined(CONFIG_TIMESTAMP) || defined(CONFIG_CMD_DATE) || defined(USE_HOSTCC)
	printf("%sCreated:      ", p);
	genimg_print_time((time_t)image_get_time(hdr));
#endif
	printf("%sImage Type:   ", p);
c7e0c8b4:	e59f1144 	ldr	r1, [pc, #324]	; c7e0ca00 <image_print_contents+0x16c>
c7e0c8b8:	e59f0148 	ldr	r0, [pc, #328]	; c7e0ca08 <image_print_contents+0x174>
c7e0c8bc:	ebfff065 	bl	c7e08a58 <printf>

static void image_print_type(const image_header_t *hdr)
{
	const char *os, *arch, *type, *comp;

	os = genimg_get_os_name(image_get_os(hdr));
c7e0c8c0:	e5d7001c 	ldrb	r0, [r7, #28]
c7e0c8c4:	ebffff4f 	bl	c7e0c608 <genimg_get_os_name>
c7e0c8c8:	e1a06000 	mov	r6, r0
	arch = genimg_get_arch_name(image_get_arch(hdr));
c7e0c8cc:	e5d7001d 	ldrb	r0, [r7, #29]
c7e0c8d0:	ebffff52 	bl	c7e0c620 <genimg_get_arch_name>
c7e0c8d4:	e1a05000 	mov	r5, r0
	type = genimg_get_type_name(image_get_type(hdr));
c7e0c8d8:	e5d7001e 	ldrb	r0, [r7, #30]
c7e0c8dc:	ebffff55 	bl	c7e0c638 <genimg_get_type_name>
c7e0c8e0:	e1a04000 	mov	r4, r0
	comp = genimg_get_comp_name(image_get_comp(hdr));
c7e0c8e4:	e5d7001f 	ldrb	r0, [r7, #31]
c7e0c8e8:	ebffff58 	bl	c7e0c650 <genimg_get_comp_name>

	printf("%s %s %s (%s)\n", arch, os, type, comp);
c7e0c8ec:	e1a03004 	mov	r3, r4
c7e0c8f0:	e1a02006 	mov	r2, r6
c7e0c8f4:	e58d0000 	str	r0, [sp]
c7e0c8f8:	e1a01005 	mov	r1, r5
c7e0c8fc:	e59f0108 	ldr	r0, [pc, #264]	; c7e0ca0c <image_print_contents+0x178>
c7e0c900:	ebfff054 	bl	c7e08a58 <printf>
	printf("%sCreated:      ", p);
	genimg_print_time((time_t)image_get_time(hdr));
#endif
	printf("%sImage Type:   ", p);
	image_print_type(hdr);
	printf("%sData Size:    ", p);
c7e0c904:	e59f10f4 	ldr	r1, [pc, #244]	; c7e0ca00 <image_print_contents+0x16c>
c7e0c908:	e59f0100 	ldr	r0, [pc, #256]	; c7e0ca10 <image_print_contents+0x17c>
c7e0c90c:	ebfff051 	bl	c7e08a58 <printf>
	genimg_print_size(image_get_data_size(hdr));
c7e0c910:	e1a00007 	mov	r0, r7
c7e0c914:	ebffffad 	bl	c7e0c7d0 <image_get_data_size>
c7e0c918:	ebffffd1 	bl	c7e0c864 <genimg_print_size>
	printf("%sLoad Address: %08x\n", p, image_get_load(hdr));
c7e0c91c:	e1a00007 	mov	r0, r7
c7e0c920:	ebffffac 	bl	c7e0c7d8 <image_get_load>
c7e0c924:	e59f10d4 	ldr	r1, [pc, #212]	; c7e0ca00 <image_print_contents+0x16c>
c7e0c928:	e1a02000 	mov	r2, r0
c7e0c92c:	e59f00e0 	ldr	r0, [pc, #224]	; c7e0ca14 <image_print_contents+0x180>
c7e0c930:	ebfff048 	bl	c7e08a58 <printf>
image_get_hdr_l(ep)		/* image_get_ep */
c7e0c934:	e5970014 	ldr	r0, [r7, #20]
c7e0c938:	ebffff0f 	bl	c7e0c57c <__fswab32>
	printf("%sEntry Point:  %08x\n", p, image_get_ep(hdr));
c7e0c93c:	e59f10bc 	ldr	r1, [pc, #188]	; c7e0ca00 <image_print_contents+0x16c>
c7e0c940:	e1a02000 	mov	r2, r0
c7e0c944:	e59f00cc 	ldr	r0, [pc, #204]	; c7e0ca18 <image_print_contents+0x184>
c7e0c948:	ebfff042 	bl	c7e08a58 <printf>

	if (image_check_type(hdr, IH_TYPE_MULTI) ||
c7e0c94c:	e1a00007 	mov	r0, r7
c7e0c950:	e3a01004 	mov	r1, #4	; 0x4
c7e0c954:	ebffff12 	bl	c7e0c5a4 <image_check_type>
c7e0c958:	e3500000 	cmp	r0, #0	; 0x0
c7e0c95c:	1a000004 	bne	c7e0c974 <image_print_contents+0xe0>
c7e0c960:	e1a00007 	mov	r0, r7
c7e0c964:	e3a01006 	mov	r1, #6	; 0x6
c7e0c968:	ebffff0d 	bl	c7e0c5a4 <image_check_type>
c7e0c96c:	e3500000 	cmp	r0, #0	; 0x0
c7e0c970:	0a000020 	beq	c7e0c9f8 <image_print_contents+0x164>
			image_check_type(hdr, IH_TYPE_SCRIPT)) {
		int i;
		ulong data, len;
		ulong count = image_multi_count(hdr);
c7e0c974:	e1a00007 	mov	r0, r7
c7e0c978:	ebffff0e 	bl	c7e0c5b8 <image_multi_count>

		printf("%sContents:\n", p);
c7e0c97c:	e59f107c 	ldr	r1, [pc, #124]	; c7e0ca00 <image_print_contents+0x16c>

	if (image_check_type(hdr, IH_TYPE_MULTI) ||
			image_check_type(hdr, IH_TYPE_SCRIPT)) {
		int i;
		ulong data, len;
		ulong count = image_multi_count(hdr);
c7e0c980:	e1a05000 	mov	r5, r0

		printf("%sContents:\n", p);
c7e0c984:	e59f0090 	ldr	r0, [pc, #144]	; c7e0ca1c <image_print_contents+0x188>
c7e0c988:	ebfff032 	bl	c7e08a58 <printf>
c7e0c98c:	e3a04000 	mov	r4, #0	; 0x0
c7e0c990:	ea000012 	b	c7e0c9e0 <image_print_contents+0x14c>
		for (i = 0; i < count; i++) {
			image_multi_getimg(hdr, i, &data, &len);
c7e0c994:	ebffff91 	bl	c7e0c7e0 <image_multi_getimg>

			printf("%s   Image %d: ", p, i);
c7e0c998:	e1a02004 	mov	r2, r4
c7e0c99c:	e59f105c 	ldr	r1, [pc, #92]	; c7e0ca00 <image_print_contents+0x16c>
c7e0c9a0:	e59f0078 	ldr	r0, [pc, #120]	; c7e0ca20 <image_print_contents+0x18c>
c7e0c9a4:	ebfff02b 	bl	c7e08a58 <printf>
			genimg_print_size(len);
c7e0c9a8:	e59d0008 	ldr	r0, [sp, #8]
c7e0c9ac:	ebffffac 	bl	c7e0c864 <genimg_print_size>

			if (image_check_type(hdr, IH_TYPE_SCRIPT) && i > 0) {
c7e0c9b0:	e1a00007 	mov	r0, r7
c7e0c9b4:	e3a01006 	mov	r1, #6	; 0x6
c7e0c9b8:	ebfffef9 	bl	c7e0c5a4 <image_check_type>
c7e0c9bc:	e3500000 	cmp	r0, #0	; 0x0
c7e0c9c0:	0a000005 	beq	c7e0c9dc <image_print_contents+0x148>
c7e0c9c4:	e3540000 	cmp	r4, #0	; 0x0
				/*
				 * the user may need to know offsets
				 * if planning to do something with
				 * multiple files
				 */
				printf("%s    Offset = 0x%08lx\n", p, data);
c7e0c9c8:	e59f0054 	ldr	r0, [pc, #84]	; c7e0ca24 <image_print_contents+0x190>
c7e0c9cc:	e59f102c 	ldr	r1, [pc, #44]	; c7e0ca00 <image_print_contents+0x16c>
			image_multi_getimg(hdr, i, &data, &len);

			printf("%s   Image %d: ", p, i);
			genimg_print_size(len);

			if (image_check_type(hdr, IH_TYPE_SCRIPT) && i > 0) {
c7e0c9d0:	0a000001 	beq	c7e0c9dc <image_print_contents+0x148>
				/*
				 * the user may need to know offsets
				 * if planning to do something with
				 * multiple files
				 */
				printf("%s    Offset = 0x%08lx\n", p, data);
c7e0c9d4:	e59d200c 	ldr	r2, [sp, #12]
c7e0c9d8:	ebfff01e 	bl	c7e08a58 <printf>
		int i;
		ulong data, len;
		ulong count = image_multi_count(hdr);

		printf("%sContents:\n", p);
		for (i = 0; i < count; i++) {
c7e0c9dc:	e2844001 	add	r4, r4, #1	; 0x1
c7e0c9e0:	e1540005 	cmp	r4, r5
			image_multi_getimg(hdr, i, &data, &len);
c7e0c9e4:	e28d3008 	add	r3, sp, #8	; 0x8
c7e0c9e8:	e1a01004 	mov	r1, r4
c7e0c9ec:	e1a00007 	mov	r0, r7
c7e0c9f0:	e28d200c 	add	r2, sp, #12	; 0xc
		int i;
		ulong data, len;
		ulong count = image_multi_count(hdr);

		printf("%sContents:\n", p);
		for (i = 0; i < count; i++) {
c7e0c9f4:	3affffe6 	bcc	c7e0c994 <image_print_contents+0x100>
				 */
				printf("%s    Offset = 0x%08lx\n", p, data);
			}
		}
	}
}
c7e0c9f8:	e28dd014 	add	sp, sp, #20	; 0x14
c7e0c9fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e0ca00:	c7e343fa 	.word	0xc7e343fa
c7e0ca04:	c7e32136 	.word	0xc7e32136
c7e0ca08:	c7e3214c 	.word	0xc7e3214c
c7e0ca0c:	c7e3215d 	.word	0xc7e3215d
c7e0ca10:	c7e3216c 	.word	0xc7e3216c
c7e0ca14:	c7e3217d 	.word	0xc7e3217d
c7e0ca18:	c7e32193 	.word	0xc7e32193
c7e0ca1c:	c7e321a9 	.word	0xc7e321a9
c7e0ca20:	c7e321b6 	.word	0xc7e321b6
c7e0ca24:	c7e321c6 	.word	0xc7e321c6

c7e0ca28 <memmove_wd>:
#endif
}

void memmove_wd(void *to, void *from, size_t len, ulong chunksz)
{
	if (to == from)
c7e0ca28:	e1510000 	cmp	r1, r0
c7e0ca2c:	012fff1e 	bxeq	lr
		to += tail;
		from += tail;
		len -= tail;
	}
#else	/* !(CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG) */
	memmove(to, from, len);
c7e0ca30:	ea0058a2 	b	c7e22cc0 <memmove>

c7e0ca34 <boot_ramdisk_high>:
 *      0 - success
 *     -1 - failure
 */
int boot_ramdisk_high(struct lmb *lmb, ulong rd_data, ulong rd_len,
		  ulong *initrd_start, ulong *initrd_end)
{
c7e0ca34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e0ca38:	e1a07000 	mov	r7, r0
	char	*s;
	ulong	initrd_high;
	int	initrd_copy_to_ram = 1;

	if ((s = getenv("initrd_high")) != NULL) {
c7e0ca3c:	e59f010c 	ldr	r0, [pc, #268]	; c7e0cb50 <boot_ramdisk_high+0x11c>
 *      0 - success
 *     -1 - failure
 */
int boot_ramdisk_high(struct lmb *lmb, ulong rd_data, ulong rd_len,
		  ulong *initrd_start, ulong *initrd_end)
{
c7e0ca40:	e1a04003 	mov	r4, r3
c7e0ca44:	e1a06001 	mov	r6, r1
c7e0ca48:	e1a0a002 	mov	sl, r2
c7e0ca4c:	e59d9020 	ldr	r9, [sp, #32]
	char	*s;
	ulong	initrd_high;
	int	initrd_copy_to_ram = 1;

	if ((s = getenv("initrd_high")) != NULL) {
c7e0ca50:	ebffe991 	bl	c7e0709c <getenv>
c7e0ca54:	e3500000 	cmp	r0, #0	; 0x0
c7e0ca58:	03e03000 	mvneq	r3, #0	; 0x0
c7e0ca5c:	03a05001 	moveq	r5, #1	; 0x1
c7e0ca60:	0a000005 	beq	c7e0ca7c <boot_ramdisk_high+0x48>
		/* a value of "no" or a similar string will act like 0,
		 * turning the "load high" feature off. This is intentional.
		 */
		initrd_high = simple_strtoul(s, NULL, 16);
c7e0ca64:	e3a01000 	mov	r1, #0	; 0x0
c7e0ca68:	e3a02010 	mov	r2, #16	; 0x10
c7e0ca6c:	eb00593b 	bl	c7e22f60 <simple_strtoul>
c7e0ca70:	e1a03000 	mov	r3, r0
		if (initrd_high == ~0)
c7e0ca74:	e2905001 	adds	r5, r0, #1	; 0x1
c7e0ca78:	13a05001 	movne	r5, #1	; 0x1
#endif

	debug("## initrd_high = 0x%08lx, copy_to_ram = %d\n",
			initrd_high, initrd_copy_to_ram);

	if (rd_data) {
c7e0ca7c:	e3560000 	cmp	r6, #0	; 0x0
c7e0ca80:	0a00002e 	beq	c7e0cb40 <boot_ramdisk_high+0x10c>
		if (!initrd_copy_to_ram) {	/* zero-copy ramdisk support */
c7e0ca84:	e3550000 	cmp	r5, #0	; 0x0
c7e0ca88:	1a000008 	bne	c7e0cab0 <boot_ramdisk_high+0x7c>
			debug("   in-place initrd\n");
			*initrd_start = rd_data;
			*initrd_end = rd_data + rd_len;
c7e0ca8c:	e08a3006 	add	r3, sl, r6
			initrd_high, initrd_copy_to_ram);

	if (rd_data) {
		if (!initrd_copy_to_ram) {	/* zero-copy ramdisk support */
			debug("   in-place initrd\n");
			*initrd_start = rd_data;
c7e0ca90:	e5846000 	str	r6, [r4]
			*initrd_end = rd_data + rd_len;
			lmb_reserve(lmb, rd_data, rd_len);
c7e0ca94:	e1a00007 	mov	r0, r7

	if (rd_data) {
		if (!initrd_copy_to_ram) {	/* zero-copy ramdisk support */
			debug("   in-place initrd\n");
			*initrd_start = rd_data;
			*initrd_end = rd_data + rd_len;
c7e0ca98:	e5893000 	str	r3, [r9]
			lmb_reserve(lmb, rd_data, rd_len);
c7e0ca9c:	e1a01006 	mov	r1, r6
c7e0caa0:	e1a0200a 	mov	r2, sl
c7e0caa4:	eb005646 	bl	c7e223c4 <lmb_reserve>
c7e0caa8:	e1a00005 	mov	r0, r5
c7e0caac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		} else {
			if (initrd_high)
c7e0cab0:	e3530000 	cmp	r3, #0	; 0x0
c7e0cab4:	0a000004 	beq	c7e0cacc <boot_ramdisk_high+0x98>
				*initrd_start = (ulong)lmb_alloc_base(lmb,
c7e0cab8:	e1a00007 	mov	r0, r7
c7e0cabc:	e1a0100a 	mov	r1, sl
c7e0cac0:	e3a02a01 	mov	r2, #4096	; 0x1000
c7e0cac4:	eb0056b8 	bl	c7e225ac <lmb_alloc_base>
c7e0cac8:	ea000003 	b	c7e0cadc <boot_ramdisk_high+0xa8>
						rd_len, 0x1000, initrd_high);
			else
				*initrd_start = (ulong)lmb_alloc(lmb, rd_len,
c7e0cacc:	e1a00007 	mov	r0, r7
c7e0cad0:	e1a0100a 	mov	r1, sl
c7e0cad4:	e3a02a01 	mov	r2, #4096	; 0x1000
c7e0cad8:	eb0056c0 	bl	c7e225e0 <lmb_alloc>
c7e0cadc:	e5840000 	str	r0, [r4]
								 0x1000);

			if (*initrd_start == 0) {
c7e0cae0:	e5943000 	ldr	r3, [r4]
c7e0cae4:	e3530000 	cmp	r3, #0	; 0x0
c7e0cae8:	1a000003 	bne	c7e0cafc <boot_ramdisk_high+0xc8>
				puts("ramdisk - allocation error\n");
c7e0caec:	e59f0060 	ldr	r0, [pc, #96]	; c7e0cb54 <boot_ramdisk_high+0x120>
c7e0caf0:	ebffefbd 	bl	c7e089ec <puts>
c7e0caf4:	e3e00000 	mvn	r0, #0	; 0x0
c7e0caf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
				goto error;
			}
			bootstage_mark(BOOTSTAGE_ID_COPY_RAMDISK);
c7e0cafc:	e3a0000c 	mov	r0, #12	; 0xc
c7e0cb00:	ebfffef0 	bl	c7e0c6c8 <bootstage_mark>

			*initrd_end = *initrd_start + rd_len;
c7e0cb04:	e5942000 	ldr	r2, [r4]
			printf("   Loading Ramdisk to %08lx, end %08lx ... ",
c7e0cb08:	e59f0048 	ldr	r0, [pc, #72]	; c7e0cb58 <boot_ramdisk_high+0x124>
				puts("ramdisk - allocation error\n");
				goto error;
			}
			bootstage_mark(BOOTSTAGE_ID_COPY_RAMDISK);

			*initrd_end = *initrd_start + rd_len;
c7e0cb0c:	e08a2002 	add	r2, sl, r2
c7e0cb10:	e5892000 	str	r2, [r9]
			printf("   Loading Ramdisk to %08lx, end %08lx ... ",
c7e0cb14:	e5941000 	ldr	r1, [r4]
c7e0cb18:	ebffefce 	bl	c7e08a58 <printf>
					*initrd_start, *initrd_end);

			memmove_wd((void *)*initrd_start,
c7e0cb1c:	e5940000 	ldr	r0, [r4]
c7e0cb20:	e1a01006 	mov	r1, r6
c7e0cb24:	e1a0200a 	mov	r2, sl
c7e0cb28:	e3a03801 	mov	r3, #65536	; 0x10000
c7e0cb2c:	ebffffbd 	bl	c7e0ca28 <memmove_wd>
			 * AMP boot scenarios in which we might not be
			 * HW cache coherent
			 */
			flush_cache((unsigned long)*initrd_start, rd_len);
#endif
			puts("OK\n");
c7e0cb30:	e59f0024 	ldr	r0, [pc, #36]	; c7e0cb5c <boot_ramdisk_high+0x128>
c7e0cb34:	ebffefac 	bl	c7e089ec <puts>
c7e0cb38:	e3a00000 	mov	r0, #0	; 0x0
c7e0cb3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		}
	} else {
		*initrd_start = 0;
c7e0cb40:	e5846000 	str	r6, [r4]
		*initrd_end = 0;
c7e0cb44:	e1a00006 	mov	r0, r6
c7e0cb48:	e5896000 	str	r6, [r9]

	return 0;

error:
	return -1;
}
c7e0cb4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e0cb50:	c7e321de 	.word	0xc7e321de
c7e0cb54:	c7e321ea 	.word	0xc7e321ea
c7e0cb58:	c7e32206 	.word	0xc7e32206
c7e0cb5c:	c7e2e649 	.word	0xc7e2e649

c7e0cb60 <getenv_bootm_size>:
	return 0;
#endif
}

phys_size_t getenv_bootm_size(void)
{
c7e0cb60:	e92d4010 	push	{r4, lr}
	phys_size_t tmp;
	char *s = getenv("bootm_size");
c7e0cb64:	e59f0048 	ldr	r0, [pc, #72]	; c7e0cbb4 <getenv_bootm_size+0x54>
c7e0cb68:	ebffe94b 	bl	c7e0709c <getenv>
	if (s) {
c7e0cb6c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0cb70:	0a000003 	beq	c7e0cb84 <getenv_bootm_size+0x24>
		tmp = (phys_size_t)simple_strtoull(s, NULL, 16);
c7e0cb74:	e3a02010 	mov	r2, #16	; 0x10
c7e0cb78:	e3a01000 	mov	r1, #0	; 0x0
c7e0cb7c:	eb00594c 	bl	c7e230b4 <simple_strtoull>
c7e0cb80:	e8bd8010 	pop	{r4, pc}
		return tmp;
	}
	s = getenv("bootm_low");
c7e0cb84:	e59f002c 	ldr	r0, [pc, #44]	; c7e0cbb8 <getenv_bootm_size+0x58>
c7e0cb88:	ebffe943 	bl	c7e0709c <getenv>
	if (s)
c7e0cb8c:	e2503000 	subs	r3, r0, #0	; 0x0
c7e0cb90:	01a00003 	moveq	r0, r3
c7e0cb94:	0a000002 	beq	c7e0cba4 <getenv_bootm_size+0x44>
		tmp = (phys_size_t)simple_strtoull(s, NULL, 16);
c7e0cb98:	e1a01004 	mov	r1, r4
c7e0cb9c:	e3a02010 	mov	r2, #16	; 0x10
c7e0cba0:	eb005943 	bl	c7e230b4 <simple_strtoull>
	else
		tmp = 0;


#if defined(CONFIG_ARM)
	return gd->bd->bi_dram[0].size - tmp;
c7e0cba4:	e5983000 	ldr	r3, [r8]
c7e0cba8:	e593301c 	ldr	r3, [r3, #28]
c7e0cbac:	e0600003 	rsb	r0, r0, r3
#else
	return gd->bd->bi_memsize - tmp;
#endif
}
c7e0cbb0:	e8bd8010 	pop	{r4, pc}
c7e0cbb4:	c7e32232 	.word	0xc7e32232
c7e0cbb8:	c7e32120 	.word	0xc7e32120

c7e0cbbc <getenv_bootm_mapsize>:

phys_size_t getenv_bootm_mapsize(void)
{
c7e0cbbc:	e92d4010 	push	{r4, lr}
	phys_size_t tmp;
	char *s = getenv("bootm_mapsize");
c7e0cbc0:	e59f0020 	ldr	r0, [pc, #32]	; c7e0cbe8 <getenv_bootm_mapsize+0x2c>
c7e0cbc4:	ebffe934 	bl	c7e0709c <getenv>
	if (s) {
c7e0cbc8:	e3500000 	cmp	r0, #0	; 0x0
c7e0cbcc:	0a000003 	beq	c7e0cbe0 <getenv_bootm_mapsize+0x24>
		tmp = (phys_size_t)simple_strtoull(s, NULL, 16);
c7e0cbd0:	e3a02010 	mov	r2, #16	; 0x10
c7e0cbd4:	e3a01000 	mov	r1, #0	; 0x0
c7e0cbd8:	eb005935 	bl	c7e230b4 <simple_strtoull>
#if defined(CONFIG_SYS_BOOTMAPSZ)
	return CONFIG_SYS_BOOTMAPSZ;
#else
	return getenv_bootm_size();
#endif
}
c7e0cbdc:	e8bd8010 	pop	{r4, pc}
c7e0cbe0:	e8bd4010 	pop	{r4, lr}
	}

#if defined(CONFIG_SYS_BOOTMAPSZ)
	return CONFIG_SYS_BOOTMAPSZ;
#else
	return getenv_bootm_size();
c7e0cbe4:	eaffffdd 	b	c7e0cb60 <getenv_bootm_size>
c7e0cbe8:	c7e3223d 	.word	0xc7e3223d

c7e0cbec <image_check_dcrc>:

	return (hcrc == image_get_hcrc(hdr));
}

int image_check_dcrc(const image_header_t *hdr)
{
c7e0cbec:	e92d4070 	push	{r4, r5, r6, lr}
c7e0cbf0:	e1a05000 	mov	r5, r0
	ulong data = image_get_data(hdr);
c7e0cbf4:	ebfffe68 	bl	c7e0c59c <image_get_data>
c7e0cbf8:	e1a04000 	mov	r4, r0
	ulong len = image_get_data_size(hdr);
c7e0cbfc:	e1a00005 	mov	r0, r5
c7e0cc00:	ebfffef2 	bl	c7e0c7d0 <image_get_data_size>
	ulong dcrc = crc32_wd(0, (unsigned char *)data, len, CHUNKSZ_CRC32);
c7e0cc04:	e1a01004 	mov	r1, r4
}

int image_check_dcrc(const image_header_t *hdr)
{
	ulong data = image_get_data(hdr);
	ulong len = image_get_data_size(hdr);
c7e0cc08:	e1a02000 	mov	r2, r0
	ulong dcrc = crc32_wd(0, (unsigned char *)data, len, CHUNKSZ_CRC32);
c7e0cc0c:	e3a03801 	mov	r3, #65536	; 0x10000
c7e0cc10:	e3a00000 	mov	r0, #0	; 0x0
c7e0cc14:	eb00503f 	bl	c7e20d18 <crc32_wd>
c7e0cc18:	e1a04000 	mov	r4, r0
image_get_hdr_l(dcrc)		/* image_get_dcrc */
c7e0cc1c:	e5950018 	ldr	r0, [r5, #24]
c7e0cc20:	ebfffe55 	bl	c7e0c57c <__fswab32>

	return (dcrc == image_get_dcrc(hdr));
}
c7e0cc24:	e1540000 	cmp	r4, r0
c7e0cc28:	13a00000 	movne	r0, #0	; 0x0
c7e0cc2c:	03a00001 	moveq	r0, #1	; 0x1
c7e0cc30:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0cc34 <image_check_hcrc>:

/*****************************************************************************/
/* Legacy format routines */
/*****************************************************************************/
int image_check_hcrc(const image_header_t *hdr)
{
c7e0cc34:	e92d4030 	push	{r4, r5, lr}
c7e0cc38:	e24dd044 	sub	sp, sp, #68	; 0x44
c7e0cc3c:	e1a05000 	mov	r5, r0
	ulong hcrc;
	ulong len = image_get_header_size();
	image_header_t header;

	/* Copy header so we can blank CRC field for re-calculation */
	memmove(&header, (char *)hdr, image_get_header_size());
c7e0cc40:	e1a01000 	mov	r1, r0
c7e0cc44:	e3a02040 	mov	r2, #64	; 0x40
c7e0cc48:	e1a0000d 	mov	r0, sp
c7e0cc4c:	eb00581b 	bl	c7e22cc0 <memmove>
	static inline void image_set_##f(image_header_t *hdr, uint32_t val) \
	{ \
		hdr->ih_##f = cpu_to_uimage(val); \
	}
image_set_hdr_l(magic)		/* image_set_magic */
image_set_hdr_l(hcrc)		/* image_set_hcrc */
c7e0cc50:	e3a03000 	mov	r3, #0	; 0x0
	image_set_hcrc(&header, 0);

	hcrc = crc32(0, (unsigned char *)&header, len);
c7e0cc54:	e1a0100d 	mov	r1, sp
c7e0cc58:	e1a00003 	mov	r0, r3
c7e0cc5c:	e3a02040 	mov	r2, #64	; 0x40
c7e0cc60:	e58d3004 	str	r3, [sp, #4]
c7e0cc64:	eb005026 	bl	c7e20d04 <crc32>
c7e0cc68:	e1a04000 	mov	r4, r0
	static inline uint32_t image_get_##f(const image_header_t *hdr) \
	{ \
		return uimage_to_cpu(hdr->ih_##f); \
	}
image_get_hdr_l(magic)		/* image_get_magic */
image_get_hdr_l(hcrc)		/* image_get_hcrc */
c7e0cc6c:	e5950004 	ldr	r0, [r5, #4]
c7e0cc70:	ebfffe41 	bl	c7e0c57c <__fswab32>

	return (hcrc == image_get_hcrc(hdr));
}
c7e0cc74:	e1540000 	cmp	r4, r0
c7e0cc78:	13a00000 	movne	r0, #0	; 0x0
c7e0cc7c:	03a00001 	moveq	r0, #1	; 0x1
c7e0cc80:	e28dd044 	add	sp, sp, #68	; 0x44
c7e0cc84:	e8bd8030 	pop	{r4, r5, pc}

c7e0cc88 <boot_get_ramdisk>:
 *     1, if ramdisk image is found but corrupted, or invalid
 *     rd_start and rd_end are set to 0 if no ramdisk exists
 */
int boot_get_ramdisk(int argc, char * const argv[], bootm_headers_t *images,
		uint8_t arch, ulong *rd_start, ulong *rd_end)
{
c7e0cc88:	e92d46f7 	push	{r0, r1, r2, r4, r5, r6, r7, r9, sl, lr}
c7e0cc8c:	e59da028 	ldr	sl, [sp, #40]
c7e0cc90:	e59d902c 	ldr	r9, [sp, #44]
	int		cfg_noffset;
	const void	*data;
	size_t		size;
#endif

	*rd_start = 0;
c7e0cc94:	e3a04000 	mov	r4, #0	; 0x0

	/*
	 * Look for a '-' which indicates to ignore the
	 * ramdisk argument
	 */
	if ((argc >= 3) && (strcmp(argv[2], "-") ==  0)) {
c7e0cc98:	e3500002 	cmp	r0, #2	; 0x2
	int		cfg_noffset;
	const void	*data;
	size_t		size;
#endif

	*rd_start = 0;
c7e0cc9c:	e58a4000 	str	r4, [sl]
 *     1, if ramdisk image is found but corrupted, or invalid
 *     rd_start and rd_end are set to 0 if no ramdisk exists
 */
int boot_get_ramdisk(int argc, char * const argv[], bootm_headers_t *images,
		uint8_t arch, ulong *rd_start, ulong *rd_end)
{
c7e0cca0:	e1a06001 	mov	r6, r1
c7e0cca4:	e1a05002 	mov	r5, r2
c7e0cca8:	e1a07003 	mov	r7, r3
	const void	*data;
	size_t		size;
#endif

	*rd_start = 0;
	*rd_end = 0;
c7e0ccac:	e5894000 	str	r4, [r9]

	/*
	 * Look for a '-' which indicates to ignore the
	 * ramdisk argument
	 */
	if ((argc >= 3) && (strcmp(argv[2], "-") ==  0)) {
c7e0ccb0:	da000010 	ble	c7e0ccf8 <boot_get_ramdisk+0x70>
c7e0ccb4:	e5910008 	ldr	r0, [r1, #8]
c7e0ccb8:	e59f11ec 	ldr	r1, [pc, #492]	; c7e0ceac <boot_get_ramdisk+0x224>
c7e0ccbc:	eb0056e7 	bl	c7e22860 <strcmp>
c7e0ccc0:	e3500000 	cmp	r0, #0	; 0x0
		debug("## Skipping init Ramdisk\n");
		rd_len = rd_data = 0;
c7e0ccc4:	058d0000 	streq	r0, [sp]
c7e0ccc8:	058d0004 	streq	r0, [sp, #4]

	/*
	 * Look for a '-' which indicates to ignore the
	 * ramdisk argument
	 */
	if ((argc >= 3) && (strcmp(argv[2], "-") ==  0)) {
c7e0cccc:	0a00006e 	beq	c7e0ce8c <boot_get_ramdisk+0x204>
						"0x%08lx\n",
						fit_uname_ramdisk, rd_addr);
			} else
#endif
			{
				rd_addr = simple_strtoul(argv[2], NULL, 16);
c7e0ccd0:	e1a01004 	mov	r1, r4
c7e0ccd4:	e5960008 	ldr	r0, [r6, #8]
c7e0ccd8:	e3a02010 	mov	r2, #16	; 0x10
c7e0ccdc:	eb00589f 	bl	c7e22f60 <simple_strtoul>
c7e0cce0:	e1a04000 	mov	r4, r0
		/*
		 * Check if there is an initrd image at the
		 * address provided in the second bootm argument
		 * check image type, for FIT images get FIT node.
		 */
		switch (genimg_get_format((void *)rd_addr)) {
c7e0cce4:	ebfffeb4 	bl	c7e0c7bc <genimg_get_format>
c7e0cce8:	e3500001 	cmp	r0, #1	; 0x1
c7e0ccec:	e1a06000 	mov	r6, r0
c7e0ccf0:	1a00004c 	bne	c7e0ce28 <boot_get_ramdisk+0x1a0>
c7e0ccf4:	ea000003 	b	c7e0cd08 <boot_get_ramdisk+0x80>
				puts("Wrong Ramdisk Image Format\n");
				rd_data = rd_len = rd_load = 0;
				return 1;
			}
		}
	} else if (images->legacy_hdr_valid &&
c7e0ccf8:	e5923044 	ldr	r3, [r2, #68]
c7e0ccfc:	e3530000 	cmp	r3, #0	; 0x0
c7e0cd00:	0a00005c 	beq	c7e0ce78 <boot_get_ramdisk+0x1f0>
c7e0cd04:	ea00004b 	b	c7e0ce38 <boot_get_ramdisk+0x1b0>
		 * address provided in the second bootm argument
		 * check image type, for FIT images get FIT node.
		 */
		switch (genimg_get_format((void *)rd_addr)) {
		case IMAGE_FORMAT_LEGACY:
			printf("## Loading init Ramdisk from Legacy "
c7e0cd08:	e1a01004 	mov	r1, r4
c7e0cd0c:	e59f019c 	ldr	r0, [pc, #412]	; c7e0ceb0 <boot_get_ramdisk+0x228>
c7e0cd10:	ebffef50 	bl	c7e08a58 <printf>
					"Image at %08lx ...\n", rd_addr);

			bootstage_mark(BOOTSTAGE_ID_CHECK_RAMDISK);
c7e0cd14:	e3a00009 	mov	r0, #9	; 0x9
c7e0cd18:	ebfffe6a 	bl	c7e0c6c8 <bootstage_mark>
static const image_header_t *image_get_ramdisk(ulong rd_addr, uint8_t arch,
						int verify)
{
	const image_header_t *rd_hdr = (const image_header_t *)rd_addr;

	if (!image_check_magic(rd_hdr)) {
c7e0cd1c:	e1a00004 	mov	r0, r4
		case IMAGE_FORMAT_LEGACY:
			printf("## Loading init Ramdisk from Legacy "
					"Image at %08lx ...\n", rd_addr);

			bootstage_mark(BOOTSTAGE_ID_CHECK_RAMDISK);
			rd_hdr = image_get_ramdisk(rd_addr, arch,
c7e0cd20:	e5955084 	ldr	r5, [r5, #132]
static const image_header_t *image_get_ramdisk(ulong rd_addr, uint8_t arch,
						int verify)
{
	const image_header_t *rd_hdr = (const image_header_t *)rd_addr;

	if (!image_check_magic(rd_hdr)) {
c7e0cd24:	ebfffe9b 	bl	c7e0c798 <image_check_magic>
c7e0cd28:	e3500000 	cmp	r0, #0	; 0x0
c7e0cd2c:	1a000003 	bne	c7e0cd40 <boot_get_ramdisk+0xb8>
		puts("Bad Magic Number\n");
c7e0cd30:	e59f017c 	ldr	r0, [pc, #380]	; c7e0ceb4 <boot_get_ramdisk+0x22c>
c7e0cd34:	ebffef2c 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_RD_MAGIC);
c7e0cd38:	e3a0000a 	mov	r0, #10	; 0xa
c7e0cd3c:	ea000006 	b	c7e0cd5c <boot_get_ramdisk+0xd4>
		return NULL;
	}

	if (!image_check_hcrc(rd_hdr)) {
c7e0cd40:	e1a00004 	mov	r0, r4
c7e0cd44:	ebffffba 	bl	c7e0cc34 <image_check_hcrc>
c7e0cd48:	e3500000 	cmp	r0, #0	; 0x0
c7e0cd4c:	1a000005 	bne	c7e0cd68 <boot_get_ramdisk+0xe0>
		puts("Bad Header Checksum\n");
c7e0cd50:	e59f0160 	ldr	r0, [pc, #352]	; c7e0ceb8 <boot_get_ramdisk+0x230>
c7e0cd54:	ebffef24 	bl	c7e089ec <puts>
		bootstage_error(BOOTSTAGE_ID_RD_HDR_CHECKSUM);
c7e0cd58:	e3a0000b 	mov	r0, #11	; 0xb
c7e0cd5c:	ebfffe5d 	bl	c7e0c6d8 <bootstage_error>
c7e0cd60:	e1a00006 	mov	r0, r6
c7e0cd64:	ea00004f 	b	c7e0cea8 <boot_get_ramdisk+0x220>
		return NULL;
	}

	bootstage_mark(BOOTSTAGE_ID_RD_MAGIC);
c7e0cd68:	e3a0000a 	mov	r0, #10	; 0xa
c7e0cd6c:	ebfffe55 	bl	c7e0c6c8 <bootstage_mark>
	image_print_contents(rd_hdr);
c7e0cd70:	e1a00004 	mov	r0, r4
c7e0cd74:	ebfffec6 	bl	c7e0c894 <image_print_contents>

	if (verify) {
c7e0cd78:	e3550000 	cmp	r5, #0	; 0x0
c7e0cd7c:	0a00000b 	beq	c7e0cdb0 <boot_get_ramdisk+0x128>
		puts("   Verifying Checksum ... ");
c7e0cd80:	e59f0134 	ldr	r0, [pc, #308]	; c7e0cebc <boot_get_ramdisk+0x234>
c7e0cd84:	ebffef18 	bl	c7e089ec <puts>
		if (!image_check_dcrc(rd_hdr)) {
c7e0cd88:	e1a00004 	mov	r0, r4
c7e0cd8c:	ebffff96 	bl	c7e0cbec <image_check_dcrc>
c7e0cd90:	e3500000 	cmp	r0, #0	; 0x0
c7e0cd94:	1a000003 	bne	c7e0cda8 <boot_get_ramdisk+0x120>
			puts("Bad Data CRC\n");
c7e0cd98:	e59f0120 	ldr	r0, [pc, #288]	; c7e0cec0 <boot_get_ramdisk+0x238>
c7e0cd9c:	ebffef12 	bl	c7e089ec <puts>
			bootstage_error(BOOTSTAGE_ID_RD_CHECKSUM);
c7e0cda0:	e3a0000c 	mov	r0, #12	; 0xc
c7e0cda4:	eaffffec 	b	c7e0cd5c <boot_get_ramdisk+0xd4>
			return NULL;
		}
		puts("OK\n");
c7e0cda8:	e59f0114 	ldr	r0, [pc, #276]	; c7e0cec4 <boot_get_ramdisk+0x23c>
c7e0cdac:	ebffef0e 	bl	c7e089ec <puts>
	}

	bootstage_mark(BOOTSTAGE_ID_RD_HDR_CHECKSUM);
c7e0cdb0:	e3a0000b 	mov	r0, #11	; 0xb
c7e0cdb4:	ebfffe43 	bl	c7e0c6c8 <bootstage_mark>

	if (!image_check_os(rd_hdr, IH_OS_LINUX) ||
c7e0cdb8:	e5d4301c 	ldrb	r3, [r4, #28]
c7e0cdbc:	e3530005 	cmp	r3, #5	; 0x5
c7e0cdc0:	1a000007 	bne	c7e0cde4 <boot_get_ramdisk+0x15c>
c7e0cdc4:	e5d4301d 	ldrb	r3, [r4, #29]
c7e0cdc8:	e1530007 	cmp	r3, r7
c7e0cdcc:	1a000004 	bne	c7e0cde4 <boot_get_ramdisk+0x15c>
c7e0cdd0:	e1a00004 	mov	r0, r4
c7e0cdd4:	e3a01003 	mov	r1, #3	; 0x3
c7e0cdd8:	ebfffdf1 	bl	c7e0c5a4 <image_check_type>
c7e0cddc:	e3500000 	cmp	r0, #0	; 0x0
c7e0cde0:	1a000007 	bne	c7e0ce04 <boot_get_ramdisk+0x17c>
	    !image_check_arch(rd_hdr, arch) ||
	    !image_check_type(rd_hdr, IH_TYPE_RAMDISK)) {
		printf("No Linux %s Ramdisk Image\n",
c7e0cde4:	e1a00007 	mov	r0, r7
c7e0cde8:	ebfffe0c 	bl	c7e0c620 <genimg_get_arch_name>
c7e0cdec:	e1a01000 	mov	r1, r0
c7e0cdf0:	e59f00d0 	ldr	r0, [pc, #208]	; c7e0cec8 <boot_get_ramdisk+0x240>
c7e0cdf4:	ebffef17 	bl	c7e08a58 <printf>
				genimg_get_arch_name(arch));
		bootstage_error(BOOTSTAGE_ID_RAMDISK);
c7e0cdf8:	e3a0000d 	mov	r0, #13	; 0xd
c7e0cdfc:	ebfffe35 	bl	c7e0c6d8 <bootstage_error>
c7e0ce00:	ea00000a 	b	c7e0ce30 <boot_get_ramdisk+0x1a8>
							images->verify);

			if (rd_hdr == NULL)
				return 1;

			rd_data = image_get_data(rd_hdr);
c7e0ce04:	e1a00004 	mov	r0, r4
c7e0ce08:	ebfffde3 	bl	c7e0c59c <image_get_data>
c7e0ce0c:	e58d0004 	str	r0, [sp, #4]
			rd_len = image_get_data_size(rd_hdr);
c7e0ce10:	e1a00004 	mov	r0, r4
c7e0ce14:	ebfffe6d 	bl	c7e0c7d0 <image_get_data_size>
c7e0ce18:	e58d0000 	str	r0, [sp]
			rd_load = image_get_load(rd_hdr);
c7e0ce1c:	e1a00004 	mov	r0, r4
c7e0ce20:	ebfffe6c 	bl	c7e0c7d8 <image_get_load>
c7e0ce24:	ea000018 	b	c7e0ce8c <boot_get_ramdisk+0x204>
				rd_len = simple_strtoul(++end, NULL, 16);
				rd_data = rd_addr;
			} else
#endif
			{
				puts("Wrong Ramdisk Image Format\n");
c7e0ce28:	e59f009c 	ldr	r0, [pc, #156]	; c7e0cecc <boot_get_ramdisk+0x244>
c7e0ce2c:	ebffeeee 	bl	c7e089ec <puts>
c7e0ce30:	e3a00001 	mov	r0, #1	; 0x1
c7e0ce34:	ea00001b 	b	c7e0cea8 <boot_get_ramdisk+0x220>
				rd_data = rd_len = rd_load = 0;
				return 1;
			}
		}
	} else if (images->legacy_hdr_valid &&
c7e0ce38:	e2820004 	add	r0, r2, #4	; 0x4
c7e0ce3c:	e3a01004 	mov	r1, #4	; 0x4
c7e0ce40:	ebfffdd7 	bl	c7e0c5a4 <image_check_type>
c7e0ce44:	e3500000 	cmp	r0, #0	; 0x0
c7e0ce48:	0a00000a 	beq	c7e0ce78 <boot_get_ramdisk+0x1f0>

		/*
		 * Now check if we have a legacy mult-component image,
		 * get second entry data start address and len.
		 */
		bootstage_mark(BOOTSTAGE_ID_RAMDISK);
c7e0ce4c:	e3a0000d 	mov	r0, #13	; 0xd
c7e0ce50:	ebfffe1c 	bl	c7e0c6c8 <bootstage_mark>
		printf("## Loading init Ramdisk from multi component "
c7e0ce54:	e5951000 	ldr	r1, [r5]
c7e0ce58:	e59f0070 	ldr	r0, [pc, #112]	; c7e0ced0 <boot_get_ramdisk+0x248>
c7e0ce5c:	ebffeefd 	bl	c7e08a58 <printf>
				"Legacy Image at %08lx ...\n",
				(ulong)images->legacy_hdr_os);

		image_multi_getimg(images->legacy_hdr_os, 1, &rd_data, &rd_len);
c7e0ce60:	e5950000 	ldr	r0, [r5]
c7e0ce64:	e3a01001 	mov	r1, #1	; 0x1
c7e0ce68:	e28d2004 	add	r2, sp, #4	; 0x4
c7e0ce6c:	e1a0300d 	mov	r3, sp
c7e0ce70:	ebfffe5a 	bl	c7e0c7e0 <image_multi_getimg>
c7e0ce74:	ea000004 	b	c7e0ce8c <boot_get_ramdisk+0x204>
	} else {
		/*
		 * no initrd image
		 */
		bootstage_mark(BOOTSTAGE_ID_NO_RAMDISK);
c7e0ce78:	e3a0000e 	mov	r0, #14	; 0xe
c7e0ce7c:	ebfffe11 	bl	c7e0c6c8 <bootstage_mark>
		rd_len = rd_data = 0;
c7e0ce80:	e3a03000 	mov	r3, #0	; 0x0
c7e0ce84:	e58d3000 	str	r3, [sp]
c7e0ce88:	e58d3004 	str	r3, [sp, #4]
	}

	if (!rd_data) {
c7e0ce8c:	e59d0004 	ldr	r0, [sp, #4]
c7e0ce90:	e3500000 	cmp	r0, #0	; 0x0
		debug("## No init Ramdisk\n");
	} else {
		*rd_start = rd_data;
		*rd_end = rd_data + rd_len;
c7e0ce94:	159d3000 	ldrne	r3, [sp]
	}

	if (!rd_data) {
		debug("## No init Ramdisk\n");
	} else {
		*rd_start = rd_data;
c7e0ce98:	158a0000 	strne	r0, [sl]
		*rd_end = rd_data + rd_len;
c7e0ce9c:	10833000 	addne	r3, r3, r0
c7e0cea0:	15893000 	strne	r3, [r9]
c7e0cea4:	13a00000 	movne	r0, #0	; 0x0
	}
	debug("   ramdisk start = 0x%08lx, ramdisk end = 0x%08lx\n",
			*rd_start, *rd_end);

	return 0;
}
c7e0cea8:	e8bd86fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r9, sl, pc}
c7e0ceac:	c7e3224b 	.word	0xc7e3224b
c7e0ceb0:	c7e3224d 	.word	0xc7e3224d
c7e0ceb4:	c7e2e5f3 	.word	0xc7e2e5f3
c7e0ceb8:	c7e2e608 	.word	0xc7e2e608
c7e0cebc:	c7e2e61d 	.word	0xc7e2e61d
c7e0cec0:	c7e2e63b 	.word	0xc7e2e63b
c7e0cec4:	c7e2e649 	.word	0xc7e2e649
c7e0cec8:	c7e32285 	.word	0xc7e32285
c7e0cecc:	c7e322a0 	.word	0xc7e322a0
c7e0ced0:	c7e322bc 	.word	0xc7e322bc

c7e0ced4 <lcd_putc_xy>:

#if LCD_BPP == LCD_MONOCHROME
	ushort off  = x * (1 << LCD_BPP) % 8;
#endif

	dest = (uchar *)(lcd_base + y * lcd_line_length + x * (1 << LCD_BPP) / 8);
c7e0ced4:	e59f3084 	ldr	r3, [pc, #132]	; c7e0cf60 <lcd_putc_xy+0x8c>
}

/*----------------------------------------------------------------------*/

static inline void lcd_putc_xy(ushort x, ushort y, uchar c)
{
c7e0ced8:	e92d4013 	push	{r0, r1, r4, lr}

#if LCD_BPP == LCD_MONOCHROME
	ushort off  = x * (1 << LCD_BPP) % 8;
#endif

	dest = (uchar *)(lcd_base + y * lcd_line_length + x * (1 << LCD_BPP) / 8);
c7e0cedc:	e2811060 	add	r1, r1, #96	; 0x60
c7e0cee0:	e5933000 	ldr	r3, [r3]
c7e0cee4:	e1a01801 	lsl	r1, r1, #16
c7e0cee8:	e1a01821 	lsr	r1, r1, #16
c7e0ceec:	e1a00100 	lsl	r0, r0, #2
c7e0cef0:	e0210193 	mla	r1, r3, r1, r0
c7e0cef4:	e59f3068 	ldr	r3, [pc, #104]	; c7e0cf64 <lcd_putc_xy+0x90>
}

/*----------------------------------------------------------------------*/

static inline void lcd_putc_xy(ushort x, ushort y, uchar c)
{
c7e0cef8:	e5cd2007 	strb	r2, [sp, #7]

#if LCD_BPP == LCD_MONOCHROME
	ushort off  = x * (1 << LCD_BPP) % 8;
#endif

	dest = (uchar *)(lcd_base + y * lcd_line_length + x * (1 << LCD_BPP) / 8);
c7e0cefc:	e5933000 	ldr	r3, [r3]
c7e0cf00:	e3a0c000 	mov	ip, #0	; 0x0
c7e0cf04:	e0834001 	add	r4, r3, r1
#endif
		for (i = 0; i < count; ++i) {
			uchar c, bits;

			c = *s++;
			bits = video_fontdata[c * VIDEO_FONT_HEIGHT + row];
c7e0cf08:	e5dd3007 	ldrb	r3, [sp, #7]
c7e0cf0c:	e59f2054 	ldr	r2, [pc, #84]	; c7e0cf68 <lcd_putc_xy+0x94>
c7e0cf10:	e08c3203 	add	r3, ip, r3, lsl #4
c7e0cf14:	e7d21003 	ldrb	r1, [r2, r3]
c7e0cf18:	e3a02000 	mov	r2, #0	; 0x0

			*d++ = rest | (sym >> off);
			rest = sym << (8-off);
#else
			for (c = 0; c < 8; ++c) {
				*d++ = (bits & 0x80) ?
c7e0cf1c:	e3110080 	tst	r1, #128	; 0x80
c7e0cf20:	159f3044 	ldrne	r3, [pc, #68]	; c7e0cf6c <lcd_putc_xy+0x98>
c7e0cf24:	059f3044 	ldreq	r3, [pc, #68]	; c7e0cf70 <lcd_putc_xy+0x9c>
c7e0cf28:	e5930000 	ldr	r0, [r3]
						lcd_color_fg : lcd_color_bg;
				bits <<= 1;
c7e0cf2c:	e1a03081 	lsl	r3, r1, #1

			*d++ = rest | (sym >> off);
			rest = sym << (8-off);
#else
			for (c = 0; c < 8; ++c) {
				*d++ = (bits & 0x80) ?
c7e0cf30:	e7840002 	str	r0, [r4, r2]
c7e0cf34:	e2822004 	add	r2, r2, #4	; 0x4
				(COLOR_MASK(lcd_color_bg) & ~bits);

			*d++ = rest | (sym >> off);
			rest = sym << (8-off);
#else
			for (c = 0; c < 8; ++c) {
c7e0cf38:	e3520020 	cmp	r2, #32	; 0x20
				*d++ = (bits & 0x80) ?
						lcd_color_fg : lcd_color_bg;
				bits <<= 1;
c7e0cf3c:	e20310ff 	and	r1, r3, #255	; 0xff
				(COLOR_MASK(lcd_color_bg) & ~bits);

			*d++ = rest | (sym >> off);
			rest = sym << (8-off);
#else
			for (c = 0; c < 8; ++c) {
c7e0cf40:	1afffff5 	bne	c7e0cf1c <lcd_putc_xy+0x48>
	ushort off  = x * (1 << LCD_BPP) % 8;
#endif

	dest = (uchar *)(lcd_base + y * lcd_line_length + x * (1 << LCD_BPP) / 8);

	for (row = 0; row < VIDEO_FONT_HEIGHT; ++row, dest += lcd_line_length) {
c7e0cf44:	e28cc001 	add	ip, ip, #1	; 0x1
c7e0cf48:	e59f3010 	ldr	r3, [pc, #16]	; c7e0cf60 <lcd_putc_xy+0x8c>
c7e0cf4c:	e35c0010 	cmp	ip, #16	; 0x10
c7e0cf50:	e5933000 	ldr	r3, [r3]
c7e0cf54:	10844003 	addne	r4, r4, r3
c7e0cf58:	1affffea 	bne	c7e0cf08 <lcd_putc_xy+0x34>
/*----------------------------------------------------------------------*/

static inline void lcd_putc_xy(ushort x, ushort y, uchar c)
{
	lcd_drawchars(x, y, &c, 1);
}
c7e0cf5c:	e8bd801c 	pop	{r2, r3, r4, pc}
c7e0cf60:	c7e421d8 	.word	0xc7e421d8
c7e0cf64:	c7e421cc 	.word	0xc7e421cc
c7e0cf68:	c7e2b5b4 	.word	0xc7e2b5b4
c7e0cf6c:	c7e421dc 	.word	0xc7e421dc
c7e0cf70:	c7e421e0 	.word	0xc7e421e0

c7e0cf74 <lcd_display_bitmap>:
}
#endif
#endif /* CONFIG_BMP_16BPP */

int lcd_display_bitmap(ulong bmp_image, int x, int y)
{
c7e0cf74:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	uchar *fb;
	bmp_image_t *bmp=(bmp_image_t *)bmp_image;
	uchar *bmap;
	ushort padded_line;
	unsigned long width, height, byte_width;
	unsigned long pwidth = panel_info.vl_col;
c7e0cf78:	e59fc2ac 	ldr	ip, [pc, #684]	; c7e0d22c <lcd_display_bitmap+0x2b8>
}
#endif
#endif /* CONFIG_BMP_16BPP */

int lcd_display_bitmap(ulong bmp_image, int x, int y)
{
c7e0cf7c:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e0cf80:	e58d1004 	str	r1, [sp, #4]
	uchar *fb;
	bmp_image_t *bmp=(bmp_image_t *)bmp_image;
	uchar *bmap;
	ushort padded_line;
	unsigned long width, height, byte_width;
	unsigned long pwidth = panel_info.vl_col;
c7e0cf84:	e1dc10b0 	ldrh	r1, [ip]
	unsigned colors, bpix, bmp_bpix;

	if (!bmp || !((bmp->header.signature[0] == 'B') &&
c7e0cf88:	e2506000 	subs	r6, r0, #0	; 0x0
}
#endif
#endif /* CONFIG_BMP_16BPP */

int lcd_display_bitmap(ulong bmp_image, int x, int y)
{
c7e0cf8c:	e58d2000 	str	r2, [sp]
	uchar *fb;
	bmp_image_t *bmp=(bmp_image_t *)bmp_image;
	uchar *bmap;
	ushort padded_line;
	unsigned long width, height, byte_width;
	unsigned long pwidth = panel_info.vl_col;
c7e0cf90:	e58d1008 	str	r1, [sp, #8]
	unsigned colors, bpix, bmp_bpix;

	if (!bmp || !((bmp->header.signature[0] == 'B') &&
c7e0cf94:	0a000005 	beq	c7e0cfb0 <lcd_display_bitmap+0x3c>
c7e0cf98:	e5d63000 	ldrb	r3, [r6]
c7e0cf9c:	e3530042 	cmp	r3, #66	; 0x42
c7e0cfa0:	1a000002 	bne	c7e0cfb0 <lcd_display_bitmap+0x3c>
c7e0cfa4:	e5d63001 	ldrb	r3, [r6, #1]
c7e0cfa8:	e353004d 	cmp	r3, #77	; 0x4d
c7e0cfac:	0a000003 	beq	c7e0cfc0 <lcd_display_bitmap+0x4c>
		(bmp->header.signature[1] == 'M'))) {
		printf("Error: no valid bmp image at %lx\n", bmp_image);
c7e0cfb0:	e1a01006 	mov	r1, r6
c7e0cfb4:	e59f0274 	ldr	r0, [pc, #628]	; c7e0d230 <lcd_display_bitmap+0x2bc>
c7e0cfb8:	ebffeea6 	bl	c7e08a58 <printf>
c7e0cfbc:	ea000029 	b	c7e0d068 <lcd_display_bitmap+0xf4>
	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
	colors = 1 << bmp_bpix;

	bpix = NBITS(panel_info.vl_bpix);
c7e0cfc0:	e5dc300e 	ldrb	r3, [ip, #14]
	}

	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
	colors = 1 << bmp_bpix;
c7e0cfc4:	e3a09001 	mov	r9, #1	; 0x1

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
c7e0cfc8:	e5d61017 	ldrb	r1, [r6, #23]
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
	colors = 1 << bmp_bpix;

	bpix = NBITS(panel_info.vl_bpix);
c7e0cfcc:	e1a07319 	lsl	r7, r9, r3

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
c7e0cfd0:	e5d63016 	ldrb	r3, [r6, #22]
		printf("Error: no valid bmp image at %lx\n", bmp_image);

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
c7e0cfd4:	e5d60013 	ldrb	r0, [r6, #19]
c7e0cfd8:	e5d62012 	ldrb	r2, [r6, #18]
c7e0cfdc:	e5d64014 	ldrb	r4, [r6, #20]
	height = le32_to_cpu(bmp->header.height);
c7e0cfe0:	e5d65018 	ldrb	r5, [r6, #24]
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
c7e0cfe4:	e5d6e01c 	ldrb	lr, [r6, #28]

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
c7e0cfe8:	e1833401 	orr	r3, r3, r1, lsl #8
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
c7e0cfec:	e5d6101d 	ldrb	r1, [r6, #29]
		printf("Error: no valid bmp image at %lx\n", bmp_image);

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
c7e0cff0:	e1822400 	orr	r2, r2, r0, lsl #8
c7e0cff4:	e5d60015 	ldrb	r0, [r6, #21]
c7e0cff8:	e1822804 	orr	r2, r2, r4, lsl #16
	height = le32_to_cpu(bmp->header.height);
c7e0cffc:	e1833805 	orr	r3, r3, r5, lsl #16
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
c7e0d000:	e18e5401 	orr	r5, lr, r1, lsl #8
		printf("Error: no valid bmp image at %lx\n", bmp_image);

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
c7e0d004:	e1824c00 	orr	r4, r2, r0, lsl #24
	height = le32_to_cpu(bmp->header.height);
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
	colors = 1 << bmp_bpix;
c7e0d008:	e1a02519 	lsl	r2, r9, r5

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
c7e0d00c:	e5d6c019 	ldrb	ip, [r6, #25]
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
	colors = 1 << bmp_bpix;

	bpix = NBITS(panel_info.vl_bpix);

	if ((bpix != 1) && (bpix != 8) && (bpix != 16) && (bpix != 32)) {
c7e0d010:	e1570009 	cmp	r7, r9
c7e0d014:	13570008 	cmpne	r7, #8	; 0x8

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
	height = le32_to_cpu(bmp->header.height);
c7e0d018:	e183ac0c 	orr	sl, r3, ip, lsl #24
		printf("Error: no valid bmp image at %lx\n", bmp_image);

		return 1;
	}

	width = le32_to_cpu(bmp->header.width);
c7e0d01c:	e1a0b004 	mov	fp, r4
	height = le32_to_cpu(bmp->header.height);
c7e0d020:	e58da014 	str	sl, [sp, #20]
	bmp_bpix = le16_to_cpu(bmp->header.bit_count);
	colors = 1 << bmp_bpix;
c7e0d024:	e58d200c 	str	r2, [sp, #12]

	bpix = NBITS(panel_info.vl_bpix);

	if ((bpix != 1) && (bpix != 8) && (bpix != 16) && (bpix != 32)) {
c7e0d028:	0a000008 	beq	c7e0d050 <lcd_display_bitmap+0xdc>
c7e0d02c:	e3570010 	cmp	r7, #16	; 0x10
c7e0d030:	13570020 	cmpne	r7, #32	; 0x20
c7e0d034:	0a000005 	beq	c7e0d050 <lcd_display_bitmap+0xdc>
		printf ("Error: %d bit/pixel mode, but BMP has %d bit/pixel\n",
c7e0d038:	e1a01007 	mov	r1, r7
c7e0d03c:	e1a02005 	mov	r2, r5
c7e0d040:	e59f01ec 	ldr	r0, [pc, #492]	; c7e0d234 <lcd_display_bitmap+0x2c0>
c7e0d044:	ebffee83 	bl	c7e08a58 <printf>
c7e0d048:	e1a00009 	mov	r0, r9
c7e0d04c:	ea000074 	b	c7e0d224 <lcd_display_bitmap+0x2b0>

		return 1;
	}

	/* We support displaying 8bpp BMPs on 16bpp LCDs */
	if (bpix != bmp_bpix && (bmp_bpix != 8 || bpix != 16 || bpix != 32)) {
c7e0d050:	e1570005 	cmp	r7, r5
c7e0d054:	0a000005 	beq	c7e0d070 <lcd_display_bitmap+0xfc>
		printf ("Error: %d bit/pixel mode, but BMP has %d bit/pixel\n",
c7e0d058:	e1a01007 	mov	r1, r7
c7e0d05c:	e1a02005 	mov	r2, r5
c7e0d060:	e59f01cc 	ldr	r0, [pc, #460]	; c7e0d234 <lcd_display_bitmap+0x2c0>
c7e0d064:	ebffee7b 	bl	c7e08a58 <printf>
c7e0d068:	e3a00001 	mov	r0, #1	; 0x1
c7e0d06c:	ea00006c 	b	c7e0d224 <lcd_display_bitmap+0x2b0>
			le16_to_cpu(bmp->header.bit_count));

		return 1;
	}

	debug("Display-bmp: %d x %d  with %d colors\n",
c7e0d070:	e59d300c 	ldr	r3, [sp, #12]
c7e0d074:	e59f01bc 	ldr	r0, [pc, #444]	; c7e0d238 <lcd_display_bitmap+0x2c4>
c7e0d078:	e1a01004 	mov	r1, r4
c7e0d07c:	e1a0200a 	mov	r2, sl
c7e0d080:	ebffee74 	bl	c7e08a58 <printf>
		(int)width, (int)height, (int)colors);

#if !defined(CONFIG_MCC200)
	/* MCC200 LCD doesn't need CMAP, supports 1bpp b&w only */
	if (bmp_bpix == 8) {
c7e0d084:	e3570008 	cmp	r7, #8	; 0x8
c7e0d088:	13a03000 	movne	r3, #0	; 0x0
c7e0d08c:	158d3010 	strne	r3, [sp, #16]
c7e0d090:	059fc1a4 	ldreq	ip, [pc, #420]	; c7e0d23c <lcd_display_bitmap+0x2c8>
c7e0d094:	03a00000 	moveq	r0, #0	; 0x0
c7e0d098:	1a000015 	bne	c7e0d0f4 <lcd_display_bitmap+0x180>
c7e0d09c:	ea000009 	b	c7e0d0c8 <lcd_display_bitmap+0x154>
				( ((cte.green) << 3) & 0x07e0) |
				( ((cte.blue)  >> 3) & 0x001f) ;
#ifdef CONFIG_SYS_INVERT_COLORS
			*cmap = 0xffff - colreg;
#else
			*cmap = colreg;
c7e0d0a0:	e5d13008 	ldrb	r3, [r1, #8]
c7e0d0a4:	e5d12007 	ldrb	r2, [r1, #7]
c7e0d0a8:	e1a03403 	lsl	r3, r3, #8
c7e0d0ac:	e1a02182 	lsl	r2, r2, #3
c7e0d0b0:	e5d11006 	ldrb	r1, [r1, #6]
c7e0d0b4:	e2033b3e 	and	r3, r3, #63488	; 0xf800
c7e0d0b8:	e2022e7e 	and	r2, r2, #2016	; 0x7e0
c7e0d0bc:	e1833002 	orr	r3, r3, r2
c7e0d0c0:	e18331a1 	orr	r3, r3, r1, lsr #3
c7e0d0c4:	e14c30b2 	strh	r3, [ip, #-2]
c7e0d0c8:	e280300c 	add	r3, r0, #12	; 0xc
	if (bmp_bpix == 8) {
		cmap = configuration_get_cmap();
		cmap_base = cmap;

		/* Set color map */
		for (i = 0; i < colors; ++i) {
c7e0d0cc:	e59de00c 	ldr	lr, [sp, #12]
				( ((cte.green) << 3) & 0x07e0) |
				( ((cte.blue)  >> 3) & 0x001f) ;
#ifdef CONFIG_SYS_INVERT_COLORS
			*cmap = 0xffff - colreg;
#else
			*cmap = colreg;
c7e0d0d0:	e0861103 	add	r1, r6, r3, lsl #2
	if (bmp_bpix == 8) {
		cmap = configuration_get_cmap();
		cmap_base = cmap;

		/* Set color map */
		for (i = 0; i < colors; ++i) {
c7e0d0d4:	e2803001 	add	r3, r0, #1	; 0x1
c7e0d0d8:	e1a03803 	lsl	r3, r3, #16
c7e0d0dc:	e150000e 	cmp	r0, lr
c7e0d0e0:	e28cc002 	add	ip, ip, #2	; 0x2
c7e0d0e4:	e1a00823 	lsr	r0, r3, #16
c7e0d0e8:	3affffec 	bcc	c7e0d0a0 <lcd_display_bitmap+0x12c>
c7e0d0ec:	e59f1148 	ldr	r1, [pc, #328]	; c7e0d23c <lcd_display_bitmap+0x2c8>
c7e0d0f0:	e58d1010 	str	r1, [sp, #16]
		x     = ((x + 7) & ~7) >> 3;
		pwidth= ((pwidth + 7) & ~7) >> 3;
	}
#endif

	padded_line = (width&0x3) ? ((width&~0x3)+4) : (width);
c7e0d0f4:	e3140003 	tst	r4, #3	; 0x3
c7e0d0f8:	13c43003 	bicne	r3, r4, #3	; 0x3
c7e0d0fc:	12833004 	addne	r3, r3, #4	; 0x4
#ifdef CONFIG_SPLASH_SCREEN_ALIGN
	splash_align_axis(&x, pwidth, width);
	splash_align_axis(&y, panel_info.vl_row, height);
#endif /* CONFIG_SPLASH_SCREEN_ALIGN */

	if ((x + width) > pwidth)
c7e0d100:	e59d2004 	ldr	r2, [sp, #4]
		x     = ((x + 7) & ~7) >> 3;
		pwidth= ((pwidth + 7) & ~7) >> 3;
	}
#endif

	padded_line = (width&0x3) ? ((width&~0x3)+4) : (width);
c7e0d104:	11a03803 	lslne	r3, r3, #16
c7e0d108:	01a03804 	lsleq	r3, r4, #16
#ifdef CONFIG_SPLASH_SCREEN_ALIGN
	splash_align_axis(&x, pwidth, width);
	splash_align_axis(&y, panel_info.vl_row, height);
#endif /* CONFIG_SPLASH_SCREEN_ALIGN */

	if ((x + width) > pwidth)
c7e0d10c:	e59de008 	ldr	lr, [sp, #8]
		x     = ((x + 7) & ~7) >> 3;
		pwidth= ((pwidth + 7) & ~7) >> 3;
	}
#endif

	padded_line = (width&0x3) ? ((width&~0x3)+4) : (width);
c7e0d110:	e1a09823 	lsr	r9, r3, #16
#ifdef CONFIG_SPLASH_SCREEN_ALIGN
	splash_align_axis(&x, pwidth, width);
	splash_align_axis(&y, panel_info.vl_row, height);
#endif /* CONFIG_SPLASH_SCREEN_ALIGN */

	if ((x + width) > pwidth)
c7e0d114:	e0823004 	add	r3, r2, r4
c7e0d118:	e153000e 	cmp	r3, lr
		width = pwidth - x;
	if ((y + height) > panel_info.vl_row)
c7e0d11c:	e59f3108 	ldr	r3, [pc, #264]	; c7e0d22c <lcd_display_bitmap+0x2b8>
c7e0d120:	e59d1000 	ldr	r1, [sp]
c7e0d124:	e1d330b2 	ldrh	r3, [r3, #2]
	splash_align_axis(&x, pwidth, width);
	splash_align_axis(&y, panel_info.vl_row, height);
#endif /* CONFIG_SPLASH_SCREEN_ALIGN */

	if ((x + width) > pwidth)
		width = pwidth - x;
c7e0d128:	8062b00e 	rsbhi	fp, r2, lr
	if ((y + height) > panel_info.vl_row)
c7e0d12c:	e081200a 	add	r2, r1, sl
c7e0d130:	e1520003 	cmp	r2, r3
		height = panel_info.vl_row - y;
c7e0d134:	80613003 	rsbhi	r3, r1, r3
c7e0d138:	858d3014 	strhi	r3, [sp, #20]

	bmap = (uchar *)bmp + le32_to_cpu(bmp->header.data_offset);
c7e0d13c:	e5d6200b 	ldrb	r2, [r6, #11]
c7e0d140:	e5d6300a 	ldrb	r3, [r6, #10]
c7e0d144:	e5d6100c 	ldrb	r1, [r6, #12]
c7e0d148:	e1833402 	orr	r3, r3, r2, lsl #8
c7e0d14c:	e5d6200d 	ldrb	r2, [r6, #13]
c7e0d150:	e1833801 	orr	r3, r3, r1, lsl #16
c7e0d154:	e1830c02 	orr	r0, r3, r2, lsl #24
	fb   = (uchar *) (lcd_base +
c7e0d158:	e59f30e0 	ldr	r3, [pc, #224]	; c7e0d240 <lcd_display_bitmap+0x2cc>
		(y + height - 1) * lcd_line_length + x * bpix / 8);

	switch (bmp_bpix) {
c7e0d15c:	e3550001 	cmp	r5, #1	; 0x1
		width = pwidth - x;
	if ((y + height) > panel_info.vl_row)
		height = panel_info.vl_row - y;

	bmap = (uchar *)bmp + le32_to_cpu(bmp->header.data_offset);
	fb   = (uchar *) (lcd_base +
c7e0d160:	e593e000 	ldr	lr, [r3]
c7e0d164:	e59f30d8 	ldr	r3, [pc, #216]	; c7e0d244 <lcd_display_bitmap+0x2d0>
c7e0d168:	e593c000 	ldr	ip, [r3]
		(y + height - 1) * lcd_line_length + x * bpix / 8);

	switch (bmp_bpix) {
c7e0d16c:	0a000001 	beq	c7e0d178 <lcd_display_bitmap+0x204>
c7e0d170:	e3550008 	cmp	r5, #8	; 0x8
c7e0d174:	1a000029 	bne	c7e0d220 <lcd_display_bitmap+0x2ac>
		width = pwidth - x;
	if ((y + height) > panel_info.vl_row)
		height = panel_info.vl_row - y;

	bmap = (uchar *)bmp + le32_to_cpu(bmp->header.data_offset);
	fb   = (uchar *) (lcd_base +
c7e0d178:	e89d000a 	ldm	sp, {r1, r3}
c7e0d17c:	e0030397 	mul	r3, r7, r3
c7e0d180:	e2412001 	sub	r2, r1, #1	; 0x1
c7e0d184:	e59d1014 	ldr	r1, [sp, #20]
c7e0d188:	e1a031a3 	lsr	r3, r3, #3
c7e0d18c:	e0822001 	add	r2, r2, r1
c7e0d190:	e023329c 	mla	r3, ip, r2, r3
		(y + height - 1) * lcd_line_length + x * bpix / 8);

	switch (bmp_bpix) {
	case 1: /* pass through */
	case 8:
		if (bpix != 16)
c7e0d194:	e3570010 	cmp	r7, #16	; 0x10
c7e0d198:	11a0400b 	movne	r4, fp
			byte_width = width;
		else
			byte_width = width * 2;
c7e0d19c:	01a0408b 	lsleq	r4, fp, #1
	if ((x + width) > pwidth)
		width = pwidth - x;
	if ((y + height) > panel_info.vl_row)
		height = panel_info.vl_row - y;

	bmap = (uchar *)bmp + le32_to_cpu(bmp->header.data_offset);
c7e0d1a0:	e0860000 	add	r0, r6, r0
	fb   = (uchar *) (lcd_base +
c7e0d1a4:	e08ec003 	add	ip, lr, r3
c7e0d1a8:	e3a01000 	mov	r1, #0	; 0x0
c7e0d1ac:	ea000016 	b	c7e0d20c <lcd_display_bitmap+0x298>
c7e0d1b0:	e5503001 	ldrb	r3, [r0, #-1]
			byte_width = width * 2;

		for (i = 0; i < height; ++i) {
			WATCHDOG_RESET();
			for (j = 0; j < width; j++) {
				if (bpix != 16) {
c7e0d1b4:	e3570010 	cmp	r7, #16	; 0x10
					FB_PUT_BYTE(fb, bmap);
				} else {
					*(uint16_t *)fb = cmap_base[*(bmap++)];
c7e0d1b8:	059de010 	ldreq	lr, [sp, #16]
c7e0d1bc:	01a03083 	lsleq	r3, r3, #1
c7e0d1c0:	019e30b3 	ldrheq	r3, [lr, r3]

		for (i = 0; i < height; ++i) {
			WATCHDOG_RESET();
			for (j = 0; j < width; j++) {
				if (bpix != 16) {
					FB_PUT_BYTE(fb, bmap);
c7e0d1c4:	14cc3001 	strbne	r3, [ip], #1
				} else {
					*(uint16_t *)fb = cmap_base[*(bmap++)];
c7e0d1c8:	00cc30b2 	strheq	r3, [ip], #2
		else
			byte_width = width * 2;

		for (i = 0; i < height; ++i) {
			WATCHDOG_RESET();
			for (j = 0; j < width; j++) {
c7e0d1cc:	e2823001 	add	r3, r2, #1	; 0x1
c7e0d1d0:	e1a03803 	lsl	r3, r3, #16
c7e0d1d4:	e1a02823 	lsr	r2, r3, #16
c7e0d1d8:	e2800001 	add	r0, r0, #1	; 0x1
c7e0d1dc:	e152000b 	cmp	r2, fp
c7e0d1e0:	e240e001 	sub	lr, r0, #1	; 0x1
c7e0d1e4:	3afffff1 	bcc	c7e0d1b0 <lcd_display_bitmap+0x23c>
					*(uint16_t *)fb = cmap_base[*(bmap++)];
					fb += sizeof(uint16_t) / sizeof(*fb);
				}
			}
			bmap += (width - padded_line);
			fb   -= (byte_width + lcd_line_length);
c7e0d1e8:	e59f3054 	ldr	r3, [pc, #84]	; c7e0d244 <lcd_display_bitmap+0x2d0>
		if (bpix != 16)
			byte_width = width;
		else
			byte_width = width * 2;

		for (i = 0; i < height; ++i) {
c7e0d1ec:	e2811001 	add	r1, r1, #1	; 0x1
					*(uint16_t *)fb = cmap_base[*(bmap++)];
					fb += sizeof(uint16_t) / sizeof(*fb);
				}
			}
			bmap += (width - padded_line);
			fb   -= (byte_width + lcd_line_length);
c7e0d1f0:	e5932000 	ldr	r2, [r3]
		if (bpix != 16)
			byte_width = width;
		else
			byte_width = width * 2;

		for (i = 0; i < height; ++i) {
c7e0d1f4:	e1a01801 	lsl	r1, r1, #16
					*(uint16_t *)fb = cmap_base[*(bmap++)];
					fb += sizeof(uint16_t) / sizeof(*fb);
				}
			}
			bmap += (width - padded_line);
			fb   -= (byte_width + lcd_line_length);
c7e0d1f8:	e0842002 	add	r2, r4, r2
				} else {
					*(uint16_t *)fb = cmap_base[*(bmap++)];
					fb += sizeof(uint16_t) / sizeof(*fb);
				}
			}
			bmap += (width - padded_line);
c7e0d1fc:	e069300b 	rsb	r3, r9, fp
c7e0d200:	e08e0003 	add	r0, lr, r3
			fb   -= (byte_width + lcd_line_length);
c7e0d204:	e062c00c 	rsb	ip, r2, ip
		if (bpix != 16)
			byte_width = width;
		else
			byte_width = width * 2;

		for (i = 0; i < height; ++i) {
c7e0d208:	e1a01821 	lsr	r1, r1, #16
c7e0d20c:	e59d2014 	ldr	r2, [sp, #20]
c7e0d210:	e1510002 	cmp	r1, r2
c7e0d214:	32800001 	addcc	r0, r0, #1	; 0x1
c7e0d218:	33a02000 	movcc	r2, #0	; 0x0
c7e0d21c:	3affffee 	bcc	c7e0d1dc <lcd_display_bitmap+0x268>
c7e0d220:	e3a00000 	mov	r0, #0	; 0x0
	default:
		break;
	};

	return 0;
}
c7e0d224:	e28dd018 	add	sp, sp, #24	; 0x18
c7e0d228:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0d22c:	c7e3a234 	.word	0xc7e3a234
c7e0d230:	c7e32663 	.word	0xc7e32663
c7e0d234:	c7e32685 	.word	0xc7e32685
c7e0d238:	c7e326b9 	.word	0xc7e326b9
c7e0d23c:	c7e358a8 	.word	0xc7e358a8
c7e0d240:	c7e421cc 	.word	0xc7e421cc
c7e0d244:	c7e421d8 	.word	0xc7e421d8

c7e0d248 <lcd_setmem>:
 * Returns new address for monitor, after reserving LCD buffer memory
 *
 * Note that this is running from ROM, so no write access to global data.
 */
ulong lcd_setmem(ulong addr)
{
c7e0d248:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	ulong size;
	int line_length = (panel_info.vl_col * NBITS(panel_info.vl_bpix)) / 8;
c7e0d24c:	e59f5064 	ldr	r5, [pc, #100]	; c7e0d2b8 <lcd_setmem+0x70>

	debug("LCD panel info: %d x %d, %d bit/pix\n", panel_info.vl_col,
c7e0d250:	e3a03001 	mov	r3, #1	; 0x1
 * Note that this is running from ROM, so no write access to global data.
 */
ulong lcd_setmem(ulong addr)
{
	ulong size;
	int line_length = (panel_info.vl_col * NBITS(panel_info.vl_bpix)) / 8;
c7e0d254:	e1d540b0 	ldrh	r4, [r5]
c7e0d258:	e5d5700e 	ldrb	r7, [r5, #14]

	debug("LCD panel info: %d x %d, %d bit/pix\n", panel_info.vl_col,
c7e0d25c:	e1a01004 	mov	r1, r4
		panel_info.vl_row, NBITS(panel_info.vl_bpix));

	size = line_length * panel_info.vl_row;

	/* Round up to nearest full page */
	size = (size + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
c7e0d260:	e1a04714 	lsl	r4, r4, r7
ulong lcd_setmem(ulong addr)
{
	ulong size;
	int line_length = (panel_info.vl_col * NBITS(panel_info.vl_bpix)) / 8;

	debug("LCD panel info: %d x %d, %d bit/pix\n", panel_info.vl_col,
c7e0d264:	e1a03713 	lsl	r3, r3, r7
c7e0d268:	e1d520b2 	ldrh	r2, [r5, #2]
 * Returns new address for monitor, after reserving LCD buffer memory
 *
 * Note that this is running from ROM, so no write access to global data.
 */
ulong lcd_setmem(ulong addr)
{
c7e0d26c:	e1a06000 	mov	r6, r0
	ulong size;
	int line_length = (panel_info.vl_col * NBITS(panel_info.vl_bpix)) / 8;

	debug("LCD panel info: %d x %d, %d bit/pix\n", panel_info.vl_col,
c7e0d270:	e59f0044 	ldr	r0, [pc, #68]	; c7e0d2bc <lcd_setmem+0x74>
c7e0d274:	ebffedf7 	bl	c7e08a58 <printf>
		panel_info.vl_row, NBITS(panel_info.vl_bpix));

	size = line_length * panel_info.vl_row;

	/* Round up to nearest full page */
	size = (size + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
c7e0d278:	e3540000 	cmp	r4, #0	; 0x0
c7e0d27c:	e2843007 	add	r3, r4, #7	; 0x7
c7e0d280:	b1a04003 	movlt	r4, r3
c7e0d284:	e1d520b2 	ldrh	r2, [r5, #2]
c7e0d288:	e59f3030 	ldr	r3, [pc, #48]	; c7e0d2c0 <lcd_setmem+0x78>
c7e0d28c:	e1a041c4 	asr	r4, r4, #3
c7e0d290:	e0213492 	mla	r1, r2, r4, r3
c7e0d294:	e3c11eff 	bic	r1, r1, #4080	; 0xff0
c7e0d298:	e3c1100f 	bic	r1, r1, #15	; 0xf

	/* Allocate pages for the frame buffer. */
	addr -= size;
c7e0d29c:	e0616006 	rsb	r6, r1, r6

	debug("Reserving %ldk for LCD Framebuffer at: %08lx\n", size>>10, addr);
c7e0d2a0:	e1a02006 	mov	r2, r6
c7e0d2a4:	e1a01521 	lsr	r1, r1, #10
c7e0d2a8:	e59f0014 	ldr	r0, [pc, #20]	; c7e0d2c4 <lcd_setmem+0x7c>
c7e0d2ac:	ebffede9 	bl	c7e08a58 <printf>

	return addr;
}
c7e0d2b0:	e1a00006 	mov	r0, r6
c7e0d2b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e0d2b8:	c7e3a234 	.word	0xc7e3a234
c7e0d2bc:	c7e326df 	.word	0xc7e326df
c7e0d2c0:	00000fff 	.word	0x00000fff
c7e0d2c4:	c7e32704 	.word	0xc7e32704

c7e0d2c8 <bitmap_plot>:
#endif
}

#ifdef CONFIG_LCD_LOGO
void bitmap_plot(int x, int y)
{
c7e0d2c8:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
#if defined(CONFIG_MPC823)
	immap_t *immr = (immap_t *) CONFIG_SYS_IMMR;
	cpm8xx_t *cp = &(immr->im_cpm);
#endif

	debug("Logo: width %d  height %d  colors %d  cmap %d\n",
c7e0d2cc:	e3a0c01f 	mov	ip, #31	; 0x1f
#endif
}

#ifdef CONFIG_LCD_LOGO
void bitmap_plot(int x, int y)
{
c7e0d2d0:	e1a05000 	mov	r5, r0
c7e0d2d4:	e1a04001 	mov	r4, r1
#if defined(CONFIG_MPC823)
	immap_t *immr = (immap_t *) CONFIG_SYS_IMMR;
	cpm8xx_t *cp = &(immr->im_cpm);
#endif

	debug("Logo: width %d  height %d  colors %d  cmap %d\n",
c7e0d2d8:	e1a0300c 	mov	r3, ip
c7e0d2dc:	e3a010a0 	mov	r1, #160	; 0xa0
c7e0d2e0:	e3a02060 	mov	r2, #96	; 0x60
c7e0d2e4:	e59f00e0 	ldr	r0, [pc, #224]	; c7e0d3cc <bitmap_plot+0x104>
c7e0d2e8:	e58dc000 	str	ip, [sp]
c7e0d2ec:	ebffedd9 	bl	c7e08a58 <printf>
		ARRAY_SIZE(bmp_logo_palette));

	bmap = &bmp_logo_bitmap[0];
	fb   = (fbptr_t *)(lcd_base + y * lcd_line_length + x);

	if (NBITS(panel_info.vl_bpix) < 12) {
c7e0d2f0:	e59f00d8 	ldr	r0, [pc, #216]	; c7e0d3d0 <bitmap_plot+0x108>
c7e0d2f4:	e3a02001 	mov	r2, #1	; 0x1
c7e0d2f8:	e5d0300e 	ldrb	r3, [r0, #14]
c7e0d2fc:	e1a02312 	lsl	r2, r2, r3
	debug("Logo: width %d  height %d  colors %d  cmap %d\n",
		BMP_LOGO_WIDTH, BMP_LOGO_HEIGHT, BMP_LOGO_COLORS,
		ARRAY_SIZE(bmp_logo_palette));

	bmap = &bmp_logo_bitmap[0];
	fb   = (fbptr_t *)(lcd_base + y * lcd_line_length + x);
c7e0d300:	e59f30cc 	ldr	r3, [pc, #204]	; c7e0d3d4 <bitmap_plot+0x10c>

	if (NBITS(panel_info.vl_bpix) < 12) {
c7e0d304:	e352000b 	cmp	r2, #11	; 0xb
	debug("Logo: width %d  height %d  colors %d  cmap %d\n",
		BMP_LOGO_WIDTH, BMP_LOGO_HEIGHT, BMP_LOGO_COLORS,
		ARRAY_SIZE(bmp_logo_palette));

	bmap = &bmp_logo_bitmap[0];
	fb   = (fbptr_t *)(lcd_base + y * lcd_line_length + x);
c7e0d308:	e5933000 	ldr	r3, [r3]
					((col16 & 0x000F) << 4) |
					((col16 & 0x00F0) << 8) |
					((col16 & 0x0F00) << 16);
				}
			bmap += BMP_LOGO_WIDTH;
			fb += panel_info.vl_col;
c7e0d30c:	d59f20c4 	ldrle	r2, [pc, #196]	; c7e0d3d8 <bitmap_plot+0x110>
	debug("Logo: width %d  height %d  colors %d  cmap %d\n",
		BMP_LOGO_WIDTH, BMP_LOGO_HEIGHT, BMP_LOGO_COLORS,
		ARRAY_SIZE(bmp_logo_palette));

	bmap = &bmp_logo_bitmap[0];
	fb   = (fbptr_t *)(lcd_base + y * lcd_line_length + x);
c7e0d310:	e0215493 	mla	r1, r3, r4, r5
c7e0d314:	e59f30c0 	ldr	r3, [pc, #192]	; c7e0d3dc <bitmap_plot+0x114>
c7e0d318:	e5933000 	ldr	r3, [r3]
c7e0d31c:	e0835001 	add	r5, r3, r1
					((col16 & 0x000F) << 4) |
					((col16 & 0x00F0) << 8) |
					((col16 & 0x0F00) << 16);
				}
			bmap += BMP_LOGO_WIDTH;
			fb += panel_info.vl_col;
c7e0d320:	c1d030b0 	ldrhgt	r3, [r0]
c7e0d324:	c59fc0b4 	ldrgt	ip, [pc, #180]	; c7e0d3e0 <bitmap_plot+0x118>
c7e0d328:	c1a0e103 	lslgt	lr, r3, #2
c7e0d32c:	ca000023 	bgt	c7e0d3c0 <bitmap_plot+0xf8>
#endif

		WATCHDOG_RESET();

		/* Set color map */
		for (i = 0; i < ARRAY_SIZE(bmp_logo_palette); ++i) {
c7e0d330:	e59f30ac 	ldr	r3, [pc, #172]	; c7e0d3e4 <bitmap_plot+0x11c>
			cmap++;
#else /* !CONFIG_ATMEL_LCD */
#ifdef  CONFIG_SYS_INVERT_COLORS
			*cmap++ = 0xffff - colreg;
#else
			*cmap++ = colreg;
c7e0d334:	e2822002 	add	r2, r2, #2	; 0x2
#endif

		WATCHDOG_RESET();

		/* Set color map */
		for (i = 0; i < ARRAY_SIZE(bmp_logo_palette); ++i) {
c7e0d338:	e1520003 	cmp	r2, r3
c7e0d33c:	1afffffb 	bne	c7e0d330 <bitmap_plot+0x68>
c7e0d340:	e59f4098 	ldr	r4, [pc, #152]	; c7e0d3e0 <bitmap_plot+0x118>
		}

		WATCHDOG_RESET();

		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
			memcpy(fb, bmap, BMP_LOGO_WIDTH);
c7e0d344:	e1a00005 	mov	r0, r5
c7e0d348:	e1a01004 	mov	r1, r4
c7e0d34c:	e3a020a0 	mov	r2, #160	; 0xa0
c7e0d350:	eb005639 	bl	c7e22c3c <memcpy>
			bmap += BMP_LOGO_WIDTH;
			fb   += panel_info.vl_col;
c7e0d354:	e59f3074 	ldr	r3, [pc, #116]	; c7e0d3d0 <bitmap_plot+0x108>

		WATCHDOG_RESET();

		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
			memcpy(fb, bmap, BMP_LOGO_WIDTH);
			bmap += BMP_LOGO_WIDTH;
c7e0d358:	e28440a0 	add	r4, r4, #160	; 0xa0
			fb   += panel_info.vl_col;
c7e0d35c:	e1d320b0 	ldrh	r2, [r3]
#endif /* CONFIG_ATMEL_LCD */
		}

		WATCHDOG_RESET();

		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
c7e0d360:	e59f3080 	ldr	r3, [pc, #128]	; c7e0d3e8 <bitmap_plot+0x120>
			memcpy(fb, bmap, BMP_LOGO_WIDTH);
			bmap += BMP_LOGO_WIDTH;
			fb   += panel_info.vl_col;
c7e0d364:	e0855102 	add	r5, r5, r2, lsl #2
#endif /* CONFIG_ATMEL_LCD */
		}

		WATCHDOG_RESET();

		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
c7e0d368:	e1540003 	cmp	r4, r3
c7e0d36c:	1afffff4 	bne	c7e0d344 <bitmap_plot+0x7c>
c7e0d370:	ea000014 	b	c7e0d3c8 <bitmap_plot+0x100>
		u16 col16;
//		fb16 = (ushort *)(lcd_base + y * lcd_line_length + x);
		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
			for (j = 0; j < BMP_LOGO_WIDTH; j++) {
				col16 = bmp_logo_palette[(bmap[j]-16)];
				fb[j] = (fbptr_t )
c7e0d374:	e7dc2000 	ldrb	r2, [ip, r0]
c7e0d378:	e59f306c 	ldr	r3, [pc, #108]	; c7e0d3ec <bitmap_plot+0x124>
c7e0d37c:	e0833082 	add	r3, r3, r2, lsl #1
c7e0d380:	e15322b0 	ldrh	r2, [r3, #-32]
c7e0d384:	e1a03202 	lsl	r3, r2, #4
c7e0d388:	e20210f0 	and	r1, r2, #240	; 0xf0
c7e0d38c:	e20330ff 	and	r3, r3, #255	; 0xff
c7e0d390:	e1833401 	orr	r3, r3, r1, lsl #8
c7e0d394:	e2022c0f 	and	r2, r2, #3840	; 0xf00
c7e0d398:	e1833802 	orr	r3, r3, r2, lsl #16
c7e0d39c:	e7853100 	str	r3, [r5, r0, lsl #2]
c7e0d3a0:	e2800001 	add	r0, r0, #1	; 0x1
		}
#elif LCD_BPP == LCD_COLOR32
		u16 col16;
//		fb16 = (ushort *)(lcd_base + y * lcd_line_length + x);
		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
			for (j = 0; j < BMP_LOGO_WIDTH; j++) {
c7e0d3a4:	e35000a0 	cmp	r0, #160	; 0xa0
c7e0d3a8:	1afffff1 	bne	c7e0d374 <bitmap_plot+0xac>
			fb += panel_info.vl_col;
		}
#elif LCD_BPP == LCD_COLOR32
		u16 col16;
//		fb16 = (ushort *)(lcd_base + y * lcd_line_length + x);
		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
c7e0d3ac:	e59f303c 	ldr	r3, [pc, #60]	; c7e0d3f0 <bitmap_plot+0x128>
c7e0d3b0:	e15c0003 	cmp	ip, r3
c7e0d3b4:	0a000003 	beq	c7e0d3c8 <bitmap_plot+0x100>
				fb[j] = (fbptr_t )
					((col16 & 0x000F) << 4) |
					((col16 & 0x00F0) << 8) |
					((col16 & 0x0F00) << 16);
				}
			bmap += BMP_LOGO_WIDTH;
c7e0d3b8:	e28cc0a0 	add	ip, ip, #160	; 0xa0
			fb += panel_info.vl_col;
c7e0d3bc:	e085500e 	add	r5, r5, lr
c7e0d3c0:	e3a00000 	mov	r0, #0	; 0x0
c7e0d3c4:	eaffffea 	b	c7e0d374 <bitmap_plot+0xac>
		}
#endif
	}

	WATCHDOG_RESET();
}
c7e0d3c8:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e0d3cc:	c7e32732 	.word	0xc7e32732
c7e0d3d0:	c7e3a234 	.word	0xc7e3a234
c7e0d3d4:	c7e421d8 	.word	0xc7e421d8
c7e0d3d8:	c7e358aa 	.word	0xc7e358aa
c7e0d3dc:	c7e421cc 	.word	0xc7e421cc
c7e0d3e0:	c7e358e6 	.word	0xc7e358e6
c7e0d3e4:	c7e358e8 	.word	0xc7e358e8
c7e0d3e8:	c7e394e6 	.word	0xc7e394e6
c7e0d3ec:	c7e358a8 	.word	0xc7e358a8
c7e0d3f0:	c7e39446 	.word	0xc7e39446

c7e0d3f4 <lcd_clear>:
	lcd_clear();
	return 0;
}

void lcd_clear(void)
{
c7e0d3f4:	e92d4070 	push	{r4, r5, r6, lr}

#ifdef	LCD_TEST_PATTERN
	test_pattern();
#else
	/* set framebuffer to background color */
	memset((char *)lcd_base,
c7e0d3f8:	e59f3074 	ldr	r3, [pc, #116]	; c7e0d474 <lcd_clear+0x80>
c7e0d3fc:	e59f5074 	ldr	r5, [pc, #116]	; c7e0d478 <lcd_clear+0x84>
c7e0d400:	e1d320b2 	ldrh	r2, [r3, #2]
c7e0d404:	e5953000 	ldr	r3, [r5]

/*----------------------------------------------------------------------*/

static void lcd_setfgcolor(int color)
{
	lcd_color_fg = color;
c7e0d408:	e3a04000 	mov	r4, #0	; 0x0

#ifdef	LCD_TEST_PATTERN
	test_pattern();
#else
	/* set framebuffer to background color */
	memset((char *)lcd_base,
c7e0d40c:	e0020293 	mul	r2, r3, r2

/*----------------------------------------------------------------------*/

static void lcd_setfgcolor(int color)
{
	lcd_color_fg = color;
c7e0d410:	e59f3064 	ldr	r3, [pc, #100]	; c7e0d47c <lcd_clear+0x88>

#ifdef	LCD_TEST_PATTERN
	test_pattern();
#else
	/* set framebuffer to background color */
	memset((char *)lcd_base,
c7e0d414:	e59f6064 	ldr	r6, [pc, #100]	; c7e0d480 <lcd_clear+0x8c>

/*----------------------------------------------------------------------*/

static void lcd_setfgcolor(int color)
{
	lcd_color_fg = color;
c7e0d418:	e5834000 	str	r4, [r3]

/*----------------------------------------------------------------------*/

static void lcd_setbgcolor(int color)
{
	lcd_color_bg = color;
c7e0d41c:	e59f3060 	ldr	r3, [pc, #96]	; c7e0d484 <lcd_clear+0x90>
c7e0d420:	e3a0ccff 	mov	ip, #65280	; 0xff00

#ifdef	LCD_TEST_PATTERN
	test_pattern();
#else
	/* set framebuffer to background color */
	memset((char *)lcd_base,
c7e0d424:	e1a0100c 	mov	r1, ip

/*----------------------------------------------------------------------*/

static void lcd_setbgcolor(int color)
{
	lcd_color_bg = color;
c7e0d428:	e583c000 	str	ip, [r3]

#ifdef	LCD_TEST_PATTERN
	test_pattern();
#else
	/* set framebuffer to background color */
	memset((char *)lcd_base,
c7e0d42c:	e5960000 	ldr	r0, [r6]
c7e0d430:	eb0055d7 	bl	c7e22b94 <memset>
		COLOR_MASK(lcd_getbgcolor()),
		lcd_line_length*panel_info.vl_row);
#endif
	/* Paint the logo and retrieve LCD base address */
	debug("[LCD] Drawing the logo...\n");
c7e0d434:	e59f004c 	ldr	r0, [pc, #76]	; c7e0d488 <lcd_clear+0x94>
c7e0d438:	ebffed86 	bl	c7e08a58 <printf>
		if (bmp_display(addr, x, y) == 0)
			return (void *)lcd_base;
	}
#endif /* CONFIG_SPLASH_SCREEN */

	bitmap_plot(0, 0);
c7e0d43c:	e1a01004 	mov	r1, r4
c7e0d440:	e1a00004 	mov	r0, r4
c7e0d444:	ebffff9f 	bl	c7e0d2c8 <bitmap_plot>
		COLOR_MASK(lcd_getbgcolor()),
		lcd_line_length*panel_info.vl_row);
#endif
	/* Paint the logo and retrieve LCD base address */
	debug("[LCD] Drawing the logo...\n");
	lcd_console_address = lcd_logo ();
c7e0d448:	e5951000 	ldr	r1, [r5]
c7e0d44c:	e5962000 	ldr	r2, [r6]
c7e0d450:	e3a03060 	mov	r3, #96	; 0x60
c7e0d454:	e0222193 	mla	r2, r3, r1, r2
c7e0d458:	e59f302c 	ldr	r3, [pc, #44]	; c7e0d48c <lcd_clear+0x98>
c7e0d45c:	e5832000 	str	r2, [r3]

	console_col = 0;
	console_row = 0;
c7e0d460:	e59f3028 	ldr	r3, [pc, #40]	; c7e0d490 <lcd_clear+0x9c>
c7e0d464:	e1c340b0 	strh	r4, [r3]
#endif
	/* Paint the logo and retrieve LCD base address */
	debug("[LCD] Drawing the logo...\n");
	lcd_console_address = lcd_logo ();

	console_col = 0;
c7e0d468:	e59f3024 	ldr	r3, [pc, #36]	; c7e0d494 <lcd_clear+0xa0>
c7e0d46c:	e1c340b0 	strh	r4, [r3]
	console_row = 0;
}
c7e0d470:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0d474:	c7e3a234 	.word	0xc7e3a234
c7e0d478:	c7e421d8 	.word	0xc7e421d8
c7e0d47c:	c7e421dc 	.word	0xc7e421dc
c7e0d480:	c7e421cc 	.word	0xc7e421cc
c7e0d484:	c7e421e0 	.word	0xc7e421e0
c7e0d488:	c7e32761 	.word	0xc7e32761
c7e0d48c:	c7e421e4 	.word	0xc7e421e4
c7e0d490:	c7e421ea 	.word	0xc7e421ea
c7e0d494:	c7e421e8 	.word	0xc7e421e8

c7e0d498 <do_lcd_clear>:
}

/*----------------------------------------------------------------------*/
static
int do_lcd_clear(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
{
c7e0d498:	e92d4010 	push	{r4, lr}
	lcd_clear();
c7e0d49c:	ebffffd4 	bl	c7e0d3f4 <lcd_clear>
	return 0;
}
c7e0d4a0:	e3a00000 	mov	r0, #0	; 0x0
c7e0d4a4:	e8bd8010 	pop	{r4, pc}

c7e0d4a8 <console_newline>:
}

/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
c7e0d4a8:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	++console_row;
c7e0d4ac:	e59f70b8 	ldr	r7, [pc, #184]	; c7e0d56c <console_newline+0xc4>
	console_col = 0;

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
c7e0d4b0:	e59fa0b8 	ldr	sl, [pc, #184]	; c7e0d570 <console_newline+0xc8>

/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
	++console_row;
c7e0d4b4:	e1d720b0 	ldrh	r2, [r7]
	console_col = 0;

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
c7e0d4b8:	e1da30b2 	ldrh	r3, [sl, #2]

/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
	++console_row;
c7e0d4bc:	e2822001 	add	r2, r2, #1	; 0x1
	console_col = 0;

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
c7e0d4c0:	e2433060 	sub	r3, r3, #96	; 0x60
c7e0d4c4:	e283100f 	add	r1, r3, #15	; 0xf
c7e0d4c8:	e3530000 	cmp	r3, #0	; 0x0

/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
	++console_row;
c7e0d4cc:	e1a02802 	lsl	r2, r2, #16
	console_col = 0;

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
c7e0d4d0:	b1a03001 	movlt	r3, r1

/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
	++console_row;
c7e0d4d4:	e1a02822 	lsr	r2, r2, #16
	console_col = 0;

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
c7e0d4d8:	e1a0c243 	asr	ip, r3, #4
c7e0d4dc:	e1a03802 	lsl	r3, r2, #16
c7e0d4e0:	e15c0843 	cmp	ip, r3, asr #16
/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
	++console_row;
	console_col = 0;
c7e0d4e4:	e59f3088 	ldr	r3, [pc, #136]	; c7e0d574 <console_newline+0xcc>
c7e0d4e8:	e3a01000 	mov	r1, #0	; 0x0
c7e0d4ec:	e1c310b0 	strh	r1, [r3]

/*----------------------------------------------------------------------*/

static inline void console_newline(void)
{
	++console_row;
c7e0d4f0:	e1c720b0 	strh	r2, [r7]
	console_col = 0;

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
c7e0d4f4:	c8bd84f0 	popgt	{r4, r5, r6, r7, sl, pc}
/*----------------------------------------------------------------------*/

static void console_scrollup(void)
{
	/* Copy up rows ignoring the first one */
	memcpy(CONSOLE_ROW_FIRST, CONSOLE_ROW_SECOND, CONSOLE_SCROLL_SIZE);
c7e0d4f8:	e59f5078 	ldr	r5, [pc, #120]	; c7e0d578 <console_newline+0xd0>
c7e0d4fc:	e3e0400f 	mvn	r4, #15	; 0xf
c7e0d500:	e5951000 	ldr	r1, [r5]
c7e0d504:	e59f6070 	ldr	r6, [pc, #112]	; c7e0d57c <console_newline+0xd4>
c7e0d508:	e0030194 	mul	r3, r4, r1
c7e0d50c:	e5960000 	ldr	r0, [r6]
c7e0d510:	e1a01201 	lsl	r1, r1, #4
c7e0d514:	e0223c91 	mla	r2, r1, ip, r3
c7e0d518:	e0801001 	add	r1, r0, r1
c7e0d51c:	eb0055c6 	bl	c7e22c3c <memcpy>

	/* Clear the last one */
	memset(CONSOLE_ROW_LAST, COLOR_MASK(lcd_color_bg), CONSOLE_ROW_SIZE);
c7e0d520:	e5952000 	ldr	r2, [r5]
c7e0d524:	e1da30b2 	ldrh	r3, [sl, #2]
c7e0d528:	e0000294 	mul	r0, r4, r2
c7e0d52c:	e2433060 	sub	r3, r3, #96	; 0x60
c7e0d530:	e283100f 	add	r1, r3, #15	; 0xf
c7e0d534:	e3530000 	cmp	r3, #0	; 0x0
c7e0d538:	b1a03001 	movlt	r3, r1
c7e0d53c:	e1a02202 	lsl	r2, r2, #4
c7e0d540:	e1a03243 	asr	r3, r3, #4
c7e0d544:	e0230392 	mla	r3, r2, r3, r0
c7e0d548:	e5960000 	ldr	r0, [r6]
c7e0d54c:	e0800003 	add	r0, r0, r3
c7e0d550:	e59f3028 	ldr	r3, [pc, #40]	; c7e0d580 <console_newline+0xd8>
c7e0d554:	e5931000 	ldr	r1, [r3]
c7e0d558:	eb00558d 	bl	c7e22b94 <memset>

	/* Check if we need to scroll the terminal */
	if (console_row >= CONSOLE_ROWS) {
		/* Scroll everything up */
		console_scrollup();
		--console_row;
c7e0d55c:	e1d730b0 	ldrh	r3, [r7]
c7e0d560:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0d564:	e1c730b0 	strh	r3, [r7]
c7e0d568:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0d56c:	c7e421ea 	.word	0xc7e421ea
c7e0d570:	c7e3a234 	.word	0xc7e3a234
c7e0d574:	c7e421e8 	.word	0xc7e421e8
c7e0d578:	c7e421d8 	.word	0xc7e421d8
c7e0d57c:	c7e421e4 	.word	0xc7e421e4
c7e0d580:	c7e421e0 	.word	0xc7e421e0

c7e0d584 <drv_lcd_init>:
/************************************************************************/
/* ** GENERIC Initialization Routines					*/
/************************************************************************/

int drv_lcd_init (void)
{
c7e0d584:	e92d4070 	push	{r4, r5, r6, lr}
	struct stdio_dev lcddev;
	int rc;

	lcd_base = (void *)(gd->fb_base);

	lcd_line_length = (panel_info.vl_col * NBITS (panel_info.vl_bpix)) / 8;
c7e0d588:	e59f30c0 	ldr	r3, [pc, #192]	; c7e0d650 <drv_lcd_init+0xcc>
int drv_lcd_init (void)
{
	struct stdio_dev lcddev;
	int rc;

	lcd_base = (void *)(gd->fb_base);
c7e0d58c:	e5984018 	ldr	r4, [r8, #24]

	lcd_line_length = (panel_info.vl_col * NBITS (panel_info.vl_bpix)) / 8;
c7e0d590:	e5d3100e 	ldrb	r1, [r3, #14]
c7e0d594:	e1d330b0 	ldrh	r3, [r3]
/************************************************************************/
/* ** GENERIC Initialization Routines					*/
/************************************************************************/

int drv_lcd_init (void)
{
c7e0d598:	e24dd040 	sub	sp, sp, #64	; 0x40
	struct stdio_dev lcddev;
	int rc;

	lcd_base = (void *)(gd->fb_base);

	lcd_line_length = (panel_info.vl_col * NBITS (panel_info.vl_bpix)) / 8;
c7e0d59c:	e1a03113 	lsl	r3, r3, r1
c7e0d5a0:	e3530000 	cmp	r3, #0	; 0x0
c7e0d5a4:	e2832007 	add	r2, r3, #7	; 0x7
c7e0d5a8:	b1a03002 	movlt	r3, r2
c7e0d5ac:	e59f20a0 	ldr	r2, [pc, #160]	; c7e0d654 <drv_lcd_init+0xd0>
c7e0d5b0:	e1a031c3 	asr	r3, r3, #3
c7e0d5b4:	e5823000 	str	r3, [r2]
int drv_lcd_init (void)
{
	struct stdio_dev lcddev;
	int rc;

	lcd_base = (void *)(gd->fb_base);
c7e0d5b8:	e59f3098 	ldr	r3, [pc, #152]	; c7e0d658 <drv_lcd_init+0xd4>
/*----------------------------------------------------------------------*/

static int lcd_init(void *lcdbase)
{
	/* Initialize the lcd controller */
	debug("[LCD] Initializing LCD frambuffer at %p\n", lcdbase);
c7e0d5bc:	e1a01004 	mov	r1, r4
int drv_lcd_init (void)
{
	struct stdio_dev lcddev;
	int rc;

	lcd_base = (void *)(gd->fb_base);
c7e0d5c0:	e5834000 	str	r4, [r3]
/*----------------------------------------------------------------------*/

static int lcd_init(void *lcdbase)
{
	/* Initialize the lcd controller */
	debug("[LCD] Initializing LCD frambuffer at %p\n", lcdbase);
c7e0d5c4:	e59f0090 	ldr	r0, [pc, #144]	; c7e0d65c <drv_lcd_init+0xd8>
c7e0d5c8:	ebffed22 	bl	c7e08a58 <printf>

	lcd_ctrl_init(lcdbase);
c7e0d5cc:	e1a00004 	mov	r0, r4
c7e0d5d0:	eb003e8f 	bl	c7e1d014 <lcd_ctrl_init>
	lcd_is_enabled = 1;
c7e0d5d4:	e59f3084 	ldr	r3, [pc, #132]	; c7e0d660 <drv_lcd_init+0xdc>
c7e0d5d8:	e3a06001 	mov	r6, #1	; 0x1
c7e0d5dc:	e5c36000 	strb	r6, [r3]
	lcd_clear();
c7e0d5e0:	ebffff83 	bl	c7e0d3f4 <lcd_clear>
	lcd_enable ();
c7e0d5e4:	eb003e3c 	bl	c7e1cedc <lcd_enable>
	/* Initialize the console */
	console_col = 0;
#ifdef CONFIG_LCD_INFO_BELOW_LOGO
	console_row = 7 + BMP_LOGO_HEIGHT / VIDEO_FONT_HEIGHT;
#else
	console_row = 1;	/* leave 1 blank line below logo */
c7e0d5e8:	e59f3074 	ldr	r3, [pc, #116]	; c7e0d664 <drv_lcd_init+0xe0>
	lcd_is_enabled = 1;
	lcd_clear();
	lcd_enable ();

	/* Initialize the console */
	console_col = 0;
c7e0d5ec:	e3a05000 	mov	r5, #0	; 0x0
#ifdef CONFIG_LCD_INFO_BELOW_LOGO
	console_row = 7 + BMP_LOGO_HEIGHT / VIDEO_FONT_HEIGHT;
#else
	console_row = 1;	/* leave 1 blank line below logo */
c7e0d5f0:	e1c360b0 	strh	r6, [r3]
	lcd_is_enabled = 1;
	lcd_clear();
	lcd_enable ();

	/* Initialize the console */
	console_col = 0;
c7e0d5f4:	e59f306c 	ldr	r3, [pc, #108]	; c7e0d668 <drv_lcd_init+0xe4>
	lcd_line_length = (panel_info.vl_col * NBITS (panel_info.vl_bpix)) / 8;

	lcd_init(lcd_base);		/* LCD initialization */

	/* Device initialization */
	memset(&lcddev, 0, sizeof(lcddev));
c7e0d5f8:	e28d4004 	add	r4, sp, #4	; 0x4
c7e0d5fc:	e3a0203c 	mov	r2, #60	; 0x3c
	lcd_is_enabled = 1;
	lcd_clear();
	lcd_enable ();

	/* Initialize the console */
	console_col = 0;
c7e0d600:	e1c350b0 	strh	r5, [r3]
	lcd_line_length = (panel_info.vl_col * NBITS (panel_info.vl_bpix)) / 8;

	lcd_init(lcd_base);		/* LCD initialization */

	/* Device initialization */
	memset(&lcddev, 0, sizeof(lcddev));
c7e0d604:	e1a01005 	mov	r1, r5
c7e0d608:	e1a00004 	mov	r0, r4
c7e0d60c:	eb005560 	bl	c7e22b94 <memset>

	strcpy(lcddev.name, "lcd");
c7e0d610:	e59f1054 	ldr	r1, [pc, #84]	; c7e0d66c <drv_lcd_init+0xe8>
c7e0d614:	e2840008 	add	r0, r4, #8	; 0x8
c7e0d618:	eb005459 	bl	c7e22784 <strcpy>
	lcddev.ext   = 0;			/* No extensions */
	lcddev.flags = DEV_FLAGS_OUTPUT;	/* Output only */
c7e0d61c:	e3a03002 	mov	r3, #2	; 0x2
c7e0d620:	e58d3004 	str	r3, [sp, #4]
	lcddev.putc  = lcd_putc;		/* 'putc' function */
c7e0d624:	e59f3044 	ldr	r3, [pc, #68]	; c7e0d670 <drv_lcd_init+0xec>
	lcddev.puts  = lcd_puts;		/* 'puts' function */

	rc = stdio_register (&lcddev);
c7e0d628:	e1a00004 	mov	r0, r4
	memset(&lcddev, 0, sizeof(lcddev));

	strcpy(lcddev.name, "lcd");
	lcddev.ext   = 0;			/* No extensions */
	lcddev.flags = DEV_FLAGS_OUTPUT;	/* Output only */
	lcddev.putc  = lcd_putc;		/* 'putc' function */
c7e0d62c:	e58d3024 	str	r3, [sp, #36]
	lcddev.puts  = lcd_puts;		/* 'puts' function */
c7e0d630:	e59f303c 	ldr	r3, [pc, #60]	; c7e0d674 <drv_lcd_init+0xf0>

	/* Device initialization */
	memset(&lcddev, 0, sizeof(lcddev));

	strcpy(lcddev.name, "lcd");
	lcddev.ext   = 0;			/* No extensions */
c7e0d634:	e58d5008 	str	r5, [sp, #8]
	lcddev.flags = DEV_FLAGS_OUTPUT;	/* Output only */
	lcddev.putc  = lcd_putc;		/* 'putc' function */
	lcddev.puts  = lcd_puts;		/* 'puts' function */
c7e0d638:	e58d3028 	str	r3, [sp, #40]

	rc = stdio_register (&lcddev);
c7e0d63c:	eb0004fe 	bl	c7e0ea3c <stdio_register>

	return (rc == 0) ? 1 : rc;
}
c7e0d640:	e1500005 	cmp	r0, r5
c7e0d644:	01a00006 	moveq	r0, r6
c7e0d648:	e28dd040 	add	sp, sp, #64	; 0x40
c7e0d64c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0d650:	c7e3a234 	.word	0xc7e3a234
c7e0d654:	c7e421d8 	.word	0xc7e421d8
c7e0d658:	c7e421cc 	.word	0xc7e421cc
c7e0d65c:	c7e3277c 	.word	0xc7e3277c
c7e0d660:	c7e40444 	.word	0xc7e40444
c7e0d664:	c7e421ea 	.word	0xc7e421ea
c7e0d668:	c7e421e8 	.word	0xc7e421e8
c7e0d66c:	c7e327a5 	.word	0xc7e327a5
c7e0d670:	c7e0d678 	.word	0xc7e0d678
c7e0d674:	c7e0d7fc 	.word	0xc7e0d7fc

c7e0d678 <lcd_putc>:
}

/*----------------------------------------------------------------------*/

void lcd_putc(const char c)
{
c7e0d678:	e92d4070 	push	{r4, r5, r6, lr}
	if (!lcd_is_enabled) {
c7e0d67c:	e59f3164 	ldr	r3, [pc, #356]	; c7e0d7e8 <lcd_putc+0x170>
}

/*----------------------------------------------------------------------*/

void lcd_putc(const char c)
{
c7e0d680:	e1a05000 	mov	r5, r0
	if (!lcd_is_enabled) {
c7e0d684:	e5d33000 	ldrb	r3, [r3]
c7e0d688:	e3530000 	cmp	r3, #0	; 0x0
c7e0d68c:	1a000001 	bne	c7e0d698 <lcd_putc+0x20>
		lcd_putc_xy(console_col * VIDEO_FONT_WIDTH,
			console_row * VIDEO_FONT_HEIGHT, c);
		if (++console_col >= CONSOLE_COLS)
			console_newline();
	}
}
c7e0d690:	e8bd4070 	pop	{r4, r5, r6, lr}
/*----------------------------------------------------------------------*/

void lcd_putc(const char c)
{
	if (!lcd_is_enabled) {
		serial_putc(c);
c7e0d694:	ea003267 	b	c7e1a038 <serial_putc>

		return;
	}
 	serial_putc(c);
c7e0d698:	eb003266 	bl	c7e1a038 <serial_putc>
	switch (c) {
c7e0d69c:	e2453008 	sub	r3, r5, #8	; 0x8
c7e0d6a0:	e3530005 	cmp	r3, #5	; 0x5
c7e0d6a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e0d6a8:	ea000037 	b	c7e0d78c <lcd_putc+0x114>
c7e0d6ac:	c7e0d708 	.word	0xc7e0d708
c7e0d6b0:	c7e0d6d4 	.word	0xc7e0d6d4
c7e0d6b4:	c7e0d7e0 	.word	0xc7e0d7e0
c7e0d6b8:	c7e0d78c 	.word	0xc7e0d78c
c7e0d6bc:	c7e0d78c 	.word	0xc7e0d78c
c7e0d6c0:	c7e0d6c4 	.word	0xc7e0d6c4
	case '\r':
		console_col = 0;
c7e0d6c4:	e59f3120 	ldr	r3, [pc, #288]	; c7e0d7ec <lcd_putc+0x174>
c7e0d6c8:	e3a02000 	mov	r2, #0	; 0x0
c7e0d6cc:	e1c320b0 	strh	r2, [r3]
c7e0d6d0:	e8bd8070 	pop	{r4, r5, r6, pc}
		console_newline();

		return;
	case '\t':	/* Tab (8 chars alignment) */
		console_col +=  8;
		console_col &= ~7;
c7e0d6d4:	e59f0110 	ldr	r0, [pc, #272]	; c7e0d7ec <lcd_putc+0x174>

		if (console_col >= CONSOLE_COLS)
c7e0d6d8:	e59f3110 	ldr	r3, [pc, #272]	; c7e0d7f0 <lcd_putc+0x178>
		console_newline();

		return;
	case '\t':	/* Tab (8 chars alignment) */
		console_col +=  8;
		console_col &= ~7;
c7e0d6dc:	e1d020b0 	ldrh	r2, [r0]
c7e0d6e0:	e59f110c 	ldr	r1, [pc, #268]	; c7e0d7f4 <lcd_putc+0x17c>
c7e0d6e4:	e2822008 	add	r2, r2, #8	; 0x8

		if (console_col >= CONSOLE_COLS)
c7e0d6e8:	e1d330b0 	ldrh	r3, [r3]
		console_newline();

		return;
	case '\t':	/* Tab (8 chars alignment) */
		console_col +=  8;
		console_col &= ~7;
c7e0d6ec:	e0021001 	and	r1, r2, r1

		if (console_col >= CONSOLE_COLS)
c7e0d6f0:	e1a02801 	lsl	r2, r1, #16
c7e0d6f4:	e1a031a3 	lsr	r3, r3, #3
c7e0d6f8:	e1530842 	cmp	r3, r2, asr #16
		console_newline();

		return;
	case '\t':	/* Tab (8 chars alignment) */
		console_col +=  8;
		console_col &= ~7;
c7e0d6fc:	e1c010b0 	strh	r1, [r0]

		if (console_col >= CONSOLE_COLS)
c7e0d700:	c8bd8070 	popgt	{r4, r5, r6, pc}
c7e0d704:	ea000035 	b	c7e0d7e0 <lcd_putc+0x168>

/*----------------------------------------------------------------------*/

static inline void console_back(void)
{
	if (--console_col < 0) {
c7e0d708:	e59f00dc 	ldr	r0, [pc, #220]	; c7e0d7ec <lcd_putc+0x174>
c7e0d70c:	e1d030b0 	ldrh	r3, [r0]
c7e0d710:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0d714:	e1a03803 	lsl	r3, r3, #16
c7e0d718:	e1a03823 	lsr	r3, r3, #16
c7e0d71c:	e3130902 	tst	r3, #32768	; 0x8000
c7e0d720:	e1c030b0 	strh	r3, [r0]
c7e0d724:	0a00000d 	beq	c7e0d760 <lcd_putc+0xe8>
		console_col = CONSOLE_COLS-1 ;
		if (--console_row < 0) {
c7e0d728:	e59f10c8 	ldr	r1, [pc, #200]	; c7e0d7f8 <lcd_putc+0x180>
/*----------------------------------------------------------------------*/

static inline void console_back(void)
{
	if (--console_col < 0) {
		console_col = CONSOLE_COLS-1 ;
c7e0d72c:	e59f20bc 	ldr	r2, [pc, #188]	; c7e0d7f0 <lcd_putc+0x178>
		if (--console_row < 0) {
c7e0d730:	e1d130b0 	ldrh	r3, [r1]
/*----------------------------------------------------------------------*/

static inline void console_back(void)
{
	if (--console_col < 0) {
		console_col = CONSOLE_COLS-1 ;
c7e0d734:	e1d220b0 	ldrh	r2, [r2]
		if (--console_row < 0) {
c7e0d738:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0d73c:	e1a03803 	lsl	r3, r3, #16
c7e0d740:	e1a03823 	lsr	r3, r3, #16
c7e0d744:	e3130902 	tst	r3, #32768	; 0x8000
/*----------------------------------------------------------------------*/

static inline void console_back(void)
{
	if (--console_col < 0) {
		console_col = CONSOLE_COLS-1 ;
c7e0d748:	e1a021a2 	lsr	r2, r2, #3
		if (--console_row < 0) {
c7e0d74c:	e1c130b0 	strh	r3, [r1]
/*----------------------------------------------------------------------*/

static inline void console_back(void)
{
	if (--console_col < 0) {
		console_col = CONSOLE_COLS-1 ;
c7e0d750:	e2422001 	sub	r2, r2, #1	; 0x1
		if (--console_row < 0) {
			console_row = 0;
c7e0d754:	13a03000 	movne	r3, #0	; 0x0
/*----------------------------------------------------------------------*/

static inline void console_back(void)
{
	if (--console_col < 0) {
		console_col = CONSOLE_COLS-1 ;
c7e0d758:	e1c020b0 	strh	r2, [r0]
		if (--console_row < 0) {
			console_row = 0;
c7e0d75c:	11c130b0 	strhne	r3, [r1]
		}
	}

	lcd_putc_xy(console_col * VIDEO_FONT_WIDTH,
c7e0d760:	e59f3084 	ldr	r3, [pc, #132]	; c7e0d7ec <lcd_putc+0x174>
c7e0d764:	e3a02020 	mov	r2, #32	; 0x20
c7e0d768:	e1d300f0 	ldrsh	r0, [r3]
c7e0d76c:	e59f3084 	ldr	r3, [pc, #132]	; c7e0d7f8 <lcd_putc+0x180>
c7e0d770:	e1a00980 	lsl	r0, r0, #19
c7e0d774:	e1d310f0 	ldrsh	r1, [r3]
c7e0d778:	e1a00820 	lsr	r0, r0, #16
c7e0d77c:	e1a01a01 	lsl	r1, r1, #20
c7e0d780:	e1a01821 	lsr	r1, r1, #16
		lcd_putc_xy(console_col * VIDEO_FONT_WIDTH,
			console_row * VIDEO_FONT_HEIGHT, c);
		if (++console_col >= CONSOLE_COLS)
			console_newline();
	}
}
c7e0d784:	e8bd4070 	pop	{r4, r5, r6, lr}
		if (--console_row < 0) {
			console_row = 0;
		}
	}

	lcd_putc_xy(console_col * VIDEO_FONT_WIDTH,
c7e0d788:	eafffdd1 	b	c7e0ced4 <lcd_putc_xy>
	case '\b':
		console_back();

		return;
	default:
		lcd_putc_xy(console_col * VIDEO_FONT_WIDTH,
c7e0d78c:	e59f4058 	ldr	r4, [pc, #88]	; c7e0d7ec <lcd_putc+0x174>
c7e0d790:	e59f3060 	ldr	r3, [pc, #96]	; c7e0d7f8 <lcd_putc+0x180>
c7e0d794:	e1d400f0 	ldrsh	r0, [r4]
c7e0d798:	e1d310f0 	ldrsh	r1, [r3]
c7e0d79c:	e1a00980 	lsl	r0, r0, #19
c7e0d7a0:	e1a01a01 	lsl	r1, r1, #20
c7e0d7a4:	e1a01821 	lsr	r1, r1, #16
c7e0d7a8:	e1a02005 	mov	r2, r5
c7e0d7ac:	e1a00820 	lsr	r0, r0, #16
c7e0d7b0:	ebfffdc7 	bl	c7e0ced4 <lcd_putc_xy>
			console_row * VIDEO_FONT_HEIGHT, c);
		if (++console_col >= CONSOLE_COLS)
c7e0d7b4:	e1d430b0 	ldrh	r3, [r4]
c7e0d7b8:	e59f2030 	ldr	r2, [pc, #48]	; c7e0d7f0 <lcd_putc+0x178>
c7e0d7bc:	e2833001 	add	r3, r3, #1	; 0x1
c7e0d7c0:	e1a03803 	lsl	r3, r3, #16
c7e0d7c4:	e1d220b0 	ldrh	r2, [r2]
c7e0d7c8:	e1a03823 	lsr	r3, r3, #16
c7e0d7cc:	e1a01803 	lsl	r1, r3, #16
c7e0d7d0:	e1a021a2 	lsr	r2, r2, #3
c7e0d7d4:	e1520841 	cmp	r2, r1, asr #16
c7e0d7d8:	e1c430b0 	strh	r3, [r4]
c7e0d7dc:	c8bd8070 	popgt	{r4, r5, r6, pc}
			console_newline();
	}
}
c7e0d7e0:	e8bd4070 	pop	{r4, r5, r6, lr}
		return;
	default:
		lcd_putc_xy(console_col * VIDEO_FONT_WIDTH,
			console_row * VIDEO_FONT_HEIGHT, c);
		if (++console_col >= CONSOLE_COLS)
			console_newline();
c7e0d7e4:	eaffff2f 	b	c7e0d4a8 <console_newline>
c7e0d7e8:	c7e40444 	.word	0xc7e40444
c7e0d7ec:	c7e421e8 	.word	0xc7e421e8
c7e0d7f0:	c7e3a234 	.word	0xc7e3a234
c7e0d7f4:	0000fff8 	.word	0x0000fff8
c7e0d7f8:	c7e421ea 	.word	0xc7e421ea

c7e0d7fc <lcd_puts>:
}

/*----------------------------------------------------------------------*/

void lcd_puts(const char *s)
{
c7e0d7fc:	e92d4070 	push	{r4, r5, r6, lr}
	if (!lcd_is_enabled) {
c7e0d800:	e59f3030 	ldr	r3, [pc, #48]	; c7e0d838 <lcd_puts+0x3c>
}

/*----------------------------------------------------------------------*/

void lcd_puts(const char *s)
{
c7e0d804:	e1a05000 	mov	r5, r0
	if (!lcd_is_enabled) {
c7e0d808:	e5d33000 	ldrb	r3, [r3]
c7e0d80c:	e3530000 	cmp	r3, #0	; 0x0
c7e0d810:	13a04000 	movne	r4, #0	; 0x0
c7e0d814:	1a000002 	bne	c7e0d824 <lcd_puts+0x28>
	}

	while (*s) {
		lcd_putc(*s++);
	}
}
c7e0d818:	e8bd4070 	pop	{r4, r5, r6, lr}
/*----------------------------------------------------------------------*/

void lcd_puts(const char *s)
{
	if (!lcd_is_enabled) {
		serial_puts(s);
c7e0d81c:	ea003217 	b	c7e1a080 <serial_puts>

		return;
	}

	while (*s) {
		lcd_putc(*s++);
c7e0d820:	ebffff94 	bl	c7e0d678 <lcd_putc>
		serial_puts(s);

		return;
	}

	while (*s) {
c7e0d824:	e7d53004 	ldrb	r3, [r5, r4]
c7e0d828:	e2844001 	add	r4, r4, #1	; 0x1
c7e0d82c:	e2530000 	subs	r0, r3, #0	; 0x0
c7e0d830:	1afffffa 	bne	c7e0d820 <lcd_puts+0x24>
		lcd_putc(*s++);
	}
}
c7e0d834:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0d838:	c7e40444 	.word	0xc7e40444

c7e0d83c <lcd_printf>:

/*----------------------------------------------------------------------*/

void lcd_printf(const char *fmt, ...)
{
c7e0d83c:	e92d000f 	push	{r0, r1, r2, r3}
c7e0d840:	e92d4010 	push	{r4, lr}
c7e0d844:	e24ddf62 	sub	sp, sp, #392	; 0x188
	va_list args;
	char buf[CONFIG_SYS_PBSIZE];

	va_start(args, fmt);
c7e0d848:	e28d3f65 	add	r3, sp, #404	; 0x194
	vsprintf(buf, fmt, args);
c7e0d84c:	e28d4004 	add	r4, sp, #4	; 0x4
c7e0d850:	e1a02003 	mov	r2, r3
c7e0d854:	e1a00004 	mov	r0, r4
c7e0d858:	e59d1190 	ldr	r1, [sp, #400]
void lcd_printf(const char *fmt, ...)
{
	va_list args;
	char buf[CONFIG_SYS_PBSIZE];

	va_start(args, fmt);
c7e0d85c:	e58d3184 	str	r3, [sp, #388]
	vsprintf(buf, fmt, args);
c7e0d860:	eb0057cd 	bl	c7e2379c <vsprintf>
	va_end(args);

	lcd_puts(buf);
c7e0d864:	e1a00004 	mov	r0, r4
c7e0d868:	ebffffe3 	bl	c7e0d7fc <lcd_puts>
}
c7e0d86c:	e28ddf62 	add	sp, sp, #392	; 0x188
c7e0d870:	e8bd4010 	pop	{r4, lr}
c7e0d874:	e28dd010 	add	sp, sp, #16	; 0x10
c7e0d878:	e12fff1e 	bx	lr

c7e0d87c <__show_boot_progress>:
#endif

/*
 * Board-specific Platform code can reimplement show_boot_progress () if needed
 */
void inline __show_boot_progress (int val) {}
c7e0d87c:	e12fff1e 	bx	lr

c7e0d880 <parse_line>:
}

/****************************************************************************/

int parse_line (char *line, char *argv[])
{
c7e0d880:	e92d4010 	push	{r4, lr}
c7e0d884:	e3a04000 	mov	r4, #0	; 0x0
c7e0d888:	ea000000 	b	c7e0d890 <parse_line+0x10>
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {

		/* skip any white space */
		while (isblank(*line))
			++line;
c7e0d88c:	e2800001 	add	r0, r0, #1	; 0x1
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {

		/* skip any white space */
		while (isblank(*line))
c7e0d890:	e5d03000 	ldrb	r3, [r0]
c7e0d894:	e3530009 	cmp	r3, #9	; 0x9
c7e0d898:	13530020 	cmpne	r3, #32	; 0x20
c7e0d89c:	0afffffa 	beq	c7e0d88c <parse_line+0xc>
			++line;

		if (*line == '\0') {	/* end of line, no more args	*/
c7e0d8a0:	e3530000 	cmp	r3, #0	; 0x0
c7e0d8a4:	0a00000c 	beq	c7e0d8dc <parse_line+0x5c>
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		argv[nargs++] = line;	/* begin of argument string	*/
c7e0d8a8:	e7810104 	str	r0, [r1, r4, lsl #2]
c7e0d8ac:	e2844001 	add	r4, r4, #1	; 0x1
c7e0d8b0:	ea000000 	b	c7e0d8b8 <parse_line+0x38>

		/* find end of string */
		while (*line && !isblank(*line))
			++line;
c7e0d8b4:	e2800001 	add	r0, r0, #1	; 0x1
		}

		argv[nargs++] = line;	/* begin of argument string	*/

		/* find end of string */
		while (*line && !isblank(*line))
c7e0d8b8:	e5d03000 	ldrb	r3, [r0]
c7e0d8bc:	e3530000 	cmp	r3, #0	; 0x0
c7e0d8c0:	0a000005 	beq	c7e0d8dc <parse_line+0x5c>
c7e0d8c4:	e3530020 	cmp	r3, #32	; 0x20
c7e0d8c8:	13530009 	cmpne	r3, #9	; 0x9
c7e0d8cc:	03a03000 	moveq	r3, #0	; 0x0
c7e0d8d0:	13a03001 	movne	r3, #1	; 0x1
c7e0d8d4:	1afffff6 	bne	c7e0d8b4 <parse_line+0x34>
c7e0d8d8:	ea000006 	b	c7e0d8f8 <parse_line+0x78>
			++line;

		if (*line == '\0') {	/* end of line, no more args	*/
			argv[nargs] = NULL;
c7e0d8dc:	e7813104 	str	r3, [r1, r4, lsl #2]
c7e0d8e0:	ea000002 	b	c7e0d8f0 <parse_line+0x70>
		}

		*line++ = '\0';		/* terminate current arg	 */
	}

	printf ("** Too many args (max. %d) **\n", CONFIG_SYS_MAXARGS);
c7e0d8e4:	e59f001c 	ldr	r0, [pc, #28]	; c7e0d908 <parse_line+0x88>
c7e0d8e8:	e1a01004 	mov	r1, r4
c7e0d8ec:	ebffec59 	bl	c7e08a58 <printf>

#ifdef DEBUG_PARSER
	printf ("parse_line: nargs=%d\n", nargs);
#endif
	return (nargs);
}
c7e0d8f0:	e1a00004 	mov	r0, r4
c7e0d8f4:	e8bd8010 	pop	{r4, pc}
	int nargs = 0;

#ifdef DEBUG_PARSER
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {
c7e0d8f8:	e3540010 	cmp	r4, #16	; 0x10
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		*line++ = '\0';		/* terminate current arg	 */
c7e0d8fc:	e5c03000 	strb	r3, [r0]
	int nargs = 0;

#ifdef DEBUG_PARSER
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {
c7e0d900:	1affffe1 	bne	c7e0d88c <parse_line+0xc>
c7e0d904:	eafffff6 	b	c7e0d8e4 <parse_line+0x64>
c7e0d908:	c7e327ba 	.word	0xc7e327ba

c7e0d90c <run_command_list>:
{
	int need_buff = 1;
	char *buff = (char *)cmd;	/* cast away const */
	int rcode = 0;

	if (len == -1) {
c7e0d90c:	e3710001 	cmn	r1, #1	; 0x1
	return rcode;
}
#endif

int run_command_list(const char *cmd, int len, int flag)
{
c7e0d910:	e92d4070 	push	{r4, r5, r6, lr}
c7e0d914:	e1a04001 	mov	r4, r1
c7e0d918:	e1a06000 	mov	r6, r0
	int need_buff = 1;
	char *buff = (char *)cmd;	/* cast away const */
	int rcode = 0;

	if (len == -1) {
c7e0d91c:	1a000002 	bne	c7e0d92c <run_command_list+0x20>
#endif

int run_command_list(const char *cmd, int len, int flag)
{
	int need_buff = 1;
	char *buff = (char *)cmd;	/* cast away const */
c7e0d920:	e1a05000 	mov	r5, r0
	int rcode = 0;

	if (len == -1) {
		len = strlen(cmd);
c7e0d924:	eb005403 	bl	c7e22938 <strlen>
c7e0d928:	ea00000a 	b	c7e0d958 <run_command_list+0x4c>
		/* the built-in parser will change our string if it sees \n */
		need_buff = strchr(cmd, '\n') != NULL;
#endif
	}
	if (need_buff) {
		buff = malloc(len + 1);
c7e0d92c:	e2810001 	add	r0, r1, #1	; 0x1
c7e0d930:	ebffee19 	bl	c7e0919c <malloc>
		if (!buff)
c7e0d934:	e2505000 	subs	r5, r0, #0	; 0x0
c7e0d938:	1a000001 	bne	c7e0d944 <run_command_list+0x38>
	if (need_buff)
		free(buff);
#endif

	return rcode;
}
c7e0d93c:	e2800001 	add	r0, r0, #1	; 0x1
c7e0d940:	e8bd8070 	pop	{r4, r5, r6, pc}
	}
	if (need_buff) {
		buff = malloc(len + 1);
		if (!buff)
			return 1;
		memcpy(buff, cmd, len);
c7e0d944:	e1a01006 	mov	r1, r6
c7e0d948:	e1a02004 	mov	r2, r4
c7e0d94c:	eb0054ba 	bl	c7e22c3c <memcpy>
		buff[len] = '\0';
c7e0d950:	e3a03000 	mov	r3, #0	; 0x0
c7e0d954:	e7c53004 	strb	r3, [r5, r4]
	}
#ifdef CONFIG_SYS_HUSH_PARSER
	rcode = parse_string_outer(buff, FLAG_PARSE_SEMICOLON);
c7e0d958:	e1a00005 	mov	r0, r5
c7e0d95c:	e3a01002 	mov	r1, #2	; 0x2
	if (need_buff)
		free(buff);
#endif

	return rcode;
}
c7e0d960:	e8bd4070 	pop	{r4, r5, r6, lr}
			return 1;
		memcpy(buff, cmd, len);
		buff[len] = '\0';
	}
#ifdef CONFIG_SYS_HUSH_PARSER
	rcode = parse_string_outer(buff, FLAG_PARSE_SEMICOLON);
c7e0d964:	eafff8ef 	b	c7e0bd28 <parse_string_outer>

c7e0d968 <run_command>:
	if (builtin_run_command(cmd, flag) == -1)
		return 1;

	return 0;
#else
	return parse_string_outer(cmd,
c7e0d968:	e3a01003 	mov	r1, #3	; 0x3
c7e0d96c:	eafff8ed 	b	c7e0bd28 <parse_string_outer>

c7e0d970 <do_run>:
#if defined(CONFIG_CMD_RUN)
int do_run (cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
	int i;

	if (argc < 2)
c7e0d970:	e3520001 	cmp	r2, #1	; 0x1

/****************************************************************************/

#if defined(CONFIG_CMD_RUN)
int do_run (cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e0d974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int i;

	if (argc < 2)
c7e0d978:	d3e00000 	mvnle	r0, #0	; 0x0

/****************************************************************************/

#if defined(CONFIG_CMD_RUN)
int do_run (cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
{
c7e0d97c:	e1a06002 	mov	r6, r2
c7e0d980:	e1a07001 	mov	r7, r1
	int i;

	if (argc < 2)
c7e0d984:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
c7e0d988:	e2834004 	add	r4, r3, #4	; 0x4
c7e0d98c:	e3a05001 	mov	r5, #1	; 0x1
		return CMD_RET_USAGE;

	for (i=1; i<argc; ++i) {
		char *arg;

		if ((arg = getenv (argv[i])) == NULL) {
c7e0d990:	e5940000 	ldr	r0, [r4]
c7e0d994:	ebffe5c0 	bl	c7e0709c <getenv>
c7e0d998:	e3500000 	cmp	r0, #0	; 0x0
	int i;

	if (argc < 2)
		return CMD_RET_USAGE;

	for (i=1; i<argc; ++i) {
c7e0d99c:	e2855001 	add	r5, r5, #1	; 0x1
		if ((arg = getenv (argv[i])) == NULL) {
			printf ("## Error: \"%s\" not defined\n", argv[i]);
			return 1;
		}

		if (run_command(arg, flag) != 0)
c7e0d9a0:	e1a01007 	mov	r1, r7
		return CMD_RET_USAGE;

	for (i=1; i<argc; ++i) {
		char *arg;

		if ((arg = getenv (argv[i])) == NULL) {
c7e0d9a4:	1a000003 	bne	c7e0d9b8 <do_run+0x48>
			printf ("## Error: \"%s\" not defined\n", argv[i]);
c7e0d9a8:	e5941000 	ldr	r1, [r4]
c7e0d9ac:	e59f0028 	ldr	r0, [pc, #40]	; c7e0d9dc <do_run+0x6c>
c7e0d9b0:	ebffec28 	bl	c7e08a58 <printf>
c7e0d9b4:	ea000003 	b	c7e0d9c8 <do_run+0x58>
			return 1;
		}

		if (run_command(arg, flag) != 0)
c7e0d9b8:	ebffffea 	bl	c7e0d968 <run_command>
c7e0d9bc:	e3500000 	cmp	r0, #0	; 0x0
	int i;

	if (argc < 2)
		return CMD_RET_USAGE;

	for (i=1; i<argc; ++i) {
c7e0d9c0:	e2844004 	add	r4, r4, #4	; 0x4
		if ((arg = getenv (argv[i])) == NULL) {
			printf ("## Error: \"%s\" not defined\n", argv[i]);
			return 1;
		}

		if (run_command(arg, flag) != 0)
c7e0d9c4:	0a000001 	beq	c7e0d9d0 <do_run+0x60>
c7e0d9c8:	e3a00001 	mov	r0, #1	; 0x1
c7e0d9cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	int i;

	if (argc < 2)
		return CMD_RET_USAGE;

	for (i=1; i<argc; ++i) {
c7e0d9d0:	e1550006 	cmp	r5, r6
c7e0d9d4:	baffffed 	blt	c7e0d990 <do_run+0x20>

		if (run_command(arg, flag) != 0)
			return 1;
	}
	return 0;
}
c7e0d9d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e0d9dc:	c7e31299 	.word	0xc7e31299

c7e0d9e0 <delete_char>:
}

/****************************************************************************/

static char * delete_char (char *buffer, char *p, int *colp, int *np, int plen)
{
c7e0d9e0:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e0d9e4:	e1a07003 	mov	r7, r3
	char *s;

	if (*np == 0) {
c7e0d9e8:	e5933000 	ldr	r3, [r3]
}

/****************************************************************************/

static char * delete_char (char *buffer, char *p, int *colp, int *np, int plen)
{
c7e0d9ec:	e1a05000 	mov	r5, r0
	char *s;

	if (*np == 0) {
c7e0d9f0:	e3530000 	cmp	r3, #0	; 0x0
}

/****************************************************************************/

static char * delete_char (char *buffer, char *p, int *colp, int *np, int plen)
{
c7e0d9f4:	e1a06001 	mov	r6, r1
c7e0d9f8:	e1a04002 	mov	r4, r2
c7e0d9fc:	e59da018 	ldr	sl, [sp, #24]
	char *s;

	if (*np == 0) {
c7e0da00:	0a000029 	beq	c7e0daac <delete_char+0xcc>
		return (p);
	}

	if (*(--p) == '\t') {			/* will retype the whole line	*/
c7e0da04:	e5763001 	ldrb	r3, [r6, #-1]!
c7e0da08:	e3530009 	cmp	r3, #9	; 0x9
c7e0da0c:	0a000004 	beq	c7e0da24 <delete_char+0x44>
c7e0da10:	ea00001d 	b	c7e0da8c <delete_char+0xac>
		while (*colp > plen) {
			puts (erase_seq);
c7e0da14:	ebffebf4 	bl	c7e089ec <puts>
			(*colp)--;
c7e0da18:	e5943000 	ldr	r3, [r4]
c7e0da1c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0da20:	e5843000 	str	r3, [r4]
	if (*np == 0) {
		return (p);
	}

	if (*(--p) == '\t') {			/* will retype the whole line	*/
		while (*colp > plen) {
c7e0da24:	e5943000 	ldr	r3, [r4]
			puts (erase_seq);
c7e0da28:	e59f0084 	ldr	r0, [pc, #132]	; c7e0dab4 <delete_char+0xd4>
	if (*np == 0) {
		return (p);
	}

	if (*(--p) == '\t') {			/* will retype the whole line	*/
		while (*colp > plen) {
c7e0da2c:	e153000a 	cmp	r3, sl
c7e0da30:	cafffff7 	bgt	c7e0da14 <delete_char+0x34>
c7e0da34:	ea000011 	b	c7e0da80 <delete_char+0xa0>
			puts (erase_seq);
			(*colp)--;
		}
		for (s=buffer; s<p; ++s) {
			if (*s == '\t') {
c7e0da38:	e5d53000 	ldrb	r3, [r5]
c7e0da3c:	e5942000 	ldr	r2, [r4]
c7e0da40:	e3530009 	cmp	r3, #9	; 0x9
				puts (tab_seq+((*colp) & 07));
				*colp += 8 - ((*colp) & 07);
			} else {
				++(*colp);
c7e0da44:	e2823001 	add	r3, r2, #1	; 0x1
		while (*colp > plen) {
			puts (erase_seq);
			(*colp)--;
		}
		for (s=buffer; s<p; ++s) {
			if (*s == '\t') {
c7e0da48:	1a000008 	bne	c7e0da70 <delete_char+0x90>
				puts (tab_seq+((*colp) & 07));
c7e0da4c:	e59f0064 	ldr	r0, [pc, #100]	; c7e0dab8 <delete_char+0xd8>
c7e0da50:	e2023007 	and	r3, r2, #7	; 0x7
c7e0da54:	e0800003 	add	r0, r0, r3
c7e0da58:	ebffebe3 	bl	c7e089ec <puts>
				*colp += 8 - ((*colp) & 07);
c7e0da5c:	e5943000 	ldr	r3, [r4]
c7e0da60:	e3c33007 	bic	r3, r3, #7	; 0x7
c7e0da64:	e2833008 	add	r3, r3, #8	; 0x8
c7e0da68:	e5843000 	str	r3, [r4]
c7e0da6c:	ea000002 	b	c7e0da7c <delete_char+0x9c>
			} else {
				++(*colp);
c7e0da70:	e5843000 	str	r3, [r4]
				putc (*s);
c7e0da74:	e5d50000 	ldrb	r0, [r5]
c7e0da78:	ebffec86 	bl	c7e08c98 <putc>
	if (*(--p) == '\t') {			/* will retype the whole line	*/
		while (*colp > plen) {
			puts (erase_seq);
			(*colp)--;
		}
		for (s=buffer; s<p; ++s) {
c7e0da7c:	e2855001 	add	r5, r5, #1	; 0x1
c7e0da80:	e1550006 	cmp	r5, r6
c7e0da84:	3affffeb 	bcc	c7e0da38 <delete_char+0x58>
c7e0da88:	ea000004 	b	c7e0daa0 <delete_char+0xc0>
				++(*colp);
				putc (*s);
			}
		}
	} else {
		puts (erase_seq);
c7e0da8c:	e59f0020 	ldr	r0, [pc, #32]	; c7e0dab4 <delete_char+0xd4>
c7e0da90:	ebffebd5 	bl	c7e089ec <puts>
		(*colp)--;
c7e0da94:	e5943000 	ldr	r3, [r4]
c7e0da98:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0da9c:	e5843000 	str	r3, [r4]
	}
	(*np)--;
c7e0daa0:	e5973000 	ldr	r3, [r7]
c7e0daa4:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0daa8:	e5873000 	str	r3, [r7]
	return (p);
}
c7e0daac:	e1a00006 	mov	r0, r6
c7e0dab0:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0dab4:	c7e2c5b4 	.word	0xc7e2c5b4
c7e0dab8:	c7e2c5b8 	.word	0xc7e2c5b8

c7e0dabc <cread_add_char>:
	}					\
}

static void cread_add_char(char ichar, int insert, unsigned long *num,
	       unsigned long *eol_num, char *buf, unsigned long len)
{
c7e0dabc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	unsigned long wlen;

	/* room ??? */
	if (insert || *num == *eol_num) {
c7e0dac0:	e3510000 	cmp	r1, #0	; 0x0
	}					\
}

static void cread_add_char(char ichar, int insert, unsigned long *num,
	       unsigned long *eol_num, char *buf, unsigned long len)
{
c7e0dac4:	e1a07000 	mov	r7, r0
c7e0dac8:	e1a04002 	mov	r4, r2
c7e0dacc:	e1a00003 	mov	r0, r3
c7e0dad0:	e59d6018 	ldr	r6, [sp, #24]
c7e0dad4:	e59dc01c 	ldr	ip, [sp, #28]
	unsigned long wlen;

	/* room ??? */
	if (insert || *num == *eol_num) {
c7e0dad8:	1a000003 	bne	c7e0daec <cread_add_char+0x30>
c7e0dadc:	e5922000 	ldr	r2, [r2]
c7e0dae0:	e5933000 	ldr	r3, [r3]
c7e0dae4:	e1520003 	cmp	r2, r3
c7e0dae8:	1a000023 	bne	c7e0db7c <cread_add_char+0xc0>
		if (*eol_num > len - 1) {
c7e0daec:	e5902000 	ldr	r2, [r0]
c7e0daf0:	e24c3001 	sub	r3, ip, #1	; 0x1
c7e0daf4:	e1520003 	cmp	r2, r3
c7e0daf8:	9a000002 	bls	c7e0db08 <cread_add_char+0x4c>
			getcmd_cbeep();
c7e0dafc:	e3a00007 	mov	r0, #7	; 0x7
		wlen = 1;
		buf[*num] = ichar;
		putnstr(buf + *num, wlen);
		(*num)++;
	}
}
c7e0db00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	unsigned long wlen;

	/* room ??? */
	if (insert || *num == *eol_num) {
		if (*eol_num > len - 1) {
			getcmd_cbeep();
c7e0db04:	eaffec63 	b	c7e08c98 <putc>
			return;
		}
		(*eol_num)++;
	}

	if (insert) {
c7e0db08:	e3510000 	cmp	r1, #0	; 0x0
	if (insert || *num == *eol_num) {
		if (*eol_num > len - 1) {
			getcmd_cbeep();
			return;
		}
		(*eol_num)++;
c7e0db0c:	e2821001 	add	r1, r2, #1	; 0x1
c7e0db10:	e5801000 	str	r1, [r0]
	}

	if (insert) {
c7e0db14:	0a000018 	beq	c7e0db7c <cread_add_char+0xc0>
		wlen = *eol_num - *num;
c7e0db18:	e5943000 	ldr	r3, [r4]
c7e0db1c:	e0635001 	rsb	r5, r3, r1
		if (wlen > 1) {
c7e0db20:	e3550001 	cmp	r5, #1	; 0x1
c7e0db24:	9a000004 	bls	c7e0db3c <cread_add_char+0x80>
			memmove(&buf[*num+1], &buf[*num], wlen-1);
c7e0db28:	e2830001 	add	r0, r3, #1	; 0x1
c7e0db2c:	e0860000 	add	r0, r6, r0
c7e0db30:	e0861003 	add	r1, r6, r3
c7e0db34:	e2452001 	sub	r2, r5, #1	; 0x1
c7e0db38:	eb005460 	bl	c7e22cc0 <memmove>
		}

		buf[*num] = ichar;
c7e0db3c:	e5943000 	ldr	r3, [r4]
		putnstr(buf + *num, wlen);
c7e0db40:	e59f0060 	ldr	r0, [pc, #96]	; c7e0dba8 <cread_add_char+0xec>
		wlen = *eol_num - *num;
		if (wlen > 1) {
			memmove(&buf[*num+1], &buf[*num], wlen-1);
		}

		buf[*num] = ichar;
c7e0db44:	e7c67003 	strb	r7, [r6, r3]
		putnstr(buf + *num, wlen);
c7e0db48:	e5942000 	ldr	r2, [r4]
c7e0db4c:	e1a01005 	mov	r1, r5
c7e0db50:	e0862002 	add	r2, r6, r2
c7e0db54:	ebffebbf 	bl	c7e08a58 <printf>
		(*num)++;
c7e0db58:	e5943000 	ldr	r3, [r4]
c7e0db5c:	e2833001 	add	r3, r3, #1	; 0x1
c7e0db60:	e5843000 	str	r3, [r4]
c7e0db64:	ea000000 	b	c7e0db6c <cread_add_char+0xb0>
		while (--wlen) {
			getcmd_putch(CTL_BACKSPACE);
c7e0db68:	ebffec4a 	bl	c7e08c98 <putc>
		}

		buf[*num] = ichar;
		putnstr(buf + *num, wlen);
		(*num)++;
		while (--wlen) {
c7e0db6c:	e2555001 	subs	r5, r5, #1	; 0x1
			getcmd_putch(CTL_BACKSPACE);
c7e0db70:	e3a00008 	mov	r0, #8	; 0x8
		}

		buf[*num] = ichar;
		putnstr(buf + *num, wlen);
		(*num)++;
		while (--wlen) {
c7e0db74:	1afffffb 	bne	c7e0db68 <cread_add_char+0xac>
c7e0db78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			getcmd_putch(CTL_BACKSPACE);
		}
	} else {
		/* echo the character */
		wlen = 1;
		buf[*num] = ichar;
c7e0db7c:	e5943000 	ldr	r3, [r4]
		putnstr(buf + *num, wlen);
c7e0db80:	e59f0020 	ldr	r0, [pc, #32]	; c7e0dba8 <cread_add_char+0xec>
			getcmd_putch(CTL_BACKSPACE);
		}
	} else {
		/* echo the character */
		wlen = 1;
		buf[*num] = ichar;
c7e0db84:	e7c67003 	strb	r7, [r6, r3]
		putnstr(buf + *num, wlen);
c7e0db88:	e5942000 	ldr	r2, [r4]
c7e0db8c:	e3a01001 	mov	r1, #1	; 0x1
c7e0db90:	e0862002 	add	r2, r6, r2
c7e0db94:	ebffebaf 	bl	c7e08a58 <printf>
		(*num)++;
c7e0db98:	e5943000 	ldr	r3, [r4]
c7e0db9c:	e2833001 	add	r3, r3, #1	; 0x1
c7e0dba0:	e5843000 	str	r3, [r4]
c7e0dba4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e0dba8:	c7e327d9 	.word	0xc7e327d9

c7e0dbac <cread_add_str>:
	}
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
c7e0dbac:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e0dbb0:	e59db02c 	ldr	fp, [sp, #44]
c7e0dbb4:	e1a0a000 	mov	sl, r0
c7e0dbb8:	e1a05001 	mov	r5, r1
c7e0dbbc:	e1a07002 	mov	r7, r2
c7e0dbc0:	e1a06003 	mov	r6, r3
c7e0dbc4:	e59d9030 	ldr	r9, [sp, #48]
c7e0dbc8:	e3a04000 	mov	r4, #0	; 0x0
c7e0dbcc:	ea000004 	b	c7e0dbe4 <cread_add_str+0x38>
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
c7e0dbd0:	e7da0004 	ldrb	r0, [sl, r4]
c7e0dbd4:	e58db000 	str	fp, [sp]
c7e0dbd8:	e58d9004 	str	r9, [sp, #4]
c7e0dbdc:	ebffffb6 	bl	c7e0dabc <cread_add_char>
c7e0dbe0:	e2844001 	add	r4, r4, #1	; 0x1
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
c7e0dbe4:	e2555001 	subs	r5, r5, #1	; 0x1
		cread_add_char(*str, insert, num, eol_num, buf, len);
c7e0dbe8:	e1a01007 	mov	r1, r7
c7e0dbec:	e1a02006 	mov	r2, r6
c7e0dbf0:	e59d3028 	ldr	r3, [sp, #40]
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
c7e0dbf4:	2afffff5 	bcs	c7e0dbd0 <cread_add_str+0x24>
		cread_add_char(*str, insert, num, eol_num, buf, len);
		str++;
	}
}
c7e0dbf8:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}

c7e0dbfc <readline_into_buffer>:
	return readline_into_buffer(prompt, console_buffer, 0);
}


int readline_into_buffer(const char *const prompt, char *buffer, int timeout)
{
c7e0dbfc:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	 * History uses a global array which is not
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (gd->flags & GD_FLG_RELOC) {
c7e0dc00:	e5983004 	ldr	r3, [r8, #4]
	return readline_into_buffer(prompt, console_buffer, 0);
}


int readline_into_buffer(const char *const prompt, char *buffer, int timeout)
{
c7e0dc04:	e24dd028 	sub	sp, sp, #40	; 0x28
	 * History uses a global array which is not
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (gd->flags & GD_FLG_RELOC) {
c7e0dc08:	e2133001 	ands	r3, r3, #1	; 0x1
	return readline_into_buffer(prompt, console_buffer, 0);
}


int readline_into_buffer(const char *const prompt, char *buffer, int timeout)
{
c7e0dc0c:	e1a0a001 	mov	sl, r1
c7e0dc10:	e1a0b002 	mov	fp, r2
c7e0dc14:	e1a05000 	mov	r5, r0
	 * History uses a global array which is not
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (gd->flags & GD_FLG_RELOC) {
c7e0dc18:	0a0001af 	beq	c7e0e2dc <readline_into_buffer+0x6e0>
		if (!initted) {
c7e0dc1c:	e59f086c 	ldr	r0, [pc, #2156]	; c7e0e490 <readline_into_buffer+0x894>
c7e0dc20:	e5901000 	ldr	r1, [r0]
c7e0dc24:	e3510000 	cmp	r1, #0	; 0x0
c7e0dc28:	1a000011 	bne	c7e0dc74 <readline_into_buffer+0x78>
{
	int i;

	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
c7e0dc2c:	e59f3860 	ldr	r3, [pc, #2144]	; c7e0e494 <readline_into_buffer+0x898>
c7e0dc30:	e3e02000 	mvn	r2, #0	; 0x0
c7e0dc34:	e5832000 	str	r2, [r3]

static void hist_init(void)
{
	int i;

	hist_max = 0;
c7e0dc38:	e5801004 	str	r1, [r0, #4]
	hist_add_idx = 0;
c7e0dc3c:	e5801008 	str	r1, [r0, #8]
	hist_cur = -1;
	hist_num = 0;
c7e0dc40:	e580100c 	str	r1, [r0, #12]
c7e0dc44:	e1a02001 	mov	r2, r1
c7e0dc48:	e2800010 	add	r0, r0, #16	; 0x10

	for (i = 0; i < HIST_MAX; i++) {
		hist_list[i] = hist_lines[i];
c7e0dc4c:	e59f3844 	ldr	r3, [pc, #2116]	; c7e0e498 <readline_into_buffer+0x89c>
c7e0dc50:	e7830002 	str	r0, [r3, r2]
		hist_list[i][0] = '\0';
c7e0dc54:	e2822004 	add	r2, r2, #4	; 0x4
c7e0dc58:	e3a03000 	mov	r3, #0	; 0x0
	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
c7e0dc5c:	e3520050 	cmp	r2, #80	; 0x50
		hist_list[i] = hist_lines[i];
		hist_list[i][0] = '\0';
c7e0dc60:	e4c03101 	strb	r3, [r0], #257
	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
c7e0dc64:	1afffff8 	bne	c7e0dc4c <readline_into_buffer+0x50>
	 * running from flash.
	 */
	if (gd->flags & GD_FLG_RELOC) {
		if (!initted) {
			hist_init();
			initted = 1;
c7e0dc68:	e59f3820 	ldr	r3, [pc, #2080]	; c7e0e490 <readline_into_buffer+0x894>
c7e0dc6c:	e3a02001 	mov	r2, #1	; 0x1
c7e0dc70:	e5832000 	str	r2, [r3]
		}

		if (prompt)
c7e0dc74:	e3550000 	cmp	r5, #0	; 0x0
c7e0dc78:	0a000001 	beq	c7e0dc84 <readline_into_buffer+0x88>
			puts (prompt);
c7e0dc7c:	e1a00005 	mov	r0, r5
c7e0dc80:	ebffeb59 	bl	c7e089ec <puts>
}

static int cread_line(const char *const prompt, char *buf, unsigned int *len,
		int timeout)
{
	unsigned long num = 0;
c7e0dc84:	e3a03000 	mov	r3, #0	; 0x0
	unsigned long wlen;
	char ichar;
	int insert = 1;
	int esc_len = 0;
	char esc_save[8];
	int init_len = strlen(buf);
c7e0dc88:	e1a0000a 	mov	r0, sl

static int cread_line(const char *const prompt, char *buf, unsigned int *len,
		int timeout)
{
	unsigned long num = 0;
	unsigned long eol_num = 0;
c7e0dc8c:	e58d3018 	str	r3, [sp, #24]
}

static int cread_line(const char *const prompt, char *buf, unsigned int *len,
		int timeout)
{
	unsigned long num = 0;
c7e0dc90:	e58d301c 	str	r3, [sp, #28]
	unsigned long wlen;
	char ichar;
	int insert = 1;
	int esc_len = 0;
	char esc_save[8];
	int init_len = strlen(buf);
c7e0dc94:	eb005327 	bl	c7e22938 <strlen>
	int first = 1;

	if (init_len)
c7e0dc98:	e3500000 	cmp	r0, #0	; 0x0
c7e0dc9c:	0a000008 	beq	c7e0dcc4 <readline_into_buffer+0xc8>
		cread_add_str(buf, init_len, 1, &num, &eol_num, buf, *len);
c7e0dca0:	e28dc018 	add	ip, sp, #24	; 0x18
c7e0dca4:	e1a01000 	mov	r1, r0
c7e0dca8:	e58dc000 	str	ip, [sp]
c7e0dcac:	e1a0000a 	mov	r0, sl
c7e0dcb0:	e3a0cc01 	mov	ip, #256	; 0x100
c7e0dcb4:	e3a02001 	mov	r2, #1	; 0x1
c7e0dcb8:	e28d301c 	add	r3, sp, #28	; 0x1c
c7e0dcbc:	e98d1400 	stmib	sp, {sl, ip}
c7e0dcc0:	ebffffb9 	bl	c7e0dbac <cread_add_str>
c7e0dcc4:	e3a06001 	mov	r6, #1	; 0x1
c7e0dcc8:	e3a07000 	mov	r7, #0	; 0x0
c7e0dccc:	e1a09006 	mov	r9, r6
c7e0dcd0:	ea000000 	b	c7e0dcd8 <readline_into_buffer+0xdc>
c7e0dcd4:	e3a07000 	mov	r7, #0	; 0x0
			if (retry_time >= 0 && get_ticks() > endtime)
				return (-2);	/* timed out */
			WATCHDOG_RESET();
		}
#endif
		if (first && timeout) {
c7e0dcd8:	e35b0000 	cmp	fp, #0	; 0x0
c7e0dcdc:	03a03000 	moveq	r3, #0	; 0x0
c7e0dce0:	12063001 	andne	r3, r6, #1	; 0x1
c7e0dce4:	e3530000 	cmp	r3, #0	; 0x0
c7e0dce8:	0a000014 	beq	c7e0dd40 <readline_into_buffer+0x144>
			uint64_t etime = endtick(timeout);
c7e0dcec:	ebffcaf7 	bl	c7e008d0 <get_ticks>
c7e0dcf0:	e1a06001 	mov	r6, r1
c7e0dcf4:	e1a05000 	mov	r5, r0
c7e0dcf8:	ebffcb15 	bl	c7e00954 <get_tbclk>
c7e0dcfc:	e1a0100b 	mov	r1, fp
c7e0dd00:	e1a02fc1 	asr	r2, r1, #31
c7e0dd04:	e0843190 	umull	r3, r4, r0, r1
c7e0dd08:	e0244290 	mla	r4, r0, r2, r4
c7e0dd0c:	e0955003 	adds	r5, r5, r3
c7e0dd10:	e0a66004 	adc	r6, r6, r4
c7e0dd14:	ea000005 	b	c7e0dd30 <readline_into_buffer+0x134>

			while (!tstc()) {	/* while no incoming data */
				if (get_ticks() >= etime)
c7e0dd18:	ebffcaec 	bl	c7e008d0 <get_ticks>
c7e0dd1c:	e1560001 	cmp	r6, r1
c7e0dd20:	8a000002 	bhi	c7e0dd30 <readline_into_buffer+0x134>
c7e0dd24:	1a00016a 	bne	c7e0e2d4 <readline_into_buffer+0x6d8>
c7e0dd28:	e1550000 	cmp	r5, r0
c7e0dd2c:	9a000168 	bls	c7e0e2d4 <readline_into_buffer+0x6d8>
		}
#endif
		if (first && timeout) {
			uint64_t etime = endtick(timeout);

			while (!tstc()) {	/* while no incoming data */
c7e0dd30:	ebffebe2 	bl	c7e08cc0 <tstc>
c7e0dd34:	e3500000 	cmp	r0, #0	; 0x0
c7e0dd38:	0afffff6 	beq	c7e0dd18 <readline_into_buffer+0x11c>
c7e0dd3c:	e3a06000 	mov	r6, #0	; 0x0
				WATCHDOG_RESET();
			}
			first = 0;
		}

		ichar = getcmd_getch();
c7e0dd40:	ebffebe7 	bl	c7e08ce4 <getc>
c7e0dd44:	e200e0ff 	and	lr, r0, #255	; 0xff

		if ((ichar == '\n') || (ichar == '\r')) {
c7e0dd48:	e35e000d 	cmp	lr, #13	; 0xd
c7e0dd4c:	135e000a 	cmpne	lr, #10	; 0xa
c7e0dd50:	13a05000 	movne	r5, #0	; 0x0
c7e0dd54:	03a05001 	moveq	r5, #1	; 0x1
c7e0dd58:	1a000009 	bne	c7e0dd84 <readline_into_buffer+0x188>
			putc('\n');
c7e0dd5c:	e3a0000a 	mov	r0, #10	; 0xa
c7e0dd60:	ebffebcc 	bl	c7e08c98 <putc>
		default:
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
			break;
		}
	}
	*len = eol_num;
c7e0dd64:	e59d6018 	ldr	r6, [sp, #24]
	buf[eol_num] = '\0';	/* lose the newline */
c7e0dd68:	e3a03000 	mov	r3, #0	; 0x0
c7e0dd6c:	e7ca3006 	strb	r3, [sl, r6]

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
c7e0dd70:	e5da3000 	ldrb	r3, [sl]
c7e0dd74:	e3530000 	cmp	r3, #0	; 0x0
c7e0dd78:	13530021 	cmpne	r3, #33	; 0x21
c7e0dd7c:	0a00014e 	beq	c7e0e2bc <readline_into_buffer+0x6c0>
c7e0dd80:	ea00013b 	b	c7e0e274 <readline_into_buffer+0x678>
		}

		/*
		 * handle standard linux xterm esc sequences for arrow key, etc.
		 */
		if (esc_len != 0) {
c7e0dd84:	e3570000 	cmp	r7, #0	; 0x0
c7e0dd88:	0a00002e 	beq	c7e0de48 <readline_into_buffer+0x24c>
			if (esc_len == 1) {
c7e0dd8c:	e3570001 	cmp	r7, #1	; 0x1
c7e0dd90:	1a00000d 	bne	c7e0ddcc <readline_into_buffer+0x1d0>
				if (ichar == '[') {
c7e0dd94:	e35e005b 	cmp	lr, #91	; 0x5b
					esc_save[esc_len] = ichar;
c7e0dd98:	05cde011 	strbeq	lr, [sp, #17]
c7e0dd9c:	02877001 	addeq	r7, r7, #1	; 0x1
		/*
		 * handle standard linux xterm esc sequences for arrow key, etc.
		 */
		if (esc_len != 0) {
			if (esc_len == 1) {
				if (ichar == '[') {
c7e0dda0:	0affffcc 	beq	c7e0dcd8 <readline_into_buffer+0xdc>
					esc_save[esc_len] = ichar;
					esc_len = 2;
				} else {
					cread_add_str(esc_save, esc_len, insert,
c7e0dda4:	e28dc018 	add	ip, sp, #24	; 0x18
c7e0dda8:	e58dc000 	str	ip, [sp]
c7e0ddac:	e1a01007 	mov	r1, r7
c7e0ddb0:	e3a0cc01 	mov	ip, #256	; 0x100
c7e0ddb4:	e28d0010 	add	r0, sp, #16	; 0x10
c7e0ddb8:	e1a02009 	mov	r2, r9
c7e0ddbc:	e28d301c 	add	r3, sp, #28	; 0x1c
c7e0ddc0:	e98d1400 	stmib	sp, {sl, ip}
c7e0ddc4:	ebffff78 	bl	c7e0dbac <cread_add_str>
c7e0ddc8:	ea0000f8 	b	c7e0e1b0 <readline_into_buffer+0x5b4>
					esc_len = 0;
				}
				continue;
			}

			switch (ichar) {
c7e0ddcc:	e24e3041 	sub	r3, lr, #65	; 0x41
c7e0ddd0:	e3530007 	cmp	r3, #7	; 0x7
c7e0ddd4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e0ddd8:	ea000009 	b	c7e0de04 <readline_into_buffer+0x208>
c7e0dddc:	c7e0e0f4 	.word	0xc7e0e0f4
c7e0dde0:	c7e0e140 	.word	0xc7e0e140
c7e0dde4:	c7e0de38 	.word	0xc7e0de38
c7e0dde8:	c7e0df34 	.word	0xc7e0df34
c7e0ddec:	c7e0de04 	.word	0xc7e0de04
c7e0ddf0:	c7e0de04 	.word	0xc7e0de04
c7e0ddf4:	c7e0de04 	.word	0xc7e0de04
c7e0ddf8:	c7e0ddfc 	.word	0xc7e0ddfc
c7e0ddfc:	e3a07000 	mov	r7, #0	; 0x0
c7e0de00:	ea00003d 	b	c7e0defc <readline_into_buffer+0x300>
			case 'B':	/* down arrow */
				ichar = CTL_CH('n');
				esc_len = 0;
				break;	/* pass off to ^N handler */
			default:
				esc_save[esc_len++] = ichar;
c7e0de04:	e28d3028 	add	r3, sp, #40	; 0x28
c7e0de08:	e083c007 	add	ip, r3, r7
c7e0de0c:	e54ce018 	strb	lr, [ip, #-24]
				cread_add_str(esc_save, esc_len, insert,
c7e0de10:	e28dc018 	add	ip, sp, #24	; 0x18
c7e0de14:	e58dc000 	str	ip, [sp]
c7e0de18:	e2871001 	add	r1, r7, #1	; 0x1
c7e0de1c:	e3a0cc01 	mov	ip, #256	; 0x100
c7e0de20:	e28d0010 	add	r0, sp, #16	; 0x10
c7e0de24:	e1a02009 	mov	r2, r9
c7e0de28:	e28d301c 	add	r3, sp, #28	; 0x1c
c7e0de2c:	e98d1400 	stmib	sp, {sl, ip}
c7e0de30:	ebffff5d 	bl	c7e0dbac <cread_add_str>
c7e0de34:	eaffffa6 	b	c7e0dcd4 <readline_into_buffer+0xd8>
c7e0de38:	e3a0e006 	mov	lr, #6	; 0x6
c7e0de3c:	e35e000b 	cmp	lr, #11	; 0xb
c7e0de40:	e3a07000 	mov	r7, #0	; 0x0
c7e0de44:	ea000001 	b	c7e0de50 <readline_into_buffer+0x254>
				esc_len = 0;
				continue;
			}
		}

		switch (ichar) {
c7e0de48:	e35e000b 	cmp	lr, #11	; 0xb
c7e0de4c:	0a00005a 	beq	c7e0dfbc <readline_into_buffer+0x3c0>
c7e0de50:	8a00000d 	bhi	c7e0de8c <readline_into_buffer+0x290>
c7e0de54:	e35e0004 	cmp	lr, #4	; 0x4
c7e0de58:	0a00003e 	beq	c7e0df58 <readline_into_buffer+0x35c>
c7e0de5c:	8a000005 	bhi	c7e0de78 <readline_into_buffer+0x27c>
c7e0de60:	e35e0002 	cmp	lr, #2	; 0x2
c7e0de64:	0a000033 	beq	c7e0df38 <readline_into_buffer+0x33c>
c7e0de68:	8a000142 	bhi	c7e0e378 <readline_into_buffer+0x77c>
c7e0de6c:	e35e0001 	cmp	lr, #1	; 0x1
c7e0de70:	1a0000f7 	bne	c7e0e254 <readline_into_buffer+0x658>
c7e0de74:	ea000020 	b	c7e0defc <readline_into_buffer+0x300>
c7e0de78:	e35e0006 	cmp	lr, #6	; 0x6
c7e0de7c:	0a000023 	beq	c7e0df10 <readline_into_buffer+0x314>
c7e0de80:	3a00005e 	bcc	c7e0e000 <readline_into_buffer+0x404>
c7e0de84:	e35e0008 	cmp	lr, #8	; 0x8
c7e0de88:	ea000015 	b	c7e0dee4 <readline_into_buffer+0x2e8>
c7e0de8c:	e35e0015 	cmp	lr, #21	; 0x15
c7e0de90:	0a000067 	beq	c7e0e034 <readline_into_buffer+0x438>
c7e0de94:	8a000007 	bhi	c7e0deb8 <readline_into_buffer+0x2bc>
c7e0de98:	e35e000f 	cmp	lr, #15	; 0xf
			break;
		case CTL_CH('e'):
			REFRESH_TO_EOL();
			break;
		case CTL_CH('o'):
			insert = !insert;
c7e0de9c:	02299001 	eoreq	r9, r9, #1	; 0x1
				esc_len = 0;
				continue;
			}
		}

		switch (ichar) {
c7e0dea0:	0affff8c 	beq	c7e0dcd8 <readline_into_buffer+0xdc>
c7e0dea4:	e35e0010 	cmp	lr, #16	; 0x10
c7e0dea8:	0a000091 	beq	c7e0e0f4 <readline_into_buffer+0x4f8>
c7e0deac:	e35e000e 	cmp	lr, #14	; 0xe
c7e0deb0:	1a0000e7 	bne	c7e0e254 <readline_into_buffer+0x658>
c7e0deb4:	ea0000a1 	b	c7e0e140 <readline_into_buffer+0x544>
c7e0deb8:	e35e001b 	cmp	lr, #27	; 0x1b
		case 0x1b:
			if (esc_len == 0) {
				esc_save[esc_len] = ichar;
c7e0debc:	05cde010 	strbeq	lr, [sp, #16]
c7e0dec0:	03a07001 	moveq	r7, #1	; 0x1
				esc_len = 0;
				continue;
			}
		}

		switch (ichar) {
c7e0dec4:	0affff83 	beq	c7e0dcd8 <readline_into_buffer+0xdc>
c7e0dec8:	8a000002 	bhi	c7e0ded8 <readline_into_buffer+0x2dc>
c7e0decc:	e35e0018 	cmp	lr, #24	; 0x18
c7e0ded0:	1a0000df 	bne	c7e0e254 <readline_into_buffer+0x658>
c7e0ded4:	ea000056 	b	c7e0e034 <readline_into_buffer+0x438>
c7e0ded8:	e35e007f 	cmp	lr, #127	; 0x7f
c7e0dedc:	0a000067 	beq	c7e0e080 <readline_into_buffer+0x484>
c7e0dee0:	e35e00ff 	cmp	lr, #255	; 0xff
c7e0dee4:	1a0000da 	bne	c7e0e254 <readline_into_buffer+0x658>
c7e0dee8:	ea000064 	b	c7e0e080 <readline_into_buffer+0x484>
				esc_len = 0;
			}
			break;

		case CTL_CH('a'):
			BEGINNING_OF_LINE();
c7e0deec:	ebffeb69 	bl	c7e08c98 <putc>
c7e0def0:	e59d301c 	ldr	r3, [sp, #28]
c7e0def4:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0def8:	e58d301c 	str	r3, [sp, #28]
c7e0defc:	e59d301c 	ldr	r3, [sp, #28]
c7e0df00:	e3a00008 	mov	r0, #8	; 0x8
c7e0df04:	e3530000 	cmp	r3, #0	; 0x0
c7e0df08:	1afffff7 	bne	c7e0deec <readline_into_buffer+0x2f0>
c7e0df0c:	eaffff71 	b	c7e0dcd8 <readline_into_buffer+0xdc>
			break;
		case CTL_CH('c'):	/* ^C - break */
			*buf = '\0';	/* discard input */
			return (-1);
		case CTL_CH('f'):
			if (num < eol_num) {
c7e0df10:	e59d201c 	ldr	r2, [sp, #28]
c7e0df14:	e59d3018 	ldr	r3, [sp, #24]
c7e0df18:	e1520003 	cmp	r2, r3
c7e0df1c:	2affff6d 	bcs	c7e0dcd8 <readline_into_buffer+0xdc>
				getcmd_putch(buf[num]);
c7e0df20:	e7da0002 	ldrb	r0, [sl, r2]
c7e0df24:	ebffeb5b 	bl	c7e08c98 <putc>
				num++;
c7e0df28:	e59d301c 	ldr	r3, [sp, #28]
c7e0df2c:	e2833001 	add	r3, r3, #1	; 0x1
c7e0df30:	ea0000c5 	b	c7e0e24c <readline_into_buffer+0x650>
c7e0df34:	e3a07000 	mov	r7, #0	; 0x0
			}
			break;
		case CTL_CH('b'):
			if (num) {
c7e0df38:	e59d301c 	ldr	r3, [sp, #28]
c7e0df3c:	e3530000 	cmp	r3, #0	; 0x0
c7e0df40:	0affff64 	beq	c7e0dcd8 <readline_into_buffer+0xdc>
				getcmd_putch(CTL_BACKSPACE);
c7e0df44:	e3a00008 	mov	r0, #8	; 0x8
c7e0df48:	ebffeb52 	bl	c7e08c98 <putc>
				num--;
c7e0df4c:	e59d301c 	ldr	r3, [sp, #28]
c7e0df50:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0df54:	ea0000bc 	b	c7e0e24c <readline_into_buffer+0x650>
			}
			break;
		case CTL_CH('d'):
			if (num < eol_num) {
c7e0df58:	e59d201c 	ldr	r2, [sp, #28]
c7e0df5c:	e59d3018 	ldr	r3, [sp, #24]
c7e0df60:	e1520003 	cmp	r2, r3
c7e0df64:	2affff5b 	bcs	c7e0dcd8 <readline_into_buffer+0xdc>
				wlen = eol_num - num - 1;
c7e0df68:	e2433001 	sub	r3, r3, #1	; 0x1
				if (wlen) {
c7e0df6c:	e0535002 	subs	r5, r3, r2
c7e0df70:	0a000009 	beq	c7e0df9c <readline_into_buffer+0x3a0>
					memmove(&buf[num], &buf[num+1], wlen);
c7e0df74:	e2821001 	add	r1, r2, #1	; 0x1
c7e0df78:	e08a1001 	add	r1, sl, r1
c7e0df7c:	e08a0002 	add	r0, sl, r2
c7e0df80:	e1a02005 	mov	r2, r5
c7e0df84:	eb00534d 	bl	c7e22cc0 <memmove>
					putnstr(buf + num, wlen);
c7e0df88:	e59d201c 	ldr	r2, [sp, #28]
c7e0df8c:	e59f0508 	ldr	r0, [pc, #1288]	; c7e0e49c <readline_into_buffer+0x8a0>
c7e0df90:	e08a2002 	add	r2, sl, r2
c7e0df94:	e1a01005 	mov	r1, r5
c7e0df98:	ebffeaae 	bl	c7e08a58 <printf>
				}

				getcmd_putch(' ');
c7e0df9c:	e3a00020 	mov	r0, #32	; 0x20
c7e0dfa0:	ebffeb3c 	bl	c7e08c98 <putc>
				do {
					getcmd_putch(CTL_BACKSPACE);
				} while (wlen--);
c7e0dfa4:	e2455001 	sub	r5, r5, #1	; 0x1
					putnstr(buf + num, wlen);
				}

				getcmd_putch(' ');
				do {
					getcmd_putch(CTL_BACKSPACE);
c7e0dfa8:	e3a00008 	mov	r0, #8	; 0x8
c7e0dfac:	ebffeb39 	bl	c7e08c98 <putc>
				} while (wlen--);
c7e0dfb0:	e3750001 	cmn	r5, #1	; 0x1
c7e0dfb4:	1afffffa 	bne	c7e0dfa4 <readline_into_buffer+0x3a8>
c7e0dfb8:	ea000049 	b	c7e0e0e4 <readline_into_buffer+0x4e8>
				eol_num--;
			}
			break;
		case CTL_CH('k'):
			ERASE_TO_EOL();
c7e0dfbc:	e59d301c 	ldr	r3, [sp, #28]
c7e0dfc0:	e59d1018 	ldr	r1, [sp, #24]
c7e0dfc4:	e1530001 	cmp	r3, r1
c7e0dfc8:	2affff42 	bcs	c7e0dcd8 <readline_into_buffer+0xdc>
c7e0dfcc:	e0631001 	rsb	r1, r3, r1
c7e0dfd0:	e59f04c8 	ldr	r0, [pc, #1224]	; c7e0e4a0 <readline_into_buffer+0x8a4>
c7e0dfd4:	e59f24c8 	ldr	r2, [pc, #1224]	; c7e0e4a4 <readline_into_buffer+0x8a8>
c7e0dfd8:	ebffea9e 	bl	c7e08a58 <printf>
c7e0dfdc:	e3a00008 	mov	r0, #8	; 0x8
c7e0dfe0:	ebffeb2c 	bl	c7e08c98 <putc>
c7e0dfe4:	e59d3018 	ldr	r3, [sp, #24]
c7e0dfe8:	e59d201c 	ldr	r2, [sp, #28]
c7e0dfec:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0dff0:	e1530002 	cmp	r3, r2
c7e0dff4:	e58d3018 	str	r3, [sp, #24]
c7e0dff8:	8afffff7 	bhi	c7e0dfdc <readline_into_buffer+0x3e0>
c7e0dffc:	eaffff35 	b	c7e0dcd8 <readline_into_buffer+0xdc>
			break;
		case CTL_CH('e'):
			REFRESH_TO_EOL();
c7e0e000:	e59d301c 	ldr	r3, [sp, #28]
c7e0e004:	e59d1018 	ldr	r1, [sp, #24]
c7e0e008:	e1530001 	cmp	r3, r1
c7e0e00c:	2affff31 	bcs	c7e0dcd8 <readline_into_buffer+0xdc>
c7e0e010:	e0631001 	rsb	r1, r3, r1
c7e0e014:	e08a2003 	add	r2, sl, r3
c7e0e018:	e59f047c 	ldr	r0, [pc, #1148]	; c7e0e49c <readline_into_buffer+0x8a0>
c7e0e01c:	ebffea8d 	bl	c7e08a58 <printf>
c7e0e020:	ea000088 	b	c7e0e248 <readline_into_buffer+0x64c>
		case CTL_CH('o'):
			insert = !insert;
			break;
		case CTL_CH('x'):
		case CTL_CH('u'):
			BEGINNING_OF_LINE();
c7e0e024:	ebffeb1b 	bl	c7e08c98 <putc>
c7e0e028:	e59d301c 	ldr	r3, [sp, #28]
c7e0e02c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0e030:	e58d301c 	str	r3, [sp, #28]
c7e0e034:	e59d301c 	ldr	r3, [sp, #28]
c7e0e038:	e3a00008 	mov	r0, #8	; 0x8
c7e0e03c:	e3530000 	cmp	r3, #0	; 0x0
c7e0e040:	1afffff7 	bne	c7e0e024 <readline_into_buffer+0x428>
			ERASE_TO_EOL();
c7e0e044:	e59d1018 	ldr	r1, [sp, #24]
c7e0e048:	e3510000 	cmp	r1, #0	; 0x0
c7e0e04c:	0affff21 	beq	c7e0dcd8 <readline_into_buffer+0xdc>
c7e0e050:	e59f0448 	ldr	r0, [pc, #1096]	; c7e0e4a0 <readline_into_buffer+0x8a4>
c7e0e054:	e59f2448 	ldr	r2, [pc, #1096]	; c7e0e4a4 <readline_into_buffer+0x8a8>
c7e0e058:	ebffea7e 	bl	c7e08a58 <printf>
c7e0e05c:	e3a00008 	mov	r0, #8	; 0x8
c7e0e060:	ebffeb0c 	bl	c7e08c98 <putc>
c7e0e064:	e59d3018 	ldr	r3, [sp, #24]
c7e0e068:	e59d201c 	ldr	r2, [sp, #28]
c7e0e06c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0e070:	e1530002 	cmp	r3, r2
c7e0e074:	e58d3018 	str	r3, [sp, #24]
c7e0e078:	8afffff7 	bhi	c7e0e05c <readline_into_buffer+0x460>
c7e0e07c:	eaffff15 	b	c7e0dcd8 <readline_into_buffer+0xdc>
			break;
		case DEL:
		case DEL7:
		case 8:
			if (num) {
c7e0e080:	e59d001c 	ldr	r0, [sp, #28]
c7e0e084:	e3500000 	cmp	r0, #0	; 0x0
c7e0e088:	0affff12 	beq	c7e0dcd8 <readline_into_buffer+0xdc>
				wlen = eol_num - num;
c7e0e08c:	e59d2018 	ldr	r2, [sp, #24]
				num--;
c7e0e090:	e2403001 	sub	r3, r0, #1	; 0x1
			break;
		case DEL:
		case DEL7:
		case 8:
			if (num) {
				wlen = eol_num - num;
c7e0e094:	e0605002 	rsb	r5, r0, r2
				num--;
				memmove(&buf[num], &buf[num+1], wlen);
c7e0e098:	e08a1000 	add	r1, sl, r0
c7e0e09c:	e1a02005 	mov	r2, r5
c7e0e0a0:	e08a0003 	add	r0, sl, r3
		case DEL:
		case DEL7:
		case 8:
			if (num) {
				wlen = eol_num - num;
				num--;
c7e0e0a4:	e58d301c 	str	r3, [sp, #28]
				memmove(&buf[num], &buf[num+1], wlen);
c7e0e0a8:	eb005304 	bl	c7e22cc0 <memmove>
				getcmd_putch(CTL_BACKSPACE);
c7e0e0ac:	e3a00008 	mov	r0, #8	; 0x8
c7e0e0b0:	ebffeaf8 	bl	c7e08c98 <putc>
				putnstr(buf + num, wlen);
c7e0e0b4:	e59d201c 	ldr	r2, [sp, #28]
c7e0e0b8:	e59f03dc 	ldr	r0, [pc, #988]	; c7e0e49c <readline_into_buffer+0x8a0>
c7e0e0bc:	e08a2002 	add	r2, sl, r2
c7e0e0c0:	e1a01005 	mov	r1, r5
c7e0e0c4:	ebffea63 	bl	c7e08a58 <printf>
				getcmd_putch(' ');
c7e0e0c8:	e3a00020 	mov	r0, #32	; 0x20
c7e0e0cc:	ebffeaf1 	bl	c7e08c98 <putc>
				do {
					getcmd_putch(CTL_BACKSPACE);
				} while (wlen--);
c7e0e0d0:	e2455001 	sub	r5, r5, #1	; 0x1
				memmove(&buf[num], &buf[num+1], wlen);
				getcmd_putch(CTL_BACKSPACE);
				putnstr(buf + num, wlen);
				getcmd_putch(' ');
				do {
					getcmd_putch(CTL_BACKSPACE);
c7e0e0d4:	e3a00008 	mov	r0, #8	; 0x8
c7e0e0d8:	ebffeaee 	bl	c7e08c98 <putc>
				} while (wlen--);
c7e0e0dc:	e3750001 	cmn	r5, #1	; 0x1
c7e0e0e0:	1afffffa 	bne	c7e0e0d0 <readline_into_buffer+0x4d4>
				eol_num--;
c7e0e0e4:	e59d3018 	ldr	r3, [sp, #24]
c7e0e0e8:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0e0ec:	e58d3018 	str	r3, [sp, #24]
c7e0e0f0:	eafffef8 	b	c7e0dcd8 <readline_into_buffer+0xdc>
static char* hist_prev(void)
{
	char *ret;
	int old_cur;

	if (hist_cur < 0)
c7e0e0f4:	e59f2398 	ldr	r2, [pc, #920]	; c7e0e494 <readline_into_buffer+0x898>
c7e0e0f8:	e5921000 	ldr	r1, [r2]
c7e0e0fc:	e3510000 	cmp	r1, #0	; 0x0
c7e0e100:	ba00000c 	blt	c7e0e138 <readline_into_buffer+0x53c>
		return NULL;

	old_cur = hist_cur;
	if (--hist_cur < 0)
c7e0e104:	e2413001 	sub	r3, r1, #1	; 0x1
c7e0e108:	e3730001 	cmn	r3, #1	; 0x1
c7e0e10c:	e5823000 	str	r3, [r2]
		hist_cur = hist_max;
c7e0e110:	059f3378 	ldreq	r3, [pc, #888]	; c7e0e490 <readline_into_buffer+0x894>

	if (hist_cur == hist_add_idx) {
c7e0e114:	e59f0378 	ldr	r0, [pc, #888]	; c7e0e494 <readline_into_buffer+0x898>
	if (hist_cur < 0)
		return NULL;

	old_cur = hist_cur;
	if (--hist_cur < 0)
		hist_cur = hist_max;
c7e0e118:	05933004 	ldreq	r3, [r3, #4]
c7e0e11c:	05823000 	streq	r3, [r2]

	if (hist_cur == hist_add_idx) {
c7e0e120:	e59f3368 	ldr	r3, [pc, #872]	; c7e0e490 <readline_into_buffer+0x894>
c7e0e124:	e5902000 	ldr	r2, [r0]
c7e0e128:	e5933008 	ldr	r3, [r3, #8]
c7e0e12c:	e1520003 	cmp	r2, r3
c7e0e130:	1a000017 	bne	c7e0e194 <readline_into_buffer+0x598>
		hist_cur = old_cur;
c7e0e134:	e5801000 	str	r1, [r0]
c7e0e138:	e3a05000 	mov	r5, #0	; 0x0
c7e0e13c:	ea000019 	b	c7e0e1a8 <readline_into_buffer+0x5ac>

static char* hist_next(void)
{
	char *ret;

	if (hist_cur < 0)
c7e0e140:	e59f034c 	ldr	r0, [pc, #844]	; c7e0e494 <readline_into_buffer+0x898>
c7e0e144:	e5901000 	ldr	r1, [r0]
c7e0e148:	e3510000 	cmp	r1, #0	; 0x0
c7e0e14c:	bafffff9 	blt	c7e0e138 <readline_into_buffer+0x53c>
		return NULL;

	if (hist_cur == hist_add_idx)
c7e0e150:	e59f2338 	ldr	r2, [pc, #824]	; c7e0e490 <readline_into_buffer+0x894>
c7e0e154:	e5923008 	ldr	r3, [r2, #8]
c7e0e158:	e1510003 	cmp	r1, r3
c7e0e15c:	0afffff5 	beq	c7e0e138 <readline_into_buffer+0x53c>
		return NULL;

	if (++hist_cur > hist_max)
c7e0e160:	e5922004 	ldr	r2, [r2, #4]
c7e0e164:	e2813001 	add	r3, r1, #1	; 0x1
c7e0e168:	e1530002 	cmp	r3, r2
c7e0e16c:	e5803000 	str	r3, [r0]
		hist_cur = 0;
c7e0e170:	c3a03000 	movgt	r3, #0	; 0x0
c7e0e174:	c5803000 	strgt	r3, [r0]

	if (hist_cur == hist_add_idx) {
c7e0e178:	e59f3314 	ldr	r3, [pc, #788]	; c7e0e494 <readline_into_buffer+0x898>
c7e0e17c:	e5932000 	ldr	r2, [r3]
c7e0e180:	e59f3308 	ldr	r3, [pc, #776]	; c7e0e490 <readline_into_buffer+0x894>
c7e0e184:	e5933008 	ldr	r3, [r3, #8]
c7e0e188:	e1520003 	cmp	r2, r3
c7e0e18c:	059f5310 	ldreq	r5, [pc, #784]	; c7e0e4a4 <readline_into_buffer+0x8a8>
c7e0e190:	0a00000c 	beq	c7e0e1c8 <readline_into_buffer+0x5cc>
		ret = "";
	} else
		ret = hist_list[hist_cur];
c7e0e194:	e59f330c 	ldr	r3, [pc, #780]	; c7e0e4a8 <readline_into_buffer+0x8ac>
c7e0e198:	e0833102 	add	r3, r3, r2, lsl #2
c7e0e19c:	e5135bd4 	ldr	r5, [r3, #-3028]
			if (ichar == CTL_CH('p'))
				hline = hist_prev();
			else
				hline = hist_next();

			if (!hline) {
c7e0e1a0:	e3550000 	cmp	r5, #0	; 0x0
c7e0e1a4:	1a000007 	bne	c7e0e1c8 <readline_into_buffer+0x5cc>
				getcmd_cbeep();
c7e0e1a8:	e3a00007 	mov	r0, #7	; 0x7
c7e0e1ac:	ebffeab9 	bl	c7e08c98 <putc>
c7e0e1b0:	e1a07005 	mov	r7, r5
c7e0e1b4:	eafffec7 	b	c7e0dcd8 <readline_into_buffer+0xdc>
				continue;
			}

			/* nuke the current line */
			/* first, go home */
			BEGINNING_OF_LINE();
c7e0e1b8:	ebffeab6 	bl	c7e08c98 <putc>
c7e0e1bc:	e59d301c 	ldr	r3, [sp, #28]
c7e0e1c0:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0e1c4:	e58d301c 	str	r3, [sp, #28]
c7e0e1c8:	e59d301c 	ldr	r3, [sp, #28]
c7e0e1cc:	e3a00008 	mov	r0, #8	; 0x8
c7e0e1d0:	e3530000 	cmp	r3, #0	; 0x0
c7e0e1d4:	1afffff7 	bne	c7e0e1b8 <readline_into_buffer+0x5bc>

			/* erase to end of line */
			ERASE_TO_EOL();
c7e0e1d8:	e59d1018 	ldr	r1, [sp, #24]
c7e0e1dc:	e3510000 	cmp	r1, #0	; 0x0
c7e0e1e0:	0a00000a 	beq	c7e0e210 <readline_into_buffer+0x614>
c7e0e1e4:	e59f02b4 	ldr	r0, [pc, #692]	; c7e0e4a0 <readline_into_buffer+0x8a4>
c7e0e1e8:	e59f22b4 	ldr	r2, [pc, #692]	; c7e0e4a4 <readline_into_buffer+0x8a8>
c7e0e1ec:	ebffea19 	bl	c7e08a58 <printf>
c7e0e1f0:	e3a00008 	mov	r0, #8	; 0x8
c7e0e1f4:	ebffeaa7 	bl	c7e08c98 <putc>
c7e0e1f8:	e59d3018 	ldr	r3, [sp, #24]
c7e0e1fc:	e59d201c 	ldr	r2, [sp, #28]
c7e0e200:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0e204:	e1530002 	cmp	r3, r2
c7e0e208:	e58d3018 	str	r3, [sp, #24]
c7e0e20c:	8afffff7 	bhi	c7e0e1f0 <readline_into_buffer+0x5f4>

			/* copy new line into place and display */
			strcpy(buf, hline);
c7e0e210:	e1a01005 	mov	r1, r5
c7e0e214:	e1a0000a 	mov	r0, sl
c7e0e218:	eb005159 	bl	c7e22784 <strcpy>
			eol_num = strlen(buf);
c7e0e21c:	e1a0000a 	mov	r0, sl
c7e0e220:	eb0051c4 	bl	c7e22938 <strlen>
			REFRESH_TO_EOL();
c7e0e224:	e59d301c 	ldr	r3, [sp, #28]
			/* erase to end of line */
			ERASE_TO_EOL();

			/* copy new line into place and display */
			strcpy(buf, hline);
			eol_num = strlen(buf);
c7e0e228:	e58d0018 	str	r0, [sp, #24]
			REFRESH_TO_EOL();
c7e0e22c:	e1530000 	cmp	r3, r0
c7e0e230:	2afffea7 	bcs	c7e0dcd4 <readline_into_buffer+0xd8>
c7e0e234:	e0631000 	rsb	r1, r3, r0
c7e0e238:	e08a2003 	add	r2, sl, r3
c7e0e23c:	e59f0258 	ldr	r0, [pc, #600]	; c7e0e49c <readline_into_buffer+0x8a0>
c7e0e240:	ebffea04 	bl	c7e08a58 <printf>
c7e0e244:	e3a07000 	mov	r7, #0	; 0x0
c7e0e248:	e59d3018 	ldr	r3, [sp, #24]
c7e0e24c:	e58d301c 	str	r3, [sp, #28]
c7e0e250:	eafffea0 	b	c7e0dcd8 <readline_into_buffer+0xdc>
			}
			break;
		}
#endif
		default:
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
c7e0e254:	e3a0cc01 	mov	ip, #256	; 0x100
c7e0e258:	e1a0000e 	mov	r0, lr
c7e0e25c:	e1a01009 	mov	r1, r9
c7e0e260:	e28d201c 	add	r2, sp, #28	; 0x1c
c7e0e264:	e28d3018 	add	r3, sp, #24	; 0x18
c7e0e268:	e88d1400 	stm	sp, {sl, ip}
c7e0e26c:	ebfffe12 	bl	c7e0dabc <cread_add_char>
c7e0e270:	eafffe98 	b	c7e0dcd8 <readline_into_buffer+0xdc>
	}
}

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);
c7e0e274:	e59f5214 	ldr	r5, [pc, #532]	; c7e0e490 <readline_into_buffer+0x894>
c7e0e278:	e59f3228 	ldr	r3, [pc, #552]	; c7e0e4a8 <readline_into_buffer+0x8ac>
c7e0e27c:	e5952008 	ldr	r2, [r5, #8]
c7e0e280:	e1a0100a 	mov	r1, sl
c7e0e284:	e0833102 	add	r3, r3, r2, lsl #2
c7e0e288:	e5130bd4 	ldr	r0, [r3, #-3028]
c7e0e28c:	eb00513c 	bl	c7e22784 <strcpy>

	if (++hist_add_idx >= HIST_MAX)
c7e0e290:	e995000c 	ldmib	r5, {r2, r3}
c7e0e294:	e2833001 	add	r3, r3, #1	; 0x1
		hist_add_idx = 0;
c7e0e298:	e3530013 	cmp	r3, #19	; 0x13
c7e0e29c:	c3a03000 	movgt	r3, #0	; 0x0

	if (hist_add_idx > hist_max)
c7e0e2a0:	e1530002 	cmp	r3, r2
		hist_max = hist_add_idx;

	hist_num++;
c7e0e2a4:	e59f21e4 	ldr	r2, [pc, #484]	; c7e0e490 <readline_into_buffer+0x894>
static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
		hist_add_idx = 0;
c7e0e2a8:	e5853008 	str	r3, [r5, #8]

	if (hist_add_idx > hist_max)
		hist_max = hist_add_idx;
c7e0e2ac:	c5853004 	strgt	r3, [r5, #4]

	hist_num++;
c7e0e2b0:	e592300c 	ldr	r3, [r2, #12]
c7e0e2b4:	e2833001 	add	r3, r3, #1	; 0x1
c7e0e2b8:	e582300c 	str	r3, [r2, #12]
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
		cread_add_to_hist(buf);
	hist_cur = hist_add_idx;
c7e0e2bc:	e59f31cc 	ldr	r3, [pc, #460]	; c7e0e490 <readline_into_buffer+0x894>

		if (prompt)
			puts (prompt);

		rc = cread_line(prompt, p, &len, timeout);
		return rc < 0 ? rc : len;
c7e0e2c0:	e1a00006 	mov	r0, r6
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
		cread_add_to_hist(buf);
	hist_cur = hist_add_idx;
c7e0e2c4:	e5932008 	ldr	r2, [r3, #8]
c7e0e2c8:	e59f31c4 	ldr	r3, [pc, #452]	; c7e0e494 <readline_into_buffer+0x898>
c7e0e2cc:	e5832000 	str	r2, [r3]
c7e0e2d0:	ea00006c 	b	c7e0e488 <readline_into_buffer+0x88c>

		if (prompt)
			puts (prompt);

		rc = cread_line(prompt, p, &len, timeout);
		return rc < 0 ? rc : len;
c7e0e2d4:	e3e00001 	mvn	r0, #1	; 0x1
c7e0e2d8:	ea00006a 	b	c7e0e488 <readline_into_buffer+0x88c>
	int	plen = 0;			/* prompt length	*/
	int	col;				/* output column cnt	*/
	char	c;

	/* print prompt */
	if (prompt) {
c7e0e2dc:	e3500000 	cmp	r0, #0	; 0x0
		return rc < 0 ? rc : len;

	} else {
#endif	/* CONFIG_CMDLINE_EDITING */
	char * p_buf = p;
	int	n = 0;				/* buffer index		*/
c7e0e2e0:	e58d3024 	str	r3, [sp, #36]
	int	plen = 0;			/* prompt length	*/
	int	col;				/* output column cnt	*/
	char	c;

	/* print prompt */
	if (prompt) {
c7e0e2e4:	01a07000 	moveq	r7, r0
c7e0e2e8:	0a000003 	beq	c7e0e2fc <readline_into_buffer+0x700>
		plen = strlen (prompt);
c7e0e2ec:	eb005191 	bl	c7e22938 <strlen>
c7e0e2f0:	e1a07000 	mov	r7, r0
		puts (prompt);
c7e0e2f4:	e1a00005 	mov	r0, r5
c7e0e2f8:	ebffe9bb 	bl	c7e089ec <puts>
	}
	col = plen;
c7e0e2fc:	e58d7020 	str	r7, [sp, #32]
c7e0e300:	e1a0600a 	mov	r6, sl
		while (!tstc()) {
			show_activity(0);
			WATCHDOG_RESET();
		}
#endif
		c = getc();
c7e0e304:	ebffea76 	bl	c7e08ce4 <getc>
c7e0e308:	e20050ff 	and	r5, r0, #255	; 0xff

		/*
		 * Special character handling
		 */
		switch (c) {
c7e0e30c:	e355000a 	cmp	r5, #10	; 0xa
c7e0e310:	0a000012 	beq	c7e0e360 <readline_into_buffer+0x764>
c7e0e314:	8a000006 	bhi	c7e0e334 <readline_into_buffer+0x738>
c7e0e318:	e3550003 	cmp	r5, #3	; 0x3
c7e0e31c:	0a000015 	beq	c7e0e378 <readline_into_buffer+0x77c>
c7e0e320:	e3550008 	cmp	r5, #8	; 0x8
c7e0e324:	0a000034 	beq	c7e0e3fc <readline_into_buffer+0x800>
c7e0e328:	e3550000 	cmp	r5, #0	; 0x0
c7e0e32c:	0afffff4 	beq	c7e0e304 <readline_into_buffer+0x708>
c7e0e330:	ea000039 	b	c7e0e41c <readline_into_buffer+0x820>
c7e0e334:	e3550015 	cmp	r5, #21	; 0x15
c7e0e338:	0a000016 	beq	c7e0e398 <readline_into_buffer+0x79c>
c7e0e33c:	8a000002 	bhi	c7e0e34c <readline_into_buffer+0x750>
c7e0e340:	e355000d 	cmp	r5, #13	; 0xd
c7e0e344:	1a000034 	bne	c7e0e41c <readline_into_buffer+0x820>
c7e0e348:	ea000004 	b	c7e0e360 <readline_into_buffer+0x764>
c7e0e34c:	e3550017 	cmp	r5, #23	; 0x17
c7e0e350:	0a000017 	beq	c7e0e3b4 <readline_into_buffer+0x7b8>
c7e0e354:	e355007f 	cmp	r5, #127	; 0x7f
c7e0e358:	1a00002f 	bne	c7e0e41c <readline_into_buffer+0x820>
c7e0e35c:	ea000026 	b	c7e0e3fc <readline_into_buffer+0x800>
		case '\r':				/* Enter		*/
		case '\n':
			*p = '\0';
c7e0e360:	e3a03000 	mov	r3, #0	; 0x0
			puts ("\r\n");
c7e0e364:	e59f0140 	ldr	r0, [pc, #320]	; c7e0e4ac <readline_into_buffer+0x8b0>
		 * Special character handling
		 */
		switch (c) {
		case '\r':				/* Enter		*/
		case '\n':
			*p = '\0';
c7e0e368:	e5c63000 	strb	r3, [r6]
			puts ("\r\n");
c7e0e36c:	ebffe99e 	bl	c7e089ec <puts>
			return (p - p_buf);
c7e0e370:	e06a0006 	rsb	r0, sl, r6
c7e0e374:	ea000043 	b	c7e0e488 <readline_into_buffer+0x88c>

		case '\0':				/* nul			*/
			continue;

		case 0x03:				/* ^C - break		*/
			p_buf[0] = '\0';	/* discard input */
c7e0e378:	e3a03000 	mov	r3, #0	; 0x0
c7e0e37c:	e5ca3000 	strb	r3, [sl]
c7e0e380:	e3e00000 	mvn	r0, #0	; 0x0
c7e0e384:	ea00003f 	b	c7e0e488 <readline_into_buffer+0x88c>
			return (-1);

		case 0x15:				/* ^U - erase line	*/
			while (col > plen) {
				puts (erase_seq);
c7e0e388:	ebffe997 	bl	c7e089ec <puts>
				--col;
c7e0e38c:	e59d3020 	ldr	r3, [sp, #32]
c7e0e390:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0e394:	e58d3020 	str	r3, [sp, #32]
		case 0x03:				/* ^C - break		*/
			p_buf[0] = '\0';	/* discard input */
			return (-1);

		case 0x15:				/* ^U - erase line	*/
			while (col > plen) {
c7e0e398:	e59d3020 	ldr	r3, [sp, #32]
				puts (erase_seq);
c7e0e39c:	e59f010c 	ldr	r0, [pc, #268]	; c7e0e4b0 <readline_into_buffer+0x8b4>
		case 0x03:				/* ^C - break		*/
			p_buf[0] = '\0';	/* discard input */
			return (-1);

		case 0x15:				/* ^U - erase line	*/
			while (col > plen) {
c7e0e3a0:	e1530007 	cmp	r3, r7
c7e0e3a4:	cafffff7 	bgt	c7e0e388 <readline_into_buffer+0x78c>
				puts (erase_seq);
				--col;
			}
			p = p_buf;
			n = 0;
c7e0e3a8:	e3a03000 	mov	r3, #0	; 0x0
c7e0e3ac:	e58d3024 	str	r3, [sp, #36]
c7e0e3b0:	eaffffd2 	b	c7e0e300 <readline_into_buffer+0x704>
			continue;

		case 0x17:				/* ^W - erase word	*/
			p=delete_char(p_buf, p, &col, &n, plen);
c7e0e3b4:	e1a01006 	mov	r1, r6
c7e0e3b8:	e1a0000a 	mov	r0, sl
c7e0e3bc:	e28d2020 	add	r2, sp, #32	; 0x20
c7e0e3c0:	e28d3024 	add	r3, sp, #36	; 0x24
			while ((n > 0) && (*p != ' ')) {
				p=delete_char(p_buf, p, &col, &n, plen);
c7e0e3c4:	e58d7000 	str	r7, [sp]
c7e0e3c8:	ebfffd84 	bl	c7e0d9e0 <delete_char>
			n = 0;
			continue;

		case 0x17:				/* ^W - erase word	*/
			p=delete_char(p_buf, p, &col, &n, plen);
			while ((n > 0) && (*p != ' ')) {
c7e0e3cc:	e59dc024 	ldr	ip, [sp, #36]
				p=delete_char(p_buf, p, &col, &n, plen);
c7e0e3d0:	e1a06000 	mov	r6, r0
			n = 0;
			continue;

		case 0x17:				/* ^W - erase word	*/
			p=delete_char(p_buf, p, &col, &n, plen);
			while ((n > 0) && (*p != ' ')) {
c7e0e3d4:	e35c0000 	cmp	ip, #0	; 0x0
				p=delete_char(p_buf, p, &col, &n, plen);
c7e0e3d8:	e1a01000 	mov	r1, r0
c7e0e3dc:	e28d2020 	add	r2, sp, #32	; 0x20
c7e0e3e0:	e1a0000a 	mov	r0, sl
c7e0e3e4:	e28d3024 	add	r3, sp, #36	; 0x24
			n = 0;
			continue;

		case 0x17:				/* ^W - erase word	*/
			p=delete_char(p_buf, p, &col, &n, plen);
			while ((n > 0) && (*p != ' ')) {
c7e0e3e8:	daffffc5 	ble	c7e0e304 <readline_into_buffer+0x708>
c7e0e3ec:	e5d6c000 	ldrb	ip, [r6]
c7e0e3f0:	e35c0020 	cmp	ip, #32	; 0x20
c7e0e3f4:	1afffff2 	bne	c7e0e3c4 <readline_into_buffer+0x7c8>
c7e0e3f8:	eaffffc1 	b	c7e0e304 <readline_into_buffer+0x708>
			}
			continue;

		case 0x08:				/* ^H  - backspace	*/
		case 0x7F:				/* DEL - backspace	*/
			p=delete_char(p_buf, p, &col, &n, plen);
c7e0e3fc:	e1a01006 	mov	r1, r6
c7e0e400:	e1a0000a 	mov	r0, sl
c7e0e404:	e28d2020 	add	r2, sp, #32	; 0x20
c7e0e408:	e28d3024 	add	r3, sp, #36	; 0x24
c7e0e40c:	e58d7000 	str	r7, [sp]
c7e0e410:	ebfffd72 	bl	c7e0d9e0 <delete_char>
c7e0e414:	e1a06000 	mov	r6, r0
c7e0e418:	eaffffb9 	b	c7e0e304 <readline_into_buffer+0x708>

		default:
			/*
			 * Must be a normal character then
			 */
			if (n < CONFIG_SYS_CBSIZE-2) {
c7e0e41c:	e59d3024 	ldr	r3, [sp, #36]
c7e0e420:	e35300fd 	cmp	r3, #253	; 0xfd
c7e0e424:	ca000014 	bgt	c7e0e47c <readline_into_buffer+0x880>
				if (c == '\t') {	/* expand TABs		*/
c7e0e428:	e3550009 	cmp	r5, #9	; 0x9
c7e0e42c:	e59d3020 	ldr	r3, [sp, #32]
c7e0e430:	1a000008 	bne	c7e0e458 <readline_into_buffer+0x85c>
					if (cmd_auto_complete(prompt, console_buffer, &n, &col)) {
						p = p_buf + n;	/* reset */
						continue;
					}
#endif
					puts (tab_seq+(col&07));
c7e0e434:	e59f0078 	ldr	r0, [pc, #120]	; c7e0e4b4 <readline_into_buffer+0x8b8>
c7e0e438:	e2033007 	and	r3, r3, #7	; 0x7
c7e0e43c:	e0800003 	add	r0, r0, r3
c7e0e440:	ebffe969 	bl	c7e089ec <puts>
					col += 8 - (col&07);
c7e0e444:	e59d3020 	ldr	r3, [sp, #32]
c7e0e448:	e3c33007 	bic	r3, r3, #7	; 0x7
c7e0e44c:	e2833008 	add	r3, r3, #8	; 0x8
c7e0e450:	e58d3020 	str	r3, [sp, #32]
c7e0e454:	ea000003 	b	c7e0e468 <readline_into_buffer+0x86c>
				} else {
					++col;		/* echo input		*/
c7e0e458:	e2833001 	add	r3, r3, #1	; 0x1
					putc (c);
c7e0e45c:	e1a00005 	mov	r0, r5
					}
#endif
					puts (tab_seq+(col&07));
					col += 8 - (col&07);
				} else {
					++col;		/* echo input		*/
c7e0e460:	e58d3020 	str	r3, [sp, #32]
					putc (c);
c7e0e464:	ebffea0b 	bl	c7e08c98 <putc>
				}
				*p++ = c;
c7e0e468:	e4c65001 	strb	r5, [r6], #1
				++n;
c7e0e46c:	e59d3024 	ldr	r3, [sp, #36]
c7e0e470:	e2833001 	add	r3, r3, #1	; 0x1
c7e0e474:	e58d3024 	str	r3, [sp, #36]
c7e0e478:	eaffffa1 	b	c7e0e304 <readline_into_buffer+0x708>
			} else {			/* Buffer full		*/
				putc ('\a');
c7e0e47c:	e3a00007 	mov	r0, #7	; 0x7
c7e0e480:	ebffea04 	bl	c7e08c98 <putc>
c7e0e484:	eaffff9e 	b	c7e0e304 <readline_into_buffer+0x708>
		}
	}
#ifdef CONFIG_CMDLINE_EDITING
	}
#endif
}
c7e0e488:	e28dd028 	add	sp, sp, #40	; 0x28
c7e0e48c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0e490:	c7e40448 	.word	0xc7e40448
c7e0e494:	c7e394e8 	.word	0xc7e394e8
c7e0e498:	c7e4186c 	.word	0xc7e4186c
c7e0e49c:	c7e327d9 	.word	0xc7e327d9
c7e0e4a0:	c7e327f9 	.word	0xc7e327f9
c7e0e4a4:	c7e2fef0 	.word	0xc7e2fef0
c7e0e4a8:	c7e42440 	.word	0xc7e42440
c7e0e4ac:	c7e327fd 	.word	0xc7e327fd
c7e0e4b0:	c7e2c5b4 	.word	0xc7e2c5b4
c7e0e4b4:	c7e2c5b8 	.word	0xc7e2c5b8

c7e0e4b8 <readline>:
{
	/*
	 * If console_buffer isn't 0-length the user will be prompted to modify
	 * it instead of entering it from scratch as desired.
	 */
	console_buffer[0] = '\0';
c7e0e4b8:	e59fc014 	ldr	ip, [pc, #20]	; c7e0e4d4 <readline+0x1c>
c7e0e4bc:	e3a03000 	mov	r3, #0	; 0x0

	return readline_into_buffer(prompt, console_buffer, 0);
c7e0e4c0:	e24c1d2e 	sub	r1, ip, #2944	; 0xb80
c7e0e4c4:	e2411004 	sub	r1, r1, #4	; 0x4
c7e0e4c8:	e1a02003 	mov	r2, r3
{
	/*
	 * If console_buffer isn't 0-length the user will be prompted to modify
	 * it instead of entering it from scratch as desired.
	 */
	console_buffer[0] = '\0';
c7e0e4cc:	e54c3b84 	strb	r3, [ip, #-2948]

	return readline_into_buffer(prompt, console_buffer, 0);
c7e0e4d0:	eafffdc9 	b	c7e0dbfc <readline_into_buffer>
c7e0e4d4:	c7e42440 	.word	0xc7e42440

c7e0e4d8 <main_loop>:
#endif	/* CONFIG_BOOTDELAY >= 0  */

/****************************************************************************/

void main_loop (void)
{
c7e0e4d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
		setenv ("ver", version_string);  /* set version variable */
	}
#endif /* CONFIG_VERSION_VARIABLE */

#ifdef CONFIG_SYS_HUSH_PARSER
	u_boot_hush_start ();
c7e0e4dc:	ebfff0e8 	bl	c7e0a884 <u_boot_hush_start>
#if defined(CONFIG_UPDATE_TFTP)
	update_tftp (0UL);
#endif /* CONFIG_UPDATE_TFTP */

#if defined(CONFIG_BOOTDELAY) && (CONFIG_BOOTDELAY >= 0)
	s = getenv ("bootdelay");
c7e0e4e0:	e59f00fc 	ldr	r0, [pc, #252]	; c7e0e5e4 <main_loop+0x10c>
c7e0e4e4:	ebffe2ec 	bl	c7e0709c <getenv>
	bootdelay = s ? (int)simple_strtol(s, NULL, 10) : CONFIG_BOOTDELAY;
c7e0e4e8:	e3500000 	cmp	r0, #0	; 0x0
c7e0e4ec:	03a05003 	moveq	r5, #3	; 0x3
c7e0e4f0:	0a000003 	beq	c7e0e504 <main_loop+0x2c>
c7e0e4f4:	e3a01000 	mov	r1, #0	; 0x0
c7e0e4f8:	e3a0200a 	mov	r2, #10	; 0xa
c7e0e4fc:	eb0052c5 	bl	c7e23018 <simple_strtol>
c7e0e500:	e1a05000 	mov	r5, r0
		        (unsigned)bootlimit);
		s = getenv ("altbootcmd");
	}
	else
#endif /* CONFIG_BOOTCOUNT_LIMIT */
		s = getenv ("bootcmd");
c7e0e504:	e59f00dc 	ldr	r0, [pc, #220]	; c7e0e5e8 <main_loop+0x110>
c7e0e508:	ebffe2e3 	bl	c7e0709c <getenv>

	debug ("### main_loop: bootcmd=\"%s\"\n", s ? s : "<UNDEFINED>");

	if (bootdelay != -1 && s && !abortboot(bootdelay)) {
c7e0e50c:	e3500000 	cmp	r0, #0	; 0x0
c7e0e510:	13750001 	cmnne	r5, #1	; 0x1
c7e0e514:	e1a07000 	mov	r7, r0
c7e0e518:	0a00002f 	beq	c7e0e5dc <main_loop+0x104>
	int abort = 0;

#ifdef CONFIG_MENUPROMPT
	printf(CONFIG_MENUPROMPT);
#else
	if (bootdelay >= 0)
c7e0e51c:	e3550000 	cmp	r5, #0	; 0x0
c7e0e520:	ba00000a 	blt	c7e0e550 <main_loop+0x78>
		printf("Hit any key to stop autoboot: %2d ", bootdelay);
c7e0e524:	e1a01005 	mov	r1, r5
c7e0e528:	e59f00bc 	ldr	r0, [pc, #188]	; c7e0e5ec <main_loop+0x114>
c7e0e52c:	ebffe949 	bl	c7e08a58 <printf>
	/*
	 * Check if key already pressed
	 * Don't check if bootdelay < 0
	 */
	if (bootdelay >= 0) {
		if (tstc()) {	/* we got a key press	*/
c7e0e530:	ebffe9e2 	bl	c7e08cc0 <tstc>
c7e0e534:	e3500000 	cmp	r0, #0	; 0x0
c7e0e538:	0a000004 	beq	c7e0e550 <main_loop+0x78>
			(void) getc();  /* consume input	*/
c7e0e53c:	ebffe9e8 	bl	c7e08ce4 <getc>
			puts ("\b\b\b 0");
c7e0e540:	e59f00a8 	ldr	r0, [pc, #168]	; c7e0e5f0 <main_loop+0x118>
c7e0e544:	ebffe928 	bl	c7e089ec <puts>
c7e0e548:	e3a04001 	mov	r4, #1	; 0x1
c7e0e54c:	ea000013 	b	c7e0e5a0 <main_loop+0xc8>
c7e0e550:	e3a04000 	mov	r4, #0	; 0x0
c7e0e554:	ea000011 	b	c7e0e5a0 <main_loop+0xc8>
c7e0e558:	e3a04000 	mov	r4, #0	; 0x0
		int i;

		--bootdelay;
		/* delay 100 * 10ms */
		for (i=0; !abort && i<100; ++i) {
			if (tstc()) {	/* we got a key press	*/
c7e0e55c:	ebffe9d7 	bl	c7e08cc0 <tstc>
c7e0e560:	e2506000 	subs	r6, r0, #0	; 0x0
	while ((bootdelay > 0) && (!abort)) {
		int i;

		--bootdelay;
		/* delay 100 * 10ms */
		for (i=0; !abort && i<100; ++i) {
c7e0e564:	e2844001 	add	r4, r4, #1	; 0x1
# else
				(void) getc();  /* consume input	*/
# endif
				break;
			}
			udelay(10000);
c7e0e568:	e59f0084 	ldr	r0, [pc, #132]	; c7e0e5f4 <main_loop+0x11c>
		int i;

		--bootdelay;
		/* delay 100 * 10ms */
		for (i=0; !abort && i<100; ++i) {
			if (tstc()) {	/* we got a key press	*/
c7e0e56c:	0a000003 	beq	c7e0e580 <main_loop+0xa8>
				abort  = 1;	/* don't auto boot	*/
				bootdelay = 0;	/* no more delay	*/
# ifdef CONFIG_MENUKEY
				menukey = getc();
# else
				(void) getc();  /* consume input	*/
c7e0e570:	ebffe9db 	bl	c7e08ce4 <getc>
c7e0e574:	e3a04001 	mov	r4, #1	; 0x1
c7e0e578:	e3a05000 	mov	r5, #0	; 0x0
c7e0e57c:	ea000004 	b	c7e0e594 <main_loop+0xbc>
# endif
				break;
			}
			udelay(10000);
c7e0e580:	eb005250 	bl	c7e22ec8 <udelay>
	while ((bootdelay > 0) && (!abort)) {
		int i;

		--bootdelay;
		/* delay 100 * 10ms */
		for (i=0; !abort && i<100; ++i) {
c7e0e584:	e3540064 	cmp	r4, #100	; 0x64
c7e0e588:	1afffff3 	bne	c7e0e55c <main_loop+0x84>
#endif

	while ((bootdelay > 0) && (!abort)) {
		int i;

		--bootdelay;
c7e0e58c:	e2455001 	sub	r5, r5, #1	; 0x1
c7e0e590:	e1a04006 	mov	r4, r6
				break;
			}
			udelay(10000);
		}

		printf("\b\b\b%2d ", bootdelay);
c7e0e594:	e59f005c 	ldr	r0, [pc, #92]	; c7e0e5f8 <main_loop+0x120>
c7e0e598:	e1a01005 	mov	r1, r5
c7e0e59c:	ebffe92d 	bl	c7e08a58 <printf>
			abort = 1;	/* don't auto boot	*/
		}
	}
#endif

	while ((bootdelay > 0) && (!abort)) {
c7e0e5a0:	e3550000 	cmp	r5, #0	; 0x0
c7e0e5a4:	d3a03000 	movle	r3, #0	; 0x0
c7e0e5a8:	c3a03001 	movgt	r3, #1	; 0x1
c7e0e5ac:	e3540000 	cmp	r4, #0	; 0x0
c7e0e5b0:	13a03000 	movne	r3, #0	; 0x0
c7e0e5b4:	e3530000 	cmp	r3, #0	; 0x0
c7e0e5b8:	1affffe6 	bne	c7e0e558 <main_loop+0x80>
		}

		printf("\b\b\b%2d ", bootdelay);
	}

	putc('\n');
c7e0e5bc:	e3a0000a 	mov	r0, #10	; 0xa
c7e0e5c0:	ebffe9b4 	bl	c7e08c98 <putc>
#endif /* CONFIG_BOOTCOUNT_LIMIT */
		s = getenv ("bootcmd");

	debug ("### main_loop: bootcmd=\"%s\"\n", s ? s : "<UNDEFINED>");

	if (bootdelay != -1 && s && !abortboot(bootdelay)) {
c7e0e5c4:	e3540000 	cmp	r4, #0	; 0x0
c7e0e5c8:	1a000003 	bne	c7e0e5dc <main_loop+0x104>
# ifdef CONFIG_AUTOBOOT_KEYED
		int prev = disable_ctrlc(1);	/* disable Control C checking */
# endif

		run_command_list(s, -1, 0);
c7e0e5cc:	e1a00007 	mov	r0, r7
c7e0e5d0:	e1a02004 	mov	r2, r4
c7e0e5d4:	e3e01000 	mvn	r1, #0	; 0x0
c7e0e5d8:	ebfffccb 	bl	c7e0d90c <run_command_list>

	/*
	 * Main Loop for Monitor Command Processing
	 */
#ifdef CONFIG_SYS_HUSH_PARSER
	parse_file_outer();
c7e0e5dc:	ebfff5c0 	bl	c7e0bce4 <parse_file_outer>
c7e0e5e0:	eafffffe 	b	c7e0e5e0 <main_loop+0x108>
c7e0e5e4:	c7e32800 	.word	0xc7e32800
c7e0e5e8:	c7e2e664 	.word	0xc7e2e664
c7e0e5ec:	c7e3280a 	.word	0xc7e3280a
c7e0e5f0:	c7e3282d 	.word	0xc7e3282d
c7e0e5f4:	00002710 	.word	0x00002710
c7e0e5f8:	c7e32833 	.word	0xc7e32833

c7e0e5fc <get_ram_size>:
 * Check memory range for valid RAM. A simple memory test determines
 * the actually available RAM size between addresses `base' and
 * `base + maxsize'.
 */
long get_ram_size(long *base, long maxsize)
{
c7e0e5fc:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	long           cnt;
	long           val;
	long           size;
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
c7e0e600:	e1a0c1a1 	lsr	ip, r1, #3
 * Check memory range for valid RAM. A simple memory test determines
 * the actually available RAM size between addresses `base' and
 * `base + maxsize'.
 */
long get_ram_size(long *base, long maxsize)
{
c7e0e604:	e1a06001 	mov	r6, r1
	long           cnt;
	long           val;
	long           size;
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
c7e0e608:	e1a0a121 	lsr	sl, r1, #2
 * Check memory range for valid RAM. A simple memory test determines
 * the actually available RAM size between addresses `base' and
 * `base + maxsize'.
 */
long get_ram_size(long *base, long maxsize)
{
c7e0e60c:	e24dd080 	sub	sp, sp, #128	; 0x80
c7e0e610:	e1a04000 	mov	r4, r0
	long           cnt;
	long           val;
	long           size;
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
c7e0e614:	e3a01000 	mov	r1, #0	; 0x0
c7e0e618:	ea000004 	b	c7e0e630 <get_ram_size+0x34>
		addr = base + cnt;	/* pointer arith! */
		sync ();
		save[i++] = *addr;
c7e0e61c:	e794210c 	ldr	r2, [r4, ip, lsl #2]
		sync ();
		*addr = ~cnt;
c7e0e620:	e784310c 	str	r3, [r4, ip, lsl #2]
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
		addr = base + cnt;	/* pointer arith! */
		sync ();
		save[i++] = *addr;
c7e0e624:	e78d2101 	str	r2, [sp, r1, lsl #2]
	long           cnt;
	long           val;
	long           size;
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
c7e0e628:	e1a0c0cc 	asr	ip, ip, #1
		addr = base + cnt;	/* pointer arith! */
		sync ();
		save[i++] = *addr;
c7e0e62c:	e2811001 	add	r1, r1, #1	; 0x1
	long           cnt;
	long           val;
	long           size;
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
c7e0e630:	e35c0000 	cmp	ip, #0	; 0x0
		addr = base + cnt;	/* pointer arith! */
		sync ();
		save[i++] = *addr;
		sync ();
		*addr = ~cnt;
c7e0e634:	e1e0300c 	mvn	r3, ip
c7e0e638:	e1a05101 	lsl	r5, r1, #2
	long           cnt;
	long           val;
	long           size;
	int            i = 0;

	for (cnt = (maxsize / sizeof (long)) >> 1; cnt > 0; cnt >>= 1) {
c7e0e63c:	1afffff6 	bne	c7e0e61c <get_ram_size+0x20>
		*addr = ~cnt;
	}

	addr = base;
	sync ();
	save[i] = *addr;
c7e0e640:	e5940000 	ldr	r0, [r4]
	sync ();
	*addr = 0;
c7e0e644:	e584c000 	str	ip, [r4]

	sync ();
	if ((val = *addr) != 0) {
c7e0e648:	e5943000 	ldr	r3, [r4]
		*addr = ~cnt;
	}

	addr = base;
	sync ();
	save[i] = *addr;
c7e0e64c:	e28dc080 	add	ip, sp, #128	; 0x80
c7e0e650:	e08c2005 	add	r2, ip, r5
	sync ();
	*addr = 0;

	sync ();
	if ((val = *addr) != 0) {
c7e0e654:	e3530000 	cmp	r3, #0	; 0x0
		*addr = ~cnt;
	}

	addr = base;
	sync ();
	save[i] = *addr;
c7e0e658:	e5020080 	str	r0, [r2, #-128]
	sync ();
	*addr = 0;

	sync ();
	if ((val = *addr) != 0) {
c7e0e65c:	008d7005 	addeq	r7, sp, r5
c7e0e660:	e1a0200d 	mov	r2, sp
c7e0e664:	03a00001 	moveq	r0, #1	; 0x1
c7e0e668:	0a00001f 	beq	c7e0e6ec <get_ram_size+0xf0>
		/* Restore the original data before leaving the function.
		 */
		sync ();
		*addr = save[i];
c7e0e66c:	e2413001 	sub	r3, r1, #1	; 0x1
c7e0e670:	e5840000 	str	r0, [r4]
c7e0e674:	e0822103 	add	r2, r2, r3, lsl #2
c7e0e678:	e3a01001 	mov	r1, #1	; 0x1
c7e0e67c:	ea000002 	b	c7e0e68c <get_ram_size+0x90>
		for (cnt = 1; cnt < maxsize / sizeof(long); cnt <<= 1) {
			addr  = base + cnt;
			sync ();
			*addr = save[--i];
c7e0e680:	e5923004 	ldr	r3, [r2, #4]
c7e0e684:	e7843101 	str	r3, [r4, r1, lsl #2]
	if ((val = *addr) != 0) {
		/* Restore the original data before leaving the function.
		 */
		sync ();
		*addr = save[i];
		for (cnt = 1; cnt < maxsize / sizeof(long); cnt <<= 1) {
c7e0e688:	e1a01081 	lsl	r1, r1, #1
c7e0e68c:	e151000a 	cmp	r1, sl
c7e0e690:	e2422004 	sub	r2, r2, #4	; 0x4
c7e0e694:	3afffff9 	bcc	c7e0e680 <get_ram_size+0x84>
c7e0e698:	e3a00000 	mov	r0, #0	; 0x0
c7e0e69c:	ea000018 	b	c7e0e704 <get_ram_size+0x108>
		return (0);
	}

	for (cnt = 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
		addr = base + cnt;	/* pointer arith! */
		val = *addr;
c7e0e6a0:	e7943100 	ldr	r3, [r4, r0, lsl #2]
		*addr = save[--i];
c7e0e6a4:	e5372004 	ldr	r2, [r7, #-4]!
		if (val != ~cnt) {
c7e0e6a8:	e153000c 	cmp	r3, ip
	}

	for (cnt = 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
		addr = base + cnt;	/* pointer arith! */
		val = *addr;
		*addr = save[--i];
c7e0e6ac:	e7842100 	str	r2, [r4, r0, lsl #2]
		if (val != ~cnt) {
c7e0e6b0:	0a00000c 	beq	c7e0e6e8 <get_ram_size+0xec>
			size = cnt * sizeof (long);
			/* Restore the original data before leaving the function.
			 */
			for (cnt <<= 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
c7e0e6b4:	e2412001 	sub	r2, r1, #1	; 0x1
c7e0e6b8:	e1a0300d 	mov	r3, sp
c7e0e6bc:	e0832102 	add	r2, r3, r2, lsl #2
c7e0e6c0:	e1a01005 	mov	r1, r5
c7e0e6c4:	ea000002 	b	c7e0e6d4 <get_ram_size+0xd8>
				addr  = base + cnt;
				*addr = save[--i];
c7e0e6c8:	e5923004 	ldr	r3, [r2, #4]
c7e0e6cc:	e7843101 	str	r3, [r4, r1, lsl #2]
		*addr = save[--i];
		if (val != ~cnt) {
			size = cnt * sizeof (long);
			/* Restore the original data before leaving the function.
			 */
			for (cnt <<= 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
c7e0e6d0:	e1a01081 	lsl	r1, r1, #1
c7e0e6d4:	e151000a 	cmp	r1, sl
c7e0e6d8:	e2422004 	sub	r2, r2, #4	; 0x4
c7e0e6dc:	3afffff9 	bcc	c7e0e6c8 <get_ram_size+0xcc>
	for (cnt = 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
		addr = base + cnt;	/* pointer arith! */
		val = *addr;
		*addr = save[--i];
		if (val != ~cnt) {
			size = cnt * sizeof (long);
c7e0e6e0:	e1a00100 	lsl	r0, r0, #2
c7e0e6e4:	ea000006 	b	c7e0e704 <get_ram_size+0x108>
			*addr = save[--i];
		}
		return (0);
	}

	for (cnt = 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
c7e0e6e8:	e1a00005 	mov	r0, r5
c7e0e6ec:	e150000a 	cmp	r0, sl
		addr = base + cnt;	/* pointer arith! */
		val = *addr;
		*addr = save[--i];
		if (val != ~cnt) {
c7e0e6f0:	e1e0c000 	mvn	ip, r0
	}

	for (cnt = 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
		addr = base + cnt;	/* pointer arith! */
		val = *addr;
		*addr = save[--i];
c7e0e6f4:	e2411001 	sub	r1, r1, #1	; 0x1
c7e0e6f8:	e1a05080 	lsl	r5, r0, #1
			*addr = save[--i];
		}
		return (0);
	}

	for (cnt = 1; cnt < maxsize / sizeof (long); cnt <<= 1) {
c7e0e6fc:	3affffe7 	bcc	c7e0e6a0 <get_ram_size+0xa4>
c7e0e700:	e1a00006 	mov	r0, r6
			return (size);
		}
	}

	return (maxsize);
}
c7e0e704:	e28dd080 	add	sp, sp, #128	; 0x80
c7e0e708:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

c7e0e70c <hex1_bin>:
	return (srec_type);
}

static int hex1_bin (char c)
{
	if (c >= '0' && c <= '9')
c7e0e70c:	e2402030 	sub	r2, r0, #48	; 0x30
c7e0e710:	e20230ff 	and	r3, r2, #255	; 0xff
c7e0e714:	e3530009 	cmp	r3, #9	; 0x9
		return (c - '0');
c7e0e718:	91a00002 	movls	r0, r2
	return (srec_type);
}

static int hex1_bin (char c)
{
	if (c >= '0' && c <= '9')
c7e0e71c:	912fff1e 	bxls	lr
		return (c - '0');
	if (c >= 'a' && c <= 'f')
c7e0e720:	e2403061 	sub	r3, r0, #97	; 0x61
c7e0e724:	e3530005 	cmp	r3, #5	; 0x5
		return (c + 10 - 'a');
c7e0e728:	92400057 	subls	r0, r0, #87	; 0x57

static int hex1_bin (char c)
{
	if (c >= '0' && c <= '9')
		return (c - '0');
	if (c >= 'a' && c <= 'f')
c7e0e72c:	912fff1e 	bxls	lr
		return (c + 10 - 'a');
	if (c >= 'A' && c <= 'F')
c7e0e730:	e2403041 	sub	r3, r0, #65	; 0x41
c7e0e734:	e3530005 	cmp	r3, #5	; 0x5
c7e0e738:	83e00000 	mvnhi	r0, #0	; 0x0
		return (c + 10 - 'A');
c7e0e73c:	92400037 	subls	r0, r0, #55	; 0x37
	return (-1);
}
c7e0e740:	e12fff1e 	bx	lr

c7e0e744 <hex2_bin>:

static int hex2_bin (char *s)
{
c7e0e744:	e92d4070 	push	{r4, r5, r6, lr}
c7e0e748:	e1a04000 	mov	r4, r0
	int i, j;

	if ((i = hex1_bin(*s++)) < 0) {
c7e0e74c:	e5d00000 	ldrb	r0, [r0]
c7e0e750:	ebffffed 	bl	c7e0e70c <hex1_bin>
c7e0e754:	e2505000 	subs	r5, r0, #0	; 0x0
c7e0e758:	ba000004 	blt	c7e0e770 <hex2_bin+0x2c>
		return (-1);
	}
	if ((j = hex1_bin(*s)) < 0) {
c7e0e75c:	e5d40001 	ldrb	r0, [r4, #1]
c7e0e760:	ebffffe9 	bl	c7e0e70c <hex1_bin>
c7e0e764:	e3500000 	cmp	r0, #0	; 0x0
		return (-1);
	}

	return ((i<<4) + j);
c7e0e768:	a0800205 	addge	r0, r0, r5, lsl #4
	int i, j;

	if ((i = hex1_bin(*s++)) < 0) {
		return (-1);
	}
	if ((j = hex1_bin(*s)) < 0) {
c7e0e76c:	a8bd8070 	popge	{r4, r5, r6, pc}
		return (-1);
	}

	return ((i<<4) + j);
c7e0e770:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e0e774:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0e778 <srec_decode>:

static int hex1_bin (char  c);
static int hex2_bin (char *s);

int srec_decode (char *input, int *count, ulong *addr, char *data)
{
c7e0e778:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e0e77c:	e1a0a001 	mov	sl, r1
c7e0e780:	e1a0b002 	mov	fp, r2
c7e0e784:	e58d3004 	str	r3, [sp, #4]
c7e0e788:	ea000003 	b	c7e0e79c <srec_decode+0x24>
	/* skip anything before 'S', and the 'S' itself.
	 * Return error if not found
	 */

	for (; *input; ++input) {
		if (*input == 'S') {		/* skip 'S' */
c7e0e78c:	e3530053 	cmp	r3, #83	; 0x53
			++input;
c7e0e790:	01a00002 	moveq	r0, r2
c7e0e794:	0a000004 	beq	c7e0e7ac <srec_decode+0x34>

	/* skip anything before 'S', and the 'S' itself.
	 * Return error if not found
	 */

	for (; *input; ++input) {
c7e0e798:	e1a00002 	mov	r0, r2
c7e0e79c:	e5d03000 	ldrb	r3, [r0]
c7e0e7a0:	e2802001 	add	r2, r0, #1	; 0x1
c7e0e7a4:	e3530000 	cmp	r3, #0	; 0x0
c7e0e7a8:	1afffff7 	bne	c7e0e78c <srec_decode+0x14>
		if (*input == 'S') {		/* skip 'S' */
			++input;
			break;
		}
	}
	if (*input == '\0') {			/* no more data?	*/
c7e0e7ac:	e5d04000 	ldrb	r4, [r0]
c7e0e7b0:	e3540000 	cmp	r4, #0	; 0x0
c7e0e7b4:	03a0600a 	moveq	r6, #10	; 0xa
c7e0e7b8:	0a000087 	beq	c7e0e9dc <srec_decode+0x264>
		return (SREC_EMPTY);
	}

	v = *input++;				/* record type		*/
c7e0e7bc:	e2805001 	add	r5, r0, #1	; 0x1

	if ((*count = hex2_bin(input)) < 0) {
c7e0e7c0:	e1a00005 	mov	r0, r5
c7e0e7c4:	ebffffde 	bl	c7e0e744 <hex2_bin>
c7e0e7c8:	e3500000 	cmp	r0, #0	; 0x0
c7e0e7cc:	e58a0000 	str	r0, [sl]
c7e0e7d0:	ba00007e 	blt	c7e0e9d0 <srec_decode+0x258>
	}

	chksum += *count;
	input  += 2;

	switch (v) {				/* record type		*/
c7e0e7d4:	e2443030 	sub	r3, r4, #48	; 0x30
c7e0e7d8:	e3530009 	cmp	r3, #9	; 0x9
c7e0e7dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e0e7e0:	ea00007c 	b	c7e0e9d8 <srec_decode+0x260>
c7e0e7e4:	c7e0e80c 	.word	0xc7e0e80c
c7e0e7e8:	c7e0e81c 	.word	0xc7e0e81c
c7e0e7ec:	c7e0e82c 	.word	0xc7e0e82c
c7e0e7f0:	c7e0e83c 	.word	0xc7e0e83c
c7e0e7f4:	c7e0e9d8 	.word	0xc7e0e9d8
c7e0e7f8:	c7e0e84c 	.word	0xc7e0e84c
c7e0e7fc:	c7e0e9d8 	.word	0xc7e0e9d8
c7e0e800:	c7e0e85c 	.word	0xc7e0e85c
c7e0e804:	c7e0e86c 	.word	0xc7e0e86c
c7e0e808:	c7e0e87c 	.word	0xc7e0e87c

	case '0':				/* start record		*/
		srec_type = SREC_START;		/* 2 byte addr field	*/
		*count   -= 3;			/* - checksum and addr	*/
c7e0e80c:	e2403003 	sub	r3, r0, #3	; 0x3
c7e0e810:	e58a3000 	str	r3, [sl]
c7e0e814:	e3a06000 	mov	r6, #0	; 0x0
c7e0e818:	ea00001a 	b	c7e0e888 <srec_decode+0x110>
		break;
	case '1':
		srec_type = SREC_DATA2;		/* 2 byte addr field	*/
		*count   -= 3;			/* - checksum and addr	*/
c7e0e81c:	e2403003 	sub	r3, r0, #3	; 0x3
c7e0e820:	e58a3000 	str	r3, [sl]
c7e0e824:	e3a06001 	mov	r6, #1	; 0x1
c7e0e828:	ea000016 	b	c7e0e888 <srec_decode+0x110>
		break;
	case '2':
		srec_type = SREC_DATA3;		/* 3 byte addr field	*/
		*count   -= 4;			/* - checksum and addr	*/
c7e0e82c:	e2403004 	sub	r3, r0, #4	; 0x4
c7e0e830:	e58a3000 	str	r3, [sl]
c7e0e834:	e3a06002 	mov	r6, #2	; 0x2
c7e0e838:	ea000012 	b	c7e0e888 <srec_decode+0x110>
		break;
	case '3':				/* data record with a	*/
		srec_type = SREC_DATA4;		/* 4 byte addr field	*/
		*count   -= 5;			/* - checksum and addr	*/
c7e0e83c:	e2403005 	sub	r3, r0, #5	; 0x5
c7e0e840:	e58a3000 	str	r3, [sl]
c7e0e844:	e3a06003 	mov	r6, #3	; 0x3
c7e0e848:	ea00000e 	b	c7e0e888 <srec_decode+0x110>
		break;
/***	case '4'  ***/
	case '5':			/* count record, addr field contains */
		srec_type = SREC_COUNT;	/* a 2 byte record counter	*/
		*count    = 0;			/* no data		*/
c7e0e84c:	e3a03000 	mov	r3, #0	; 0x0
c7e0e850:	e58a3000 	str	r3, [sl]
c7e0e854:	e3a06005 	mov	r6, #5	; 0x5
c7e0e858:	ea00000a 	b	c7e0e888 <srec_decode+0x110>
		break;
/***	case '6' -- not used  ***/
	case '7':				/* end record with a	*/
		srec_type = SREC_END4;		/* 4 byte addr field	*/
		*count   -= 5;			/* - checksum and addr	*/
c7e0e85c:	e2403005 	sub	r3, r0, #5	; 0x5
c7e0e860:	e58a3000 	str	r3, [sl]
c7e0e864:	e3a06007 	mov	r6, #7	; 0x7
c7e0e868:	ea000006 	b	c7e0e888 <srec_decode+0x110>
		break;
	case '8':				/* end record with a	*/
		srec_type = SREC_END3;		/* 3 byte addr field	*/
		*count   -= 4;			/* - checksum and addr	*/
c7e0e86c:	e2403004 	sub	r3, r0, #4	; 0x4
c7e0e870:	e58a3000 	str	r3, [sl]
c7e0e874:	e3a06008 	mov	r6, #8	; 0x8
c7e0e878:	ea000002 	b	c7e0e888 <srec_decode+0x110>
		break;
	case '9':				/* end record with a	*/
		srec_type = SREC_END2;		/* 2 byte addr field	*/
		*count   -= 3;			/* - checksum and addr	*/
c7e0e87c:	e2403003 	sub	r3, r0, #3	; 0x3
c7e0e880:	e58a3000 	str	r3, [sl]
c7e0e884:	e3a06009 	mov	r6, #9	; 0x9
	}

	/* read address field */
	*addr = 0;

	switch (v) {
c7e0e888:	e2442030 	sub	r2, r4, #48	; 0x30
c7e0e88c:	e20230ff 	and	r3, r2, #255	; 0xff
c7e0e890:	e3530009 	cmp	r3, #9	; 0x9
	default:
		return (SREC_E_BADTYPE);
	}

	/* read address field */
	*addr = 0;
c7e0e894:	e3a03000 	mov	r3, #0	; 0x0
c7e0e898:	e58b3000 	str	r3, [fp]

	if ((*count = hex2_bin(input)) < 0) {
		return (SREC_E_NOSREC);
	}

	chksum += *count;
c7e0e89c:	e20070ff 	and	r7, r0, #255	; 0xff
	input  += 2;
c7e0e8a0:	e2854002 	add	r4, r5, #2	; 0x2
	}

	/* read address field */
	*addr = 0;

	switch (v) {
c7e0e8a4:	8a00004b 	bhi	c7e0e9d8 <srec_decode+0x260>
c7e0e8a8:	e1a03c02 	lsl	r3, r2, #24
c7e0e8ac:	e1a03c43 	asr	r3, r3, #24
c7e0e8b0:	e3a02001 	mov	r2, #1	; 0x1
c7e0e8b4:	e1a02312 	lsl	r2, r2, r3
c7e0e8b8:	e59f3124 	ldr	r3, [pc, #292]	; c7e0e9e4 <srec_decode+0x26c>
c7e0e8bc:	e0023003 	and	r3, r2, r3
c7e0e8c0:	e3530000 	cmp	r3, #0	; 0x0
c7e0e8c4:	1a000016 	bne	c7e0e924 <srec_decode+0x1ac>
c7e0e8c8:	e3120088 	tst	r2, #136	; 0x88
c7e0e8cc:	1a000002 	bne	c7e0e8dc <srec_decode+0x164>
c7e0e8d0:	e3120f41 	tst	r2, #260	; 0x104
c7e0e8d4:	1a000008 	bne	c7e0e8fc <srec_decode+0x184>
c7e0e8d8:	ea00003e 	b	c7e0e9d8 <srec_decode+0x260>
	case '3':				/* 4 byte addr field	*/
	case '7':
		if ((v = hex2_bin(input)) < 0) {
c7e0e8dc:	e1a00004 	mov	r0, r4
c7e0e8e0:	ebffff97 	bl	c7e0e744 <hex2_bin>
c7e0e8e4:	e3500000 	cmp	r0, #0	; 0x0
c7e0e8e8:	ba000038 	blt	c7e0e9d0 <srec_decode+0x258>
			return (SREC_E_NOSREC);
		}
		*addr  += v;
		chksum += v;
c7e0e8ec:	e0873000 	add	r3, r7, r0
	case '3':				/* 4 byte addr field	*/
	case '7':
		if ((v = hex2_bin(input)) < 0) {
			return (SREC_E_NOSREC);
		}
		*addr  += v;
c7e0e8f0:	e58b0000 	str	r0, [fp]
		chksum += v;
c7e0e8f4:	e20370ff 	and	r7, r3, #255	; 0xff
		input  += 2;
c7e0e8f8:	e2844002 	add	r4, r4, #2	; 0x2
		/* FALL THRU */
	case '2':				/* 3 byte addr field	*/
	case '8':
		if ((v = hex2_bin(input)) < 0) {
c7e0e8fc:	e1a00004 	mov	r0, r4
c7e0e900:	ebffff8f 	bl	c7e0e744 <hex2_bin>
c7e0e904:	e3500000 	cmp	r0, #0	; 0x0
c7e0e908:	ba000030 	blt	c7e0e9d0 <srec_decode+0x258>
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
c7e0e90c:	e59b3000 	ldr	r3, [fp]
		*addr  += v;
		chksum += v;
c7e0e910:	e0872000 	add	r2, r7, r0
	case '8':
		if ((v = hex2_bin(input)) < 0) {
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
		*addr  += v;
c7e0e914:	e0803403 	add	r3, r0, r3, lsl #8
c7e0e918:	e58b3000 	str	r3, [fp]
		chksum += v;
c7e0e91c:	e20270ff 	and	r7, r2, #255	; 0xff
		input  += 2;
c7e0e920:	e2844002 	add	r4, r4, #2	; 0x2
		/* FALL THRU */
	case '0':				/* 2 byte addr field	*/
	case '1':
	case '5':
	case '9':
		if ((v = hex2_bin(input)) < 0) {
c7e0e924:	e1a00004 	mov	r0, r4
c7e0e928:	ebffff85 	bl	c7e0e744 <hex2_bin>
c7e0e92c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e0e930:	ba000026 	blt	c7e0e9d0 <srec_decode+0x258>
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
		*addr  += v;
c7e0e934:	e59b3000 	ldr	r3, [fp]
		chksum += v;
		input  += 2;
c7e0e938:	e2849002 	add	r9, r4, #2	; 0x2
	case '9':
		if ((v = hex2_bin(input)) < 0) {
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
		*addr  += v;
c7e0e93c:	e0854403 	add	r4, r5, r3, lsl #8
c7e0e940:	e58b4000 	str	r4, [fp]
		chksum += v;
		input  += 2;

		if ((v = hex2_bin(input)) < 0) {
c7e0e944:	e1a00009 	mov	r0, r9
c7e0e948:	ebffff7d 	bl	c7e0e744 <hex2_bin>
c7e0e94c:	e3500000 	cmp	r0, #0	; 0x0
c7e0e950:	ba00001e 	blt	c7e0e9d0 <srec_decode+0x258>
		if ((v = hex2_bin(input)) < 0) {
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
		*addr  += v;
		chksum += v;
c7e0e954:	e0803005 	add	r3, r0, r5

		if ((v = hex2_bin(input)) < 0) {
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
		*addr  += v;
c7e0e958:	e0802404 	add	r2, r0, r4, lsl #8
		chksum += v;
c7e0e95c:	e0833007 	add	r3, r3, r7

		if ((v = hex2_bin(input)) < 0) {
			return (SREC_E_NOSREC);
		}
		*addr <<= 8;
		*addr  += v;
c7e0e960:	e58b2000 	str	r2, [fp]
		chksum += v;
c7e0e964:	e20370ff 	and	r7, r3, #255	; 0xff
		input  += 2;
c7e0e968:	e2895002 	add	r5, r9, #2	; 0x2
c7e0e96c:	e3a04000 	mov	r4, #0	; 0x0
c7e0e970:	ea000009 	b	c7e0e99c <srec_decode+0x224>
		return (SREC_E_BADTYPE);
	}

	/* convert data and calculate checksum */
	for (i=0; i < *count; ++i) {
		if ((v = hex2_bin(input)) < 0) {
c7e0e974:	ebffff72 	bl	c7e0e744 <hex2_bin>
c7e0e978:	e3500000 	cmp	r0, #0	; 0x0
			return (SREC_E_NOSREC);
		}
		data[i] = v;
c7e0e97c:	e20000ff 	and	r0, r0, #255	; 0xff
		chksum += v;
c7e0e980:	e0873000 	add	r3, r7, r0
c7e0e984:	e20370ff 	and	r7, r3, #255	; 0xff
		input  += 2;
c7e0e988:	e2855002 	add	r5, r5, #2	; 0x2
		return (SREC_E_BADTYPE);
	}

	/* convert data and calculate checksum */
	for (i=0; i < *count; ++i) {
		if ((v = hex2_bin(input)) < 0) {
c7e0e98c:	ba00000f 	blt	c7e0e9d0 <srec_decode+0x258>
			return (SREC_E_NOSREC);
		}
		data[i] = v;
c7e0e990:	e59d3004 	ldr	r3, [sp, #4]
c7e0e994:	e7c30004 	strb	r0, [r3, r4]
	default:
		return (SREC_E_BADTYPE);
	}

	/* convert data and calculate checksum */
	for (i=0; i < *count; ++i) {
c7e0e998:	e2844001 	add	r4, r4, #1	; 0x1
c7e0e99c:	e59a3000 	ldr	r3, [sl]
		if ((v = hex2_bin(input)) < 0) {
c7e0e9a0:	e1a00005 	mov	r0, r5
	default:
		return (SREC_E_BADTYPE);
	}

	/* convert data and calculate checksum */
	for (i=0; i < *count; ++i) {
c7e0e9a4:	e1540003 	cmp	r4, r3
c7e0e9a8:	bafffff1 	blt	c7e0e974 <srec_decode+0x1fc>
		chksum += v;
		input  += 2;
	}

	/* read anc check checksum */
	if ((v = hex2_bin(input)) < 0) {
c7e0e9ac:	ebffff64 	bl	c7e0e744 <hex2_bin>
c7e0e9b0:	e3500000 	cmp	r0, #0	; 0x0
c7e0e9b4:	ba000005 	blt	c7e0e9d0 <srec_decode+0x258>
		return (SREC_E_NOSREC);
	}

	if ((unsigned char)v != (unsigned char)~chksum) {
c7e0e9b8:	e1e03007 	mvn	r3, r7
c7e0e9bc:	e20020ff 	and	r2, r0, #255	; 0xff
c7e0e9c0:	e20330ff 	and	r3, r3, #255	; 0xff
c7e0e9c4:	e1520003 	cmp	r2, r3
c7e0e9c8:	13e06002 	mvnne	r6, #2	; 0x2
c7e0e9cc:	ea000002 	b	c7e0e9dc <srec_decode+0x264>
c7e0e9d0:	e3e06001 	mvn	r6, #1	; 0x1
c7e0e9d4:	ea000000 	b	c7e0e9dc <srec_decode+0x264>
c7e0e9d8:	e3e06000 	mvn	r6, #0	; 0x0
		return (SREC_E_BADCHKS);
	}

	return (srec_type);
}
c7e0e9dc:	e1a00006 	mov	r0, r6
c7e0e9e0:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e0e9e4:	00000223 	.word	0x00000223

c7e0e9e8 <stdio_get_list>:
 **************************************************************************
 */
struct list_head* stdio_get_list(void)
{
	return &(devs.list);
}
c7e0e9e8:	e59f0000 	ldr	r0, [pc, #0]	; c7e0e9f0 <stdio_get_list+0x8>
c7e0e9ec:	e12fff1e 	bx	lr
c7e0e9f0:	c7e419f4 	.word	0xc7e419f4

c7e0e9f4 <stdio_clone>:

	return NULL;
}

struct stdio_dev* stdio_clone(struct stdio_dev *dev)
{
c7e0e9f4:	e92d4070 	push	{r4, r5, r6, lr}
	struct stdio_dev *_dev;

	if(!dev)
c7e0e9f8:	e2505000 	subs	r5, r0, #0	; 0x0
c7e0e9fc:	01a04005 	moveq	r4, r5
c7e0ea00:	0a00000b 	beq	c7e0ea34 <stdio_clone+0x40>
		return NULL;

	_dev = calloc(1, sizeof(struct stdio_dev));
c7e0ea04:	e3a00001 	mov	r0, #1	; 0x1
c7e0ea08:	e3a0103c 	mov	r1, #60	; 0x3c
c7e0ea0c:	ebffebbc 	bl	c7e09904 <calloc>

	if(!_dev)
c7e0ea10:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0ea14:	0a000006 	beq	c7e0ea34 <stdio_clone+0x40>
		return NULL;

	memcpy(_dev, dev, sizeof(struct stdio_dev));
c7e0ea18:	e1a01005 	mov	r1, r5
c7e0ea1c:	e3a0203c 	mov	r2, #60	; 0x3c
c7e0ea20:	eb005085 	bl	c7e22c3c <memcpy>
	strncpy(_dev->name, dev->name, 16);
c7e0ea24:	e2851008 	add	r1, r5, #8	; 0x8
c7e0ea28:	e2840008 	add	r0, r4, #8	; 0x8
c7e0ea2c:	e3a02010 	mov	r2, #16	; 0x10
c7e0ea30:	eb004f5a 	bl	c7e227a0 <strncpy>

	return _dev;
}
c7e0ea34:	e1a00004 	mov	r0, r4
c7e0ea38:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e0ea3c <stdio_register>:

int stdio_register (struct stdio_dev * dev)
{
c7e0ea3c:	e92d4010 	push	{r4, lr}
	struct stdio_dev *_dev;

	_dev = stdio_clone(dev);
c7e0ea40:	ebffffeb 	bl	c7e0e9f4 <stdio_clone>
	if(!_dev)
c7e0ea44:	e250c000 	subs	ip, r0, #0	; 0x0
c7e0ea48:	03e00000 	mvneq	r0, #0	; 0x0
c7e0ea4c:	08bd8010 	popeq	{r4, pc}
 * Insert a new entry before the specified head.
 * This is useful for implementing queues.
 */
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
	__list_add(new, head->prev, head);
c7e0ea50:	e59f2020 	ldr	r2, [pc, #32]	; c7e0ea78 <stdio_register+0x3c>
		return -1;
	list_add_tail(&(_dev->list), &(devs.list));
c7e0ea54:	e28c1034 	add	r1, ip, #52	; 0x34
c7e0ea58:	e5920038 	ldr	r0, [r2, #56]
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
	new->next = next;
c7e0ea5c:	e2823034 	add	r3, r2, #52	; 0x34
c7e0ea60:	e58c3034 	str	r3, [ip, #52]
 */
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
c7e0ea64:	e5821038 	str	r1, [r2, #56]
	new->next = next;
	new->prev = prev;
	prev->next = new;
c7e0ea68:	e5801000 	str	r1, [r0]
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
	new->next = next;
	new->prev = prev;
c7e0ea6c:	e58c0038 	str	r0, [ip, #56]
	prev->next = new;
c7e0ea70:	e3a00000 	mov	r0, #0	; 0x0
	return 0;
}
c7e0ea74:	e8bd8010 	pop	{r4, pc}
c7e0ea78:	c7e419c0 	.word	0xc7e419c0

c7e0ea7c <stdio_init>:
	return 0;
}
#endif	/* CONFIG_SYS_STDIO_DEREGISTER */

int stdio_init (void)
{
c7e0ea7c:	e92d4010 	push	{r4, lr}
#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
c7e0ea80:	e59f306c 	ldr	r3, [pc, #108]	; c7e0eaf4 <stdio_init+0x78>
c7e0ea84:	e24dd040 	sub	sp, sp, #64	; 0x40
c7e0ea88:	e2832034 	add	r2, r3, #52	; 0x34
	list->prev = list;
c7e0ea8c:	e5832038 	str	r2, [r3, #56]
#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
c7e0ea90:	e5832034 	str	r2, [r3, #52]

static void drv_system_init (void)
{
	struct stdio_dev dev;

	memset (&dev, 0, sizeof (dev));
c7e0ea94:	e28d4004 	add	r4, sp, #4	; 0x4
#endif
#if defined(CONFIG_HARD_I2C) || defined(CONFIG_SOFT_I2C)
	i2c_init (CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
#endif
#ifdef CONFIG_LCD
	drv_lcd_init ();
c7e0ea98:	ebfffab9 	bl	c7e0d584 <drv_lcd_init>

static void drv_system_init (void)
{
	struct stdio_dev dev;

	memset (&dev, 0, sizeof (dev));
c7e0ea9c:	e3a0203c 	mov	r2, #60	; 0x3c
c7e0eaa0:	e3a01000 	mov	r1, #0	; 0x0
c7e0eaa4:	e1a00004 	mov	r0, r4
c7e0eaa8:	eb005039 	bl	c7e22b94 <memset>

	strcpy (dev.name, "serial");
c7e0eaac:	e59f1044 	ldr	r1, [pc, #68]	; c7e0eaf8 <stdio_init+0x7c>
c7e0eab0:	e2840008 	add	r0, r4, #8	; 0x8
c7e0eab4:	eb004f32 	bl	c7e22784 <strcpy>
	dev.flags = DEV_FLAGS_OUTPUT | DEV_FLAGS_INPUT | DEV_FLAGS_SYSTEM;
c7e0eab8:	e3a0310e 	mov	r3, #-2147483645	; 0x80000003
c7e0eabc:	e58d3004 	str	r3, [sp, #4]
	dev.putc = serial_putc;
c7e0eac0:	e59f3034 	ldr	r3, [pc, #52]	; c7e0eafc <stdio_init+0x80>
	dev.puts = serial_puts;
	dev.getc = serial_getc;
	dev.tstc = serial_tstc;
	stdio_register (&dev);
c7e0eac4:	e1a00004 	mov	r0, r4

	memset (&dev, 0, sizeof (dev));

	strcpy (dev.name, "serial");
	dev.flags = DEV_FLAGS_OUTPUT | DEV_FLAGS_INPUT | DEV_FLAGS_SYSTEM;
	dev.putc = serial_putc;
c7e0eac8:	e58d3024 	str	r3, [sp, #36]
	dev.puts = serial_puts;
c7e0eacc:	e59f302c 	ldr	r3, [pc, #44]	; c7e0eb00 <stdio_init+0x84>
c7e0ead0:	e58d3028 	str	r3, [sp, #40]
	dev.getc = serial_getc;
c7e0ead4:	e59f3028 	ldr	r3, [pc, #40]	; c7e0eb04 <stdio_init+0x88>
c7e0ead8:	e58d3030 	str	r3, [sp, #48]
	dev.tstc = serial_tstc;
c7e0eadc:	e59f3024 	ldr	r3, [pc, #36]	; c7e0eb08 <stdio_init+0x8c>
c7e0eae0:	e58d302c 	str	r3, [sp, #44]
	stdio_register (&dev);
c7e0eae4:	ebffffd4 	bl	c7e0ea3c <stdio_register>
#ifdef CONFIG_JTAG_CONSOLE
	drv_jtag_console_init ();
#endif

	return (0);
}
c7e0eae8:	e3a00000 	mov	r0, #0	; 0x0
c7e0eaec:	e28dd040 	add	sp, sp, #64	; 0x40
c7e0eaf0:	e8bd8010 	pop	{r4, pc}
c7e0eaf4:	c7e419c0 	.word	0xc7e419c0
c7e0eaf8:	c7e3283b 	.word	0xc7e3283b
c7e0eafc:	c7e1a038 	.word	0xc7e1a038
c7e0eb00:	c7e1a080 	.word	0xc7e1a080
c7e0eb04:	c7e1a018 	.word	0xc7e1a018
c7e0eb08:	c7e1a068 	.word	0xc7e1a068

c7e0eb0c <stdio_get_by_name>:
{
	return &(devs.list);
}

struct stdio_dev* stdio_get_by_name(const char *name)
{
c7e0eb0c:	e92d4070 	push	{r4, r5, r6, lr}
	struct list_head *pos;
	struct stdio_dev *dev;

	if(!name)
c7e0eb10:	e2506000 	subs	r6, r0, #0	; 0x0
		return NULL;

	list_for_each(pos, &(devs.list)) {
c7e0eb14:	159f303c 	ldrne	r3, [pc, #60]	; c7e0eb58 <stdio_get_by_name+0x4c>
c7e0eb18:	15934034 	ldrne	r4, [r3, #52]
struct stdio_dev* stdio_get_by_name(const char *name)
{
	struct list_head *pos;
	struct stdio_dev *dev;

	if(!name)
c7e0eb1c:	0a00000a 	beq	c7e0eb4c <stdio_get_by_name+0x40>
c7e0eb20:	ea000003 	b	c7e0eb34 <stdio_get_by_name+0x28>
		return NULL;

	list_for_each(pos, &(devs.list)) {
		dev = list_entry(pos, struct stdio_dev, list);
		if(strcmp(dev->name, name) == 0)
c7e0eb24:	eb004f4d 	bl	c7e22860 <strcmp>
c7e0eb28:	e3500000 	cmp	r0, #0	; 0x0
c7e0eb2c:	0a000007 	beq	c7e0eb50 <stdio_get_by_name+0x44>
	struct stdio_dev *dev;

	if(!name)
		return NULL;

	list_for_each(pos, &(devs.list)) {
c7e0eb30:	e5944000 	ldr	r4, [r4]
c7e0eb34:	e59f3020 	ldr	r3, [pc, #32]	; c7e0eb5c <stdio_get_by_name+0x50>
		dev = list_entry(pos, struct stdio_dev, list);
c7e0eb38:	e2445034 	sub	r5, r4, #52	; 0x34
	struct stdio_dev *dev;

	if(!name)
		return NULL;

	list_for_each(pos, &(devs.list)) {
c7e0eb3c:	e1540003 	cmp	r4, r3
		dev = list_entry(pos, struct stdio_dev, list);
		if(strcmp(dev->name, name) == 0)
c7e0eb40:	e2850008 	add	r0, r5, #8	; 0x8
c7e0eb44:	e1a01006 	mov	r1, r6
	struct stdio_dev *dev;

	if(!name)
		return NULL;

	list_for_each(pos, &(devs.list)) {
c7e0eb48:	1afffff5 	bne	c7e0eb24 <stdio_get_by_name+0x18>
c7e0eb4c:	e3a05000 	mov	r5, #0	; 0x0
		if(strcmp(dev->name, name) == 0)
			return dev;
	}

	return NULL;
}
c7e0eb50:	e1a00005 	mov	r0, r5
c7e0eb54:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0eb58:	c7e419c0 	.word	0xc7e419c0
c7e0eb5c:	c7e419f4 	.word	0xc7e419f4

c7e0eb60 <parse_num>:
}

/* Parse (scan) a number */
bool
parse_num (char *s, unsigned long *val, char **es, char *delim)
{
c7e0eb60:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e0eb64:	e1a0a001 	mov	sl, r1
c7e0eb68:	e1a07002 	mov	r7, r2
c7e0eb6c:	e1a06003 	mov	r6, r3
c7e0eb70:	ea000000 	b	c7e0eb78 <parse_num+0x18>
  char c;
  unsigned long result = 0;
  int digit;

  while (*s == ' ')
    s++;
c7e0eb74:	e2800001 	add	r0, r0, #1	; 0x1
  int radix = 10;
  char c;
  unsigned long result = 0;
  int digit;

  while (*s == ' ')
c7e0eb78:	e5d03000 	ldrb	r3, [r0]
c7e0eb7c:	e3530020 	cmp	r3, #32	; 0x20
c7e0eb80:	0afffffb 	beq	c7e0eb74 <parse_num+0x14>
c7e0eb84:	ea000032 	b	c7e0ec54 <parse_num+0xf4>
    s++;
  while (*s)
    {
      if (first && (s[0] == '0') && (_tolower (s[1]) == 'x'))
c7e0eb88:	e3520000 	cmp	r2, #0	; 0x0
c7e0eb8c:	0a000009 	beq	c7e0ebb8 <parse_num+0x58>
c7e0eb90:	e3530030 	cmp	r3, #48	; 0x30
c7e0eb94:	1a000007 	bne	c7e0ebb8 <parse_num+0x58>
c7e0eb98:	e5d02001 	ldrb	r2, [r0, #1]

/* Convert a character to lower case */
__inline__ static char
_tolower (char c)
{
  if ((c >= 'A') && (c <= 'Z'))
c7e0eb9c:	e2423041 	sub	r3, r2, #65	; 0x41
c7e0eba0:	e3530019 	cmp	r3, #25	; 0x19
    {
      c = (c - 'A') + 'a';
c7e0eba4:	92823020 	addls	r3, r2, #32	; 0x20
c7e0eba8:	920320ff 	andls	r2, r3, #255	; 0xff

  while (*s == ' ')
    s++;
  while (*s)
    {
      if (first && (s[0] == '0') && (_tolower (s[1]) == 'x'))
c7e0ebac:	e3520078 	cmp	r2, #120	; 0x78
	{
	  radix = 16;
	  s += 2;
c7e0ebb0:	02800002 	addeq	r0, r0, #2	; 0x2
c7e0ebb4:	03a04010 	moveq	r4, #16	; 0x10
	}
      first = false;
      c = *s++;
c7e0ebb8:	e4d0c001 	ldrb	ip, [r0], #1

/* Validate a hex character */
__inline__ static bool
_is_hex (char c)
{
  return (((c >= '0') && (c <= '9')) ||
c7e0ebbc:	e24c3030 	sub	r3, ip, #48	; 0x30
c7e0ebc0:	e24c2041 	sub	r2, ip, #65	; 0x41
c7e0ebc4:	e3530009 	cmp	r3, #9	; 0x9
c7e0ebc8:	83a01000 	movhi	r1, #0	; 0x0
c7e0ebcc:	93a01001 	movls	r1, #1	; 0x1
c7e0ebd0:	e3520005 	cmp	r2, #5	; 0x5
c7e0ebd4:	83a02000 	movhi	r2, #0	; 0x0
c7e0ebd8:	93a02001 	movls	r2, #1	; 0x1
c7e0ebdc:	e1913002 	orrs	r3, r1, r2
c7e0ebe0:	1a000002 	bne	c7e0ebf0 <parse_num+0x90>
c7e0ebe4:	e24c3061 	sub	r3, ip, #97	; 0x61
c7e0ebe8:	e3530005 	cmp	r3, #5	; 0x5
c7e0ebec:	8a00000e 	bhi	c7e0ec2c <parse_num+0xcc>
__inline__ static int
_from_hex (char c)
{
  int ret = 0;

  if ((c >= '0') && (c <= '9'))
c7e0ebf0:	e3510000 	cmp	r1, #0	; 0x0
    {
      ret = (c - '0');
c7e0ebf4:	124c2030 	subne	r2, ip, #48	; 0x30
__inline__ static int
_from_hex (char c)
{
  int ret = 0;

  if ((c >= '0') && (c <= '9'))
c7e0ebf8:	1a000006 	bne	c7e0ec18 <parse_num+0xb8>
    {
      ret = (c - '0');
    }
  else if ((c >= 'a') && (c <= 'f'))
c7e0ebfc:	e24c3061 	sub	r3, ip, #97	; 0x61
c7e0ec00:	e3530005 	cmp	r3, #5	; 0x5
    {
      ret = (c - 'a' + 0x0a);
c7e0ec04:	924c2057 	subls	r2, ip, #87	; 0x57

  if ((c >= '0') && (c <= '9'))
    {
      ret = (c - '0');
    }
  else if ((c >= 'a') && (c <= 'f'))
c7e0ec08:	9a000002 	bls	c7e0ec18 <parse_num+0xb8>
    {
      ret = (c - 'a' + 0x0a);
    }
  else if ((c >= 'A') && (c <= 'F'))
c7e0ec0c:	e3520000 	cmp	r2, #0	; 0x0
c7e0ec10:	0a000002 	beq	c7e0ec20 <parse_num+0xc0>
    {
      ret = (c - 'A' + 0x0A);
c7e0ec14:	e24c2037 	sub	r2, ip, #55	; 0x37
	  radix = 16;
	  s += 2;
	}
      first = false;
      c = *s++;
      if (_is_hex (c) && ((digit = _from_hex (c)) < radix))
c7e0ec18:	e1520004 	cmp	r2, r4
c7e0ec1c:	aa000002 	bge	c7e0ec2c <parse_num+0xcc>
	    result = result << 4;
	  else
	    result = 10 * result;
	  result += digit;
#else
	  result = (result * radix) + digit;
c7e0ec20:	e0252594 	mla	r5, r4, r5, r2
c7e0ec24:	e3a02000 	mov	r2, #0	; 0x0
c7e0ec28:	ea00000c 	b	c7e0ec60 <parse_num+0x100>
#endif
	}
      else
	{
	  if (delim != (char *) 0)
c7e0ec2c:	e3560000 	cmp	r6, #0	; 0x0
c7e0ec30:	0a000012 	beq	c7e0ec80 <parse_num+0x120>
c7e0ec34:	e3a03000 	mov	r3, #0	; 0x0
	    {
	      /* See if this character is one of the delimiters */
	      char *dp = delim;
	      while (*dp && (c != *dp))
c7e0ec38:	e7d62003 	ldrb	r2, [r6, r3]
c7e0ec3c:	e2833001 	add	r3, r3, #1	; 0x1
c7e0ec40:	e3520000 	cmp	r2, #0	; 0x0
c7e0ec44:	0a00000d 	beq	c7e0ec80 <parse_num+0x120>
c7e0ec48:	e15c0002 	cmp	ip, r2
c7e0ec4c:	1afffff9 	bne	c7e0ec38 <parse_num+0xd8>
c7e0ec50:	ea000005 	b	c7e0ec6c <parse_num+0x10c>
c7e0ec54:	e3a0400a 	mov	r4, #10	; 0xa
c7e0ec58:	e3a05000 	mov	r5, #0	; 0x0
c7e0ec5c:	e3a02001 	mov	r2, #1	; 0x1
  unsigned long result = 0;
  int digit;

  while (*s == ' ')
    s++;
  while (*s)
c7e0ec60:	e5d03000 	ldrb	r3, [r0]
c7e0ec64:	e3530000 	cmp	r3, #0	; 0x0
c7e0ec68:	1affffc6 	bne	c7e0eb88 <parse_num+0x28>
	    }
	  return false;		/* Malformatted number */
	}
    }
  *val = result;
  if (es != (char **) 0)
c7e0ec6c:	e3570000 	cmp	r7, #0	; 0x0
    {
      *es = s;
c7e0ec70:	15870000 	strne	r0, [r7]
		break;		/* Found a good delimiter */
	    }
	  return false;		/* Malformatted number */
	}
    }
  *val = result;
c7e0ec74:	e58a5000 	str	r5, [sl]
  if (es != (char **) 0)
    {
      *es = s;
c7e0ec78:	e3a00001 	mov	r0, #1	; 0x1
c7e0ec7c:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0ec80:	e3a00000 	mov	r0, #0	; 0x0
    }
  return true;
}
c7e0ec84:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

c7e0ec88 <xyzModem_error>:
}

char *
xyzModem_error (int err)
{
  switch (err)
c7e0ec88:	e2800008 	add	r0, r0, #8	; 0x8
c7e0ec8c:	e3500007 	cmp	r0, #7	; 0x7
c7e0ec90:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
c7e0ec94:	ea000017 	b	c7e0ecf8 <xyzModem_error+0x70>
c7e0ec98:	c7e0ecf0 	.word	0xc7e0ecf0
c7e0ec9c:	c7e0ece8 	.word	0xc7e0ece8
c7e0eca0:	c7e0ece0 	.word	0xc7e0ece0
c7e0eca4:	c7e0ecd8 	.word	0xc7e0ecd8
c7e0eca8:	c7e0ecd0 	.word	0xc7e0ecd0
c7e0ecac:	c7e0ecc8 	.word	0xc7e0ecc8
c7e0ecb0:	c7e0ecb8 	.word	0xc7e0ecb8
c7e0ecb4:	c7e0ecc0 	.word	0xc7e0ecc0
c7e0ecb8:	e59f0040 	ldr	r0, [pc, #64]	; c7e0ed00 <xyzModem_error+0x78>
c7e0ecbc:	e12fff1e 	bx	lr
c7e0ecc0:	e59f003c 	ldr	r0, [pc, #60]	; c7e0ed04 <xyzModem_error+0x7c>
c7e0ecc4:	e12fff1e 	bx	lr
c7e0ecc8:	e59f0038 	ldr	r0, [pc, #56]	; c7e0ed08 <xyzModem_error+0x80>
c7e0eccc:	e12fff1e 	bx	lr
      break;
    case xyzModem_noZmodem:
      return "Sorry, zModem not available yet";
      break;
    case xyzModem_timeout:
      return "Timed out";
c7e0ecd0:	e59f0034 	ldr	r0, [pc, #52]	; c7e0ed0c <xyzModem_error+0x84>
c7e0ecd4:	e12fff1e 	bx	lr
      break;
    case xyzModem_eof:
      return "End of file";
c7e0ecd8:	e59f0030 	ldr	r0, [pc, #48]	; c7e0ed10 <xyzModem_error+0x88>
c7e0ecdc:	e12fff1e 	bx	lr
      break;
    case xyzModem_cancel:
      return "Cancelled";
c7e0ece0:	e59f002c 	ldr	r0, [pc, #44]	; c7e0ed14 <xyzModem_error+0x8c>
c7e0ece4:	e12fff1e 	bx	lr
      break;
    case xyzModem_frame:
      return "Invalid framing";
c7e0ece8:	e59f0028 	ldr	r0, [pc, #40]	; c7e0ed18 <xyzModem_error+0x90>
c7e0ecec:	e12fff1e 	bx	lr
      break;
    case xyzModem_cksum:
      return "CRC/checksum error";
c7e0ecf0:	e59f0024 	ldr	r0, [pc, #36]	; c7e0ed1c <xyzModem_error+0x94>
c7e0ecf4:	e12fff1e 	bx	lr
      break;
    case xyzModem_sequence:
      return "Block sequence error";
c7e0ecf8:	e59f0020 	ldr	r0, [pc, #32]	; c7e0ed20 <xyzModem_error+0x98>
      break;
    default:
      return "Unknown error";
      break;
    }
}
c7e0ecfc:	e12fff1e 	bx	lr
c7e0ed00:	c7e32842 	.word	0xc7e32842
c7e0ed04:	c7e32862 	.word	0xc7e32862
c7e0ed08:	c7e32874 	.word	0xc7e32874
c7e0ed0c:	c7e3287e 	.word	0xc7e3287e
c7e0ed10:	c7e3288a 	.word	0xc7e3288a
c7e0ed14:	c7e32894 	.word	0xc7e32894
c7e0ed18:	c7e328a4 	.word	0xc7e328a4
c7e0ed1c:	c7e328b7 	.word	0xc7e328b7
c7e0ed20:	c7e328cc 	.word	0xc7e328cc

c7e0ed24 <xyzModem_stream_close>:
  return total;
}

void
xyzModem_stream_close (int *err)
{
c7e0ed24:	e92d4007 	push	{r0, r1, r2, lr}
  diag_printf
c7e0ed28:	e59f2030 	ldr	r2, [pc, #48]	; c7e0ed60 <xyzModem_stream_close+0x3c>
c7e0ed2c:	e59f3030 	ldr	r3, [pc, #48]	; c7e0ed64 <xyzModem_stream_close+0x40>
c7e0ed30:	e5920428 	ldr	r0, [r2, #1064]
c7e0ed34:	e592c424 	ldr	ip, [r2, #1060]
c7e0ed38:	e592e418 	ldr	lr, [r2, #1048]
c7e0ed3c:	e3500000 	cmp	r0, #0	; 0x0
c7e0ed40:	e59f1020 	ldr	r1, [pc, #32]	; c7e0ed68 <xyzModem_stream_close+0x44>
c7e0ed44:	e59f0020 	ldr	r0, [pc, #32]	; c7e0ed6c <xyzModem_stream_close+0x48>
c7e0ed48:	01a01003 	moveq	r1, r3
c7e0ed4c:	e5923420 	ldr	r3, [r2, #1056]
c7e0ed50:	e592241c 	ldr	r2, [r2, #1052]
c7e0ed54:	e88d5000 	stm	sp, {ip, lr}
c7e0ed58:	ebffe73e 	bl	c7e08a58 <printf>
    ("xyzModem - %s mode, %d(SOH)/%d(STX)/%d(CAN) packets, %d retries\n",
     xyz.crc_mode ? "CRC" : "Cksum", xyz.total_SOH, xyz.total_STX,
     xyz.total_CAN, xyz.total_retries);
  ZM_DEBUG (zm_flush ());
}
c7e0ed5c:	e8bd800e 	pop	{r1, r2, r3, pc}
c7e0ed60:	c7e41a08 	.word	0xc7e41a08
c7e0ed64:	c7e328da 	.word	0xc7e328da
c7e0ed68:	c7e31e31 	.word	0xc7e31e31
c7e0ed6c:	c7e328e0 	.word	0xc7e328e0

c7e0ed70 <CYGACC_COMM_IF_PUTC>:
}

void
CYGACC_COMM_IF_PUTC (char x, char y)
{
  putc (y);
c7e0ed70:	e1a00001 	mov	r0, r1
c7e0ed74:	eaffe7c7 	b	c7e08c98 <putc>

c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>:

#ifndef REDBOOT			/*SB */
typedef int cyg_int32;
int
CYGACC_COMM_IF_GETC_TIMEOUT (char chan, char *c)
{
c7e0ed78:	e92d4070 	push	{r4, r5, r6, lr}
c7e0ed7c:	e1a05001 	mov	r5, r1
c7e0ed80:	e3a04000 	mov	r4, #0	; 0x0
c7e0ed84:	ea000000 	b	c7e0ed8c <CYGACC_COMM_IF_GETC_TIMEOUT+0x14>
#define DELAY 20
  unsigned long counter = 0;
  while (!tstc () && (counter < xyzModem_CHAR_TIMEOUT * 1000 / DELAY))
    {
      udelay (DELAY);
c7e0ed88:	eb00504e 	bl	c7e22ec8 <udelay>
int
CYGACC_COMM_IF_GETC_TIMEOUT (char chan, char *c)
{
#define DELAY 20
  unsigned long counter = 0;
  while (!tstc () && (counter < xyzModem_CHAR_TIMEOUT * 1000 / DELAY))
c7e0ed8c:	ebffe7cb 	bl	c7e08cc0 <tstc>
c7e0ed90:	e3500000 	cmp	r0, #0	; 0x0
    {
      udelay (DELAY);
c7e0ed94:	e3a00014 	mov	r0, #20	; 0x14
int
CYGACC_COMM_IF_GETC_TIMEOUT (char chan, char *c)
{
#define DELAY 20
  unsigned long counter = 0;
  while (!tstc () && (counter < xyzModem_CHAR_TIMEOUT * 1000 / DELAY))
c7e0ed98:	1a000003 	bne	c7e0edac <CYGACC_COMM_IF_GETC_TIMEOUT+0x34>
c7e0ed9c:	e59f3024 	ldr	r3, [pc, #36]	; c7e0edc8 <CYGACC_COMM_IF_GETC_TIMEOUT+0x50>
c7e0eda0:	e1540003 	cmp	r4, r3
    {
      udelay (DELAY);
      counter++;
c7e0eda4:	e2844001 	add	r4, r4, #1	; 0x1
int
CYGACC_COMM_IF_GETC_TIMEOUT (char chan, char *c)
{
#define DELAY 20
  unsigned long counter = 0;
  while (!tstc () && (counter < xyzModem_CHAR_TIMEOUT * 1000 / DELAY))
c7e0eda8:	1afffff6 	bne	c7e0ed88 <CYGACC_COMM_IF_GETC_TIMEOUT+0x10>
    {
      udelay (DELAY);
      counter++;
    }
  if (tstc ())
c7e0edac:	ebffe7c3 	bl	c7e08cc0 <tstc>
c7e0edb0:	e3500000 	cmp	r0, #0	; 0x0
c7e0edb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    {
      *c = getc ();
c7e0edb8:	ebffe7c9 	bl	c7e08ce4 <getc>
c7e0edbc:	e5c50000 	strb	r0, [r5]
c7e0edc0:	e3a00001 	mov	r0, #1	; 0x1
      return 1;
    }
  return 0;
}
c7e0edc4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e0edc8:	000186a0 	.word	0x000186a0

c7e0edcc <xyzModem_flush>:
#endif

/* Wait for the line to go idle */
static void
xyzModem_flush (void)
{
c7e0edcc:	e92d4007 	push	{r0, r1, r2, lr}
  int res;
  char c;
  while (true)
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, &c);
c7e0edd0:	e59f3018 	ldr	r3, [pc, #24]	; c7e0edf0 <xyzModem_flush+0x24>
c7e0edd4:	e28d1007 	add	r1, sp, #7	; 0x7
c7e0edd8:	e5933000 	ldr	r3, [r3]
c7e0eddc:	e5d30000 	ldrb	r0, [r3]
c7e0ede0:	ebffffe4 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
      if (!res)
c7e0ede4:	e3500000 	cmp	r0, #0	; 0x0
c7e0ede8:	1afffff8 	bne	c7e0edd0 <xyzModem_flush+0x4>
	return;
    }
}
c7e0edec:	e8bd800e 	pop	{r1, r2, r3, pc}
c7e0edf0:	c7e41a08 	.word	0xc7e41a08

c7e0edf4 <xyzModem_stream_terminate>:
void
xyzModem_stream_terminate (bool abort, int (*getc) (void))
{
  int c;

  if (abort)
c7e0edf4:	e3500000 	cmp	r0, #0	; 0x0

/* Need to be able to clean out the input buffer, so have to take the */
/* getc */
void
xyzModem_stream_terminate (bool abort, int (*getc) (void))
{
c7e0edf8:	e92d4010 	push	{r4, lr}
c7e0edfc:	e1a04001 	mov	r4, r1
  int c;

  if (abort)
c7e0ee00:	0a000028 	beq	c7e0eea8 <xyzModem_stream_terminate+0xb4>
    {
      ZM_DEBUG (zm_dprintf ("!!!! TRANSFER ABORT !!!!\n"));
      switch (xyz.mode)
c7e0ee04:	e59f40b4 	ldr	r4, [pc, #180]	; c7e0eec0 <xyzModem_stream_terminate+0xcc>
c7e0ee08:	e5943414 	ldr	r3, [r4, #1044]
c7e0ee0c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0ee10:	e3530001 	cmp	r3, #1	; 0x1
c7e0ee14:	88bd8010 	pophi	{r4, pc}
	{
	case xyzModem_xmodem:
	case xyzModem_ymodem:
	  /* The X/YMODEM Spec seems to suggest that multiple CAN followed by an equal */
	  /* number of Backspaces is a friendly way to get the other end to abort. */
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, CAN);
c7e0ee18:	e5943000 	ldr	r3, [r4]
c7e0ee1c:	e3a01018 	mov	r1, #24	; 0x18
c7e0ee20:	e5d30000 	ldrb	r0, [r3]
c7e0ee24:	ebffffd1 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, CAN);
c7e0ee28:	e5943000 	ldr	r3, [r4]
c7e0ee2c:	e3a01018 	mov	r1, #24	; 0x18
c7e0ee30:	e5d30000 	ldrb	r0, [r3]
c7e0ee34:	ebffffcd 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, CAN);
c7e0ee38:	e5943000 	ldr	r3, [r4]
c7e0ee3c:	e3a01018 	mov	r1, #24	; 0x18
c7e0ee40:	e5d30000 	ldrb	r0, [r3]
c7e0ee44:	ebffffc9 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, CAN);
c7e0ee48:	e5943000 	ldr	r3, [r4]
c7e0ee4c:	e3a01018 	mov	r1, #24	; 0x18
c7e0ee50:	e5d30000 	ldrb	r0, [r3]
c7e0ee54:	ebffffc5 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, BSP);
c7e0ee58:	e5943000 	ldr	r3, [r4]
c7e0ee5c:	e3a01008 	mov	r1, #8	; 0x8
c7e0ee60:	e5d30000 	ldrb	r0, [r3]
c7e0ee64:	ebffffc1 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, BSP);
c7e0ee68:	e5943000 	ldr	r3, [r4]
c7e0ee6c:	e3a01008 	mov	r1, #8	; 0x8
c7e0ee70:	e5d30000 	ldrb	r0, [r3]
c7e0ee74:	ebffffbd 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, BSP);
c7e0ee78:	e5943000 	ldr	r3, [r4]
c7e0ee7c:	e3a01008 	mov	r1, #8	; 0x8
c7e0ee80:	e5d30000 	ldrb	r0, [r3]
c7e0ee84:	ebffffb9 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, BSP);
c7e0ee88:	e5943000 	ldr	r3, [r4]
c7e0ee8c:	e3a01008 	mov	r1, #8	; 0x8
c7e0ee90:	e5d30000 	ldrb	r0, [r3]
c7e0ee94:	ebffffb5 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  /* Now consume the rest of what's waiting on the line. */
	  ZM_DEBUG (zm_dprintf ("Flushing serial line.\n"));
	  xyzModem_flush ();
c7e0ee98:	ebffffcb 	bl	c7e0edcc <xyzModem_flush>
	  xyz.at_eof = true;
c7e0ee9c:	e3a03001 	mov	r3, #1	; 0x1
c7e0eea0:	e584342c 	str	r3, [r4, #1068]
c7e0eea4:	e8bd8010 	pop	{r4, pc}
       * previous received blocks. Since very few files are an exact multiple
       * of the transfer block size, there will almost always be some gunk here.
       * If we don't eat it now, RedBoot will think the user typed it.
       */
      ZM_DEBUG (zm_dprintf ("Trailing gunk:\n"));
      while ((c = (*getc) ()) > -1);
c7e0eea8:	e12fff34 	blx	r4
c7e0eeac:	e3500000 	cmp	r0, #0	; 0x0
c7e0eeb0:	aafffffc 	bge	c7e0eea8 <xyzModem_stream_terminate+0xb4>
      /*
       * Make a small delay to give terminal programs like minicom
       * time to get control again after their file transfer program
       * exits.
       */
      CYGACC_CALL_IF_DELAY_US ((cyg_int32) 250000);
c7e0eeb4:	e59f0008 	ldr	r0, [pc, #8]	; c7e0eec4 <xyzModem_stream_terminate+0xd0>
    }
}
c7e0eeb8:	e8bd4010 	pop	{r4, lr}
      /*
       * Make a small delay to give terminal programs like minicom
       * time to get control again after their file transfer program
       * exits.
       */
      CYGACC_CALL_IF_DELAY_US ((cyg_int32) 250000);
c7e0eebc:	ea005001 	b	c7e22ec8 <udelay>
c7e0eec0:	c7e41a08 	.word	0xc7e41a08
c7e0eec4:	0003d090 	.word	0x0003d090

c7e0eec8 <xyzModem_get_hdr>:
    }
}

static int
xyzModem_get_hdr (void)
{
c7e0eec8:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
  ZM_DEBUG (zm_new ());
  /* Find the start of a header */
  can_total = 0;
  hdr_chars = 0;

  if (xyz.tx_ack)
c7e0eecc:	e59f4260 	ldr	r4, [pc, #608]	; c7e0f134 <xyzModem_get_hdr+0x26c>
c7e0eed0:	e5943430 	ldr	r3, [r4, #1072]
c7e0eed4:	e3530000 	cmp	r3, #0	; 0x0
c7e0eed8:	0a000005 	beq	c7e0eef4 <xyzModem_get_hdr+0x2c>
    {
      CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
c7e0eedc:	e5943000 	ldr	r3, [r4]
c7e0eee0:	e3a01006 	mov	r1, #6	; 0x6
c7e0eee4:	e5d30000 	ldrb	r0, [r3]
c7e0eee8:	ebffffa0 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
      xyz.tx_ack = false;
c7e0eeec:	e3a03000 	mov	r3, #0	; 0x0
c7e0eef0:	e5843430 	str	r3, [r4, #1072]
c7e0eef4:	e3a05000 	mov	r5, #0	; 0x0
c7e0eef8:	e1a06005 	mov	r6, r5
    }
  while (!hdr_found)
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, &c);
c7e0eefc:	e59f4230 	ldr	r4, [pc, #560]	; c7e0f134 <xyzModem_get_hdr+0x26c>
c7e0ef00:	e28d1007 	add	r1, sp, #7	; 0x7
c7e0ef04:	e5943000 	ldr	r3, [r4]
      ZM_DEBUG (zm_save (c));
      if (res)
	{
	  hdr_chars++;
c7e0ef08:	e2866001 	add	r6, r6, #1	; 0x1
      CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
      xyz.tx_ack = false;
    }
  while (!hdr_found)
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, &c);
c7e0ef0c:	e5d30000 	ldrb	r0, [r3]
c7e0ef10:	ebffff98 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
      ZM_DEBUG (zm_save (c));
      if (res)
c7e0ef14:	e3500000 	cmp	r0, #0	; 0x0
c7e0ef18:	0a000023 	beq	c7e0efac <xyzModem_get_hdr+0xe4>
	{
	  hdr_chars++;
	  switch (c)
c7e0ef1c:	e5dd3007 	ldrb	r3, [sp, #7]
c7e0ef20:	e3530002 	cmp	r3, #2	; 0x2
c7e0ef24:	0a00000c 	beq	c7e0ef5c <xyzModem_get_hdr+0x94>
c7e0ef28:	8a000002 	bhi	c7e0ef38 <xyzModem_get_hdr+0x70>
c7e0ef2c:	e3530001 	cmp	r3, #1	; 0x1
c7e0ef30:	1afffff1 	bne	c7e0eefc <xyzModem_get_hdr+0x34>
c7e0ef34:	ea000004 	b	c7e0ef4c <xyzModem_get_hdr+0x84>
c7e0ef38:	e3530004 	cmp	r3, #4	; 0x4
c7e0ef3c:	0a000012 	beq	c7e0ef8c <xyzModem_get_hdr+0xc4>
c7e0ef40:	e3530018 	cmp	r3, #24	; 0x18
c7e0ef44:	1affffec 	bne	c7e0eefc <xyzModem_get_hdr+0x34>
c7e0ef48:	ea000007 	b	c7e0ef6c <xyzModem_get_hdr+0xa4>
	    {
	    case SOH:
	      xyz.total_SOH++;
c7e0ef4c:	e594341c 	ldr	r3, [r4, #1052]
c7e0ef50:	e2833001 	add	r3, r3, #1	; 0x1
c7e0ef54:	e584341c 	str	r3, [r4, #1052]
c7e0ef58:	ea00006d 	b	c7e0f114 <xyzModem_get_hdr+0x24c>
	    case STX:
	      if (c == STX)
		xyz.total_STX++;
c7e0ef5c:	e5943420 	ldr	r3, [r4, #1056]
c7e0ef60:	e2833001 	add	r3, r3, #1	; 0x1
c7e0ef64:	e5843420 	str	r3, [r4, #1056]
c7e0ef68:	ea000069 	b	c7e0f114 <xyzModem_get_hdr+0x24c>
	      hdr_found = true;
	      break;
	    case CAN:
	      xyz.total_CAN++;
c7e0ef6c:	e5943424 	ldr	r3, [r4, #1060]
	      ZM_DEBUG (zm_dump (__LINE__));
	      if (++can_total == xyzModem_CAN_COUNT)
c7e0ef70:	e2855001 	add	r5, r5, #1	; 0x1
	      if (c == STX)
		xyz.total_STX++;
	      hdr_found = true;
	      break;
	    case CAN:
	      xyz.total_CAN++;
c7e0ef74:	e2833001 	add	r3, r3, #1	; 0x1
	      ZM_DEBUG (zm_dump (__LINE__));
	      if (++can_total == xyzModem_CAN_COUNT)
c7e0ef78:	e3550003 	cmp	r5, #3	; 0x3
	      if (c == STX)
		xyz.total_STX++;
	      hdr_found = true;
	      break;
	    case CAN:
	      xyz.total_CAN++;
c7e0ef7c:	e5843424 	str	r3, [r4, #1060]
	      ZM_DEBUG (zm_dump (__LINE__));
	      if (++can_total == xyzModem_CAN_COUNT)
c7e0ef80:	1affffdd 	bne	c7e0eefc <xyzModem_get_hdr+0x34>
		  return xyzModem_cancel;
		}
	      else
		{
		  /* Wait for multiple CAN to avoid early quits */
		  break;
c7e0ef84:	e3e00004 	mvn	r0, #4	; 0x4
c7e0ef88:	ea000060 	b	c7e0f110 <xyzModem_get_hdr+0x248>
		}
	    case EOT:
	      /* EOT only supported if no noise */
	      if (hdr_chars == 1)
c7e0ef8c:	e3560001 	cmp	r6, #1	; 0x1
c7e0ef90:	1affffd9 	bne	c7e0eefc <xyzModem_get_hdr+0x34>
		{
		  CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
c7e0ef94:	e5943000 	ldr	r3, [r4]
c7e0ef98:	e3a01006 	mov	r1, #6	; 0x6
c7e0ef9c:	e5d30000 	ldrb	r0, [r3]
c7e0efa0:	ebffff72 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
c7e0efa4:	e3e00003 	mvn	r0, #3	; 0x3
c7e0efa8:	ea000058 	b	c7e0f110 <xyzModem_get_hdr+0x248>
	    }
	}
      else
	{
	  /* Data stream timed out */
	  xyzModem_flush ();	/* Toss any current input */
c7e0efac:	ebffff86 	bl	c7e0edcc <xyzModem_flush>
	  ZM_DEBUG (zm_dump (__LINE__));
	  CYGACC_CALL_IF_DELAY_US ((cyg_int32) 250000);
c7e0efb0:	e59f0180 	ldr	r0, [pc, #384]	; c7e0f138 <xyzModem_get_hdr+0x270>
c7e0efb4:	eb004fc3 	bl	c7e22ec8 <udelay>
c7e0efb8:	ea000051 	b	c7e0f104 <xyzModem_get_hdr+0x23c>
  if (!res)
    {
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, (char *) &xyz.cblk);
c7e0efbc:	e5943000 	ldr	r3, [r4]
c7e0efc0:	e59f1174 	ldr	r1, [pc, #372]	; c7e0f13c <xyzModem_get_hdr+0x274>
c7e0efc4:	e5d30000 	ldrb	r0, [r3]
c7e0efc8:	ebffff6a 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
  ZM_DEBUG (zm_save (xyz.cblk));
  if (!res)
c7e0efcc:	e3500000 	cmp	r0, #0	; 0x0
c7e0efd0:	0a00004b 	beq	c7e0f104 <xyzModem_get_hdr+0x23c>
    {
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  xyz.len = (c == SOH) ? 128 : 1024;
c7e0efd4:	e5dd3007 	ldrb	r3, [sp, #7]
  xyz.bufp = xyz.pkt;
c7e0efd8:	e2842004 	add	r2, r4, #4	; 0x4
  if (!res)
    {
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  xyz.len = (c == SOH) ? 128 : 1024;
c7e0efdc:	e3530001 	cmp	r3, #1	; 0x1
c7e0efe0:	03a03080 	moveq	r3, #128	; 0x80
c7e0efe4:	13a03b01 	movne	r3, #1024	; 0x400
  xyz.bufp = xyz.pkt;
c7e0efe8:	e5842404 	str	r2, [r4, #1028]
  if (!res)
    {
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  xyz.len = (c == SOH) ? 128 : 1024;
c7e0efec:	e5843410 	str	r3, [r4, #1040]
  xyz.bufp = xyz.pkt;
c7e0eff0:	e3a04000 	mov	r4, #0	; 0x0
c7e0eff4:	ea000008 	b	c7e0f01c <xyzModem_get_hdr+0x154>
  for (i = 0; i < xyz.len; i++)
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, &c);
c7e0eff8:	e5953000 	ldr	r3, [r5]
c7e0effc:	e5d30000 	ldrb	r0, [r3]
c7e0f000:	ebffff5c 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
      ZM_DEBUG (zm_save (c));
      if (res)
c7e0f004:	e3500000 	cmp	r0, #0	; 0x0
	{
	  xyz.pkt[i] = c;
c7e0f008:	e0852004 	add	r2, r5, r4
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  xyz.len = (c == SOH) ? 128 : 1024;
  xyz.bufp = xyz.pkt;
  for (i = 0; i < xyz.len; i++)
c7e0f00c:	e2844001 	add	r4, r4, #1	; 0x1
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, &c);
      ZM_DEBUG (zm_save (c));
      if (res)
c7e0f010:	0a00003b 	beq	c7e0f104 <xyzModem_get_hdr+0x23c>
	{
	  xyz.pkt[i] = c;
c7e0f014:	e5dd3007 	ldrb	r3, [sp, #7]
c7e0f018:	e5c23004 	strb	r3, [r2, #4]
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  xyz.len = (c == SOH) ? 128 : 1024;
  xyz.bufp = xyz.pkt;
  for (i = 0; i < xyz.len; i++)
c7e0f01c:	e59f5110 	ldr	r5, [pc, #272]	; c7e0f134 <xyzModem_get_hdr+0x26c>
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, &c);
c7e0f020:	e28d1007 	add	r1, sp, #7	; 0x7
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  xyz.len = (c == SOH) ? 128 : 1024;
  xyz.bufp = xyz.pkt;
  for (i = 0; i < xyz.len; i++)
c7e0f024:	e5953410 	ldr	r3, [r5, #1040]
c7e0f028:	e1540003 	cmp	r4, r3
c7e0f02c:	bafffff1 	blt	c7e0eff8 <xyzModem_get_hdr+0x130>
	{
	  ZM_DEBUG (zm_dump (__LINE__));
	  return xyzModem_timeout;
	}
    }
  res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, (char *) &xyz.crc1);
c7e0f030:	e5953000 	ldr	r3, [r5]
c7e0f034:	e59f1104 	ldr	r1, [pc, #260]	; c7e0f140 <xyzModem_get_hdr+0x278>
c7e0f038:	e5d30000 	ldrb	r0, [r3]
c7e0f03c:	ebffff4d 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
  ZM_DEBUG (zm_save (xyz.crc1));
  if (!res)
c7e0f040:	e3500000 	cmp	r0, #0	; 0x0
c7e0f044:	0a00002e 	beq	c7e0f104 <xyzModem_get_hdr+0x23c>
    {
      ZM_DEBUG (zm_dump (__LINE__));
      return xyzModem_timeout;
    }
  if (xyz.crc_mode)
c7e0f048:	e5953428 	ldr	r3, [r5, #1064]
c7e0f04c:	e3530000 	cmp	r3, #0	; 0x0
c7e0f050:	0a000005 	beq	c7e0f06c <xyzModem_get_hdr+0x1a4>
    {
      res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, (char *) &xyz.crc2);
c7e0f054:	e5953000 	ldr	r3, [r5]
c7e0f058:	e59f10e4 	ldr	r1, [pc, #228]	; c7e0f144 <xyzModem_get_hdr+0x27c>
c7e0f05c:	e5d30000 	ldrb	r0, [r3]
c7e0f060:	ebffff44 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
      ZM_DEBUG (zm_save (xyz.crc2));
      if (!res)
c7e0f064:	e3500000 	cmp	r0, #0	; 0x0
c7e0f068:	0a000025 	beq	c7e0f104 <xyzModem_get_hdr+0x23c>
	  return xyzModem_timeout;
	}
    }
  ZM_DEBUG (zm_dump (__LINE__));
  /* Validate the message */
  if ((xyz.blk ^ xyz.cblk) != (unsigned char) 0xFF)
c7e0f06c:	e59f40c0 	ldr	r4, [pc, #192]	; c7e0f134 <xyzModem_get_hdr+0x26c>
c7e0f070:	e5d43409 	ldrb	r3, [r4, #1033]
c7e0f074:	e5d42408 	ldrb	r2, [r4, #1032]
c7e0f078:	e0233002 	eor	r3, r3, r2
c7e0f07c:	e35300ff 	cmp	r3, #255	; 0xff
c7e0f080:	0a000002 	beq	c7e0f090 <xyzModem_get_hdr+0x1c8>
    {
      ZM_DEBUG (zm_dprintf
		("Framing error - blk: %x/%x/%x\n", xyz.blk, xyz.cblk,
		 (xyz.blk ^ xyz.cblk)));
      ZM_DEBUG (zm_dump_buf (xyz.pkt, xyz.len));
      xyzModem_flush ();
c7e0f084:	ebffff50 	bl	c7e0edcc <xyzModem_flush>
c7e0f088:	e3e00005 	mvn	r0, #5	; 0x5
c7e0f08c:	ea00001f 	b	c7e0f110 <xyzModem_get_hdr+0x248>
      return xyzModem_frame;
    }
  /* Verify checksum/CRC */
  if (xyz.crc_mode)
c7e0f090:	e5943428 	ldr	r3, [r4, #1064]
c7e0f094:	e3530000 	cmp	r3, #0	; 0x0
	}
    }
  else
    {
      cksum = 0;
      for (i = 0; i < xyz.len; i++)
c7e0f098:	01a02003 	moveq	r2, r3
c7e0f09c:	05940410 	ldreq	r0, [r4, #1040]
c7e0f0a0:	01a01002 	moveq	r1, r2
      ZM_DEBUG (zm_dump_buf (xyz.pkt, xyz.len));
      xyzModem_flush ();
      return xyzModem_frame;
    }
  /* Verify checksum/CRC */
  if (xyz.crc_mode)
c7e0f0a4:	0a00000d 	beq	c7e0f0e0 <xyzModem_get_hdr+0x218>
    {
      cksum = cyg_crc16 (xyz.pkt, xyz.len);
c7e0f0a8:	e2840004 	add	r0, r4, #4	; 0x4
c7e0f0ac:	e5941410 	ldr	r1, [r4, #1040]
c7e0f0b0:	eb0046c3 	bl	c7e20bc4 <cyg_crc16>
      if (cksum != ((xyz.crc1 << 8) | xyz.crc2))
c7e0f0b4:	e5d4340b 	ldrb	r3, [r4, #1035]
c7e0f0b8:	e5d4240a 	ldrb	r2, [r4, #1034]
c7e0f0bc:	e1833402 	orr	r3, r3, r2, lsl #8
c7e0f0c0:	e1500003 	cmp	r0, r3
c7e0f0c4:	ea00000b 	b	c7e0f0f8 <xyzModem_get_hdr+0x230>
  else
    {
      cksum = 0;
      for (i = 0; i < xyz.len; i++)
	{
	  cksum += xyz.pkt[i];
c7e0f0c8:	e0833002 	add	r3, r3, r2
c7e0f0cc:	e5d33004 	ldrb	r3, [r3, #4]
	}
    }
  else
    {
      cksum = 0;
      for (i = 0; i < xyz.len; i++)
c7e0f0d0:	e2822001 	add	r2, r2, #1	; 0x1
	{
	  cksum += xyz.pkt[i];
c7e0f0d4:	e0813003 	add	r3, r1, r3
c7e0f0d8:	e1a03803 	lsl	r3, r3, #16
c7e0f0dc:	e1a01823 	lsr	r1, r3, #16
	}
    }
  else
    {
      cksum = 0;
      for (i = 0; i < xyz.len; i++)
c7e0f0e0:	e1520000 	cmp	r2, r0
c7e0f0e4:	e59f3048 	ldr	r3, [pc, #72]	; c7e0f134 <xyzModem_get_hdr+0x26c>
c7e0f0e8:	bafffff6 	blt	c7e0f0c8 <xyzModem_get_hdr+0x200>
	{
	  cksum += xyz.pkt[i];
	}
      if (xyz.crc1 != (cksum & 0xFF))
c7e0f0ec:	e5d3240a 	ldrb	r2, [r3, #1034]
c7e0f0f0:	e20130ff 	and	r3, r1, #255	; 0xff
c7e0f0f4:	e1520003 	cmp	r2, r3
c7e0f0f8:	13e00006 	mvnne	r0, #6	; 0x6
c7e0f0fc:	1a000003 	bne	c7e0f110 <xyzModem_get_hdr+0x248>
c7e0f100:	ea000001 	b	c7e0f10c <xyzModem_get_hdr+0x244>
c7e0f104:	e3e00002 	mvn	r0, #2	; 0x2
c7e0f108:	ea000000 	b	c7e0f110 <xyzModem_get_hdr+0x248>
c7e0f10c:	e3a00000 	mov	r0, #0	; 0x0
	  return xyzModem_cksum;
	}
    }
  /* If we get here, the message passes [structural] muster */
  return 0;
}
c7e0f110:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
	  return xyzModem_timeout;
	}
    }

  /* Header found, now read the data */
  res = CYGACC_COMM_IF_GETC_TIMEOUT (*xyz.__chan, (char *) &xyz.blk);
c7e0f114:	e59f4018 	ldr	r4, [pc, #24]	; c7e0f134 <xyzModem_get_hdr+0x26c>
c7e0f118:	e59f1028 	ldr	r1, [pc, #40]	; c7e0f148 <xyzModem_get_hdr+0x280>
c7e0f11c:	e5943000 	ldr	r3, [r4]
c7e0f120:	e5d30000 	ldrb	r0, [r3]
c7e0f124:	ebffff13 	bl	c7e0ed78 <CYGACC_COMM_IF_GETC_TIMEOUT>
  ZM_DEBUG (zm_save (xyz.blk));
  if (!res)
c7e0f128:	e3500000 	cmp	r0, #0	; 0x0
c7e0f12c:	0afffff4 	beq	c7e0f104 <xyzModem_get_hdr+0x23c>
c7e0f130:	eaffffa1 	b	c7e0efbc <xyzModem_get_hdr+0xf4>
c7e0f134:	c7e41a08 	.word	0xc7e41a08
c7e0f138:	0003d090 	.word	0x0003d090
c7e0f13c:	c7e41e11 	.word	0xc7e41e11
c7e0f140:	c7e41e12 	.word	0xc7e41e12
c7e0f144:	c7e41e13 	.word	0xc7e41e13
c7e0f148:	c7e41e10 	.word	0xc7e41e10

c7e0f14c <xyzModem_stream_read>:
  return -1;
}

int
xyzModem_stream_read (char *buf, int size, int *err)
{
c7e0f14c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0f150:	e1a0a000 	mov	sl, r0
c7e0f154:	e1a07001 	mov	r7, r1
c7e0f158:	e1a0b002 	mov	fp, r2
c7e0f15c:	e3e06004 	mvn	r6, #4	; 0x4
c7e0f160:	e3a09000 	mov	r9, #0	; 0x0
c7e0f164:	ea000090 	b	c7e0f3ac <xyzModem_stream_read+0x260>
  total = 0;
  stat = xyzModem_cancel;
  /* Try and get 'size' bytes into the buffer */
  while (!xyz.at_eof && (size > 0))
    {
      if (xyz.len == 0)
c7e0f168:	e5923410 	ldr	r3, [r2, #1040]
c7e0f16c:	e3530000 	cmp	r3, #0	; 0x0
c7e0f170:	03a04014 	moveq	r4, #20	; 0x14
c7e0f174:	0a00006d 	beq	c7e0f330 <xyzModem_stream_read+0x1e4>
c7e0f178:	ea000076 	b	c7e0f358 <xyzModem_stream_read+0x20c>
	{
	  retries = xyzModem_MAX_RETRIES;
	  while (retries-- > 0)
	    {
	      stat = xyzModem_get_hdr ();
c7e0f17c:	ebffff51 	bl	c7e0eec8 <xyzModem_get_hdr>
	      if (stat == 0)
c7e0f180:	e2506000 	subs	r6, r0, #0	; 0x0
		{
		  if (xyz.blk == xyz.next_blk)
c7e0f184:	e59fc248 	ldr	ip, [pc, #584]	; c7e0f3d4 <xyzModem_stream_read+0x288>
	{
	  retries = xyzModem_MAX_RETRIES;
	  while (retries-- > 0)
	    {
	      stat = xyzModem_get_hdr ();
	      if (stat == 0)
c7e0f188:	1a00003e 	bne	c7e0f288 <xyzModem_stream_read+0x13c>
		{
		  if (xyz.blk == xyz.next_blk)
c7e0f18c:	e5dc240c 	ldrb	r2, [ip, #1036]
c7e0f190:	e5dc1408 	ldrb	r1, [ip, #1032]
			    }
			}
#endif
		      break;
		    }
		  else if (xyz.blk == ((xyz.next_blk - 1) & 0xFF))
c7e0f194:	e2423001 	sub	r3, r2, #1	; 0x1
	  while (retries-- > 0)
	    {
	      stat = xyzModem_get_hdr ();
	      if (stat == 0)
		{
		  if (xyz.blk == xyz.next_blk)
c7e0f198:	e1510002 	cmp	r1, r2
			    }
			}
#endif
		      break;
		    }
		  else if (xyz.blk == ((xyz.next_blk - 1) & 0xFF))
c7e0f19c:	e20330ff 	and	r3, r3, #255	; 0xff
	  while (retries-- > 0)
	    {
	      stat = xyzModem_get_hdr ();
	      if (stat == 0)
		{
		  if (xyz.blk == xyz.next_blk)
c7e0f1a0:	1a000030 	bne	c7e0f268 <xyzModem_stream_read+0x11c>
		      ZM_DEBUG (zm_dprintf
				("ACK block %d (%d)\n", xyz.blk, __LINE__));
		      xyz.next_blk = (xyz.next_blk + 1) & 0xFF;

#if defined(xyzModem_zmodem) || defined(USE_YMODEM_LENGTH)
		      if (xyz.mode == xyzModem_xmodem || xyz.file_length == 0)
c7e0f1a4:	e59ce414 	ldr	lr, [ip, #1044]
		  if (xyz.blk == xyz.next_blk)
		    {
		      xyz.tx_ack = true;
		      ZM_DEBUG (zm_dprintf
				("ACK block %d (%d)\n", xyz.blk, __LINE__));
		      xyz.next_blk = (xyz.next_blk + 1) & 0xFF;
c7e0f1a8:	e2812001 	add	r2, r1, #1	; 0x1
	      stat = xyzModem_get_hdr ();
	      if (stat == 0)
		{
		  if (xyz.blk == xyz.next_blk)
		    {
		      xyz.tx_ack = true;
c7e0f1ac:	e3a03001 	mov	r3, #1	; 0x1
		      ZM_DEBUG (zm_dprintf
				("ACK block %d (%d)\n", xyz.blk, __LINE__));
		      xyz.next_blk = (xyz.next_blk + 1) & 0xFF;

#if defined(xyzModem_zmodem) || defined(USE_YMODEM_LENGTH)
		      if (xyz.mode == xyzModem_xmodem || xyz.file_length == 0)
c7e0f1b0:	e35e0001 	cmp	lr, #1	; 0x1
	      stat = xyzModem_get_hdr ();
	      if (stat == 0)
		{
		  if (xyz.blk == xyz.next_blk)
		    {
		      xyz.tx_ack = true;
c7e0f1b4:	e58c3430 	str	r3, [ip, #1072]
		      ZM_DEBUG (zm_dprintf
				("ACK block %d (%d)\n", xyz.blk, __LINE__));
		      xyz.next_blk = (xyz.next_blk + 1) & 0xFF;
c7e0f1b8:	e5cc240c 	strb	r2, [ip, #1036]

#if defined(xyzModem_zmodem) || defined(USE_YMODEM_LENGTH)
		      if (xyz.mode == xyzModem_xmodem || xyz.file_length == 0)
c7e0f1bc:	0a000002 	beq	c7e0f1cc <xyzModem_stream_read+0x80>
c7e0f1c0:	e59c3434 	ldr	r3, [ip, #1076]
c7e0f1c4:	e3530000 	cmp	r3, #0	; 0x0
c7e0f1c8:	1a000019 	bne	c7e0f234 <xyzModem_stream_read+0xe8>
		      if (1)
			{
#endif
			  /* Data blocks can be padded with ^Z (EOF) characters */
			  /* This code tries to detect and remove them */
			  if ((xyz.bufp[xyz.len - 1] == EOF) &&
c7e0f1cc:	e59f3200 	ldr	r3, [pc, #512]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f1d0:	e5932410 	ldr	r2, [r3, #1040]
c7e0f1d4:	e593c404 	ldr	ip, [r3, #1028]
c7e0f1d8:	e08c2002 	add	r2, ip, r2
c7e0f1dc:	e5523001 	ldrb	r3, [r2, #-1]
c7e0f1e0:	e353001a 	cmp	r3, #26	; 0x1a
c7e0f1e4:	1a000010 	bne	c7e0f22c <xyzModem_stream_read+0xe0>
c7e0f1e8:	e5523002 	ldrb	r3, [r2, #-2]
c7e0f1ec:	e353001a 	cmp	r3, #26	; 0x1a
c7e0f1f0:	1a00000d 	bne	c7e0f22c <xyzModem_stream_read+0xe0>
c7e0f1f4:	e5523003 	ldrb	r3, [r2, #-3]
c7e0f1f8:	e353001a 	cmp	r3, #26	; 0x1a
c7e0f1fc:	1a00000a 	bne	c7e0f22c <xyzModem_stream_read+0xe0>
c7e0f200:	ea000000 	b	c7e0f208 <xyzModem_stream_read+0xbc>
			      (xyz.bufp[xyz.len - 3] == EOF))
			    {
			      while (xyz.len
				     && (xyz.bufp[xyz.len - 1] == EOF))
				{
				  xyz.len--;
c7e0f204:	e5801410 	str	r1, [r0, #1040]
			  /* This code tries to detect and remove them */
			  if ((xyz.bufp[xyz.len - 1] == EOF) &&
			      (xyz.bufp[xyz.len - 2] == EOF) &&
			      (xyz.bufp[xyz.len - 3] == EOF))
			    {
			      while (xyz.len
c7e0f208:	e59f01c4 	ldr	r0, [pc, #452]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f20c:	e5903410 	ldr	r3, [r0, #1040]
c7e0f210:	e3530000 	cmp	r3, #0	; 0x0
c7e0f214:	e08c2003 	add	r2, ip, r3
				     && (xyz.bufp[xyz.len - 1] == EOF))
				{
				  xyz.len--;
c7e0f218:	e2431001 	sub	r1, r3, #1	; 0x1
			  /* This code tries to detect and remove them */
			  if ((xyz.bufp[xyz.len - 1] == EOF) &&
			      (xyz.bufp[xyz.len - 2] == EOF) &&
			      (xyz.bufp[xyz.len - 3] == EOF))
			    {
			      while (xyz.len
c7e0f21c:	0a000002 	beq	c7e0f22c <xyzModem_stream_read+0xe0>
c7e0f220:	e5523001 	ldrb	r3, [r2, #-1]
c7e0f224:	e353001a 	cmp	r3, #26	; 0x1a
c7e0f228:	0afffff5 	beq	c7e0f204 <xyzModem_stream_read+0xb8>
		       * See if accumulated length exceeds that of the file.
		       * If so, reduce size (i.e., cut out pad bytes)
		       * Only do this for Y-modem (and Z-modem should it ever
		       * be supported since it can fall back to Y-modem mode).
		       */
		      if (xyz.mode != xyzModem_xmodem && 0 != xyz.file_length)
c7e0f22c:	e35e0001 	cmp	lr, #1	; 0x1
c7e0f230:	0a000048 	beq	c7e0f358 <xyzModem_stream_read+0x20c>
c7e0f234:	e59fc198 	ldr	ip, [pc, #408]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f238:	e59c1434 	ldr	r1, [ip, #1076]
c7e0f23c:	e3510000 	cmp	r1, #0	; 0x0
c7e0f240:	0a000044 	beq	c7e0f358 <xyzModem_stream_read+0x20c>
			{
			  xyz.read_length += xyz.len;
c7e0f244:	e59c3438 	ldr	r3, [ip, #1080]
c7e0f248:	e59c0410 	ldr	r0, [ip, #1040]
c7e0f24c:	e0802003 	add	r2, r0, r3
			  if (xyz.read_length > xyz.file_length)
c7e0f250:	e1520001 	cmp	r2, r1
			    {
			      xyz.len -= (xyz.read_length - xyz.file_length);
c7e0f254:	80803001 	addhi	r3, r0, r1
c7e0f258:	80623003 	rsbhi	r3, r2, r3
		       * Only do this for Y-modem (and Z-modem should it ever
		       * be supported since it can fall back to Y-modem mode).
		       */
		      if (xyz.mode != xyzModem_xmodem && 0 != xyz.file_length)
			{
			  xyz.read_length += xyz.len;
c7e0f25c:	e58c2438 	str	r2, [ip, #1080]
			  if (xyz.read_length > xyz.file_length)
			    {
			      xyz.len -= (xyz.read_length - xyz.file_length);
c7e0f260:	858c3410 	strhi	r3, [ip, #1040]
c7e0f264:	ea00003b 	b	c7e0f358 <xyzModem_stream_read+0x20c>
			    }
			}
#endif
		      break;
		    }
		  else if (xyz.blk == ((xyz.next_blk - 1) & 0xFF))
c7e0f268:	e1510003 	cmp	r1, r3
		      stat = xyzModem_get_hdr ();
		      CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
		      ZM_DEBUG (zm_dprintf ("FINAL ACK (%d)\n", __LINE__));
		    }
		  xyz.at_eof = true;
		  break;
c7e0f26c:	13e06007 	mvnne	r6, #7	; 0x7
			    }
			}
#endif
		      break;
		    }
		  else if (xyz.blk == ((xyz.next_blk - 1) & 0xFF))
c7e0f270:	1a000024 	bne	c7e0f308 <xyzModem_stream_read+0x1bc>
		    {
		      /* Just re-ACK this so sender will get on with it */
		      CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
c7e0f274:	e59c3000 	ldr	r3, [ip]
c7e0f278:	e3a01006 	mov	r1, #6	; 0x6
c7e0f27c:	e5d30000 	ldrb	r0, [r3]
c7e0f280:	ebfffeba 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
c7e0f284:	ea000029 	b	c7e0f330 <xyzModem_stream_read+0x1e4>
		  else
		    {
		      stat = xyzModem_sequence;
		    }
		}
	      if (stat == xyzModem_cancel)
c7e0f288:	e3760005 	cmn	r6, #5	; 0x5
c7e0f28c:	0a00002c 	beq	c7e0f344 <xyzModem_stream_read+0x1f8>
		{
		  break;
		}
	      if (stat == xyzModem_eof)
c7e0f290:	e3760004 	cmn	r6, #4	; 0x4
c7e0f294:	1a00001b 	bne	c7e0f308 <xyzModem_stream_read+0x1bc>
		{
		  CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
c7e0f298:	e59f4134 	ldr	r4, [pc, #308]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f29c:	e3a01006 	mov	r1, #6	; 0x6
c7e0f2a0:	e5943000 	ldr	r3, [r4]
c7e0f2a4:	e5d30000 	ldrb	r0, [r3]
c7e0f2a8:	ebfffeb0 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
		  ZM_DEBUG (zm_dprintf ("ACK (%d)\n", __LINE__));
		  if (xyz.mode == xyzModem_ymodem)
c7e0f2ac:	e5943414 	ldr	r3, [r4, #1044]
c7e0f2b0:	e3530002 	cmp	r3, #2	; 0x2
c7e0f2b4:	1a00000f 	bne	c7e0f2f8 <xyzModem_stream_read+0x1ac>
		    {
		      CYGACC_COMM_IF_PUTC (*xyz.__chan,
c7e0f2b8:	e5941428 	ldr	r1, [r4, #1064]
c7e0f2bc:	e5943000 	ldr	r3, [r4]
c7e0f2c0:	e3510000 	cmp	r1, #0	; 0x0
c7e0f2c4:	e5d30000 	ldrb	r0, [r3]
c7e0f2c8:	13a01043 	movne	r1, #67	; 0x43
c7e0f2cc:	03a01015 	moveq	r1, #21	; 0x15
c7e0f2d0:	ebfffea6 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
					   (xyz.crc_mode ? 'C' : NAK));
		      xyz.total_retries++;
c7e0f2d4:	e5943418 	ldr	r3, [r4, #1048]
c7e0f2d8:	e2833001 	add	r3, r3, #1	; 0x1
c7e0f2dc:	e5843418 	str	r3, [r4, #1048]
		      ZM_DEBUG (zm_dprintf ("Reading Final Header\n"));
		      stat = xyzModem_get_hdr ();
c7e0f2e0:	ebfffef8 	bl	c7e0eec8 <xyzModem_get_hdr>
		      CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
c7e0f2e4:	e5943000 	ldr	r3, [r4]
		    {
		      CYGACC_COMM_IF_PUTC (*xyz.__chan,
					   (xyz.crc_mode ? 'C' : NAK));
		      xyz.total_retries++;
		      ZM_DEBUG (zm_dprintf ("Reading Final Header\n"));
		      stat = xyzModem_get_hdr ();
c7e0f2e8:	e1a06000 	mov	r6, r0
		      CYGACC_COMM_IF_PUTC (*xyz.__chan, ACK);
c7e0f2ec:	e3a01006 	mov	r1, #6	; 0x6
c7e0f2f0:	e5d30000 	ldrb	r0, [r3]
c7e0f2f4:	ebfffe9d 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
		      ZM_DEBUG (zm_dprintf ("FINAL ACK (%d)\n", __LINE__));
		    }
		  xyz.at_eof = true;
c7e0f2f8:	e59f30d4 	ldr	r3, [pc, #212]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f2fc:	e3a02001 	mov	r2, #1	; 0x1
c7e0f300:	e583242c 	str	r2, [r3, #1068]
c7e0f304:	ea00000c 	b	c7e0f33c <xyzModem_stream_read+0x1f0>
		  break;
		}
	      CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
c7e0f308:	e5951428 	ldr	r1, [r5, #1064]
c7e0f30c:	e5953000 	ldr	r3, [r5]
c7e0f310:	e3510000 	cmp	r1, #0	; 0x0
c7e0f314:	e5d30000 	ldrb	r0, [r3]
c7e0f318:	13a01043 	movne	r1, #67	; 0x43
c7e0f31c:	03a01015 	moveq	r1, #21	; 0x15
c7e0f320:	ebfffe92 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	      xyz.total_retries++;
c7e0f324:	e5953418 	ldr	r3, [r5, #1048]
c7e0f328:	e2833001 	add	r3, r3, #1	; 0x1
c7e0f32c:	e5853418 	str	r3, [r5, #1048]
  while (!xyz.at_eof && (size > 0))
    {
      if (xyz.len == 0)
	{
	  retries = xyzModem_MAX_RETRIES;
	  while (retries-- > 0)
c7e0f330:	e2544001 	subs	r4, r4, #1	; 0x1
		      ZM_DEBUG (zm_dprintf ("FINAL ACK (%d)\n", __LINE__));
		    }
		  xyz.at_eof = true;
		  break;
		}
	      CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
c7e0f334:	e59f5098 	ldr	r5, [pc, #152]	; c7e0f3d4 <xyzModem_stream_read+0x288>
  while (!xyz.at_eof && (size > 0))
    {
      if (xyz.len == 0)
	{
	  retries = xyzModem_MAX_RETRIES;
	  while (retries-- > 0)
c7e0f338:	2affff8f 	bcs	c7e0f17c <xyzModem_stream_read+0x30>
		}
	      CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
	      xyz.total_retries++;
	      ZM_DEBUG (zm_dprintf ("NAK (%d)\n", __LINE__));
	    }
	  if (stat < 0)
c7e0f33c:	e3560000 	cmp	r6, #0	; 0x0
c7e0f340:	aa000004 	bge	c7e0f358 <xyzModem_stream_read+0x20c>
	    {
	      *err = stat;
	      xyz.len = -1;
c7e0f344:	e59f3088 	ldr	r3, [pc, #136]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f348:	e3e02000 	mvn	r2, #0	; 0x0
	      xyz.total_retries++;
	      ZM_DEBUG (zm_dprintf ("NAK (%d)\n", __LINE__));
	    }
	  if (stat < 0)
	    {
	      *err = stat;
c7e0f34c:	e58b6000 	str	r6, [fp]
	      xyz.len = -1;
c7e0f350:	e5832410 	str	r2, [r3, #1040]
c7e0f354:	ea00001c 	b	c7e0f3cc <xyzModem_stream_read+0x280>
	      return total;
	    }
	}
      /* Don't "read" data from the EOF protocol package */
      if (!xyz.at_eof)
c7e0f358:	e59f5074 	ldr	r5, [pc, #116]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f35c:	e595342c 	ldr	r3, [r5, #1068]
c7e0f360:	e3530000 	cmp	r3, #0	; 0x0
c7e0f364:	1a000010 	bne	c7e0f3ac <xyzModem_stream_read+0x260>
	{
	  len = xyz.len;
c7e0f368:	e5954410 	ldr	r4, [r5, #1040]
	  if (size < len)
	    len = size;
	  memcpy (buf, xyz.bufp, len);
c7e0f36c:	e1a0000a 	mov	r0, sl
	    }
	}
      /* Don't "read" data from the EOF protocol package */
      if (!xyz.at_eof)
	{
	  len = xyz.len;
c7e0f370:	e1570004 	cmp	r7, r4
c7e0f374:	b1a04007 	movlt	r4, r7
c7e0f378:	a1a04004 	movge	r4, r4
	  if (size < len)
	    len = size;
	  memcpy (buf, xyz.bufp, len);
c7e0f37c:	e1a02004 	mov	r2, r4
c7e0f380:	e5951404 	ldr	r1, [r5, #1028]
c7e0f384:	eb004e2c 	bl	c7e22c3c <memcpy>
	  size -= len;
	  buf += len;
	  total += len;
	  xyz.len -= len;
c7e0f388:	e5952410 	ldr	r2, [r5, #1040]
	  xyz.bufp += len;
c7e0f38c:	e5953404 	ldr	r3, [r5, #1028]
	    len = size;
	  memcpy (buf, xyz.bufp, len);
	  size -= len;
	  buf += len;
	  total += len;
	  xyz.len -= len;
c7e0f390:	e0642002 	rsb	r2, r4, r2
	  xyz.bufp += len;
c7e0f394:	e0833004 	add	r3, r3, r4
c7e0f398:	e5853404 	str	r3, [r5, #1028]
	    len = size;
	  memcpy (buf, xyz.bufp, len);
	  size -= len;
	  buf += len;
	  total += len;
	  xyz.len -= len;
c7e0f39c:	e5852410 	str	r2, [r5, #1040]
	{
	  len = xyz.len;
	  if (size < len)
	    len = size;
	  memcpy (buf, xyz.bufp, len);
	  size -= len;
c7e0f3a0:	e0647007 	rsb	r7, r4, r7
	  buf += len;
c7e0f3a4:	e08aa004 	add	sl, sl, r4
	  total += len;
c7e0f3a8:	e0899004 	add	r9, r9, r4
  int retries;

  total = 0;
  stat = xyzModem_cancel;
  /* Try and get 'size' bytes into the buffer */
  while (!xyz.at_eof && (size > 0))
c7e0f3ac:	e59f2020 	ldr	r2, [pc, #32]	; c7e0f3d4 <xyzModem_stream_read+0x288>
c7e0f3b0:	e592342c 	ldr	r3, [r2, #1068]
c7e0f3b4:	e2733001 	rsbs	r3, r3, #1	; 0x1
c7e0f3b8:	33a03000 	movcc	r3, #0	; 0x0
c7e0f3bc:	e3570000 	cmp	r7, #0	; 0x0
c7e0f3c0:	d3a03000 	movle	r3, #0	; 0x0
c7e0f3c4:	e3530000 	cmp	r3, #0	; 0x0
c7e0f3c8:	1affff66 	bne	c7e0f168 <xyzModem_stream_read+0x1c>
	  xyz.len -= len;
	  xyz.bufp += len;
	}
    }
  return total;
}
c7e0f3cc:	e1a00009 	mov	r0, r9
c7e0f3d0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0f3d4:	c7e41a08 	.word	0xc7e41a08

c7e0f3d8 <xyzModem_stream_open>:
  return 0;
}

int
xyzModem_stream_open (connection_info_t * info, int *err)
{
c7e0f3d8:	e92d44f3 	push	{r0, r1, r4, r5, r6, r7, sl, lr}
  CYGACC_COMM_IF_CONTROL (*xyz.__chan, __COMMCTL_SET_TIMEOUT,
			  xyzModem_CHAR_TIMEOUT);
#else
/* TODO: CHECK ! */
  int dummy = 0;
  xyz.__chan = &dummy;
c7e0f3dc:	e59f4148 	ldr	r4, [pc, #328]	; c7e0f52c <xyzModem_stream_open+0x154>
  CYGACC_CALL_IF_SET_CONSOLE_COMM (console_chan);
  CYGACC_COMM_IF_CONTROL (*xyz.__chan, __COMMCTL_SET_TIMEOUT,
			  xyzModem_CHAR_TIMEOUT);
#else
/* TODO: CHECK ! */
  int dummy = 0;
c7e0f3e0:	e3a05000 	mov	r5, #0	; 0x0
c7e0f3e4:	e28d3008 	add	r3, sp, #8	; 0x8
  xyz.__chan = &dummy;
#endif
  xyz.len = 0;
  xyz.crc_mode = true;
c7e0f3e8:	e3a02001 	mov	r2, #1	; 0x1
  CYGACC_CALL_IF_SET_CONSOLE_COMM (console_chan);
  CYGACC_COMM_IF_CONTROL (*xyz.__chan, __COMMCTL_SET_TIMEOUT,
			  xyzModem_CHAR_TIMEOUT);
#else
/* TODO: CHECK ! */
  int dummy = 0;
c7e0f3ec:	e5235004 	str	r5, [r3, #-4]!
  xyz.__chan = &dummy;
#endif
  xyz.len = 0;
  xyz.crc_mode = true;
c7e0f3f0:	e5842428 	str	r2, [r4, #1064]
#else
/* TODO: CHECK ! */
  int dummy = 0;
  xyz.__chan = &dummy;
#endif
  xyz.len = 0;
c7e0f3f4:	e5845410 	str	r5, [r4, #1040]
  xyz.crc_mode = true;
  xyz.at_eof = false;
c7e0f3f8:	e584542c 	str	r5, [r4, #1068]
  xyz.tx_ack = false;
c7e0f3fc:	e5845430 	str	r5, [r4, #1072]
  xyz.mode = info->mode;
c7e0f400:	e5902004 	ldr	r2, [r0, #4]
  CYGACC_COMM_IF_CONTROL (*xyz.__chan, __COMMCTL_SET_TIMEOUT,
			  xyzModem_CHAR_TIMEOUT);
#else
/* TODO: CHECK ! */
  int dummy = 0;
  xyz.__chan = &dummy;
c7e0f404:	e5843000 	str	r3, [r4]
#ifdef USE_YMODEM_LENGTH
  xyz.read_length = 0;
  xyz.file_length = 0;
#endif

  CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
c7e0f408:	e1a00005 	mov	r0, r5
#endif
  xyz.len = 0;
  xyz.crc_mode = true;
  xyz.at_eof = false;
  xyz.tx_ack = false;
  xyz.mode = info->mode;
c7e0f40c:	e5842414 	str	r2, [r4, #1044]
  xyz.total_retries = 0;
c7e0f410:	e5845418 	str	r5, [r4, #1048]
  xyz.total_SOH = 0;
c7e0f414:	e584541c 	str	r5, [r4, #1052]
  xyz.total_STX = 0;
c7e0f418:	e5845420 	str	r5, [r4, #1056]
  xyz.total_CAN = 0;
c7e0f41c:	e5845424 	str	r5, [r4, #1060]
#ifdef USE_YMODEM_LENGTH
  xyz.read_length = 0;
c7e0f420:	e5845438 	str	r5, [r4, #1080]
  xyz.file_length = 0;
c7e0f424:	e5845434 	str	r5, [r4, #1076]
  return 0;
}

int
xyzModem_stream_open (connection_info_t * info, int *err)
{
c7e0f428:	e1a0a001 	mov	sl, r1
#ifdef USE_YMODEM_LENGTH
  xyz.read_length = 0;
  xyz.file_length = 0;
#endif

  CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
c7e0f42c:	e3a01043 	mov	r1, #67	; 0x43
c7e0f430:	ebfffe4e 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>

  if (xyz.mode == xyzModem_xmodem)
c7e0f434:	e5943414 	ldr	r3, [r4, #1044]
c7e0f438:	e3530001 	cmp	r3, #1	; 0x1
c7e0f43c:	11a04005 	movne	r4, r5
c7e0f440:	13a07014 	movne	r7, #20	; 0x14
c7e0f444:	13a0600a 	movne	r6, #10	; 0xa
    {
      /* X-modem doesn't have an information header - exit here */
      xyz.next_blk = 1;
c7e0f448:	05c4340c 	strbeq	r3, [r4, #1036]
c7e0f44c:	01a00005 	moveq	r0, r5
  xyz.file_length = 0;
#endif

  CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));

  if (xyz.mode == xyzModem_xmodem)
c7e0f450:	1a000030 	bne	c7e0f518 <xyzModem_stream_open+0x140>
c7e0f454:	ea000033 	b	c7e0f528 <xyzModem_stream_open+0x150>
      return 0;
    }

  while (retries-- > 0)
    {
      stat = xyzModem_get_hdr ();
c7e0f458:	ebfffe9a 	bl	c7e0eec8 <xyzModem_get_hdr>
      if (stat == 0)
c7e0f45c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0f460:	1a000015 	bne	c7e0f4bc <xyzModem_stream_open+0xe4>
	{
	  /* Y-modem file information header */
	  if (xyz.blk == 0)
c7e0f464:	e59f30c0 	ldr	r3, [pc, #192]	; c7e0f52c <xyzModem_stream_open+0x154>
c7e0f468:	e5d33408 	ldrb	r3, [r3, #1032]
c7e0f46c:	e3530000 	cmp	r3, #0	; 0x0
c7e0f470:	1a00000a 	bne	c7e0f4a0 <xyzModem_stream_open+0xc8>
	    {
#ifdef USE_YMODEM_LENGTH
	      /* skip filename */
	      while (*xyz.bufp++);
c7e0f474:	e59f40b0 	ldr	r4, [pc, #176]	; c7e0f52c <xyzModem_stream_open+0x154>
c7e0f478:	e5940404 	ldr	r0, [r4, #1028]
c7e0f47c:	e4d02001 	ldrb	r2, [r0], #1
c7e0f480:	e3520000 	cmp	r2, #0	; 0x0
c7e0f484:	e5840404 	str	r0, [r4, #1028]
c7e0f488:	1afffff9 	bne	c7e0f474 <xyzModem_stream_open+0x9c>
	      /* get the length */
	      parse_num ((char *) xyz.bufp, &xyz.file_length, NULL, " ");
c7e0f48c:	e59f309c 	ldr	r3, [pc, #156]	; c7e0f530 <xyzModem_stream_open+0x158>
c7e0f490:	e59f109c 	ldr	r1, [pc, #156]	; c7e0f534 <xyzModem_stream_open+0x15c>
c7e0f494:	ebfffdb1 	bl	c7e0eb60 <parse_num>
#endif
	      /* The rest of the file name data block quietly discarded */
	      xyz.tx_ack = true;
c7e0f498:	e3a03001 	mov	r3, #1	; 0x1
c7e0f49c:	e5843430 	str	r3, [r4, #1072]
	    }
	  xyz.next_blk = 1;
c7e0f4a0:	e59f3084 	ldr	r3, [pc, #132]	; c7e0f52c <xyzModem_stream_open+0x154>
	  xyz.len = 0;
c7e0f4a4:	e3a01000 	mov	r1, #0	; 0x0
	      parse_num ((char *) xyz.bufp, &xyz.file_length, NULL, " ");
#endif
	      /* The rest of the file name data block quietly discarded */
	      xyz.tx_ack = true;
	    }
	  xyz.next_blk = 1;
c7e0f4a8:	e3a02001 	mov	r2, #1	; 0x1
c7e0f4ac:	e5c3240c 	strb	r2, [r3, #1036]
	  xyz.len = 0;
c7e0f4b0:	e5831410 	str	r1, [r3, #1040]
c7e0f4b4:	e1a00001 	mov	r0, r1
c7e0f4b8:	ea00001a 	b	c7e0f528 <xyzModem_stream_open+0x150>
	  return 0;
	}
      else if (stat == xyzModem_timeout)
c7e0f4bc:	e3740003 	cmn	r4, #3	; 0x3
c7e0f4c0:	1a000012 	bne	c7e0f510 <xyzModem_stream_open+0x138>
	{
	  if (--crc_retries <= 0)
	    xyz.crc_mode = false;
	  CYGACC_CALL_IF_DELAY_US (5 * 100000);	/* Extra delay for startup */
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
c7e0f4c4:	e59f5060 	ldr	r5, [pc, #96]	; c7e0f52c <xyzModem_stream_open+0x154>
	  xyz.len = 0;
	  return 0;
	}
      else if (stat == xyzModem_timeout)
	{
	  if (--crc_retries <= 0)
c7e0f4c8:	e2466001 	sub	r6, r6, #1	; 0x1
c7e0f4cc:	e3560000 	cmp	r6, #0	; 0x0
	    xyz.crc_mode = false;
c7e0f4d0:	d3a02000 	movle	r2, #0	; 0x0
c7e0f4d4:	d1a03005 	movle	r3, r5
c7e0f4d8:	d5832428 	strle	r2, [r3, #1064]
	  CYGACC_CALL_IF_DELAY_US (5 * 100000);	/* Extra delay for startup */
c7e0f4dc:	e59f0054 	ldr	r0, [pc, #84]	; c7e0f538 <xyzModem_stream_open+0x160>
c7e0f4e0:	eb004e78 	bl	c7e22ec8 <udelay>
	  CYGACC_COMM_IF_PUTC (*xyz.__chan, (xyz.crc_mode ? 'C' : NAK));
c7e0f4e4:	e5951428 	ldr	r1, [r5, #1064]
c7e0f4e8:	e5953000 	ldr	r3, [r5]
c7e0f4ec:	e3510000 	cmp	r1, #0	; 0x0
c7e0f4f0:	e5d30000 	ldrb	r0, [r3]
c7e0f4f4:	13a01043 	movne	r1, #67	; 0x43
c7e0f4f8:	03a01015 	moveq	r1, #21	; 0x15
c7e0f4fc:	ebfffe1b 	bl	c7e0ed70 <CYGACC_COMM_IF_PUTC>
	  xyz.total_retries++;
c7e0f500:	e5953418 	ldr	r3, [r5, #1048]
c7e0f504:	e2833001 	add	r3, r3, #1	; 0x1
c7e0f508:	e5853418 	str	r3, [r5, #1048]
c7e0f50c:	ea000001 	b	c7e0f518 <xyzModem_stream_open+0x140>
	  ZM_DEBUG (zm_dprintf ("NAK (%d)\n", __LINE__));
	}
      if (stat == xyzModem_cancel)
c7e0f510:	e3740005 	cmn	r4, #5	; 0x5
c7e0f514:	0a000001 	beq	c7e0f520 <xyzModem_stream_open+0x148>
      /* X-modem doesn't have an information header - exit here */
      xyz.next_blk = 1;
      return 0;
    }

  while (retries-- > 0)
c7e0f518:	e2577001 	subs	r7, r7, #1	; 0x1
c7e0f51c:	2affffcd 	bcs	c7e0f458 <xyzModem_stream_open+0x80>
      if (stat == xyzModem_cancel)
	{
	  break;
	}
    }
  *err = stat;
c7e0f520:	e58a4000 	str	r4, [sl]
c7e0f524:	e3e00000 	mvn	r0, #0	; 0x0
  ZM_DEBUG (zm_flush ());
  return -1;
}
c7e0f528:	e8bd84fc 	pop	{r2, r3, r4, r5, r6, r7, sl, pc}
c7e0f52c:	c7e41a08 	.word	0xc7e41a08
c7e0f530:	c7e34f60 	.word	0xc7e34f60
c7e0f534:	c7e41e3c 	.word	0xc7e41e3c
c7e0f538:	0007a120 	.word	0x0007a120

c7e0f53c <get_dev>:
};

DECLARE_GLOBAL_DATA_PTR;

block_dev_desc_t *get_dev(const char *ifname, int dev)
{
c7e0f53c:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	const struct block_drvr *drvr = block_drvr;
	block_dev_desc_t* (*reloc_get_dev)(int dev);
	char *name;

	if (!ifname)
c7e0f540:	e2507000 	subs	r7, r0, #0	; 0x0
};

DECLARE_GLOBAL_DATA_PTR;

block_dev_desc_t *get_dev(const char *ifname, int dev)
{
c7e0f544:	e1a0a001 	mov	sl, r1
	const struct block_drvr *drvr = block_drvr;
	block_dev_desc_t* (*reloc_get_dev)(int dev);
	char *name;

	if (!ifname)
c7e0f548:	159f5048 	ldrne	r5, [pc, #72]	; c7e0f598 <get_dev+0x5c>
c7e0f54c:	0a00000f 	beq	c7e0f590 <get_dev+0x54>
c7e0f550:	ea00000b 	b	c7e0f584 <get_dev+0x48>
#ifdef CONFIG_NEEDS_MANUAL_RELOC
	name += gd->reloc_off;
#endif
	while (drvr->name) {
		name = drvr->name;
		reloc_get_dev = drvr->get_dev;
c7e0f554:	e5156004 	ldr	r6, [r5, #-4]
#ifdef CONFIG_NEEDS_MANUAL_RELOC
		name += gd->reloc_off;
		reloc_get_dev += gd->reloc_off;
#endif
		if (strncmp(ifname, name, strlen(name)) == 0)
c7e0f558:	eb004cf6 	bl	c7e22938 <strlen>
c7e0f55c:	e1a01004 	mov	r1, r4
c7e0f560:	e1a02000 	mov	r2, r0
c7e0f564:	e1a00007 	mov	r0, r7
c7e0f568:	eb004cca 	bl	c7e22898 <strncmp>
c7e0f56c:	e3500000 	cmp	r0, #0	; 0x0
c7e0f570:	e2855008 	add	r5, r5, #8	; 0x8
c7e0f574:	1a000002 	bne	c7e0f584 <get_dev+0x48>
			return reloc_get_dev(dev);
c7e0f578:	e1a0000a 	mov	r0, sl
c7e0f57c:	e12fff36 	blx	r6
c7e0f580:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

	name = drvr->name;
#ifdef CONFIG_NEEDS_MANUAL_RELOC
	name += gd->reloc_off;
#endif
	while (drvr->name) {
c7e0f584:	e5154008 	ldr	r4, [r5, #-8]
c7e0f588:	e2540000 	subs	r0, r4, #0	; 0x0
c7e0f58c:	1afffff0 	bne	c7e0f554 <get_dev+0x18>
c7e0f590:	e3a00000 	mov	r0, #0	; 0x0
		if (strncmp(ifname, name, strlen(name)) == 0)
			return reloc_get_dev(dev);
		drvr++;
	}
	return NULL;
}
c7e0f594:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e0f598:	c7e2c5cc 	.word	0xc7e2c5cc

c7e0f59c <get_device>:
	return -1;
}

int get_device(const char *ifname, const char *dev_str,
	       block_dev_desc_t **dev_desc)
{
c7e0f59c:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
c7e0f5a0:	e1a06001 	mov	r6, r1
c7e0f5a4:	e1a05000 	mov	r5, r0
c7e0f5a8:	e1a07002 	mov	r7, r2
	char *ep;
	int dev;

	dev = simple_strtoul(dev_str, &ep, 16);
c7e0f5ac:	e1a00001 	mov	r0, r1
c7e0f5b0:	e3a02010 	mov	r2, #16	; 0x10
c7e0f5b4:	e28d1004 	add	r1, sp, #4	; 0x4
c7e0f5b8:	eb004e68 	bl	c7e22f60 <simple_strtoul>
	if (*ep) {
c7e0f5bc:	e59d3004 	ldr	r3, [sp, #4]
c7e0f5c0:	e5d33000 	ldrb	r3, [r3]
c7e0f5c4:	e3530000 	cmp	r3, #0	; 0x0
		printf("** Bad device specification %s %s **\n",
c7e0f5c8:	11a01005 	movne	r1, r5
c7e0f5cc:	11a02006 	movne	r2, r6
c7e0f5d0:	159f0044 	ldrne	r0, [pc, #68]	; c7e0f61c <get_device+0x80>
c7e0f5d4:	1a00000c 	bne	c7e0f60c <get_device+0x70>
	       block_dev_desc_t **dev_desc)
{
	char *ep;
	int dev;

	dev = simple_strtoul(dev_str, &ep, 16);
c7e0f5d8:	e1a04000 	mov	r4, r0
		printf("** Bad device specification %s %s **\n",
		       ifname, dev_str);
		return -1;
	}

	*dev_desc = get_dev(ifname, dev);
c7e0f5dc:	e1a01004 	mov	r1, r4
c7e0f5e0:	e1a00005 	mov	r0, r5
c7e0f5e4:	ebffffd4 	bl	c7e0f53c <get_dev>
	if (!(*dev_desc) || ((*dev_desc)->type == DEV_TYPE_UNKNOWN)) {
c7e0f5e8:	e3500000 	cmp	r0, #0	; 0x0
		printf("** Bad device specification %s %s **\n",
		       ifname, dev_str);
		return -1;
	}

	*dev_desc = get_dev(ifname, dev);
c7e0f5ec:	e5870000 	str	r0, [r7]
	if (!(*dev_desc) || ((*dev_desc)->type == DEV_TYPE_UNKNOWN)) {
c7e0f5f0:	0a000002 	beq	c7e0f600 <get_device+0x64>
c7e0f5f4:	e5d0300b 	ldrb	r3, [r0, #11]
c7e0f5f8:	e35300ff 	cmp	r3, #255	; 0xff
c7e0f5fc:	1a000004 	bne	c7e0f614 <get_device+0x78>
		printf("** Bad device %s %s **\n", ifname, dev_str);
c7e0f600:	e59f0018 	ldr	r0, [pc, #24]	; c7e0f620 <get_device+0x84>
c7e0f604:	e1a01005 	mov	r1, r5
c7e0f608:	e1a02006 	mov	r2, r6
c7e0f60c:	ebffe511 	bl	c7e08a58 <printf>
c7e0f610:	e3e04000 	mvn	r4, #0	; 0x0
		return -1;
	}

	return dev;
}
c7e0f614:	e1a00004 	mov	r0, r4
c7e0f618:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
c7e0f61c:	c7e32921 	.word	0xc7e32921
c7e0f620:	c7e32947 	.word	0xc7e32947

c7e0f624 <get_partition_info>:

#endif

int get_partition_info(block_dev_desc_t *dev_desc, int part
					, disk_partition_t *info)
{
c7e0f624:	e92d4010 	push	{r4, lr}
#ifdef CONFIG_PARTITION_UUIDS
	/* The common case is no UUID support */
	info->uuid[0] = 0;
#endif

	switch (dev_desc->part_type) {
c7e0f628:	e5d03008 	ldrb	r3, [r0, #8]
c7e0f62c:	e3530002 	cmp	r3, #2	; 0x2
c7e0f630:	1a000002 	bne	c7e0f640 <get_partition_info+0x1c>
		break;
#endif

#ifdef CONFIG_DOS_PARTITION
	case PART_TYPE_DOS:
		if (get_partition_info_dos(dev_desc, part, info) == 0) {
c7e0f634:	eb000234 	bl	c7e0ff0c <get_partition_info_dos>
c7e0f638:	e3500000 	cmp	r0, #0	; 0x0
c7e0f63c:	08bd8010 	popeq	{r4, pc}
c7e0f640:	e3e00000 	mvn	r0, #0	; 0x0
		break;
	}
#endif

	return -1;
}
c7e0f644:	e8bd8010 	pop	{r4, pc}

c7e0f648 <get_device_and_partition>:
#define PART_AUTO -1
#define MAX_SEARCH_PARTITIONS 16
int get_device_and_partition(const char *ifname, const char *dev_part_str,
			     block_dev_desc_t **dev_desc,
			     disk_partition_t *info, int allow_whole_dev)
{
c7e0f648:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int p;
	int part;
	disk_partition_t tmpinfo;

	/* If no dev_part_str, use bootdevice environment variable */
	if (!dev_part_str || !strlen(dev_part_str) ||
c7e0f64c:	e2515000 	subs	r5, r1, #0	; 0x0
#define PART_AUTO -1
#define MAX_SEARCH_PARTITIONS 16
int get_device_and_partition(const char *ifname, const char *dev_part_str,
			     block_dev_desc_t **dev_desc,
			     disk_partition_t *info, int allow_whole_dev)
{
c7e0f650:	e24dd058 	sub	sp, sp, #88	; 0x58
c7e0f654:	e1a0a000 	mov	sl, r0
c7e0f658:	e1a0b002 	mov	fp, r2
c7e0f65c:	e1a07003 	mov	r7, r3
	int p;
	int part;
	disk_partition_t tmpinfo;

	/* If no dev_part_str, use bootdevice environment variable */
	if (!dev_part_str || !strlen(dev_part_str) ||
c7e0f660:	0a000008 	beq	c7e0f688 <get_device_and_partition+0x40>
c7e0f664:	e1a00005 	mov	r0, r5
c7e0f668:	eb004cb2 	bl	c7e22938 <strlen>
c7e0f66c:	e3500000 	cmp	r0, #0	; 0x0
c7e0f670:	0a000004 	beq	c7e0f688 <get_device_and_partition+0x40>
c7e0f674:	e1a00005 	mov	r0, r5
c7e0f678:	e59f128c 	ldr	r1, [pc, #652]	; c7e0f90c <get_device_and_partition+0x2c4>
c7e0f67c:	eb004c77 	bl	c7e22860 <strcmp>
c7e0f680:	e3500000 	cmp	r0, #0	; 0x0
c7e0f684:	1a000008 	bne	c7e0f6ac <get_device_and_partition+0x64>
	    !strcmp(dev_part_str, "-"))
		dev_part_str = getenv("bootdevice");
c7e0f688:	e59f0280 	ldr	r0, [pc, #640]	; c7e0f910 <get_device_and_partition+0x2c8>
c7e0f68c:	ebffde82 	bl	c7e0709c <getenv>

	/* If still no dev_part_str, it's an error */
	if (!dev_part_str) {
c7e0f690:	e2501000 	subs	r1, r0, #0	; 0x0
		printf("** No device specified **\n");
		goto cleanup;
c7e0f694:	11a05001 	movne	r5, r1
	if (!dev_part_str || !strlen(dev_part_str) ||
	    !strcmp(dev_part_str, "-"))
		dev_part_str = getenv("bootdevice");

	/* If still no dev_part_str, it's an error */
	if (!dev_part_str) {
c7e0f698:	1a000003 	bne	c7e0f6ac <get_device_and_partition+0x64>
		printf("** No device specified **\n");
c7e0f69c:	e59f0270 	ldr	r0, [pc, #624]	; c7e0f914 <get_device_and_partition+0x2cc>
c7e0f6a0:	e1a09001 	mov	r9, r1
c7e0f6a4:	ebffe4eb 	bl	c7e08a58 <printf>
c7e0f6a8:	ea000091 	b	c7e0f8f4 <get_device_and_partition+0x2ac>
		goto cleanup;
	}

	/* Separate device and partition ID specification */
	part_str = strchr(dev_part_str, ':');
c7e0f6ac:	e1a00005 	mov	r0, r5
c7e0f6b0:	e3a0103a 	mov	r1, #58	; 0x3a
c7e0f6b4:	eb004c8b 	bl	c7e228e8 <strchr>
	if (part_str) {
c7e0f6b8:	e2504000 	subs	r4, r0, #0	; 0x0
c7e0f6bc:	01a06005 	moveq	r6, r5
c7e0f6c0:	01a09004 	moveq	r9, r4
c7e0f6c4:	0a000007 	beq	c7e0f6e8 <get_device_and_partition+0xa0>
		dup_str = strdup(dev_part_str);
c7e0f6c8:	e1a00005 	mov	r0, r5
c7e0f6cc:	eb004dd5 	bl	c7e22e28 <strdup>
		dup_str[part_str - dev_part_str] = 0;
c7e0f6d0:	e0652004 	rsb	r2, r5, r4
c7e0f6d4:	e3a03000 	mov	r3, #0	; 0x0
	}

	/* Separate device and partition ID specification */
	part_str = strchr(dev_part_str, ':');
	if (part_str) {
		dup_str = strdup(dev_part_str);
c7e0f6d8:	e1a09000 	mov	r9, r0
		dup_str[part_str - dev_part_str] = 0;
c7e0f6dc:	e7c03002 	strb	r3, [r0, r2]
		dev_str = dup_str;
		part_str++;
c7e0f6e0:	e2844001 	add	r4, r4, #1	; 0x1
c7e0f6e4:	e1a06000 	mov	r6, r0
	} else {
		dev_str = dev_part_str;
	}

	/* Look up the device */
	dev = get_device(ifname, dev_str, dev_desc);
c7e0f6e8:	e1a0000a 	mov	r0, sl
c7e0f6ec:	e1a01006 	mov	r1, r6
c7e0f6f0:	e1a0200b 	mov	r2, fp
c7e0f6f4:	ebffffa8 	bl	c7e0f59c <get_device>
	if (dev < 0)
c7e0f6f8:	e3500000 	cmp	r0, #0	; 0x0
c7e0f6fc:	ba00007c 	blt	c7e0f8f4 <get_device_and_partition+0x2ac>
		goto cleanup;

	/* Convert partition ID string to number */
	if (!part_str || !*part_str) {
c7e0f700:	e3540000 	cmp	r4, #0	; 0x0
c7e0f704:	0a000018 	beq	c7e0f76c <get_device_and_partition+0x124>
c7e0f708:	e5d43000 	ldrb	r3, [r4]
c7e0f70c:	e3530000 	cmp	r3, #0	; 0x0
c7e0f710:	0a000015 	beq	c7e0f76c <get_device_and_partition+0x124>
		part = PART_UNSPECIFIED;
	} else if (!strcmp(part_str, "auto")) {
c7e0f714:	e1a00004 	mov	r0, r4
c7e0f718:	e59f11f8 	ldr	r1, [pc, #504]	; c7e0f918 <get_device_and_partition+0x2d0>
c7e0f71c:	eb004c4f 	bl	c7e22860 <strcmp>
c7e0f720:	e3500000 	cmp	r0, #0	; 0x0
c7e0f724:	03e04000 	mvneq	r4, #0	; 0x0
c7e0f728:	0a000010 	beq	c7e0f770 <get_device_and_partition+0x128>
		part = PART_AUTO;
	} else {
		/* Something specified -> use exactly that */
		part = (int)simple_strtoul(part_str, &ep, 16);
c7e0f72c:	e1a00004 	mov	r0, r4
c7e0f730:	e28d1054 	add	r1, sp, #84	; 0x54
c7e0f734:	e3a02010 	mov	r2, #16	; 0x10
c7e0f738:	eb004e08 	bl	c7e22f60 <simple_strtoul>
		/*
		 * Less than whole string converted,
		 * or request for whole device, but caller requires partition.
		 */
		if (*ep || (part == 0 && !allow_whole_dev)) {
c7e0f73c:	e59d3054 	ldr	r3, [sp, #84]
c7e0f740:	e5d33000 	ldrb	r3, [r3]
c7e0f744:	e3530000 	cmp	r3, #0	; 0x0
c7e0f748:	1a000003 	bne	c7e0f75c <get_device_and_partition+0x114>
		part = PART_UNSPECIFIED;
	} else if (!strcmp(part_str, "auto")) {
		part = PART_AUTO;
	} else {
		/* Something specified -> use exactly that */
		part = (int)simple_strtoul(part_str, &ep, 16);
c7e0f74c:	e1a04000 	mov	r4, r0
		/*
		 * Less than whole string converted,
		 * or request for whole device, but caller requires partition.
		 */
		if (*ep || (part == 0 && !allow_whole_dev)) {
c7e0f750:	e59d0078 	ldr	r0, [sp, #120]
c7e0f754:	e1940000 	orrs	r0, r4, r0
c7e0f758:	1a000004 	bne	c7e0f770 <get_device_and_partition+0x128>
			printf("** Bad partition specification %s %s **\n",
c7e0f75c:	e1a0100a 	mov	r1, sl
c7e0f760:	e1a02005 	mov	r2, r5
c7e0f764:	e59f01b0 	ldr	r0, [pc, #432]	; c7e0f91c <get_device_and_partition+0x2d4>
c7e0f768:	ea00000d 	b	c7e0f7a4 <get_device_and_partition+0x15c>
			    ifname, dev_part_str);
			goto cleanup;
c7e0f76c:	e3e04001 	mvn	r4, #1	; 0x1

	/*
	 * No partition table on device,
	 * or user requested partition 0 (entire device).
	 */
	if (((*dev_desc)->part_type == PART_TYPE_UNKNOWN) ||
c7e0f770:	e59b2000 	ldr	r2, [fp]
c7e0f774:	e5d23008 	ldrb	r3, [r2, #8]
c7e0f778:	e3540000 	cmp	r4, #0	; 0x0
c7e0f77c:	13530000 	cmpne	r3, #0	; 0x0
c7e0f780:	13a03000 	movne	r3, #0	; 0x0
c7e0f784:	03a03001 	moveq	r3, #1	; 0x1
c7e0f788:	1a000018 	bne	c7e0f7f0 <get_device_and_partition+0x1a8>
	    (part == 0)) {
		if (!(*dev_desc)->lba) {
c7e0f78c:	e5921010 	ldr	r1, [r2, #16]
c7e0f790:	e3510000 	cmp	r1, #0	; 0x0
c7e0f794:	1a000004 	bne	c7e0f7ac <get_device_and_partition+0x164>
			printf("** Bad device size - %s %s **\n", ifname,
c7e0f798:	e59f0180 	ldr	r0, [pc, #384]	; c7e0f920 <get_device_and_partition+0x2d8>
c7e0f79c:	e1a0100a 	mov	r1, sl
c7e0f7a0:	e1a02006 	mov	r2, r6
c7e0f7a4:	ebffe4ab 	bl	c7e08a58 <printf>
c7e0f7a8:	ea000051 	b	c7e0f8f4 <get_device_and_partition+0x2ac>
		/*
		 * If user specified a partition ID other than 0,
		 * or the calling command only accepts partitions,
		 * it's an error.
		 */
		if ((part > 0) || (!allow_whole_dev)) {
c7e0f7ac:	e59d0078 	ldr	r0, [sp, #120]
c7e0f7b0:	e2703001 	rsbs	r3, r0, #1	; 0x1
c7e0f7b4:	33a03000 	movcc	r3, #0	; 0x0
c7e0f7b8:	e3540000 	cmp	r4, #0	; 0x0
c7e0f7bc:	d1a00003 	movle	r0, r3
c7e0f7c0:	c3830001 	orrgt	r0, r3, #1	; 0x1
c7e0f7c4:	e3500000 	cmp	r0, #0	; 0x0
			printf("** No partition table - %s %s **\n", ifname,
c7e0f7c8:	11a0100a 	movne	r1, sl
c7e0f7cc:	11a02006 	movne	r2, r6
c7e0f7d0:	159f014c 	ldrne	r0, [pc, #332]	; c7e0f924 <get_device_and_partition+0x2dc>
c7e0f7d4:	1afffff2 	bne	c7e0f7a4 <get_device_and_partition+0x15c>
			       dev_str);
			goto cleanup;
		}

		info->start = 0;
		info->size = (*dev_desc)->lba;
c7e0f7d8:	e8870003 	stm	r7, {r0, r1}
		info->blksz = (*dev_desc)->blksz;
c7e0f7dc:	e5923014 	ldr	r3, [r2, #20]
		info->bootable = 0;
c7e0f7e0:	e587004c 	str	r0, [r7, #76]
			goto cleanup;
		}

		info->start = 0;
		info->size = (*dev_desc)->lba;
		info->blksz = (*dev_desc)->blksz;
c7e0f7e4:	e5873008 	str	r3, [r7, #8]
		info->bootable = 0;
c7e0f7e8:	e1a06000 	mov	r6, r0
c7e0f7ec:	ea000041 	b	c7e0f8f8 <get_device_and_partition+0x2b0>

	/*
	 * Now there's known to be a partition table,
	 * not specifying a partition means to pick partition 1.
	 */
	if (part == PART_UNSPECIFIED)
c7e0f7f0:	e3740002 	cmn	r4, #2	; 0x2
c7e0f7f4:	02844003 	addeq	r4, r4, #3	; 0x3
c7e0f7f8:	0a000003 	beq	c7e0f80c <get_device_and_partition+0x1c4>

	/*
	 * If user didn't specify a partition number, or did specify something
	 * other than "auto", use that partition number directly.
	 */
	if (part != PART_AUTO) {
c7e0f7fc:	e3740001 	cmn	r4, #1	; 0x1
		ret = get_partition_info(*dev_desc, part, info);
		if (ret) {
			printf("** Invalid partition %d **\n", part);
			goto cleanup;
c7e0f800:	01a04003 	moveq	r4, r3
c7e0f804:	03a05001 	moveq	r5, #1	; 0x1

	/*
	 * If user didn't specify a partition number, or did specify something
	 * other than "auto", use that partition number directly.
	 */
	if (part != PART_AUTO) {
c7e0f808:	0a000009 	beq	c7e0f834 <get_device_and_partition+0x1ec>
		ret = get_partition_info(*dev_desc, part, info);
c7e0f80c:	e1a00002 	mov	r0, r2
c7e0f810:	e1a01004 	mov	r1, r4
c7e0f814:	e1a02007 	mov	r2, r7
c7e0f818:	ebffff81 	bl	c7e0f624 <get_partition_info>
		if (ret) {
c7e0f81c:	e2506000 	subs	r6, r0, #0	; 0x0
c7e0f820:	0a000028 	beq	c7e0f8c8 <get_device_and_partition+0x280>
			printf("** Invalid partition %d **\n", part);
c7e0f824:	e1a01004 	mov	r1, r4
c7e0f828:	e59f00f8 	ldr	r0, [pc, #248]	; c7e0f928 <get_device_and_partition+0x2e0>
c7e0f82c:	ebffe489 	bl	c7e08a58 <printf>
c7e0f830:	ea000030 	b	c7e0f8f8 <get_device_and_partition+0x2b0>
		 * Find the first bootable partition.
		 * If none are bootable, fall back to the first valid partition.
		 */
		part = 0;
		for (p = 1; p <= MAX_SEARCH_PARTITIONS; p++) {
			ret = get_partition_info(*dev_desc, p, info);
c7e0f834:	e1a01005 	mov	r1, r5
c7e0f838:	e1a02007 	mov	r2, r7
c7e0f83c:	e59b0000 	ldr	r0, [fp]
c7e0f840:	ebffff77 	bl	c7e0f624 <get_partition_info>
			if (ret)
c7e0f844:	e2506000 	subs	r6, r0, #0	; 0x0
c7e0f848:	1a000011 	bne	c7e0f894 <get_device_and_partition+0x24c>

			/*
			 * First valid partition, or new better partition?
			 * If so, save partition ID.
			 */
			if (!part || info->bootable)
c7e0f84c:	e3540000 	cmp	r4, #0	; 0x0
c7e0f850:	0a000002 	beq	c7e0f860 <get_device_and_partition+0x218>
c7e0f854:	e597304c 	ldr	r3, [r7, #76]
c7e0f858:	e3530000 	cmp	r3, #0	; 0x0
c7e0f85c:	0a000000 	beq	c7e0f864 <get_device_and_partition+0x21c>
c7e0f860:	e1a04005 	mov	r4, r5
				part = p;

			/* Best possible partition? Stop searching. */
			if (info->bootable)
c7e0f864:	e597304c 	ldr	r3, [r7, #76]
c7e0f868:	e3530000 	cmp	r3, #0	; 0x0
c7e0f86c:	0a000002 	beq	c7e0f87c <get_device_and_partition+0x234>
		if (part) {
			/*
			 * If we searched all possible partition IDs,
			 * return the first valid partition we found.
			 */
			if (p == MAX_SEARCH_PARTITIONS + 1)
c7e0f870:	e3550011 	cmp	r5, #17	; 0x11
c7e0f874:	1a000013 	bne	c7e0f8c8 <get_device_and_partition+0x280>
c7e0f878:	ea00000a 	b	c7e0f8a8 <get_device_and_partition+0x260>
			/*
			 * We now need to search further for best possible.
			 * If we what we just queried was the best so far,
			 * save the info since we over-write it next loop.
			 */
			if (part == p)
c7e0f87c:	e1540005 	cmp	r4, r5
c7e0f880:	1a000003 	bne	c7e0f894 <get_device_and_partition+0x24c>
				tmpinfo = *info;
c7e0f884:	e28d0004 	add	r0, sp, #4	; 0x4
c7e0f888:	e1a01007 	mov	r1, r7
c7e0f88c:	e3a02050 	mov	r2, #80	; 0x50
c7e0f890:	eb004ce9 	bl	c7e22c3c <memcpy>
		/*
		 * Find the first bootable partition.
		 * If none are bootable, fall back to the first valid partition.
		 */
		part = 0;
		for (p = 1; p <= MAX_SEARCH_PARTITIONS; p++) {
c7e0f894:	e2855001 	add	r5, r5, #1	; 0x1
c7e0f898:	e3550011 	cmp	r5, #17	; 0x11
c7e0f89c:	1affffe4 	bne	c7e0f834 <get_device_and_partition+0x1ec>
			 */
			if (part == p)
				tmpinfo = *info;
		}
		/* If we found any acceptable partition */
		if (part) {
c7e0f8a0:	e3540000 	cmp	r4, #0	; 0x0
c7e0f8a4:	0a000004 	beq	c7e0f8bc <get_device_and_partition+0x274>
			/*
			 * If we searched all possible partition IDs,
			 * return the first valid partition we found.
			 */
			if (p == MAX_SEARCH_PARTITIONS + 1)
				*info = tmpinfo;
c7e0f8a8:	e1a00007 	mov	r0, r7
c7e0f8ac:	e28d1004 	add	r1, sp, #4	; 0x4
c7e0f8b0:	e3a02050 	mov	r2, #80	; 0x50
c7e0f8b4:	eb004ce0 	bl	c7e22c3c <memcpy>
c7e0f8b8:	ea000002 	b	c7e0f8c8 <get_device_and_partition+0x280>
			ret = 0;
		} else {
			printf("** No valid partitions found **\n");
c7e0f8bc:	e59f0068 	ldr	r0, [pc, #104]	; c7e0f92c <get_device_and_partition+0x2e4>
c7e0f8c0:	ebffe464 	bl	c7e08a58 <printf>
c7e0f8c4:	ea00000b 	b	c7e0f8f8 <get_device_and_partition+0x2b0>
			goto cleanup;
		}
	}
	if (strncmp((char *)info->type, BOOT_PART_TYPE, sizeof(info->type)) != 0) {
c7e0f8c8:	e287502c 	add	r5, r7, #44	; 0x2c
c7e0f8cc:	e1a00005 	mov	r0, r5
c7e0f8d0:	e59f1058 	ldr	r1, [pc, #88]	; c7e0f930 <get_device_and_partition+0x2e8>
c7e0f8d4:	e3a02020 	mov	r2, #32	; 0x20
c7e0f8d8:	eb004bee 	bl	c7e22898 <strncmp>
c7e0f8dc:	e3500000 	cmp	r0, #0	; 0x0
c7e0f8e0:	01a06004 	moveq	r6, r4
c7e0f8e4:	0a000003 	beq	c7e0f8f8 <get_device_and_partition+0x2b0>
		printf("** Invalid partition type \"%.32s\""
c7e0f8e8:	e1a01005 	mov	r1, r5
c7e0f8ec:	e59f0040 	ldr	r0, [pc, #64]	; c7e0f934 <get_device_and_partition+0x2ec>
c7e0f8f0:	ebffe458 	bl	c7e08a58 <printf>
c7e0f8f4:	e3e06000 	mvn	r6, #0	; 0x0

	ret = part;
	goto cleanup;

cleanup:
	free(dup_str);
c7e0f8f8:	e1a00009 	mov	r0, r9
c7e0f8fc:	ebffe597 	bl	c7e08f60 <free>
	return ret;
}
c7e0f900:	e1a00006 	mov	r0, r6
c7e0f904:	e28dd058 	add	sp, sp, #88	; 0x58
c7e0f908:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0f90c:	c7e3224b 	.word	0xc7e3224b
c7e0f910:	c7e3062b 	.word	0xc7e3062b
c7e0f914:	c7e3295f 	.word	0xc7e3295f
c7e0f918:	c7e3297a 	.word	0xc7e3297a
c7e0f91c:	c7e3297f 	.word	0xc7e3297f
c7e0f920:	c7e329a8 	.word	0xc7e329a8
c7e0f924:	c7e329c7 	.word	0xc7e329c7
c7e0f928:	c7e329e9 	.word	0xc7e329e9
c7e0f92c:	c7e32a05 	.word	0xc7e32a05
c7e0f930:	c7e32644 	.word	0xc7e32644
c7e0f934:	c7e32a26 	.word	0xc7e32a26

c7e0f938 <print_part>:
	printf (" device %d  --   Partition Type: %s\n\n",
			dev_desc->dev, type);
}

void print_part (block_dev_desc_t * dev_desc)
{
c7e0f938:	e92d4010 	push	{r4, lr}

		switch (dev_desc->part_type) {
c7e0f93c:	e5d03008 	ldrb	r3, [r0, #8]
	printf (" device %d  --   Partition Type: %s\n\n",
			dev_desc->dev, type);
}

void print_part (block_dev_desc_t * dev_desc)
{
c7e0f940:	e1a04000 	mov	r4, r0

		switch (dev_desc->part_type) {
c7e0f944:	e3530002 	cmp	r3, #2	; 0x2
c7e0f948:	1a000025 	bne	c7e0f9e4 <print_part+0xac>
}


static void print_part_header (const char *type, block_dev_desc_t * dev_desc)
{
	puts ("\nPartition Map for ");
c7e0f94c:	e59f009c 	ldr	r0, [pc, #156]	; c7e0f9f0 <print_part+0xb8>
c7e0f950:	ebffe425 	bl	c7e089ec <puts>
	switch (dev_desc->if_type) {
c7e0f954:	e5943000 	ldr	r3, [r4]
c7e0f958:	e2433001 	sub	r3, r3, #1	; 0x1
c7e0f95c:	e3530007 	cmp	r3, #7	; 0x7
c7e0f960:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e0f964:	ea000015 	b	c7e0f9c0 <print_part+0x88>
c7e0f968:	c7e0f988 	.word	0xc7e0f988
c7e0f96c:	c7e0f998 	.word	0xc7e0f998
c7e0f970:	c7e0f9a0 	.word	0xc7e0f9a0
c7e0f974:	c7e0f9a8 	.word	0xc7e0f9a8
c7e0f978:	c7e0f9b0 	.word	0xc7e0f9b0
c7e0f97c:	c7e0f9b8 	.word	0xc7e0f9b8
c7e0f980:	c7e0f9c0 	.word	0xc7e0f9c0
c7e0f984:	c7e0f990 	.word	0xc7e0f990
	case IF_TYPE_IDE:
		puts ("IDE");
c7e0f988:	e59f0064 	ldr	r0, [pc, #100]	; c7e0f9f4 <print_part+0xbc>
c7e0f98c:	ea00000c 	b	c7e0f9c4 <print_part+0x8c>
		break;
	case IF_TYPE_SATA:
		puts ("SATA");
c7e0f990:	e59f0060 	ldr	r0, [pc, #96]	; c7e0f9f8 <print_part+0xc0>
c7e0f994:	ea00000a 	b	c7e0f9c4 <print_part+0x8c>
		break;
	case IF_TYPE_SCSI:
		puts ("SCSI");
c7e0f998:	e59f005c 	ldr	r0, [pc, #92]	; c7e0f9fc <print_part+0xc4>
c7e0f99c:	ea000008 	b	c7e0f9c4 <print_part+0x8c>
		break;
	case IF_TYPE_ATAPI:
		puts ("ATAPI");
c7e0f9a0:	e59f0058 	ldr	r0, [pc, #88]	; c7e0fa00 <print_part+0xc8>
c7e0f9a4:	ea000006 	b	c7e0f9c4 <print_part+0x8c>
		break;
	case IF_TYPE_USB:
		puts ("USB");
c7e0f9a8:	e59f0054 	ldr	r0, [pc, #84]	; c7e0fa04 <print_part+0xcc>
c7e0f9ac:	ea000004 	b	c7e0f9c4 <print_part+0x8c>
		break;
	case IF_TYPE_DOC:
		puts ("DOC");
c7e0f9b0:	e59f0050 	ldr	r0, [pc, #80]	; c7e0fa08 <print_part+0xd0>
c7e0f9b4:	ea000002 	b	c7e0f9c4 <print_part+0x8c>
		break;
	case IF_TYPE_MMC:
		puts ("MMC");
c7e0f9b8:	e59f004c 	ldr	r0, [pc, #76]	; c7e0fa0c <print_part+0xd4>
c7e0f9bc:	ea000000 	b	c7e0f9c4 <print_part+0x8c>
		break;
	default:
		puts ("UNKNOWN");
c7e0f9c0:	e59f0048 	ldr	r0, [pc, #72]	; c7e0fa10 <print_part+0xd8>
c7e0f9c4:	ebffe408 	bl	c7e089ec <puts>
		break;
	}
	printf (" device %d  --   Partition Type: %s\n\n",
c7e0f9c8:	e5941004 	ldr	r1, [r4, #4]
c7e0f9cc:	e59f2040 	ldr	r2, [pc, #64]	; c7e0fa14 <print_part+0xdc>
c7e0f9d0:	e59f0040 	ldr	r0, [pc, #64]	; c7e0fa18 <print_part+0xe0>
c7e0f9d4:	ebffe41f 	bl	c7e08a58 <printf>
#endif
#ifdef CONFIG_DOS_PARTITION
	case PART_TYPE_DOS:
		PRINTF ("## Testing for valid DOS partition ##\n");
		print_part_header ("DOS", dev_desc);
		print_part_dos (dev_desc);
c7e0f9d8:	e1a00004 	mov	r0, r4
		print_part_efi (dev_desc);
		return;
#endif
	}
	puts ("## Unknown partition table\n");
}
c7e0f9dc:	e8bd4010 	pop	{r4, lr}
#endif
#ifdef CONFIG_DOS_PARTITION
	case PART_TYPE_DOS:
		PRINTF ("## Testing for valid DOS partition ##\n");
		print_part_header ("DOS", dev_desc);
		print_part_dos (dev_desc);
c7e0f9e0:	ea0001e0 	b	c7e10168 <print_part_dos>
		print_part_header ("EFI", dev_desc);
		print_part_efi (dev_desc);
		return;
#endif
	}
	puts ("## Unknown partition table\n");
c7e0f9e4:	e59f0030 	ldr	r0, [pc, #48]	; c7e0fa1c <print_part+0xe4>
}
c7e0f9e8:	e8bd4010 	pop	{r4, lr}
		print_part_header ("EFI", dev_desc);
		print_part_efi (dev_desc);
		return;
#endif
	}
	puts ("## Unknown partition table\n");
c7e0f9ec:	eaffe3fe 	b	c7e089ec <puts>
c7e0f9f0:	c7e32a5b 	.word	0xc7e32a5b
c7e0f9f4:	c7e32a6f 	.word	0xc7e32a6f
c7e0f9f8:	c7e32a73 	.word	0xc7e32a73
c7e0f9fc:	c7e32a78 	.word	0xc7e32a78
c7e0fa00:	c7e32a7d 	.word	0xc7e32a7d
c7e0fa04:	c7e32a83 	.word	0xc7e32a83
c7e0fa08:	c7e32a87 	.word	0xc7e32a87
c7e0fa0c:	c7e304a0 	.word	0xc7e304a0
c7e0fa10:	c7e32a8b 	.word	0xc7e32a8b
c7e0fa14:	c7e32ab9 	.word	0xc7e32ab9
c7e0fa18:	c7e32a93 	.word	0xc7e32a93
c7e0fa1c:	c7e32abd 	.word	0xc7e32abd

c7e0fa20 <dev_print>:
	bc_rem  = block_count - div_by * bc_quot;
	return bc_quot * mul_by + (bc_rem * mul_by) / div_by;
}

void dev_print (block_dev_desc_t *dev_desc)
{
c7e0fa20:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
	lba512_t lba512; /* number of blocks if 512bytes block size */

	if (dev_desc->type == DEV_TYPE_UNKNOWN) {
c7e0fa24:	e5d0300b 	ldrb	r3, [r0, #11]
	bc_rem  = block_count - div_by * bc_quot;
	return bc_quot * mul_by + (bc_rem * mul_by) / div_by;
}

void dev_print (block_dev_desc_t *dev_desc)
{
c7e0fa28:	e1a04000 	mov	r4, r0
	lba512_t lba512; /* number of blocks if 512bytes block size */

	if (dev_desc->type == DEV_TYPE_UNKNOWN) {
c7e0fa2c:	e35300ff 	cmp	r3, #255	; 0xff
	bc_rem  = block_count - div_by * bc_quot;
	return bc_quot * mul_by + (bc_rem * mul_by) / div_by;
}

void dev_print (block_dev_desc_t *dev_desc)
{
c7e0fa30:	e24dd014 	sub	sp, sp, #20	; 0x14
	lba512_t lba512; /* number of blocks if 512bytes block size */

	if (dev_desc->type == DEV_TYPE_UNKNOWN) {
		puts ("not available\n");
c7e0fa34:	059f01b8 	ldreq	r0, [pc, #440]	; c7e0fbf4 <dev_print+0x1d4>

void dev_print (block_dev_desc_t *dev_desc)
{
	lba512_t lba512; /* number of blocks if 512bytes block size */

	if (dev_desc->type == DEV_TYPE_UNKNOWN) {
c7e0fa38:	0a00006a 	beq	c7e0fbe8 <dev_print+0x1c8>
		puts ("not available\n");
		return;
	}

	switch (dev_desc->if_type) {
c7e0fa3c:	e5941000 	ldr	r1, [r4]
c7e0fa40:	e3510008 	cmp	r1, #8	; 0x8
c7e0fa44:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
c7e0fa48:	ea000020 	b	c7e0fad0 <dev_print+0xb0>
c7e0fa4c:	c7e0fac8 	.word	0xc7e0fac8
c7e0fa50:	c7e0fa94 	.word	0xc7e0fa94
c7e0fa54:	c7e0fa70 	.word	0xc7e0fa70
c7e0fa58:	c7e0fa94 	.word	0xc7e0fa94
c7e0fa5c:	c7e0faa8 	.word	0xc7e0faa8
c7e0fa60:	c7e0fac0 	.word	0xc7e0fac0
c7e0fa64:	c7e0faa8 	.word	0xc7e0faa8
c7e0fa68:	c7e0faa8 	.word	0xc7e0faa8
c7e0fa6c:	c7e0fa94 	.word	0xc7e0fa94
	case IF_TYPE_SCSI:
		printf ("(%d:%d) Vendor: %s Prod.: %s Rev: %s\n",
c7e0fa70:	e5d41009 	ldrb	r1, [r4, #9]
c7e0fa74:	e5d4200a 	ldrb	r2, [r4, #10]
c7e0fa78:	e284c041 	add	ip, r4, #65	; 0x41
c7e0fa7c:	e284e056 	add	lr, r4, #86	; 0x56
c7e0fa80:	e2843018 	add	r3, r4, #24	; 0x18
c7e0fa84:	e59f016c 	ldr	r0, [pc, #364]	; c7e0fbf8 <dev_print+0x1d8>
c7e0fa88:	e88d5000 	stm	sp, {ip, lr}
c7e0fa8c:	ebffe3f1 	bl	c7e08a58 <printf>
c7e0fa90:	ea000012 	b	c7e0fae0 <dev_print+0xc0>
			dev_desc->revision);
		break;
	case IF_TYPE_ATAPI:
	case IF_TYPE_IDE:
	case IF_TYPE_SATA:
		printf ("Model: %s Firm: %s Ser#: %s\n",
c7e0fa94:	e2841018 	add	r1, r4, #24	; 0x18
c7e0fa98:	e2842056 	add	r2, r4, #86	; 0x56
c7e0fa9c:	e2843041 	add	r3, r4, #65	; 0x41
c7e0faa0:	e59f0154 	ldr	r0, [pc, #340]	; c7e0fbfc <dev_print+0x1dc>
c7e0faa4:	ea000003 	b	c7e0fab8 <dev_print+0x98>
			dev_desc->product);
		break;
	case IF_TYPE_SD:
	case IF_TYPE_MMC:
	case IF_TYPE_USB:
		printf ("Vendor: %s Rev: %s Prod: %s\n",
c7e0faa8:	e59f0150 	ldr	r0, [pc, #336]	; c7e0fc00 <dev_print+0x1e0>
c7e0faac:	e2841018 	add	r1, r4, #24	; 0x18
c7e0fab0:	e2842056 	add	r2, r4, #86	; 0x56
c7e0fab4:	e2843041 	add	r3, r4, #65	; 0x41
c7e0fab8:	ebffe3e6 	bl	c7e08a58 <printf>
c7e0fabc:	ea000007 	b	c7e0fae0 <dev_print+0xc0>
			dev_desc->vendor,
			dev_desc->revision,
			dev_desc->product);
		break;
	case IF_TYPE_DOC:
		puts("device type DOC\n");
c7e0fac0:	e59f013c 	ldr	r0, [pc, #316]	; c7e0fc04 <dev_print+0x1e4>
c7e0fac4:	ea000047 	b	c7e0fbe8 <dev_print+0x1c8>
		return;
	case IF_TYPE_UNKNOWN:
		puts("device type unknown\n");
c7e0fac8:	e59f0138 	ldr	r0, [pc, #312]	; c7e0fc08 <dev_print+0x1e8>
c7e0facc:	ea000045 	b	c7e0fbe8 <dev_print+0x1c8>
		return;
	default:
		printf("Unhandled device type: %i\n", dev_desc->if_type);
c7e0fad0:	e59f0134 	ldr	r0, [pc, #308]	; c7e0fc0c <dev_print+0x1ec>
			dev_desc->blksz);
#endif
	} else {
		puts ("            Capacity: not available\n");
	}
}
c7e0fad4:	e28dd014 	add	sp, sp, #20	; 0x14
c7e0fad8:	e8bd46f0 	pop	{r4, r5, r6, r7, r9, sl, lr}
		return;
	case IF_TYPE_UNKNOWN:
		puts("device type unknown\n");
		return;
	default:
		printf("Unhandled device type: %i\n", dev_desc->if_type);
c7e0fadc:	eaffe3dd 	b	c7e08a58 <printf>
		return;
	}
	puts ("            Type: ");
c7e0fae0:	e59f0128 	ldr	r0, [pc, #296]	; c7e0fc10 <dev_print+0x1f0>
c7e0fae4:	ebffe3c0 	bl	c7e089ec <puts>
	if (dev_desc->removable)
c7e0fae8:	e5d4300c 	ldrb	r3, [r4, #12]
c7e0faec:	e3530000 	cmp	r3, #0	; 0x0
c7e0faf0:	0a000001 	beq	c7e0fafc <dev_print+0xdc>
		puts ("Removable ");
c7e0faf4:	e59f0118 	ldr	r0, [pc, #280]	; c7e0fc14 <dev_print+0x1f4>
c7e0faf8:	ebffe3bb 	bl	c7e089ec <puts>
	switch (dev_desc->type & 0x1F) {
c7e0fafc:	e5d4300b 	ldrb	r3, [r4, #11]
c7e0fb00:	e203101f 	and	r1, r3, #31	; 0x1f
c7e0fb04:	e3510007 	cmp	r1, #7	; 0x7
c7e0fb08:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
c7e0fb0c:	ea000010 	b	c7e0fb54 <dev_print+0x134>
c7e0fb10:	c7e0fb30 	.word	0xc7e0fb30
c7e0fb14:	c7e0fb4c 	.word	0xc7e0fb4c
c7e0fb18:	c7e0fb54 	.word	0xc7e0fb54
c7e0fb1c:	c7e0fb54 	.word	0xc7e0fb54
c7e0fb20:	c7e0fb54 	.word	0xc7e0fb54
c7e0fb24:	c7e0fb38 	.word	0xc7e0fb38
c7e0fb28:	c7e0fb54 	.word	0xc7e0fb54
c7e0fb2c:	c7e0fb44 	.word	0xc7e0fb44
	case DEV_TYPE_HARDDISK:
		puts ("Hard Disk");
c7e0fb30:	e59f00e0 	ldr	r0, [pc, #224]	; c7e0fc18 <dev_print+0x1f8>
c7e0fb34:	ea000000 	b	c7e0fb3c <dev_print+0x11c>
		break;
	case DEV_TYPE_CDROM:
		puts ("CD ROM");
c7e0fb38:	e59f00dc 	ldr	r0, [pc, #220]	; c7e0fc1c <dev_print+0x1fc>
c7e0fb3c:	ebffe3aa 	bl	c7e089ec <puts>
c7e0fb40:	ea000005 	b	c7e0fb5c <dev_print+0x13c>
		break;
	case DEV_TYPE_OPDISK:
		puts ("Optical Device");
c7e0fb44:	e59f00d4 	ldr	r0, [pc, #212]	; c7e0fc20 <dev_print+0x200>
c7e0fb48:	eafffffb 	b	c7e0fb3c <dev_print+0x11c>
		break;
	case DEV_TYPE_TAPE:
		puts ("Tape");
c7e0fb4c:	e59f00d0 	ldr	r0, [pc, #208]	; c7e0fc24 <dev_print+0x204>
c7e0fb50:	eafffff9 	b	c7e0fb3c <dev_print+0x11c>
		break;
	default:
		printf ("# %02X #", dev_desc->type & 0x1F);
c7e0fb54:	e59f00cc 	ldr	r0, [pc, #204]	; c7e0fc28 <dev_print+0x208>
c7e0fb58:	ebffe3be 	bl	c7e08a58 <printf>
		break;
	}
	puts ("\n");
c7e0fb5c:	e59f00c8 	ldr	r0, [pc, #200]	; c7e0fc2c <dev_print+0x20c>
c7e0fb60:	ebffe3a1 	bl	c7e089ec <puts>
	if ((dev_desc->lba * dev_desc->blksz)>0L) {
c7e0fb64:	e5949014 	ldr	r9, [r4, #20]
c7e0fb68:	e594a010 	ldr	sl, [r4, #16]
c7e0fb6c:	e013099a 	muls	r3, sl, r9
			gb_quot, gb_rem,
			(ulong)lba,
			dev_desc->blksz);
#endif
	} else {
		puts ("            Capacity: not available\n");
c7e0fb70:	059f00b8 	ldreq	r0, [pc, #184]	; c7e0fc30 <dev_print+0x210>
	default:
		printf ("# %02X #", dev_desc->type & 0x1F);
		break;
	}
	puts ("\n");
	if ((dev_desc->lba * dev_desc->blksz)>0L) {
c7e0fb74:	0a00001b 	beq	c7e0fbe8 <dev_print+0x1c8>
		ulong mb, mb_quot, mb_rem, gb, gb_quot, gb_rem;
		lbaint_t lba;

		lba = dev_desc->lba;

		lba512 = (lba * (dev_desc->blksz/512));
c7e0fb78:	e1a034a9 	lsr	r3, r9, #9
c7e0fb7c:	e003039a 	mul	r3, sl, r3
static lba512_t lba512_muldiv (lba512_t block_count, lba512_t mul_by, lba512_t div_by)
{
	lba512_t bc_quot, bc_rem;

	/* x * m / d == x / d * m + (x % d) * m / d */
	bc_quot = block_count / div_by;
c7e0fb80:	e1a025a3 	lsr	r2, r3, #11
	bc_rem  = block_count - div_by * bc_quot;
	return bc_quot * mul_by + (bc_rem * mul_by) / div_by;
c7e0fb84:	e3a0400a 	mov	r4, #10	; 0xa
c7e0fb88:	e0433582 	sub	r3, r3, r2, lsl #11
c7e0fb8c:	e0030394 	mul	r3, r4, r3
c7e0fb90:	e0050294 	mul	r5, r4, r2
c7e0fb94:	e08555a3 	add	r5, r5, r3, lsr #11

		lba512 = (lba * (dev_desc->blksz/512));
		/* round to 1 digit */
		mb = lba512_muldiv(lba512, 10, 2048);	/* 2048 = (1024 * 1024) / 512 MB */

		mb_quot	= mb / 10;
c7e0fb98:	e1a01004 	mov	r1, r4
c7e0fb9c:	e1a00005 	mov	r0, r5
c7e0fba0:	eb006a58 	bl	c7e2a508 <__udivsi3>
		mb_rem	= mb - (10 * mb_quot);

		gb = mb / 1024;
c7e0fba4:	e1a06435 	lsr	r6, r5, r4

		lba512 = (lba * (dev_desc->blksz/512));
		/* round to 1 digit */
		mb = lba512_muldiv(lba512, 10, 2048);	/* 2048 = (1024 * 1024) / 512 MB */

		mb_quot	= mb / 10;
c7e0fba8:	e1a07000 	mov	r7, r0
		mb_rem	= mb - (10 * mb_quot);

		gb = mb / 1024;
		gb_quot	= gb / 10;
c7e0fbac:	e1a01004 	mov	r1, r4
c7e0fbb0:	e1a00006 	mov	r0, r6
c7e0fbb4:	eb006a53 	bl	c7e2a508 <__udivsi3>
			mb_quot, mb_rem,
			gb_quot, gb_rem,
			lba,
			dev_desc->blksz);
#else
		printf ("            Capacity: %ld.%ld MB = %ld.%ld GB (%ld x %ld)\n",
c7e0fbb8:	e0020794 	mul	r2, r4, r7
c7e0fbbc:	e0010094 	mul	r1, r4, r0

		mb_quot	= mb / 10;
		mb_rem	= mb - (10 * mb_quot);

		gb = mb / 1024;
		gb_quot	= gb / 10;
c7e0fbc0:	e1a03000 	mov	r3, r0
			mb_quot, mb_rem,
			gb_quot, gb_rem,
			lba,
			dev_desc->blksz);
#else
		printf ("            Capacity: %ld.%ld MB = %ld.%ld GB (%ld x %ld)\n",
c7e0fbc4:	e0616006 	rsb	r6, r1, r6
c7e0fbc8:	e0622005 	rsb	r2, r2, r5
c7e0fbcc:	e1a01007 	mov	r1, r7
c7e0fbd0:	e59f005c 	ldr	r0, [pc, #92]	; c7e0fc34 <dev_print+0x214>
c7e0fbd4:	e88d0440 	stm	sp, {r6, sl}
c7e0fbd8:	e58d9008 	str	r9, [sp, #8]
c7e0fbdc:	ebffe39d 	bl	c7e08a58 <printf>
			dev_desc->blksz);
#endif
	} else {
		puts ("            Capacity: not available\n");
	}
}
c7e0fbe0:	e28dd014 	add	sp, sp, #20	; 0x14
c7e0fbe4:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e0fbe8:	e28dd014 	add	sp, sp, #20	; 0x14
c7e0fbec:	e8bd46f0 	pop	{r4, r5, r6, r7, r9, sl, lr}
			gb_quot, gb_rem,
			(ulong)lba,
			dev_desc->blksz);
#endif
	} else {
		puts ("            Capacity: not available\n");
c7e0fbf0:	eaffe37d 	b	c7e089ec <puts>
c7e0fbf4:	c7e32c17 	.word	0xc7e32c17
c7e0fbf8:	c7e32ad9 	.word	0xc7e32ad9
c7e0fbfc:	c7e32aff 	.word	0xc7e32aff
c7e0fc00:	c7e32b1c 	.word	0xc7e32b1c
c7e0fc04:	c7e32b39 	.word	0xc7e32b39
c7e0fc08:	c7e32b4a 	.word	0xc7e32b4a
c7e0fc0c:	c7e32b5f 	.word	0xc7e32b5f
c7e0fc10:	c7e32b7a 	.word	0xc7e32b7a
c7e0fc14:	c7e32b8d 	.word	0xc7e32b8d
c7e0fc18:	c7e32b98 	.word	0xc7e32b98
c7e0fc1c:	c7e32ba2 	.word	0xc7e32ba2
c7e0fc20:	c7e32ba9 	.word	0xc7e32ba9
c7e0fc24:	c7e32bb8 	.word	0xc7e32bb8
c7e0fc28:	c7e32bbd 	.word	0xc7e32bbd
c7e0fc2c:	c7e31f94 	.word	0xc7e31f94
c7e0fc30:	c7e32c01 	.word	0xc7e32c01
c7e0fc34:	c7e32bc6 	.word	0xc7e32bc6

c7e0fc38 <init_part>:
    defined(CONFIG_ISO_PARTITION) || \
    defined(CONFIG_AMIGA_PARTITION) || \
    defined(CONFIG_EFI_PARTITION)

void init_part (block_dev_desc_t * dev_desc)
{
c7e0fc38:	e92d4010 	push	{r4, lr}
c7e0fc3c:	e1a04000 	mov	r4, r0
		return;
	}
#endif

#ifdef CONFIG_DOS_PARTITION
	if (test_part_dos(dev_desc) == 0) {
c7e0fc40:	eb000153 	bl	c7e10194 <test_part_dos>
c7e0fc44:	e3500000 	cmp	r0, #0	; 0x0
		dev_desc->part_type = PART_TYPE_DOS;
c7e0fc48:	03a03002 	moveq	r3, #2	; 0x2
	if (test_part_amiga(dev_desc) == 0) {
	    dev_desc->part_type = PART_TYPE_AMIGA;
	    return;
	}
#endif
	dev_desc->part_type = PART_TYPE_UNKNOWN;
c7e0fc4c:	13a03000 	movne	r3, #0	; 0x0
c7e0fc50:	e5c43008 	strb	r3, [r4, #8]
c7e0fc54:	e8bd8010 	pop	{r4, pc}

c7e0fc58 <le32_to_int>:
    defined(CONFIG_SYSTEMACE)

/* Convert char[4] in little endian format to the host format integer
 */
static inline int le32_to_int(unsigned char *le32)
{
c7e0fc58:	e1a03000 	mov	r3, r0
c7e0fc5c:	e5d00002 	ldrb	r0, [r0, #2]
c7e0fc60:	e5d32003 	ldrb	r2, [r3, #3]
c7e0fc64:	e5d31000 	ldrb	r1, [r3]
c7e0fc68:	e1a00800 	lsl	r0, r0, #16
c7e0fc6c:	e0800c02 	add	r0, r0, r2, lsl #24
c7e0fc70:	e5d33001 	ldrb	r3, [r3, #1]
c7e0fc74:	e0800001 	add	r0, r0, r1
    return ((le32[3] << 24) +
	    (le32[2] << 16) +
	    (le32[1] << 8) +
	     le32[0]
	   );
}
c7e0fc78:	e0800403 	add	r0, r0, r3, lsl #8
c7e0fc7c:	e12fff1e 	bx	lr

c7e0fc80 <is_extended>:

static inline int is_extended(int part_type)
{
    return (part_type == 0x5 ||
c7e0fc80:	e350000f 	cmp	r0, #15	; 0xf
c7e0fc84:	13500005 	cmpne	r0, #5	; 0x5
c7e0fc88:	03a00001 	moveq	r0, #1	; 0x1
c7e0fc8c:	012fff1e 	bxeq	lr
c7e0fc90:	e3500085 	cmp	r0, #133	; 0x85
c7e0fc94:	13a00000 	movne	r0, #0	; 0x0
c7e0fc98:	03a00001 	moveq	r0, #1	; 0x1
	    part_type == 0xf ||
	    part_type == 0x85);
}
c7e0fc9c:	e12fff1e 	bx	lr

c7e0fca0 <is_bootable>:

static inline int is_bootable(dos_partition_t *p)
{
c7e0fca0:	e5d00000 	ldrb	r0, [r0]
	return p->boot_ind == 0x80;
}
c7e0fca4:	e3500080 	cmp	r0, #128	; 0x80
c7e0fca8:	13a00000 	movne	r0, #0	; 0x0
c7e0fcac:	03a00001 	moveq	r0, #1	; 0x1
c7e0fcb0:	e12fff1e 	bx	lr

c7e0fcb4 <get_partition_info_extended>:
 */
static int get_partition_info_extended (block_dev_desc_t *dev_desc, int ext_part_sector,
				 int relative, int part_num,
				 int which_part, disk_partition_t *info,
				 unsigned int disksig)
{
c7e0fcb4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0fcb8:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e0fcbc:	e24dd008 	sub	sp, sp, #8	; 0x8
c7e0fcc0:	e1a09000 	mov	r9, r0
c7e0fcc4:	e1a0a001 	mov	sl, r1
c7e0fcc8:	e50b2020 	str	r2, [fp, #-32]
c7e0fccc:	e1a07003 	mov	r7, r3
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e0fcd0:	e5993014 	ldr	r3, [r9, #20]
	dos_partition_t *pt;
	int i;

	if (dev_desc->block_read (dev_desc->dev, ext_part_sector, 1, (ulong *) buffer) != 1) {
c7e0fcd4:	e5990004 	ldr	r0, [r9, #4]
static int get_partition_info_extended (block_dev_desc_t *dev_desc, int ext_part_sector,
				 int relative, int part_num,
				 int which_part, disk_partition_t *info,
				 unsigned int disksig)
{
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e0fcd8:	e283303f 	add	r3, r3, #63	; 0x3f
c7e0fcdc:	e3c3303f 	bic	r3, r3, #63	; 0x3f
c7e0fce0:	e2833048 	add	r3, r3, #72	; 0x48
c7e0fce4:	e04dd003 	sub	sp, sp, r3
c7e0fce8:	e28d303f 	add	r3, sp, #63	; 0x3f
c7e0fcec:	e3c3603f 	bic	r6, r3, #63	; 0x3f
	dos_partition_t *pt;
	int i;

	if (dev_desc->block_read (dev_desc->dev, ext_part_sector, 1, (ulong *) buffer) != 1) {
c7e0fcf0:	e1a0100a 	mov	r1, sl
c7e0fcf4:	e3a02001 	mov	r2, #1	; 0x1
c7e0fcf8:	e1a03006 	mov	r3, r6
c7e0fcfc:	e1a0e00f 	mov	lr, pc
c7e0fd00:	e599f060 	ldr	pc, [r9, #96]
c7e0fd04:	e3500001 	cmp	r0, #1	; 0x1
		printf ("** Can't read partition table on %d:%d **\n",
c7e0fd08:	15991004 	ldrne	r1, [r9, #4]
c7e0fd0c:	11a0200a 	movne	r2, sl
c7e0fd10:	159f01d4 	ldrne	r0, [pc, #468]	; c7e0feec <get_partition_info_extended+0x238>
c7e0fd14:	1a000007 	bne	c7e0fd38 <get_partition_info_extended+0x84>
			dev_desc->dev, ext_part_sector);
		return -1;
	}
	if (buffer[DOS_PART_MAGIC_OFFSET] != 0x55 ||
c7e0fd18:	e5d611fe 	ldrb	r1, [r6, #510]
c7e0fd1c:	e3510055 	cmp	r1, #85	; 0x55
c7e0fd20:	1a000002 	bne	c7e0fd30 <get_partition_info_extended+0x7c>
c7e0fd24:	e5d631ff 	ldrb	r3, [r6, #511]
c7e0fd28:	e35300aa 	cmp	r3, #170	; 0xaa
c7e0fd2c:	0a000003 	beq	c7e0fd40 <get_partition_info_extended+0x8c>
		buffer[DOS_PART_MAGIC_OFFSET + 1] != 0xaa) {
		printf ("bad MBR sector signature 0x%02x%02x\n",
c7e0fd30:	e5d621ff 	ldrb	r2, [r6, #511]
c7e0fd34:	e59f01b4 	ldr	r0, [pc, #436]	; c7e0fef0 <get_partition_info_extended+0x23c>
c7e0fd38:	ebffe346 	bl	c7e08a58 <printf>
c7e0fd3c:	ea000067 	b	c7e0fee0 <get_partition_info_extended+0x22c>
	if (!ext_part_sector)
		disksig = le32_to_int(&buffer[DOS_PART_DISKSIG_OFFSET]);
#endif

	/* Print all primary/logical partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
c7e0fd40:	e2864f6f 	add	r4, r6, #444	; 0x1bc
c7e0fd44:	e2844002 	add	r4, r4, #2	; 0x2
c7e0fd48:	e1a05004 	mov	r5, r4
	for (i = 0; i < 4; i++, pt++) {
		/*
		 * fdisk does not show the extended partitions that
		 * are not in the MBR
		 */
		if (((pt->boot_ind & ~0x80) == 0) &&
c7e0fd4c:	e5d53000 	ldrb	r3, [r5]
c7e0fd50:	e313007f 	tst	r3, #127	; 0x7f
c7e0fd54:	1a000043 	bne	c7e0fe68 <get_partition_info_extended+0x1b4>
c7e0fd58:	e5d50004 	ldrb	r0, [r5, #4]
c7e0fd5c:	e59b1004 	ldr	r1, [fp, #4]
c7e0fd60:	e2503000 	subs	r3, r0, #0	; 0x0
c7e0fd64:	13a03001 	movne	r3, #1	; 0x1
c7e0fd68:	e1570001 	cmp	r7, r1
c7e0fd6c:	13a03000 	movne	r3, #0	; 0x0
c7e0fd70:	e3530000 	cmp	r3, #0	; 0x0
c7e0fd74:	0a00003b 	beq	c7e0fe68 <get_partition_info_extended+0x1b4>
c7e0fd78:	ebffffc0 	bl	c7e0fc80 <is_extended>
c7e0fd7c:	e3500000 	cmp	r0, #0	; 0x0
c7e0fd80:	1a000038 	bne	c7e0fe68 <get_partition_info_extended+0x1b4>
		    (pt->sys_ind != 0) &&
		    (part_num == which_part) &&
		    (is_extended(pt->sys_ind) == 0)) {
			info->blksz = 512;
c7e0fd84:	e59b2008 	ldr	r2, [fp, #8]
c7e0fd88:	e3a03c02 	mov	r3, #512	; 0x200
c7e0fd8c:	e5823008 	str	r3, [r2, #8]
			info->start = ext_part_sector + le32_to_int (pt->start4);
c7e0fd90:	e2850008 	add	r0, r5, #8	; 0x8
c7e0fd94:	ebffffaf 	bl	c7e0fc58 <le32_to_int>
c7e0fd98:	e59b3008 	ldr	r3, [fp, #8]
c7e0fd9c:	e08a0000 	add	r0, sl, r0
c7e0fda0:	e5830000 	str	r0, [r3]
			info->size  = le32_to_int (pt->size4);
c7e0fda4:	e285000c 	add	r0, r5, #12	; 0xc
c7e0fda8:	ebffffaa 	bl	c7e0fc58 <le32_to_int>
			switch(dev_desc->if_type) {
c7e0fdac:	e5993000 	ldr	r3, [r9]
		    (pt->sys_ind != 0) &&
		    (part_num == which_part) &&
		    (is_extended(pt->sys_ind) == 0)) {
			info->blksz = 512;
			info->start = ext_part_sector + le32_to_int (pt->start4);
			info->size  = le32_to_int (pt->size4);
c7e0fdb0:	e59bc008 	ldr	ip, [fp, #8]
			switch(dev_desc->if_type) {
c7e0fdb4:	e2433001 	sub	r3, r3, #1	; 0x1
		    (pt->sys_ind != 0) &&
		    (part_num == which_part) &&
		    (is_extended(pt->sys_ind) == 0)) {
			info->blksz = 512;
			info->start = ext_part_sector + le32_to_int (pt->start4);
			info->size  = le32_to_int (pt->size4);
c7e0fdb8:	e58c0004 	str	r0, [ip, #4]
c7e0fdbc:	e5992004 	ldr	r2, [r9, #4]
c7e0fdc0:	e28c000c 	add	r0, ip, #12	; 0xc
			switch(dev_desc->if_type) {
c7e0fdc4:	e3530007 	cmp	r3, #7	; 0x7
c7e0fdc8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e0fdcc:	ea000017 	b	c7e0fe30 <get_partition_info_extended+0x17c>
c7e0fdd0:	c7e0fdf0 	.word	0xc7e0fdf0
c7e0fdd4:	c7e0fe00 	.word	0xc7e0fe00
c7e0fdd8:	c7e0fdf0 	.word	0xc7e0fdf0
c7e0fddc:	c7e0fe10 	.word	0xc7e0fe10
c7e0fde0:	c7e0fe20 	.word	0xc7e0fe20
c7e0fde4:	c7e0fe30 	.word	0xc7e0fe30
c7e0fde8:	c7e0fe30 	.word	0xc7e0fe30
c7e0fdec:	c7e0fdf0 	.word	0xc7e0fdf0
				case IF_TYPE_IDE:
				case IF_TYPE_SATA:
				case IF_TYPE_ATAPI:
					sprintf ((char *)info->name, "hd%c%d",
c7e0fdf0:	e2822061 	add	r2, r2, #97	; 0x61
c7e0fdf4:	e1a03007 	mov	r3, r7
c7e0fdf8:	e59f10f4 	ldr	r1, [pc, #244]	; c7e0fef4 <get_partition_info_extended+0x240>
c7e0fdfc:	ea00000e 	b	c7e0fe3c <get_partition_info_extended+0x188>
						'a' + dev_desc->dev, part_num);
					break;
				case IF_TYPE_SCSI:
					sprintf ((char *)info->name, "sd%c%d",
c7e0fe00:	e2822061 	add	r2, r2, #97	; 0x61
c7e0fe04:	e1a03007 	mov	r3, r7
c7e0fe08:	e59f10e8 	ldr	r1, [pc, #232]	; c7e0fef8 <get_partition_info_extended+0x244>
c7e0fe0c:	ea00000a 	b	c7e0fe3c <get_partition_info_extended+0x188>
						'a' + dev_desc->dev, part_num);
					break;
				case IF_TYPE_USB:
					sprintf ((char *)info->name, "usbd%c%d",
c7e0fe10:	e2822061 	add	r2, r2, #97	; 0x61
c7e0fe14:	e1a03007 	mov	r3, r7
c7e0fe18:	e59f10dc 	ldr	r1, [pc, #220]	; c7e0fefc <get_partition_info_extended+0x248>
c7e0fe1c:	ea000006 	b	c7e0fe3c <get_partition_info_extended+0x188>
						'a' + dev_desc->dev, part_num);
					break;
				case IF_TYPE_DOC:
					sprintf ((char *)info->name, "docd%c%d",
c7e0fe20:	e2822061 	add	r2, r2, #97	; 0x61
c7e0fe24:	e1a03007 	mov	r3, r7
c7e0fe28:	e59f10d0 	ldr	r1, [pc, #208]	; c7e0ff00 <get_partition_info_extended+0x24c>
c7e0fe2c:	ea000002 	b	c7e0fe3c <get_partition_info_extended+0x188>
						'a' + dev_desc->dev, part_num);
					break;
				default:
					sprintf ((char *)info->name, "xx%c%d",
c7e0fe30:	e59f10cc 	ldr	r1, [pc, #204]	; c7e0ff04 <get_partition_info_extended+0x250>
c7e0fe34:	e2822061 	add	r2, r2, #97	; 0x61
c7e0fe38:	e1a03007 	mov	r3, r7
c7e0fe3c:	eb004ffb 	bl	c7e23e30 <sprintf>
						'a' + dev_desc->dev, part_num);
					break;
			}
			/* sprintf(info->type, "%d, pt->sys_ind); */
			sprintf ((char *)info->type, "U-Boot");
c7e0fe40:	e59b2008 	ldr	r2, [fp, #8]
c7e0fe44:	e59f10bc 	ldr	r1, [pc, #188]	; c7e0ff08 <get_partition_info_extended+0x254>
c7e0fe48:	e282002c 	add	r0, r2, #44	; 0x2c
c7e0fe4c:	eb004ff7 	bl	c7e23e30 <sprintf>
			info->bootable = is_bootable(pt);
c7e0fe50:	e1a00005 	mov	r0, r5
c7e0fe54:	ebffff91 	bl	c7e0fca0 <is_bootable>
c7e0fe58:	e59b3008 	ldr	r3, [fp, #8]
c7e0fe5c:	e583004c 	str	r0, [r3, #76]
c7e0fe60:	e3a00000 	mov	r0, #0	; 0x0
c7e0fe64:	ea00001e 	b	c7e0fee4 <get_partition_info_extended+0x230>
#endif
			return 0;
		}

		/* Reverse engr the fdisk part# assignment rule! */
		if ((ext_part_sector == 0) ||
c7e0fe68:	e35a0000 	cmp	sl, #0	; 0x0
c7e0fe6c:	0a000005 	beq	c7e0fe88 <get_partition_info_extended+0x1d4>
c7e0fe70:	e5d50004 	ldrb	r0, [r5, #4]
c7e0fe74:	e3500000 	cmp	r0, #0	; 0x0
c7e0fe78:	0a000003 	beq	c7e0fe8c <get_partition_info_extended+0x1d8>
c7e0fe7c:	ebffff7f 	bl	c7e0fc80 <is_extended>
c7e0fe80:	e3500000 	cmp	r0, #0	; 0x0
c7e0fe84:	1a000000 	bne	c7e0fe8c <get_partition_info_extended+0x1d8>
		    (pt->sys_ind != 0 && !is_extended (pt->sys_ind)) ) {
			part_num++;
c7e0fe88:	e2877001 	add	r7, r7, #1	; 0x1
		disksig = le32_to_int(&buffer[DOS_PART_DISKSIG_OFFSET]);
#endif

	/* Print all primary/logical partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
c7e0fe8c:	e2863f7b 	add	r3, r6, #492	; 0x1ec
c7e0fe90:	e2833002 	add	r3, r3, #2	; 0x2
c7e0fe94:	e1550003 	cmp	r5, r3
c7e0fe98:	12855010 	addne	r5, r5, #16	; 0x10
c7e0fe9c:	1affffaa 	bne	c7e0fd4c <get_partition_info_extended+0x98>
	}

	/* Follows the extended partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
		if (is_extended (pt->sys_ind)) {
c7e0fea0:	e5d40004 	ldrb	r0, [r4, #4]
c7e0fea4:	ebffff75 	bl	c7e0fc80 <is_extended>
c7e0fea8:	e3500000 	cmp	r0, #0	; 0x0
c7e0feac:	0a000008 	beq	c7e0fed4 <get_partition_info_extended+0x220>
			int lba_start = le32_to_int (pt->start4) + relative;
c7e0feb0:	e2840008 	add	r0, r4, #8	; 0x8
c7e0feb4:	ebffff67 	bl	c7e0fc58 <le32_to_int>
c7e0feb8:	e51bc020 	ldr	ip, [fp, #-32]

			return get_partition_info_extended (dev_desc, lba_start,
c7e0febc:	e35a0000 	cmp	sl, #0	; 0x0

	/* Follows the extended partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
		if (is_extended (pt->sys_ind)) {
			int lba_start = le32_to_int (pt->start4) + relative;
c7e0fec0:	e08c0000 	add	r0, ip, r0

			return get_partition_info_extended (dev_desc, lba_start,
c7e0fec4:	01a0c000 	moveq	ip, r0
c7e0fec8:	e50bc020 	str	ip, [fp, #-32]
c7e0fecc:	e1a0a000 	mov	sl, r0
c7e0fed0:	eaffff7e 	b	c7e0fcd0 <get_partition_info_extended+0x1c>
		}
	}

	/* Follows the extended partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
c7e0fed4:	e1540005 	cmp	r4, r5
c7e0fed8:	e2844010 	add	r4, r4, #16	; 0x10
c7e0fedc:	1affffef 	bne	c7e0fea0 <get_partition_info_extended+0x1ec>
c7e0fee0:	e3e00000 	mvn	r0, #0	; 0x0
				 ext_part_sector == 0 ? lba_start : relative,
				 part_num, which_part, info, disksig);
		}
	}
	return -1;
}
c7e0fee4:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e0fee8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e0feec:	c7e32c26 	.word	0xc7e32c26
c7e0fef0:	c7e32c51 	.word	0xc7e32c51
c7e0fef4:	c7e32c76 	.word	0xc7e32c76
c7e0fef8:	c7e32c7d 	.word	0xc7e32c7d
c7e0fefc:	c7e32c84 	.word	0xc7e32c84
c7e0ff00:	c7e32c8d 	.word	0xc7e32c8d
c7e0ff04:	c7e32c96 	.word	0xc7e32c96
c7e0ff08:	c7e32644 	.word	0xc7e32644

c7e0ff0c <get_partition_info_dos>:
	printf ("Partition     Start Sector     Num Sectors     Type\n");
	print_partition_extended (dev_desc, 0, 0, 1);
}

int get_partition_info_dos (block_dev_desc_t *dev_desc, int part, disk_partition_t * info)
{
c7e0ff0c:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
	return get_partition_info_extended(dev_desc, 0, 0, 1, part, info, 0);
c7e0ff10:	e3a0c000 	mov	ip, #0	; 0x0
c7e0ff14:	e88d0006 	stm	sp, {r1, r2}
c7e0ff18:	e1a0100c 	mov	r1, ip
c7e0ff1c:	e3a03001 	mov	r3, #1	; 0x1
c7e0ff20:	e1a0200c 	mov	r2, ip
c7e0ff24:	e58dc008 	str	ip, [sp, #8]
c7e0ff28:	ebffff61 	bl	c7e0fcb4 <get_partition_info_extended>
}
c7e0ff2c:	e28dd014 	add	sp, sp, #20	; 0x14
c7e0ff30:	e8bd8000 	pop	{pc}

c7e0ff34 <test_block_type>:
		(is_extended(p->sys_ind) ? " Extd" : ""),
		(is_bootable(p) ? " Boot" : ""));
}

static int test_block_type(unsigned char *buffer)
{
c7e0ff34:	e92d4010 	push	{r4, lr}
	if((buffer[DOS_PART_MAGIC_OFFSET + 0] != 0x55) ||
c7e0ff38:	e5d031fe 	ldrb	r3, [r0, #510]
		(is_extended(p->sys_ind) ? " Extd" : ""),
		(is_bootable(p) ? " Boot" : ""));
}

static int test_block_type(unsigned char *buffer)
{
c7e0ff3c:	e1a04000 	mov	r4, r0
	if((buffer[DOS_PART_MAGIC_OFFSET + 0] != 0x55) ||
c7e0ff40:	e3530055 	cmp	r3, #85	; 0x55
c7e0ff44:	1a000010 	bne	c7e0ff8c <test_block_type+0x58>
c7e0ff48:	e5d031ff 	ldrb	r3, [r0, #511]
c7e0ff4c:	e35300aa 	cmp	r3, #170	; 0xaa
c7e0ff50:	1a00000d 	bne	c7e0ff8c <test_block_type+0x58>
	    (buffer[DOS_PART_MAGIC_OFFSET + 1] != 0xaa) ) {
		return (-1);
	} /* no DOS Signature at all */
	if (strncmp((char *)&buffer[DOS_PBR_FSTYPE_OFFSET],"FAT",3)==0 ||
c7e0ff54:	e2800036 	add	r0, r0, #54	; 0x36
c7e0ff58:	e59f1034 	ldr	r1, [pc, #52]	; c7e0ff94 <test_block_type+0x60>
c7e0ff5c:	e3a02003 	mov	r2, #3	; 0x3
c7e0ff60:	eb004a4c 	bl	c7e22898 <strncmp>
c7e0ff64:	e3500000 	cmp	r0, #0	; 0x0
c7e0ff68:	02800001 	addeq	r0, r0, #1	; 0x1
c7e0ff6c:	08bd8010 	popeq	{r4, pc}
c7e0ff70:	e2840052 	add	r0, r4, #82	; 0x52
c7e0ff74:	e59f101c 	ldr	r1, [pc, #28]	; c7e0ff98 <test_block_type+0x64>
c7e0ff78:	e3a02005 	mov	r2, #5	; 0x5
c7e0ff7c:	eb004a45 	bl	c7e22898 <strncmp>
c7e0ff80:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e0ff84:	33a00000 	movcc	r0, #0	; 0x0
c7e0ff88:	e8bd8010 	pop	{r4, pc}
c7e0ff8c:	e3e00000 	mvn	r0, #0	; 0x0
	    strncmp((char *)&buffer[DOS_PBR32_FSTYPE_OFFSET],"FAT32",5)==0) {
		return DOS_PBR; /* is PBR */
	}
	return DOS_MBR;	    /* Is MBR */
}
c7e0ff90:	e8bd8010 	pop	{r4, pc}
c7e0ff94:	c7e32c9d 	.word	0xc7e32c9d
c7e0ff98:	c7e32ca1 	.word	0xc7e32ca1

c7e0ff9c <print_partition_extended>:

/*  Print a partition that is relative to its Extended partition table
 */
static void print_partition_extended (block_dev_desc_t *dev_desc, int ext_part_sector, int relative,
							   int part_num)
{
c7e0ff9c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e0ffa0:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e0ffa4:	e24dd028 	sub	sp, sp, #40	; 0x28
c7e0ffa8:	e50b0028 	str	r0, [fp, #-40]
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e0ffac:	e5900014 	ldr	r0, [r0, #20]

/*  Print a partition that is relative to its Extended partition table
 */
static void print_partition_extended (block_dev_desc_t *dev_desc, int ext_part_sector, int relative,
							   int part_num)
{
c7e0ffb0:	e50b202c 	str	r2, [fp, #-44]
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e0ffb4:	e280003f 	add	r0, r0, #63	; 0x3f
c7e0ffb8:	e3c0003f 	bic	r0, r0, #63	; 0x3f
c7e0ffbc:	e2800048 	add	r0, r0, #72	; 0x48
c7e0ffc0:	e04dd000 	sub	sp, sp, r0
c7e0ffc4:	e28d204f 	add	r2, sp, #79	; 0x4f

/*  Print a partition that is relative to its Extended partition table
 */
static void print_partition_extended (block_dev_desc_t *dev_desc, int ext_part_sector, int relative,
							   int part_num)
{
c7e0ffc8:	e50b3030 	str	r3, [fp, #-48]
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
	dos_partition_t *pt;
	int i;

	if (dev_desc->block_read(dev_desc->dev, ext_part_sector, 1, (ulong *) buffer) != 1) {
c7e0ffcc:	e51b3028 	ldr	r3, [fp, #-40]
/*  Print a partition that is relative to its Extended partition table
 */
static void print_partition_extended (block_dev_desc_t *dev_desc, int ext_part_sector, int relative,
							   int part_num)
{
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e0ffd0:	e3c2603f 	bic	r6, r2, #63	; 0x3f
	dos_partition_t *pt;
	int i;

	if (dev_desc->block_read(dev_desc->dev, ext_part_sector, 1, (ulong *) buffer) != 1) {
c7e0ffd4:	e5930004 	ldr	r0, [r3, #4]
c7e0ffd8:	e3a02001 	mov	r2, #1	; 0x1
c7e0ffdc:	e1a03006 	mov	r3, r6
c7e0ffe0:	e51bc028 	ldr	ip, [fp, #-40]

/*  Print a partition that is relative to its Extended partition table
 */
static void print_partition_extended (block_dev_desc_t *dev_desc, int ext_part_sector, int relative,
							   int part_num)
{
c7e0ffe4:	e1a05001 	mov	r5, r1
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
	dos_partition_t *pt;
	int i;

	if (dev_desc->block_read(dev_desc->dev, ext_part_sector, 1, (ulong *) buffer) != 1) {
c7e0ffe8:	e1a0e00f 	mov	lr, pc
c7e0ffec:	e59cf060 	ldr	pc, [ip, #96]
c7e0fff0:	e3500001 	cmp	r0, #1	; 0x1
		printf ("** Can't read partition table on %d:%d **\n",
c7e0fff4:	151b3028 	ldrne	r3, [fp, #-40]
c7e0fff8:	11a02005 	movne	r2, r5
c7e0fffc:	15931004 	ldrne	r1, [r3, #4]
c7e10000:	159f0148 	ldrne	r0, [pc, #328]	; c7e10150 <print_partition_extended+0x1b4>
c7e10004:	1a000009 	bne	c7e10030 <print_partition_extended+0x94>
			dev_desc->dev, ext_part_sector);
		return;
	}
	i=test_block_type(buffer);
c7e10008:	e1a00006 	mov	r0, r6
c7e1000c:	ebffffc8 	bl	c7e0ff34 <test_block_type>
	if (i != DOS_MBR) {
c7e10010:	e3500000 	cmp	r0, #0	; 0x0
			buffer[DOS_PART_MAGIC_OFFSET + 1]);
		return;
	}

	/* Print all primary/logical partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
c7e10014:	0286af6f 	addeq	sl, r6, #444	; 0x1bc
c7e10018:	028aa002 	addeq	sl, sl, #2	; 0x2
c7e1001c:	01a0700a 	moveq	r7, sl
		printf ("** Can't read partition table on %d:%d **\n",
			dev_desc->dev, ext_part_sector);
		return;
	}
	i=test_block_type(buffer);
	if (i != DOS_MBR) {
c7e10020:	0a000004 	beq	c7e10038 <print_partition_extended+0x9c>
		printf ("bad MBR sector signature 0x%02x%02x\n",
c7e10024:	e5d621ff 	ldrb	r2, [r6, #511]
c7e10028:	e5d611fe 	ldrb	r1, [r6, #510]
c7e1002c:	e59f0120 	ldr	r0, [pc, #288]	; c7e10154 <print_partition_extended+0x1b8>
c7e10030:	ebffe288 	bl	c7e08a58 <printf>
c7e10034:	ea000043 	b	c7e10148 <print_partition_extended+0x1ac>
		/*
		 * fdisk does not show the extended partitions that
		 * are not in the MBR
		 */

		if ((pt->sys_ind != 0) &&
c7e10038:	e5d79004 	ldrb	r9, [r7, #4]
c7e1003c:	e3590000 	cmp	r9, #0	; 0x0
c7e10040:	0a00001f 	beq	c7e100c4 <print_partition_extended+0x128>
c7e10044:	e3550000 	cmp	r5, #0	; 0x0
c7e10048:	e1a00009 	mov	r0, r9
c7e1004c:	0a000002 	beq	c7e1005c <print_partition_extended+0xc0>
c7e10050:	ebffff0a 	bl	c7e0fc80 <is_extended>
c7e10054:	e3500000 	cmp	r0, #0	; 0x0
c7e10058:	1a00001b 	bne	c7e100cc <print_partition_extended+0x130>
	return p->boot_ind == 0x80;
}

static void print_one_part (dos_partition_t *p, int ext_part_sector, int part_num)
{
	int lba_start = ext_part_sector + le32_to_int (p->start4);
c7e1005c:	e2870008 	add	r0, r7, #8	; 0x8
c7e10060:	ebfffefc 	bl	c7e0fc58 <le32_to_int>
c7e10064:	e50b0020 	str	r0, [fp, #-32]
	int lba_size  = le32_to_int (p->size4);
c7e10068:	e287000c 	add	r0, r7, #12	; 0xc
c7e1006c:	ebfffef9 	bl	c7e0fc58 <le32_to_int>
c7e10070:	e50b0024 	str	r0, [fp, #-36]

	printf("%5d\t\t%10d\t%10d\t%2x%s%s\n",
c7e10074:	e1a00009 	mov	r0, r9
c7e10078:	ebffff00 	bl	c7e0fc80 <is_extended>
c7e1007c:	e59fc0d4 	ldr	ip, [pc, #212]	; c7e10158 <print_partition_extended+0x1bc>
c7e10080:	e3500000 	cmp	r0, #0	; 0x0
c7e10084:	e1a00007 	mov	r0, r7
c7e10088:	e59f40cc 	ldr	r4, [pc, #204]	; c7e1015c <print_partition_extended+0x1c0>
c7e1008c:	01a0400c 	moveq	r4, ip
c7e10090:	ebffff02 	bl	c7e0fca0 <is_bootable>
c7e10094:	e51b3020 	ldr	r3, [fp, #-32]
c7e10098:	e59fc0c0 	ldr	ip, [pc, #192]	; c7e10160 <print_partition_extended+0x1c4>
c7e1009c:	e0852003 	add	r2, r5, r3
c7e100a0:	e59f30b0 	ldr	r3, [pc, #176]	; c7e10158 <print_partition_extended+0x1bc>
c7e100a4:	e3500000 	cmp	r0, #0	; 0x0
c7e100a8:	01a0c003 	moveq	ip, r3
c7e100ac:	e51b1030 	ldr	r1, [fp, #-48]
c7e100b0:	e51b3024 	ldr	r3, [fp, #-36]
c7e100b4:	e59f00a8 	ldr	r0, [pc, #168]	; c7e10164 <print_partition_extended+0x1c8>
c7e100b8:	e58d9000 	str	r9, [sp]
c7e100bc:	e98d1010 	stmib	sp, {r4, ip}
c7e100c0:	ebffe264 	bl	c7e08a58 <printf>
		    (ext_part_sector == 0 || !is_extended (pt->sys_ind)) ) {
			print_one_part (pt, ext_part_sector, part_num);
		}

		/* Reverse engr the fdisk part# assignment rule! */
		if ((ext_part_sector == 0) ||
c7e100c4:	e3550000 	cmp	r5, #0	; 0x0
c7e100c8:	0a000005 	beq	c7e100e4 <print_partition_extended+0x148>
c7e100cc:	e5d70004 	ldrb	r0, [r7, #4]
c7e100d0:	e3500000 	cmp	r0, #0	; 0x0
c7e100d4:	0a000005 	beq	c7e100f0 <print_partition_extended+0x154>
c7e100d8:	ebfffee8 	bl	c7e0fc80 <is_extended>
c7e100dc:	e3500000 	cmp	r0, #0	; 0x0
c7e100e0:	1a000002 	bne	c7e100f0 <print_partition_extended+0x154>
		    (pt->sys_ind != 0 && !is_extended (pt->sys_ind)) ) {
			part_num++;
c7e100e4:	e51bc030 	ldr	ip, [fp, #-48]
c7e100e8:	e28cc001 	add	ip, ip, #1	; 0x1
c7e100ec:	e50bc030 	str	ip, [fp, #-48]
		return;
	}

	/* Print all primary/logical partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
c7e100f0:	e2863f7b 	add	r3, r6, #492	; 0x1ec
c7e100f4:	e2833002 	add	r3, r3, #2	; 0x2
c7e100f8:	e1570003 	cmp	r7, r3
c7e100fc:	12877010 	addne	r7, r7, #16	; 0x10
c7e10100:	1affffcc 	bne	c7e10038 <print_partition_extended+0x9c>
	}

	/* Follows the extended partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
		if (is_extended (pt->sys_ind)) {
c7e10104:	e5da0004 	ldrb	r0, [sl, #4]
c7e10108:	ebfffedc 	bl	c7e0fc80 <is_extended>
c7e1010c:	e3500000 	cmp	r0, #0	; 0x0
c7e10110:	0a000009 	beq	c7e1013c <print_partition_extended+0x1a0>
			int lba_start = le32_to_int (pt->start4) + relative;
c7e10114:	e28a0008 	add	r0, sl, #8	; 0x8
c7e10118:	ebfffece 	bl	c7e0fc58 <le32_to_int>
c7e1011c:	e51b302c 	ldr	r3, [fp, #-44]

			print_partition_extended (dev_desc, lba_start,
c7e10120:	e3550000 	cmp	r5, #0	; 0x0

	/* Follows the extended partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
		if (is_extended (pt->sys_ind)) {
			int lba_start = le32_to_int (pt->start4) + relative;
c7e10124:	e0831000 	add	r1, r3, r0

			print_partition_extended (dev_desc, lba_start,
c7e10128:	e1a02003 	mov	r2, r3
c7e1012c:	e51b0028 	ldr	r0, [fp, #-40]
c7e10130:	01a02001 	moveq	r2, r1
c7e10134:	e51b3030 	ldr	r3, [fp, #-48]
c7e10138:	ebffff97 	bl	c7e0ff9c <print_partition_extended>
		}
	}

	/* Follows the extended partitions */
	pt = (dos_partition_t *) (buffer + DOS_PART_TBL_OFFSET);
	for (i = 0; i < 4; i++, pt++) {
c7e1013c:	e15a0007 	cmp	sl, r7
c7e10140:	e28aa010 	add	sl, sl, #16	; 0x10
c7e10144:	1affffee 	bne	c7e10104 <print_partition_extended+0x168>
						  part_num);
		}
	}

	return;
}
c7e10148:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e1014c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e10150:	c7e32c26 	.word	0xc7e32c26
c7e10154:	c7e32c51 	.word	0xc7e32c51
c7e10158:	c7e2fef0 	.word	0xc7e2fef0
c7e1015c:	c7e32ca7 	.word	0xc7e32ca7
c7e10160:	c7e32cad 	.word	0xc7e32cad
c7e10164:	c7e32cb3 	.word	0xc7e32cb3

c7e10168 <print_part_dos>:
	}
	return -1;
}

void print_part_dos (block_dev_desc_t *dev_desc)
{
c7e10168:	e92d4010 	push	{r4, lr}
c7e1016c:	e1a04000 	mov	r4, r0
	printf ("Partition     Start Sector     Num Sectors     Type\n");
c7e10170:	e59f0018 	ldr	r0, [pc, #24]	; c7e10190 <print_part_dos+0x28>
c7e10174:	ebffe237 	bl	c7e08a58 <printf>
	print_partition_extended (dev_desc, 0, 0, 1);
c7e10178:	e3a01000 	mov	r1, #0	; 0x0
c7e1017c:	e1a00004 	mov	r0, r4
c7e10180:	e1a02001 	mov	r2, r1
c7e10184:	e3a03001 	mov	r3, #1	; 0x1
}
c7e10188:	e8bd4010 	pop	{r4, lr}
}

void print_part_dos (block_dev_desc_t *dev_desc)
{
	printf ("Partition     Start Sector     Num Sectors     Type\n");
	print_partition_extended (dev_desc, 0, 0, 1);
c7e1018c:	eaffff82 	b	c7e0ff9c <print_partition_extended>
c7e10190:	c7e32ccb 	.word	0xc7e32ccb

c7e10194 <test_part_dos>:
	return DOS_MBR;	    /* Is MBR */
}


int test_part_dos (block_dev_desc_t *dev_desc)
{
c7e10194:	e92d4830 	push	{r4, r5, fp, lr}
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e10198:	e5903014 	ldr	r3, [r0, #20]
	return DOS_MBR;	    /* Is MBR */
}


int test_part_dos (block_dev_desc_t *dev_desc)
{
c7e1019c:	e28db00c 	add	fp, sp, #12	; 0xc
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e101a0:	e283303f 	add	r3, r3, #63	; 0x3f
c7e101a4:	e3c3303f 	bic	r3, r3, #63	; 0x3f
c7e101a8:	e2833048 	add	r3, r3, #72	; 0x48
c7e101ac:	e04dd003 	sub	sp, sp, r3
c7e101b0:	e28d303f 	add	r3, sp, #63	; 0x3f
c7e101b4:	e3c3403f 	bic	r4, r3, #63	; 0x3f
	return DOS_MBR;	    /* Is MBR */
}


int test_part_dos (block_dev_desc_t *dev_desc)
{
c7e101b8:	e1a0c000 	mov	ip, r0
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);

	if (dev_desc->block_read(dev_desc->dev, 0, 1, (ulong *) buffer) != 1)
c7e101bc:	e3a01000 	mov	r1, #0	; 0x0
c7e101c0:	e5900004 	ldr	r0, [r0, #4]
c7e101c4:	e3a02001 	mov	r2, #1	; 0x1
c7e101c8:	e1a03004 	mov	r3, r4
c7e101cc:	e1a0e00f 	mov	lr, pc
c7e101d0:	e59cf060 	ldr	pc, [ip, #96]
c7e101d4:	e3500001 	cmp	r0, #1	; 0x1
c7e101d8:	1a000003 	bne	c7e101ec <test_part_dos+0x58>
		return -1;

	if (test_block_type(buffer) != DOS_MBR)
c7e101dc:	e1a00004 	mov	r0, r4
c7e101e0:	ebffff53 	bl	c7e0ff34 <test_block_type>
c7e101e4:	e3500000 	cmp	r0, #0	; 0x0
c7e101e8:	0a000000 	beq	c7e101f0 <test_part_dos+0x5c>
c7e101ec:	e3e00000 	mvn	r0, #0	; 0x0
		return -1;

	return 0;
}
c7e101f0:	e24bd00c 	sub	sp, fp, #12	; 0xc
c7e101f4:	e8bd8830 	pop	{r4, r5, fp, pc}

c7e101f8 <s3c_gpio_get_bank_addr>:

static uint32_t s3c_gpio_get_bank_addr(unsigned gpio)
{
	/* There is up to 16 pins per bank, one bank is 0x10 big. */
	uint32_t addr = gpio & ~0xf;
	if(gpio == -1) return 0xffffffff;
c7e101f8:	e3700001 	cmn	r0, #1	; 0x1
	return addr | ELFIN_GPIO_BASE;
c7e101fc:	13c0300f 	bicne	r3, r0, #15	; 0xf
c7e10200:	1383047f 	orrne	r0, r3, #2130706432	; 0x7f000000
c7e10204:	13800902 	orrne	r0, r0, #32768	; 0x8000
}
c7e10208:	e12fff1e 	bx	lr

c7e1020c <gpio_set_value>:

int gpio_set_value(unsigned gpio, int value)
{
c7e1020c:	e92d4070 	push	{r4, r5, r6, lr}
c7e10210:	e1a04001 	mov	r4, r1
c7e10214:	e1a05000 	mov	r5, r0
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);
c7e10218:	ebfffff6 	bl	c7e101f8 <s3c_gpio_get_bank_addr>

	if (addr == 0xffffffff)
c7e1021c:	e3700001 	cmn	r0, #1	; 0x1
c7e10220:	03e00015 	mvneq	r0, #21	; 0x15
c7e10224:	08bd8070 	popeq	{r4, r5, r6, pc}
		return -EINVAL;
	/* GPH GPK GPL Port have 2 configuration*/
	addr |= S3C_GPIO_DAT;
	switch(addr-ELFIN_GPIO_BASE) {
c7e10228:	e59f205c 	ldr	r2, [pc, #92]	; c7e1028c <gpio_set_value+0x80>
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);

	if (addr == 0xffffffff)
		return -EINVAL;
	/* GPH GPK GPL Port have 2 configuration*/
	addr |= S3C_GPIO_DAT;
c7e1022c:	e3800004 	orr	r0, r0, #4	; 0x4
	switch(addr-ELFIN_GPIO_BASE) {
c7e10230:	e0802002 	add	r2, r0, r2
c7e10234:	e3520b02 	cmp	r2, #2048	; 0x800
c7e10238:	0a000003 	beq	c7e1024c <gpio_set_value+0x40>
c7e1023c:	e3520e81 	cmp	r2, #2064	; 0x810
c7e10240:	0a000001 	beq	c7e1024c <gpio_set_value+0x40>
c7e10244:	e35200e0 	cmp	r2, #224	; 0xe0
c7e10248:	1a000000 	bne	c7e10250 <gpio_set_value+0x44>
		case GPH0:
		case GPK0:
		case GPL0:
			addr += S3C_GPIO_DAT;
c7e1024c:	e2800004 	add	r0, r0, #4	; 0x4
		default:
			break;
	}
	
	debug("gpio: addr=%x offset=%d\n", addr,(gpio&0xf));
	if (value)
c7e10250:	e3540000 	cmp	r4, #0	; 0x0
c7e10254:	e205100f 	and	r1, r5, #15	; 0xf
c7e10258:	0a000005 	beq	c7e10274 <gpio_set_value+0x68>
		setbits_le32(addr, 1 << (gpio & 0xf));
c7e1025c:	e5903000 	ldr	r3, [r0]
c7e10260:	e3a02001 	mov	r2, #1	; 0x1
c7e10264:	e1833112 	orr	r3, r3, r2, lsl r1
c7e10268:	e5803000 	str	r3, [r0]
c7e1026c:	e3a00000 	mov	r0, #0	; 0x0
c7e10270:	e8bd8070 	pop	{r4, r5, r6, pc}
	else
		clrbits_le32(addr, 1 << (gpio & 0xf));
c7e10274:	e5903000 	ldr	r3, [r0]
c7e10278:	e3a02001 	mov	r2, #1	; 0x1
c7e1027c:	e1c33112 	bic	r3, r3, r2, lsl r1
c7e10280:	e5803000 	str	r3, [r0]
c7e10284:	e1a00004 	mov	r0, r4

	return 0;
}
c7e10288:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1028c:	80ff8000 	.word	0x80ff8000

c7e10290 <gpio_get_value>:

int gpio_get_value(unsigned gpio)
{
c7e10290:	e92d4010 	push	{r4, lr}
c7e10294:	e1a04000 	mov	r4, r0
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);
c7e10298:	ebffffd6 	bl	c7e101f8 <s3c_gpio_get_bank_addr>

	if (addr == 0xffffffff)
c7e1029c:	e3700001 	cmn	r0, #1	; 0x1
c7e102a0:	03e00015 	mvneq	r0, #21	; 0x15
c7e102a4:	08bd8010 	popeq	{r4, pc}
		return -EINVAL;
	/* GPH GPK GPL Port have 2 configuration*/
	addr |= S3C_GPIO_DAT;
	switch(addr-ELFIN_GPIO_BASE) {
c7e102a8:	e59f303c 	ldr	r3, [pc, #60]	; c7e102ec <gpio_get_value+0x5c>
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);

	if (addr == 0xffffffff)
		return -EINVAL;
	/* GPH GPK GPL Port have 2 configuration*/
	addr |= S3C_GPIO_DAT;
c7e102ac:	e3800004 	orr	r0, r0, #4	; 0x4
	switch(addr-ELFIN_GPIO_BASE) {
c7e102b0:	e0803003 	add	r3, r0, r3
c7e102b4:	e3530b02 	cmp	r3, #2048	; 0x800
c7e102b8:	0a000003 	beq	c7e102cc <gpio_get_value+0x3c>
c7e102bc:	e3530e81 	cmp	r3, #2064	; 0x810
c7e102c0:	0a000001 	beq	c7e102cc <gpio_get_value+0x3c>
c7e102c4:	e35300e0 	cmp	r3, #224	; 0xe0
c7e102c8:	1a000000 	bne	c7e102d0 <gpio_get_value+0x40>
		case GPH0:
		case GPK0:
		case GPL0:
			addr += S3C_GPIO_DAT;
c7e102cc:	e2800004 	add	r0, r0, #4	; 0x4
			break;
		default:
			break;
	}

	return !!(readl(addr) & (1 << (gpio & 0xf)));
c7e102d0:	e5901000 	ldr	r1, [r0]
c7e102d4:	e3a03001 	mov	r3, #1	; 0x1
c7e102d8:	e204200f 	and	r2, r4, #15	; 0xf
c7e102dc:	e0113213 	ands	r3, r1, r3, lsl r2
c7e102e0:	03a00000 	moveq	r0, #0	; 0x0
c7e102e4:	13a00001 	movne	r0, #1	; 0x1
}
c7e102e8:	e8bd8010 	pop	{r4, pc}
c7e102ec:	80ff8000 	.word	0x80ff8000

c7e102f0 <gpio_request>:

int gpio_request(unsigned gpio, const char *label)
{
	return 0;
}
c7e102f0:	e3a00000 	mov	r0, #0	; 0x0
c7e102f4:	e12fff1e 	bx	lr

c7e102f8 <gpio_free>:

int gpio_free(unsigned gpio)
{
	return 0;
}
c7e102f8:	e3a00000 	mov	r0, #0	; 0x0
c7e102fc:	e12fff1e 	bx	lr

c7e10300 <s3c_gpio_direction>:

static int s3c_gpio_direction(unsigned gpio, uint8_t dir)
{
c7e10300:	e92d4070 	push	{r4, r5, r6, lr}
c7e10304:	e1a05001 	mov	r5, r1
c7e10308:	e1a04000 	mov	r4, r0
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);
c7e1030c:	ebffffb9 	bl	c7e101f8 <s3c_gpio_get_bank_addr>
	uint32_t mask = 0xf << ((gpio & 0xf) << 2);
c7e10310:	e204400f 	and	r4, r4, #15	; 0xf
c7e10314:	e1a02104 	lsl	r2, r4, #2
	uint32_t dirm = dir << ((gpio & 0xf) << 2);

	if (addr == 0xffffffff)
c7e10318:	e3700001 	cmn	r0, #1	; 0x1
}

static int s3c_gpio_direction(unsigned gpio, uint8_t dir)
{
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);
	uint32_t mask = 0xf << ((gpio & 0xf) << 2);
c7e1031c:	e3a0300f 	mov	r3, #15	; 0xf
	return 0;
}

static int s3c_gpio_direction(unsigned gpio, uint8_t dir)
{
	uint32_t addr = s3c_gpio_get_bank_addr(gpio);
c7e10320:	e1a01000 	mov	r1, r0
	uint32_t mask = 0xf << ((gpio & 0xf) << 2);
c7e10324:	e1a0c213 	lsl	ip, r3, r2
	uint32_t dirm = dir << ((gpio & 0xf) << 2);
c7e10328:	e1a0e215 	lsl	lr, r5, r2

	if (addr == 0xffffffff)
c7e1032c:	03e00015 	mvneq	r0, #21	; 0x15
c7e10330:	08bd8070 	popeq	{r4, r5, r6, pc}
		return -EINVAL;

	/* GPH GPK GPL Port have 2 configuration*/
	addr |= S3C_GPIO_CON;
	switch(addr-ELFIN_GPIO_BASE) {
c7e10334:	e59f3070 	ldr	r3, [pc, #112]	; c7e103ac <s3c_gpio_direction+0xac>
c7e10338:	e0813003 	add	r3, r1, r3
c7e1033c:	e3530d05 	cmp	r3, #320	; 0x140
c7e10340:	0a00000c 	beq	c7e10378 <s3c_gpio_direction+0x78>
c7e10344:	8a000005 	bhi	c7e10360 <s3c_gpio_direction+0x60>
c7e10348:	e3530c01 	cmp	r3, #256	; 0x100
c7e1034c:	0a000009 	beq	c7e10378 <s3c_gpio_direction+0x78>
c7e10350:	e3530e12 	cmp	r3, #288	; 0x120
c7e10354:	0a000007 	beq	c7e10378 <s3c_gpio_direction+0x78>
c7e10358:	e35300a0 	cmp	r3, #160	; 0xa0
c7e1035c:	ea000004 	b	c7e10374 <s3c_gpio_direction+0x74>
c7e10360:	e3530d06 	cmp	r3, #384	; 0x180
c7e10364:	0a000003 	beq	c7e10378 <s3c_gpio_direction+0x78>
c7e10368:	e3530e83 	cmp	r3, #2096	; 0x830
c7e1036c:	0a000001 	beq	c7e10378 <s3c_gpio_direction+0x78>
c7e10370:	e3530e16 	cmp	r3, #352	; 0x160
c7e10374:	1a000004 	bne	c7e1038c <s3c_gpio_direction+0x8c>
		case GPJ0:
		case GPN0:
		case GPO0:
		case GPP0:
		case GPQ0:
			mask = 0x3 << ((gpio & 0xf) << 1);
c7e10378:	e1a02084 	lsl	r2, r4, #1
c7e1037c:	e3a03003 	mov	r3, #3	; 0x3
			dirm = dir << ((gpio & 0xf) << 1);
c7e10380:	e1a0e215 	lsl	lr, r5, r2
		case GPJ0:
		case GPN0:
		case GPO0:
		case GPP0:
		case GPQ0:
			mask = 0x3 << ((gpio & 0xf) << 1);
c7e10384:	e1a0c213 	lsl	ip, r3, r2
c7e10388:	ea000001 	b	c7e10394 <s3c_gpio_direction+0x94>
			dirm = dir << ((gpio & 0xf) << 1);
			break;
		default:
			if((gpio & 0xf) > 7) {
c7e1038c:	e3540007 	cmp	r4, #7	; 0x7
				addr += 4;
c7e10390:	82811004 	addhi	r1, r1, #4	; 0x4
			}
			break;
	}
	debug("gpio: gpio=%x addr=%x mask=%x offset=%d\n",gpio,addr,mask,(gpio&0xf));
	clrsetbits_le32(addr, mask, dirm);
c7e10394:	e5913000 	ldr	r3, [r1]
c7e10398:	e3a00000 	mov	r0, #0	; 0x0
c7e1039c:	e1c3300c 	bic	r3, r3, ip
c7e103a0:	e183300e 	orr	r3, r3, lr
c7e103a4:	e5813000 	str	r3, [r1]
	return 0;
}
c7e103a8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e103ac:	80ff8000 	.word	0x80ff8000

c7e103b0 <gpio_direction_input>:

int gpio_direction_input(unsigned gpio)
{
	return s3c_gpio_direction(gpio, GPIO_INPUT);
c7e103b0:	e3a01000 	mov	r1, #0	; 0x0
c7e103b4:	eaffffd1 	b	c7e10300 <s3c_gpio_direction>

c7e103b8 <gpio_direction_output>:
}

int gpio_direction_output(unsigned gpio, int value)
{
c7e103b8:	e92d4070 	push	{r4, r5, r6, lr}
c7e103bc:	e1a05001 	mov	r5, r1
	s3c_gpio_direction(gpio, GPIO_OUTPUT);
c7e103c0:	e3a01001 	mov	r1, #1	; 0x1
{
	return s3c_gpio_direction(gpio, GPIO_INPUT);
}

int gpio_direction_output(unsigned gpio, int value)
{
c7e103c4:	e1a04000 	mov	r4, r0
	s3c_gpio_direction(gpio, GPIO_OUTPUT);
c7e103c8:	ebffffcc 	bl	c7e10300 <s3c_gpio_direction>
	return gpio_set_value(gpio, value);
c7e103cc:	e1a00004 	mov	r0, r4
c7e103d0:	e1a01005 	mov	r1, r5
}
c7e103d4:	e8bd4070 	pop	{r4, r5, r6, lr}
}

int gpio_direction_output(unsigned gpio, int value)
{
	s3c_gpio_direction(gpio, GPIO_OUTPUT);
	return gpio_set_value(gpio, value);
c7e103d8:	eaffff8b 	b	c7e1020c <gpio_set_value>

c7e103dc <input_queue_ascii>:
};


int input_queue_ascii(struct input_config *config, int ch)
{
	if (config->fifo_in + 1 == INPUT_BUFFER_LEN) {
c7e103dc:	e5903010 	ldr	r3, [r0, #16]
c7e103e0:	e5902014 	ldr	r2, [r0, #20]
c7e103e4:	e353000f 	cmp	r3, #15	; 0xf
c7e103e8:	1a000003 	bne	c7e103fc <input_queue_ascii+0x20>
		if (!config->fifo_out)
c7e103ec:	e3520000 	cmp	r2, #0	; 0x0
			return -1; /* buffer full */
		else
			config->fifo_in = 0;
c7e103f0:	13a03000 	movne	r3, #0	; 0x0


int input_queue_ascii(struct input_config *config, int ch)
{
	if (config->fifo_in + 1 == INPUT_BUFFER_LEN) {
		if (!config->fifo_out)
c7e103f4:	1a000003 	bne	c7e10408 <input_queue_ascii+0x2c>
c7e103f8:	ea000007 	b	c7e1041c <input_queue_ascii+0x40>
			return -1; /* buffer full */
		else
			config->fifo_in = 0;
	} else {
		if (config->fifo_in + 1 == config->fifo_out)
c7e103fc:	e2833001 	add	r3, r3, #1	; 0x1
c7e10400:	e1530002 	cmp	r3, r2
c7e10404:	0a000004 	beq	c7e1041c <input_queue_ascii+0x40>
			return -1; /* buffer full */
		config->fifo_in++;
c7e10408:	e5803010 	str	r3, [r0, #16]
	}
	config->fifo[config->fifo_in] = (uchar)ch;
c7e1040c:	e5903010 	ldr	r3, [r0, #16]
c7e10410:	e3a02000 	mov	r2, #0	; 0x0
c7e10414:	e7c01003 	strb	r1, [r0, r3]
c7e10418:	ea000000 	b	c7e10420 <input_queue_ascii+0x44>

	return 0;
c7e1041c:	e3e02000 	mvn	r2, #0	; 0x0
}
c7e10420:	e1a00002 	mov	r0, r2
c7e10424:	e12fff1e 	bx	lr

c7e10428 <input_tstc>:

int input_tstc(struct input_config *config)
{
	if (config->fifo_in == config->fifo_out && config->read_keys) {
c7e10428:	e5902010 	ldr	r2, [r0, #16]
c7e1042c:	e5903014 	ldr	r3, [r0, #20]

	return 0;
}

int input_tstc(struct input_config *config)
{
c7e10430:	e92d4010 	push	{r4, lr}
	if (config->fifo_in == config->fifo_out && config->read_keys) {
c7e10434:	e1520003 	cmp	r2, r3

	return 0;
}

int input_tstc(struct input_config *config)
{
c7e10438:	e1a04000 	mov	r4, r0
	if (config->fifo_in == config->fifo_out && config->read_keys) {
c7e1043c:	1a000005 	bne	c7e10458 <input_tstc+0x30>
c7e10440:	e59030a0 	ldr	r3, [r0, #160]
c7e10444:	e3530000 	cmp	r3, #0	; 0x0
c7e10448:	0a000002 	beq	c7e10458 <input_tstc+0x30>
		if (!(*config->read_keys)(config))
c7e1044c:	e12fff33 	blx	r3
c7e10450:	e3500000 	cmp	r0, #0	; 0x0
c7e10454:	08bd8010 	popeq	{r4, pc}
			return 0;
	}
	return config->fifo_in != config->fifo_out;
c7e10458:	e5942014 	ldr	r2, [r4, #20]
c7e1045c:	e5943010 	ldr	r3, [r4, #16]
c7e10460:	e0530002 	subs	r0, r3, r2
c7e10464:	13a00001 	movne	r0, #1	; 0x1
}
c7e10468:	e8bd8010 	pop	{r4, pc}

c7e1046c <input_getc>:

int input_getc(struct input_config *config)
{
c7e1046c:	e92d4010 	push	{r4, lr}
c7e10470:	e1a04000 	mov	r4, r0
c7e10474:	ea000007 	b	c7e10498 <input_getc+0x2c>
	int err = 0;

	while (config->fifo_in == config->fifo_out) {
		if (config->read_keys)
c7e10478:	e59430a0 	ldr	r3, [r4, #160]
c7e1047c:	e3530000 	cmp	r3, #0	; 0x0
c7e10480:	0a000004 	beq	c7e10498 <input_getc+0x2c>
			err = (*config->read_keys)(config);
c7e10484:	e12fff33 	blx	r3
		if (err)
c7e10488:	e3500000 	cmp	r0, #0	; 0x0
c7e1048c:	0a000001 	beq	c7e10498 <input_getc+0x2c>
c7e10490:	e3e00000 	mvn	r0, #0	; 0x0
c7e10494:	e8bd8010 	pop	{r4, pc}

int input_getc(struct input_config *config)
{
	int err = 0;

	while (config->fifo_in == config->fifo_out) {
c7e10498:	e5942014 	ldr	r2, [r4, #20]
c7e1049c:	e5943010 	ldr	r3, [r4, #16]
		if (config->read_keys)
			err = (*config->read_keys)(config);
c7e104a0:	e1a00004 	mov	r0, r4

int input_getc(struct input_config *config)
{
	int err = 0;

	while (config->fifo_in == config->fifo_out) {
c7e104a4:	e1530002 	cmp	r3, r2
c7e104a8:	0afffff2 	beq	c7e10478 <input_getc+0xc>
			err = (*config->read_keys)(config);
		if (err)
			return -1;
	}

	if (++config->fifo_out == INPUT_BUFFER_LEN)
c7e104ac:	e2823001 	add	r3, r2, #1	; 0x1
c7e104b0:	e3530010 	cmp	r3, #16	; 0x10
c7e104b4:	e5843014 	str	r3, [r4, #20]
		config->fifo_out = 0;
c7e104b8:	03a03000 	moveq	r3, #0	; 0x0
c7e104bc:	05843014 	streq	r3, [r4, #20]

	return config->fifo[config->fifo_out];
c7e104c0:	e5943014 	ldr	r3, [r4, #20]
c7e104c4:	e7d40003 	ldrb	r0, [r4, r3]
}
c7e104c8:	e8bd8010 	pop	{r4, pc}

c7e104cc <array_search>:
 * @param count	Number of elements in array
 * @param key	Key value to find
 * @return element where value was first found, -1 if none
 */
static int array_search(int *array, int count, int key)
{
c7e104cc:	e1a0c000 	mov	ip, r0
c7e104d0:	e3a00000 	mov	r0, #0	; 0x0
c7e104d4:	ea000003 	b	c7e104e8 <array_search+0x1c>
	int i;

	for (i = 0; i < count; i++) {
		if (array[i] == key)
c7e104d8:	e79c3100 	ldr	r3, [ip, r0, lsl #2]
c7e104dc:	e1530002 	cmp	r3, r2
c7e104e0:	012fff1e 	bxeq	lr
 */
static int array_search(int *array, int count, int key)
{
	int i;

	for (i = 0; i < count; i++) {
c7e104e4:	e2800001 	add	r0, r0, #1	; 0x1
c7e104e8:	e1500001 	cmp	r0, r1
c7e104ec:	bafffff9 	blt	c7e104d8 <array_search+0xc>
c7e104f0:	e3e00000 	mvn	r0, #0	; 0x0
		if (array[i] == key)
			return i;
	}

	return -1;
}
c7e104f4:	e12fff1e 	bx	lr

c7e104f8 <input_add_table>:
	return 0;
}

int input_add_table(struct input_config *config, int left_keycode,
		    int right_keycode, const uchar *xlate, int num_entries)
{
c7e104f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	struct input_key_xlate *table;

	if (config->num_tables == INPUT_MAX_MODIFIERS) {
c7e104fc:	e5d0c01b 	ldrb	ip, [r0, #27]
	return 0;
}

int input_add_table(struct input_config *config, int left_keycode,
		    int right_keycode, const uchar *xlate, int num_entries)
{
c7e10500:	e1a04000 	mov	r4, r0
	struct input_key_xlate *table;

	if (config->num_tables == INPUT_MAX_MODIFIERS) {
c7e10504:	e35c0004 	cmp	ip, #4	; 0x4
	return 0;
}

int input_add_table(struct input_config *config, int left_keycode,
		    int right_keycode, const uchar *xlate, int num_entries)
{
c7e10508:	e1a07001 	mov	r7, r1
c7e1050c:	e1a05002 	mov	r5, r2
c7e10510:	e1a06003 	mov	r6, r3
	struct input_key_xlate *table;

	if (config->num_tables == INPUT_MAX_MODIFIERS) {
c7e10514:	03e00000 	mvneq	r0, #0	; 0x0
c7e10518:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
		debug("%s: Too many modifier tables\n", __func__);
		return -1;
	}

	table = &config->table[config->num_tables++];
	table->left_keycode = left_keycode;
c7e1051c:	e28c1006 	add	r1, ip, #6	; 0x6
	if (config->num_tables == INPUT_MAX_MODIFIERS) {
		debug("%s: Too many modifier tables\n", __func__);
		return -1;
	}

	table = &config->table[config->num_tables++];
c7e10520:	e28c3001 	add	r3, ip, #1	; 0x1
	table->left_keycode = left_keycode;
	table->right_keycode = right_keycode;
c7e10524:	e0842201 	add	r2, r4, r1, lsl #4
	if (config->num_tables == INPUT_MAX_MODIFIERS) {
		debug("%s: Too many modifier tables\n", __func__);
		return -1;
	}

	table = &config->table[config->num_tables++];
c7e10528:	e5c4301b 	strb	r3, [r4, #27]
	table->left_keycode = left_keycode;
	table->right_keycode = right_keycode;
c7e1052c:	e5825004 	str	r5, [r2, #4]
	table->xlate = xlate;
	table->num_entries = num_entries;
c7e10530:	e59d3014 	ldr	r3, [sp, #20]
	}

	table = &config->table[config->num_tables++];
	table->left_keycode = left_keycode;
	table->right_keycode = right_keycode;
	table->xlate = xlate;
c7e10534:	e084020c 	add	r0, r4, ip, lsl #4
	table->num_entries = num_entries;
c7e10538:	e580306c 	str	r3, [r0, #108]
	}

	table = &config->table[config->num_tables++];
	table->left_keycode = left_keycode;
	table->right_keycode = right_keycode;
	table->xlate = xlate;
c7e1053c:	e5806068 	str	r6, [r0, #104]
		debug("%s: Too many modifier tables\n", __func__);
		return -1;
	}

	table = &config->table[config->num_tables++];
	table->left_keycode = left_keycode;
c7e10540:	e7847201 	str	r7, [r4, r1, lsl #4]
	table->right_keycode = right_keycode;
	table->xlate = xlate;
	table->num_entries = num_entries;
c7e10544:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e10548:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

c7e1054c <input_stdio_register>:

	return 0;
}

int input_stdio_register(struct stdio_dev *dev)
{
c7e1054c:	e92d4010 	push	{r4, lr}
c7e10550:	e1a04000 	mov	r4, r0
	int error;

	error = stdio_register(dev);
c7e10554:	ebfff938 	bl	c7e0ea3c <stdio_register>

	/* check if this is the standard input device */
	if (!error && strcmp(getenv("stdin"), dev->name) == 0) {
c7e10558:	e3500000 	cmp	r0, #0	; 0x0
c7e1055c:	1a00000b 	bne	c7e10590 <input_stdio_register+0x44>
c7e10560:	e2844008 	add	r4, r4, #8	; 0x8
c7e10564:	e59f002c 	ldr	r0, [pc, #44]	; c7e10598 <input_stdio_register+0x4c>
c7e10568:	ebffdacb 	bl	c7e0709c <getenv>
c7e1056c:	e1a01004 	mov	r1, r4
c7e10570:	eb0048ba 	bl	c7e22860 <strcmp>
c7e10574:	e3500000 	cmp	r0, #0	; 0x0
c7e10578:	1a000004 	bne	c7e10590 <input_stdio_register+0x44>
		/* reassign the console */
		if (OVERWRITE_CONSOLE ||
c7e1057c:	e1a01004 	mov	r1, r4
c7e10580:	ebffe0f5 	bl	c7e0895c <console_assign>
c7e10584:	e3500000 	cmp	r0, #0	; 0x0
c7e10588:	13e00000 	mvnne	r0, #0	; 0x0
c7e1058c:	18bd8010 	popne	{r4, pc}
c7e10590:	e3a00000 	mov	r0, #0	; 0x0
				console_assign(stdin, dev->name))
			return -1;
	}

	return 0;
}
c7e10594:	e8bd8010 	pop	{r4, pc}
c7e10598:	c7e312b5 	.word	0xc7e312b5

c7e1059c <input_init>:
	return 0;
}

int input_init(struct input_config *config, int leds, int repeat_delay_ms,
	       int repeat_rate_ms)
{
c7e1059c:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
c7e105a0:	e1a04001 	mov	r4, r1
c7e105a4:	e1a06002 	mov	r6, r2
	memset(config, '\0', sizeof(*config));
c7e105a8:	e3a01000 	mov	r1, #0	; 0x0
c7e105ac:	e3a020b0 	mov	r2, #176	; 0xb0
	return 0;
}

int input_init(struct input_config *config, int leds, int repeat_delay_ms,
	       int repeat_rate_ms)
{
c7e105b0:	e1a07000 	mov	r7, r0
c7e105b4:	e1a05003 	mov	r5, r3
	memset(config, '\0', sizeof(*config));
c7e105b8:	eb004975 	bl	c7e22b94 <memset>
	config->leds = leds;
	config->repeat_delay_ms = repeat_delay_ms;
	config->repeat_rate_ms = repeat_rate_ms;
	if (input_add_table(config, -1, -1,
c7e105bc:	e3e01000 	mvn	r1, #0	; 0x0

int input_init(struct input_config *config, int leds, int repeat_delay_ms,
	       int repeat_rate_ms)
{
	memset(config, '\0', sizeof(*config));
	config->leds = leds;
c7e105c0:	e5c7401a 	strb	r4, [r7, #26]
	config->repeat_delay_ms = repeat_delay_ms;
c7e105c4:	e58760a8 	str	r6, [r7, #168]
	config->repeat_rate_ms = repeat_rate_ms;
c7e105c8:	e58750ac 	str	r5, [r7, #172]
	if (input_add_table(config, -1, -1,
c7e105cc:	e3a04063 	mov	r4, #99	; 0x63
c7e105d0:	e1a00007 	mov	r0, r7
c7e105d4:	e1a02001 	mov	r2, r1
c7e105d8:	e59f3054 	ldr	r3, [pc, #84]	; c7e10634 <input_init+0x98>
c7e105dc:	e58d4000 	str	r4, [sp]
c7e105e0:	ebffffc4 	bl	c7e104f8 <input_add_table>
c7e105e4:	e3500000 	cmp	r0, #0	; 0x0
c7e105e8:	1a00000f 	bne	c7e1062c <input_init+0x90>
c7e105ec:	e1a00007 	mov	r0, r7
c7e105f0:	e3a0102a 	mov	r1, #42	; 0x2a
c7e105f4:	e3a02036 	mov	r2, #54	; 0x36
c7e105f8:	e59f3038 	ldr	r3, [pc, #56]	; c7e10638 <input_init+0x9c>
c7e105fc:	e58d4000 	str	r4, [sp]
c7e10600:	ebffffbc 	bl	c7e104f8 <input_add_table>
c7e10604:	e3500000 	cmp	r0, #0	; 0x0
c7e10608:	1a000007 	bne	c7e1062c <input_init+0x90>
c7e1060c:	e1a00007 	mov	r0, r7
c7e10610:	e3a0101d 	mov	r1, #29	; 0x1d
c7e10614:	e3a02061 	mov	r2, #97	; 0x61
c7e10618:	e59f301c 	ldr	r3, [pc, #28]	; c7e1063c <input_init+0xa0>
c7e1061c:	e58d4000 	str	r4, [sp]
c7e10620:	ebffffb4 	bl	c7e104f8 <input_add_table>
c7e10624:	e3500000 	cmp	r0, #0	; 0x0
c7e10628:	0a000000 	beq	c7e10630 <input_init+0x94>
c7e1062c:	e3e00000 	mvn	r0, #0	; 0x0
		debug("%s: Could not add modifier tables\n", __func__);
		return -1;
	}

	return 0;
}
c7e10630:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
c7e10634:	c7e2dc38 	.word	0xc7e2dc38
c7e10638:	c7e394f8 	.word	0xc7e394f8
c7e1063c:	c7e3955b 	.word	0xc7e3955b

c7e10640 <sort_array_by_ordering>:
 * @return number of elements in dest that are in order (these will be at the
 *	start of dest).
 */
static int sort_array_by_ordering(int *dest, int count, int *order,
				   int ocount)
{
c7e10640:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int temp[count];
c7e10644:	e1a0c101 	lsl	ip, r1, #2
 * @return number of elements in dest that are in order (these will be at the
 *	start of dest).
 */
static int sort_array_by_ordering(int *dest, int count, int *order,
				   int ocount)
{
c7e10648:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e1064c:	e24dd010 	sub	sp, sp, #16	; 0x10
c7e10650:	e50b1024 	str	r1, [fp, #-36]
	int temp[count];
c7e10654:	e28c100e 	add	r1, ip, #14	; 0xe
c7e10658:	e3c11007 	bic	r1, r1, #7	; 0x7
c7e1065c:	e04dd001 	sub	sp, sp, r1
 * @return number of elements in dest that are in order (these will be at the
 *	start of dest).
 */
static int sort_array_by_ordering(int *dest, int count, int *order,
				   int ocount)
{
c7e10660:	e1a09000 	mov	r9, r0
	int dest_count;
	int same;	/* number of elements which are the same */
	int i;

	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
c7e10664:	e3a06000 	mov	r6, #0	; 0x0
 * @return number of elements in dest that are in order (these will be at the
 *	start of dest).
 */
static int sort_array_by_ordering(int *dest, int count, int *order,
				   int ocount)
{
c7e10668:	e1a0a002 	mov	sl, r2
	int dest_count;
	int same;	/* number of elements which are the same */
	int i;

	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
c7e1066c:	e1a0000d 	mov	r0, sp
c7e10670:	e1a0200c 	mov	r2, ip
c7e10674:	e1a01009 	mov	r1, r9
 * @return number of elements in dest that are in order (these will be at the
 *	start of dest).
 */
static int sort_array_by_ordering(int *dest, int count, int *order,
				   int ocount)
{
c7e10678:	e50b3028 	str	r3, [fp, #-40]
	int temp[count];
c7e1067c:	e1a0700d 	mov	r7, sp
	int dest_count;
	int same;	/* number of elements which are the same */
	int i;

	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
c7e10680:	eb00496d 	bl	c7e22c3c <memcpy>
c7e10684:	e1a04006 	mov	r4, r6
c7e10688:	e1a05006 	mov	r5, r6
c7e1068c:	ea000006 	b	c7e106ac <sort_array_by_ordering+0x6c>
	dest_count = 0;

	/* work through the ordering, move over the elements we agree on */
	for (i = 0; i < ocount; i++) {
		if (array_search(temp, count, order[i]) != -1)
c7e10690:	e79a2005 	ldr	r2, [sl, r5]
c7e10694:	ebffff8c 	bl	c7e104cc <array_search>
c7e10698:	e3700001 	cmn	r0, #1	; 0x1
			dest[dest_count++] = order[i];
c7e1069c:	179a3005 	ldrne	r3, [sl, r5]
	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
	dest_count = 0;

	/* work through the ordering, move over the elements we agree on */
	for (i = 0; i < ocount; i++) {
c7e106a0:	e2855004 	add	r5, r5, #4	; 0x4
		if (array_search(temp, count, order[i]) != -1)
			dest[dest_count++] = order[i];
c7e106a4:	17893104 	strne	r3, [r9, r4, lsl #2]
c7e106a8:	12844001 	addne	r4, r4, #1	; 0x1
	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
	dest_count = 0;

	/* work through the ordering, move over the elements we agree on */
	for (i = 0; i < ocount; i++) {
c7e106ac:	e51b3028 	ldr	r3, [fp, #-40]
		if (array_search(temp, count, order[i]) != -1)
c7e106b0:	e1a00007 	mov	r0, r7
	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
	dest_count = 0;

	/* work through the ordering, move over the elements we agree on */
	for (i = 0; i < ocount; i++) {
c7e106b4:	e1560003 	cmp	r6, r3
		if (array_search(temp, count, order[i]) != -1)
c7e106b8:	e51b1024 	ldr	r1, [fp, #-36]
	/* setup output items, copy items to be sorted into our temp area */
	memcpy(temp, dest, count * sizeof(*dest));
	dest_count = 0;

	/* work through the ordering, move over the elements we agree on */
	for (i = 0; i < ocount; i++) {
c7e106bc:	e2866001 	add	r6, r6, #1	; 0x1
c7e106c0:	bafffff2 	blt	c7e10690 <sort_array_by_ordering+0x50>
c7e106c4:	e3a06000 	mov	r6, #0	; 0x0
c7e106c8:	e50b4020 	str	r4, [fp, #-32]
c7e106cc:	e1a05006 	mov	r5, r6
c7e106d0:	ea000006 	b	c7e106f0 <sort_array_by_ordering+0xb0>
	}
	same = dest_count;

	/* now move over the elements that are not in the ordering */
	for (i = 0; i < count; i++) {
		if (array_search(order, ocount, temp[i]) == -1)
c7e106d4:	e7972005 	ldr	r2, [r7, r5]
c7e106d8:	ebffff7b 	bl	c7e104cc <array_search>
c7e106dc:	e3700001 	cmn	r0, #1	; 0x1
			dest[dest_count++] = temp[i];
c7e106e0:	07973005 	ldreq	r3, [r7, r5]
			dest[dest_count++] = order[i];
	}
	same = dest_count;

	/* now move over the elements that are not in the ordering */
	for (i = 0; i < count; i++) {
c7e106e4:	e2855004 	add	r5, r5, #4	; 0x4
		if (array_search(order, ocount, temp[i]) == -1)
			dest[dest_count++] = temp[i];
c7e106e8:	07893104 	streq	r3, [r9, r4, lsl #2]
c7e106ec:	02844001 	addeq	r4, r4, #1	; 0x1
			dest[dest_count++] = order[i];
	}
	same = dest_count;

	/* now move over the elements that are not in the ordering */
	for (i = 0; i < count; i++) {
c7e106f0:	e51b3024 	ldr	r3, [fp, #-36]
		if (array_search(order, ocount, temp[i]) == -1)
c7e106f4:	e1a0000a 	mov	r0, sl
			dest[dest_count++] = order[i];
	}
	same = dest_count;

	/* now move over the elements that are not in the ordering */
	for (i = 0; i < count; i++) {
c7e106f8:	e1560003 	cmp	r6, r3
		if (array_search(order, ocount, temp[i]) == -1)
c7e106fc:	e51b1028 	ldr	r1, [fp, #-40]
			dest[dest_count++] = order[i];
	}
	same = dest_count;

	/* now move over the elements that are not in the ordering */
	for (i = 0; i < count; i++) {
c7e10700:	e2866001 	add	r6, r6, #1	; 0x1
c7e10704:	bafffff2 	blt	c7e106d4 <sort_array_by_ordering+0x94>
		if (array_search(order, ocount, temp[i]) == -1)
			dest[dest_count++] = temp[i];
	}
	assert(dest_count == count);
	return same;
}
c7e10708:	e51b0020 	ldr	r0, [fp, #-32]
c7e1070c:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e10710:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e10714 <input_send_keycodes>:
	return ch_count;
}

int input_send_keycodes(struct input_config *config,
			int keycode[], int num_keycodes)
{
c7e10714:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e10718:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e1071c:	e24dd010 	sub	sp, sp, #16	; 0x10
	char ch[num_keycodes];
c7e10720:	e282300e 	add	r3, r2, #14	; 0xe
	return ch_count;
}

int input_send_keycodes(struct input_config *config,
			int keycode[], int num_keycodes)
{
c7e10724:	e1a07002 	mov	r7, r2
 */
static int input_check_keycodes(struct input_config *config,
			   int keycode[], int num_keycodes, int *same)
{
	/* Select the 'plain' xlate table to start with */
	if (!config->num_tables) {
c7e10728:	e5d0201b 	ldrb	r2, [r0, #27]
}

int input_send_keycodes(struct input_config *config,
			int keycode[], int num_keycodes)
{
	char ch[num_keycodes];
c7e1072c:	e3c33007 	bic	r3, r3, #7	; 0x7
 */
static int input_check_keycodes(struct input_config *config,
			   int keycode[], int num_keycodes, int *same)
{
	/* Select the 'plain' xlate table to start with */
	if (!config->num_tables) {
c7e10730:	e3520000 	cmp	r2, #0	; 0x0
}

int input_send_keycodes(struct input_config *config,
			int keycode[], int num_keycodes)
{
	char ch[num_keycodes];
c7e10734:	e04dd003 	sub	sp, sp, r3
	int count, i, same = 0;
	int is_repeat = 0;
	unsigned delay_ms;

	config->modifiers = 0;
c7e10738:	e3a06000 	mov	r6, #0	; 0x0
 */
static int input_check_keycodes(struct input_config *config,
			   int keycode[], int num_keycodes, int *same)
{
	/* Select the 'plain' xlate table to start with */
	if (!config->num_tables) {
c7e1073c:	01a0a002 	moveq	sl, r2
	return ch_count;
}

int input_send_keycodes(struct input_config *config,
			int keycode[], int num_keycodes)
{
c7e10740:	e50b102c 	str	r1, [fp, #-44]
c7e10744:	e1a05000 	mov	r5, r0
	char ch[num_keycodes];
	int count, i, same = 0;
	int is_repeat = 0;
	unsigned delay_ms;

	config->modifiers = 0;
c7e10748:	e5c06018 	strb	r6, [r0, #24]
 */
static int input_check_keycodes(struct input_config *config,
			   int keycode[], int num_keycodes, int *same)
{
	/* Select the 'plain' xlate table to start with */
	if (!config->num_tables) {
c7e1074c:	01a0900a 	moveq	r9, sl
}

int input_send_keycodes(struct input_config *config,
			int keycode[], int num_keycodes)
{
	char ch[num_keycodes];
c7e10750:	e50bd028 	str	sp, [fp, #-40]
 */
static int input_check_keycodes(struct input_config *config,
			   int keycode[], int num_keycodes, int *same)
{
	/* Select the 'plain' xlate table to start with */
	if (!config->num_tables) {
c7e10754:	0a000013 	beq	c7e107a8 <input_send_keycodes+0x94>
		debug("%s: No xlate tables: cannot decode keys\n", __func__);
		return -1;
	}

	/* sort the keycodes into the same order as the previous ones */
	*same = sort_array_by_ordering(keycode, num_keycodes,
c7e10758:	e280401c 	add	r4, r0, #28	; 0x1c
c7e1075c:	e590305c 	ldr	r3, [r0, #92]
c7e10760:	e1a02004 	mov	r2, r4
c7e10764:	e1a01007 	mov	r1, r7
c7e10768:	e51b002c 	ldr	r0, [fp, #-44]
c7e1076c:	ebffffb3 	bl	c7e10640 <sort_array_by_ordering>
			config->prev_keycodes, config->num_prev_keycodes);

	memcpy(config->prev_keycodes, keycode, num_keycodes * sizeof(int));
c7e10770:	e51b102c 	ldr	r1, [fp, #-44]
		debug("%s: No xlate tables: cannot decode keys\n", __func__);
		return -1;
	}

	/* sort the keycodes into the same order as the previous ones */
	*same = sort_array_by_ordering(keycode, num_keycodes,
c7e10774:	e1a09000 	mov	r9, r0
			config->prev_keycodes, config->num_prev_keycodes);

	memcpy(config->prev_keycodes, keycode, num_keycodes * sizeof(int));
c7e10778:	e1a02107 	lsl	r2, r7, #2
c7e1077c:	e1a00004 	mov	r0, r4
c7e10780:	eb00492d 	bl	c7e22c3c <memcpy>
	int count, i, same = 0;
	int is_repeat = 0;
	unsigned delay_ms;

	config->modifiers = 0;
	if (!input_check_keycodes(config, keycode, num_keycodes, &same)) {
c7e10784:	e1590007 	cmp	r9, r7
	/* sort the keycodes into the same order as the previous ones */
	*same = sort_array_by_ordering(keycode, num_keycodes,
			config->prev_keycodes, config->num_prev_keycodes);

	memcpy(config->prev_keycodes, keycode, num_keycodes * sizeof(int));
	config->num_prev_keycodes = num_keycodes;
c7e10788:	e585705c 	str	r7, [r5, #92]
	int count, i, same = 0;
	int is_repeat = 0;
	unsigned delay_ms;

	config->modifiers = 0;
	if (!input_check_keycodes(config, keycode, num_keycodes, &same)) {
c7e1078c:	11a0a006 	movne	sl, r6
c7e10790:	1a000004 	bne	c7e107a8 <input_send_keycodes+0x94>
		 * the caller may not call in again for a while, our
		 * auto-repeat speed is not quite correct. We should
		 * insert another character if we later realise that we
		 * have missed a repeat slot.
		 */
		is_repeat = (int)get_timer(config->next_repeat_ms) >= 0;
c7e10794:	e59500a4 	ldr	r0, [r5, #164]
c7e10798:	ebffc098 	bl	c7e00a00 <get_timer>
		if (!is_repeat)
c7e1079c:	e3500000 	cmp	r0, #0	; 0x0
c7e107a0:	ba000060 	blt	c7e10928 <input_send_keycodes+0x214>
c7e107a4:	e3a0a001 	mov	sl, #1	; 0x1
{
	struct input_key_xlate *table;
	int ch_count;
	int i;

	table = &config->table[0];
c7e107a8:	e2851060 	add	r1, r5, #96	; 0x60
		is_repeat = (int)get_timer(config->next_repeat_ms) >= 0;
		if (!is_repeat)
			return 0;
	}

	count = input_keycodes_to_ascii(config, keycode, num_keycodes,
c7e107ac:	e35a0000 	cmp	sl, #0	; 0x0
{
	struct input_key_xlate *table;
	int ch_count;
	int i;

	table = &config->table[0];
c7e107b0:	e50b1024 	str	r1, [fp, #-36]
		is_repeat = (int)get_timer(config->next_repeat_ms) >= 0;
		if (!is_repeat)
			return 0;
	}

	count = input_keycodes_to_ascii(config, keycode, num_keycodes,
c7e107b4:	13a09000 	movne	r9, #0	; 0x0
{
	struct input_key_xlate *table;
	int ch_count;
	int i;

	table = &config->table[0];
c7e107b8:	e1a0e001 	mov	lr, r1
c7e107bc:	e3a04000 	mov	r4, #0	; 0x0
c7e107c0:	ea000030 	b	c7e10888 <input_send_keycodes+0x174>

	/* deal with modifiers first */
	for (i = 0; i < num_keycodes; i++) {
		int key = keycode[i] & KEY_MASK;
c7e107c4:	e51b302c 	ldr	r3, [fp, #-44]
c7e107c8:	e7933104 	ldr	r3, [r3, r4, lsl #2]
c7e107cc:	e50b3020 	str	r3, [fp, #-32]
c7e107d0:	e51b1020 	ldr	r1, [fp, #-32]

		if (key >= table->num_entries || table->xlate[key] == 0xff) {
c7e107d4:	e59e300c 	ldr	r3, [lr, #12]

	table = &config->table[0];

	/* deal with modifiers first */
	for (i = 0; i < num_keycodes; i++) {
		int key = keycode[i] & KEY_MASK;
c7e107d8:	e1a02a01 	lsl	r2, r1, #20
c7e107dc:	e1a02a22 	lsr	r2, r2, #20

		if (key >= table->num_entries || table->xlate[key] == 0xff) {
c7e107e0:	e1520003 	cmp	r2, r3
c7e107e4:	aa000003 	bge	c7e107f8 <input_send_keycodes+0xe4>
c7e107e8:	e59e3008 	ldr	r3, [lr, #8]
c7e107ec:	e7d33002 	ldrb	r3, [r3, r2]
c7e107f0:	e35300ff 	cmp	r3, #255	; 0xff
c7e107f4:	1a000022 	bne	c7e10884 <input_send_keycodes+0x170>
	int i;

	/* Start with the main table, and see what modifiers change it */
	assert(config->num_tables > 0);
	table = &config->table[0];
	for (i = 1; i < config->num_tables; i++) {
c7e107f8:	e5d5601b 	ldrb	r6, [r5, #27]
c7e107fc:	e1a00005 	mov	r0, r5
c7e10800:	e51be024 	ldr	lr, [fp, #-36]
c7e10804:	e3a01001 	mov	r1, #1	; 0x1
c7e10808:	ea000009 	b	c7e10834 <input_send_keycodes+0x120>
		struct input_key_xlate *tab = &config->table[i];

		if (key == tab->left_keycode || key == tab->right_keycode)
c7e1080c:	e5903070 	ldr	r3, [r0, #112]

	/* Start with the main table, and see what modifiers change it */
	assert(config->num_tables > 0);
	table = &config->table[0];
	for (i = 1; i < config->num_tables; i++) {
		struct input_key_xlate *tab = &config->table[i];
c7e10810:	e281c006 	add	ip, r1, #6	; 0x6

		if (key == tab->left_keycode || key == tab->right_keycode)
c7e10814:	e1520003 	cmp	r2, r3
	int i;

	/* Start with the main table, and see what modifiers change it */
	assert(config->num_tables > 0);
	table = &config->table[0];
	for (i = 1; i < config->num_tables; i++) {
c7e10818:	e2811001 	add	r1, r1, #1	; 0x1
		struct input_key_xlate *tab = &config->table[i];

		if (key == tab->left_keycode || key == tab->right_keycode)
c7e1081c:	0a000002 	beq	c7e1082c <input_send_keycodes+0x118>
c7e10820:	e5903074 	ldr	r3, [r0, #116]
c7e10824:	e1520003 	cmp	r2, r3
c7e10828:	1a000000 	bne	c7e10830 <input_send_keycodes+0x11c>

	/* Start with the main table, and see what modifiers change it */
	assert(config->num_tables > 0);
	table = &config->table[0];
	for (i = 1; i < config->num_tables; i++) {
		struct input_key_xlate *tab = &config->table[i];
c7e1082c:	e085e20c 	add	lr, r5, ip, lsl #4
	int i;

	/* Start with the main table, and see what modifiers change it */
	assert(config->num_tables > 0);
	table = &config->table[0];
	for (i = 1; i < config->num_tables; i++) {
c7e10830:	e2800010 	add	r0, r0, #16	; 0x10
c7e10834:	e1510006 	cmp	r1, r6
c7e10838:	bafffff3 	blt	c7e1080c <input_send_keycodes+0xf8>
		if (key == tab->left_keycode || key == tab->right_keycode)
			table = tab;
	}

	/* Handle the lighted keys */
	if (!release) {
c7e1083c:	e51b3020 	ldr	r3, [fp, #-32]
c7e10840:	e3130902 	tst	r3, #32768	; 0x8000
c7e10844:	1a00000e 	bne	c7e10884 <input_send_keycodes+0x170>
		switch (key) {
c7e10848:	e3520045 	cmp	r2, #69	; 0x45
c7e1084c:	0a000004 	beq	c7e10864 <input_send_keycodes+0x150>
c7e10850:	e3520046 	cmp	r2, #70	; 0x46
c7e10854:	0a000036 	beq	c7e10934 <input_send_keycodes+0x220>
c7e10858:	e352003a 	cmp	r2, #58	; 0x3a
c7e1085c:	1a000008 	bne	c7e10884 <input_send_keycodes+0x170>
c7e10860:	ea000001 	b	c7e1086c <input_send_keycodes+0x158>
c7e10864:	e3a00001 	mov	r0, #1	; 0x1
c7e10868:	ea000032 	b	c7e10938 <input_send_keycodes+0x224>
c7e1086c:	e3a00002 	mov	r0, #2	; 0x2
c7e10870:	ea000030 	b	c7e10938 <input_send_keycodes+0x224>

		config->leds ^= flip;
		if (config->flags & FLAG_NUM_LOCK)
			leds |= INPUT_LED_NUM;
		if (config->flags & FLAG_CAPS_LOCK)
			leds |= INPUT_LED_CAPS;
c7e10874:	e3822002 	orr	r2, r2, #2	; 0x2
		if (config->flags & FLAG_SCROLL_LOCK)
c7e10878:	e3110004 	tst	r1, #4	; 0x4
			leds |= INPUT_LED_SCROLL;
c7e1087c:	13822001 	orrne	r2, r2, #1	; 0x1
		config->leds = leds;
c7e10880:	e5c5201a 	strb	r2, [r5, #26]
	int i;

	table = &config->table[0];

	/* deal with modifiers first */
	for (i = 0; i < num_keycodes; i++) {
c7e10884:	e2844001 	add	r4, r4, #1	; 0x1
c7e10888:	e1540007 	cmp	r4, r7
c7e1088c:	baffffcc 	blt	c7e107c4 <input_send_keycodes+0xb0>
c7e10890:	e3a02000 	mov	r2, #0	; 0x0
c7e10894:	e1a06002 	mov	r6, r2
c7e10898:	ea000010 	b	c7e108e0 <input_send_keycodes+0x1cc>
		}
	}

	/* now find normal keys */
	for (i = ch_count = 0; i < num_keycodes; i++) {
		int key = keycode[i];
c7e1089c:	e51b302c 	ldr	r3, [fp, #-44]
c7e108a0:	e7931102 	ldr	r1, [r3, r2, lsl #2]

		if (key < table->num_entries && i >= same) {
c7e108a4:	e59e300c 	ldr	r3, [lr, #12]
c7e108a8:	e1510003 	cmp	r1, r3
c7e108ac:	a3a03000 	movge	r3, #0	; 0x0
c7e108b0:	b3a03001 	movlt	r3, #1	; 0x1
c7e108b4:	e1520009 	cmp	r2, r9
c7e108b8:	b3a03000 	movlt	r3, #0	; 0x0
c7e108bc:	e3530000 	cmp	r3, #0	; 0x0
					keycode[i] & KEY_RELEASE);
		}
	}

	/* now find normal keys */
	for (i = ch_count = 0; i < num_keycodes; i++) {
c7e108c0:	e2822001 	add	r2, r2, #1	; 0x1
		int key = keycode[i];

		if (key < table->num_entries && i >= same) {
c7e108c4:	0a000005 	beq	c7e108e0 <input_send_keycodes+0x1cc>
			int ch = table->xlate[key];
c7e108c8:	e59e3008 	ldr	r3, [lr, #8]
c7e108cc:	e7d33001 	ldrb	r3, [r3, r1]

			/* If a normal key with an ASCII value, add it! */
			if (ch != 0xff)
c7e108d0:	e35300ff 	cmp	r3, #255	; 0xff
				output_ch[ch_count++] = (uchar)ch;
c7e108d4:	151b1028 	ldrne	r1, [fp, #-40]
c7e108d8:	17c13006 	strbne	r3, [r1, r6]
c7e108dc:	12866001 	addne	r6, r6, #1	; 0x1
					keycode[i] & KEY_RELEASE);
		}
	}

	/* now find normal keys */
	for (i = ch_count = 0; i < num_keycodes; i++) {
c7e108e0:	e1520007 	cmp	r2, r7
c7e108e4:	baffffec 	blt	c7e1089c <input_send_keycodes+0x188>
c7e108e8:	e3a04000 	mov	r4, #0	; 0x0
c7e108ec:	ea000003 	b	c7e10900 <input_send_keycodes+0x1ec>
	}

	count = input_keycodes_to_ascii(config, keycode, num_keycodes,
					ch, is_repeat ? 0 : same);
	for (i = 0; i < count; i++)
		input_queue_ascii(config, ch[i]);
c7e108f0:	e51b3028 	ldr	r3, [fp, #-40]
c7e108f4:	e7d31004 	ldrb	r1, [r3, r4]
c7e108f8:	ebfffeb7 	bl	c7e103dc <input_queue_ascii>
			return 0;
	}

	count = input_keycodes_to_ascii(config, keycode, num_keycodes,
					ch, is_repeat ? 0 : same);
	for (i = 0; i < count; i++)
c7e108fc:	e2844001 	add	r4, r4, #1	; 0x1
c7e10900:	e1540006 	cmp	r4, r6
		input_queue_ascii(config, ch[i]);
c7e10904:	e1a00005 	mov	r0, r5
			return 0;
	}

	count = input_keycodes_to_ascii(config, keycode, num_keycodes,
					ch, is_repeat ? 0 : same);
	for (i = 0; i < count; i++)
c7e10908:	bafffff8 	blt	c7e108f0 <input_send_keycodes+0x1dc>
		input_queue_ascii(config, ch[i]);
	delay_ms = is_repeat ?
c7e1090c:	e35a0000 	cmp	sl, #0	; 0x0
			config->repeat_rate_ms :
			config->repeat_delay_ms;

	config->next_repeat_ms = get_timer(0) + delay_ms;
c7e10910:	e3a00000 	mov	r0, #0	; 0x0

	count = input_keycodes_to_ascii(config, keycode, num_keycodes,
					ch, is_repeat ? 0 : same);
	for (i = 0; i < count; i++)
		input_queue_ascii(config, ch[i]);
	delay_ms = is_repeat ?
c7e10914:	159540ac 	ldrne	r4, [r5, #172]
c7e10918:	059540a8 	ldreq	r4, [r5, #168]
			config->repeat_rate_ms :
			config->repeat_delay_ms;

	config->next_repeat_ms = get_timer(0) + delay_ms;
c7e1091c:	ebffc037 	bl	c7e00a00 <get_timer>
c7e10920:	e0800004 	add	r0, r0, r4
c7e10924:	e58500a4 	str	r0, [r5, #164]
	return 0;
}
c7e10928:	e3a00000 	mov	r0, #0	; 0x0
c7e1092c:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e10930:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
		input_queue_ascii(config, ch[i]);
	delay_ms = is_repeat ?
			config->repeat_rate_ms :
			config->repeat_delay_ms;

	config->next_repeat_ms = get_timer(0) + delay_ms;
c7e10934:	e3a00004 	mov	r0, #4	; 0x4

	if (flip != -1) {
		int leds = 0;

		config->leds ^= flip;
		if (config->flags & FLAG_NUM_LOCK)
c7e10938:	e5d51019 	ldrb	r1, [r5, #25]
	}

	if (flip != -1) {
		int leds = 0;

		config->leds ^= flip;
c7e1093c:	e5d5301a 	ldrb	r3, [r5, #26]
		if (config->flags & FLAG_NUM_LOCK)
c7e10940:	e2112001 	ands	r2, r1, #1	; 0x1
	}

	if (flip != -1) {
		int leds = 0;

		config->leds ^= flip;
c7e10944:	e0203003 	eor	r3, r0, r3
		if (config->flags & FLAG_NUM_LOCK)
c7e10948:	13a02004 	movne	r2, #4	; 0x4
			leds |= INPUT_LED_NUM;
		if (config->flags & FLAG_CAPS_LOCK)
c7e1094c:	e3110002 	tst	r1, #2	; 0x2
	}

	if (flip != -1) {
		int leds = 0;

		config->leds ^= flip;
c7e10950:	e5c5301a 	strb	r3, [r5, #26]
		if (config->flags & FLAG_NUM_LOCK)
			leds |= INPUT_LED_NUM;
		if (config->flags & FLAG_CAPS_LOCK)
c7e10954:	0affffc7 	beq	c7e10878 <input_send_keycodes+0x164>
c7e10958:	eaffffc5 	b	c7e10874 <input_send_keycodes+0x160>

c7e1095c <__fswab32>:
{
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
c7e1095c:	e1a03000 	mov	r3, r0
c7e10960:	e1a00c00 	lsl	r0, r0, #24
c7e10964:	e2032cff 	and	r2, r3, #65280	; 0xff00
c7e10968:	e1800c23 	orr	r0, r0, r3, lsr #24
c7e1096c:	e1800402 	orr	r0, r0, r2, lsl #8
c7e10970:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
	return __arch__swab32(x);
}
c7e10974:	e1800423 	orr	r0, r0, r3, lsr #8
c7e10978:	e12fff1e 	bx	lr

c7e1097c <INIT_LIST_HEAD>:
	list->prev = list;
c7e1097c:	e5800004 	str	r0, [r0, #4]
#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
c7e10980:	e5800000 	str	r0, [r0]
	list->prev = list;
}
c7e10984:	e12fff1e 	bx	lr

c7e10988 <__board_mmc_getcd>:
static struct list_head mmc_devices;
static int cur_dev_num = -1;

int __board_mmc_getcd(struct mmc *mmc) {
	return -1;
}
c7e10988:	e3e00000 	mvn	r0, #0	; 0x0
c7e1098c:	e12fff1e 	bx	lr

c7e10990 <mmc_getcd>:
			  (mmc->part_config & ~PART_ACCESS_MASK)
			  | (part_num & PART_ACCESS_MASK));
}

int mmc_getcd(struct mmc *mmc)
{
c7e10990:	e92d4010 	push	{r4, lr}
c7e10994:	e1a04000 	mov	r4, r0
	int cd;

	cd = board_mmc_getcd(mmc);
c7e10998:	ebfffffa 	bl	c7e10988 <__board_mmc_getcd>

	if ((cd < 0) && mmc->getcd)
c7e1099c:	e3500000 	cmp	r0, #0	; 0x0
c7e109a0:	a8bd8010 	popge	{r4, pc}
c7e109a4:	e594311c 	ldr	r3, [r4, #284]
c7e109a8:	e3530000 	cmp	r3, #0	; 0x0
c7e109ac:	08bd8010 	popeq	{r4, pc}
		cd = mmc->getcd(mmc);
c7e109b0:	e1a00004 	mov	r0, r4
c7e109b4:	e12fff33 	blx	r3

	return cd;
}
c7e109b8:	e8bd8010 	pop	{r4, pc}

c7e109bc <mmc_set_ios>:
	70,
	80,
};

void mmc_set_ios(struct mmc *mmc)
{
c7e109bc:	e92d4010 	push	{r4, lr}
	mmc->set_ios(mmc);
c7e109c0:	e1a0e00f 	mov	lr, pc
c7e109c4:	e590f114 	ldr	pc, [r0, #276]
}
c7e109c8:	e8bd8010 	pop	{r4, pc}

c7e109cc <mmc_set_clock>:

void mmc_set_clock(struct mmc *mmc, uint clock)
{
c7e109cc:	e590203c 	ldr	r2, [r0, #60]
		clock = mmc->f_max;

	if (clock < mmc->f_min)
		clock = mmc->f_min;

	mmc->clock = clock;
c7e109d0:	e590c038 	ldr	ip, [r0, #56]
{
	mmc->set_ios(mmc);
}

void mmc_set_clock(struct mmc *mmc, uint clock)
{
c7e109d4:	e1510002 	cmp	r1, r2
c7e109d8:	21a01002 	movcs	r1, r2
		clock = mmc->f_max;

	if (clock < mmc->f_min)
		clock = mmc->f_min;

	mmc->clock = clock;
c7e109dc:	e151000c 	cmp	r1, ip
c7e109e0:	25801048 	strcs	r1, [r0, #72]
c7e109e4:	3580c048 	strcc	ip, [r0, #72]

	mmc_set_ios(mmc);
c7e109e8:	eafffff3 	b	c7e109bc <mmc_set_ios>

c7e109ec <mmc_set_bus_width>:
}

void mmc_set_bus_width(struct mmc *mmc, uint width)
{
	mmc->bus_width = width;
c7e109ec:	e5801044 	str	r1, [r0, #68]

	mmc_set_ios(mmc);
c7e109f0:	eafffff1 	b	c7e109bc <mmc_set_ios>

c7e109f4 <mmc_register>:
	mmc->block_dev.dev = cur_dev_num++;
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
	mmc->block_dev.block_write = mmc_bwrite;
	mmc->block_dev.block_erase = mmc_berase;
	if (!mmc->b_max)
c7e109f4:	e5903120 	ldr	r3, [r0, #288]

int mmc_register(struct mmc *mmc)
{
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
	mmc->block_dev.dev = cur_dev_num++;
c7e109f8:	e59f1070 	ldr	r1, [pc, #112]	; c7e10a70 <mmc_register+0x7c>
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
	mmc->block_dev.block_write = mmc_bwrite;
	mmc->block_dev.block_erase = mmc_berase;
	if (!mmc->b_max)
c7e109fc:	e3530000 	cmp	r3, #0	; 0x0

	return 0;
}

int mmc_register(struct mmc *mmc)
{
c7e10a00:	e92d4010 	push	{r4, lr}
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
c7e10a04:	e3a03006 	mov	r3, #6	; 0x6

	return 0;
}

int mmc_register(struct mmc *mmc)
{
c7e10a08:	e1a04000 	mov	r4, r0
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
	mmc->block_dev.dev = cur_dev_num++;
c7e10a0c:	e5912000 	ldr	r2, [r1]
}

int mmc_register(struct mmc *mmc)
{
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
c7e10a10:	e58430a0 	str	r3, [r4, #160]
	mmc->block_dev.dev = cur_dev_num++;
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
c7e10a14:	e59f3058 	ldr	r3, [pc, #88]	; c7e10a74 <mmc_register+0x80>

int mmc_register(struct mmc *mmc)
{
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
	mmc->block_dev.dev = cur_dev_num++;
c7e10a18:	e2820001 	add	r0, r2, #1	; 0x1
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
c7e10a1c:	e5843100 	str	r3, [r4, #256]
	mmc->block_dev.block_write = mmc_bwrite;
c7e10a20:	e59f3050 	ldr	r3, [pc, #80]	; c7e10a78 <mmc_register+0x84>

int mmc_register(struct mmc *mmc)
{
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
	mmc->block_dev.dev = cur_dev_num++;
c7e10a24:	e58420a4 	str	r2, [r4, #164]
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
	mmc->block_dev.block_write = mmc_bwrite;
c7e10a28:	e5843104 	str	r3, [r4, #260]
	mmc->block_dev.block_erase = mmc_berase;
c7e10a2c:	e59f3048 	ldr	r3, [pc, #72]	; c7e10a7c <mmc_register+0x88>

int mmc_register(struct mmc *mmc)
{
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
	mmc->block_dev.dev = cur_dev_num++;
c7e10a30:	e5810000 	str	r0, [r1]
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
	mmc->block_dev.block_write = mmc_bwrite;
	mmc->block_dev.block_erase = mmc_berase;
c7e10a34:	e5843108 	str	r3, [r4, #264]
int mmc_register(struct mmc *mmc)
{
	/* Setup the universal parts of the block interface just once */
	mmc->block_dev.if_type = IF_TYPE_MMC;
	mmc->block_dev.dev = cur_dev_num++;
	mmc->block_dev.removable = 1;
c7e10a38:	e3a03001 	mov	r3, #1	; 0x1
c7e10a3c:	e5c430ac 	strb	r3, [r4, #172]
	mmc->block_dev.block_read = mmc_bread;
	mmc->block_dev.block_write = mmc_bwrite;
	mmc->block_dev.block_erase = mmc_berase;
	if (!mmc->b_max)
		mmc->b_max = CONFIG_SYS_MMC_MAX_BLK_COUNT;
c7e10a40:	059f3038 	ldreq	r3, [pc, #56]	; c7e10a80 <mmc_register+0x8c>

	INIT_LIST_HEAD (&mmc->link);
c7e10a44:	e1a00004 	mov	r0, r4
	mmc->block_dev.removable = 1;
	mmc->block_dev.block_read = mmc_bread;
	mmc->block_dev.block_write = mmc_bwrite;
	mmc->block_dev.block_erase = mmc_berase;
	if (!mmc->b_max)
		mmc->b_max = CONFIG_SYS_MMC_MAX_BLK_COUNT;
c7e10a48:	05843120 	streq	r3, [r4, #288]

	INIT_LIST_HEAD (&mmc->link);
c7e10a4c:	ebffffca 	bl	c7e1097c <INIT_LIST_HEAD>
 * Insert a new entry before the specified head.
 * This is useful for implementing queues.
 */
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
	__list_add(new, head->prev, head);
c7e10a50:	e59f302c 	ldr	r3, [pc, #44]	; c7e10a84 <mmc_register+0x90>

	list_add_tail (&mmc->link, &mmc_devices);

	return 0;
}
c7e10a54:	e3a00000 	mov	r0, #0	; 0x0
c7e10a58:	e5932004 	ldr	r2, [r3, #4]
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
	new->next = next;
c7e10a5c:	e5843000 	str	r3, [r4]
 */
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
c7e10a60:	e5834004 	str	r4, [r3, #4]
	new->next = next;
	new->prev = prev;
	prev->next = new;
c7e10a64:	e5824000 	str	r4, [r2]
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
	new->next = next;
	new->prev = prev;
c7e10a68:	e5842004 	str	r2, [r4, #4]
c7e10a6c:	e8bd8010 	pop	{r4, pc}
c7e10a70:	c7e395c0 	.word	0xc7e395c0
c7e10a74:	c7e112d0 	.word	0xc7e112d0
c7e10a78:	c7e115e0 	.word	0xc7e115e0
c7e10a7c:	c7e11444 	.word	0xc7e11444
c7e10a80:	0000ffff 	.word	0x0000ffff
c7e10a84:	c7e41e44 	.word	0xc7e41e44

c7e10a88 <cpu_mmc_init>:
 * signals caller to move on
 */
static int __def_mmc_init(bd_t *bis)
{
	return -1;
}
c7e10a88:	e3e00000 	mvn	r0, #0	; 0x0
c7e10a8c:	e12fff1e 	bx	lr

c7e10a90 <get_mmc_num>:

	printf("\n");
}

int get_mmc_num(void)
{
c7e10a90:	e59f3004 	ldr	r3, [pc, #4]	; c7e10a9c <get_mmc_num+0xc>
	return cur_dev_num;
}
c7e10a94:	e5930000 	ldr	r0, [r3]
c7e10a98:	e12fff1e 	bx	lr
c7e10a9c:	c7e395c0 	.word	0xc7e395c0

c7e10aa0 <print_mmc_devices>:
void print_mmc_devices(char separator)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10aa0:	e59f3050 	ldr	r3, [pc, #80]	; c7e10af8 <print_mmc_devices+0x58>

int cpu_mmc_init(bd_t *bis) __attribute__((weak, alias("__def_mmc_init")));
int board_mmc_init(bd_t *bis) __attribute__((weak, alias("__def_mmc_init")));

void print_mmc_devices(char separator)
{
c7e10aa4:	e92d4070 	push	{r4, r5, r6, lr}
c7e10aa8:	e1a06000 	mov	r6, r0
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10aac:	e5934000 	ldr	r4, [r3]
c7e10ab0:	ea000008 	b	c7e10ad8 <print_mmc_devices+0x38>
		m = list_entry(entry, struct mmc, link);

		printf("%s: %d", m->name, m->block_dev.dev);
c7e10ab4:	e59420a4 	ldr	r2, [r4, #164]
c7e10ab8:	ebffdfe6 	bl	c7e08a58 <printf>

		if (entry->next != &mmc_devices)
c7e10abc:	e5943000 	ldr	r3, [r4]
			printf("%c ", separator);
c7e10ac0:	e59f0034 	ldr	r0, [pc, #52]	; c7e10afc <print_mmc_devices+0x5c>
	list_for_each(entry, &mmc_devices) {
		m = list_entry(entry, struct mmc, link);

		printf("%s: %d", m->name, m->block_dev.dev);

		if (entry->next != &mmc_devices)
c7e10ac4:	e1530005 	cmp	r3, r5
			printf("%c ", separator);
c7e10ac8:	e1a01006 	mov	r1, r6
	list_for_each(entry, &mmc_devices) {
		m = list_entry(entry, struct mmc, link);

		printf("%s: %d", m->name, m->block_dev.dev);

		if (entry->next != &mmc_devices)
c7e10acc:	0a000000 	beq	c7e10ad4 <print_mmc_devices+0x34>
			printf("%c ", separator);
c7e10ad0:	ebffdfe0 	bl	c7e08a58 <printf>
void print_mmc_devices(char separator)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10ad4:	e5944000 	ldr	r4, [r4]
c7e10ad8:	e59f5018 	ldr	r5, [pc, #24]	; c7e10af8 <print_mmc_devices+0x58>
		m = list_entry(entry, struct mmc, link);

		printf("%s: %d", m->name, m->block_dev.dev);
c7e10adc:	e2841008 	add	r1, r4, #8	; 0x8
void print_mmc_devices(char separator)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10ae0:	e1540005 	cmp	r4, r5
		m = list_entry(entry, struct mmc, link);

		printf("%s: %d", m->name, m->block_dev.dev);
c7e10ae4:	e59f0014 	ldr	r0, [pc, #20]	; c7e10b00 <print_mmc_devices+0x60>
void print_mmc_devices(char separator)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10ae8:	1afffff1 	bne	c7e10ab4 <print_mmc_devices+0x14>

		if (entry->next != &mmc_devices)
			printf("%c ", separator);
	}

	printf("\n");
c7e10aec:	e59f0010 	ldr	r0, [pc, #16]	; c7e10b04 <print_mmc_devices+0x64>
}
c7e10af0:	e8bd4070 	pop	{r4, r5, r6, lr}

		if (entry->next != &mmc_devices)
			printf("%c ", separator);
	}

	printf("\n");
c7e10af4:	eaffdfd7 	b	c7e08a58 <printf>
c7e10af8:	c7e41e44 	.word	0xc7e41e44
c7e10afc:	c7e2ef95 	.word	0xc7e2ef95
c7e10b00:	c7e32d00 	.word	0xc7e32d00
c7e10b04:	c7e31f94 	.word	0xc7e31f94

c7e10b08 <mmc_initialize>:
{
	return cur_dev_num;
}

int mmc_initialize(bd_t *bis)
{
c7e10b08:	e92d4010 	push	{r4, lr}
c7e10b0c:	e1a04000 	mov	r4, r0
	INIT_LIST_HEAD (&mmc_devices);
c7e10b10:	e59f0034 	ldr	r0, [pc, #52]	; c7e10b4c <mmc_initialize+0x44>
c7e10b14:	ebffff98 	bl	c7e1097c <INIT_LIST_HEAD>
	cur_dev_num = 0;
c7e10b18:	e59f3030 	ldr	r3, [pc, #48]	; c7e10b50 <mmc_initialize+0x48>
c7e10b1c:	e3a02000 	mov	r2, #0	; 0x0

	if (board_mmc_init(bis) < 0)
c7e10b20:	e1a00004 	mov	r0, r4
}

int mmc_initialize(bd_t *bis)
{
	INIT_LIST_HEAD (&mmc_devices);
	cur_dev_num = 0;
c7e10b24:	e5832000 	str	r2, [r3]

	if (board_mmc_init(bis) < 0)
c7e10b28:	eb00664c 	bl	c7e2a460 <board_mmc_init>
c7e10b2c:	e3500000 	cmp	r0, #0	; 0x0
c7e10b30:	aa000001 	bge	c7e10b3c <mmc_initialize+0x34>
		cpu_mmc_init(bis);
c7e10b34:	e1a00004 	mov	r0, r4
c7e10b38:	ebffffd2 	bl	c7e10a88 <cpu_mmc_init>

	print_mmc_devices(',');
c7e10b3c:	e3a0002c 	mov	r0, #44	; 0x2c
c7e10b40:	ebffffd6 	bl	c7e10aa0 <print_mmc_devices>

	return 0;
}
c7e10b44:	e3a00000 	mov	r0, #0	; 0x0
c7e10b48:	e8bd8010 	pop	{r4, pc}
c7e10b4c:	c7e41e44 	.word	0xc7e41e44
c7e10b50:	c7e395c0 	.word	0xc7e395c0

c7e10b54 <find_mmc_device>:
struct mmc *find_mmc_device(int dev_num)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10b54:	e59f303c 	ldr	r3, [pc, #60]	; c7e10b98 <find_mmc_device+0x44>

	return mmc_send_cmd(mmc, &cmd, NULL);
}

struct mmc *find_mmc_device(int dev_num)
{
c7e10b58:	e92d4010 	push	{r4, lr}
c7e10b5c:	e1a01000 	mov	r1, r0
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10b60:	e5932000 	ldr	r2, [r3]
c7e10b64:	ea000003 	b	c7e10b78 <find_mmc_device+0x24>
		m = list_entry(entry, struct mmc, link);

		if (m->block_dev.dev == dev_num)
c7e10b68:	e59230a4 	ldr	r3, [r2, #164]
c7e10b6c:	e1530001 	cmp	r3, r1
c7e10b70:	08bd8010 	popeq	{r4, pc}
struct mmc *find_mmc_device(int dev_num)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10b74:	e5922000 	ldr	r2, [r2]
c7e10b78:	e59f3018 	ldr	r3, [pc, #24]	; c7e10b98 <find_mmc_device+0x44>
		m = list_entry(entry, struct mmc, link);
c7e10b7c:	e1a00002 	mov	r0, r2
struct mmc *find_mmc_device(int dev_num)
{
	struct mmc *m;
	struct list_head *entry;

	list_for_each(entry, &mmc_devices) {
c7e10b80:	e1520003 	cmp	r2, r3
c7e10b84:	1afffff7 	bne	c7e10b68 <find_mmc_device+0x14>

		if (m->block_dev.dev == dev_num)
			return m;
	}

	printf("MMC Device %d not found\n", dev_num);
c7e10b88:	e59f000c 	ldr	r0, [pc, #12]	; c7e10b9c <find_mmc_device+0x48>
c7e10b8c:	ebffdfb1 	bl	c7e08a58 <printf>
c7e10b90:	e3a00000 	mov	r0, #0	; 0x0

	return NULL;
}
c7e10b94:	e8bd8010 	pop	{r4, pc}
c7e10b98:	c7e41e44 	.word	0xc7e41e44
c7e10b9c:	c7e32d07 	.word	0xc7e32d07

c7e10ba0 <mmc_send_cmd>:
static inline void mmc_bounce_buffer_stop(struct mmc_data *backup,
					struct mmc_data *orig) { }
#endif

int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
c7e10ba0:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
c7e10ba4:	e1a04000 	mov	r4, r0
c7e10ba8:	e1a05001 	mov	r5, r1
c7e10bac:	e1a06002 	mov	r6, r2
	struct mmc_data backup;
	int ret;

	memset(&backup, 0, sizeof(backup));
c7e10bb0:	e1a0000d 	mov	r0, sp
c7e10bb4:	e3a01000 	mov	r1, #0	; 0x0
c7e10bb8:	e3a02010 	mov	r2, #16	; 0x10
c7e10bbc:	eb0047f4 	bl	c7e22b94 <memset>
		default:
			printf("\t\tERROR MMC rsp not supported\n");
			break;
	}
#else
	ret = mmc->send_cmd(mmc, cmd, data);
c7e10bc0:	e1a00004 	mov	r0, r4
c7e10bc4:	e1a01005 	mov	r1, r5
c7e10bc8:	e1a02006 	mov	r2, r6
c7e10bcc:	e1a0e00f 	mov	lr, pc
c7e10bd0:	e594f110 	ldr	pc, [r4, #272]
#endif
	mmc_bounce_buffer_stop(&backup, data);
	return ret;
}
c7e10bd4:	e28dd010 	add	sp, sp, #16	; 0x10
c7e10bd8:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e10bdc <mmc_send_if_cond>:

	return 0;
}

int mmc_send_if_cond(struct mmc *mmc)
{
c7e10bdc:	e92d4010 	push	{r4, lr}
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
c7e10be0:	e590302c 	ldr	r3, [r0, #44]
c7e10be4:	e59f2058 	ldr	r2, [pc, #88]	; c7e10c44 <mmc_send_if_cond+0x68>

	return 0;
}

int mmc_send_if_cond(struct mmc *mmc)
{
c7e10be8:	e24dd020 	sub	sp, sp, #32	; 0x20
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
c7e10bec:	e0032002 	and	r2, r3, r2
int mmc_send_if_cond(struct mmc *mmc)
{
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
c7e10bf0:	e28d1020 	add	r1, sp, #32	; 0x20
c7e10bf4:	e3a03008 	mov	r3, #8	; 0x8
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
c7e10bf8:	e3520000 	cmp	r2, #0	; 0x0
int mmc_send_if_cond(struct mmc *mmc)
{
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
c7e10bfc:	e16131bc 	strh	r3, [r1, #-28]!
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
c7e10c00:	e59f3040 	ldr	r3, [pc, #64]	; c7e10c48 <mmc_send_if_cond+0x6c>
c7e10c04:	03a030aa 	moveq	r3, #170	; 0xaa
c7e10c08:	e58d300c 	str	r3, [sp, #12]
	cmd.resp_type = MMC_RSP_R7;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10c0c:	e3a02000 	mov	r2, #0	; 0x0
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
	cmd.resp_type = MMC_RSP_R7;
c7e10c10:	e3a03015 	mov	r3, #21	; 0x15

	return 0;
}

int mmc_send_if_cond(struct mmc *mmc)
{
c7e10c14:	e1a04000 	mov	r4, r0
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
	cmd.resp_type = MMC_RSP_R7;
c7e10c18:	e58d3008 	str	r3, [sp, #8]

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10c1c:	ebffffdf 	bl	c7e10ba0 <mmc_send_cmd>

	if (err)
c7e10c20:	e3500000 	cmp	r0, #0	; 0x0
c7e10c24:	1a000004 	bne	c7e10c3c <mmc_send_if_cond+0x60>
		return err;

	if ((cmd.response[0] & 0xff) != 0xaa)
c7e10c28:	e5dd3010 	ldrb	r3, [sp, #16]
c7e10c2c:	e35300aa 	cmp	r3, #170	; 0xaa
		return UNUSABLE_ERR;
	else
		mmc->version = SD_VERSION_2;
c7e10c30:	059f3014 	ldreq	r3, [pc, #20]	; c7e10c4c <mmc_send_if_cond+0x70>
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
		return err;

	if ((cmd.response[0] & 0xff) != 0xaa)
c7e10c34:	13e00010 	mvnne	r0, #16	; 0x10
		return UNUSABLE_ERR;
	else
		mmc->version = SD_VERSION_2;
c7e10c38:	05843030 	streq	r3, [r4, #48]

	return 0;
}
c7e10c3c:	e28dd020 	add	sp, sp, #32	; 0x20
c7e10c40:	e8bd8010 	pop	{r4, pc}
c7e10c44:	00ff8000 	.word	0x00ff8000
c7e10c48:	000001aa 	.word	0x000001aa
c7e10c4c:	00020020 	.word	0x00020020

c7e10c50 <sd_switch>:
	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
c7e10c50:	e3e0c4ff 	mvn	ip, #-16777216	; 0xff000000

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
c7e10c54:	e1a02102 	lsl	r2, r2, #2
	cmd.cmdarg |= value << (group * 4);
c7e10c58:	e18ccf81 	orr	ip, ip, r1, lsl #31
c7e10c5c:	e3a0100f 	mov	r1, #15	; 0xf
c7e10c60:	e1ccc211 	bic	ip, ip, r1, lsl r2
c7e10c64:	e18cc213 	orr	ip, ip, r3, lsl r2

	return cd;
}

int sd_switch(struct mmc *mmc, int mode, int group, u8 value, u8 *resp)
{
c7e10c68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
c7e10c6c:	e3a03015 	mov	r3, #21	; 0x15

	return cd;
}

int sd_switch(struct mmc *mmc, int mode, int group, u8 value, u8 *resp)
{
c7e10c70:	e24dd034 	sub	sp, sp, #52	; 0x34
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
c7e10c74:	e58d3008 	str	r3, [sp, #8]
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *)resp;
c7e10c78:	e59d3038 	ldr	r3, [sp, #56]
	data.blocksize = 64;
	data.blocks = 1;
c7e10c7c:	e3a0e001 	mov	lr, #1	; 0x1
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *)resp;
c7e10c80:	e58d3020 	str	r3, [sp, #32]
	data.blocksize = 64;
c7e10c84:	e3a03040 	mov	r3, #64	; 0x40
c7e10c88:	e58d302c 	str	r3, [sp, #44]
	data.blocks = 1;
	data.flags = MMC_DATA_READ;

	return mmc_send_cmd(mmc, &cmd, &data);
c7e10c8c:	e28d1004 	add	r1, sp, #4	; 0x4
{
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
c7e10c90:	e3a03006 	mov	r3, #6	; 0x6
	data.dest = (char *)resp;
	data.blocksize = 64;
	data.blocks = 1;
	data.flags = MMC_DATA_READ;

	return mmc_send_cmd(mmc, &cmd, &data);
c7e10c94:	e28d2020 	add	r2, sp, #32	; 0x20
	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
c7e10c98:	e58dc00c 	str	ip, [sp, #12]

	data.dest = (char *)resp;
	data.blocksize = 64;
	data.blocks = 1;
	data.flags = MMC_DATA_READ;
c7e10c9c:	e58de024 	str	lr, [sp, #36]
{
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
c7e10ca0:	e1cd30b4 	strh	r3, [sp, #4]
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *)resp;
	data.blocksize = 64;
	data.blocks = 1;
c7e10ca4:	e58de028 	str	lr, [sp, #40]
	data.flags = MMC_DATA_READ;

	return mmc_send_cmd(mmc, &cmd, &data);
c7e10ca8:	ebffffbc 	bl	c7e10ba0 <mmc_send_cmd>
}
c7e10cac:	e28dd034 	add	sp, sp, #52	; 0x34
c7e10cb0:	e8bd8000 	pop	{pc}

c7e10cb4 <sd_change_freq>:


int sd_change_freq(struct mmc *mmc)
{
c7e10cb4:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	struct mmc_data data;
	int timeout;

	mmc->card_caps = 0;

	if (mmc_host_is_spi(mmc))
c7e10cb8:	e5903050 	ldr	r3, [r0, #80]
	return mmc_send_cmd(mmc, &cmd, &data);
}


int sd_change_freq(struct mmc *mmc)
{
c7e10cbc:	e24ddf4e 	sub	sp, sp, #312	; 0x138
	struct mmc_data data;
	int timeout;

	mmc->card_caps = 0;

	if (mmc_host_is_spi(mmc))
c7e10cc0:	e2132b01 	ands	r2, r3, #1024	; 0x400

int sd_change_freq(struct mmc *mmc)
{
	int err;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(uint, scr, 2);
c7e10cc4:	e28d30cc 	add	r3, sp, #204	; 0xcc
	ALLOC_CACHE_ALIGN_BUFFER(uint, switch_status, 16);
	struct mmc_data data;
	int timeout;

	mmc->card_caps = 0;
c7e10cc8:	e3a01000 	mov	r1, #0	; 0x0

int sd_change_freq(struct mmc *mmc)
{
	int err;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(uint, scr, 2);
c7e10ccc:	e3c3603f 	bic	r6, r3, #63	; 0x3f
	ALLOC_CACHE_ALIGN_BUFFER(uint, switch_status, 16);
c7e10cd0:	e28d304d 	add	r3, sp, #77	; 0x4d
	return mmc_send_cmd(mmc, &cmd, &data);
}


int sd_change_freq(struct mmc *mmc)
{
c7e10cd4:	e1a05000 	mov	r5, r0
	int err;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(uint, scr, 2);
	ALLOC_CACHE_ALIGN_BUFFER(uint, switch_status, 16);
c7e10cd8:	e3c3a03f 	bic	sl, r3, #63	; 0x3f
	struct mmc_data data;
	int timeout;

	mmc->card_caps = 0;
c7e10cdc:	e580104c 	str	r1, [r0, #76]

	if (mmc_host_is_spi(mmc))
c7e10ce0:	11a04001 	movne	r4, r1
c7e10ce4:	1a000066 	bne	c7e10e84 <sd_change_freq+0x1d0>
		return 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
c7e10ce8:	e1d038b0 	ldrh	r3, [r0, #128]

	if (mmc_host_is_spi(mmc))
		return 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
c7e10cec:	e28dcc01 	add	ip, sp, #256	; 0x100
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
c7e10cf0:	e1a03803 	lsl	r3, r3, #16
c7e10cf4:	e58d3114 	str	r3, [sp, #276]

	if (mmc_host_is_spi(mmc))
		return 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
c7e10cf8:	e3a03037 	mov	r3, #55	; 0x37
	cmd.resp_type = MMC_RSP_R1;
c7e10cfc:	e3a07015 	mov	r7, #21	; 0x15
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10d00:	e28d1f43 	add	r1, sp, #268	; 0x10c

	if (mmc_host_is_spi(mmc))
		return 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
c7e10d04:	e1cc30bc 	strh	r3, [ip, #12]
	cmd.resp_type = MMC_RSP_R1;
c7e10d08:	e58d7110 	str	r7, [sp, #272]
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10d0c:	ebffffa3 	bl	c7e10ba0 <mmc_send_cmd>

	if (err)
c7e10d10:	e2504000 	subs	r4, r0, #0	; 0x0
c7e10d14:	1a00005a 	bne	c7e10e84 <sd_change_freq+0x1d0>
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
c7e10d18:	e3a02033 	mov	r2, #51	; 0x33
c7e10d1c:	e28d3c01 	add	r3, sp, #256	; 0x100
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;
c7e10d20:	e58d4114 	str	r4, [sp, #276]

	if (err)
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
	cmd.resp_type = MMC_RSP_R1;
c7e10d24:	e58d7110 	str	r7, [sp, #272]
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
c7e10d28:	e1c320bc 	strh	r2, [r3, #12]
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;
c7e10d2c:	e3a04003 	mov	r4, #3	; 0x3
	timeout = 3;

retry_scr:
	data.dest = (char *)scr;
	data.blocksize = 8;
	data.blocks = 1;
c7e10d30:	e3a0c001 	mov	ip, #1	; 0x1

	timeout = 3;

retry_scr:
	data.dest = (char *)scr;
	data.blocksize = 8;
c7e10d34:	e3a03008 	mov	r3, #8	; 0x8
	data.blocks = 1;
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);
c7e10d38:	e1a00005 	mov	r0, r5
c7e10d3c:	e28d1f43 	add	r1, sp, #268	; 0x10c
c7e10d40:	e28d2f4a 	add	r2, sp, #296	; 0x128

	timeout = 3;

retry_scr:
	data.dest = (char *)scr;
	data.blocksize = 8;
c7e10d44:	e58d3134 	str	r3, [sp, #308]
	data.blocks = 1;
	data.flags = MMC_DATA_READ;
c7e10d48:	e58dc12c 	str	ip, [sp, #300]
	cmd.cmdarg = 0;

	timeout = 3;

retry_scr:
	data.dest = (char *)scr;
c7e10d4c:	e58d6128 	str	r6, [sp, #296]
	data.blocksize = 8;
	data.blocks = 1;
c7e10d50:	e58dc130 	str	ip, [sp, #304]
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);
c7e10d54:	ebffff91 	bl	c7e10ba0 <mmc_send_cmd>

	if (err) {
c7e10d58:	e2507000 	subs	r7, r0, #0	; 0x0
c7e10d5c:	0a000003 	beq	c7e10d70 <sd_change_freq+0xbc>
		if (timeout--)
c7e10d60:	e3540000 	cmp	r4, #0	; 0x0
c7e10d64:	e2444001 	sub	r4, r4, #1	; 0x1
c7e10d68:	1afffff0 	bne	c7e10d30 <sd_change_freq+0x7c>
c7e10d6c:	ea000043 	b	c7e10e80 <sd_change_freq+0x1cc>
			goto retry_scr;

		return err;
	}

	mmc->scr[0] = __be32_to_cpu(scr[0]);
c7e10d70:	e5960000 	ldr	r0, [r6]
c7e10d74:	ebfffef8 	bl	c7e1095c <__fswab32>
c7e10d78:	e5850058 	str	r0, [r5, #88]
c7e10d7c:	e1a04000 	mov	r4, r0
	mmc->scr[1] = __be32_to_cpu(scr[1]);
c7e10d80:	e5960004 	ldr	r0, [r6, #4]
c7e10d84:	ebfffef4 	bl	c7e1095c <__fswab32>

	switch ((mmc->scr[0] >> 24) & 0xf) {
c7e10d88:	e1a04c24 	lsr	r4, r4, #24
c7e10d8c:	e204400f 	and	r4, r4, #15	; 0xf
c7e10d90:	e3540001 	cmp	r4, #1	; 0x1

		return err;
	}

	mmc->scr[0] = __be32_to_cpu(scr[0]);
	mmc->scr[1] = __be32_to_cpu(scr[1]);
c7e10d94:	e585005c 	str	r0, [r5, #92]
	switch ((mmc->scr[0] >> 24) & 0xf) {
		case 0:
			mmc->version = SD_VERSION_1_0;
			break;
		case 1:
			mmc->version = SD_VERSION_1_10;
c7e10d98:	059f30f0 	ldreq	r3, [pc, #240]	; c7e10e90 <sd_change_freq+0x1dc>
	}

	mmc->scr[0] = __be32_to_cpu(scr[0]);
	mmc->scr[1] = __be32_to_cpu(scr[1]);

	switch ((mmc->scr[0] >> 24) & 0xf) {
c7e10d9c:	0a000004 	beq	c7e10db4 <sd_change_freq+0x100>
c7e10da0:	3a000002 	bcc	c7e10db0 <sd_change_freq+0xfc>
c7e10da4:	e3540002 	cmp	r4, #2	; 0x2
			break;
		case 1:
			mmc->version = SD_VERSION_1_10;
			break;
		case 2:
			mmc->version = SD_VERSION_2;
c7e10da8:	059f30e4 	ldreq	r3, [pc, #228]	; c7e10e94 <sd_change_freq+0x1e0>
c7e10dac:	0a000000 	beq	c7e10db4 <sd_change_freq+0x100>
			break;
		default:
			mmc->version = SD_VERSION_1_0;
c7e10db0:	e59f30e0 	ldr	r3, [pc, #224]	; c7e10e98 <sd_change_freq+0x1e4>
c7e10db4:	e5853030 	str	r3, [r5, #48]
			break;
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
c7e10db8:	e5953058 	ldr	r3, [r5, #88]
		mmc->card_caps |= MMC_MODE_4BIT;

	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
c7e10dbc:	e5952030 	ldr	r2, [r5, #48]
		default:
			mmc->version = SD_VERSION_1_0;
			break;
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
c7e10dc0:	e3130701 	tst	r3, #262144	; 0x40000
		mmc->card_caps |= MMC_MODE_4BIT;
c7e10dc4:	1595304c 	ldrne	r3, [r5, #76]
c7e10dc8:	13833c01 	orrne	r3, r3, #256	; 0x100
c7e10dcc:	1585304c 	strne	r3, [r5, #76]

	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
c7e10dd0:	e59f30c0 	ldr	r3, [pc, #192]	; c7e10e98 <sd_change_freq+0x1e4>
c7e10dd4:	e1520003 	cmp	r2, r3
c7e10dd8:	13a06004 	movne	r6, #4	; 0x4
c7e10ddc:	1a000008 	bne	c7e10e04 <sd_change_freq+0x150>
c7e10de0:	ea000026 	b	c7e10e80 <sd_change_freq+0x1cc>
		return 0;

	timeout = 4;
	while (timeout--) {
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1,
c7e10de4:	e58da000 	str	sl, [sp]
c7e10de8:	ebffff98 	bl	c7e10c50 <sd_switch>
				(u8 *)switch_status);

		if (err)
c7e10dec:	e2504000 	subs	r4, r0, #0	; 0x0
c7e10df0:	1a000023 	bne	c7e10e84 <sd_change_freq+0x1d0>
			return err;

		/* The high-speed function is busy.  Try again */
		if (!(__be32_to_cpu(switch_status[7]) & SD_HIGHSPEED_BUSY))
c7e10df4:	e59a001c 	ldr	r0, [sl, #28]
c7e10df8:	ebfffed7 	bl	c7e1095c <__fswab32>
c7e10dfc:	e3100802 	tst	r0, #131072	; 0x20000
c7e10e00:	0a000005 	beq	c7e10e1c <sd_change_freq+0x168>
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1,
c7e10e04:	e3a01000 	mov	r1, #0	; 0x0
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
c7e10e08:	e2566001 	subs	r6, r6, #1	; 0x1
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1,
c7e10e0c:	e1a02001 	mov	r2, r1
c7e10e10:	e3a03001 	mov	r3, #1	; 0x1
c7e10e14:	e1a00005 	mov	r0, r5
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
c7e10e18:	2afffff1 	bcs	c7e10de4 <sd_change_freq+0x130>
		if (!(__be32_to_cpu(switch_status[7]) & SD_HIGHSPEED_BUSY))
			break;
	}

	/* If high-speed isn't supported, we return */
	if (!(__be32_to_cpu(switch_status[3]) & SD_HIGHSPEED_SUPPORTED))
c7e10e1c:	e59a000c 	ldr	r0, [sl, #12]
c7e10e20:	ebfffecd 	bl	c7e1095c <__fswab32>
c7e10e24:	e3100802 	tst	r0, #131072	; 0x20000
c7e10e28:	0a000014 	beq	c7e10e80 <sd_change_freq+0x1cc>
	 * If the host doesn't support SD_HIGHSPEED, do not switch card to
	 * HIGHSPEED mode even if the card support SD_HIGHSPPED.
	 * This can avoid furthur problem when the card runs in different
	 * mode between the host.
	 */
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) &&
c7e10e2c:	e5953050 	ldr	r3, [r5, #80]
c7e10e30:	e3130010 	tst	r3, #16	; 0x10
c7e10e34:	0a000011 	beq	c7e10e80 <sd_change_freq+0x1cc>
c7e10e38:	e3130001 	tst	r3, #1	; 0x1
c7e10e3c:	0a00000f 	beq	c7e10e80 <sd_change_freq+0x1cc>
		(mmc->host_caps & MMC_MODE_HS)))
		return 0;

	err = sd_switch(mmc, SD_SWITCH_SWITCH, 0, 1, (u8 *)switch_status);
c7e10e40:	e3a01001 	mov	r1, #1	; 0x1
c7e10e44:	e1a00005 	mov	r0, r5
c7e10e48:	e3a02000 	mov	r2, #0	; 0x0
c7e10e4c:	e1a03001 	mov	r3, r1
c7e10e50:	e58da000 	str	sl, [sp]
c7e10e54:	ebffff7d 	bl	c7e10c50 <sd_switch>

	if (err)
c7e10e58:	e2504000 	subs	r4, r0, #0	; 0x0
c7e10e5c:	1a000008 	bne	c7e10e84 <sd_change_freq+0x1d0>
		return err;

	if ((__be32_to_cpu(switch_status[4]) & 0x0f000000) == 0x01000000)
c7e10e60:	e59a0010 	ldr	r0, [sl, #16]
c7e10e64:	ebfffebc 	bl	c7e1095c <__fswab32>
c7e10e68:	e200040f 	and	r0, r0, #251658240	; 0xf000000
c7e10e6c:	e3500401 	cmp	r0, #16777216	; 0x1000000
		mmc->card_caps |= MMC_MODE_HS;
c7e10e70:	0595304c 	ldreq	r3, [r5, #76]
c7e10e74:	03833001 	orreq	r3, r3, #1	; 0x1
c7e10e78:	0585304c 	streq	r3, [r5, #76]
c7e10e7c:	ea000000 	b	c7e10e84 <sd_change_freq+0x1d0>
c7e10e80:	e1a04007 	mov	r4, r7

	return 0;
}
c7e10e84:	e1a00004 	mov	r0, r4
c7e10e88:	e28ddf4e 	add	sp, sp, #312	; 0x138
c7e10e8c:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e10e90:	0002001a 	.word	0x0002001a
c7e10e94:	00020020 	.word	0x00020020
c7e10e98:	00020010 	.word	0x00020010

c7e10e9c <mmc_send_ext_csd>:
	return 0;
}


int mmc_send_ext_csd(struct mmc *mmc, u8 *ext_csd)
{
c7e10e9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
c7e10ea0:	e3a03015 	mov	r3, #21	; 0x15
	return 0;
}


int mmc_send_ext_csd(struct mmc *mmc, u8 *ext_csd)
{
c7e10ea4:	e24dd034 	sub	sp, sp, #52	; 0x34
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
c7e10ea8:	e58d3008 	str	r3, [sp, #8]
	cmd.cmdarg = 0;
c7e10eac:	e3a03000 	mov	r3, #0	; 0x0
c7e10eb0:	e58d300c 	str	r3, [sp, #12]

	data.dest = (char *)ext_csd;
	data.blocks = 1;
	data.blocksize = 512;
c7e10eb4:	e2833c02 	add	r3, r3, #512	; 0x200
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *)ext_csd;
	data.blocks = 1;
c7e10eb8:	e3a0c001 	mov	ip, #1	; 0x1
	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *)ext_csd;
c7e10ebc:	e58d1020 	str	r1, [sp, #32]
	data.blocks = 1;
	data.blocksize = 512;
c7e10ec0:	e58d302c 	str	r3, [sp, #44]
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);
c7e10ec4:	e28d1004 	add	r1, sp, #4	; 0x4
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
c7e10ec8:	e3a03008 	mov	r3, #8	; 0x8
	data.dest = (char *)ext_csd;
	data.blocks = 1;
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);
c7e10ecc:	e28d2020 	add	r2, sp, #32	; 0x20
	cmd.cmdarg = 0;

	data.dest = (char *)ext_csd;
	data.blocks = 1;
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;
c7e10ed0:	e58dc024 	str	ip, [sp, #36]
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
c7e10ed4:	e1cd30b4 	strh	r3, [sp, #4]
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *)ext_csd;
	data.blocks = 1;
c7e10ed8:	e58dc028 	str	ip, [sp, #40]
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);
c7e10edc:	ebffff2f 	bl	c7e10ba0 <mmc_send_cmd>

	return err;
}
c7e10ee0:	e28dd034 	add	sp, sp, #52	; 0x34
c7e10ee4:	e8bd8000 	pop	{pc}

c7e10ee8 <sd_send_op_cond>:
	return 0;
}

int
sd_send_op_cond(struct mmc *mmc)
{
c7e10ee8:	e92d4030 	push	{r4, r5, lr}
c7e10eec:	e1a04000 	mov	r4, r0
c7e10ef0:	e24dd024 	sub	sp, sp, #36	; 0x24
c7e10ef4:	e3a05ffa 	mov	r5, #1000	; 0x3e8
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = 0;
c7e10ef8:	e3a0c000 	mov	ip, #0	; 0x0
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
		cmd.resp_type = MMC_RSP_R1;
c7e10efc:	e3a03015 	mov	r3, #21	; 0x15
c7e10f00:	e58d3008 	str	r3, [sp, #8]
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10f04:	e1a0200c 	mov	r2, ip
	int timeout = 1000;
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
c7e10f08:	e3a03037 	mov	r3, #55	; 0x37
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10f0c:	e28d1004 	add	r1, sp, #4	; 0x4
c7e10f10:	e1a00004 	mov	r0, r4
	int timeout = 1000;
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
c7e10f14:	e1cd30b4 	strh	r3, [sp, #4]
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = 0;
c7e10f18:	e58dc00c 	str	ip, [sp, #12]

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10f1c:	ebffff1f 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e10f20:	e3500000 	cmp	r0, #0	; 0x0
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = mmc_host_is_spi(mmc) ? 0 :
c7e10f24:	e59fe108 	ldr	lr, [pc, #264]	; c7e11034 <sd_send_op_cond+0x14c>
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
c7e10f28:	1a00003f 	bne	c7e1102c <sd_send_op_cond+0x144>
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = mmc_host_is_spi(mmc) ? 0 :
c7e10f2c:	e5943050 	ldr	r3, [r4, #80]
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
c7e10f30:	e5941030 	ldr	r1, [r4, #48]
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = mmc_host_is_spi(mmc) ? 0 :
c7e10f34:	e3130b01 	tst	r3, #1024	; 0x400
c7e10f38:	0594302c 	ldreq	r3, [r4, #44]
c7e10f3c:	11a0e000 	movne	lr, r0
c7e10f40:	0003e00e 	andeq	lr, r3, lr
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
c7e10f44:	e59f30ec 	ldr	r3, [pc, #236]	; c7e11038 <sd_send_op_cond+0x150>
		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
c7e10f48:	e28dc020 	add	ip, sp, #32	; 0x20
		 * specified.
		 */
		cmd.cmdarg = mmc_host_is_spi(mmc) ? 0 :
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
c7e10f4c:	e1510003 	cmp	r1, r3
			cmd.cmdarg |= OCR_HCS;
c7e10f50:	038e3101 	orreq	r3, lr, #1073741824	; 0x40000000
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = mmc_host_is_spi(mmc) ? 0 :
c7e10f54:	e58de00c 	str	lr, [sp, #12]
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;
c7e10f58:	058d300c 	streq	r3, [sp, #12]
		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
c7e10f5c:	e3a03029 	mov	r3, #41	; 0x29
c7e10f60:	e16c31bc 	strh	r3, [ip, #-28]!
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10f64:	e3a02000 	mov	r2, #0	; 0x0

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
c7e10f68:	e3a03001 	mov	r3, #1	; 0x1
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10f6c:	e1a00004 	mov	r0, r4
c7e10f70:	e1a0100c 	mov	r1, ip

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
c7e10f74:	e58d3008 	str	r3, [sp, #8]
			(mmc->voltages & 0xff8000);

		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10f78:	ebffff08 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e10f7c:	e2503000 	subs	r3, r0, #0	; 0x0
			return err;

		udelay(1000);
c7e10f80:	e3a00ffa 	mov	r0, #1000	; 0x3e8
		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
c7e10f84:	11a00003 	movne	r0, r3
c7e10f88:	1a000027 	bne	c7e1102c <sd_send_op_cond+0x144>
			return err;

		udelay(1000);
c7e10f8c:	eb0047cd 	bl	c7e22ec8 <udelay>
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
c7e10f90:	e59d3010 	ldr	r3, [sp, #16]
c7e10f94:	e3530000 	cmp	r3, #0	; 0x0
c7e10f98:	aa000002 	bge	c7e10fa8 <sd_send_op_cond+0xc0>

	if (timeout <= 0)
c7e10f9c:	e3550000 	cmp	r5, #0	; 0x0
c7e10fa0:	ca000003 	bgt	c7e10fb4 <sd_send_op_cond+0xcc>
c7e10fa4:	ea00001f 	b	c7e11028 <sd_send_op_cond+0x140>

		if (err)
			return err;

		udelay(1000);
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
c7e10fa8:	e2555001 	subs	r5, r5, #1	; 0x1
c7e10fac:	2affffd1 	bcs	c7e10ef8 <sd_send_op_cond+0x10>
c7e10fb0:	ea00001c 	b	c7e11028 <sd_send_op_cond+0x140>

	if (timeout <= 0)
		return UNUSABLE_ERR;

	if (mmc->version != SD_VERSION_2)
c7e10fb4:	e59f307c 	ldr	r3, [pc, #124]	; c7e11038 <sd_send_op_cond+0x150>
c7e10fb8:	e5942030 	ldr	r2, [r4, #48]
c7e10fbc:	e1520003 	cmp	r2, r3
		mmc->version = SD_VERSION_1_0;
c7e10fc0:	12433010 	subne	r3, r3, #16	; 0x10
c7e10fc4:	15843030 	strne	r3, [r4, #48]

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
c7e10fc8:	e5943050 	ldr	r3, [r4, #80]
c7e10fcc:	e3130b01 	tst	r3, #1024	; 0x400
c7e10fd0:	0a00000b 	beq	c7e11004 <sd_send_op_cond+0x11c>
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = 0;
c7e10fd4:	e3a0c000 	mov	ip, #0	; 0x0
	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
		cmd.resp_type = MMC_RSP_R3;
c7e10fd8:	e3a03001 	mov	r3, #1	; 0x1
c7e10fdc:	e58d3008 	str	r3, [sp, #8]
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10fe0:	e1a0200c 	mov	r2, ip

	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
c7e10fe4:	e3a0303a 	mov	r3, #58	; 0x3a
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10fe8:	e1a00004 	mov	r0, r4
c7e10fec:	e28d1004 	add	r1, sp, #4	; 0x4

	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
c7e10ff0:	e1cd30b4 	strh	r3, [sp, #4]
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = 0;
c7e10ff4:	e58dc00c 	str	ip, [sp, #12]

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e10ff8:	ebfffee8 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e10ffc:	e3500000 	cmp	r0, #0	; 0x0
c7e11000:	1a000009 	bne	c7e1102c <sd_send_op_cond+0x144>
			return err;
	}

	mmc->ocr = cmd.response[0];
c7e11004:	e59d2010 	ldr	r2, [sp, #16]

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
	mmc->rca = 0;
c7e11008:	e3a03000 	mov	r3, #0	; 0x0
c7e1100c:	e1c438b0 	strh	r3, [r4, #128]
			return err;
	}

	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
c7e11010:	e1a03f22 	lsr	r3, r2, #30
c7e11014:	e2033001 	and	r3, r3, #1	; 0x1
c7e11018:	e5843040 	str	r3, [r4, #64]

		if (err)
			return err;
	}

	mmc->ocr = cmd.response[0];
c7e1101c:	e5842054 	str	r2, [r4, #84]

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
	mmc->rca = 0;
c7e11020:	e3a00000 	mov	r0, #0	; 0x0
c7e11024:	ea000000 	b	c7e1102c <sd_send_op_cond+0x144>

	return 0;
c7e11028:	e3e00010 	mvn	r0, #16	; 0x10
}
c7e1102c:	e28dd024 	add	sp, sp, #36	; 0x24
c7e11030:	e8bd8030 	pop	{r4, r5, pc}
c7e11034:	00ff8000 	.word	0x00ff8000
c7e11038:	00020020 	.word	0x00020020

c7e1103c <mmc_go_idle>:

	return blkcnt;
}

int mmc_go_idle(struct mmc* mmc)
{
c7e1103c:	e92d4010 	push	{r4, lr}
c7e11040:	e1a04000 	mov	r4, r0
c7e11044:	e24dd020 	sub	sp, sp, #32	; 0x20
	struct mmc_cmd cmd;
	int err;

	udelay(1000);
c7e11048:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c7e1104c:	eb00479d 	bl	c7e22ec8 <udelay>

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
c7e11050:	e3a03000 	mov	r3, #0	; 0x0
	cmd.cmdarg = 0;
	cmd.resp_type = MMC_RSP_NONE;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11054:	e1a00004 	mov	r0, r4
c7e11058:	e1a02003 	mov	r2, r3
c7e1105c:	e28d1004 	add	r1, sp, #4	; 0x4
	struct mmc_cmd cmd;
	int err;

	udelay(1000);

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
c7e11060:	e1cd30b4 	strh	r3, [sp, #4]
	cmd.cmdarg = 0;
c7e11064:	e58d300c 	str	r3, [sp, #12]
	cmd.resp_type = MMC_RSP_NONE;
c7e11068:	e58d3008 	str	r3, [sp, #8]

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e1106c:	ebfffecb 	bl	c7e10ba0 <mmc_send_cmd>

	if (err)
c7e11070:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11074:	1a000001 	bne	c7e11080 <mmc_go_idle+0x44>
		return err;

	udelay(2000);
c7e11078:	e2800e7d 	add	r0, r0, #2000	; 0x7d0
c7e1107c:	eb004791 	bl	c7e22ec8 <udelay>

	return 0;
}
c7e11080:	e1a00004 	mov	r0, r4
c7e11084:	e28dd020 	add	sp, sp, #32	; 0x20
c7e11088:	e8bd8010 	pop	{r4, pc}

c7e1108c <mmc_send_op_cond>:

	return 0;
}

int mmc_send_op_cond(struct mmc *mmc)
{
c7e1108c:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e11090:	e24dd020 	sub	sp, sp, #32	; 0x20
c7e11094:	e1a05000 	mov	r5, r0
	int timeout = 10000;
	struct mmc_cmd cmd;
	int err;

	/* Some cards seem to need this */
	mmc_go_idle(mmc);
c7e11098:	ebffffe7 	bl	c7e1103c <mmc_go_idle>

 	/* Asking to the card its capabilities */
 	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
 	cmd.resp_type = MMC_RSP_R3;
 	cmd.cmdarg = 0;
c7e1109c:	e3a0c000 	mov	ip, #0	; 0x0

	/* Some cards seem to need this */
	mmc_go_idle(mmc);

 	/* Asking to the card its capabilities */
 	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
c7e110a0:	e3a03001 	mov	r3, #1	; 0x1
 	cmd.resp_type = MMC_RSP_R3;
 	cmd.cmdarg = 0;

 	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e110a4:	e1a0200c 	mov	r2, ip
c7e110a8:	e1a00005 	mov	r0, r5
c7e110ac:	e28d1004 	add	r1, sp, #4	; 0x4
	/* Some cards seem to need this */
	mmc_go_idle(mmc);

 	/* Asking to the card its capabilities */
 	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
 	cmd.resp_type = MMC_RSP_R3;
c7e110b0:	e58d3008 	str	r3, [sp, #8]

	/* Some cards seem to need this */
	mmc_go_idle(mmc);

 	/* Asking to the card its capabilities */
 	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
c7e110b4:	e1cd30b4 	strh	r3, [sp, #4]
 	cmd.resp_type = MMC_RSP_R3;
 	cmd.cmdarg = 0;
c7e110b8:	e58dc00c 	str	ip, [sp, #12]

 	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e110bc:	ebfffeb7 	bl	c7e10ba0 <mmc_send_cmd>

 	if (err)
c7e110c0:	e3500000 	cmp	r0, #0	; 0x0
c7e110c4:	1a00003e 	bne	c7e111c4 <mmc_send_op_cond+0x138>
 		return err;

 	udelay(1000);
c7e110c8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c7e110cc:	eb00477d 	bl	c7e22ec8 <udelay>
c7e110d0:	e59f70f4 	ldr	r7, [pc, #244]	; c7e111cc <mmc_send_op_cond+0x140>

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc_host_is_spi(mmc) ? 0 :
c7e110d4:	e595c050 	ldr	ip, [r5, #80]
c7e110d8:	e59f00f0 	ldr	r0, [pc, #240]	; c7e111d0 <mmc_send_op_cond+0x144>
c7e110dc:	e31c0b01 	tst	ip, #1024	; 0x400
c7e110e0:	059d3010 	ldreq	r3, [sp, #16]
c7e110e4:	0595202c 	ldreq	r2, [r5, #44]
c7e110e8:	02031206 	andeq	r1, r3, #1610612736	; 0x60000000
c7e110ec:	00033002 	andeq	r3, r3, r2
c7e110f0:	00030000 	andeq	r0, r3, r0
c7e110f4:	01803001 	orreq	r3, r0, r1
c7e110f8:	13a03000 	movne	r3, #0	; 0x0

 	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
c7e110fc:	e3a0a001 	mov	sl, #1	; 0x1
 		return err;

 	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
c7e11100:	e28d4020 	add	r4, sp, #32	; 0x20
		cmd.cmdarg = (mmc_host_is_spi(mmc) ? 0 :
				(mmc->voltages &
				(cmd.response[0] & OCR_VOLTAGE_MASK)) |
				(cmd.response[0] & OCR_ACCESS_MODE));

		if (mmc->host_caps & MMC_MODE_HC)
c7e11104:	e31c0b02 	tst	ip, #2048	; 0x800
			cmd.cmdarg |= OCR_HCS;
c7e11108:	e3831101 	orr	r1, r3, #1073741824	; 0x40000000
 		return err;

 	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
c7e1110c:	e164a1bc 	strh	sl, [r4, #-28]!
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc_host_is_spi(mmc) ? 0 :
c7e11110:	e58d300c 	str	r3, [sp, #12]
				(cmd.response[0] & OCR_ACCESS_MODE));

		if (mmc->host_caps & MMC_MODE_HC)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11114:	e3a02000 	mov	r2, #0	; 0x0
				(mmc->voltages &
				(cmd.response[0] & OCR_VOLTAGE_MASK)) |
				(cmd.response[0] & OCR_ACCESS_MODE));

		if (mmc->host_caps & MMC_MODE_HC)
			cmd.cmdarg |= OCR_HCS;
c7e11118:	158d100c 	strne	r1, [sp, #12]

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e1111c:	e1a00005 	mov	r0, r5
c7e11120:	e1a01004 	mov	r1, r4

 	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
c7e11124:	e58da008 	str	sl, [sp, #8]
				(cmd.response[0] & OCR_ACCESS_MODE));

		if (mmc->host_caps & MMC_MODE_HC)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11128:	ebfffe9c 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e1112c:	e2506000 	subs	r6, r0, #0	; 0x0
			return err;

		udelay(1000);
c7e11130:	e3a00ffa 	mov	r0, #1000	; 0x3e8
		if (mmc->host_caps & MMC_MODE_HC)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
c7e11134:	11a00006 	movne	r0, r6
c7e11138:	1a000021 	bne	c7e111c4 <mmc_send_op_cond+0x138>
			return err;

		udelay(1000);
c7e1113c:	eb004761 	bl	c7e22ec8 <udelay>
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
c7e11140:	e59d3010 	ldr	r3, [sp, #16]
c7e11144:	e3530000 	cmp	r3, #0	; 0x0
c7e11148:	ba000002 	blt	c7e11158 <mmc_send_op_cond+0xcc>
c7e1114c:	e2577001 	subs	r7, r7, #1	; 0x1
c7e11150:	2affffdf 	bcs	c7e110d4 <mmc_send_op_cond+0x48>
c7e11154:	ea000019 	b	c7e111c0 <mmc_send_op_cond+0x134>

	if (timeout <= 0)
c7e11158:	e3570000 	cmp	r7, #0	; 0x0
c7e1115c:	da000017 	ble	c7e111c0 <mmc_send_op_cond+0x134>
		return UNUSABLE_ERR;

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
c7e11160:	e5953050 	ldr	r3, [r5, #80]
c7e11164:	e3130b01 	tst	r3, #1024	; 0x400
c7e11168:	0a000009 	beq	c7e11194 <mmc_send_op_cond+0x108>
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
c7e1116c:	e3a0303a 	mov	r3, #58	; 0x3a
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11170:	e1a01004 	mov	r1, r4
c7e11174:	e1a02006 	mov	r2, r6
c7e11178:	e1a00005 	mov	r0, r5
	if (timeout <= 0)
		return UNUSABLE_ERR;

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
		cmd.resp_type = MMC_RSP_R3;
c7e1117c:	e58da008 	str	sl, [sp, #8]

	if (timeout <= 0)
		return UNUSABLE_ERR;

	if (mmc_host_is_spi(mmc)) { /* read OCR for spi */
		cmd.cmdidx = MMC_CMD_SPI_READ_OCR;
c7e11180:	e1cd30b4 	strh	r3, [sp, #4]
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = 0;
c7e11184:	e58d600c 	str	r6, [sp, #12]

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11188:	ebfffe84 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e1118c:	e3500000 	cmp	r0, #0	; 0x0
c7e11190:	1a00000b 	bne	c7e111c4 <mmc_send_op_cond+0x138>
			return err;
	}

	mmc->version = MMC_VERSION_UNKNOWN;
	mmc->ocr = cmd.response[0];
c7e11194:	e59d3010 	ldr	r3, [sp, #16]

		if (err)
			return err;
	}

	mmc->version = MMC_VERSION_UNKNOWN;
c7e11198:	e3a01801 	mov	r1, #65536	; 0x10000
	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
c7e1119c:	e1a02f23 	lsr	r2, r3, #30
c7e111a0:	e2022001 	and	r2, r2, #1	; 0x1
c7e111a4:	e5852040 	str	r2, [r5, #64]
	mmc->rca = 0;
c7e111a8:	e3a02000 	mov	r2, #0	; 0x0

		if (err)
			return err;
	}

	mmc->version = MMC_VERSION_UNKNOWN;
c7e111ac:	e5851030 	str	r1, [r5, #48]
	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
	mmc->rca = 0;
c7e111b0:	e1c528b0 	strh	r2, [r5, #128]
		if (err)
			return err;
	}

	mmc->version = MMC_VERSION_UNKNOWN;
	mmc->ocr = cmd.response[0];
c7e111b4:	e5853054 	str	r3, [r5, #84]

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
	mmc->rca = 0;
c7e111b8:	e3a00000 	mov	r0, #0	; 0x0
c7e111bc:	ea000000 	b	c7e111c4 <mmc_send_op_cond+0x138>

	return 0;
c7e111c0:	e3e00010 	mvn	r0, #16	; 0x10
}
c7e111c4:	e28dd020 	add	sp, sp, #32	; 0x20
c7e111c8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e111cc:	00002710 	.word	0x00002710
c7e111d0:	007fff80 	.word	0x007fff80

c7e111d4 <mmc_read_blocks>:

	return blkcnt;
}

int mmc_read_blocks(struct mmc *mmc, void *dst, ulong start, lbaint_t blkcnt)
{
c7e111d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
c7e111d8:	e3530001 	cmp	r3, #1	; 0x1

	return blkcnt;
}

int mmc_read_blocks(struct mmc *mmc, void *dst, ulong start, lbaint_t blkcnt)
{
c7e111dc:	e24dd034 	sub	sp, sp, #52	; 0x34
c7e111e0:	e1a06003 	mov	r6, r3
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
c7e111e4:	83a03012 	movhi	r3, #18	; 0x12
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;
c7e111e8:	93a03011 	movls	r3, #17	; 0x11
c7e111ec:	e1cd30b4 	strh	r3, [sp, #4]

	if (mmc->high_capacity)
c7e111f0:	e5903040 	ldr	r3, [r0, #64]
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
c7e111f4:	e28d7004 	add	r7, sp, #4	; 0x4
	if (blkcnt > 1)
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;

	if (mmc->high_capacity)
c7e111f8:	e3530000 	cmp	r3, #0	; 0x0
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;
c7e111fc:	05903088 	ldreq	r3, [r0, #136]
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;

	if (mmc->high_capacity)
		cmd.cmdarg = start;
c7e11200:	158d200c 	strne	r2, [sp, #12]
	else
		cmd.cmdarg = start * mmc->read_bl_len;
c7e11204:	00030392 	muleq	r3, r2, r3
c7e11208:	058d300c 	streq	r3, [sp, #12]

	cmd.resp_type = MMC_RSP_R1;

	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
c7e1120c:	e5903088 	ldr	r3, [r0, #136]

	return blkcnt;
}

int mmc_read_blocks(struct mmc *mmc, void *dst, ulong start, lbaint_t blkcnt)
{
c7e11210:	e1a0e001 	mov	lr, r1
	if (mmc->high_capacity)
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;

	cmd.resp_type = MMC_RSP_R1;
c7e11214:	e3a0c015 	mov	ip, #21	; 0x15

	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
c7e11218:	e58d302c 	str	r3, [sp, #44]
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
c7e1121c:	e1a01007 	mov	r1, r7
	cmd.resp_type = MMC_RSP_R1;

	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;
c7e11220:	e3a03001 	mov	r3, #1	; 0x1

	if (mmc_send_cmd(mmc, &cmd, &data))
c7e11224:	e28d2020 	add	r2, sp, #32	; 0x20

	return blkcnt;
}

int mmc_read_blocks(struct mmc *mmc, void *dst, ulong start, lbaint_t blkcnt)
{
c7e11228:	e1a05000 	mov	r5, r0
	if (mmc->high_capacity)
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;

	cmd.resp_type = MMC_RSP_R1;
c7e1122c:	e58dc008 	str	ip, [sp, #8]

	data.dest = dst;
c7e11230:	e58de020 	str	lr, [sp, #32]
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;
c7e11234:	e58d3024 	str	r3, [sp, #36]
		cmd.cmdarg = start * mmc->read_bl_len;

	cmd.resp_type = MMC_RSP_R1;

	data.dest = dst;
	data.blocks = blkcnt;
c7e11238:	e58d6028 	str	r6, [sp, #40]
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
c7e1123c:	ebfffe57 	bl	c7e10ba0 <mmc_send_cmd>
c7e11240:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11244:	13a00000 	movne	r0, #0	; 0x0
c7e11248:	1a000011 	bne	c7e11294 <mmc_read_blocks+0xc0>
		return 0;

	if (blkcnt > 1) {
c7e1124c:	e3560001 	cmp	r6, #1	; 0x1
c7e11250:	9a00000e 	bls	c7e11290 <mmc_read_blocks+0xbc>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
c7e11254:	e3a0301d 	mov	r3, #29	; 0x1d
c7e11258:	e58d3008 	str	r3, [sp, #8]
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
c7e1125c:	e1a00005 	mov	r0, r5

	if (mmc_send_cmd(mmc, &cmd, &data))
		return 0;

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
c7e11260:	e3a0300c 	mov	r3, #12	; 0xc
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
c7e11264:	e1a01007 	mov	r1, r7
c7e11268:	e1a02004 	mov	r2, r4

	if (mmc_send_cmd(mmc, &cmd, &data))
		return 0;

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
c7e1126c:	e1cd30b4 	strh	r3, [sp, #4]
		cmd.cmdarg = 0;
c7e11270:	e58d400c 	str	r4, [sp, #12]
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
c7e11274:	ebfffe49 	bl	c7e10ba0 <mmc_send_cmd>
c7e11278:	e3500000 	cmp	r0, #0	; 0x0
c7e1127c:	0a000003 	beq	c7e11290 <mmc_read_blocks+0xbc>
			printf("mmc fail to send stop cmd\n");
c7e11280:	e59f0014 	ldr	r0, [pc, #20]	; c7e1129c <mmc_read_blocks+0xc8>
c7e11284:	ebffddf3 	bl	c7e08a58 <printf>
c7e11288:	e1a00004 	mov	r0, r4
c7e1128c:	ea000000 	b	c7e11294 <mmc_read_blocks+0xc0>
			return 0;
		}
	}

	return blkcnt;
c7e11290:	e1a00006 	mov	r0, r6
}
c7e11294:	e28dd034 	add	sp, sp, #52	; 0x34
c7e11298:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e1129c:	c7e32d20 	.word	0xc7e32d20

c7e112a0 <mmc_set_blocklen>:

	return 0;
}

int mmc_set_blocklen(struct mmc *mmc, int len)
{
c7e112a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
	cmd.resp_type = MMC_RSP_R1;
c7e112a4:	e3a03015 	mov	r3, #21	; 0x15

	return 0;
}

int mmc_set_blocklen(struct mmc *mmc, int len)
{
c7e112a8:	e24dd024 	sub	sp, sp, #36	; 0x24
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = len;
c7e112ac:	e58d100c 	str	r1, [sp, #12]
int mmc_set_blocklen(struct mmc *mmc, int len)
{
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
	cmd.resp_type = MMC_RSP_R1;
c7e112b0:	e58d3008 	str	r3, [sp, #8]
	cmd.cmdarg = len;

	return mmc_send_cmd(mmc, &cmd, NULL);
c7e112b4:	e28d1004 	add	r1, sp, #4	; 0x4

int mmc_set_blocklen(struct mmc *mmc, int len)
{
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
c7e112b8:	e3a03010 	mov	r3, #16	; 0x10
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = len;

	return mmc_send_cmd(mmc, &cmd, NULL);
c7e112bc:	e3a02000 	mov	r2, #0	; 0x0

int mmc_set_blocklen(struct mmc *mmc, int len)
{
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
c7e112c0:	e1cd30b4 	strh	r3, [sp, #4]
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = len;

	return mmc_send_cmd(mmc, &cmd, NULL);
c7e112c4:	ebfffe35 	bl	c7e10ba0 <mmc_send_cmd>
}
c7e112c8:	e28dd024 	add	sp, sp, #36	; 0x24
c7e112cc:	e8bd8000 	pop	{pc}

c7e112d0 <mmc_bread>:

	return blkcnt;
}

static ulong mmc_bread(int dev_num, ulong start, lbaint_t blkcnt, void *dst)
{
c7e112d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	lbaint_t cur, blocks_todo = blkcnt;

	if (blkcnt == 0)
c7e112d4:	e2527000 	subs	r7, r2, #0	; 0x0

	return blkcnt;
}

static ulong mmc_bread(int dev_num, ulong start, lbaint_t blkcnt, void *dst)
{
c7e112d8:	e1a0a001 	mov	sl, r1
c7e112dc:	e1a09003 	mov	r9, r3
	lbaint_t cur, blocks_todo = blkcnt;

	if (blkcnt == 0)
c7e112e0:	0a00001f 	beq	c7e11364 <mmc_bread+0x94>
		return 0;

	struct mmc *mmc = find_mmc_device(dev_num);
c7e112e4:	ebfffe1a 	bl	c7e10b54 <find_mmc_device>
	if (!mmc)
c7e112e8:	e2506000 	subs	r6, r0, #0	; 0x0
c7e112ec:	0a00001b 	beq	c7e11360 <mmc_bread+0x90>
		return 0;

	if ((start + blkcnt) > mmc->block_dev.lba) {
c7e112f0:	e59620b0 	ldr	r2, [r6, #176]
c7e112f4:	e087100a 	add	r1, r7, sl
c7e112f8:	e1510002 	cmp	r1, r2
c7e112fc:	9a000002 	bls	c7e1130c <mmc_bread+0x3c>
		printf("MMC: block number 0x%lx exceeds max(0x%lx)\n",
c7e11300:	e59f0064 	ldr	r0, [pc, #100]	; c7e1136c <mmc_bread+0x9c>
c7e11304:	ebffddd3 	bl	c7e08a58 <printf>
c7e11308:	ea000014 	b	c7e11360 <mmc_bread+0x90>
			start + blkcnt, mmc->block_dev.lba);
		return 0;
	}

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
c7e1130c:	e5961088 	ldr	r1, [r6, #136]
c7e11310:	ebffffe2 	bl	c7e112a0 <mmc_set_blocklen>
c7e11314:	e3500000 	cmp	r0, #0	; 0x0
c7e11318:	1a000010 	bne	c7e11360 <mmc_bread+0x90>
c7e1131c:	e1a05007 	mov	r5, r7
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
c7e11320:	e5964120 	ldr	r4, [r6, #288]
		if(mmc_read_blocks(mmc, dst, start, cur) != cur)
c7e11324:	e1a0200a 	mov	r2, sl

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
c7e11328:	e1550004 	cmp	r5, r4
c7e1132c:	31a04005 	movcc	r4, r5
		if(mmc_read_blocks(mmc, dst, start, cur) != cur)
c7e11330:	e1a01009 	mov	r1, r9
c7e11334:	e1a00006 	mov	r0, r6
c7e11338:	e1a03004 	mov	r3, r4
c7e1133c:	ebffffa4 	bl	c7e111d4 <mmc_read_blocks>
c7e11340:	e1500004 	cmp	r0, r4
			return 0;
		blocks_todo -= cur;
		start += cur;
c7e11344:	e08aa000 	add	sl, sl, r0
	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
		if(mmc_read_blocks(mmc, dst, start, cur) != cur)
c7e11348:	1a000004 	bne	c7e11360 <mmc_bread+0x90>
			return 0;
		blocks_todo -= cur;
		start += cur;
		dst += cur * mmc->read_bl_len;
	} while (blocks_todo > 0);
c7e1134c:	e0555000 	subs	r5, r5, r0
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
		if(mmc_read_blocks(mmc, dst, start, cur) != cur)
			return 0;
		blocks_todo -= cur;
		start += cur;
		dst += cur * mmc->read_bl_len;
c7e11350:	e5963088 	ldr	r3, [r6, #136]
	} while (blocks_todo > 0);
c7e11354:	0a000002 	beq	c7e11364 <mmc_bread+0x94>
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
		if(mmc_read_blocks(mmc, dst, start, cur) != cur)
			return 0;
		blocks_todo -= cur;
		start += cur;
		dst += cur * mmc->read_bl_len;
c7e11358:	e0299093 	mla	r9, r3, r0, r9
c7e1135c:	eaffffef 	b	c7e11320 <mmc_bread+0x50>
c7e11360:	e3a07000 	mov	r7, #0	; 0x0
	} while (blocks_todo > 0);

	return blkcnt;
}
c7e11364:	e1a00007 	mov	r0, r7
c7e11368:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e1136c:	c7e32d3b 	.word	0xc7e32d3b

c7e11370 <mmc_send_status>:
	int status;
#endif

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	if (!mmc_host_is_spi(mmc))
c7e11370:	e5903050 	ldr	r3, [r0, #80]
	mmc_bounce_buffer_stop(&backup, data);
	return ret;
}

int mmc_send_status(struct mmc *mmc, int timeout)
{
c7e11374:	e92d4070 	push	{r4, r5, r6, lr}
	int status;
#endif

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	if (!mmc_host_is_spi(mmc))
c7e11378:	e3130b01 	tst	r3, #1024	; 0x400
		cmd.cmdarg = mmc->rca << 16;
c7e1137c:	01d038b0 	ldrheq	r3, [r0, #128]
	mmc_bounce_buffer_stop(&backup, data);
	return ret;
}

int mmc_send_status(struct mmc *mmc, int timeout)
{
c7e11380:	e24dd020 	sub	sp, sp, #32	; 0x20
#endif

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	if (!mmc_host_is_spi(mmc))
		cmd.cmdarg = mmc->rca << 16;
c7e11384:	01a03803 	lsleq	r3, r3, #16
c7e11388:	058d300c 	streq	r3, [sp, #12]
#ifdef CONFIG_MMC_TRACE
	int status;
#endif

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
c7e1138c:	e3a03015 	mov	r3, #21	; 0x15
c7e11390:	e58d3008 	str	r3, [sp, #8]
	int err, retries = 5;
#ifdef CONFIG_MMC_TRACE
	int status;
#endif

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
c7e11394:	e3a0300d 	mov	r3, #13	; 0xd
	mmc_bounce_buffer_stop(&backup, data);
	return ret;
}

int mmc_send_status(struct mmc *mmc, int timeout)
{
c7e11398:	e1a06000 	mov	r6, r0
c7e1139c:	e1a05001 	mov	r5, r1
	int err, retries = 5;
#ifdef CONFIG_MMC_TRACE
	int status;
#endif

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
c7e113a0:	e1cd30b4 	strh	r3, [sp, #4]
	cmd.resp_type = MMC_RSP_R1;
c7e113a4:	e3a04005 	mov	r4, #5	; 0x5
	if (!mmc_host_is_spi(mmc))
		cmd.cmdarg = mmc->rca << 16;

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e113a8:	e3a02000 	mov	r2, #0	; 0x0
c7e113ac:	e28d1004 	add	r1, sp, #4	; 0x4
c7e113b0:	e1a00006 	mov	r0, r6
c7e113b4:	ebfffdf9 	bl	c7e10ba0 <mmc_send_cmd>
		if (!err) {
c7e113b8:	e2503000 	subs	r3, r0, #0	; 0x0
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA) &&
			    (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
			     MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
c7e113bc:	e59f2074 	ldr	r2, [pc, #116]	; c7e11438 <mmc_send_status+0xc8>
				return COMM_ERR;
			}
		} else if (--retries < 0)
			return err;

		udelay(1000);
c7e113c0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	if (!mmc_host_is_spi(mmc))
		cmd.cmdarg = mmc->rca << 16;

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
		if (!err) {
c7e113c4:	1a00000c 	bne	c7e113fc <mmc_send_status+0x8c>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA) &&
c7e113c8:	e59d1010 	ldr	r1, [sp, #16]
c7e113cc:	e3110c01 	tst	r1, #256	; 0x100
			    (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
			     MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
c7e113d0:	e0012002 	and	r2, r1, r2
		cmd.cmdarg = mmc->rca << 16;

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA) &&
c7e113d4:	e2013c1e 	and	r3, r1, #7680	; 0x1e00
c7e113d8:	0a000001 	beq	c7e113e4 <mmc_send_status+0x74>
c7e113dc:	e3530c0e 	cmp	r3, #3584	; 0xe00
c7e113e0:	1a00000b 	bne	c7e11414 <mmc_send_status+0xa4>
			    (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
			     MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
c7e113e4:	e3520000 	cmp	r2, #0	; 0x0
c7e113e8:	0a000005 	beq	c7e11404 <mmc_send_status+0x94>
				printf("Status Error: 0x%08X\n",
c7e113ec:	e59f0048 	ldr	r0, [pc, #72]	; c7e1143c <mmc_send_status+0xcc>
c7e113f0:	ebffdd98 	bl	c7e08a58 <printf>
c7e113f4:	e3e03011 	mvn	r3, #17	; 0x11
c7e113f8:	ea00000b 	b	c7e1142c <mmc_send_status+0xbc>
					cmd.response[0]);
				return COMM_ERR;
			}
		} else if (--retries < 0)
c7e113fc:	e2544001 	subs	r4, r4, #1	; 0x1
c7e11400:	4a000009 	bmi	c7e1142c <mmc_send_status+0xbc>
			return err;

		udelay(1000);

	} while (timeout--);
c7e11404:	e2455001 	sub	r5, r5, #1	; 0x1
				return COMM_ERR;
			}
		} else if (--retries < 0)
			return err;

		udelay(1000);
c7e11408:	eb0046ae 	bl	c7e22ec8 <udelay>

	} while (timeout--);
c7e1140c:	e3750001 	cmn	r5, #1	; 0x1
c7e11410:	1affffe4 	bne	c7e113a8 <mmc_send_status+0x38>

#ifdef CONFIG_MMC_TRACE
	status = (cmd.response[0] & MMC_STATUS_CURR_STATE) >> 9;
	printf("CURR STATE:%d\n", status);
#endif
	if (timeout <= 0) {
c7e11414:	e3550000 	cmp	r5, #0	; 0x0
c7e11418:	c3a03000 	movgt	r3, #0	; 0x0
c7e1141c:	ca000002 	bgt	c7e1142c <mmc_send_status+0xbc>
		printf("Timeout waiting card ready\n");
c7e11420:	e59f0018 	ldr	r0, [pc, #24]	; c7e11440 <mmc_send_status+0xd0>
c7e11424:	ebffdd8b 	bl	c7e08a58 <printf>
c7e11428:	e3e03012 	mvn	r3, #18	; 0x12
		return TIMEOUT;
	}

	return 0;
}
c7e1142c:	e1a00003 	mov	r0, r3
c7e11430:	e28dd020 	add	sp, sp, #32	; 0x20
c7e11434:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e11438:	fdf94080 	.word	0xfdf94080
c7e1143c:	c7e32d67 	.word	0xc7e32d67
c7e11440:	c7e32d7d 	.word	0xc7e32d7d

c7e11444 <mmc_berase>:
	return err;
}

static unsigned long
mmc_berase(int dev_num, unsigned long start, lbaint_t blkcnt)
{
c7e11444:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e11448:	e24dd028 	sub	sp, sp, #40	; 0x28
c7e1144c:	e58d1004 	str	r1, [sp, #4]
c7e11450:	e58d2000 	str	r2, [sp]
	int err = 0;
	struct mmc *mmc = find_mmc_device(dev_num);
c7e11454:	ebfffdbe 	bl	c7e10b54 <find_mmc_device>
	lbaint_t blk = 0, blk_r = 0;
	int timeout = 1000;

	if (!mmc)
c7e11458:	e2506000 	subs	r6, r0, #0	; 0x0
c7e1145c:	03e05000 	mvneq	r5, #0	; 0x0
c7e11460:	0a000059 	beq	c7e115cc <mmc_berase+0x188>
		return -1;

	if ((start % mmc->erase_grp_size) || (blkcnt % mmc->erase_grp_size))
c7e11464:	e5964090 	ldr	r4, [r6, #144]
c7e11468:	e59d0004 	ldr	r0, [sp, #4]
c7e1146c:	e1a01004 	mov	r1, r4
c7e11470:	eb006461 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e11474:	e3510000 	cmp	r1, #0	; 0x0
c7e11478:	1a000004 	bne	c7e11490 <mmc_berase+0x4c>
c7e1147c:	e59d0000 	ldr	r0, [sp]
c7e11480:	e1a01004 	mov	r1, r4
c7e11484:	eb00645c 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e11488:	e3510000 	cmp	r1, #0	; 0x0
c7e1148c:	0a000048 	beq	c7e115b4 <mmc_berase+0x170>
		printf("\n\nCaution! Your devices Erase group is 0x%x\n"
c7e11490:	e59d0004 	ldr	r0, [sp, #4]
c7e11494:	e59d2000 	ldr	r2, [sp]
c7e11498:	e0803004 	add	r3, r0, r4
c7e1149c:	e0833002 	add	r3, r3, r2
c7e114a0:	e2642000 	rsb	r2, r4, #0	; 0x0
c7e114a4:	e0033002 	and	r3, r3, r2
c7e114a8:	e1a01004 	mov	r1, r4
c7e114ac:	e0002002 	and	r2, r0, r2
c7e114b0:	e2433001 	sub	r3, r3, #1	; 0x1
c7e114b4:	e59f011c 	ldr	r0, [pc, #284]	; c7e115d8 <mmc_berase+0x194>
c7e114b8:	ebffdd66 	bl	c7e08a58 <printf>
c7e114bc:	ea00003c 	b	c7e115b4 <mmc_berase+0x170>
		       mmc->erase_grp_size, start & ~(mmc->erase_grp_size - 1),
		       ((start + blkcnt + mmc->erase_grp_size)
		       & ~(mmc->erase_grp_size - 1)) - 1);

	while (blk < blkcnt) {
		blk_r = ((blkcnt - blk) > mmc->erase_grp_size) ?
c7e114c0:	e5963090 	ldr	r3, [r6, #144]
{
	struct mmc_cmd cmd;
	ulong end;
	int err, start_cmd, end_cmd;

	if (mmc->high_capacity)
c7e114c4:	e5962040 	ldr	r2, [r6, #64]
		       mmc->erase_grp_size, start & ~(mmc->erase_grp_size - 1),
		       ((start + blkcnt + mmc->erase_grp_size)
		       & ~(mmc->erase_grp_size - 1)) - 1);

	while (blk < blkcnt) {
		blk_r = ((blkcnt - blk) > mmc->erase_grp_size) ?
c7e114c8:	e15a0003 	cmp	sl, r3
c7e114cc:	21a0a003 	movcs	sl, r3
{
	struct mmc_cmd cmd;
	ulong end;
	int err, start_cmd, end_cmd;

	if (mmc->high_capacity)
c7e114d0:	e3520000 	cmp	r2, #0	; 0x0
c7e114d4:	e24c3001 	sub	r3, ip, #1	; 0x1
		end = start + blkcnt - 1;
	else {
		end = (start + blkcnt - 1) * mmc->write_bl_len;
c7e114d8:	e083200a 	add	r2, r3, sl
c7e114dc:	0596308c 	ldreq	r3, [r6, #140]
	struct mmc_cmd cmd;
	ulong end;
	int err, start_cmd, end_cmd;

	if (mmc->high_capacity)
		end = start + blkcnt - 1;
c7e114e0:	11a0b002 	movne	fp, r2
	else {
		end = (start + blkcnt - 1) * mmc->write_bl_len;
		start *= mmc->write_bl_len;
c7e114e4:	000c0c93 	muleq	ip, r3, ip
	int err, start_cmd, end_cmd;

	if (mmc->high_capacity)
		end = start + blkcnt - 1;
	else {
		end = (start + blkcnt - 1) * mmc->write_bl_len;
c7e114e8:	000b0293 	muleq	fp, r3, r2
		start *= mmc->write_bl_len;
	}

	if (IS_SD(mmc)) {
c7e114ec:	e5963030 	ldr	r3, [r6, #48]

	cmd.cmdidx = start_cmd;
	cmd.cmdarg = start;
	cmd.resp_type = MMC_RSP_R1;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e114f0:	e28d900c 	add	r9, sp, #12	; 0xc
	else {
		end = (start + blkcnt - 1) * mmc->write_bl_len;
		start *= mmc->write_bl_len;
	}

	if (IS_SD(mmc)) {
c7e114f4:	e2033802 	and	r3, r3, #131072	; 0x20000
c7e114f8:	e3530000 	cmp	r3, #0	; 0x0
c7e114fc:	13a03020 	movne	r3, #32	; 0x20
c7e11500:	03a03023 	moveq	r3, #35	; 0x23

	cmd.cmdidx = start_cmd;
	cmd.cmdarg = start;
	cmd.resp_type = MMC_RSP_R1;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11504:	e1a01009 	mov	r1, r9
c7e11508:	e3a02000 	mov	r2, #0	; 0x0
	} else {
		start_cmd = MMC_CMD_ERASE_GROUP_START;
		end_cmd = MMC_CMD_ERASE_GROUP_END;
	}

	cmd.cmdidx = start_cmd;
c7e1150c:	e1cd30bc 	strh	r3, [sp, #12]
	cmd.cmdarg = start;
	cmd.resp_type = MMC_RSP_R1;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11510:	e1a00006 	mov	r0, r6
		end_cmd = MMC_CMD_ERASE_GROUP_END;
	}

	cmd.cmdidx = start_cmd;
	cmd.cmdarg = start;
	cmd.resp_type = MMC_RSP_R1;
c7e11514:	e3a03015 	mov	r3, #21	; 0x15
	else {
		end = (start + blkcnt - 1) * mmc->write_bl_len;
		start *= mmc->write_bl_len;
	}

	if (IS_SD(mmc)) {
c7e11518:	13a07021 	movne	r7, #33	; 0x21
c7e1151c:	03a07024 	moveq	r7, #36	; 0x24
		start_cmd = MMC_CMD_ERASE_GROUP_START;
		end_cmd = MMC_CMD_ERASE_GROUP_END;
	}

	cmd.cmdidx = start_cmd;
	cmd.cmdarg = start;
c7e11520:	e58dc014 	str	ip, [sp, #20]
	cmd.resp_type = MMC_RSP_R1;
c7e11524:	e58d3010 	str	r3, [sp, #16]

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11528:	ebfffd9c 	bl	c7e10ba0 <mmc_send_cmd>
	if (err)
c7e1152c:	e2504000 	subs	r4, r0, #0	; 0x0
		goto err_out;

	cmd.cmdidx = end_cmd;
	cmd.cmdarg = end;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11530:	e1a01009 	mov	r1, r9
c7e11534:	e1a02004 	mov	r2, r4
c7e11538:	e1a00006 	mov	r0, r6
	cmd.cmdidx = start_cmd;
	cmd.cmdarg = start;
	cmd.resp_type = MMC_RSP_R1;

	err = mmc_send_cmd(mmc, &cmd, NULL);
	if (err)
c7e1153c:	1a000010 	bne	c7e11584 <mmc_berase+0x140>
		goto err_out;

	cmd.cmdidx = end_cmd;
c7e11540:	e1cd70bc 	strh	r7, [sp, #12]
	cmd.cmdarg = end;
c7e11544:	e58db014 	str	fp, [sp, #20]

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11548:	ebfffd94 	bl	c7e10ba0 <mmc_send_cmd>
	if (err)
c7e1154c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11550:	1a00000b 	bne	c7e11584 <mmc_berase+0x140>
		goto err_out;

	cmd.cmdidx = MMC_CMD_ERASE;
	cmd.cmdarg = SECURE_ERASE;
c7e11554:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
c7e11558:	e58d3014 	str	r3, [sp, #20]
	cmd.resp_type = MMC_RSP_R1b;
c7e1155c:	e2833176 	add	r3, r3, #-2147483619	; 0x8000001d

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11560:	e1a02004 	mov	r2, r4
	if (err)
		goto err_out;

	cmd.cmdidx = MMC_CMD_ERASE;
	cmd.cmdarg = SECURE_ERASE;
	cmd.resp_type = MMC_RSP_R1b;
c7e11564:	e58d3010 	str	r3, [sp, #16]

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11568:	e1a01009 	mov	r1, r9

	err = mmc_send_cmd(mmc, &cmd, NULL);
	if (err)
		goto err_out;

	cmd.cmdidx = MMC_CMD_ERASE;
c7e1156c:	e3a03026 	mov	r3, #38	; 0x26
	cmd.cmdarg = SECURE_ERASE;
	cmd.resp_type = MMC_RSP_R1b;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11570:	e1a00006 	mov	r0, r6

	err = mmc_send_cmd(mmc, &cmd, NULL);
	if (err)
		goto err_out;

	cmd.cmdidx = MMC_CMD_ERASE;
c7e11574:	e1cd30bc 	strh	r3, [sp, #12]
	cmd.cmdarg = SECURE_ERASE;
	cmd.resp_type = MMC_RSP_R1b;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11578:	ebfffd88 	bl	c7e10ba0 <mmc_send_cmd>
	if (err)
c7e1157c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11580:	0a000003 	beq	c7e11594 <mmc_berase+0x150>
		goto err_out;

	return 0;

err_out:
	puts("mmc erase failed\n");
c7e11584:	e59f0050 	ldr	r0, [pc, #80]	; c7e115dc <mmc_berase+0x198>
c7e11588:	ebffdd17 	bl	c7e089ec <puts>

	while (blk < blkcnt) {
		blk_r = ((blkcnt - blk) > mmc->erase_grp_size) ?
			mmc->erase_grp_size : (blkcnt - blk);
		err = mmc_erase_t(mmc, start + blk, blk_r);
		if (err)
c7e1158c:	e3540000 	cmp	r4, #0	; 0x0
c7e11590:	1a00000d 	bne	c7e115cc <mmc_berase+0x188>
			break;

		blk += blk_r;

		/* Waiting for the ready status */
		if (mmc_send_status(mmc, timeout))
c7e11594:	e1a00006 	mov	r0, r6
c7e11598:	e3a01ffa 	mov	r1, #1000	; 0x3e8
c7e1159c:	ebffff73 	bl	c7e11370 <mmc_send_status>
c7e115a0:	e3500000 	cmp	r0, #0	; 0x0
			mmc->erase_grp_size : (blkcnt - blk);
		err = mmc_erase_t(mmc, start + blk, blk_r);
		if (err)
			break;

		blk += blk_r;
c7e115a4:	e085500a 	add	r5, r5, sl

		/* Waiting for the ready status */
		if (mmc_send_status(mmc, timeout))
c7e115a8:	0a000002 	beq	c7e115b8 <mmc_berase+0x174>
c7e115ac:	e3a05000 	mov	r5, #0	; 0x0
c7e115b0:	ea000005 	b	c7e115cc <mmc_berase+0x188>
			mmc->erase_grp_size : (blkcnt - blk);
		err = mmc_erase_t(mmc, start + blk, blk_r);
		if (err)
			break;

		blk += blk_r;
c7e115b4:	e3a05000 	mov	r5, #0	; 0x0
		       mmc->erase_grp_size, start & ~(mmc->erase_grp_size - 1),
		       ((start + blkcnt + mmc->erase_grp_size)
		       & ~(mmc->erase_grp_size - 1)) - 1);

	while (blk < blkcnt) {
		blk_r = ((blkcnt - blk) > mmc->erase_grp_size) ?
c7e115b8:	e89d0005 	ldm	sp, {r0, r2}
			"The erase range would be change to 0x%lx~0x%lx\n\n",
		       mmc->erase_grp_size, start & ~(mmc->erase_grp_size - 1),
		       ((start + blkcnt + mmc->erase_grp_size)
		       & ~(mmc->erase_grp_size - 1)) - 1);

	while (blk < blkcnt) {
c7e115bc:	e1550000 	cmp	r5, r0
		blk_r = ((blkcnt - blk) > mmc->erase_grp_size) ?
c7e115c0:	e065a000 	rsb	sl, r5, r0
			mmc->erase_grp_size : (blkcnt - blk);
		err = mmc_erase_t(mmc, start + blk, blk_r);
c7e115c4:	e085c002 	add	ip, r5, r2
			"The erase range would be change to 0x%lx~0x%lx\n\n",
		       mmc->erase_grp_size, start & ~(mmc->erase_grp_size - 1),
		       ((start + blkcnt + mmc->erase_grp_size)
		       & ~(mmc->erase_grp_size - 1)) - 1);

	while (blk < blkcnt) {
c7e115c8:	3affffbc 	bcc	c7e114c0 <mmc_berase+0x7c>
		if (mmc_send_status(mmc, timeout))
			return 0;
	}

	return blk;
}
c7e115cc:	e1a00005 	mov	r0, r5
c7e115d0:	e28dd028 	add	sp, sp, #40	; 0x28
c7e115d4:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e115d8:	c7e32d99 	.word	0xc7e32d99
c7e115dc:	c7e32df6 	.word	0xc7e32df6

c7e115e0 <mmc_bwrite>:
	return blkcnt;
}

static ulong
mmc_bwrite(int dev_num, ulong start, lbaint_t blkcnt, const void*src)
{
c7e115e0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e115e4:	e24dd030 	sub	sp, sp, #48	; 0x30
c7e115e8:	e1a06001 	mov	r6, r1
c7e115ec:	e1a09002 	mov	r9, r2
c7e115f0:	e1a0b003 	mov	fp, r3
	lbaint_t cur, blocks_todo = blkcnt;

	struct mmc *mmc = find_mmc_device(dev_num);
c7e115f4:	ebfffd56 	bl	c7e10b54 <find_mmc_device>
	if (!mmc)
c7e115f8:	e2504000 	subs	r4, r0, #0	; 0x0
c7e115fc:	0a00004f 	beq	c7e11740 <mmc_bwrite+0x160>
		return 0;

	if (mmc_set_blocklen(mmc, mmc->write_bl_len))
c7e11600:	e594108c 	ldr	r1, [r4, #140]
c7e11604:	ebffff25 	bl	c7e112a0 <mmc_set_blocklen>
c7e11608:	e3500000 	cmp	r0, #0	; 0x0
c7e1160c:	1a00004b 	bne	c7e11740 <mmc_bwrite+0x160>
c7e11610:	e1a07009 	mov	r7, r9
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
c7e11614:	e5943120 	ldr	r3, [r4, #288]
{
	struct mmc_cmd cmd;
	struct mmc_data data;
	int timeout = 1000;

	if ((start + blkcnt) > mmc->block_dev.lba) {
c7e11618:	e59420b0 	ldr	r2, [r4, #176]

	if (mmc_set_blocklen(mmc, mmc->write_bl_len))
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
c7e1161c:	e1570003 	cmp	r7, r3
c7e11620:	31a05007 	movcc	r5, r7
c7e11624:	21a05003 	movcs	r5, r3
{
	struct mmc_cmd cmd;
	struct mmc_data data;
	int timeout = 1000;

	if ((start + blkcnt) > mmc->block_dev.lba) {
c7e11628:	e085a006 	add	sl, r5, r6
c7e1162c:	e15a0002 	cmp	sl, r2
c7e11630:	9a000003 	bls	c7e11644 <mmc_bwrite+0x64>
		printf("MMC: block number 0x%lx exceeds max(0x%lx)\n",
c7e11634:	e1a0100a 	mov	r1, sl
c7e11638:	e59f0110 	ldr	r0, [pc, #272]	; c7e11750 <mmc_bwrite+0x170>
c7e1163c:	ebffdd05 	bl	c7e08a58 <printf>
c7e11640:	ea000036 	b	c7e11720 <mmc_bwrite+0x140>
			start + blkcnt, mmc->block_dev.lba);
		return 0;
	}

	if (blkcnt > 1)
c7e11644:	e3550001 	cmp	r5, #1	; 0x1
		cmd.cmdidx = MMC_CMD_WRITE_MULTIPLE_BLOCK;
c7e11648:	83a03019 	movhi	r3, #25	; 0x19
	else
		cmd.cmdidx = MMC_CMD_WRITE_SINGLE_BLOCK;
c7e1164c:	93a03018 	movls	r3, #24	; 0x18
c7e11650:	e1cd30b4 	strh	r3, [sp, #4]

	if (mmc->high_capacity)
c7e11654:	e5943040 	ldr	r3, [r4, #64]
	data.src = src;
	data.blocks = blkcnt;
	data.blocksize = mmc->write_bl_len;
	data.flags = MMC_DATA_WRITE;

	if (mmc_send_cmd(mmc, &cmd, &data)) {
c7e11658:	e1a00004 	mov	r0, r4
	if (blkcnt > 1)
		cmd.cmdidx = MMC_CMD_WRITE_MULTIPLE_BLOCK;
	else
		cmd.cmdidx = MMC_CMD_WRITE_SINGLE_BLOCK;

	if (mmc->high_capacity)
c7e1165c:	e3530000 	cmp	r3, #0	; 0x0
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->write_bl_len;
c7e11660:	0594308c 	ldreq	r3, [r4, #140]
		cmd.cmdidx = MMC_CMD_WRITE_MULTIPLE_BLOCK;
	else
		cmd.cmdidx = MMC_CMD_WRITE_SINGLE_BLOCK;

	if (mmc->high_capacity)
		cmd.cmdarg = start;
c7e11664:	158d600c 	strne	r6, [sp, #12]
	else
		cmd.cmdarg = start * mmc->write_bl_len;
c7e11668:	00030396 	muleq	r3, r6, r3
c7e1166c:	058d300c 	streq	r3, [sp, #12]

	cmd.resp_type = MMC_RSP_R1;
c7e11670:	e3a03015 	mov	r3, #21	; 0x15
c7e11674:	e58d3008 	str	r3, [sp, #8]

	data.src = src;
c7e11678:	e58db020 	str	fp, [sp, #32]
	data.blocks = blkcnt;
c7e1167c:	e58d5028 	str	r5, [sp, #40]
	data.blocksize = mmc->write_bl_len;
c7e11680:	e594308c 	ldr	r3, [r4, #140]
	data.flags = MMC_DATA_WRITE;

	if (mmc_send_cmd(mmc, &cmd, &data)) {
c7e11684:	e28d1004 	add	r1, sp, #4	; 0x4

	cmd.resp_type = MMC_RSP_R1;

	data.src = src;
	data.blocks = blkcnt;
	data.blocksize = mmc->write_bl_len;
c7e11688:	e58d302c 	str	r3, [sp, #44]
	data.flags = MMC_DATA_WRITE;

	if (mmc_send_cmd(mmc, &cmd, &data)) {
c7e1168c:	e28d2020 	add	r2, sp, #32	; 0x20
	cmd.resp_type = MMC_RSP_R1;

	data.src = src;
	data.blocks = blkcnt;
	data.blocksize = mmc->write_bl_len;
	data.flags = MMC_DATA_WRITE;
c7e11690:	e3a03002 	mov	r3, #2	; 0x2
c7e11694:	e58d3024 	str	r3, [sp, #36]

	if (mmc_send_cmd(mmc, &cmd, &data)) {
c7e11698:	ebfffd40 	bl	c7e10ba0 <mmc_send_cmd>
c7e1169c:	e2506000 	subs	r6, r0, #0	; 0x0
c7e116a0:	0a000002 	beq	c7e116b0 <mmc_bwrite+0xd0>
		printf("mmc write failed\n");
c7e116a4:	e59f00a8 	ldr	r0, [pc, #168]	; c7e11754 <mmc_bwrite+0x174>
c7e116a8:	ebffdcea 	bl	c7e08a58 <printf>
c7e116ac:	ea00001b 	b	c7e11720 <mmc_bwrite+0x140>
	}

	/* SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.
	 */
	if (!mmc_host_is_spi(mmc) && blkcnt > 1) {
c7e116b0:	e5943050 	ldr	r3, [r4, #80]
c7e116b4:	e1a03523 	lsr	r3, r3, #10
c7e116b8:	e2233001 	eor	r3, r3, #1	; 0x1
c7e116bc:	e3550001 	cmp	r5, #1	; 0x1
c7e116c0:	93a03000 	movls	r3, #0	; 0x0
c7e116c4:	82033001 	andhi	r3, r3, #1	; 0x1
c7e116c8:	e3530000 	cmp	r3, #0	; 0x0
c7e116cc:	0a00000e 	beq	c7e1170c <mmc_bwrite+0x12c>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
c7e116d0:	e3a0301d 	mov	r3, #29	; 0x1d
c7e116d4:	e58d3008 	str	r3, [sp, #8]
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
c7e116d8:	e28d1004 	add	r1, sp, #4	; 0x4

	/* SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.
	 */
	if (!mmc_host_is_spi(mmc) && blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
c7e116dc:	e3a0300c 	mov	r3, #12	; 0xc
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
c7e116e0:	e1a00004 	mov	r0, r4
c7e116e4:	e1a02006 	mov	r2, r6

	/* SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.
	 */
	if (!mmc_host_is_spi(mmc) && blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
c7e116e8:	e1cd30b4 	strh	r3, [sp, #4]
		cmd.cmdarg = 0;
c7e116ec:	e58d600c 	str	r6, [sp, #12]
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
c7e116f0:	ebfffd2a 	bl	c7e10ba0 <mmc_send_cmd>
c7e116f4:	e3500000 	cmp	r0, #0	; 0x0
c7e116f8:	0a000003 	beq	c7e1170c <mmc_bwrite+0x12c>
			printf("mmc fail to send stop cmd\n");
c7e116fc:	e59f0054 	ldr	r0, [pc, #84]	; c7e11758 <mmc_bwrite+0x178>
c7e11700:	e1a09006 	mov	r9, r6
c7e11704:	ebffdcd3 	bl	c7e08a58 <printf>
c7e11708:	ea00000d 	b	c7e11744 <mmc_bwrite+0x164>
			return 0;
		}
	}

	/* Waiting for the ready status */
	if (mmc_send_status(mmc, timeout))
c7e1170c:	e1a00004 	mov	r0, r4
c7e11710:	e3a01ffa 	mov	r1, #1000	; 0x3e8
c7e11714:	ebffff15 	bl	c7e11370 <mmc_send_status>
c7e11718:	e3500000 	cmp	r0, #0	; 0x0
c7e1171c:	0a000001 	beq	c7e11728 <mmc_bwrite+0x148>
	if (mmc_set_blocklen(mmc, mmc->write_bl_len))
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
		if(mmc_write_blocks(mmc, start, cur, src) != cur)
c7e11720:	e3550000 	cmp	r5, #0	; 0x0
c7e11724:	1a000005 	bne	c7e11740 <mmc_bwrite+0x160>
			return 0;
		blocks_todo -= cur;
		start += cur;
		src += cur * mmc->write_bl_len;
	} while (blocks_todo > 0);
c7e11728:	e0577005 	subs	r7, r7, r5
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
		if(mmc_write_blocks(mmc, start, cur, src) != cur)
			return 0;
		blocks_todo -= cur;
		start += cur;
		src += cur * mmc->write_bl_len;
c7e1172c:	e594308c 	ldr	r3, [r4, #140]
	} while (blocks_todo > 0);
c7e11730:	0a000003 	beq	c7e11744 <mmc_bwrite+0x164>
		cur = (blocks_todo > mmc->b_max) ?  mmc->b_max : blocks_todo;
		if(mmc_write_blocks(mmc, start, cur, src) != cur)
			return 0;
		blocks_todo -= cur;
		start += cur;
		src += cur * mmc->write_bl_len;
c7e11734:	e02bb593 	mla	fp, r3, r5, fp
c7e11738:	e1a0600a 	mov	r6, sl
c7e1173c:	eaffffb4 	b	c7e11614 <mmc_bwrite+0x34>
c7e11740:	e3a09000 	mov	r9, #0	; 0x0
	} while (blocks_todo > 0);

	return blkcnt;
}
c7e11744:	e1a00009 	mov	r0, r9
c7e11748:	e28dd030 	add	sp, sp, #48	; 0x30
c7e1174c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e11750:	c7e32d3b 	.word	0xc7e32d3b
c7e11754:	c7e32e08 	.word	0xc7e32e08
c7e11758:	c7e32d20 	.word	0xc7e32d20

c7e1175c <mmc_switch>:
	return err;
}


int mmc_switch(struct mmc *mmc, u8 set, u8 index, u8 value)
{
c7e1175c:	e92d4010 	push	{r4, lr}
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) |
c7e11760:	e1a0c802 	lsl	ip, r2, #16
c7e11764:	e38cc403 	orr	ip, ip, #50331648	; 0x3000000
	return err;
}


int mmc_switch(struct mmc *mmc, u8 set, u8 index, u8 value)
{
c7e11768:	e24dd020 	sub	sp, sp, #32	; 0x20
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) |
c7e1176c:	e18cc403 	orr	ip, ip, r3, lsl #8
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
c7e11770:	e3a0301d 	mov	r3, #29	; 0x1d
c7e11774:	e58d3008 	str	r3, [sp, #8]
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) |
				 (index << 16) |
				 (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);
c7e11778:	e28d1004 	add	r1, sp, #4	; 0x4
{
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
c7e1177c:	e3a03006 	mov	r3, #6	; 0x6
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) |
				 (index << 16) |
				 (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);
c7e11780:	e3a02000 	mov	r2, #0	; 0x0
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) |
c7e11784:	e58dc00c 	str	ip, [sp, #12]
{
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
c7e11788:	e1cd30b4 	strh	r3, [sp, #4]
	return err;
}


int mmc_switch(struct mmc *mmc, u8 set, u8 index, u8 value)
{
c7e1178c:	e1a04000 	mov	r4, r0
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) |
				 (index << 16) |
				 (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);
c7e11790:	ebfffd02 	bl	c7e10ba0 <mmc_send_cmd>

	/* Waiting for the ready status */
	if (!ret)
c7e11794:	e3500000 	cmp	r0, #0	; 0x0
c7e11798:	1a000002 	bne	c7e117a8 <mmc_switch+0x4c>
		ret = mmc_send_status(mmc, timeout);
c7e1179c:	e1a00004 	mov	r0, r4
c7e117a0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
c7e117a4:	ebfffef1 	bl	c7e11370 <mmc_send_status>

	return ret;

}
c7e117a8:	e28dd020 	add	sp, sp, #32	; 0x20
c7e117ac:	e8bd8010 	pop	{r4, pc}

c7e117b0 <mmc_switch_part>:

	return 0;
}

int mmc_switch_part(int dev_num, unsigned int part_num)
{
c7e117b0:	e92d4010 	push	{r4, lr}
c7e117b4:	e1a04001 	mov	r4, r1
	struct mmc *mmc = find_mmc_device(dev_num);
c7e117b8:	ebfffce5 	bl	c7e10b54 <find_mmc_device>

	if (!mmc)
c7e117bc:	e2503000 	subs	r3, r0, #0	; 0x0
c7e117c0:	1a000001 	bne	c7e117cc <mmc_switch_part+0x1c>
		return -1;

	return mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_PART_CONF,
			  (mmc->part_config & ~PART_ACCESS_MASK)
			  | (part_num & PART_ACCESS_MASK));
}
c7e117c4:	e3e00000 	mvn	r0, #0	; 0x0
c7e117c8:	e8bd8010 	pop	{r4, pc}
	struct mmc *mmc = find_mmc_device(dev_num);

	if (!mmc)
		return -1;

	return mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_PART_CONF,
c7e117cc:	e5d33082 	ldrb	r3, [r3, #130]
c7e117d0:	e2042007 	and	r2, r4, #7	; 0x7
c7e117d4:	e3c33007 	bic	r3, r3, #7	; 0x7
c7e117d8:	e1823003 	orr	r3, r2, r3
c7e117dc:	e3a01001 	mov	r1, #1	; 0x1
c7e117e0:	e3a020b3 	mov	r2, #179	; 0xb3
			  (mmc->part_config & ~PART_ACCESS_MASK)
			  | (part_num & PART_ACCESS_MASK));
}
c7e117e4:	e8bd4010 	pop	{r4, lr}
	struct mmc *mmc = find_mmc_device(dev_num);

	if (!mmc)
		return -1;

	return mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_PART_CONF,
c7e117e8:	eaffffdb 	b	c7e1175c <mmc_switch>

c7e117ec <mmc_change_freq>:
	return ret;

}

int mmc_change_freq(struct mmc *mmc)
{
c7e117ec:	e92d4070 	push	{r4, r5, r6, lr}
	char cardtype;
	int err;

	mmc->card_caps = 0;

	if (mmc_host_is_spi(mmc))
c7e117f0:	e5903050 	ldr	r3, [r0, #80]
	return ret;

}

int mmc_change_freq(struct mmc *mmc)
{
c7e117f4:	e24ddd09 	sub	sp, sp, #576	; 0x240
	char cardtype;
	int err;

	mmc->card_caps = 0;

	if (mmc_host_is_spi(mmc))
c7e117f8:	e3130b01 	tst	r3, #1024	; 0x400
{
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
	char cardtype;
	int err;

	mmc->card_caps = 0;
c7e117fc:	e3a03000 	mov	r3, #0	; 0x0
	return ret;

}

int mmc_change_freq(struct mmc *mmc)
{
c7e11800:	e1a04000 	mov	r4, r0
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
	char cardtype;
	int err;

	mmc->card_caps = 0;
c7e11804:	e580304c 	str	r3, [r0, #76]

	if (mmc_host_is_spi(mmc))
c7e11808:	1a00001f 	bne	c7e1188c <mmc_change_freq+0xa0>
		return 0;

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
c7e1180c:	e5902030 	ldr	r2, [r0, #48]
c7e11810:	e59f3080 	ldr	r3, [pc, #128]	; c7e11898 <mmc_change_freq+0xac>
c7e11814:	e1520003 	cmp	r2, r3
c7e11818:	9a00001b 	bls	c7e1188c <mmc_change_freq+0xa0>

}

int mmc_change_freq(struct mmc *mmc)
{
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
c7e1181c:	e28d3040 	add	r3, sp, #64	; 0x40
c7e11820:	e3c3503f 	bic	r5, r3, #63	; 0x3f

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
		return 0;

	err = mmc_send_ext_csd(mmc, ext_csd);
c7e11824:	e1a01005 	mov	r1, r5
c7e11828:	ebfffd9b 	bl	c7e10e9c <mmc_send_ext_csd>

	if (err)
c7e1182c:	e3500000 	cmp	r0, #0	; 0x0
c7e11830:	1a000016 	bne	c7e11890 <mmc_change_freq+0xa4>
		return err;

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);
c7e11834:	e3a01001 	mov	r1, #1	; 0x1
c7e11838:	e1a00004 	mov	r0, r4
c7e1183c:	e3a020b9 	mov	r2, #185	; 0xb9
c7e11840:	e1a03001 	mov	r3, r1
	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
		return err;

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;
c7e11844:	e5d560c4 	ldrb	r6, [r5, #196]

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);
c7e11848:	ebffffc3 	bl	c7e1175c <mmc_switch>

	if (err)
c7e1184c:	e3500000 	cmp	r0, #0	; 0x0
c7e11850:	1a00000e 	bne	c7e11890 <mmc_change_freq+0xa4>
		return err;

	/* Now check to see that it worked */
	err = mmc_send_ext_csd(mmc, ext_csd);
c7e11854:	e1a00004 	mov	r0, r4
c7e11858:	e1a01005 	mov	r1, r5
c7e1185c:	ebfffd8e 	bl	c7e10e9c <mmc_send_ext_csd>

	if (err)
c7e11860:	e3500000 	cmp	r0, #0	; 0x0
c7e11864:	1a000009 	bne	c7e11890 <mmc_change_freq+0xa4>
		return err;

	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
c7e11868:	e5d530b9 	ldrb	r3, [r5, #185]
c7e1186c:	e3530000 	cmp	r3, #0	; 0x0
c7e11870:	0a000006 	beq	c7e11890 <mmc_change_freq+0xa4>
c7e11874:	e594304c 	ldr	r3, [r4, #76]
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
c7e11878:	e3160002 	tst	r6, #2	; 0x2
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
c7e1187c:	13833011 	orrne	r3, r3, #17	; 0x11
	else
		mmc->card_caps |= MMC_MODE_HS;
c7e11880:	03833001 	orreq	r3, r3, #1	; 0x1
c7e11884:	e584304c 	str	r3, [r4, #76]
c7e11888:	ea000000 	b	c7e11890 <mmc_change_freq+0xa4>
c7e1188c:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e11890:	e28ddd09 	add	sp, sp, #576	; 0x240
c7e11894:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e11898:	0001003f 	.word	0x0001003f

c7e1189c <mmc_startup>:

	mmc_set_ios(mmc);
}

int mmc_startup(struct mmc *mmc)
{
c7e1189c:	e92d4cf0 	push	{r4, r5, r6, r7, sl, fp, lr}
			return err;
	}
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
c7e118a0:	e5903050 	ldr	r3, [r0, #80]

	mmc_set_ios(mmc);
}

int mmc_startup(struct mmc *mmc)
{
c7e118a4:	e24ddd13 	sub	sp, sp, #1216	; 0x4c0
c7e118a8:	e24dd004 	sub	sp, sp, #4	; 0x4
			return err;
	}
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
c7e118ac:	e3130b01 	tst	r3, #1024	; 0x400
		MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e118b0:	e28d5e49 	add	r5, sp, #1168	; 0x490
			return err;
	}
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
c7e118b4:	13a0300a 	movne	r3, #10	; 0xa
c7e118b8:	03a03002 	moveq	r3, #2	; 0x2
		MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = 0;
c7e118bc:	e3a0e000 	mov	lr, #0	; 0x0
			return err;
	}
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
c7e118c0:	e28d4b01 	add	r4, sp, #1024	; 0x400
	int err, width;
	uint mult, freq;
	u64 cmult, csize, capacity;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
	ALLOC_CACHE_ALIGN_BUFFER(u8, test_csd, 512);
c7e118c4:	e28dc060 	add	ip, sp, #96	; 0x60
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
		MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e118c8:	e285500c 	add	r5, r5, #12	; 0xc
			return err;
	}
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
c7e118cc:	e1c439bc 	strh	r3, [r4, #156]
	int err, width;
	uint mult, freq;
	u64 cmult, csize, capacity;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
	ALLOC_CACHE_ALIGN_BUFFER(u8, test_csd, 512);
c7e118d0:	e24cc003 	sub	ip, ip, #3	; 0x3
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
		MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
c7e118d4:	e3a03007 	mov	r3, #7	; 0x7
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e118d8:	e1a0200e 	mov	r2, lr
c7e118dc:	e1a01005 	mov	r1, r5

	mmc_set_ios(mmc);
}

int mmc_startup(struct mmc *mmc)
{
c7e118e0:	e1a06000 	mov	r6, r0
#endif

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
		MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
c7e118e4:	e58d34a0 	str	r3, [sp, #1184]
	int err, width;
	uint mult, freq;
	u64 cmult, csize, capacity;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
	ALLOC_CACHE_ALIGN_BUFFER(u8, test_csd, 512);
c7e118e8:	e3cc703f 	bic	r7, ip, #63	; 0x3f

	/* Put the Card in Identify Mode */
	cmd.cmdidx = mmc_host_is_spi(mmc) ? MMC_CMD_SEND_CID :
		MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = 0;
c7e118ec:	e58de4a4 	str	lr, [sp, #1188]

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e118f0:	ebfffcaa 	bl	c7e10ba0 <mmc_send_cmd>

	if (err)
c7e118f4:	e2504000 	subs	r4, r0, #0	; 0x0
c7e118f8:	1a000189 	bne	c7e11f24 <mmc_startup+0x688>
		return err;

	memcpy(mmc->cid, cmd.response, 16);
c7e118fc:	e3a02010 	mov	r2, #16	; 0x10
c7e11900:	e2860070 	add	r0, r6, #112	; 0x70
c7e11904:	e285100c 	add	r1, r5, #12	; 0xc
c7e11908:	eb0044cb 	bl	c7e22c3c <memcpy>
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
c7e1190c:	e5963050 	ldr	r3, [r6, #80]
c7e11910:	e2132b01 	ands	r2, r3, #1024	; 0x400
c7e11914:	1a000011 	bne	c7e11960 <mmc_startup+0xc4>
		cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
		cmd.cmdarg = mmc->rca << 16;
c7e11918:	e1d638b0 	ldrh	r3, [r6, #128]
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
c7e1191c:	e3a0c003 	mov	ip, #3	; 0x3
		cmd.cmdarg = mmc->rca << 16;
c7e11920:	e1a03803 	lsl	r3, r3, #16
c7e11924:	e58d34a4 	str	r3, [sp, #1188]
		cmd.resp_type = MMC_RSP_R6;
c7e11928:	e3a03015 	mov	r3, #21	; 0x15
c7e1192c:	e58d34a0 	str	r3, [sp, #1184]
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
c7e11930:	e28d3b01 	add	r3, sp, #1024	; 0x400
		cmd.cmdarg = mmc->rca << 16;
		cmd.resp_type = MMC_RSP_R6;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11934:	e1a01005 	mov	r1, r5
c7e11938:	e1a00006 	mov	r0, r6
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
c7e1193c:	e1c3c9bc 	strh	ip, [r3, #156]
		cmd.cmdarg = mmc->rca << 16;
		cmd.resp_type = MMC_RSP_R6;

		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11940:	ebfffc96 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e11944:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11948:	1a000175 	bne	c7e11f24 <mmc_startup+0x688>
			return err;

		if (IS_SD(mmc))
c7e1194c:	e5963030 	ldr	r3, [r6, #48]
c7e11950:	e3130802 	tst	r3, #131072	; 0x20000
			mmc->rca = (cmd.response[0] >> 16) & 0xffff;
c7e11954:	128d4b01 	addne	r4, sp, #1024	; 0x400
c7e11958:	11d44aba 	ldrhne	r4, [r4, #170]
c7e1195c:	11c648b0 	strhne	r4, [r6, #128]
	}

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = mmc->rca << 16;
c7e11960:	e1d6c8b0 	ldrh	ip, [r6, #128]
			mmc->rca = (cmd.response[0] >> 16) & 0xffff;
	}

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
	cmd.resp_type = MMC_RSP_R2;
c7e11964:	e3a03007 	mov	r3, #7	; 0x7
	cmd.cmdarg = mmc->rca << 16;
c7e11968:	e1a0c80c 	lsl	ip, ip, #16
			mmc->rca = (cmd.response[0] >> 16) & 0xffff;
	}

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
	cmd.resp_type = MMC_RSP_R2;
c7e1196c:	e58d34a0 	str	r3, [sp, #1184]
	cmd.cmdarg = mmc->rca << 16;
c7e11970:	e58dc4a4 	str	ip, [sp, #1188]
		if (IS_SD(mmc))
			mmc->rca = (cmd.response[0] >> 16) & 0xffff;
	}

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
c7e11974:	e28d3b01 	add	r3, sp, #1024	; 0x400
c7e11978:	e3a0c009 	mov	ip, #9	; 0x9
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e1197c:	e28d1e49 	add	r1, sp, #1168	; 0x490
c7e11980:	e281100c 	add	r1, r1, #12	; 0xc
c7e11984:	e3a02000 	mov	r2, #0	; 0x0
		if (IS_SD(mmc))
			mmc->rca = (cmd.response[0] >> 16) & 0xffff;
	}

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
c7e11988:	e1c3c9bc 	strh	ip, [r3, #156]
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e1198c:	e1a00006 	mov	r0, r6
c7e11990:	ebfffc82 	bl	c7e10ba0 <mmc_send_cmd>

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
c7e11994:	e3a01ffa 	mov	r1, #1000	; 0x3e8
	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11998:	e1a04000 	mov	r4, r0

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
c7e1199c:	e1a00006 	mov	r0, r6
c7e119a0:	ebfffe72 	bl	c7e11370 <mmc_send_status>

	if (err)
c7e119a4:	e3540000 	cmp	r4, #0	; 0x0
c7e119a8:	1a00015d 	bne	c7e11f24 <mmc_startup+0x688>
	mmc->csd[0] = cmd.response[0];
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
c7e119ac:	e5963030 	ldr	r3, [r6, #48]
	mmc_send_status(mmc, timeout);

	if (err)
		return err;

	mmc->csd[0] = cmd.response[0];
c7e119b0:	e59d04a8 	ldr	r0, [sp, #1192]
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
c7e119b4:	e59d24b0 	ldr	r2, [sp, #1200]
	mmc->csd[3] = cmd.response[3];
c7e119b8:	e59d14b4 	ldr	r1, [sp, #1204]

	if (mmc->version == MMC_VERSION_UNKNOWN) {
c7e119bc:	e3530801 	cmp	r3, #65536	; 0x10000

	if (err)
		return err;

	mmc->csd[0] = cmd.response[0];
	mmc->csd[1] = cmd.response[1];
c7e119c0:	e59d34ac 	ldr	r3, [sp, #1196]
	mmc->csd[2] = cmd.response[2];
c7e119c4:	e5862068 	str	r2, [r6, #104]

	if (err)
		return err;

	mmc->csd[0] = cmd.response[0];
	mmc->csd[1] = cmd.response[1];
c7e119c8:	e5863064 	str	r3, [r6, #100]
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];
c7e119cc:	e586106c 	str	r1, [r6, #108]
	mmc_send_status(mmc, timeout);

	if (err)
		return err;

	mmc->csd[0] = cmd.response[0];
c7e119d0:	e5860060 	str	r0, [r6, #96]
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
c7e119d4:	1a000013 	bne	c7e11a28 <mmc_startup+0x18c>
		int version = (cmd.response[0] >> 26) & 0xf;

		switch (version) {
c7e119d8:	e1a03d20 	lsr	r3, r0, #26
c7e119dc:	e203300f 	and	r3, r3, #15	; 0xf
c7e119e0:	e3530004 	cmp	r3, #4	; 0x4
c7e119e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e119e8:	ea00000c 	b	c7e11a20 <mmc_startup+0x184>
c7e119ec:	c7e11a20 	.word	0xc7e11a20
c7e119f0:	c7e11a00 	.word	0xc7e11a00
c7e119f4:	c7e11a08 	.word	0xc7e11a08
c7e119f8:	c7e11a10 	.word	0xc7e11a10
c7e119fc:	c7e11a18 	.word	0xc7e11a18
			case 0:
				mmc->version = MMC_VERSION_1_2;
				break;
			case 1:
				mmc->version = MMC_VERSION_1_4;
c7e11a00:	e59f352c 	ldr	r3, [pc, #1324]	; c7e11f34 <mmc_startup+0x698>
c7e11a04:	ea000006 	b	c7e11a24 <mmc_startup+0x188>
				break;
			case 2:
				mmc->version = MMC_VERSION_2_2;
c7e11a08:	e59f3528 	ldr	r3, [pc, #1320]	; c7e11f38 <mmc_startup+0x69c>
c7e11a0c:	ea000004 	b	c7e11a24 <mmc_startup+0x188>
				break;
			case 3:
				mmc->version = MMC_VERSION_3;
c7e11a10:	e59f3524 	ldr	r3, [pc, #1316]	; c7e11f3c <mmc_startup+0x6a0>
c7e11a14:	ea000002 	b	c7e11a24 <mmc_startup+0x188>
				break;
			case 4:
				mmc->version = MMC_VERSION_4;
c7e11a18:	e59f3520 	ldr	r3, [pc, #1312]	; c7e11f40 <mmc_startup+0x6a4>
c7e11a1c:	ea000000 	b	c7e11a24 <mmc_startup+0x188>
				break;
			default:
				mmc->version = MMC_VERSION_1_2;
c7e11a20:	e59f351c 	ldr	r3, [pc, #1308]	; c7e11f44 <mmc_startup+0x6a8>
c7e11a24:	e5863030 	str	r3, [r6, #48]
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
c7e11a28:	e28d4b01 	add	r4, sp, #1024	; 0x400
c7e11a2c:	e1d43abe 	ldrh	r3, [r4, #174]
c7e11a30:	e3a0c001 	mov	ip, #1	; 0x1
c7e11a34:	e203300f 	and	r3, r3, #15	; 0xf
c7e11a38:	e1a0031c 	lsl	r0, ip, r3
				break;
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
c7e11a3c:	e59d34a8 	ldr	r3, [sp, #1192]
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
c7e11a40:	e59f1500 	ldr	r1, [pc, #1280]	; c7e11f48 <mmc_startup+0x6ac>
c7e11a44:	e2032007 	and	r2, r3, #7	; 0x7
c7e11a48:	e1a031a3 	lsr	r3, r3, #3
c7e11a4c:	e0812102 	add	r2, r1, r2, lsl #2
c7e11a50:	e203300f 	and	r3, r3, #15	; 0xf
c7e11a54:	e7911103 	ldr	r1, [r1, r3, lsl #2]
c7e11a58:	e5923040 	ldr	r3, [r2, #64]

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);

	if (IS_SD(mmc))
c7e11a5c:	e5962030 	ldr	r2, [r6, #48]

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
c7e11a60:	e0030391 	mul	r3, r1, r3

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);

	if (IS_SD(mmc))
c7e11a64:	e3120802 	tst	r2, #131072	; 0x20000

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
c7e11a68:	e5863084 	str	r3, [r6, #132]

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
c7e11a6c:	e5860088 	str	r0, [r6, #136]

	if (IS_SD(mmc))
		mmc->write_bl_len = mmc->read_bl_len;
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
c7e11a70:	059d34b4 	ldreq	r3, [sp, #1204]
	mmc->tran_speed = freq * mult;

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);

	if (IS_SD(mmc))
		mmc->write_bl_len = mmc->read_bl_len;
c7e11a74:	1586008c 	strne	r0, [r6, #140]
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
c7e11a78:	01a03b23 	lsreq	r3, r3, #22
c7e11a7c:	0203300f 	andeq	r3, r3, #15	; 0xf
c7e11a80:	01a0331c 	lsleq	r3, ip, r3
c7e11a84:	0586308c 	streq	r3, [r6, #140]

	if (mmc->high_capacity) {
c7e11a88:	e5963040 	ldr	r3, [r6, #64]
c7e11a8c:	e5962064 	ldr	r2, [r6, #100]
c7e11a90:	e3530000 	cmp	r3, #0	; 0x0
c7e11a94:	e5960068 	ldr	r0, [r6, #104]
c7e11a98:	0a000009 	beq	c7e11ac4 <mmc_startup+0x228>
		csize = (mmc->csd[1] & 0x3f) << 16
c7e11a9c:	e202203f 	and	r2, r2, #63	; 0x3f
c7e11aa0:	e1a03820 	lsr	r3, r0, #16
c7e11aa4:	e1833802 	orr	r3, r3, r2, lsl #16
c7e11aa8:	e1a01003 	mov	r1, r3
c7e11aac:	e3a02000 	mov	r2, #0	; 0x0
c7e11ab0:	e58d1010 	str	r1, [sp, #16]
c7e11ab4:	e58d2014 	str	r2, [sp, #20]
c7e11ab8:	e3a0a008 	mov	sl, #8	; 0x8
c7e11abc:	e3a0b000 	mov	fp, #0	; 0x0
c7e11ac0:	ea00000b 	b	c7e11af4 <mmc_startup+0x258>
			| (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2
c7e11ac4:	e1a03b02 	lsl	r3, r2, #22
c7e11ac8:	e1a03b23 	lsr	r3, r3, #22
c7e11acc:	e1a02f20 	lsr	r2, r0, #30
c7e11ad0:	e1822103 	orr	r2, r2, r3, lsl #2
c7e11ad4:	e1a03002 	mov	r3, r2
c7e11ad8:	e3a04000 	mov	r4, #0	; 0x0
			| (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
c7e11adc:	e200190e 	and	r1, r0, #229376	; 0x38000
	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16
			| (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2
c7e11ae0:	e58d3010 	str	r3, [sp, #16]
c7e11ae4:	e58d4014 	str	r4, [sp, #20]
			| (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
c7e11ae8:	e1a017a1 	lsr	r1, r1, #15
c7e11aec:	e1a0a001 	mov	sl, r1
c7e11af0:	e3a0b000 	mov	fp, #0	; 0x0
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
c7e11af4:	e3a03001 	mov	r3, #1	; 0x1
c7e11af8:	e3a04000 	mov	r4, #0	; 0x0
c7e11afc:	e28d1010 	add	r1, sp, #16	; 0x10
c7e11b00:	e8910003 	ldm	r1, {r0, r1}
c7e11b04:	e0900003 	adds	r0, r0, r3
c7e11b08:	e0a11004 	adc	r1, r1, r4
c7e11b0c:	e28a2002 	add	r2, sl, #2	; 0x2
c7e11b10:	eb006321 	bl	c7e2a79c <__ashldi3>
	mmc->capacity *= mmc->read_bl_len;
c7e11b14:	e5962088 	ldr	r2, [r6, #136]
c7e11b18:	e0843290 	umull	r3, r4, r0, r2
c7e11b1c:	e0244192 	mla	r4, r2, r1, r4

	if (mmc->read_bl_len > 512)
c7e11b20:	e3520c02 	cmp	r2, #512	; 0x200
			| (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
	mmc->capacity *= mmc->read_bl_len;
c7e11b24:	e5863098 	str	r3, [r6, #152]
c7e11b28:	e586409c 	str	r4, [r6, #156]

	if (mmc->read_bl_len > 512)
		mmc->read_bl_len = 512;
c7e11b2c:	83a03c02 	movhi	r3, #512	; 0x200
c7e11b30:	85863088 	strhi	r3, [r6, #136]

	if (mmc->write_bl_len > 512)
c7e11b34:	e596308c 	ldr	r3, [r6, #140]
c7e11b38:	e3530c02 	cmp	r3, #512	; 0x200
		mmc->write_bl_len = 512;
c7e11b3c:	83a03c02 	movhi	r3, #512	; 0x200
c7e11b40:	8586308c 	strhi	r3, [r6, #140]

	/* Select the card, and put it into Transfer Mode */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
c7e11b44:	e5963050 	ldr	r3, [r6, #80]
c7e11b48:	e2132b01 	ands	r2, r3, #1024	; 0x400
c7e11b4c:	1a00000d 	bne	c7e11b88 <mmc_startup+0x2ec>
		cmd.cmdidx = MMC_CMD_SELECT_CARD;
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = mmc->rca << 16;
c7e11b50:	e1d6c8b0 	ldrh	ip, [r6, #128]
	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = MMC_CMD_SELECT_CARD;
c7e11b54:	e3a04007 	mov	r4, #7	; 0x7
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = mmc->rca << 16;
c7e11b58:	e1a0c80c 	lsl	ip, ip, #16
c7e11b5c:	e58dc4a4 	str	ip, [sp, #1188]
		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11b60:	e28d1e49 	add	r1, sp, #1168	; 0x490
	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = MMC_CMD_SELECT_CARD;
c7e11b64:	e28dcb01 	add	ip, sp, #1024	; 0x400
		cmd.resp_type = MMC_RSP_R1;
c7e11b68:	e3a03015 	mov	r3, #21	; 0x15
	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = MMC_CMD_SELECT_CARD;
c7e11b6c:	e1cc49bc 	strh	r4, [ip, #156]
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = mmc->rca << 16;
		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11b70:	e1a00006 	mov	r0, r6
c7e11b74:	e281100c 	add	r1, r1, #12	; 0xc
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	if (!mmc_host_is_spi(mmc)) { /* cmd not supported in spi */
		cmd.cmdidx = MMC_CMD_SELECT_CARD;
		cmd.resp_type = MMC_RSP_R1;
c7e11b78:	e58d34a0 	str	r3, [sp, #1184]
		cmd.cmdarg = mmc->rca << 16;
		err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11b7c:	ebfffc07 	bl	c7e10ba0 <mmc_send_cmd>

		if (err)
c7e11b80:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11b84:	1a0000e6 	bne	c7e11f24 <mmc_startup+0x688>
	}

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
c7e11b88:	e3a03001 	mov	r3, #1	; 0x1
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
c7e11b8c:	e5962030 	ldr	r2, [r6, #48]
	}

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
c7e11b90:	e5863090 	str	r3, [r6, #144]
	mmc->part_config = MMCPART_NOAVAILABLE;
c7e11b94:	e3e03000 	mvn	r3, #0	; 0x0
c7e11b98:	e5c63082 	strb	r3, [r6, #130]
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
c7e11b9c:	e3120802 	tst	r2, #131072	; 0x20000
{
	int err, width;
	uint mult, freq;
	u64 cmult, csize, capacity;
	struct mmc_cmd cmd;
	ALLOC_CACHE_ALIGN_BUFFER(u8, ext_csd, 512);
c7e11ba0:	e28d3fa7 	add	r3, sp, #668	; 0x29c
c7e11ba4:	e3c3503f 	bic	r5, r3, #63	; 0x3f
	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
c7e11ba8:	1a000035 	bne	c7e11c84 <mmc_startup+0x3e8>
c7e11bac:	e59f3398 	ldr	r3, [pc, #920]	; c7e11f4c <mmc_startup+0x6b0>
c7e11bb0:	e1520003 	cmp	r2, r3
c7e11bb4:	9a000032 	bls	c7e11c84 <mmc_startup+0x3e8>
		/* check  ext_csd version and capacity */
		err = mmc_send_ext_csd(mmc, ext_csd);
c7e11bb8:	e1a01005 	mov	r1, r5
c7e11bbc:	e1a00006 	mov	r0, r6
c7e11bc0:	ebfffcb5 	bl	c7e10e9c <mmc_send_ext_csd>
		if (!err & (ext_csd[EXT_CSD_REV] >= 2)) {
c7e11bc4:	e5d530c0 	ldrb	r3, [r5, #192]
c7e11bc8:	e2701001 	rsbs	r1, r0, #1	; 0x1
c7e11bcc:	33a01000 	movcc	r1, #0	; 0x0
c7e11bd0:	e3530001 	cmp	r3, #1	; 0x1
c7e11bd4:	93a01000 	movls	r1, #0	; 0x0
c7e11bd8:	e3510000 	cmp	r1, #0	; 0x0
c7e11bdc:	0a000013 	beq	c7e11c30 <mmc_startup+0x394>
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
c7e11be0:	e5d530d6 	ldrb	r3, [r5, #214]
c7e11be4:	e5d520d5 	ldrb	r2, [r5, #213]
c7e11be8:	e1a03803 	lsl	r3, r3, #16
c7e11bec:	e5d510d4 	ldrb	r1, [r5, #212]
c7e11bf0:	e1833402 	orr	r3, r3, r2, lsl #8
c7e11bf4:	e5d520d7 	ldrb	r2, [r5, #215]
c7e11bf8:	e1833001 	orr	r3, r3, r1
c7e11bfc:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e11c00:	e1a04fc3 	asr	r4, r3, #31
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
			capacity *= 512;
c7e11c04:	e1a04484 	lsl	r4, r4, #9
c7e11c08:	e1844ba3 	orr	r4, r4, r3, lsr #23
c7e11c0c:	e1a03483 	lsl	r3, r3, #9
			if ((capacity >> 20) > 2 * 1024)
c7e11c10:	e1b02a24 	lsrs	r2, r4, #20
c7e11c14:	e1a02a23 	lsr	r2, r3, #20
c7e11c18:	e1822604 	orr	r2, r2, r4, lsl #12
c7e11c1c:	1a000001 	bne	c7e11c28 <mmc_startup+0x38c>
c7e11c20:	e3520b02 	cmp	r2, #2048	; 0x800
c7e11c24:	9a000001 	bls	c7e11c30 <mmc_startup+0x394>
				mmc->capacity = capacity;
c7e11c28:	e5863098 	str	r3, [r6, #152]
c7e11c2c:	e586409c 	str	r4, [r6, #156]
		/*
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
c7e11c30:	e5d530af 	ldrb	r3, [r5, #175]
c7e11c34:	e3530000 	cmp	r3, #0	; 0x0
			mmc->erase_grp_size =
			      ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512 * 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
c7e11c38:	05963068 	ldreq	r3, [r6, #104]
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size =
c7e11c3c:	15d530e0 	ldrbne	r3, [r5, #224]
			      ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512 * 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
			mmc->erase_grp_size = (erase_gsz + 1)
c7e11c40:	02032b1f 	andeq	r2, r3, #31744	; 0x7c00
c7e11c44:	02033e3e 	andeq	r3, r3, #992	; 0x3e0
c7e11c48:	01a032a3 	lsreq	r3, r3, #5
c7e11c4c:	01a02522 	lsreq	r2, r2, #10
c7e11c50:	02833001 	addeq	r3, r3, #1	; 0x1
c7e11c54:	02822001 	addeq	r2, r2, #1	; 0x1
c7e11c58:	00030392 	muleq	r3, r2, r3
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size =
c7e11c5c:	11a03983 	lslne	r3, r3, #19
			      ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512 * 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
			mmc->erase_grp_size = (erase_gsz + 1)
c7e11c60:	e5863090 	str	r3, [r6, #144]
				* (erase_gmul + 1);
		}

		/* store the partition info of emmc */
		if ((ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & PART_SUPPORT) ||
c7e11c64:	e5d530a0 	ldrb	r3, [r5, #160]
c7e11c68:	e3130001 	tst	r3, #1	; 0x1
c7e11c6c:	1a000002 	bne	c7e11c7c <mmc_startup+0x3e0>
c7e11c70:	e5d530e2 	ldrb	r3, [r5, #226]
c7e11c74:	e3530000 	cmp	r3, #0	; 0x0
c7e11c78:	0a000001 	beq	c7e11c84 <mmc_startup+0x3e8>
		    ext_csd[EXT_CSD_BOOT_MULT])
			mmc->part_config = ext_csd[EXT_CSD_PART_CONF];
c7e11c7c:	e5d530b3 	ldrb	r3, [r5, #179]
c7e11c80:	e5c63082 	strb	r3, [r6, #130]
	}

	if (IS_SD(mmc))
c7e11c84:	e5963030 	ldr	r3, [r6, #48]
c7e11c88:	e3130802 	tst	r3, #131072	; 0x20000
c7e11c8c:	0a000002 	beq	c7e11c9c <mmc_startup+0x400>
		err = sd_change_freq(mmc);
c7e11c90:	e1a00006 	mov	r0, r6
c7e11c94:	ebfffc06 	bl	c7e10cb4 <sd_change_freq>
c7e11c98:	ea000001 	b	c7e11ca4 <mmc_startup+0x408>
	else
		err = mmc_change_freq(mmc);
c7e11c9c:	e1a00006 	mov	r0, r6
c7e11ca0:	ebfffed1 	bl	c7e117ec <mmc_change_freq>

	if (err)
c7e11ca4:	e3500000 	cmp	r0, #0	; 0x0
	}

	if (IS_SD(mmc))
		err = sd_change_freq(mmc);
	else
		err = mmc_change_freq(mmc);
c7e11ca8:	e1a0a000 	mov	sl, r0

	if (err)
c7e11cac:	11a04000 	movne	r4, r0
c7e11cb0:	1a00009b 	bne	c7e11f24 <mmc_startup+0x688>
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
c7e11cb4:	e5963030 	ldr	r3, [r6, #48]

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
c7e11cb8:	e5961050 	ldr	r1, [r6, #80]

	if (IS_SD(mmc)) {
c7e11cbc:	e3130802 	tst	r3, #131072	; 0x20000

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
c7e11cc0:	e596204c 	ldr	r2, [r6, #76]
		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
c7e11cc4:	02013c03 	andeq	r3, r1, #768	; 0x300

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
c7e11cc8:	e0012002 	and	r2, r1, r2
		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
c7e11ccc:	01a04423 	lsreq	r4, r3, #8

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
c7e11cd0:	e586204c 	str	r2, [r6, #76]
		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
c7e11cd4:	01a0a104 	lsleq	sl, r4, #2
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
c7e11cd8:	0a000025 	beq	c7e11d74 <mmc_startup+0x4d8>
		if (mmc->card_caps & MMC_MODE_4BIT) {
c7e11cdc:	e3120c01 	tst	r2, #256	; 0x100
c7e11ce0:	0a00001e 	beq	c7e11d60 <mmc_startup+0x4c4>
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;
c7e11ce4:	e1d638b0 	ldrh	r3, [r6, #128]

			err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11ce8:	e28d5e49 	add	r5, sp, #1168	; 0x490

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;
c7e11cec:	e1a03803 	lsl	r3, r3, #16
c7e11cf0:	e58d34a4 	str	r3, [sp, #1188]
	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
c7e11cf4:	e28d4b01 	add	r4, sp, #1024	; 0x400
c7e11cf8:	e3a03037 	mov	r3, #55	; 0x37
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;

			err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11cfc:	e285500c 	add	r5, r5, #12	; 0xc
	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
c7e11d00:	e1c439bc 	strh	r3, [r4, #156]
			cmd.resp_type = MMC_RSP_R1;
c7e11d04:	e3a0b015 	mov	fp, #21	; 0x15
			cmd.cmdarg = mmc->rca << 16;

			err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11d08:	e1a00006 	mov	r0, r6
c7e11d0c:	e1a01005 	mov	r1, r5
c7e11d10:	e1a0200a 	mov	r2, sl
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
c7e11d14:	e58db4a0 	str	fp, [sp, #1184]
			cmd.cmdarg = mmc->rca << 16;

			err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11d18:	ebfffba0 	bl	c7e10ba0 <mmc_send_cmd>
			if (err)
c7e11d1c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11d20:	1a00007f 	bne	c7e11f24 <mmc_startup+0x688>
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = 2;
c7e11d24:	e3a03002 	mov	r3, #2	; 0x2
c7e11d28:	e58d34a4 	str	r3, [sp, #1188]

			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
c7e11d2c:	e3a0c006 	mov	ip, #6	; 0x6
c7e11d30:	e28d3b01 	add	r3, sp, #1024	; 0x400
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = 2;
			err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11d34:	e1a01005 	mov	r1, r5
c7e11d38:	e1a0200a 	mov	r2, sl
c7e11d3c:	e1a00006 	mov	r0, r6

			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
c7e11d40:	e1c3c9bc 	strh	ip, [r3, #156]
			cmd.resp_type = MMC_RSP_R1;
c7e11d44:	e58db4a0 	str	fp, [sp, #1184]
			cmd.cmdarg = 2;
			err = mmc_send_cmd(mmc, &cmd, NULL);
c7e11d48:	ebfffb94 	bl	c7e10ba0 <mmc_send_cmd>
			if (err)
c7e11d4c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e11d50:	1a000073 	bne	c7e11f24 <mmc_startup+0x688>
				return err;

			mmc_set_bus_width(mmc, 4);
c7e11d54:	e1a00006 	mov	r0, r6
c7e11d58:	e3a01004 	mov	r1, #4	; 0x4
c7e11d5c:	ebfffb22 	bl	c7e109ec <mmc_set_bus_width>
		}

		if (mmc->card_caps & MMC_MODE_HS)
c7e11d60:	e596304c 	ldr	r3, [r6, #76]
c7e11d64:	e3130001 	tst	r3, #1	; 0x1
			mmc->tran_speed = 50000000;
c7e11d68:	159f31e0 	ldrne	r3, [pc, #480]	; c7e11f50 <mmc_startup+0x6b4>
		else
			mmc->tran_speed = 25000000;
c7e11d6c:	059f31e0 	ldreq	r3, [pc, #480]	; c7e11f54 <mmc_startup+0x6b8>
c7e11d70:	ea000035 	b	c7e11e4c <mmc_startup+0x5b0>
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
			 MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
c7e11d74:	e3a01001 	mov	r1, #1	; 0x1
c7e11d78:	e20430ff 	and	r3, r4, #255	; 0xff
c7e11d7c:	e3a020b7 	mov	r2, #183	; 0xb7
c7e11d80:	e1a00006 	mov	r0, r6
c7e11d84:	ebfffe74 	bl	c7e1175c <mmc_switch>
					EXT_CSD_BUS_WIDTH, width);

			if (err)
c7e11d88:	e3500000 	cmp	r0, #0	; 0x0

			if (!width) {
				mmc_set_bus_width(mmc, 1);
				break;
			} else
				mmc_set_bus_width(mmc, 4 * width);
c7e11d8c:	e1a0100a 	mov	r1, sl
c7e11d90:	e1a00006 	mov	r0, r6
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
			 MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
c7e11d94:	e24aa004 	sub	sl, sl, #4	; 0x4
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
					EXT_CSD_BUS_WIDTH, width);

			if (err)
c7e11d98:	1a000023 	bne	c7e11e2c <mmc_startup+0x590>
				continue;

			if (!width) {
c7e11d9c:	e3540000 	cmp	r4, #0	; 0x0
c7e11da0:	1a000002 	bne	c7e11db0 <mmc_startup+0x514>
				mmc_set_bus_width(mmc, 1);
c7e11da4:	e3a01001 	mov	r1, #1	; 0x1
c7e11da8:	ebfffb0f 	bl	c7e109ec <mmc_set_bus_width>
c7e11dac:	ea000020 	b	c7e11e34 <mmc_startup+0x598>
				break;
			} else
				mmc_set_bus_width(mmc, 4 * width);
c7e11db0:	ebfffb0d 	bl	c7e109ec <mmc_set_bus_width>

			err = mmc_send_ext_csd(mmc, test_csd);
c7e11db4:	e1a00006 	mov	r0, r6
c7e11db8:	e1a01007 	mov	r1, r7
c7e11dbc:	ebfffc36 	bl	c7e10e9c <mmc_send_ext_csd>
			if (!err && ext_csd[EXT_CSD_PARTITIONING_SUPPORT] \
c7e11dc0:	e3500000 	cmp	r0, #0	; 0x0
c7e11dc4:	1a000018 	bne	c7e11e2c <mmc_startup+0x590>
c7e11dc8:	e5d520a0 	ldrb	r2, [r5, #160]
c7e11dcc:	e5d730a0 	ldrb	r3, [r7, #160]
c7e11dd0:	e1520003 	cmp	r2, r3
c7e11dd4:	1a000014 	bne	c7e11e2c <mmc_startup+0x590>
c7e11dd8:	e5d520af 	ldrb	r2, [r5, #175]
c7e11ddc:	e5d730af 	ldrb	r3, [r7, #175]
c7e11de0:	e1520003 	cmp	r2, r3
c7e11de4:	1a000010 	bne	c7e11e2c <mmc_startup+0x590>
c7e11de8:	e5d520c0 	ldrb	r2, [r5, #192]
c7e11dec:	e5d730c0 	ldrb	r3, [r7, #192]
c7e11df0:	e1520003 	cmp	r2, r3
c7e11df4:	1a00000c 	bne	c7e11e2c <mmc_startup+0x590>
c7e11df8:	e5d520e0 	ldrb	r2, [r5, #224]
c7e11dfc:	e5d730e0 	ldrb	r3, [r7, #224]
c7e11e00:	e1520003 	cmp	r2, r3
c7e11e04:	1a000008 	bne	c7e11e2c <mmc_startup+0x590>
c7e11e08:	e28500d4 	add	r0, r5, #212	; 0xd4
c7e11e0c:	e28710d4 	add	r1, r7, #212	; 0xd4
c7e11e10:	e3a02004 	mov	r2, #4	; 0x4
c7e11e14:	eb0043c2 	bl	c7e22d24 <memcmp>
c7e11e18:	e3500000 	cmp	r0, #0	; 0x0
				 && ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] \
				    == test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
				 && memcmp(&ext_csd[EXT_CSD_SEC_CNT], \
					&test_csd[EXT_CSD_SEC_CNT], 4) == 0) {

				mmc->card_caps |= width;
c7e11e1c:	0596304c 	ldreq	r3, [r6, #76]
c7e11e20:	01833004 	orreq	r3, r3, r4
c7e11e24:	0586304c 	streq	r3, [r6, #76]
c7e11e28:	0a000001 	beq	c7e11e34 <mmc_startup+0x598>
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
			 MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
c7e11e2c:	e2544001 	subs	r4, r4, #1	; 0x1
c7e11e30:	2affffcf 	bcs	c7e11d74 <mmc_startup+0x4d8>
				mmc->card_caps |= width;
				break;
			}
		}

		if (mmc->card_caps & MMC_MODE_HS) {
c7e11e34:	e596304c 	ldr	r3, [r6, #76]
c7e11e38:	e3130001 	tst	r3, #1	; 0x1
c7e11e3c:	0a000003 	beq	c7e11e50 <mmc_startup+0x5b4>
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
c7e11e40:	e3130010 	tst	r3, #16	; 0x10
				mmc->tran_speed = 52000000;
c7e11e44:	159f310c 	ldrne	r3, [pc, #268]	; c7e11f58 <mmc_startup+0x6bc>
			else
				mmc->tran_speed = 26000000;
c7e11e48:	059f310c 	ldreq	r3, [pc, #268]	; c7e11f5c <mmc_startup+0x6c0>
c7e11e4c:	e5863084 	str	r3, [r6, #132]
		}
	}

	mmc_set_clock(mmc, mmc->tran_speed);
c7e11e50:	e1a00006 	mov	r0, r6
c7e11e54:	e5961084 	ldr	r1, [r6, #132]
c7e11e58:	ebfffadb 	bl	c7e109cc <mmc_set_clock>

	/* fill in device description */
	mmc->block_dev.lun = 0;
	mmc->block_dev.type = 0;
	mmc->block_dev.blksz = mmc->read_bl_len;
	mmc->block_dev.lba = lldiv(mmc->capacity, mmc->read_bl_len);
c7e11e5c:	e596409c 	ldr	r4, [r6, #156]
c7e11e60:	e5960098 	ldr	r0, [r6, #152]
	mmc_set_clock(mmc, mmc->tran_speed);

	/* fill in device description */
	mmc->block_dev.lun = 0;
	mmc->block_dev.type = 0;
	mmc->block_dev.blksz = mmc->read_bl_len;
c7e11e64:	e5961088 	ldr	r1, [r6, #136]
	}

	mmc_set_clock(mmc, mmc->tran_speed);

	/* fill in device description */
	mmc->block_dev.lun = 0;
c7e11e68:	e3a03000 	mov	r3, #0	; 0x0
 * the result, not reminder.
 */
static inline uint64_t lldiv(uint64_t dividend, uint32_t divisor)
{
	uint64_t __res = dividend;
	do_div(__res, divisor);
c7e11e6c:	e3540000 	cmp	r4, #0	; 0x0
	mmc->block_dev.type = 0;
c7e11e70:	e5c630ab 	strb	r3, [r6, #171]
	}

	mmc_set_clock(mmc, mmc->tran_speed);

	/* fill in device description */
	mmc->block_dev.lun = 0;
c7e11e74:	e5c630aa 	strb	r3, [r6, #170]
	mmc->block_dev.type = 0;
	mmc->block_dev.blksz = mmc->read_bl_len;
c7e11e78:	e58610b4 	str	r1, [r6, #180]
/* Wrapper for do_div(). Doesn't modify dividend and returns
 * the result, not reminder.
 */
static inline uint64_t lldiv(uint64_t dividend, uint32_t divisor)
{
	uint64_t __res = dividend;
c7e11e7c:	e58d04b8 	str	r0, [sp, #1208]
c7e11e80:	e58d44bc 	str	r4, [sp, #1212]
	do_div(__res, divisor);
c7e11e84:	1a000003 	bne	c7e11e98 <mmc_startup+0x5fc>
c7e11e88:	eb00619e 	bl	c7e2a508 <__udivsi3>
c7e11e8c:	e58d44bc 	str	r4, [sp, #1212]
c7e11e90:	e58d04b8 	str	r0, [sp, #1208]
c7e11e94:	ea000002 	b	c7e11ea4 <mmc_startup+0x608>
c7e11e98:	e28d0e4b 	add	r0, sp, #1200	; 0x4b0
c7e11e9c:	e2800008 	add	r0, r0, #8	; 0x8
c7e11ea0:	eb003c67 	bl	c7e21044 <__div64_32>
	mmc->block_dev.lba = lldiv(mmc->capacity, mmc->read_bl_len);
	sprintf(mmc->block_dev.vendor, "Man %06x Snr %08x", mmc->cid[0] >> 8,
c7e11ea4:	e5d6007f 	ldrb	r0, [r6, #127]

	/* fill in device description */
	mmc->block_dev.lun = 0;
	mmc->block_dev.type = 0;
	mmc->block_dev.blksz = mmc->read_bl_len;
	mmc->block_dev.lba = lldiv(mmc->capacity, mmc->read_bl_len);
c7e11ea8:	e59d14b8 	ldr	r1, [sp, #1208]
	sprintf(mmc->block_dev.vendor, "Man %06x Snr %08x", mmc->cid[0] >> 8,
c7e11eac:	e5962070 	ldr	r2, [r6, #112]
c7e11eb0:	e5963078 	ldr	r3, [r6, #120]

	/* fill in device description */
	mmc->block_dev.lun = 0;
	mmc->block_dev.type = 0;
	mmc->block_dev.blksz = mmc->read_bl_len;
	mmc->block_dev.lba = lldiv(mmc->capacity, mmc->read_bl_len);
c7e11eb4:	e58610b0 	str	r1, [r6, #176]
	sprintf(mmc->block_dev.vendor, "Man %06x Snr %08x", mmc->cid[0] >> 8,
c7e11eb8:	e1803403 	orr	r3, r0, r3, lsl #8
c7e11ebc:	e1a02422 	lsr	r2, r2, #8
c7e11ec0:	e59f1098 	ldr	r1, [pc, #152]	; c7e11f60 <mmc_startup+0x6c4>
c7e11ec4:	e28600b8 	add	r0, r6, #184	; 0xb8
c7e11ec8:	eb0047d8 	bl	c7e23e30 <sprintf>
			(mmc->cid[2] << 8) | (mmc->cid[3] >> 24));
	sprintf(mmc->block_dev.product, "%c%c%c%c%c", mmc->cid[0] & 0xff,
c7e11ecc:	e596c074 	ldr	ip, [r6, #116]
c7e11ed0:	e5d62070 	ldrb	r2, [r6, #112]
c7e11ed4:	e1a0482c 	lsr	r4, ip, #16
c7e11ed8:	e1a0542c 	lsr	r5, ip, #8
c7e11edc:	e1a03c2c 	lsr	r3, ip, #24
c7e11ee0:	e20440ff 	and	r4, r4, #255	; 0xff
c7e11ee4:	e20cc0ff 	and	ip, ip, #255	; 0xff
c7e11ee8:	e59f1074 	ldr	r1, [pc, #116]	; c7e11f64 <mmc_startup+0x6c8>
c7e11eec:	e20550ff 	and	r5, r5, #255	; 0xff
c7e11ef0:	e28600e1 	add	r0, r6, #225	; 0xe1
c7e11ef4:	e88d1030 	stm	sp, {r4, r5, ip}
c7e11ef8:	eb0047cc 	bl	c7e23e30 <sprintf>
			(mmc->cid[1] >> 24), (mmc->cid[1] >> 16) & 0xff,
			(mmc->cid[1] >> 8) & 0xff, mmc->cid[1] & 0xff);
	sprintf(mmc->block_dev.revision, "%d.%d", mmc->cid[2] >> 28,
c7e11efc:	e5962078 	ldr	r2, [r6, #120]
c7e11f00:	e59f1060 	ldr	r1, [pc, #96]	; c7e11f68 <mmc_startup+0x6cc>
c7e11f04:	e1a03c22 	lsr	r3, r2, #24
c7e11f08:	e203300f 	and	r3, r3, #15	; 0xf
c7e11f0c:	e1a02e22 	lsr	r2, r2, #28
c7e11f10:	e28600f6 	add	r0, r6, #246	; 0xf6
c7e11f14:	eb0047c5 	bl	c7e23e30 <sprintf>
			(mmc->cid[2] >> 24) & 0xf);
#if !defined(CONFIG_SPL_BUILD) || defined(CONFIG_SPL_LIBDISK_SUPPORT)
	init_part(&mmc->block_dev);
c7e11f18:	e28600a0 	add	r0, r6, #160	; 0xa0
c7e11f1c:	ebfff745 	bl	c7e0fc38 <init_part>
c7e11f20:	e3a04000 	mov	r4, #0	; 0x0
#endif

	return 0;
}
c7e11f24:	e1a00004 	mov	r0, r4
c7e11f28:	e28dd0c4 	add	sp, sp, #196	; 0xc4
c7e11f2c:	e28ddb01 	add	sp, sp, #1024	; 0x400
c7e11f30:	e8bd8cf0 	pop	{r4, r5, r6, r7, sl, fp, pc}
c7e11f34:	00010014 	.word	0x00010014
c7e11f38:	00010022 	.word	0x00010022
c7e11f3c:	00010030 	.word	0x00010030
c7e11f40:	00010040 	.word	0x00010040
c7e11f44:	00010012 	.word	0x00010012
c7e11f48:	c7e2c5d4 	.word	0xc7e2c5d4
c7e11f4c:	0001003f 	.word	0x0001003f
c7e11f50:	02faf080 	.word	0x02faf080
c7e11f54:	017d7840 	.word	0x017d7840
c7e11f58:	03197500 	.word	0x03197500
c7e11f5c:	018cba80 	.word	0x018cba80
c7e11f60:	c7e32e1a 	.word	0xc7e32e1a
c7e11f64:	c7e32e2c 	.word	0xc7e32e2c
c7e11f68:	c7e34d2f 	.word	0xc7e34d2f

c7e11f6c <mmc_init>:
	return &mmc->block_dev;
}
#endif

int mmc_init(struct mmc *mmc)
{
c7e11f6c:	e92d4010 	push	{r4, lr}
c7e11f70:	e1a04000 	mov	r4, r0
	int err;

	if (mmc_getcd(mmc) == 0) {
c7e11f74:	ebfffa85 	bl	c7e10990 <mmc_getcd>
c7e11f78:	e3500000 	cmp	r0, #0	; 0x0
c7e11f7c:	1a000004 	bne	c7e11f94 <mmc_init+0x28>
		mmc->has_init = 0;
c7e11f80:	e5840034 	str	r0, [r4, #52]
		printf("MMC: no card present\n");
c7e11f84:	e59f00b0 	ldr	r0, [pc, #176]	; c7e1203c <mmc_init+0xd0>
c7e11f88:	ebffdab2 	bl	c7e08a58 <printf>
c7e11f8c:	e3e0000f 	mvn	r0, #15	; 0xf
c7e11f90:	e8bd8010 	pop	{r4, pc}
		return NO_CARD_ERR;
	}

	if (mmc->has_init)
c7e11f94:	e5943034 	ldr	r3, [r4, #52]
c7e11f98:	e3530000 	cmp	r3, #0	; 0x0
c7e11f9c:	13a00000 	movne	r0, #0	; 0x0
c7e11fa0:	18bd8010 	popne	{r4, pc}
		return 0;

	err = mmc->init(mmc);
c7e11fa4:	e1a00004 	mov	r0, r4
c7e11fa8:	e1a0e00f 	mov	lr, pc
c7e11fac:	e594f118 	ldr	pc, [r4, #280]

	if (err)
c7e11fb0:	e3500000 	cmp	r0, #0	; 0x0
c7e11fb4:	18bd8010 	popne	{r4, pc}
		return err;

	mmc_set_bus_width(mmc, 1);
c7e11fb8:	e3a01001 	mov	r1, #1	; 0x1
c7e11fbc:	e1a00004 	mov	r0, r4
c7e11fc0:	ebfffa89 	bl	c7e109ec <mmc_set_bus_width>
	mmc_set_clock(mmc, 1);
c7e11fc4:	e1a00004 	mov	r0, r4
c7e11fc8:	e3a01001 	mov	r1, #1	; 0x1
c7e11fcc:	ebfffa7e 	bl	c7e109cc <mmc_set_clock>

	/* Reset the Card */
	err = mmc_go_idle(mmc);
c7e11fd0:	e1a00004 	mov	r0, r4
c7e11fd4:	ebfffc18 	bl	c7e1103c <mmc_go_idle>

	if (err)
c7e11fd8:	e3500000 	cmp	r0, #0	; 0x0
c7e11fdc:	18bd8010 	popne	{r4, pc}
		return err;

	/* The internal partition reset to user partition(0) at every CMD0*/
	mmc->part_num = 0;
c7e11fe0:	e5c40083 	strb	r0, [r4, #131]

	/* Test for SD version 2 */
	err = mmc_send_if_cond(mmc);
c7e11fe4:	e1a00004 	mov	r0, r4
c7e11fe8:	ebfffafb 	bl	c7e10bdc <mmc_send_if_cond>

	/* Now try to get the SD card's operating condition */
	err = sd_send_op_cond(mmc);
c7e11fec:	e1a00004 	mov	r0, r4
c7e11ff0:	ebfffbbc 	bl	c7e10ee8 <sd_send_op_cond>

	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
c7e11ff4:	e3700013 	cmn	r0, #19	; 0x13
c7e11ff8:	1a000007 	bne	c7e1201c <mmc_init+0xb0>
		err = mmc_send_op_cond(mmc);
c7e11ffc:	e1a00004 	mov	r0, r4
c7e12000:	ebfffc21 	bl	c7e1108c <mmc_send_op_cond>

		if (err) {
c7e12004:	e3500000 	cmp	r0, #0	; 0x0
c7e12008:	0a000003 	beq	c7e1201c <mmc_init+0xb0>
			printf("Card did not respond to voltage select!\n");
c7e1200c:	e59f002c 	ldr	r0, [pc, #44]	; c7e12040 <mmc_init+0xd4>
c7e12010:	ebffda90 	bl	c7e08a58 <printf>
c7e12014:	e3e00010 	mvn	r0, #16	; 0x10
c7e12018:	e8bd8010 	pop	{r4, pc}
			return UNUSABLE_ERR;
		}
	}

	err = mmc_startup(mmc);
c7e1201c:	e1a00004 	mov	r0, r4
c7e12020:	ebfffe1d 	bl	c7e1189c <mmc_startup>
	if (err)
c7e12024:	e3500000 	cmp	r0, #0	; 0x0
		mmc->has_init = 0;
c7e12028:	13a03000 	movne	r3, #0	; 0x0
	else
		mmc->has_init = 1;
c7e1202c:	03a03001 	moveq	r3, #1	; 0x1
		}
	}

	err = mmc_startup(mmc);
	if (err)
		mmc->has_init = 0;
c7e12030:	15843034 	strne	r3, [r4, #52]
	else
		mmc->has_init = 1;
c7e12034:	05843034 	streq	r3, [r4, #52]
	return err;
}
c7e12038:	e8bd8010 	pop	{r4, pc}
c7e1203c:	c7e32e37 	.word	0xc7e32e37
c7e12040:	c7e32e4d 	.word	0xc7e32e4d

c7e12044 <mmc_get_dev>:
	return 0;
}

#ifdef CONFIG_PARTITIONS
block_dev_desc_t *mmc_get_dev(int dev)
{
c7e12044:	e92d4010 	push	{r4, lr}
	struct mmc *mmc = find_mmc_device(dev);
c7e12048:	ebfffac1 	bl	c7e10b54 <find_mmc_device>
	if (!mmc || mmc_init(mmc))
c7e1204c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e12050:	0a000003 	beq	c7e12064 <mmc_get_dev+0x20>
c7e12054:	ebffffc4 	bl	c7e11f6c <mmc_init>
c7e12058:	e3500000 	cmp	r0, #0	; 0x0
		return NULL;

	return &mmc->block_dev;
c7e1205c:	028400a0 	addeq	r0, r4, #160	; 0xa0

#ifdef CONFIG_PARTITIONS
block_dev_desc_t *mmc_get_dev(int dev)
{
	struct mmc *mmc = find_mmc_device(dev);
	if (!mmc || mmc_init(mmc))
c7e12060:	08bd8010 	popeq	{r4, pc}
		return NULL;

	return &mmc->block_dev;
c7e12064:	e3a00000 	mov	r0, #0	; 0x0
}
c7e12068:	e8bd8010 	pop	{r4, pc}

c7e1206c <sdhci_reset>:
#include <sdhci.h>

void *aligned_buffer;

static void sdhci_reset(struct sdhci_host *host, u8 mask)
{
c7e1206c:	e92d4070 	push	{r4, r5, r6, lr}
c7e12070:	e1a06000 	mov	r6, r0
c7e12074:	e1a05001 	mov	r5, r1
	writew(val, host->ioaddr + reg);
}

static inline void sdhci_writeb(struct sdhci_host *host, u8 val, int reg)
{
	writeb(val, host->ioaddr + reg);
c7e12078:	e5903004 	ldr	r3, [r0, #4]
c7e1207c:	e3a04064 	mov	r4, #100	; 0x64
c7e12080:	e5c3102f 	strb	r1, [r3, #47]
c7e12084:	ea000007 	b	c7e120a8 <sdhci_reset+0x3c>

	/* Wait max 100 ms */
	timeout = 100;
	sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
	while (sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask) {
		if (timeout == 0) {
c7e12088:	e3540000 	cmp	r4, #0	; 0x0
			printf("Reset 0x%x never completed.\n", (int)mask);
			return;
		}
		timeout--;
c7e1208c:	e2444001 	sub	r4, r4, #1	; 0x1

	/* Wait max 100 ms */
	timeout = 100;
	sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
	while (sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask) {
		if (timeout == 0) {
c7e12090:	1a000003 	bne	c7e120a4 <sdhci_reset+0x38>
			printf("Reset 0x%x never completed.\n", (int)mask);
c7e12094:	e59f0028 	ldr	r0, [pc, #40]	; c7e120c4 <sdhci_reset+0x58>
c7e12098:	e1a01005 	mov	r1, r5
			return;
		}
		timeout--;
		udelay(1000);
	}
}
c7e1209c:	e8bd4070 	pop	{r4, r5, r6, lr}
	/* Wait max 100 ms */
	timeout = 100;
	sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
	while (sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask) {
		if (timeout == 0) {
			printf("Reset 0x%x never completed.\n", (int)mask);
c7e120a0:	eaffda6c 	b	c7e08a58 <printf>
			return;
		}
		timeout--;
		udelay(1000);
c7e120a4:	eb004387 	bl	c7e22ec8 <udelay>
	return readw(host->ioaddr + reg);
}

static inline u8 sdhci_readb(struct sdhci_host *host, int reg)
{
	return readb(host->ioaddr + reg);
c7e120a8:	e5963004 	ldr	r3, [r6, #4]
c7e120ac:	e5d3302f 	ldrb	r3, [r3, #47]
c7e120b0:	e20330ff 	and	r3, r3, #255	; 0xff
	unsigned long timeout;

	/* Wait max 100 ms */
	timeout = 100;
	sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
	while (sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask) {
c7e120b4:	e1130005 	tst	r3, r5
		if (timeout == 0) {
			printf("Reset 0x%x never completed.\n", (int)mask);
			return;
		}
		timeout--;
		udelay(1000);
c7e120b8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	unsigned long timeout;

	/* Wait max 100 ms */
	timeout = 100;
	sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
	while (sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask) {
c7e120bc:	1afffff1 	bne	c7e12088 <sdhci_reset+0x1c>
			return;
		}
		timeout--;
		udelay(1000);
	}
}
c7e120c0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e120c4:	c7e32e76 	.word	0xc7e32e76

c7e120c8 <add_sdhci>:

	return 0;
}

int add_sdhci(struct sdhci_host *host, u32 max_clk, u32 min_clk)
{
c7e120c8:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e120cc:	e1a06000 	mov	r6, r0
	struct mmc *mmc;
	unsigned int caps;

	mmc = malloc(sizeof(struct mmc));
c7e120d0:	e3a00f4a 	mov	r0, #296	; 0x128

	return 0;
}

int add_sdhci(struct sdhci_host *host, u32 max_clk, u32 min_clk)
{
c7e120d4:	e1a07001 	mov	r7, r1
c7e120d8:	e1a0a002 	mov	sl, r2
	struct mmc *mmc;
	unsigned int caps;

	mmc = malloc(sizeof(struct mmc));
c7e120dc:	ebffdc2e 	bl	c7e0919c <malloc>
	if (!mmc) {
c7e120e0:	e2504000 	subs	r4, r0, #0	; 0x0
		printf("mmc malloc fail!\n");
c7e120e4:	059f0158 	ldreq	r0, [pc, #344]	; c7e12244 <add_sdhci+0x17c>
{
	struct mmc *mmc;
	unsigned int caps;

	mmc = malloc(sizeof(struct mmc));
	if (!mmc) {
c7e120e8:	0a000023 	beq	c7e1217c <add_sdhci+0xb4>
	}

	mmc->priv = host;
	host->mmc = mmc;

	sprintf(mmc->name, "%s", host->name);
c7e120ec:	e5962000 	ldr	r2, [r6]
	if (!mmc) {
		printf("mmc malloc fail!\n");
		return -1;
	}

	mmc->priv = host;
c7e120f0:	e5846028 	str	r6, [r4, #40]
	host->mmc = mmc;
c7e120f4:	e5864018 	str	r4, [r6, #24]

	sprintf(mmc->name, "%s", host->name);
c7e120f8:	e2840008 	add	r0, r4, #8	; 0x8
c7e120fc:	e59f1144 	ldr	r1, [pc, #324]	; c7e12248 <add_sdhci+0x180>
c7e12100:	eb00474a 	bl	c7e23e30 <sprintf>
	mmc->send_cmd = sdhci_send_command;
c7e12104:	e59f3140 	ldr	r3, [pc, #320]	; c7e1224c <add_sdhci+0x184>
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12108:	e5962004 	ldr	r2, [r6, #4]
c7e1210c:	e5843110 	str	r3, [r4, #272]
	mmc->set_ios = sdhci_set_ios;
c7e12110:	e59f3138 	ldr	r3, [pc, #312]	; c7e12250 <add_sdhci+0x188>
c7e12114:	e5925040 	ldr	r5, [r2, #64]
c7e12118:	e5843114 	str	r3, [r4, #276]
	mmc->init = sdhci_init;
c7e1211c:	e59f3130 	ldr	r3, [pc, #304]	; c7e12254 <add_sdhci+0x18c>
c7e12120:	e5843118 	str	r3, [r4, #280]
	mmc->getcd = NULL;
c7e12124:	e3a03000 	mov	r3, #0	; 0x0
c7e12128:	e584311c 	str	r3, [r4, #284]

	caps = sdhci_readl(host, SDHCI_CAPABILITIES);
#ifdef CONFIG_MMC_SDMA
	if (!(caps & SDHCI_CAN_DO_SDMA)) {
c7e1212c:	e3150501 	tst	r5, #4194304	; 0x400000
		printf("Your controller don't support sdma!!\n");
c7e12130:	059f0120 	ldreq	r0, [pc, #288]	; c7e12258 <add_sdhci+0x190>
	mmc->init = sdhci_init;
	mmc->getcd = NULL;

	caps = sdhci_readl(host, SDHCI_CAPABILITIES);
#ifdef CONFIG_MMC_SDMA
	if (!(caps & SDHCI_CAN_DO_SDMA)) {
c7e12134:	0a000010 	beq	c7e1217c <add_sdhci+0xb4>
		printf("Your controller don't support sdma!!\n");
		return -1;
	}
#endif

	if (max_clk)
c7e12138:	e3570000 	cmp	r7, #0	; 0x0
		mmc->f_max = max_clk;
c7e1213c:	1584703c 	strne	r7, [r4, #60]
		printf("Your controller don't support sdma!!\n");
		return -1;
	}
#endif

	if (max_clk)
c7e12140:	1a000009 	bne	c7e1216c <add_sdhci+0xa4>
		mmc->f_max = max_clk;
	else {
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
c7e12144:	e5d63010 	ldrb	r3, [r6, #16]
			mmc->f_max = (caps & SDHCI_CLOCK_V3_BASE_MASK)
				>> SDHCI_CLOCK_BASE_SHIFT;
		else
			mmc->f_max = (caps & SDHCI_CLOCK_BASE_MASK)
				>> SDHCI_CLOCK_BASE_SHIFT;
		mmc->f_max *= 1000000;
c7e12148:	e59f210c 	ldr	r2, [pc, #268]	; c7e1225c <add_sdhci+0x194>
#endif

	if (max_clk)
		mmc->f_max = max_clk;
	else {
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
c7e1214c:	e3530001 	cmp	r3, #1	; 0x1
			mmc->f_max = (caps & SDHCI_CLOCK_V3_BASE_MASK)
c7e12150:	82053cff 	andhi	r3, r5, #65280	; 0xff00
				>> SDHCI_CLOCK_BASE_SHIFT;
		else
			mmc->f_max = (caps & SDHCI_CLOCK_BASE_MASK)
c7e12154:	92053c3f 	andls	r3, r5, #16128	; 0x3f00
c7e12158:	e1a03423 	lsr	r3, r3, #8
c7e1215c:	e584303c 	str	r3, [r4, #60]
				>> SDHCI_CLOCK_BASE_SHIFT;
		mmc->f_max *= 1000000;
c7e12160:	e594303c 	ldr	r3, [r4, #60]
c7e12164:	e0030392 	mul	r3, r2, r3
c7e12168:	e584303c 	str	r3, [r4, #60]
	}
	if (mmc->f_max == 0) {
c7e1216c:	e594003c 	ldr	r0, [r4, #60]
c7e12170:	e3500000 	cmp	r0, #0	; 0x0
c7e12174:	1a000003 	bne	c7e12188 <add_sdhci+0xc0>
		printf("Hardware doesn't specify base clock frequency\n");
c7e12178:	e59f00e0 	ldr	r0, [pc, #224]	; c7e12260 <add_sdhci+0x198>
c7e1217c:	ebffda35 	bl	c7e08a58 <printf>
c7e12180:	e3e00000 	mvn	r0, #0	; 0x0
c7e12184:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
		return -1;
	}
	if (min_clk)
c7e12188:	e35a0000 	cmp	sl, #0	; 0x0
		mmc->f_min = min_clk;
c7e1218c:	1584a038 	strne	sl, [r4, #56]
	}
	if (mmc->f_max == 0) {
		printf("Hardware doesn't specify base clock frequency\n");
		return -1;
	}
	if (min_clk)
c7e12190:	1a000007 	bne	c7e121b4 <add_sdhci+0xec>
		mmc->f_min = min_clk;
	else {
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
c7e12194:	e5d63010 	ldrb	r3, [r6, #16]
c7e12198:	e3530001 	cmp	r3, #1	; 0x1
			mmc->f_min = mmc->f_max / SDHCI_MAX_DIV_SPEC_300;
		else
			mmc->f_min = mmc->f_max / SDHCI_MAX_DIV_SPEC_200;
c7e1219c:	91a03420 	lsrls	r3, r0, #8
c7e121a0:	95843038 	strls	r3, [r4, #56]
		return -1;
	}
	if (min_clk)
		mmc->f_min = min_clk;
	else {
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
c7e121a4:	9a000002 	bls	c7e121b4 <add_sdhci+0xec>
			mmc->f_min = mmc->f_max / SDHCI_MAX_DIV_SPEC_300;
c7e121a8:	e59f10b4 	ldr	r1, [pc, #180]	; c7e12264 <add_sdhci+0x19c>
c7e121ac:	eb0060d5 	bl	c7e2a508 <__udivsi3>
c7e121b0:	e5840038 	str	r0, [r4, #56]
		else
			mmc->f_min = mmc->f_max / SDHCI_MAX_DIV_SPEC_200;
	}

	mmc->voltages = 0;
c7e121b4:	e3a03000 	mov	r3, #0	; 0x0
	if (caps & SDHCI_CAN_VDD_330)
c7e121b8:	e3150401 	tst	r5, #16777216	; 0x1000000
			mmc->f_min = mmc->f_max / SDHCI_MAX_DIV_SPEC_300;
		else
			mmc->f_min = mmc->f_max / SDHCI_MAX_DIV_SPEC_200;
	}

	mmc->voltages = 0;
c7e121bc:	e584302c 	str	r3, [r4, #44]
	if (caps & SDHCI_CAN_VDD_330)
		mmc->voltages |= MMC_VDD_32_33 | MMC_VDD_33_34;
c7e121c0:	12833603 	addne	r3, r3, #3145728	; 0x300000
c7e121c4:	1584302c 	strne	r3, [r4, #44]
	if (caps & SDHCI_CAN_VDD_300)
c7e121c8:	e3150402 	tst	r5, #33554432	; 0x2000000
		mmc->voltages |= MMC_VDD_29_30 | MMC_VDD_30_31;
c7e121cc:	1594302c 	ldrne	r3, [r4, #44]
	if (caps & SDHCI_CAN_DO_8BIT)
		mmc->host_caps |= MMC_MODE_8BIT;
	if (host->host_caps)
		mmc->host_caps |= host->host_caps;

	sdhci_reset(host, SDHCI_RESET_ALL);
c7e121d0:	e1a00006 	mov	r0, r6

	mmc->voltages = 0;
	if (caps & SDHCI_CAN_VDD_330)
		mmc->voltages |= MMC_VDD_32_33 | MMC_VDD_33_34;
	if (caps & SDHCI_CAN_VDD_300)
		mmc->voltages |= MMC_VDD_29_30 | MMC_VDD_30_31;
c7e121d4:	13833806 	orrne	r3, r3, #393216	; 0x60000
c7e121d8:	1584302c 	strne	r3, [r4, #44]
	if (caps & SDHCI_CAN_VDD_180)
c7e121dc:	e3150301 	tst	r5, #67108864	; 0x4000000
		mmc->voltages |= MMC_VDD_165_195;
c7e121e0:	1594302c 	ldrne	r3, [r4, #44]
	if (caps & SDHCI_CAN_DO_8BIT)
		mmc->host_caps |= MMC_MODE_8BIT;
	if (host->host_caps)
		mmc->host_caps |= host->host_caps;

	sdhci_reset(host, SDHCI_RESET_ALL);
c7e121e4:	e3a01001 	mov	r1, #1	; 0x1
	if (caps & SDHCI_CAN_VDD_330)
		mmc->voltages |= MMC_VDD_32_33 | MMC_VDD_33_34;
	if (caps & SDHCI_CAN_VDD_300)
		mmc->voltages |= MMC_VDD_29_30 | MMC_VDD_30_31;
	if (caps & SDHCI_CAN_VDD_180)
		mmc->voltages |= MMC_VDD_165_195;
c7e121e8:	13833080 	orrne	r3, r3, #128	; 0x80
c7e121ec:	1584302c 	strne	r3, [r4, #44]

	if (host->quirks & SDHCI_QUIRK_BROKEN_VOLTAGE)
c7e121f0:	e5963008 	ldr	r3, [r6, #8]
c7e121f4:	e3130010 	tst	r3, #16	; 0x10
		mmc->voltages |= host->voltages;
c7e121f8:	1596202c 	ldrne	r2, [r6, #44]
c7e121fc:	1594302c 	ldrne	r3, [r4, #44]
c7e12200:	11833002 	orrne	r3, r3, r2
c7e12204:	1584302c 	strne	r3, [r4, #44]

	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
c7e12208:	e59f3058 	ldr	r3, [pc, #88]	; c7e12268 <add_sdhci+0x1a0>
	if (caps & SDHCI_CAN_DO_8BIT)
c7e1220c:	e3150701 	tst	r5, #262144	; 0x40000
		mmc->voltages |= MMC_VDD_165_195;

	if (host->quirks & SDHCI_QUIRK_BROKEN_VOLTAGE)
		mmc->voltages |= host->voltages;

	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
c7e12210:	e5843050 	str	r3, [r4, #80]
	if (caps & SDHCI_CAN_DO_8BIT)
		mmc->host_caps |= MMC_MODE_8BIT;
c7e12214:	12833c02 	addne	r3, r3, #512	; 0x200
c7e12218:	15843050 	strne	r3, [r4, #80]
	if (host->host_caps)
c7e1221c:	e596200c 	ldr	r2, [r6, #12]
c7e12220:	e3520000 	cmp	r2, #0	; 0x0
		mmc->host_caps |= host->host_caps;
c7e12224:	15943050 	ldrne	r3, [r4, #80]
c7e12228:	11833002 	orrne	r3, r3, r2
c7e1222c:	15843050 	strne	r3, [r4, #80]

	sdhci_reset(host, SDHCI_RESET_ALL);
c7e12230:	ebffff8d 	bl	c7e1206c <sdhci_reset>
	mmc_register(mmc);
c7e12234:	e1a00004 	mov	r0, r4
c7e12238:	ebfff9ed 	bl	c7e109f4 <mmc_register>
c7e1223c:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e12240:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e12244:	c7e32e93 	.word	0xc7e32e93
c7e12248:	c7e3082f 	.word	0xc7e3082f
c7e1224c:	c7e125b8 	.word	0xc7e125b8
c7e12250:	c7e1226c 	.word	0xc7e1226c
c7e12254:	c7e12430 	.word	0xc7e12430
c7e12258:	c7e32ea5 	.word	0xc7e32ea5
c7e1225c:	000f4240 	.word	0x000f4240
c7e12260:	c7e32ecb 	.word	0xc7e32ecb
c7e12264:	000007fe 	.word	0x000007fe
c7e12268:	00000111 	.word	0x00000111

c7e1226c <sdhci_set_ios>:

	sdhci_writeb(host, pwr, SDHCI_POWER_CONTROL);
}

void sdhci_set_ios(struct mmc *mmc)
{
c7e1226c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	u32 ctrl;
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;
c7e12270:	e5909028 	ldr	r9, [r0, #40]

	sdhci_writeb(host, pwr, SDHCI_POWER_CONTROL);
}

void sdhci_set_ios(struct mmc *mmc)
{
c7e12274:	e1a0b000 	mov	fp, r0
	u32 ctrl;
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;

	if (host->set_control_reg)
c7e12278:	e5993024 	ldr	r3, [r9, #36]
c7e1227c:	e3530000 	cmp	r3, #0	; 0x0
c7e12280:	0a000001 	beq	c7e1228c <sdhci_set_ios+0x20>
		host->set_control_reg(host);
c7e12284:	e1a00009 	mov	r0, r9
c7e12288:	e12fff33 	blx	r3

	if (mmc->clock != host->clock)
c7e1228c:	e59b7048 	ldr	r7, [fp, #72]
c7e12290:	e5993014 	ldr	r3, [r9, #20]
c7e12294:	e1570003 	cmp	r7, r3
c7e12298:	0a000042 	beq	c7e123a8 <sdhci_set_ios+0x13c>
		return COMM_ERR;
}

static int sdhci_set_clock(struct mmc *mmc, unsigned int clock)
{
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;
c7e1229c:	e59b6028 	ldr	r6, [fp, #40]
	writel(val, host->ioaddr + reg);
}

static inline void sdhci_writew(struct sdhci_host *host, u16 val, int reg)
{
	writew(val, host->ioaddr + reg);
c7e122a0:	e5963004 	ldr	r3, [r6, #4]
c7e122a4:	e3a02000 	mov	r2, #0	; 0x0
	unsigned int div, clk, timeout;

	sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);

	if (clock == 0)
c7e122a8:	e3570000 	cmp	r7, #0	; 0x0
c7e122ac:	e1c322bc 	strh	r2, [r3, #44]
c7e122b0:	0a00003c 	beq	c7e123a8 <sdhci_set_ios+0x13c>
		return 0;

	if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300) {
c7e122b4:	e5d63010 	ldrb	r3, [r6, #16]
c7e122b8:	e59ba03c 	ldr	sl, [fp, #60]
c7e122bc:	e3530001 	cmp	r3, #1	; 0x1
c7e122c0:	9a00000d 	bls	c7e122fc <sdhci_set_ios+0x90>
		/* Version 3.00 divisors must be a multiple of 2. */
		if (mmc->f_max <= clock)
c7e122c4:	e15a0007 	cmp	sl, r7
c7e122c8:	93a04001 	movls	r4, #1	; 0x1
c7e122cc:	9a000015 	bls	c7e12328 <sdhci_set_ios+0xbc>
c7e122d0:	e3a04002 	mov	r4, #2	; 0x2
			div = 1;
		else {
			for (div = 2; div < SDHCI_MAX_DIV_SPEC_300; div += 2) {
				if ((mmc->f_max / div) <= clock)
c7e122d4:	e1a01004 	mov	r1, r4
c7e122d8:	e1a0000a 	mov	r0, sl
c7e122dc:	eb006089 	bl	c7e2a508 <__udivsi3>
c7e122e0:	e1500007 	cmp	r0, r7
c7e122e4:	9a00000f 	bls	c7e12328 <sdhci_set_ios+0xbc>
	if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300) {
		/* Version 3.00 divisors must be a multiple of 2. */
		if (mmc->f_max <= clock)
			div = 1;
		else {
			for (div = 2; div < SDHCI_MAX_DIV_SPEC_300; div += 2) {
c7e122e8:	e59f3134 	ldr	r3, [pc, #308]	; c7e12424 <sdhci_set_ios+0x1b8>
c7e122ec:	e2844002 	add	r4, r4, #2	; 0x2
c7e122f0:	e1540003 	cmp	r4, r3
c7e122f4:	1afffff6 	bne	c7e122d4 <sdhci_set_ios+0x68>
c7e122f8:	ea00000a 	b	c7e12328 <sdhci_set_ios+0xbc>
			}
		}
	} else {
		/* Version 2.00 divisors must be a power of 2. */
		for (div = 1; div < SDHCI_MAX_DIV_SPEC_200; div *= 2) {
			if ((mmc->f_max / div) <= clock)
c7e122fc:	e3a04001 	mov	r4, #1	; 0x1
c7e12300:	e3a05000 	mov	r5, #0	; 0x0
c7e12304:	e1a01004 	mov	r1, r4
c7e12308:	e1a0000a 	mov	r0, sl
c7e1230c:	eb00607d 	bl	c7e2a508 <__udivsi3>
c7e12310:	e1500007 	cmp	r0, r7
					break;
			}
		}
	} else {
		/* Version 2.00 divisors must be a power of 2. */
		for (div = 1; div < SDHCI_MAX_DIV_SPEC_200; div *= 2) {
c7e12314:	e2855001 	add	r5, r5, #1	; 0x1
			if ((mmc->f_max / div) <= clock)
c7e12318:	9a000002 	bls	c7e12328 <sdhci_set_ios+0xbc>
					break;
			}
		}
	} else {
		/* Version 2.00 divisors must be a power of 2. */
		for (div = 1; div < SDHCI_MAX_DIV_SPEC_200; div *= 2) {
c7e1231c:	e3550008 	cmp	r5, #8	; 0x8
c7e12320:	e1a04084 	lsl	r4, r4, #1
c7e12324:	1afffff6 	bne	c7e12304 <sdhci_set_ios+0x98>
				break;
		}
	}
	div >>= 1;

	if (host->set_clock)
c7e12328:	e5963028 	ldr	r3, [r6, #40]
		for (div = 1; div < SDHCI_MAX_DIV_SPEC_200; div *= 2) {
			if ((mmc->f_max / div) <= clock)
				break;
		}
	}
	div >>= 1;
c7e1232c:	e1a040a4 	lsr	r4, r4, #1

	if (host->set_clock)
c7e12330:	e3530000 	cmp	r3, #0	; 0x0
c7e12334:	0a000002 	beq	c7e12344 <sdhci_set_ios+0xd8>
		host->set_clock(host->index, div);
c7e12338:	e5960020 	ldr	r0, [r6, #32]
c7e1233c:	e1a01004 	mov	r1, r4
c7e12340:	e12fff33 	blx	r3

	clk = (div & SDHCI_DIV_MASK) << SDHCI_DIVIDER_SHIFT;
c7e12344:	e1a03404 	lsl	r3, r4, #8
c7e12348:	e1a03803 	lsl	r3, r3, #16
c7e1234c:	e1a03823 	lsr	r3, r3, #16
	clk |= ((div & SDHCI_DIV_HI_MASK) >> SDHCI_DIV_MASK_LEN)
		<< SDHCI_DIVIDER_HI_SHIFT;
	clk |= SDHCI_CLOCK_INT_EN;
	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
c7e12350:	e2042c03 	and	r2, r4, #768	; 0x300

	if (host->set_clock)
		host->set_clock(host->index, div);

	clk = (div & SDHCI_DIV_MASK) << SDHCI_DIVIDER_SHIFT;
	clk |= ((div & SDHCI_DIV_HI_MASK) >> SDHCI_DIV_MASK_LEN)
c7e12354:	e3833001 	orr	r3, r3, #1	; 0x1
		<< SDHCI_DIVIDER_HI_SHIFT;
	clk |= SDHCI_CLOCK_INT_EN;
	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
c7e12358:	e1833122 	orr	r3, r3, r2, lsr #2
c7e1235c:	e5962004 	ldr	r2, [r6, #4]
c7e12360:	e3a04014 	mov	r4, #20	; 0x14
c7e12364:	e1c232bc 	strh	r3, [r2, #44]
c7e12368:	ea000006 	b	c7e12388 <sdhci_set_ios+0x11c>

	/* Wait max 20 ms */
	timeout = 20;
	while (!((clk = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
		& SDHCI_CLOCK_INT_STABLE)) {
		if (timeout == 0) {
c7e1236c:	e3540000 	cmp	r4, #0	; 0x0
			printf("Internal clock never stabilised.\n");
			return -1;
		}
		timeout--;
c7e12370:	e2444001 	sub	r4, r4, #1	; 0x1

	/* Wait max 20 ms */
	timeout = 20;
	while (!((clk = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
		& SDHCI_CLOCK_INT_STABLE)) {
		if (timeout == 0) {
c7e12374:	1a000002 	bne	c7e12384 <sdhci_set_ios+0x118>
			printf("Internal clock never stabilised.\n");
c7e12378:	e59f00a8 	ldr	r0, [pc, #168]	; c7e12428 <sdhci_set_ios+0x1bc>
c7e1237c:	ebffd9b5 	bl	c7e08a58 <printf>
c7e12380:	ea000008 	b	c7e123a8 <sdhci_set_ios+0x13c>
			return -1;
		}
		timeout--;
		udelay(1000);
c7e12384:	eb0042cf 	bl	c7e22ec8 <udelay>
	return readl(host->ioaddr + reg);
}

static inline u16 sdhci_readw(struct sdhci_host *host, int reg)
{
	return readw(host->ioaddr + reg);
c7e12388:	e5963004 	ldr	r3, [r6, #4]
c7e1238c:	e1d332bc 	ldrh	r3, [r3, #44]
	clk |= SDHCI_CLOCK_INT_EN;
	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);

	/* Wait max 20 ms */
	timeout = 20;
	while (!((clk = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
c7e12390:	e3130002 	tst	r3, #2	; 0x2
		if (timeout == 0) {
			printf("Internal clock never stabilised.\n");
			return -1;
		}
		timeout--;
		udelay(1000);
c7e12394:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	clk |= SDHCI_CLOCK_INT_EN;
	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);

	/* Wait max 20 ms */
	timeout = 20;
	while (!((clk = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
c7e12398:	0afffff3 	beq	c7e1236c <sdhci_set_ios+0x100>
		timeout--;
		udelay(1000);
	}

	clk |= SDHCI_CLOCK_CARD_EN;
	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
c7e1239c:	e3832004 	orr	r2, r3, #4	; 0x4
	writel(val, host->ioaddr + reg);
}

static inline void sdhci_writew(struct sdhci_host *host, u16 val, int reg)
{
	writew(val, host->ioaddr + reg);
c7e123a0:	e5963004 	ldr	r3, [r6, #4]
c7e123a4:	e1c322bc 	strh	r2, [r3, #44]
	return readw(host->ioaddr + reg);
}

static inline u8 sdhci_readb(struct sdhci_host *host, int reg)
{
	return readb(host->ioaddr + reg);
c7e123a8:	e5993004 	ldr	r3, [r9, #4]
c7e123ac:	e5d31028 	ldrb	r1, [r3, #40]
c7e123b0:	e20130ff 	and	r3, r1, #255	; 0xff
	if (mmc->clock != host->clock)
		sdhci_set_clock(mmc, mmc->clock);

	/* Set bus width */
	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
	if (mmc->bus_width == 8) {
c7e123b4:	e59b0044 	ldr	r0, [fp, #68]

	if (mmc->clock != host->clock)
		sdhci_set_clock(mmc, mmc->clock);

	/* Set bus width */
	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
c7e123b8:	e1a02003 	mov	r2, r3
	if (mmc->bus_width == 8) {
c7e123bc:	e3500008 	cmp	r0, #8	; 0x8
c7e123c0:	e5993010 	ldr	r3, [r9, #16]
c7e123c4:	1a000004 	bne	c7e123dc <sdhci_set_ios+0x170>
		ctrl &= ~SDHCI_CTRL_4BITBUS;
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
c7e123c8:	e20330ff 	and	r3, r3, #255	; 0xff
c7e123cc:	e3530001 	cmp	r3, #1	; 0x1
		sdhci_set_clock(mmc, mmc->clock);

	/* Set bus width */
	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
	if (mmc->bus_width == 8) {
		ctrl &= ~SDHCI_CTRL_4BITBUS;
c7e123d0:	e20110fd 	and	r1, r1, #253	; 0xfd
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
			ctrl |= SDHCI_CTRL_8BITBUS;
c7e123d4:	83811020 	orrhi	r1, r1, #32	; 0x20
c7e123d8:	ea000005 	b	c7e123f4 <sdhci_set_ios+0x188>
	} else {
		if ((host->version & SDHCI_SPEC_VER_MASK) >= SDHCI_SPEC_300)
c7e123dc:	e20330ff 	and	r3, r3, #255	; 0xff
c7e123e0:	e3530001 	cmp	r3, #1	; 0x1
			ctrl &= ~SDHCI_CTRL_8BITBUS;
c7e123e4:	820120df 	andhi	r2, r1, #223	; 0xdf
		if (mmc->bus_width == 4)
c7e123e8:	e3500004 	cmp	r0, #4	; 0x4
			ctrl |= SDHCI_CTRL_4BITBUS;
c7e123ec:	03821002 	orreq	r1, r2, #2	; 0x2
		else
			ctrl &= ~SDHCI_CTRL_4BITBUS;
c7e123f0:	13c21002 	bicne	r1, r2, #2	; 0x2
	}

	if (mmc->clock > 26000000)
c7e123f4:	e59b2048 	ldr	r2, [fp, #72]
c7e123f8:	e59f302c 	ldr	r3, [pc, #44]	; c7e1242c <sdhci_set_ios+0x1c0>
c7e123fc:	e1520003 	cmp	r2, r3
		ctrl |= SDHCI_CTRL_HISPD;
	else
		ctrl &= ~SDHCI_CTRL_HISPD;

	if (host->quirks & SDHCI_QUIRK_NO_HISPD_BIT)
c7e12400:	e5993008 	ldr	r3, [r9, #8]
		else
			ctrl &= ~SDHCI_CTRL_4BITBUS;
	}

	if (mmc->clock > 26000000)
		ctrl |= SDHCI_CTRL_HISPD;
c7e12404:	83812004 	orrhi	r2, r1, #4	; 0x4
	else
		ctrl &= ~SDHCI_CTRL_HISPD;
c7e12408:	93c12004 	bicls	r2, r1, #4	; 0x4

	if (host->quirks & SDHCI_QUIRK_NO_HISPD_BIT)
c7e1240c:	e3130008 	tst	r3, #8	; 0x8
		ctrl &= ~SDHCI_CTRL_HISPD;
c7e12410:	13c22004 	bicne	r2, r2, #4	; 0x4

	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
c7e12414:	e20220ff 	and	r2, r2, #255	; 0xff
	writew(val, host->ioaddr + reg);
}

static inline void sdhci_writeb(struct sdhci_host *host, u8 val, int reg)
{
	writeb(val, host->ioaddr + reg);
c7e12418:	e5993004 	ldr	r3, [r9, #4]
c7e1241c:	e5c32028 	strb	r2, [r3, #40]
}
c7e12420:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e12424:	000007fe 	.word	0x000007fe
c7e12428:	c7e32efa 	.word	0xc7e32efa
c7e1242c:	018cba80 	.word	0x018cba80

c7e12430 <sdhci_init>:

int sdhci_init(struct mmc *mmc)
{
c7e12430:	e92d4070 	push	{r4, r5, r6, lr}
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;
c7e12434:	e5904028 	ldr	r4, [r0, #40]

	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
}

int sdhci_init(struct mmc *mmc)
{
c7e12438:	e1a05000 	mov	r5, r0
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;

	if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) && !aligned_buffer) {
c7e1243c:	e5943008 	ldr	r3, [r4, #8]
c7e12440:	e3130001 	tst	r3, #1	; 0x1
c7e12444:	0a00000d 	beq	c7e12480 <sdhci_init+0x50>
c7e12448:	e59f6160 	ldr	r6, [pc, #352]	; c7e125b0 <sdhci_init+0x180>
c7e1244c:	e5963000 	ldr	r3, [r6]
c7e12450:	e3530000 	cmp	r3, #0	; 0x0
c7e12454:	1a000009 	bne	c7e12480 <sdhci_init+0x50>
		aligned_buffer = memalign(8, 512*1024);
c7e12458:	e3a00008 	mov	r0, #8	; 0x8
c7e1245c:	e3a01702 	mov	r1, #524288	; 0x80000
c7e12460:	ebffdcda 	bl	c7e097d0 <memalign>
		if (!aligned_buffer) {
c7e12464:	e3500000 	cmp	r0, #0	; 0x0
int sdhci_init(struct mmc *mmc)
{
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;

	if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) && !aligned_buffer) {
		aligned_buffer = memalign(8, 512*1024);
c7e12468:	e5860000 	str	r0, [r6]
		if (!aligned_buffer) {
c7e1246c:	1a000003 	bne	c7e12480 <sdhci_init+0x50>
			printf("Aligned buffer alloc failed!!!");
c7e12470:	e59f013c 	ldr	r0, [pc, #316]	; c7e125b4 <sdhci_init+0x184>
c7e12474:	ebffd977 	bl	c7e08a58 <printf>
c7e12478:	e3e00000 	mvn	r0, #0	; 0x0
c7e1247c:	e8bd8070 	pop	{r4, r5, r6, pc}
			return -1;
		}
	}

	sdhci_set_power(host, fls(mmc->voltages) - 1);
c7e12480:	e595002c 	ldr	r0, [r5, #44]
 */
static inline int generic_fls(int x)
{
	int r = 32;

	if (!x)
c7e12484:	e3500000 	cmp	r0, #0	; 0x0
c7e12488:	01a03000 	moveq	r3, r0
c7e1248c:	0a000010 	beq	c7e124d4 <sdhci_init+0xa4>
		return 0;
	if (!(x & 0xffff0000u)) {
c7e12490:	e1a03820 	lsr	r3, r0, #16
c7e12494:	e1a03803 	lsl	r3, r3, #16
c7e12498:	e3530000 	cmp	r3, #0	; 0x0
		x <<= 16;
c7e1249c:	01a00800 	lsleq	r0, r0, #16
{
	int r = 32;

	if (!x)
		return 0;
	if (!(x & 0xffff0000u)) {
c7e124a0:	13a03020 	movne	r3, #32	; 0x20
		x <<= 16;
c7e124a4:	03a03010 	moveq	r3, #16	; 0x10
		r -= 16;
	}
	if (!(x & 0xff000000u)) {
c7e124a8:	e31004ff 	tst	r0, #-16777216	; 0xff000000
		x <<= 8;
c7e124ac:	01a00400 	lsleq	r0, r0, #8
		r -= 8;
c7e124b0:	02433008 	subeq	r3, r3, #8	; 0x8
	}
	if (!(x & 0xf0000000u)) {
c7e124b4:	e310020f 	tst	r0, #-268435456	; 0xf0000000
		x <<= 4;
c7e124b8:	01a00200 	lsleq	r0, r0, #4
		r -= 4;
c7e124bc:	02433004 	subeq	r3, r3, #4	; 0x4
	}
	if (!(x & 0xc0000000u)) {
c7e124c0:	e3100103 	tst	r0, #-1073741824	; 0xc0000000
		x <<= 2;
c7e124c4:	01a00100 	lsleq	r0, r0, #2
		r -= 2;
c7e124c8:	02433002 	subeq	r3, r3, #2	; 0x2
	}
	if (!(x & 0x80000000u)) {
c7e124cc:	e3500000 	cmp	r0, #0	; 0x0
		x <<= 1;
		r -= 1;
c7e124d0:	a2433001 	subge	r3, r3, #1	; 0x1
c7e124d4:	e2433001 	sub	r3, r3, #1	; 0x1
c7e124d8:	e1a03803 	lsl	r3, r3, #16

static void sdhci_set_power(struct sdhci_host *host, unsigned short power)
{
	u8 pwr = 0;

	if (power != (unsigned short)-1) {
c7e124dc:	e3730801 	cmn	r3, #65536	; 0x10000
c7e124e0:	e1a02823 	lsr	r2, r3, #16
c7e124e4:	0a000012 	beq	c7e12534 <sdhci_init+0x104>
		switch (1 << power) {
c7e124e8:	e3a03001 	mov	r3, #1	; 0x1
c7e124ec:	e1a03213 	lsl	r3, r3, r2
c7e124f0:	e3530701 	cmp	r3, #262144	; 0x40000
c7e124f4:	0a00000a 	beq	c7e12524 <sdhci_init+0xf4>
c7e124f8:	ca000004 	bgt	c7e12510 <sdhci_init+0xe0>
c7e124fc:	e3530080 	cmp	r3, #128	; 0x80
c7e12500:	0a000025 	beq	c7e1259c <sdhci_init+0x16c>
c7e12504:	e3530802 	cmp	r3, #131072	; 0x20000
c7e12508:	1a000009 	bne	c7e12534 <sdhci_init+0x104>
c7e1250c:	ea000004 	b	c7e12524 <sdhci_init+0xf4>
c7e12510:	e3530601 	cmp	r3, #1048576	; 0x100000
c7e12514:	0a000004 	beq	c7e1252c <sdhci_init+0xfc>
c7e12518:	e3530602 	cmp	r3, #2097152	; 0x200000
c7e1251c:	1a000004 	bne	c7e12534 <sdhci_init+0x104>
c7e12520:	ea000001 	b	c7e1252c <sdhci_init+0xfc>
c7e12524:	e3a0200c 	mov	r2, #12	; 0xc
c7e12528:	ea00001c 	b	c7e125a0 <sdhci_init+0x170>
c7e1252c:	e3a0200e 	mov	r2, #14	; 0xe
c7e12530:	ea00001a 	b	c7e125a0 <sdhci_init+0x170>
c7e12534:	e5942004 	ldr	r2, [r4, #4]
c7e12538:	e3a03000 	mov	r3, #0	; 0x0
c7e1253c:	e5c23029 	strb	r3, [r2, #41]
		}
	}

	sdhci_set_power(host, fls(mmc->voltages) - 1);

	if (host->quirks & SDHCI_QUIRK_NO_CD) {
c7e12540:	e5943008 	ldr	r3, [r4, #8]
c7e12544:	e3130020 	tst	r3, #32	; 0x20
c7e12548:	0a00000c 	beq	c7e12580 <sdhci_init+0x150>

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e1254c:	e5942004 	ldr	r2, [r4, #4]
c7e12550:	e3a030c0 	mov	r3, #192	; 0xc0
c7e12554:	e5823028 	str	r3, [r2, #40]
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12558:	e5923024 	ldr	r3, [r2, #36]
c7e1255c:	ea000001 	b	c7e12568 <sdhci_init+0x138>

		sdhci_writel(host, SDHCI_CTRL_CD_TEST_INS | SDHCI_CTRL_CD_TEST,
			SDHCI_HOST_CONTROL);

		status = sdhci_readl(host, SDHCI_PRESENT_STATE);
		while ((!(status & SDHCI_CARD_PRESENT)) ||
c7e12560:	e5943004 	ldr	r3, [r4, #4]
c7e12564:	e5933024 	ldr	r3, [r3, #36]
c7e12568:	e3130801 	tst	r3, #65536	; 0x10000
c7e1256c:	0afffffb 	beq	c7e12560 <sdhci_init+0x130>
c7e12570:	e3130802 	tst	r3, #131072	; 0x20000
c7e12574:	0afffff9 	beq	c7e12560 <sdhci_init+0x130>
c7e12578:	e3130701 	tst	r3, #262144	; 0x40000
c7e1257c:	0afffff7 	beq	c7e12560 <sdhci_init+0x130>

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e12580:	e5943004 	ldr	r3, [r4, #4]
c7e12584:	e3e02000 	mvn	r2, #0	; 0x0
c7e12588:	e5832034 	str	r2, [r3, #52]
	/* Eable all state */
	sdhci_writel(host, SDHCI_INT_ALL_MASK, SDHCI_INT_ENABLE);
	sdhci_writel(host, SDHCI_INT_ALL_MASK, SDHCI_SIGNAL_ENABLE);

	return 0;
}
c7e1258c:	e5943004 	ldr	r3, [r4, #4]
c7e12590:	e3a00000 	mov	r0, #0	; 0x0
c7e12594:	e5832038 	str	r2, [r3, #56]
c7e12598:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1259c:	e3a0200a 	mov	r2, #10	; 0xa
	if (pwr == 0) {
		sdhci_writeb(host, 0, SDHCI_POWER_CONTROL);
		return;
	}

	pwr |= SDHCI_POWER_ON;
c7e125a0:	e3822001 	orr	r2, r2, #1	; 0x1
	writew(val, host->ioaddr + reg);
}

static inline void sdhci_writeb(struct sdhci_host *host, u8 val, int reg)
{
	writeb(val, host->ioaddr + reg);
c7e125a4:	e5943004 	ldr	r3, [r4, #4]
c7e125a8:	e5c32029 	strb	r2, [r3, #41]
c7e125ac:	eaffffe3 	b	c7e12540 <sdhci_init+0x110>
c7e125b0:	c7e41e4c 	.word	0xc7e41e4c
c7e125b4:	c7e32f1c 	.word	0xc7e32f1c

c7e125b8 <sdhci_send_command>:
	return 0;
}

int sdhci_send_command(struct mmc *mmc, struct mmc_cmd *cmd,
		       struct mmc_data *data)
{
c7e125b8:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
c7e125bc:	e1a0b001 	mov	fp, r1
c7e125c0:	e1a06002 	mov	r6, r2
	struct sdhci_host *host = (struct sdhci_host *)mmc->priv;
c7e125c4:	e5905028 	ldr	r5, [r0, #40]
	sdhci_writel(host, SDHCI_INT_ALL_MASK, SDHCI_INT_STATUS);
	mask = SDHCI_CMD_INHIBIT | SDHCI_DATA_INHIBIT;

	/* We shouldn't wait for data inihibit for stop commands, even
	   though they might use busy signaling */
	if (cmd->cmdidx == MMC_CMD_STOP_TRANSMISSION)
c7e125c8:	e1d110b0 	ldrh	r1, [r1]

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e125cc:	e5953004 	ldr	r3, [r5, #4]
c7e125d0:	e351000c 	cmp	r1, #12	; 0xc
c7e125d4:	e3e02000 	mvn	r2, #0	; 0x0
c7e125d8:	e5832030 	str	r2, [r3, #48]
c7e125dc:	13a07003 	movne	r7, #3	; 0x3
c7e125e0:	03a07001 	moveq	r7, #1	; 0x1
c7e125e4:	e3a0400a 	mov	r4, #10	; 0xa
c7e125e8:	ea000007 	b	c7e1260c <sdhci_send_command+0x54>
		mask &= ~SDHCI_DATA_INHIBIT;

	while (sdhci_readl(host, SDHCI_PRESENT_STATE) & mask) {
		if (timeout == 0) {
c7e125ec:	e3540000 	cmp	r4, #0	; 0x0
			printf("Controller never released inhibit bit(s).\n");
			return COMM_ERR;
		}
		timeout--;
c7e125f0:	e2444001 	sub	r4, r4, #1	; 0x1
	   though they might use busy signaling */
	if (cmd->cmdidx == MMC_CMD_STOP_TRANSMISSION)
		mask &= ~SDHCI_DATA_INHIBIT;

	while (sdhci_readl(host, SDHCI_PRESENT_STATE) & mask) {
		if (timeout == 0) {
c7e125f4:	1a000003 	bne	c7e12608 <sdhci_send_command+0x50>
			printf("Controller never released inhibit bit(s).\n");
c7e125f8:	e59f0400 	ldr	r0, [pc, #1024]	; c7e12a00 <sdhci_send_command+0x448>
c7e125fc:	ebffd915 	bl	c7e08a58 <printf>
c7e12600:	e3e00011 	mvn	r0, #17	; 0x11
c7e12604:	ea0000fb 	b	c7e129f8 <sdhci_send_command+0x440>
			return COMM_ERR;
		}
		timeout--;
		udelay(1000);
c7e12608:	eb00422e 	bl	c7e22ec8 <udelay>
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e1260c:	e5953004 	ldr	r3, [r5, #4]
c7e12610:	e5933024 	ldr	r3, [r3, #36]
	/* We shouldn't wait for data inihibit for stop commands, even
	   though they might use busy signaling */
	if (cmd->cmdidx == MMC_CMD_STOP_TRANSMISSION)
		mask &= ~SDHCI_DATA_INHIBIT;

	while (sdhci_readl(host, SDHCI_PRESENT_STATE) & mask) {
c7e12614:	e1170003 	tst	r7, r3
		if (timeout == 0) {
			printf("Controller never released inhibit bit(s).\n");
			return COMM_ERR;
		}
		timeout--;
		udelay(1000);
c7e12618:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	/* We shouldn't wait for data inihibit for stop commands, even
	   though they might use busy signaling */
	if (cmd->cmdidx == MMC_CMD_STOP_TRANSMISSION)
		mask &= ~SDHCI_DATA_INHIBIT;

	while (sdhci_readl(host, SDHCI_PRESENT_STATE) & mask) {
c7e1261c:	1afffff2 	bne	c7e125ec <sdhci_send_command+0x34>
		timeout--;
		udelay(1000);
	}

	mask = SDHCI_INT_RESPONSE;
	if (!(cmd->resp_type & MMC_RSP_PRESENT))
c7e12620:	e59b2004 	ldr	r2, [fp, #4]
c7e12624:	e2123001 	ands	r3, r2, #1	; 0x1
c7e12628:	01a04003 	moveq	r4, r3
c7e1262c:	03a07001 	moveq	r7, #1	; 0x1
c7e12630:	0a000008 	beq	c7e12658 <sdhci_send_command+0xa0>
		flags = SDHCI_CMD_RESP_NONE;
	else if (cmd->resp_type & MMC_RSP_136)
c7e12634:	e3120002 	tst	r2, #2	; 0x2
c7e12638:	13a07001 	movne	r7, #1	; 0x1
c7e1263c:	1a000004 	bne	c7e12654 <sdhci_send_command+0x9c>
		flags = SDHCI_CMD_RESP_LONG;
	else if (cmd->resp_type & MMC_RSP_BUSY) {
c7e12640:	e3120008 	tst	r2, #8	; 0x8
c7e12644:	03a07001 	moveq	r7, #1	; 0x1
c7e12648:	03a04002 	moveq	r4, #2	; 0x2
c7e1264c:	0a000001 	beq	c7e12658 <sdhci_send_command+0xa0>
c7e12650:	e3a07003 	mov	r7, #3	; 0x3
c7e12654:	e1a04007 	mov	r4, r7
		flags = SDHCI_CMD_RESP_SHORT_BUSY;
		mask |= SDHCI_INT_DATA_END;
	} else
		flags = SDHCI_CMD_RESP_SHORT;

	if (cmd->resp_type & MMC_RSP_CRC)
c7e12658:	e3120004 	tst	r2, #4	; 0x4
		flags |= SDHCI_CMD_CRC;
c7e1265c:	13844008 	orrne	r4, r4, #8	; 0x8
	if (cmd->resp_type & MMC_RSP_OPCODE)
c7e12660:	e3120010 	tst	r2, #16	; 0x10
		flags |= SDHCI_CMD_INDEX;
c7e12664:	13844010 	orrne	r4, r4, #16	; 0x10
	if (data)
c7e12668:	e3560000 	cmp	r6, #0	; 0x0
c7e1266c:	03a01001 	moveq	r1, #1	; 0x1
c7e12670:	058d6008 	streq	r6, [sp, #8]
c7e12674:	058d100c 	streq	r1, [sp, #12]
c7e12678:	01a0a006 	moveq	sl, r6
c7e1267c:	0a000032 	beq	c7e1274c <sdhci_send_command+0x194>
	writew(val, host->ioaddr + reg);
}

static inline void sdhci_writeb(struct sdhci_host *host, u8 val, int reg)
{
	writeb(val, host->ioaddr + reg);
c7e12680:	e5952004 	ldr	r2, [r5, #4]
c7e12684:	e3a0300e 	mov	r3, #14	; 0xe
c7e12688:	e5c2302e 	strb	r3, [r2, #46]

	/*Set Transfer mode regarding to data flag*/
	if (data != 0) {
		sdhci_writeb(host, 0xe, SDHCI_TIMEOUT_CONTROL);
		mode = SDHCI_TRNS_BLK_CNT_EN;
		trans_bytes = data->blocks * data->blocksize;
c7e1268c:	e5962008 	ldr	r2, [r6, #8]
c7e12690:	e596300c 	ldr	r3, [r6, #12]
		if (data->blocks > 1)
c7e12694:	e3520001 	cmp	r2, #1	; 0x1

	/*Set Transfer mode regarding to data flag*/
	if (data != 0) {
		sdhci_writeb(host, 0xe, SDHCI_TIMEOUT_CONTROL);
		mode = SDHCI_TRNS_BLK_CNT_EN;
		trans_bytes = data->blocks * data->blocksize;
c7e12698:	e0020293 	mul	r2, r3, r2
		if (data->blocks > 1)
			mode |= SDHCI_TRNS_MULTI;

		if (data->flags == MMC_DATA_READ)
c7e1269c:	e5961004 	ldr	r1, [r6, #4]
#ifdef CONFIG_MMC_SDMA
		if (data->flags == MMC_DATA_READ)
			start_addr = (unsigned int)data->dest;
		else
			start_addr = (unsigned int)data->src;
		if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) &&
c7e126a0:	e5953008 	ldr	r3, [r5, #8]
	/*Set Transfer mode regarding to data flag*/
	if (data != 0) {
		sdhci_writeb(host, 0xe, SDHCI_TIMEOUT_CONTROL);
		mode = SDHCI_TRNS_BLK_CNT_EN;
		trans_bytes = data->blocks * data->blocksize;
		if (data->blocks > 1)
c7e126a4:	93a09002 	movls	r9, #2	; 0x2
c7e126a8:	83a09022 	movhi	r9, #34	; 0x22
			mode |= SDHCI_TRNS_MULTI;

		if (data->flags == MMC_DATA_READ)
c7e126ac:	e3510001 	cmp	r1, #1	; 0x1

	/*Set Transfer mode regarding to data flag*/
	if (data != 0) {
		sdhci_writeb(host, 0xe, SDHCI_TIMEOUT_CONTROL);
		mode = SDHCI_TRNS_BLK_CNT_EN;
		trans_bytes = data->blocks * data->blocksize;
c7e126b0:	e58d2004 	str	r2, [sp, #4]
		if (data->blocks > 1)
			mode |= SDHCI_TRNS_MULTI;

		if (data->flags == MMC_DATA_READ)
			mode |= SDHCI_TRNS_READ;
c7e126b4:	03899010 	orreq	r9, r9, #16	; 0x10
#ifdef CONFIG_MMC_SDMA
		if (data->flags == MMC_DATA_READ)
			start_addr = (unsigned int)data->dest;
		else
			start_addr = (unsigned int)data->src;
		if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) &&
c7e126b8:	e3130001 	tst	r3, #1	; 0x1

#ifdef CONFIG_MMC_SDMA
		if (data->flags == MMC_DATA_READ)
			start_addr = (unsigned int)data->dest;
		else
			start_addr = (unsigned int)data->src;
c7e126bc:	e596a000 	ldr	sl, [r6]
		if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) &&
c7e126c0:	0a00000d 	beq	c7e126fc <sdhci_send_command+0x144>
c7e126c4:	e31a0007 	tst	sl, #7	; 0x7
c7e126c8:	0a00000b 	beq	c7e126fc <sdhci_send_command+0x144>
				(start_addr & 0x7) != 0x0) {
			is_aligned = 0;
			start_addr = (unsigned int)aligned_buffer;
c7e126cc:	e59f3330 	ldr	r3, [pc, #816]	; c7e12a04 <sdhci_send_command+0x44c>
			if (data->flags != MMC_DATA_READ)
c7e126d0:	e3510001 	cmp	r1, #1	; 0x1
		else
			start_addr = (unsigned int)data->src;
		if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) &&
				(start_addr & 0x7) != 0x0) {
			is_aligned = 0;
			start_addr = (unsigned int)aligned_buffer;
c7e126d4:	e593a000 	ldr	sl, [r3]
			if (data->flags != MMC_DATA_READ)
c7e126d8:	03a03000 	moveq	r3, #0	; 0x0
c7e126dc:	0a000007 	beq	c7e12700 <sdhci_send_command+0x148>
				memcpy(aligned_buffer, data->src, trans_bytes);
c7e126e0:	e5961000 	ldr	r1, [r6]
c7e126e4:	e1a0000a 	mov	r0, sl
c7e126e8:	e59d2004 	ldr	r2, [sp, #4]
c7e126ec:	eb004152 	bl	c7e22c3c <memcpy>
c7e126f0:	e3a01000 	mov	r1, #0	; 0x0
c7e126f4:	e58d100c 	str	r1, [sp, #12]
c7e126f8:	ea000001 	b	c7e12704 <sdhci_send_command+0x14c>
c7e126fc:	e3a03001 	mov	r3, #1	; 0x1
c7e12700:	e58d300c 	str	r3, [sp, #12]

	/*Set Transfer mode regarding to data flag*/
	if (data != 0) {
		sdhci_writeb(host, 0xe, SDHCI_TIMEOUT_CONTROL);
		mode = SDHCI_TRNS_BLK_CNT_EN;
		trans_bytes = data->blocks * data->blocksize;
c7e12704:	e59d1004 	ldr	r1, [sp, #4]
	if (cmd->resp_type & MMC_RSP_CRC)
		flags |= SDHCI_CMD_CRC;
	if (cmd->resp_type & MMC_RSP_OPCODE)
		flags |= SDHCI_CMD_INDEX;
	if (data)
		flags |= SDHCI_CMD_DATA;
c7e12708:	e3844020 	orr	r4, r4, #32	; 0x20

	/*Set Transfer mode regarding to data flag*/
	if (data != 0) {
		sdhci_writeb(host, 0xe, SDHCI_TIMEOUT_CONTROL);
		mode = SDHCI_TRNS_BLK_CNT_EN;
		trans_bytes = data->blocks * data->blocksize;
c7e1270c:	e58d1008 	str	r1, [sp, #8]

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e12710:	e5953004 	ldr	r3, [r5, #4]
c7e12714:	e583a000 	str	sl, [r3]
		}

		sdhci_writel(host, start_addr, SDHCI_DMA_ADDRESS);
		mode |= SDHCI_TRNS_DMA;
#endif
		sdhci_writew(host, SDHCI_MAKE_BLKSZ(SDHCI_DEFAULT_BOUNDARY_ARG,
c7e12718:	e596300c 	ldr	r3, [r6, #12]
c7e1271c:	e3c33a0f 	bic	r3, r3, #61440	; 0xf000
c7e12720:	e3833a07 	orr	r3, r3, #28672	; 0x7000
c7e12724:	e1a03803 	lsl	r3, r3, #16
c7e12728:	e1a03823 	lsr	r3, r3, #16
}

static inline void sdhci_writew(struct sdhci_host *host, u16 val, int reg)
{
	writew(val, host->ioaddr + reg);
c7e1272c:	e5952004 	ldr	r2, [r5, #4]
				data->blocksize),
				SDHCI_BLOCK_SIZE);
		sdhci_writew(host, data->blocks, SDHCI_BLOCK_COUNT);
c7e12730:	e1d610b8 	ldrh	r1, [r6, #8]
c7e12734:	e1c230b4 	strh	r3, [r2, #4]
		sdhci_writew(host, mode, SDHCI_TRANSFER_MODE);
c7e12738:	e5953004 	ldr	r3, [r5, #4]
c7e1273c:	e3892001 	orr	r2, r9, #1	; 0x1
c7e12740:	e1c310b6 	strh	r1, [r3, #6]
	}

	sdhci_writel(host, cmd->cmdarg, SDHCI_ARGUMENT);
c7e12744:	e5953004 	ldr	r3, [r5, #4]
c7e12748:	e1c320bc 	strh	r2, [r3, #12]
c7e1274c:	e59b2008 	ldr	r2, [fp, #8]

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e12750:	e5953004 	ldr	r3, [r5, #4]
#ifdef CONFIG_MMC_SDMA
	flush_cache(start_addr, trans_bytes);
c7e12754:	e1a0000a 	mov	r0, sl
c7e12758:	e5832008 	str	r2, [r3, #8]
c7e1275c:	e59d1008 	ldr	r1, [sp, #8]
c7e12760:	ebffbb06 	bl	c7e01380 <__flush_cache>
#endif
	sdhci_writew(host, SDHCI_MAKE_CMD(cmd->cmdidx, flags), SDHCI_COMMAND);
c7e12764:	e1db20b0 	ldrh	r2, [fp]
c7e12768:	e20430ff 	and	r3, r4, #255	; 0xff
c7e1276c:	e1833402 	orr	r3, r3, r2, lsl #8
c7e12770:	e1a03803 	lsl	r3, r3, #16
c7e12774:	e1a03823 	lsr	r3, r3, #16
}

static inline void sdhci_writew(struct sdhci_host *host, u16 val, int reg)
{
	writew(val, host->ioaddr + reg);
c7e12778:	e5952004 	ldr	r2, [r5, #4]
c7e1277c:	e59f1284 	ldr	r1, [pc, #644]	; c7e12a08 <sdhci_send_command+0x450>
c7e12780:	e1c230be 	strh	r3, [r2, #14]
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12784:	e5953004 	ldr	r3, [r5, #4]
c7e12788:	e5932030 	ldr	r2, [r3, #48]
	do {
		stat = sdhci_readl(host, SDHCI_INT_STATUS);
		if (stat & SDHCI_INT_ERROR)
c7e1278c:	e3120902 	tst	r2, #32768	; 0x8000
			break;
		if (--retry == 0)
			break;
	} while ((stat & mask) != mask);
c7e12790:	e0073002 	and	r3, r7, r2
	flush_cache(start_addr, trans_bytes);
#endif
	sdhci_writew(host, SDHCI_MAKE_CMD(cmd->cmdidx, flags), SDHCI_COMMAND);
	do {
		stat = sdhci_readl(host, SDHCI_INT_STATUS);
		if (stat & SDHCI_INT_ERROR)
c7e12794:	1a000004 	bne	c7e127ac <sdhci_send_command+0x1f4>
			break;
		if (--retry == 0)
c7e12798:	e2511001 	subs	r1, r1, #1	; 0x1
c7e1279c:	0a000004 	beq	c7e127b4 <sdhci_send_command+0x1fc>
			break;
	} while ((stat & mask) != mask);
c7e127a0:	e1530007 	cmp	r3, r7
c7e127a4:	1afffff6 	bne	c7e12784 <sdhci_send_command+0x1cc>
c7e127a8:	ea000008 	b	c7e127d0 <sdhci_send_command+0x218>

	if (retry == 0) {
c7e127ac:	e3510000 	cmp	r1, #0	; 0x0
c7e127b0:	1a000006 	bne	c7e127d0 <sdhci_send_command+0x218>
		if (host->quirks & SDHCI_QUIRK_BROKEN_R1B)
c7e127b4:	e5953008 	ldr	r3, [r5, #8]
c7e127b8:	e3130004 	tst	r3, #4	; 0x4
c7e127bc:	1a00008c 	bne	c7e129f4 <sdhci_send_command+0x43c>
			return 0;
		else {
			printf("Timeout for status update!\n");
c7e127c0:	e59f0244 	ldr	r0, [pc, #580]	; c7e12a0c <sdhci_send_command+0x454>
c7e127c4:	ebffd8a3 	bl	c7e08a58 <printf>
c7e127c8:	e3e00012 	mvn	r0, #18	; 0x12
c7e127cc:	ea000089 	b	c7e129f8 <sdhci_send_command+0x440>
			return TIMEOUT;
		}
	}

	if ((stat & (SDHCI_INT_ERROR | mask)) == mask) {
c7e127d0:	e3873902 	orr	r3, r7, #32768	; 0x8000
c7e127d4:	e0029003 	and	r9, r2, r3
c7e127d8:	e1590007 	cmp	r9, r7
c7e127dc:	13e04000 	mvnne	r4, #0	; 0x0
c7e127e0:	1a00001d 	bne	c7e1285c <sdhci_send_command+0x2a4>
}

static void sdhci_cmd_done(struct sdhci_host *host, struct mmc_cmd *cmd)
{
	int i;
	if (cmd->resp_type & MMC_RSP_136) {
c7e127e4:	e59b3004 	ldr	r3, [fp, #4]
c7e127e8:	e3130002 	tst	r3, #2	; 0x2
c7e127ec:	0a000014 	beq	c7e12844 <sdhci_send_command+0x28c>
c7e127f0:	e1a0100b 	mov	r1, fp
c7e127f4:	e3a00000 	mov	r0, #0	; 0x0
c7e127f8:	e3a0201c 	mov	r2, #28	; 0x1c
c7e127fc:	e5953004 	ldr	r3, [r5, #4]
c7e12800:	e7933002 	ldr	r3, [r3, r2]
		/* CRC is stripped so we need to do some shifting. */
		for (i = 0; i < 4; i++) {
			cmd->response[i] = sdhci_readl(host,
c7e12804:	e1a0c403 	lsl	ip, r3, #8
					SDHCI_RESPONSE + (3-i)*4) << 8;
			if (i != 3)
c7e12808:	e3500003 	cmp	r0, #3	; 0x3
	return readw(host->ioaddr + reg);
}

static inline u8 sdhci_readb(struct sdhci_host *host, int reg)
{
	return readb(host->ioaddr + reg);
c7e1280c:	e242e001 	sub	lr, r2, #1	; 0x1
{
	int i;
	if (cmd->resp_type & MMC_RSP_136) {
		/* CRC is stripped so we need to do some shifting. */
		for (i = 0; i < 4; i++) {
			cmd->response[i] = sdhci_readl(host,
c7e12810:	e581c00c 	str	ip, [r1, #12]
					SDHCI_RESPONSE + (3-i)*4) << 8;
			if (i != 3)
c7e12814:	0a000004 	beq	c7e1282c <sdhci_send_command+0x274>
c7e12818:	e5953004 	ldr	r3, [r5, #4]
c7e1281c:	e7d3300e 	ldrb	r3, [r3, lr]
c7e12820:	e20330ff 	and	r3, r3, #255	; 0xff
				cmd->response[i] |= sdhci_readb(host,
c7e12824:	e183300c 	orr	r3, r3, ip
c7e12828:	e581300c 	str	r3, [r1, #12]
static void sdhci_cmd_done(struct sdhci_host *host, struct mmc_cmd *cmd)
{
	int i;
	if (cmd->resp_type & MMC_RSP_136) {
		/* CRC is stripped so we need to do some shifting. */
		for (i = 0; i < 4; i++) {
c7e1282c:	e2800001 	add	r0, r0, #1	; 0x1
c7e12830:	e3500004 	cmp	r0, #4	; 0x4
c7e12834:	e2422004 	sub	r2, r2, #4	; 0x4
c7e12838:	e2811004 	add	r1, r1, #4	; 0x4
c7e1283c:	1affffee 	bne	c7e127fc <sdhci_send_command+0x244>
c7e12840:	ea000002 	b	c7e12850 <sdhci_send_command+0x298>
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12844:	e5953004 	ldr	r3, [r5, #4]
c7e12848:	e5933010 	ldr	r3, [r3, #16]
			if (i != 3)
				cmd->response[i] |= sdhci_readb(host,
						SDHCI_RESPONSE + (3-i)*4-1);
		}
	} else {
		cmd->response[0] = sdhci_readl(host, SDHCI_RESPONSE);
c7e1284c:	e58b300c 	str	r3, [fp, #12]

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e12850:	e5953004 	ldr	r3, [r5, #4]
c7e12854:	e3a04000 	mov	r4, #0	; 0x0
c7e12858:	e5839030 	str	r9, [r3, #48]
		sdhci_cmd_done(host, cmd);
		sdhci_writel(host, mask, SDHCI_INT_STATUS);
	} else
		ret = -1;

	if (!ret && data)
c7e1285c:	e2843001 	add	r3, r4, #1	; 0x1
c7e12860:	e3560000 	cmp	r6, #0	; 0x0
c7e12864:	03a03000 	moveq	r3, #0	; 0x0
c7e12868:	12033001 	andne	r3, r3, #1	; 0x1
c7e1286c:	e3530000 	cmp	r3, #0	; 0x0
c7e12870:	0a00003f 	beq	c7e12974 <sdhci_send_command+0x3bc>
c7e12874:	e59f918c 	ldr	r9, [pc, #396]	; c7e12a08 <sdhci_send_command+0x450>
c7e12878:	e3a07000 	mov	r7, #0	; 0x0
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e1287c:	e5953004 	ldr	r3, [r5, #4]
c7e12880:	e5934030 	ldr	r4, [r3, #48]
	timeout = 10000;
	rdy = SDHCI_INT_SPACE_AVAIL | SDHCI_INT_DATA_AVAIL;
	mask = SDHCI_DATA_AVAILABLE | SDHCI_SPACE_AVAILABLE;
	do {
		stat = sdhci_readl(host, SDHCI_INT_STATUS);
		if (stat & SDHCI_INT_ERROR) {
c7e12884:	e2141902 	ands	r1, r4, #32768	; 0x8000
c7e12888:	0a000003 	beq	c7e1289c <sdhci_send_command+0x2e4>
			printf("Error detected in status(0x%X)!\n", stat);
c7e1288c:	e1a01004 	mov	r1, r4
c7e12890:	e59f0178 	ldr	r0, [pc, #376]	; c7e12a10 <sdhci_send_command+0x458>
c7e12894:	ebffd86f 	bl	c7e08a58 <printf>
c7e12898:	ea000030 	b	c7e12960 <sdhci_send_command+0x3a8>
			return -1;
		}
		if (stat & rdy) {
c7e1289c:	e3140030 	tst	r4, #48	; 0x30
c7e128a0:	0a00001c 	beq	c7e12918 <sdhci_send_command+0x360>
c7e128a4:	e5953004 	ldr	r3, [r5, #4]
c7e128a8:	e5933024 	ldr	r3, [r3, #36]
			if (!(sdhci_readl(host, SDHCI_PRESENT_STATE) & mask))
c7e128ac:	e3130b03 	tst	r3, #3072	; 0xc00
c7e128b0:	0a00002c 	beq	c7e12968 <sdhci_send_command+0x3b0>

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e128b4:	e5952004 	ldr	r2, [r5, #4]
c7e128b8:	e3a03030 	mov	r3, #48	; 0x30
c7e128bc:	e5823030 	str	r3, [r2, #48]
c7e128c0:	ea00000a 	b	c7e128f0 <sdhci_send_command+0x338>
{
	int i;
	char *offs;
	for (i = 0; i < data->blocksize; i += 4) {
		offs = data->dest + i;
		if (data->flags == MMC_DATA_READ)
c7e128c4:	e5963004 	ldr	r3, [r6, #4]
c7e128c8:	e3530001 	cmp	r3, #1	; 0x1
c7e128cc:	1a000003 	bne	c7e128e0 <sdhci_send_command+0x328>
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e128d0:	e5953004 	ldr	r3, [r5, #4]
c7e128d4:	e5933020 	ldr	r3, [r3, #32]
			*(u32 *)offs = sdhci_readl(host, SDHCI_BUFFER);
c7e128d8:	e7803001 	str	r3, [r0, r1]
c7e128dc:	ea000002 	b	c7e128ec <sdhci_send_command+0x334>
		else
			sdhci_writel(host, *(u32 *)offs, SDHCI_BUFFER);
c7e128e0:	e7902001 	ldr	r2, [r0, r1]

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e128e4:	e5953004 	ldr	r3, [r5, #4]
c7e128e8:	e5832020 	str	r2, [r3, #32]

static void sdhci_transfer_pio(struct sdhci_host *host, struct mmc_data *data)
{
	int i;
	char *offs;
	for (i = 0; i < data->blocksize; i += 4) {
c7e128ec:	e2811004 	add	r1, r1, #4	; 0x4
c7e128f0:	e596300c 	ldr	r3, [r6, #12]
c7e128f4:	e5960000 	ldr	r0, [r6]
c7e128f8:	e1510003 	cmp	r1, r3
c7e128fc:	3afffff0 	bcc	c7e128c4 <sdhci_send_command+0x30c>
			if (!(sdhci_readl(host, SDHCI_PRESENT_STATE) & mask))
				continue;
			sdhci_writel(host, rdy, SDHCI_INT_STATUS);
			sdhci_transfer_pio(host, data);
			data->dest += data->blocksize;
			if (++block >= data->blocks)
c7e12900:	e5962008 	ldr	r2, [r6, #8]
c7e12904:	e2877001 	add	r7, r7, #1	; 0x1
		if (stat & rdy) {
			if (!(sdhci_readl(host, SDHCI_PRESENT_STATE) & mask))
				continue;
			sdhci_writel(host, rdy, SDHCI_INT_STATUS);
			sdhci_transfer_pio(host, data);
			data->dest += data->blocksize;
c7e12908:	e0803003 	add	r3, r0, r3
			if (++block >= data->blocks)
c7e1290c:	e1570002 	cmp	r7, r2
		if (stat & rdy) {
			if (!(sdhci_readl(host, SDHCI_PRESENT_STATE) & mask))
				continue;
			sdhci_writel(host, rdy, SDHCI_INT_STATUS);
			sdhci_transfer_pio(host, data);
			data->dest += data->blocksize;
c7e12910:	e5863000 	str	r3, [r6]
			if (++block >= data->blocks)
c7e12914:	2a000015 	bcs	c7e12970 <sdhci_send_command+0x3b8>
				break;
		}
#ifdef CONFIG_MMC_SDMA
		if (stat & SDHCI_INT_DMA_END) {
c7e12918:	e3140008 	tst	r4, #8	; 0x8
c7e1291c:	0a000007 	beq	c7e12940 <sdhci_send_command+0x388>
			sdhci_writel(host, SDHCI_INT_DMA_END, SDHCI_INT_STATUS);
			start_addr &= ~(SDHCI_DEFAULT_BOUNDARY_SIZE - 1);
c7e12920:	e1a029aa 	lsr	r2, sl, #19
c7e12924:	e5951004 	ldr	r1, [r5, #4]
c7e12928:	e1a02982 	lsl	r2, r2, #19
c7e1292c:	e3a03008 	mov	r3, #8	; 0x8
c7e12930:	e5813030 	str	r3, [r1, #48]
			start_addr += SDHCI_DEFAULT_BOUNDARY_SIZE;
c7e12934:	e282a702 	add	sl, r2, #524288	; 0x80000
c7e12938:	e5953004 	ldr	r3, [r5, #4]
c7e1293c:	e583a000 	str	sl, [r3]
			sdhci_writel(host, start_addr, SDHCI_DMA_ADDRESS);
		}
#endif
		if (timeout-- > 0)
c7e12940:	e3590000 	cmp	r9, #0	; 0x0
c7e12944:	0a000003 	beq	c7e12958 <sdhci_send_command+0x3a0>
			udelay(10);
c7e12948:	e3a0000a 	mov	r0, #10	; 0xa
			start_addr &= ~(SDHCI_DEFAULT_BOUNDARY_SIZE - 1);
			start_addr += SDHCI_DEFAULT_BOUNDARY_SIZE;
			sdhci_writel(host, start_addr, SDHCI_DMA_ADDRESS);
		}
#endif
		if (timeout-- > 0)
c7e1294c:	e2499001 	sub	r9, r9, #1	; 0x1
			udelay(10);
c7e12950:	eb00415c 	bl	c7e22ec8 <udelay>
c7e12954:	ea000003 	b	c7e12968 <sdhci_send_command+0x3b0>
		else {
			printf("Transfer data timeout\n");
c7e12958:	e59f00b4 	ldr	r0, [pc, #180]	; c7e12a14 <sdhci_send_command+0x45c>
c7e1295c:	ebffd83d 	bl	c7e08a58 <printf>
c7e12960:	e3e04000 	mvn	r4, #0	; 0x0
c7e12964:	ea000002 	b	c7e12974 <sdhci_send_command+0x3bc>
			return -1;
		}
	} while (!(stat & SDHCI_INT_DATA_END));
c7e12968:	e3140002 	tst	r4, #2	; 0x2
c7e1296c:	0affffc2 	beq	c7e1287c <sdhci_send_command+0x2c4>
c7e12970:	e3a04000 	mov	r4, #0	; 0x0
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12974:	e5953004 	ldr	r3, [r5, #4]
c7e12978:	e5937030 	ldr	r7, [r3, #48]

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e1297c:	e5952004 	ldr	r2, [r5, #4]
c7e12980:	e3e03000 	mvn	r3, #0	; 0x0
	if (!ret && data)
		ret = sdhci_transfer_data(host, data, start_addr);

	stat = sdhci_readl(host, SDHCI_INT_STATUS);
	sdhci_writel(host, SDHCI_INT_ALL_MASK, SDHCI_INT_STATUS);
	if (!ret) {
c7e12984:	e3540000 	cmp	r4, #0	; 0x0
c7e12988:	e5823030 	str	r3, [r2, #48]
c7e1298c:	1a00000e 	bne	c7e129cc <sdhci_send_command+0x414>
		if ((host->quirks & SDHCI_QUIRK_32BIT_DMA_ADDR) &&
c7e12990:	e59d100c 	ldr	r1, [sp, #12]
c7e12994:	e5952008 	ldr	r2, [r5, #8]
c7e12998:	e2213001 	eor	r3, r1, #1	; 0x1
c7e1299c:	e1120003 	tst	r2, r3
c7e129a0:	0a000013 	beq	c7e129f4 <sdhci_send_command+0x43c>
c7e129a4:	e5963004 	ldr	r3, [r6, #4]
c7e129a8:	e3530001 	cmp	r3, #1	; 0x1
c7e129ac:	1a000010 	bne	c7e129f4 <sdhci_send_command+0x43c>
				!is_aligned && (data->flags == MMC_DATA_READ))
			memcpy(data->dest, aligned_buffer, trans_bytes);
c7e129b0:	e59f304c 	ldr	r3, [pc, #76]	; c7e12a04 <sdhci_send_command+0x44c>
c7e129b4:	e5960000 	ldr	r0, [r6]
c7e129b8:	e5931000 	ldr	r1, [r3]
c7e129bc:	e59d2008 	ldr	r2, [sp, #8]
c7e129c0:	eb00409d 	bl	c7e22c3c <memcpy>
c7e129c4:	e1a00004 	mov	r0, r4
c7e129c8:	ea00000a 	b	c7e129f8 <sdhci_send_command+0x440>
		return 0;
	}

	sdhci_reset(host, SDHCI_RESET_CMD);
c7e129cc:	e3a01002 	mov	r1, #2	; 0x2
c7e129d0:	e1a00005 	mov	r0, r5
c7e129d4:	ebfffda4 	bl	c7e1206c <sdhci_reset>
	sdhci_reset(host, SDHCI_RESET_DATA);
c7e129d8:	e1a00005 	mov	r0, r5
c7e129dc:	e3a01004 	mov	r1, #4	; 0x4
c7e129e0:	ebfffda1 	bl	c7e1206c <sdhci_reset>
	if (stat & SDHCI_INT_TIMEOUT)
c7e129e4:	e3170801 	tst	r7, #65536	; 0x10000
c7e129e8:	13e00012 	mvnne	r0, #18	; 0x12
c7e129ec:	03e00011 	mvneq	r0, #17	; 0x11
c7e129f0:	ea000000 	b	c7e129f8 <sdhci_send_command+0x440>
c7e129f4:	e3a00000 	mov	r0, #0	; 0x0
		return TIMEOUT;
	else
		return COMM_ERR;
}
c7e129f8:	e28dd010 	add	sp, sp, #16	; 0x10
c7e129fc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e12a00:	c7e32f3b 	.word	0xc7e32f3b
c7e12a04:	c7e41e4c 	.word	0xc7e41e4c
c7e12a08:	00002710 	.word	0x00002710
c7e12a0c:	c7e32f66 	.word	0xc7e32f66
c7e12a10:	c7e32f82 	.word	0xc7e32f82
c7e12a14:	c7e32fa3 	.word	0xc7e32fa3

c7e12a18 <s3c_sdhci_set_control_reg>:
c7e12a18:	e5902004 	ldr	r2, [r0, #4]
c7e12a1c:	e3a03803 	mov	r3, #196608	; 0x30000
c7e12a20:	e582308c 	str	r3, [r2, #140]
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12a24:	e5923080 	ldr	r3, [r2, #128]
	 * 11 = 9mA
	 */
	sdhci_writel(host, SDHCI_CTRL4_DRIVE_MASK(0x3), SDHCI_CONTROL4);

	val = sdhci_readl(host, SDHCI_CONTROL2);
	val &= SDHCI_CTRL2_SELBASECLK_SHIFT;
c7e12a28:	e2033004 	and	r3, r3, #4	; 0x4

	val |=	SDHCI_CTRL2_ENSTAASYNCCLR |
c7e12a2c:	e3833103 	orr	r3, r3, #-1073741824	; 0xc0000000
c7e12a30:	e3833c41 	orr	r3, r3, #16640	; 0x4100

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e12a34:	e5902004 	ldr	r2, [r0, #4]
c7e12a38:	e5823080 	str	r3, [r2, #128]
{
	writeb(val, host->ioaddr + reg);
}
static inline u32 sdhci_readl(struct sdhci_host *host, int reg)
{
	return readl(host->ioaddr + reg);
c7e12a3c:	e59f301c 	ldr	r3, [pc, #28]	; c7e12a60 <s3c_sdhci_set_control_reg+0x48>
c7e12a40:	e5902004 	ldr	r2, [r0, #4]
c7e12a44:	e5823084 	str	r3, [r2, #132]
c7e12a48:	e5923080 	ldr	r3, [r2, #128]
	 * 00/01 = HCLK
	 * 10 = EPLL
	 * 11 = XTI or XEXTCLK
	 */
	ctrl = sdhci_readl(host, SDHCI_CONTROL2);
	ctrl &= ~SDHCI_CTRL2_SELBASECLK_MASK(0x3);
c7e12a4c:	e3c33030 	bic	r3, r3, #48	; 0x30
	ctrl |= SDHCI_CTRL2_SELBASECLK_MASK(0x2);
c7e12a50:	e3833020 	orr	r3, r3, #32	; 0x20

#else

static inline void sdhci_writel(struct sdhci_host *host, u32 val, int reg)
{
	writel(val, host->ioaddr + reg);
c7e12a54:	e5902004 	ldr	r2, [r0, #4]
c7e12a58:	e5823080 	str	r3, [r2, #128]
	sdhci_writel(host, ctrl, SDHCI_CONTROL2);
}
c7e12a5c:	e12fff1e 	bx	lr
c7e12a60:	00008080 	.word	0x00008080

c7e12a64 <s3c_sdhci_init>:

int s3c_sdhci_init(u32 regbase, int index, int bus_width)
{
c7e12a64:	e92d4070 	push	{r4, r5, r6, lr}
c7e12a68:	e1a04000 	mov	r4, r0
	struct sdhci_host *host = NULL;
	host = (struct sdhci_host *)malloc(sizeof(struct sdhci_host));
c7e12a6c:	e3a00030 	mov	r0, #48	; 0x30
	ctrl |= SDHCI_CTRL2_SELBASECLK_MASK(0x2);
	sdhci_writel(host, ctrl, SDHCI_CONTROL2);
}

int s3c_sdhci_init(u32 regbase, int index, int bus_width)
{
c7e12a70:	e1a05001 	mov	r5, r1
	struct sdhci_host *host = NULL;
	host = (struct sdhci_host *)malloc(sizeof(struct sdhci_host));
c7e12a74:	ebffd9c8 	bl	c7e0919c <malloc>
	if (!host) {
c7e12a78:	e250c000 	subs	ip, r0, #0	; 0x0
c7e12a7c:	1a000003 	bne	c7e12a90 <s3c_sdhci_init+0x2c>
		printf("sdhci__host malloc fail!\n");
c7e12a80:	e59f007c 	ldr	r0, [pc, #124]	; c7e12b04 <s3c_sdhci_init+0xa0>
c7e12a84:	ebffd7f3 	bl	c7e08a58 <printf>
c7e12a88:	e3a00001 	mov	r0, #1	; 0x1
c7e12a8c:	e8bd8070 	pop	{r4, r5, r6, pc}
static char *S3C_NAME = "SAMSUNG SDHCI";
static void sdhc_set_gpio()
{
    u32 reg;
#if (MMC_CHANNEL == 0)
    reg = readl(GPGCON) & 0xf0000000;
c7e12a90:	e59f1070 	ldr	r1, [pc, #112]	; c7e12b08 <s3c_sdhci_init+0xa4>
c7e12a94:	e59130c0 	ldr	r3, [r1, #192]
    writel(reg | 0x02222222, GPGCON);
c7e12a98:	e59f206c 	ldr	r2, [pc, #108]	; c7e12b0c <s3c_sdhci_init+0xa8>
c7e12a9c:	e203320f 	and	r3, r3, #-268435456	; 0xf0000000
c7e12aa0:	e1832002 	orr	r2, r3, r2
c7e12aa4:	e58120c0 	str	r2, [r1, #192]

    reg = readl(GPGPUD) & 0xfffff000;
c7e12aa8:	e59130c8 	ldr	r3, [r1, #200]
c7e12aac:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
c7e12ab0:	e3c3300f 	bic	r3, r3, #15	; 0xf
    writel(reg, GPGPUD);
c7e12ab4:	e58130c8 	str	r3, [r1, #200]
	if (!host) {
		printf("sdhci__host malloc fail!\n");
		return 1;
	}
	sdhc_set_gpio();
	host->name = S3C_NAME;
c7e12ab8:	e59f3050 	ldr	r3, [pc, #80]	; c7e12b10 <s3c_sdhci_init+0xac>
	return readl(host->ioaddr + reg);
}

static inline u16 sdhci_readw(struct sdhci_host *host, int reg)
{
	return readw(host->ioaddr + reg);
c7e12abc:	e1d42fbe 	ldrh	r2, [r4, #254]
c7e12ac0:	e5933000 	ldr	r3, [r3]
	host->ioaddr = (void *)regbase;
c7e12ac4:	e88c0018 	stm	ip, {r3, r4}

	host->quirks = SDHCI_QUIRK_NO_HISPD_BIT | SDHCI_QUIRK_BROKEN_VOLTAGE |
c7e12ac8:	e3a0301d 	mov	r3, #29	; 0x1d
c7e12acc:	e58c3008 	str	r3, [ip, #8]
		SDHCI_QUIRK_BROKEN_R1B | SDHCI_QUIRK_32BIT_DMA_ADDR;
	host->voltages = MMC_VDD_32_33 | MMC_VDD_33_34 | MMC_VDD_165_195;
c7e12ad0:	e59f303c 	ldr	r3, [pc, #60]	; c7e12b14 <s3c_sdhci_init+0xb0>
c7e12ad4:	e58c302c 	str	r3, [ip, #44]

	host->set_control_reg = &s3c_sdhci_set_control_reg;
	//host->set_clock = set_mmc_clk;
	host->index = index;

	host->host_caps = MMC_MODE_HC;
c7e12ad8:	e3a03b02 	mov	r3, #2048	; 0x800
c7e12adc:	e58c300c 	str	r3, [ip, #12]
	host->quirks = SDHCI_QUIRK_NO_HISPD_BIT | SDHCI_QUIRK_BROKEN_VOLTAGE |
		SDHCI_QUIRK_BROKEN_R1B | SDHCI_QUIRK_32BIT_DMA_ADDR;
	host->voltages = MMC_VDD_32_33 | MMC_VDD_33_34 | MMC_VDD_165_195;
	host->version = sdhci_readw(host, SDHCI_HOST_VERSION);

	host->set_control_reg = &s3c_sdhci_set_control_reg;
c7e12ae0:	e59f3030 	ldr	r3, [pc, #48]	; c7e12b18 <s3c_sdhci_init+0xb4>
	host->ioaddr = (void *)regbase;

	host->quirks = SDHCI_QUIRK_NO_HISPD_BIT | SDHCI_QUIRK_BROKEN_VOLTAGE |
		SDHCI_QUIRK_BROKEN_R1B | SDHCI_QUIRK_32BIT_DMA_ADDR;
	host->voltages = MMC_VDD_32_33 | MMC_VDD_33_34 | MMC_VDD_165_195;
	host->version = sdhci_readw(host, SDHCI_HOST_VERSION);
c7e12ae4:	e58c2010 	str	r2, [ip, #16]

	host->set_control_reg = &s3c_sdhci_set_control_reg;
c7e12ae8:	e58c3024 	str	r3, [ip, #36]
	//host->set_clock = set_mmc_clk;
	host->index = index;
c7e12aec:	e58c5020 	str	r5, [ip, #32]

	host->host_caps = MMC_MODE_HC;

	add_sdhci(host, 52000000, 400000);
c7e12af0:	e59f1024 	ldr	r1, [pc, #36]	; c7e12b1c <s3c_sdhci_init+0xb8>
c7e12af4:	e59f2024 	ldr	r2, [pc, #36]	; c7e12b20 <s3c_sdhci_init+0xbc>
c7e12af8:	ebfffd72 	bl	c7e120c8 <add_sdhci>
c7e12afc:	e3a00000 	mov	r0, #0	; 0x0
	return 0;
}
c7e12b00:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e12b04:	c7e32fba 	.word	0xc7e32fba
c7e12b08:	7f008000 	.word	0x7f008000
c7e12b0c:	02222222 	.word	0x02222222
c7e12b10:	c7e2c624 	.word	0xc7e2c624
c7e12b14:	00300080 	.word	0x00300080
c7e12b18:	c7e12a18 	.word	0xc7e12a18
c7e12b1c:	03197500 	.word	0x03197500
c7e12b20:	00061a80 	.word	0x00061a80

c7e12b24 <nand_register>:

static unsigned long total_nand_size; /* in kiB */

/* Register an initialized NAND mtd device with the U-Boot NAND command. */
int nand_register(int devnum)
{
c7e12b24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct mtd_info *mtd;

	if (devnum >= CONFIG_SYS_MAX_NAND_DEVICE)
c7e12b28:	e2507000 	subs	r7, r0, #0	; 0x0
c7e12b2c:	c3e00015 	mvngt	r0, #21	; 0x15
c7e12b30:	c8bd81f0 	popgt	{r4, r5, r6, r7, r8, pc}
		return -EINVAL;

	mtd = &nand_info[devnum];
c7e12b34:	e59f5058 	ldr	r5, [pc, #88]	; c7e12b94 <nand_register+0x70>
c7e12b38:	e3a030a8 	mov	r3, #168	; 0xa8
c7e12b3c:	e0265793 	mla	r6, r3, r7, r5

	sprintf(dev_name[devnum], "nand%d", devnum);
c7e12b40:	e0854003 	add	r4, r5, r3
c7e12b44:	e0844187 	add	r4, r4, r7, lsl #3
c7e12b48:	e1a02007 	mov	r2, r7
c7e12b4c:	e1a00004 	mov	r0, r4
c7e12b50:	e59f1040 	ldr	r1, [pc, #64]	; c7e12b98 <nand_register+0x74>
c7e12b54:	eb0044b5 	bl	c7e23e30 <sprintf>
	add_mtd_device(mtd);
#endif

	total_nand_size += mtd->size / 1024;

	if (nand_curr_device == -1)
c7e12b58:	e59fc03c 	ldr	ip, [pc, #60]	; c7e12b9c <nand_register+0x78>
	 * via the mtdcore infrastructure (e.g. ubi).
	 */
	add_mtd_device(mtd);
#endif

	total_nand_size += mtd->size / 1024;
c7e12b5c:	e5963008 	ldr	r3, [r6, #8]
c7e12b60:	e596000c 	ldr	r0, [r6, #12]
c7e12b64:	e59520b0 	ldr	r2, [r5, #176]

	if (nand_curr_device == -1)
c7e12b68:	e59c1000 	ldr	r1, [ip]
	 * via the mtdcore infrastructure (e.g. ubi).
	 */
	add_mtd_device(mtd);
#endif

	total_nand_size += mtd->size / 1024;
c7e12b6c:	e1a03523 	lsr	r3, r3, #10
c7e12b70:	e1833b00 	orr	r3, r3, r0, lsl #22

	if (nand_curr_device == -1)
c7e12b74:	e3710001 	cmn	r1, #1	; 0x1
	 * via the mtdcore infrastructure (e.g. ubi).
	 */
	add_mtd_device(mtd);
#endif

	total_nand_size += mtd->size / 1024;
c7e12b78:	e0822003 	add	r2, r2, r3
c7e12b7c:	e58520b0 	str	r2, [r5, #176]
		return -EINVAL;

	mtd = &nand_info[devnum];

	sprintf(dev_name[devnum], "nand%d", devnum);
	mtd->name = dev_name[devnum];
c7e12b80:	e5864020 	str	r4, [r6, #32]
	add_mtd_device(mtd);
#endif

	total_nand_size += mtd->size / 1024;

	if (nand_curr_device == -1)
c7e12b84:	13a00000 	movne	r0, #0	; 0x0
		nand_curr_device = devnum;
c7e12b88:	058c7000 	streq	r7, [ip]
c7e12b8c:	03a00000 	moveq	r0, #0	; 0x0

	return 0;
}
c7e12b90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e12b94:	c7e41e50 	.word	0xc7e41e50
c7e12b98:	c7e32fe2 	.word	0xc7e32fe2
c7e12b9c:	c7e395c4 	.word	0xc7e395c4

c7e12ba0 <nand_init>:
	nand_register(i);
}
#endif

void nand_init(void)
{
c7e12ba0:	e92d4010 	push	{r4, lr}
	int maxchips = CONFIG_SYS_NAND_MAX_CHIPS;

	if (maxchips < 1)
		maxchips = 1;

	mtd->priv = nand;
c7e12ba4:	e59f4050 	ldr	r4, [pc, #80]	; c7e12bfc <nand_init+0x5c>
	nand->IO_ADDR_R = nand->IO_ADDR_W = (void  __iomem *)base_addr;
c7e12ba8:	e59f2050 	ldr	r2, [pc, #80]	; c7e12c00 <nand_init+0x60>
	int maxchips = CONFIG_SYS_NAND_MAX_CHIPS;

	if (maxchips < 1)
		maxchips = 1;

	mtd->priv = nand;
c7e12bac:	e28430b8 	add	r3, r4, #184	; 0xb8
	nand->IO_ADDR_R = nand->IO_ADDR_W = (void  __iomem *)base_addr;

	if (board_nand_init(nand))
c7e12bb0:	e1a00003 	mov	r0, r3

	if (maxchips < 1)
		maxchips = 1;

	mtd->priv = nand;
	nand->IO_ADDR_R = nand->IO_ADDR_W = (void  __iomem *)base_addr;
c7e12bb4:	e58420b8 	str	r2, [r4, #184]
	int maxchips = CONFIG_SYS_NAND_MAX_CHIPS;

	if (maxchips < 1)
		maxchips = 1;

	mtd->priv = nand;
c7e12bb8:	e5843094 	str	r3, [r4, #148]
	nand->IO_ADDR_R = nand->IO_ADDR_W = (void  __iomem *)base_addr;
c7e12bbc:	e58420bc 	str	r2, [r4, #188]

	if (board_nand_init(nand))
c7e12bc0:	eb001a15 	bl	c7e1941c <board_nand_init>
c7e12bc4:	e3500000 	cmp	r0, #0	; 0x0
c7e12bc8:	1a000005 	bne	c7e12be4 <nand_init+0x44>
		return;

	if (nand_scan(mtd, maxchips))
c7e12bcc:	e1a00004 	mov	r0, r4
c7e12bd0:	e3a01001 	mov	r1, #1	; 0x1
c7e12bd4:	eb00125c 	bl	c7e1754c <nand_scan>
c7e12bd8:	e3500000 	cmp	r0, #0	; 0x0
c7e12bdc:	1a000000 	bne	c7e12be4 <nand_init+0x44>
		return;

	nand_register(i);
c7e12be0:	ebffffcf 	bl	c7e12b24 <nand_register>

	for (i = 0; i < CONFIG_SYS_MAX_NAND_DEVICE; i++)
		nand_init_chip(i);
#endif

	printf("%lu MiB\n", total_nand_size / 1024);
c7e12be4:	e59f3010 	ldr	r3, [pc, #16]	; c7e12bfc <nand_init+0x5c>
c7e12be8:	e59f0014 	ldr	r0, [pc, #20]	; c7e12c04 <nand_init+0x64>
c7e12bec:	e59310b0 	ldr	r1, [r3, #176]
c7e12bf0:	e1a01521 	lsr	r1, r1, #10
	/*
	 * Select the chip in the board/cpu specific driver
	 */
	board_nand_select_device(nand_info[nand_curr_device].priv, nand_curr_device);
#endif
}
c7e12bf4:	e8bd4010 	pop	{r4, lr}

	for (i = 0; i < CONFIG_SYS_MAX_NAND_DEVICE; i++)
		nand_init_chip(i);
#endif

	printf("%lu MiB\n", total_nand_size / 1024);
c7e12bf8:	eaffd796 	b	c7e08a58 <printf>
c7e12bfc:	c7e41e50 	.word	0xc7e41e50
c7e12c00:	70200010 	.word	0x70200010
c7e12c04:	c7e32fe9 	.word	0xc7e32fe9

c7e12c08 <scan_read_raw_oob>:
/*
 * Scan read raw data from flash
 */
static int scan_read_raw_oob(struct mtd_info *mtd, uint8_t *buf, loff_t offs,
			 size_t len)
{
c7e12c08:	e92d4cf0 	push	{r4, r5, r6, r7, sl, fp, lr}
	struct mtd_oob_ops ops;
	int res;

	ops.mode = MTD_OOB_RAW;
c7e12c0c:	e3a0c002 	mov	ip, #2	; 0x2
/*
 * Scan read raw data from flash
 */
static int scan_read_raw_oob(struct mtd_info *mtd, uint8_t *buf, loff_t offs,
			 size_t len)
{
c7e12c10:	e24dd02c 	sub	sp, sp, #44	; 0x2c
c7e12c14:	e1a05000 	mov	r5, r0
	struct mtd_oob_ops ops;
	int res;

	ops.mode = MTD_OOB_RAW;
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;
c7e12c18:	e5900018 	ldr	r0, [r0, #24]
			 size_t len)
{
	struct mtd_oob_ops ops;
	int res;

	ops.mode = MTD_OOB_RAW;
c7e12c1c:	e58dc008 	str	ip, [sp, #8]
	ops.ooboffs = 0;
c7e12c20:	e3a0c000 	mov	ip, #0	; 0x0
c7e12c24:	e58dc01c 	str	ip, [sp, #28]
	ops.ooblen = mtd->oobsize;
c7e12c28:	e58d0014 	str	r0, [sp, #20]
/*
 * Scan read raw data from flash
 */
static int scan_read_raw_oob(struct mtd_info *mtd, uint8_t *buf, loff_t offs,
			 size_t len)
{
c7e12c2c:	e1a06001 	mov	r6, r1
c7e12c30:	e1a0a002 	mov	sl, r2
c7e12c34:	e1a0b003 	mov	fp, r3
c7e12c38:	e59d4048 	ldr	r4, [sp, #72]
c7e12c3c:	ea00001b 	b	c7e12cb0 <scan_read_raw_oob+0xa8>
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;


	while (len > 0) {
		if (len <= mtd->writesize) {
c7e12c40:	e5951014 	ldr	r1, [r5, #20]
c7e12c44:	e28de008 	add	lr, sp, #8	; 0x8
c7e12c48:	e1540001 	cmp	r4, r1
			ops.oobbuf = buf + len;
			ops.datbuf = buf;
			ops.len = len;
			return mtd->read_oob(mtd, offs, &ops);
		} else {
			ops.oobbuf = buf + mtd->writesize;
c7e12c4c:	e086c001 	add	ip, r6, r1
c7e12c50:	e595704c 	ldr	r7, [r5, #76]
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;


	while (len > 0) {
		if (len <= mtd->writesize) {
c7e12c54:	8a000009 	bhi	c7e12c80 <scan_read_raw_oob+0x78>
			ops.oobbuf = buf + len;
c7e12c58:	e0863004 	add	r3, r6, r4
c7e12c5c:	e58d3024 	str	r3, [sp, #36]
			ops.datbuf = buf;
c7e12c60:	e58d6020 	str	r6, [sp, #32]
			ops.len = len;
c7e12c64:	e58d400c 	str	r4, [sp, #12]
			return mtd->read_oob(mtd, offs, &ops);
c7e12c68:	e58de000 	str	lr, [sp]
c7e12c6c:	e1a00005 	mov	r0, r5
c7e12c70:	e1a0200a 	mov	r2, sl
c7e12c74:	e1a0300b 	mov	r3, fp
c7e12c78:	e12fff37 	blx	r7
c7e12c7c:	ea000011 	b	c7e12cc8 <scan_read_raw_oob+0xc0>
		} else {
			ops.oobbuf = buf + mtd->writesize;
c7e12c80:	e58dc024 	str	ip, [sp, #36]
			ops.datbuf = buf;
			ops.len = mtd->writesize;
c7e12c84:	e58d100c 	str	r1, [sp, #12]
			res = mtd->read_oob(mtd, offs, &ops);
c7e12c88:	e58de000 	str	lr, [sp]
			ops.datbuf = buf;
			ops.len = len;
			return mtd->read_oob(mtd, offs, &ops);
		} else {
			ops.oobbuf = buf + mtd->writesize;
			ops.datbuf = buf;
c7e12c8c:	e58d6020 	str	r6, [sp, #32]
			ops.len = mtd->writesize;
			res = mtd->read_oob(mtd, offs, &ops);
c7e12c90:	e12fff37 	blx	r7

			if (res)
c7e12c94:	e3500000 	cmp	r0, #0	; 0x0
c7e12c98:	1a00000a 	bne	c7e12cc8 <scan_read_raw_oob+0xc0>
				return res;
		}

		buf += mtd->oobsize + mtd->writesize;
c7e12c9c:	e5953014 	ldr	r3, [r5, #20]
c7e12ca0:	e5952018 	ldr	r2, [r5, #24]
		len -= mtd->writesize;
c7e12ca4:	e0634004 	rsb	r4, r3, r4

			if (res)
				return res;
		}

		buf += mtd->oobsize + mtd->writesize;
c7e12ca8:	e0833002 	add	r3, r3, r2
c7e12cac:	e0866003 	add	r6, r6, r3
	ops.mode = MTD_OOB_RAW;
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;


	while (len > 0) {
c7e12cb0:	e3540000 	cmp	r4, #0	; 0x0
			return mtd->read_oob(mtd, offs, &ops);
		} else {
			ops.oobbuf = buf + mtd->writesize;
			ops.datbuf = buf;
			ops.len = mtd->writesize;
			res = mtd->read_oob(mtd, offs, &ops);
c7e12cb4:	e1a00005 	mov	r0, r5
c7e12cb8:	e1a0200a 	mov	r2, sl
c7e12cbc:	e1a0300b 	mov	r3, fp
	ops.mode = MTD_OOB_RAW;
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;


	while (len > 0) {
c7e12cc0:	1affffde 	bne	c7e12c40 <scan_read_raw_oob+0x38>
c7e12cc4:	e1a00004 	mov	r0, r4

		buf += mtd->oobsize + mtd->writesize;
		len -= mtd->writesize;
	}
	return 0;
}
c7e12cc8:	e28dd02c 	add	sp, sp, #44	; 0x2c
c7e12ccc:	e8bd8cf0 	pop	{r4, r5, r6, r7, sl, fp, pc}

c7e12cd0 <scan_read_raw>:

static int scan_read_raw(struct mtd_info *mtd, uint8_t *buf, loff_t offs,
			 size_t len, struct nand_bbt_descr *td)
{
c7e12cd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
c7e12cd4:	e24dd01c 	sub	sp, sp, #28	; 0x1c
c7e12cd8:	e59d7034 	ldr	r7, [sp, #52]
c7e12cdc:	e1a06000 	mov	r6, r0
	if (td->options & NAND_BBT_NO_OOB)
c7e12ce0:	e597c000 	ldr	ip, [r7]
	return 0;
}

static int scan_read_raw(struct mtd_info *mtd, uint8_t *buf, loff_t offs,
			 size_t len, struct nand_bbt_descr *td)
{
c7e12ce4:	e1a04002 	mov	r4, r2
	if (td->options & NAND_BBT_NO_OOB)
c7e12ce8:	e31c0501 	tst	ip, #4194304	; 0x400000
	return 0;
}

static int scan_read_raw(struct mtd_info *mtd, uint8_t *buf, loff_t offs,
			 size_t len, struct nand_bbt_descr *td)
{
c7e12cec:	e1a05003 	mov	r5, r3
	if (td->options & NAND_BBT_NO_OOB)
c7e12cf0:	0a00000a 	beq	c7e12d20 <scan_read_raw+0x50>
			 struct nand_bbt_descr *td)
{
	size_t retlen;
	size_t len;

	len = td->len;
c7e12cf4:	e5973014 	ldr	r3, [r7, #20]
	if (td->options & NAND_BBT_VERSION)
c7e12cf8:	e31c0c01 	tst	ip, #256	; 0x100
		len++;
c7e12cfc:	12833001 	addne	r3, r3, #1	; 0x1

	return mtd->read(mtd, offs, len, &retlen, buf);
c7e12d00:	e58d3000 	str	r3, [sp]
c7e12d04:	e28d3014 	add	r3, sp, #20	; 0x14
c7e12d08:	e58d3004 	str	r3, [sp, #4]
c7e12d0c:	e58d1008 	str	r1, [sp, #8]
c7e12d10:	e1a03005 	mov	r3, r5
c7e12d14:	e1a0e00f 	mov	lr, pc
c7e12d18:	e596f040 	ldr	pc, [r6, #64]
c7e12d1c:	ea000002 	b	c7e12d2c <scan_read_raw+0x5c>
			 size_t len, struct nand_bbt_descr *td)
{
	if (td->options & NAND_BBT_NO_OOB)
		return scan_read_raw_data(mtd, buf, offs, td);
	else
		return scan_read_raw_oob(mtd, buf, offs, len);
c7e12d20:	e59dc030 	ldr	ip, [sp, #48]
c7e12d24:	e58dc000 	str	ip, [sp]
c7e12d28:	ebffffb6 	bl	c7e12c08 <scan_read_raw_oob>
}
c7e12d2c:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e12d30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

c7e12d34 <bbt_get_ver_offs>:

static u32 bbt_get_ver_offs(struct mtd_info *mtd, struct nand_bbt_descr *td)
{
	u32 ver_offs = td->veroffs;

	if (!(td->options & NAND_BBT_NO_OOB))
c7e12d34:	e5913000 	ldr	r3, [r1]

	return mtd->write_oob(mtd, offs, &ops);
}

static u32 bbt_get_ver_offs(struct mtd_info *mtd, struct nand_bbt_descr *td)
{
c7e12d38:	e1a02000 	mov	r2, r0
	u32 ver_offs = td->veroffs;

	if (!(td->options & NAND_BBT_NO_OOB))
c7e12d3c:	e3130501 	tst	r3, #4194304	; 0x400000
	return mtd->write_oob(mtd, offs, &ops);
}

static u32 bbt_get_ver_offs(struct mtd_info *mtd, struct nand_bbt_descr *td)
{
	u32 ver_offs = td->veroffs;
c7e12d40:	e591000c 	ldr	r0, [r1, #12]

	if (!(td->options & NAND_BBT_NO_OOB))
		ver_offs += mtd->writesize;
c7e12d44:	05923014 	ldreq	r3, [r2, #20]
c7e12d48:	00800003 	addeq	r0, r0, r3
	return ver_offs;
}
c7e12d4c:	e12fff1e 	bx	lr

c7e12d50 <nand_isbad_bbt>:
 * @offs:	offset in the device
 * @allowbbt:	allow access to bad block table region
 *
*/
int nand_isbad_bbt(struct mtd_info *mtd, loff_t offs, int allowbbt)
{
c7e12d50:	e92d4010 	push	{r4, lr}
	struct nand_chip *this = mtd->priv;
c7e12d54:	e5904094 	ldr	r4, [r0, #148]
	int block;
	uint8_t res;

	/* Get block number * 2 */
	block = (int)(offs >> (this->bbt_erase_shift - 1));
c7e12d58:	e1a00002 	mov	r0, r2
c7e12d5c:	e594205c 	ldr	r2, [r4, #92]
c7e12d60:	e1a01003 	mov	r1, r3
c7e12d64:	e2422001 	sub	r2, r2, #1	; 0x1
c7e12d68:	eb005e84 	bl	c7e2a780 <__ashrdi3>
	res = (this->bbt[block >> 3] >> (block & 0x06)) & 0x03;

	MTDDEBUG(MTD_DEBUG_LEVEL2, "nand_isbad_bbt(): bbt info for offs 0x%08x: (block %d) 0x%02x\n",
	      (unsigned int)offs, block >> 1, res);

	switch ((int)res) {
c7e12d6c:	e5943110 	ldr	r3, [r4, #272]
c7e12d70:	e2002006 	and	r2, r0, #6	; 0x6
c7e12d74:	e7d331c0 	ldrb	r3, [r3, r0, asr #3]
c7e12d78:	e1a03253 	asr	r3, r3, r2
c7e12d7c:	e2130003 	ands	r0, r3, #3	; 0x3
c7e12d80:	08bd8010 	popeq	{r4, pc}
c7e12d84:	e3500002 	cmp	r0, #2	; 0x2
c7e12d88:	13a00001 	movne	r0, #1	; 0x1
c7e12d8c:	18bd8010 	popne	{r4, pc}
	case 0x00:
		return 0;
	case 0x01:
		return 1;
	case 0x02:
		return allowbbt ? 0 : 1;
c7e12d90:	e59d3008 	ldr	r3, [sp, #8]
c7e12d94:	e2730001 	rsbs	r0, r3, #1	; 0x1
c7e12d98:	33a00000 	movcc	r0, #0	; 0x0
	}
	return 1;
}
c7e12d9c:	e8bd8010 	pop	{r4, pc}

c7e12da0 <read_bbt>:
 * Read the bad block table starting from page.
 *
 */
static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
		struct nand_bbt_descr *td, int offs)
{
c7e12da0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e12da4:	e24dd038 	sub	sp, sp, #56	; 0x38
c7e12da8:	e59de058 	ldr	lr, [sp, #88]
c7e12dac:	e1a07000 	mov	r7, r0
	int res, i, j, act = 0;
	struct nand_chip *this = mtd->priv;
	size_t retlen, len, totlen;
	loff_t from;
	int bits = td->options & NAND_BBT_NRBITS_MSK;
c7e12db0:	e59ec000 	ldr	ip, [lr]
 * Read the bad block table starting from page.
 *
 */
static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
		struct nand_bbt_descr *td, int offs)
{
c7e12db4:	e58d1010 	str	r1, [sp, #16]
	int res, i, j, act = 0;
	struct nand_chip *this = mtd->priv;
	size_t retlen, len, totlen;
	loff_t from;
	int bits = td->options & NAND_BBT_NRBITS_MSK;
c7e12db8:	e20c000f 	and	r0, ip, #15	; 0xf
c7e12dbc:	e58d0020 	str	r0, [sp, #32]
	uint8_t msk = (uint8_t) ((1 << bits) - 1);
c7e12dc0:	e59d4020 	ldr	r4, [sp, #32]
c7e12dc4:	e3e00000 	mvn	r0, #0	; 0x0
c7e12dc8:	e1e00410 	mvn	r0, r0, lsl r4
c7e12dcc:	e20000ff 	and	r0, r0, #255	; 0xff
c7e12dd0:	e58d0024 	str	r0, [sp, #36]
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;
c7e12dd4:	e59e101c 	ldr	r1, [lr, #28]
 */
static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
		struct nand_bbt_descr *td, int offs)
{
	int res, i, j, act = 0;
	struct nand_chip *this = mtd->priv;
c7e12dd8:	e5970094 	ldr	r0, [r7, #148]
 */
static u32 add_marker_len(struct nand_bbt_descr *td)
{
	u32 len;

	if (!(td->options & NAND_BBT_NO_OOB))
c7e12ddc:	e21c4501 	ands	r4, ip, #4194304	; 0x400000
 * Read the bad block table starting from page.
 *
 */
static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
		struct nand_bbt_descr *td, int offs)
{
c7e12de0:	e1a05003 	mov	r5, r3
	int res, i, j, act = 0;
	struct nand_chip *this = mtd->priv;
c7e12de4:	e58d0018 	str	r0, [sp, #24]
	size_t retlen, len, totlen;
	loff_t from;
	int bits = td->options & NAND_BBT_NRBITS_MSK;
	uint8_t msk = (uint8_t) ((1 << bits) - 1);
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;
c7e12de8:	e58d1028 	str	r1, [sp, #40]
 */
static u32 add_marker_len(struct nand_bbt_descr *td)
{
	u32 len;

	if (!(td->options & NAND_BBT_NO_OOB))
c7e12dec:	0a000002 	beq	c7e12dfc <read_bbt+0x5c>
		return 0;

	len = td->len;
c7e12df0:	e59e4014 	ldr	r4, [lr, #20]
	if (td->options & NAND_BBT_VERSION)
c7e12df4:	e31c0c01 	tst	ip, #256	; 0x100
		len++;
c7e12df8:	12844001 	addne	r4, r4, #1	; 0x1
	int bits = td->options & NAND_BBT_NRBITS_MSK;
	uint8_t msk = (uint8_t) ((1 << bits) - 1);
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;

	totlen = (num * bits) >> 3;
c7e12dfc:	e59d3020 	ldr	r3, [sp, #32]
	marker_len = add_marker_len(td);
	from = ((loff_t) page) << this->page_shift;
c7e12e00:	e59dc018 	ldr	ip, [sp, #24]
	int bits = td->options & NAND_BBT_NRBITS_MSK;
	uint8_t msk = (uint8_t) ((1 << bits) - 1);
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;

	totlen = (num * bits) >> 3;
c7e12e04:	e0030395 	mul	r3, r5, r3
c7e12e08:	e1a031c3 	asr	r3, r3, #3
c7e12e0c:	e58d301c 	str	r3, [sp, #28]
			for (j = 0; j < 8; j += bits, act += 2) {
				uint8_t tmp = (dat >> j) & msk;
				if (tmp == msk)
					continue;
				if (reserved_block_code && (tmp == reserved_block_code)) {
					printk(KERN_DEBUG "nand_read_bbt: Reserved block at 0x%012llx\n",
c7e12e10:	e59d305c 	ldr	r3, [sp, #92]
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;

	totlen = (num * bits) >> 3;
	marker_len = add_marker_len(td);
	from = ((loff_t) page) << this->page_shift;
c7e12e14:	e1a00002 	mov	r0, r2
c7e12e18:	e1a01fc0 	asr	r1, r0, #31
			for (j = 0; j < 8; j += bits, act += 2) {
				uint8_t tmp = (dat >> j) & msk;
				if (tmp == msk)
					continue;
				if (reserved_block_code && (tmp == reserved_block_code)) {
					printk(KERN_DEBUG "nand_read_bbt: Reserved block at 0x%012llx\n",
c7e12e1c:	e1a03103 	lsl	r3, r3, #2
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;

	totlen = (num * bits) >> 3;
	marker_len = add_marker_len(td);
	from = ((loff_t) page) << this->page_shift;
c7e12e20:	e59c2054 	ldr	r2, [ip, #84]
			for (j = 0; j < 8; j += bits, act += 2) {
				uint8_t tmp = (dat >> j) & msk;
				if (tmp == msk)
					continue;
				if (reserved_block_code && (tmp == reserved_block_code)) {
					printk(KERN_DEBUG "nand_read_bbt: Reserved block at 0x%012llx\n",
c7e12e24:	e58d3014 	str	r3, [sp, #20]
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;

	totlen = (num * bits) >> 3;
	marker_len = add_marker_len(td);
	from = ((loff_t) page) << this->page_shift;
c7e12e28:	eb005e5b 	bl	c7e2a79c <__ashldi3>
			for (j = 0; j < 8; j += bits, act += 2) {
				uint8_t tmp = (dat >> j) & msk;
				if (tmp == msk)
					continue;
				if (reserved_block_code && (tmp == reserved_block_code)) {
					printk(KERN_DEBUG "nand_read_bbt: Reserved block at 0x%012llx\n",
c7e12e2c:	e3a06000 	mov	r6, #0	; 0x0
	u32 marker_len;
	int reserved_block_code = td->reserved_block_code;

	totlen = (num * bits) >> 3;
	marker_len = add_marker_len(td);
	from = ((loff_t) page) << this->page_shift;
c7e12e30:	e1a0a000 	mov	sl, r0
c7e12e34:	e1a0b001 	mov	fp, r1
c7e12e38:	ea000066 	b	c7e12fd8 <read_bbt+0x238>

	while (totlen) {
		len = min(totlen, (size_t) (1 << this->bbt_erase_shift));
c7e12e3c:	e59dc018 	ldr	ip, [sp, #24]
c7e12e40:	e3a03001 	mov	r3, #1	; 0x1
c7e12e44:	e59c205c 	ldr	r2, [ip, #92]
c7e12e48:	e59d501c 	ldr	r5, [sp, #28]
c7e12e4c:	e1a03213 	lsl	r3, r3, r2
c7e12e50:	e1550003 	cmp	r5, r3
c7e12e54:	21a05003 	movcs	r5, r3
		if (marker_len) {
c7e12e58:	e3540000 	cmp	r4, #0	; 0x0
c7e12e5c:	0a000002 	beq	c7e12e6c <read_bbt+0xcc>
			/*
			 * In case the BBT marker is not in the OOB area it
			 * will be just in the first page.
			 */
			len -= marker_len;
			from += marker_len;
c7e12e60:	e09aa004 	adds	sl, sl, r4
c7e12e64:	e2abb000 	adc	fp, fp, #0	; 0x0
		if (marker_len) {
			/*
			 * In case the BBT marker is not in the OOB area it
			 * will be just in the first page.
			 */
			len -= marker_len;
c7e12e68:	e0645005 	rsb	r5, r4, r5
			from += marker_len;
			marker_len = 0;
		}
		res = mtd->read(mtd, from, len, &retlen, buf);
c7e12e6c:	e59d0010 	ldr	r0, [sp, #16]
c7e12e70:	e28d3034 	add	r3, sp, #52	; 0x34
c7e12e74:	e58d3004 	str	r3, [sp, #4]
c7e12e78:	e58d0008 	str	r0, [sp, #8]
c7e12e7c:	e58d5000 	str	r5, [sp]
c7e12e80:	e1a00007 	mov	r0, r7
c7e12e84:	e1a0200a 	mov	r2, sl
c7e12e88:	e1a0300b 	mov	r3, fp
c7e12e8c:	e1a0e00f 	mov	lr, pc
c7e12e90:	e597f040 	ldr	pc, [r7, #64]
		if (res < 0) {
c7e12e94:	e2504000 	subs	r4, r0, #0	; 0x0
c7e12e98:	aa000007 	bge	c7e12ebc <read_bbt+0x11c>
			if (retlen != len) {
c7e12e9c:	e59d3034 	ldr	r3, [sp, #52]
c7e12ea0:	e1530005 	cmp	r3, r5
c7e12ea4:	0a000002 	beq	c7e12eb4 <read_bbt+0x114>
				printk(KERN_INFO "nand_bbt: Error reading bad block table\n");
c7e12ea8:	e59f0144 	ldr	r0, [pc, #324]	; c7e12ff4 <read_bbt+0x254>
c7e12eac:	ebffd6e9 	bl	c7e08a58 <printf>
c7e12eb0:	ea00004c 	b	c7e12fe8 <read_bbt+0x248>
				return res;
			}
			printk(KERN_WARNING "nand_bbt: ECC error while reading bad block table\n");
c7e12eb4:	e59f013c 	ldr	r0, [pc, #316]	; c7e12ff8 <read_bbt+0x258>
c7e12eb8:	ebffd6e6 	bl	c7e08a58 <printf>
c7e12ebc:	e3a09000 	mov	r9, #0	; 0x0
c7e12ec0:	ea00003c 	b	c7e12fb8 <read_bbt+0x218>
		}

		/* Analyse data */
		for (i = 0; i < len; i++) {
			uint8_t dat = buf[i];
c7e12ec4:	e59d1010 	ldr	r1, [sp, #16]
c7e12ec8:	e3a04000 	mov	r4, #0	; 0x0
c7e12ecc:	e7d11009 	ldrb	r1, [r1, r9]
c7e12ed0:	e58d102c 	str	r1, [sp, #44]
			for (j = 0; j < 8; j += bits, act += 2) {
				uint8_t tmp = (dat >> j) & msk;
c7e12ed4:	e59d2024 	ldr	r2, [sp, #36]
c7e12ed8:	e59dc02c 	ldr	ip, [sp, #44]
c7e12edc:	e002345c 	and	r3, r2, ip, asr r4
				if (tmp == msk)
c7e12ee0:	e1530002 	cmp	r3, r2
c7e12ee4:	0a00002d 	beq	c7e12fa0 <read_bbt+0x200>
					continue;
				if (reserved_block_code && (tmp == reserved_block_code)) {
c7e12ee8:	e59d0028 	ldr	r0, [sp, #40]
c7e12eec:	e3500000 	cmp	r0, #0	; 0x0
c7e12ef0:	0a000018 	beq	c7e12f58 <read_bbt+0x1b8>
c7e12ef4:	e1530000 	cmp	r3, r0
c7e12ef8:	1a000016 	bne	c7e12f58 <read_bbt+0x1b8>
					printk(KERN_DEBUG "nand_read_bbt: Reserved block at 0x%012llx\n",
c7e12efc:	e59d1014 	ldr	r1, [sp, #20]
c7e12f00:	e59d3018 	ldr	r3, [sp, #24]
c7e12f04:	e08100c6 	add	r0, r1, r6, asr #1
c7e12f08:	e593205c 	ldr	r2, [r3, #92]
c7e12f0c:	e1a01fc0 	asr	r1, r0, #31
c7e12f10:	eb005e21 	bl	c7e2a79c <__ashldi3>
c7e12f14:	e1a02000 	mov	r2, r0
c7e12f18:	e1a03001 	mov	r3, r1
c7e12f1c:	e59f00d8 	ldr	r0, [pc, #216]	; c7e12ffc <read_bbt+0x25c>
c7e12f20:	ebffd6cc 	bl	c7e08a58 <printf>
					       (loff_t)((offs << 2) + (act >> 1)) << this->bbt_erase_shift);
					this->bbt[offs + (act >> 3)] |= 0x2 << (act & 0x06);
c7e12f24:	e59d0018 	ldr	r0, [sp, #24]
c7e12f28:	e59d105c 	ldr	r1, [sp, #92]
c7e12f2c:	e590c110 	ldr	ip, [r0, #272]
c7e12f30:	e08101c6 	add	r0, r1, r6, asr #3
c7e12f34:	e7dc3000 	ldrb	r3, [ip, r0]
c7e12f38:	e2061006 	and	r1, r6, #6	; 0x6
c7e12f3c:	e3a02002 	mov	r2, #2	; 0x2
c7e12f40:	e1833112 	orr	r3, r3, r2, lsl r1
c7e12f44:	e7cc3000 	strb	r3, [ip, r0]
					mtd->ecc_stats.bbtblocks++;
c7e12f48:	e597308c 	ldr	r3, [r7, #140]
c7e12f4c:	e2833001 	add	r3, r3, #1	; 0x1
c7e12f50:	e587308c 	str	r3, [r7, #140]
c7e12f54:	ea000011 	b	c7e12fa0 <read_bbt+0x200>
c7e12f58:	e59d2018 	ldr	r2, [sp, #24]
					"Bad block at 0x%012llx\n",
					(loff_t)((offs << 2) + (act >> 1))
					<< this->bbt_erase_shift);
				/* Factory marked bad or worn out ? */
				if (tmp == 0)
					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
c7e12f5c:	e59dc05c 	ldr	ip, [sp, #92]
				MTDDEBUG(MTD_DEBUG_LEVEL0, "nand_read_bbt: " \
					"Bad block at 0x%012llx\n",
					(loff_t)((offs << 2) + (act >> 1))
					<< this->bbt_erase_shift);
				/* Factory marked bad or worn out ? */
				if (tmp == 0)
c7e12f60:	e3530000 	cmp	r3, #0	; 0x0
c7e12f64:	e5921110 	ldr	r1, [r2, #272]
c7e12f68:	e1a031c6 	asr	r3, r6, #3
					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
c7e12f6c:	e083e00c 	add	lr, r3, ip
c7e12f70:	07d1300e 	ldrbeq	r3, [r1, lr]
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
c7e12f74:	17d1300e 	ldrbne	r3, [r1, lr]
c7e12f78:	e206c006 	and	ip, r6, #6	; 0x6
					"Bad block at 0x%012llx\n",
					(loff_t)((offs << 2) + (act >> 1))
					<< this->bbt_erase_shift);
				/* Factory marked bad or worn out ? */
				if (tmp == 0)
					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
c7e12f7c:	03a02003 	moveq	r2, #3	; 0x3
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
c7e12f80:	13a02001 	movne	r2, #1	; 0x1
					"Bad block at 0x%012llx\n",
					(loff_t)((offs << 2) + (act >> 1))
					<< this->bbt_erase_shift);
				/* Factory marked bad or worn out ? */
				if (tmp == 0)
					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
c7e12f84:	01833c12 	orreq	r3, r3, r2, lsl ip
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
c7e12f88:	11833c12 	orrne	r3, r3, r2, lsl ip
					"Bad block at 0x%012llx\n",
					(loff_t)((offs << 2) + (act >> 1))
					<< this->bbt_erase_shift);
				/* Factory marked bad or worn out ? */
				if (tmp == 0)
					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
c7e12f8c:	07c1300e 	strbeq	r3, [r1, lr]
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
c7e12f90:	17c1300e 	strbne	r3, [r1, lr]
				mtd->ecc_stats.badblocks++;
c7e12f94:	e5973088 	ldr	r3, [r7, #136]
c7e12f98:	e2833001 	add	r3, r3, #1	; 0x1
c7e12f9c:	e5873088 	str	r3, [r7, #136]
 * Read the bad block table starting from page.
 *
 */
static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
		struct nand_bbt_descr *td, int offs)
{
c7e12fa0:	e59d0020 	ldr	r0, [sp, #32]
		}

		/* Analyse data */
		for (i = 0; i < len; i++) {
			uint8_t dat = buf[i];
			for (j = 0; j < 8; j += bits, act += 2) {
c7e12fa4:	e2866002 	add	r6, r6, #2	; 0x2
 * Read the bad block table starting from page.
 *
 */
static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
		struct nand_bbt_descr *td, int offs)
{
c7e12fa8:	e0844000 	add	r4, r4, r0
		}

		/* Analyse data */
		for (i = 0; i < len; i++) {
			uint8_t dat = buf[i];
			for (j = 0; j < 8; j += bits, act += 2) {
c7e12fac:	e3540007 	cmp	r4, #7	; 0x7
c7e12fb0:	daffffc7 	ble	c7e12ed4 <read_bbt+0x134>
			}
			printk(KERN_WARNING "nand_bbt: ECC error while reading bad block table\n");
		}

		/* Analyse data */
		for (i = 0; i < len; i++) {
c7e12fb4:	e2899001 	add	r9, r9, #1	; 0x1
c7e12fb8:	e1590005 	cmp	r9, r5
c7e12fbc:	3affffc0 	bcc	c7e12ec4 <read_bbt+0x124>
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
				mtd->ecc_stats.badblocks++;
			}
		}
		totlen -= len;
c7e12fc0:	e59d101c 	ldr	r1, [sp, #28]
		from += len;
c7e12fc4:	e09aa005 	adds	sl, sl, r5
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
				mtd->ecc_stats.badblocks++;
			}
		}
		totlen -= len;
c7e12fc8:	e0651001 	rsb	r1, r5, r1
		from += len;
c7e12fcc:	e2abb000 	adc	fp, fp, #0	; 0x0
				else
					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
				mtd->ecc_stats.badblocks++;
			}
		}
		totlen -= len;
c7e12fd0:	e58d101c 	str	r1, [sp, #28]
		from += len;
c7e12fd4:	e3a04000 	mov	r4, #0	; 0x0

	totlen = (num * bits) >> 3;
	marker_len = add_marker_len(td);
	from = ((loff_t) page) << this->page_shift;

	while (totlen) {
c7e12fd8:	e59d201c 	ldr	r2, [sp, #28]
c7e12fdc:	e3520000 	cmp	r2, #0	; 0x0
c7e12fe0:	1affff95 	bne	c7e12e3c <read_bbt+0x9c>
c7e12fe4:	e1a04002 	mov	r4, r2
		}
		totlen -= len;
		from += len;
	}
	return 0;
}
c7e12fe8:	e1a00004 	mov	r0, r4
c7e12fec:	e28dd038 	add	sp, sp, #56	; 0x38
c7e12ff0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e12ff4:	c7e32ff2 	.word	0xc7e32ff2
c7e12ff8:	c7e3301b 	.word	0xc7e3301b
c7e12ffc:	c7e3304e 	.word	0xc7e3304e

c7e13000 <read_abs_bbt>:
 *
 * Read the bad block table for all chips starting at a given page
 * We assume that the bbt bits are in consecutive order.
*/
static int read_abs_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td, int chip)
{
c7e13000:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
c7e13004:	e1a0a002 	mov	sl, r2
	struct nand_chip *this = mtd->priv;
	int res = 0, i;

	if (td->options & NAND_BBT_PERCHIP) {
c7e13008:	e5922000 	ldr	r2, [r2]
 *
 * Read the bad block table for all chips starting at a given page
 * We assume that the bbt bits are in consecutive order.
*/
static int read_abs_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td, int chip)
{
c7e1300c:	e1a09000 	mov	r9, r0
	struct nand_chip *this = mtd->priv;
	int res = 0, i;

	if (td->options & NAND_BBT_PERCHIP) {
c7e13010:	e2125080 	ands	r5, r2, #128	; 0x80
c7e13014:	13a05000 	movne	r5, #0	; 0x0
 *
 * Read the bad block table for all chips starting at a given page
 * We assume that the bbt bits are in consecutive order.
*/
static int read_abs_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td, int chip)
{
c7e13018:	e58d100c 	str	r1, [sp, #12]
c7e1301c:	e1a0b003 	mov	fp, r3
	struct nand_chip *this = mtd->priv;
c7e13020:	e5906094 	ldr	r6, [r0, #148]
	int res = 0, i;

	if (td->options & NAND_BBT_PERCHIP) {
c7e13024:	11a07005 	movne	r7, r5
c7e13028:	1a000019 	bne	c7e13094 <read_abs_bbt+0x94>
c7e1302c:	ea00001d 	b	c7e130a8 <read_abs_bbt+0xa8>
		int offs = 0;
		for (i = 0; i < this->numchips; i++) {
			if (chip == -1 || chip == i)
c7e13030:	e37b0001 	cmn	fp, #1	; 0x1
c7e13034:	115b0005 	cmpne	fp, r5
c7e13038:	1a00000e 	bne	c7e13078 <read_abs_bbt+0x78>
				res = read_bbt(mtd, buf, td->pages[i],
c7e1303c:	e596205c 	ldr	r2, [r6, #92]
c7e13040:	e2861068 	add	r1, r6, #104	; 0x68
c7e13044:	e8910003 	ldm	r1, {r0, r1}
c7e13048:	eb005dc5 	bl	c7e2a764 <__lshrdi3>
c7e1304c:	e58d7004 	str	r7, [sp, #4]
c7e13050:	e58da000 	str	sl, [sp]
c7e13054:	e08a2105 	add	r2, sl, r5, lsl #2
c7e13058:	e1a03000 	mov	r3, r0
c7e1305c:	e1a04001 	mov	r4, r1
c7e13060:	e5922004 	ldr	r2, [r2, #4]
c7e13064:	e59d100c 	ldr	r1, [sp, #12]
c7e13068:	e1a00009 	mov	r0, r9
c7e1306c:	ebffff4b 	bl	c7e12da0 <read_bbt>
					this->chipsize >> this->bbt_erase_shift,
					td, offs);
			if (res)
c7e13070:	e3500000 	cmp	r0, #0	; 0x0
c7e13074:	1a000017 	bne	c7e130d8 <read_abs_bbt+0xd8>
				return res;
			offs += this->chipsize >> (this->bbt_erase_shift + 2);
c7e13078:	e596205c 	ldr	r2, [r6, #92]
c7e1307c:	e2861068 	add	r1, r6, #104	; 0x68
c7e13080:	e8910003 	ldm	r1, {r0, r1}
c7e13084:	e2822002 	add	r2, r2, #2	; 0x2
c7e13088:	eb005db5 	bl	c7e2a764 <__lshrdi3>
	struct nand_chip *this = mtd->priv;
	int res = 0, i;

	if (td->options & NAND_BBT_PERCHIP) {
		int offs = 0;
		for (i = 0; i < this->numchips; i++) {
c7e1308c:	e2855001 	add	r5, r5, #1	; 0x1
				res = read_bbt(mtd, buf, td->pages[i],
					this->chipsize >> this->bbt_erase_shift,
					td, offs);
			if (res)
				return res;
			offs += this->chipsize >> (this->bbt_erase_shift + 2);
c7e13090:	e0877000 	add	r7, r7, r0
	struct nand_chip *this = mtd->priv;
	int res = 0, i;

	if (td->options & NAND_BBT_PERCHIP) {
		int offs = 0;
		for (i = 0; i < this->numchips; i++) {
c7e13094:	e5963064 	ldr	r3, [r6, #100]
c7e13098:	e1550003 	cmp	r5, r3
c7e1309c:	baffffe3 	blt	c7e13030 <read_abs_bbt+0x30>
c7e130a0:	e3a00000 	mov	r0, #0	; 0x0
c7e130a4:	ea00000b 	b	c7e130d8 <read_abs_bbt+0xd8>
			if (res)
				return res;
			offs += this->chipsize >> (this->bbt_erase_shift + 2);
		}
	} else {
		res = read_bbt(mtd, buf, td->pages[0],
c7e130a8:	e596205c 	ldr	r2, [r6, #92]
c7e130ac:	e2801008 	add	r1, r0, #8	; 0x8
c7e130b0:	e8910003 	ldm	r1, {r0, r1}
c7e130b4:	eb005daa 	bl	c7e2a764 <__lshrdi3>
c7e130b8:	e59a2004 	ldr	r2, [sl, #4]
c7e130bc:	e1a03000 	mov	r3, r0
c7e130c0:	e1a04001 	mov	r4, r1
c7e130c4:	e1a00009 	mov	r0, r9
c7e130c8:	e59d100c 	ldr	r1, [sp, #12]
c7e130cc:	e58d5004 	str	r5, [sp, #4]
c7e130d0:	e58da000 	str	sl, [sp]
c7e130d4:	ebffff31 	bl	c7e12da0 <read_bbt>
				mtd->size >> this->bbt_erase_shift, td, 0);
		if (res)
			return res;
	}
	return 0;
}
c7e130d8:	e28dd010 	add	sp, sp, #16	; 0x10
c7e130dc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e130e0 <write_bbt>:
 *
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
c7e130e0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e130e4:	e1a09000 	mov	r9, r0
c7e130e8:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
	struct erase_info einfo;
	int i, j, res, chip = 0;
	int bits, startblock, dir, page, offs, numblocks, sft, sftmsk;
	int nrchips, bbtoffs, pageoffs, ooboffs;
	uint8_t msk[4];
	uint8_t rcode = td->reserved_block_code;
c7e130ec:	e5d2001c 	ldrb	r0, [r2, #28]
 *
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
c7e130f0:	e58d2018 	str	r2, [sp, #24]
	struct erase_info einfo;
	int i, j, res, chip = 0;
	int bits, startblock, dir, page, offs, numblocks, sft, sftmsk;
	int nrchips, bbtoffs, pageoffs, ooboffs;
	uint8_t msk[4];
	uint8_t rcode = td->reserved_block_code;
c7e130f4:	e58d0038 	str	r0, [sp, #56]
	ops.mode = MTD_OOB_PLACE;

	if (!rcode)
		rcode = 0xff;
	/* Write bad block table per chip rather than per device ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e130f8:	e59d4018 	ldr	r4, [sp, #24]
	ops.ooblen = mtd->oobsize;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	if (!rcode)
c7e130fc:	e59dc038 	ldr	ip, [sp, #56]
		rcode = 0xff;
	/* Write bad block table per chip rather than per device ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13100:	e5940000 	ldr	r0, [r4]
	size_t retlen, len = 0;
	loff_t to;
	struct mtd_oob_ops ops;

	ops.ooblen = mtd->oobsize;
	ops.ooboffs = 0;
c7e13104:	e3a05000 	mov	r5, #0	; 0x0
	uint8_t rcode = td->reserved_block_code;
	size_t retlen, len = 0;
	loff_t to;
	struct mtd_oob_ops ops;

	ops.ooblen = mtd->oobsize;
c7e13108:	e5992018 	ldr	r2, [r9, #24]
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
	struct nand_chip *this = mtd->priv;
c7e1310c:	e5997094 	ldr	r7, [r9, #148]
	ops.ooblen = mtd->oobsize;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	if (!rcode)
c7e13110:	e15c0005 	cmp	ip, r5
c7e13114:	03a0c0ff 	moveq	ip, #255	; 0xff
	uint8_t rcode = td->reserved_block_code;
	size_t retlen, len = 0;
	loff_t to;
	struct mtd_oob_ops ops;

	ops.ooblen = mtd->oobsize;
c7e13118:	e58d20cc 	str	r2, [sp, #204]
	ops.ooboffs = 0;
c7e1311c:	e58d50d4 	str	r5, [sp, #212]
	ops.mode = MTD_OOB_PLACE;

	if (!rcode)
		rcode = 0xff;
	/* Write bad block table per chip rather than per device ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13120:	e2106080 	ands	r6, r0, #128	; 0x80
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
	struct nand_chip *this = mtd->priv;
c7e13124:	e58d7020 	str	r7, [sp, #32]
	ops.ooblen = mtd->oobsize;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	if (!rcode)
c7e13128:	e58dc038 	str	ip, [sp, #56]
 *
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
c7e1312c:	e58d101c 	str	r1, [sp, #28]
c7e13130:	e58d3014 	str	r3, [sp, #20]
	loff_t to;
	struct mtd_oob_ops ops;

	ops.ooblen = mtd->oobsize;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
c7e13134:	e58d50d8 	str	r5, [sp, #216]
	ops.mode = MTD_OOB_PLACE;
c7e13138:	e58d50c0 	str	r5, [sp, #192]
 *
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
c7e1313c:	e59d4108 	ldr	r4, [sp, #264]
c7e13140:	e597205c 	ldr	r2, [r7, #92]
	ops.mode = MTD_OOB_PLACE;

	if (!rcode)
		rcode = 0xff;
	/* Write bad block table per chip rather than per device ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13144:	0a000014 	beq	c7e1319c <write_bbt+0xbc>
		numblocks = (int)(this->chipsize >> this->bbt_erase_shift);
c7e13148:	e2871068 	add	r1, r7, #104	; 0x68
c7e1314c:	e8910003 	ldm	r1, {r0, r1}
c7e13150:	eb005d83 	bl	c7e2a764 <__lshrdi3>
		/* Full device write or specific chip ? */
		if (chipsel == -1) {
c7e13154:	e3740001 	cmn	r4, #1	; 0x1
			nrchips = this->numchips;
c7e13158:	05973064 	ldreq	r3, [r7, #100]
		} else {
			nrchips = chipsel + 1;
c7e1315c:	158d4050 	strne	r4, [sp, #80]
c7e13160:	12844001 	addne	r4, r4, #1	; 0x1

	if (!rcode)
		rcode = 0xff;
	/* Write bad block table per chip rather than per device ? */
	if (td->options & NAND_BBT_PERCHIP) {
		numblocks = (int)(this->chipsize >> this->bbt_erase_shift);
c7e13164:	e58d0028 	str	r0, [sp, #40]
		/* Full device write or specific chip ? */
		if (chipsel == -1) {
			nrchips = this->numchips;
		} else {
			nrchips = chipsel + 1;
c7e13168:	158d4034 	strne	r4, [sp, #52]
	/* Write bad block table per chip rather than per device ? */
	if (td->options & NAND_BBT_PERCHIP) {
		numblocks = (int)(this->chipsize >> this->bbt_erase_shift);
		/* Full device write or specific chip ? */
		if (chipsel == -1) {
			nrchips = this->numchips;
c7e1316c:	058d3034 	streq	r3, [sp, #52]
c7e13170:	058d5050 	streq	r5, [sp, #80]
			msk[3] = 0xff;
			break;
		default: return -EINVAL;
		}

		bbtoffs = chip * (numblocks >> 2);
c7e13174:	e59d4028 	ldr	r4, [sp, #40]
c7e13178:	e59d7050 	ldr	r7, [sp, #80]
c7e1317c:	e1a04144 	asr	r4, r4, #2
c7e13180:	e58d4044 	str	r4, [sp, #68]
c7e13184:	e0040497 	mul	r4, r7, r4
c7e13188:	e3a05000 	mov	r5, #0	; 0x0
c7e1318c:	e58d5040 	str	r5, [sp, #64]
c7e13190:	e58d4054 	str	r4, [sp, #84]
c7e13194:	e58d504c 	str	r5, [sp, #76]
c7e13198:	ea00017d 	b	c7e13794 <write_bbt+0x6b4>
		} else {
			nrchips = chipsel + 1;
			chip = chipsel;
		}
	} else {
		numblocks = (int)(mtd->size >> this->bbt_erase_shift);
c7e1319c:	e2891008 	add	r1, r9, #8	; 0x8
c7e131a0:	e8910003 	ldm	r1, {r0, r1}
c7e131a4:	eb005d6e 	bl	c7e2a764 <__lshrdi3>
c7e131a8:	e3a0c001 	mov	ip, #1	; 0x1
c7e131ac:	e58d0028 	str	r0, [sp, #40]
c7e131b0:	e58d6050 	str	r6, [sp, #80]
c7e131b4:	e58dc034 	str	ip, [sp, #52]
c7e131b8:	eaffffed 	b	c7e13174 <write_bbt+0x94>
 *
*/
static int write_bbt(struct mtd_info *mtd, uint8_t *buf,
		     struct nand_bbt_descr *td, struct nand_bbt_descr *md,
		     int chipsel)
{
c7e131bc:	e59d0050 	ldr	r0, [sp, #80]
c7e131c0:	e59d1040 	ldr	r1, [sp, #64]
c7e131c4:	e59d2018 	ldr	r2, [sp, #24]
c7e131c8:	e1a06100 	lsl	r6, r0, #2
c7e131cc:	e1a05101 	lsl	r5, r1, #2
c7e131d0:	e0823006 	add	r3, r2, r6
c7e131d4:	e0833005 	add	r3, r3, r5
c7e131d8:	e58d3048 	str	r3, [sp, #72]

		/* There was already a version of the table, reuse the page
		 * This applies for absolute placement too, as we have the
		 * page nr. in td->pages.
		 */
		if (td->pages[chip] != -1) {
c7e131dc:	e5933004 	ldr	r3, [r3, #4]
c7e131e0:	e3730001 	cmn	r3, #1	; 0x1
c7e131e4:	e58d3024 	str	r3, [sp, #36]
c7e131e8:	1a000036 	bne	c7e132c8 <write_bbt+0x1e8>
			goto write;
		}

		/* Automatic placement of the bad block table */
		/* Search direction top -> down ? */
		if (td->options & NAND_BBT_LASTBLOCK) {
c7e131ec:	e5923000 	ldr	r3, [r2]
c7e131f0:	e3130010 	tst	r3, #16	; 0x10
c7e131f4:	0a000007 	beq	c7e13218 <write_bbt+0x138>
c7e131f8:	e59d4028 	ldr	r4, [sp, #40]
c7e131fc:	e2803001 	add	r3, r0, #1	; 0x1
c7e13200:	e0030394 	mul	r3, r4, r3
c7e13204:	e59d704c 	ldr	r7, [sp, #76]
c7e13208:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1320c:	e0833007 	add	r3, r3, r7
c7e13210:	e59de024 	ldr	lr, [sp, #36]
c7e13214:	ea000004 	b	c7e1322c <write_bbt+0x14c>
c7e13218:	e59d3028 	ldr	r3, [sp, #40]
c7e1321c:	e59dc050 	ldr	ip, [sp, #80]
c7e13220:	e59d004c 	ldr	r0, [sp, #76]
c7e13224:	e3a0e001 	mov	lr, #1	; 0x1
c7e13228:	e023039c 	mla	r3, ip, r3, r0
		} else {
			startblock = chip * numblocks;
			dir = 1;
		}

		for (i = 0; i < td->maxblocks; i++) {
c7e1322c:	e59d2018 	ldr	r2, [sp, #24]
c7e13230:	e1a01003 	mov	r1, r3
c7e13234:	e5924018 	ldr	r4, [r2, #24]
c7e13238:	e3a00000 	mov	r0, #0	; 0x0
c7e1323c:	ea000015 	b	c7e13298 <write_bbt+0x1b8>
			int block = startblock + dir * i;
			/* Check, if the block is bad */
			switch ((this->bbt[block >> 2] >>
				 (2 * (block & 0x03))) & 0x03) {
c7e13240:	e59d7020 	ldr	r7, [sp, #32]
c7e13244:	e5973110 	ldr	r3, [r7, #272]
c7e13248:	e7d33141 	ldrb	r3, [r3, r1, asr #2]
c7e1324c:	e1a03253 	asr	r3, r3, r2
c7e13250:	e2033003 	and	r3, r3, #3	; 0x3
c7e13254:	e3530001 	cmp	r3, #1	; 0x1
c7e13258:	0a00000d 	beq	c7e13294 <write_bbt+0x1b4>
c7e1325c:	e3530003 	cmp	r3, #3	; 0x3
c7e13260:	0a00000b 	beq	c7e13294 <write_bbt+0x1b4>
			case 0x01:
			case 0x03:
				continue;
			}
			page = block <<
c7e13264:	e597305c 	ldr	r3, [r7, #92]
c7e13268:	e5972054 	ldr	r2, [r7, #84]
				(this->bbt_erase_shift - this->page_shift);
			/* Check, if the block is used by the mirror table */
			if (!md || md->pages[chip] != page)
c7e1326c:	e59d7014 	ldr	r7, [sp, #20]
				 (2 * (block & 0x03))) & 0x03) {
			case 0x01:
			case 0x03:
				continue;
			}
			page = block <<
c7e13270:	e0623003 	rsb	r3, r2, r3
c7e13274:	e1a03311 	lsl	r3, r1, r3
				(this->bbt_erase_shift - this->page_shift);
			/* Check, if the block is used by the mirror table */
			if (!md || md->pages[chip] != page)
c7e13278:	e3570000 	cmp	r7, #0	; 0x0
				 (2 * (block & 0x03))) & 0x03) {
			case 0x01:
			case 0x03:
				continue;
			}
			page = block <<
c7e1327c:	e58d3024 	str	r3, [sp, #36]
				(this->bbt_erase_shift - this->page_shift);
			/* Check, if the block is used by the mirror table */
			if (!md || md->pages[chip] != page)
c7e13280:	0a000010 	beq	c7e132c8 <write_bbt+0x1e8>
c7e13284:	e59c3004 	ldr	r3, [ip, #4]
c7e13288:	e59dc024 	ldr	ip, [sp, #36]
c7e1328c:	e153000c 	cmp	r3, ip
c7e13290:	1a00000c 	bne	c7e132c8 <write_bbt+0x1e8>
		} else {
			startblock = chip * numblocks;
			dir = 1;
		}

		for (i = 0; i < td->maxblocks; i++) {
c7e13294:	e081100e 	add	r1, r1, lr
				continue;
			}
			page = block <<
				(this->bbt_erase_shift - this->page_shift);
			/* Check, if the block is used by the mirror table */
			if (!md || md->pages[chip] != page)
c7e13298:	e59d2014 	ldr	r2, [sp, #20]
		} else {
			startblock = chip * numblocks;
			dir = 1;
		}

		for (i = 0; i < td->maxblocks; i++) {
c7e1329c:	e1500004 	cmp	r0, r4
				continue;
			}
			page = block <<
				(this->bbt_erase_shift - this->page_shift);
			/* Check, if the block is used by the mirror table */
			if (!md || md->pages[chip] != page)
c7e132a0:	e0823006 	add	r3, r2, r6
c7e132a4:	e083c005 	add	ip, r3, r5

		for (i = 0; i < td->maxblocks; i++) {
			int block = startblock + dir * i;
			/* Check, if the block is bad */
			switch ((this->bbt[block >> 2] >>
				 (2 * (block & 0x03))) & 0x03) {
c7e132a8:	e2013003 	and	r3, r1, #3	; 0x3
c7e132ac:	e1a02083 	lsl	r2, r3, #1
		} else {
			startblock = chip * numblocks;
			dir = 1;
		}

		for (i = 0; i < td->maxblocks; i++) {
c7e132b0:	e2800001 	add	r0, r0, #1	; 0x1
c7e132b4:	baffffe1 	blt	c7e13240 <write_bbt+0x160>
				(this->bbt_erase_shift - this->page_shift);
			/* Check, if the block is used by the mirror table */
			if (!md || md->pages[chip] != page)
				goto write;
		}
		printk(KERN_ERR "No space left to write bad block table\n");
c7e132b8:	e59f050c 	ldr	r0, [pc, #1292]	; c7e137cc <write_bbt+0x6ec>
c7e132bc:	ebffd5e5 	bl	c7e08a58 <printf>
c7e132c0:	e3e0401b 	mvn	r4, #27	; 0x1b
c7e132c4:	ea00013d 	b	c7e137c0 <write_bbt+0x6e0>
		return -ENOSPC;
	write:

		/* Set up shift count and masks for the flash table */
		bits = td->options & NAND_BBT_NRBITS_MSK;
c7e132c8:	e59d3018 	ldr	r3, [sp, #24]
		msk[2] = ~rcode;
c7e132cc:	e59d5038 	ldr	r5, [sp, #56]
		printk(KERN_ERR "No space left to write bad block table\n");
		return -ENOSPC;
	write:

		/* Set up shift count and masks for the flash table */
		bits = td->options & NAND_BBT_NRBITS_MSK;
c7e132d0:	e5934000 	ldr	r4, [r3]
		msk[2] = ~rcode;
c7e132d4:	e1e02005 	mvn	r2, r5
		switch (bits) {
c7e132d8:	e204300f 	and	r3, r4, #15	; 0xf
c7e132dc:	e2433001 	sub	r3, r3, #1	; 0x1
		return -ENOSPC;
	write:

		/* Set up shift count and masks for the flash table */
		bits = td->options & NAND_BBT_NRBITS_MSK;
		msk[2] = ~rcode;
c7e132e0:	e5cd20e6 	strb	r2, [sp, #230]
		switch (bits) {
c7e132e4:	e3530007 	cmp	r3, #7	; 0x7
c7e132e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e132ec:	ea000007 	b	c7e13310 <write_bbt+0x230>
c7e132f0:	c7e13318 	.word	0xc7e13318
c7e132f4:	c7e13340 	.word	0xc7e13340
c7e132f8:	c7e13310 	.word	0xc7e13310
c7e132fc:	c7e1336c 	.word	0xc7e1336c
c7e13300:	c7e13310 	.word	0xc7e13310
c7e13304:	c7e13310 	.word	0xc7e13310
c7e13308:	c7e13310 	.word	0xc7e13310
c7e1330c:	c7e13394 	.word	0xc7e13394
c7e13310:	e3e04015 	mvn	r4, #21	; 0x15
c7e13314:	ea000129 	b	c7e137c0 <write_bbt+0x6e0>
		case 1: sft = 3; sftmsk = 0x07; msk[0] = 0x00; msk[1] = 0x01;
c7e13318:	e3a02001 	mov	r2, #1	; 0x1
c7e1331c:	e3a03000 	mov	r3, #0	; 0x0
			msk[3] = 0x01;
c7e13320:	e3a07003 	mov	r7, #3	; 0x3
c7e13324:	e3a0c007 	mov	ip, #7	; 0x7

		/* Set up shift count and masks for the flash table */
		bits = td->options & NAND_BBT_NRBITS_MSK;
		msk[2] = ~rcode;
		switch (bits) {
		case 1: sft = 3; sftmsk = 0x07; msk[0] = 0x00; msk[1] = 0x01;
c7e13328:	e5cd30e4 	strb	r3, [sp, #228]
			msk[3] = 0x01;
c7e1332c:	e5cd20e7 	strb	r2, [sp, #231]

		/* Set up shift count and masks for the flash table */
		bits = td->options & NAND_BBT_NRBITS_MSK;
		msk[2] = ~rcode;
		switch (bits) {
		case 1: sft = 3; sftmsk = 0x07; msk[0] = 0x00; msk[1] = 0x01;
c7e13330:	e5cd20e5 	strb	r2, [sp, #229]
			msk[3] = 0x01;
c7e13334:	e58d702c 	str	r7, [sp, #44]
c7e13338:	e58dc030 	str	ip, [sp, #48]
c7e1333c:	ea00001c 	b	c7e133b4 <write_bbt+0x2d4>
			break;
		case 2: sft = 2; sftmsk = 0x06; msk[0] = 0x00; msk[1] = 0x01;
c7e13340:	e3a03000 	mov	r3, #0	; 0x0
c7e13344:	e5cd30e4 	strb	r3, [sp, #228]
c7e13348:	e2833001 	add	r3, r3, #1	; 0x1
c7e1334c:	e5cd30e5 	strb	r3, [sp, #229]
			msk[3] = 0x03;
c7e13350:	e3a00002 	mov	r0, #2	; 0x2
c7e13354:	e2833002 	add	r3, r3, #2	; 0x2
c7e13358:	e3a01006 	mov	r1, #6	; 0x6
c7e1335c:	e5cd30e7 	strb	r3, [sp, #231]
c7e13360:	e58d002c 	str	r0, [sp, #44]
c7e13364:	e58d1030 	str	r1, [sp, #48]
c7e13368:	ea000011 	b	c7e133b4 <write_bbt+0x2d4>
			break;
		case 4: sft = 1; sftmsk = 0x04; msk[0] = 0x00; msk[1] = 0x0C;
c7e1336c:	e3a03000 	mov	r3, #0	; 0x0
c7e13370:	e5cd30e4 	strb	r3, [sp, #228]
c7e13374:	e283300c 	add	r3, r3, #12	; 0xc
c7e13378:	e5cd30e5 	strb	r3, [sp, #229]
			msk[3] = 0x0f;
c7e1337c:	e3a02001 	mov	r2, #1	; 0x1
c7e13380:	e2833003 	add	r3, r3, #3	; 0x3
c7e13384:	e5cd30e7 	strb	r3, [sp, #231]
c7e13388:	e58d202c 	str	r2, [sp, #44]
c7e1338c:	e3a03004 	mov	r3, #4	; 0x4
c7e13390:	ea000006 	b	c7e133b0 <write_bbt+0x2d0>
			break;
		case 8: sft = 0; sftmsk = 0x00; msk[0] = 0x00; msk[1] = 0x0F;
c7e13394:	e3a0200f 	mov	r2, #15	; 0xf
c7e13398:	e3a03000 	mov	r3, #0	; 0x0
c7e1339c:	e5cd20e5 	strb	r2, [sp, #229]
			msk[3] = 0xff;
c7e133a0:	e3e02000 	mvn	r2, #0	; 0x0
c7e133a4:	e58d302c 	str	r3, [sp, #44]
c7e133a8:	e5cd20e7 	strb	r2, [sp, #231]
			msk[3] = 0x03;
			break;
		case 4: sft = 1; sftmsk = 0x04; msk[0] = 0x00; msk[1] = 0x0C;
			msk[3] = 0x0f;
			break;
		case 8: sft = 0; sftmsk = 0x00; msk[0] = 0x00; msk[1] = 0x0F;
c7e133ac:	e5cd30e4 	strb	r3, [sp, #228]
			msk[3] = 0xff;
c7e133b0:	e58d3030 	str	r3, [sp, #48]
		default: return -EINVAL;
		}

		bbtoffs = chip * (numblocks >> 2);

		to = ((loff_t) page) << this->page_shift;
c7e133b4:	e59d5020 	ldr	r5, [sp, #32]
c7e133b8:	e59d7024 	ldr	r7, [sp, #36]
c7e133bc:	e5956054 	ldr	r6, [r5, #84]
c7e133c0:	e1a00007 	mov	r0, r7
c7e133c4:	e1a01fc0 	asr	r1, r0, #31
c7e133c8:	e1a02006 	mov	r2, r6
c7e133cc:	eb005cf2 	bl	c7e2a79c <__ashldi3>

		/* Must we save the block contents ? */
		if (td->options & NAND_BBT_SAVECONTENT) {
c7e133d0:	e3140a02 	tst	r4, #8192	; 0x2000
		default: return -EINVAL;
		}

		bbtoffs = chip * (numblocks >> 2);

		to = ((loff_t) page) << this->page_shift;
c7e133d4:	e1a0a000 	mov	sl, r0
c7e133d8:	e1a0b001 	mov	fp, r1

		/* Must we save the block contents ? */
		if (td->options & NAND_BBT_SAVECONTENT) {
c7e133dc:	0a000046 	beq	c7e134fc <write_bbt+0x41c>
			/* Make it block aligned */
			to &= ~((loff_t) ((1 << this->bbt_erase_shift) - 1));
c7e133e0:	e595205c 	ldr	r2, [r5, #92]
c7e133e4:	e3a03001 	mov	r3, #1	; 0x1
c7e133e8:	e1a06213 	lsl	r6, r3, r2
			len = 1 << this->bbt_erase_shift;
			res = mtd->read(mtd, to, len, &retlen, buf);
c7e133ec:	e59dc01c 	ldr	ip, [sp, #28]
		to = ((loff_t) page) << this->page_shift;

		/* Must we save the block contents ? */
		if (td->options & NAND_BBT_SAVECONTENT) {
			/* Make it block aligned */
			to &= ~((loff_t) ((1 << this->bbt_erase_shift) - 1));
c7e133f0:	e2463001 	sub	r3, r6, #1	; 0x1
c7e133f4:	e1c0a003 	bic	sl, r0, r3
c7e133f8:	e1c1bfc3 	bic	fp, r1, r3, asr #31
			len = 1 << this->bbt_erase_shift;
			res = mtd->read(mtd, to, len, &retlen, buf);
c7e133fc:	e28d30e0 	add	r3, sp, #224	; 0xe0
c7e13400:	e58d3004 	str	r3, [sp, #4]
c7e13404:	e58d6000 	str	r6, [sp]
c7e13408:	e58dc008 	str	ip, [sp, #8]
c7e1340c:	e1a00009 	mov	r0, r9
c7e13410:	e1a0200a 	mov	r2, sl
c7e13414:	e1a0300b 	mov	r3, fp
c7e13418:	e1a0e00f 	mov	lr, pc
c7e1341c:	e599f040 	ldr	pc, [r9, #64]
			if (res < 0) {
c7e13420:	e2504000 	subs	r4, r0, #0	; 0x0

		/* Must we save the block contents ? */
		if (td->options & NAND_BBT_SAVECONTENT) {
			/* Make it block aligned */
			to &= ~((loff_t) ((1 << this->bbt_erase_shift) - 1));
			len = 1 << this->bbt_erase_shift;
c7e13424:	e58d603c 	str	r6, [sp, #60]
			res = mtd->read(mtd, to, len, &retlen, buf);
			if (res < 0) {
c7e13428:	aa000007 	bge	c7e1344c <write_bbt+0x36c>
				if (retlen != len) {
c7e1342c:	e59d30e0 	ldr	r3, [sp, #224]
c7e13430:	e1530006 	cmp	r3, r6
c7e13434:	0a000002 	beq	c7e13444 <write_bbt+0x364>
					printk(KERN_INFO "nand_bbt: Error "
c7e13438:	e59f0390 	ldr	r0, [pc, #912]	; c7e137d0 <write_bbt+0x6f0>
c7e1343c:	ebffd585 	bl	c7e08a58 <printf>
c7e13440:	ea0000de 	b	c7e137c0 <write_bbt+0x6e0>
					       "reading block for writing "
					       "the bad block table\n");
					return res;
				}
				printk(KERN_WARNING "nand_bbt: ECC error "
c7e13444:	e59f0388 	ldr	r0, [pc, #904]	; c7e137d4 <write_bbt+0x6f4>
c7e13448:	ebffd582 	bl	c7e08a58 <printf>
				       "while reading block for writing "
				       "bad block table\n");
			}
			/* Read oob data */
			ops.ooblen = (len >> this->page_shift) * mtd->oobsize;
c7e1344c:	e59d0020 	ldr	r0, [sp, #32]
c7e13450:	e5992018 	ldr	r2, [r9, #24]
c7e13454:	e5903054 	ldr	r3, [r0, #84]
c7e13458:	e1a03336 	lsr	r3, r6, r3
c7e1345c:	e0000392 	mul	r0, r2, r3
			ops.oobbuf = &buf[len];
			res = mtd->read_oob(mtd, to + mtd->writesize, &ops);
c7e13460:	e5993014 	ldr	r3, [r9, #20]
				       "while reading block for writing "
				       "bad block table\n");
			}
			/* Read oob data */
			ops.ooblen = (len >> this->page_shift) * mtd->oobsize;
			ops.oobbuf = &buf[len];
c7e13464:	e59d201c 	ldr	r2, [sp, #28]
			res = mtd->read_oob(mtd, to + mtd->writesize, &ops);
c7e13468:	e09a4003 	adds	r4, sl, r3
				       "while reading block for writing "
				       "bad block table\n");
			}
			/* Read oob data */
			ops.ooblen = (len >> this->page_shift) * mtd->oobsize;
			ops.oobbuf = &buf[len];
c7e1346c:	e0821006 	add	r1, r2, r6
			res = mtd->read_oob(mtd, to + mtd->writesize, &ops);
c7e13470:	e2ab5000 	adc	r5, fp, #0	; 0x0
				       "while reading block for writing "
				       "bad block table\n");
			}
			/* Read oob data */
			ops.ooblen = (len >> this->page_shift) * mtd->oobsize;
			ops.oobbuf = &buf[len];
c7e13474:	e58d10dc 	str	r1, [sp, #220]
			res = mtd->read_oob(mtd, to + mtd->writesize, &ops);
c7e13478:	e28d10c0 	add	r1, sp, #192	; 0xc0
c7e1347c:	e1a02004 	mov	r2, r4
				printk(KERN_WARNING "nand_bbt: ECC error "
				       "while reading block for writing "
				       "bad block table\n");
			}
			/* Read oob data */
			ops.ooblen = (len >> this->page_shift) * mtd->oobsize;
c7e13480:	e58d00cc 	str	r0, [sp, #204]
			ops.oobbuf = &buf[len];
			res = mtd->read_oob(mtd, to + mtd->writesize, &ops);
c7e13484:	e1a03005 	mov	r3, r5
c7e13488:	e58d1000 	str	r1, [sp]
c7e1348c:	e1a00009 	mov	r0, r9
c7e13490:	e1a0e00f 	mov	lr, pc
c7e13494:	e599f04c 	ldr	pc, [r9, #76]
			if (res < 0 || ops.oobretlen != ops.ooblen)
c7e13498:	e2504000 	subs	r4, r0, #0	; 0x0
c7e1349c:	ba0000c4 	blt	c7e137b4 <write_bbt+0x6d4>
c7e134a0:	e59d20cc 	ldr	r2, [sp, #204]
c7e134a4:	e59d30d0 	ldr	r3, [sp, #208]
c7e134a8:	e1530002 	cmp	r3, r2
c7e134ac:	1a0000c0 	bne	c7e137b4 <write_bbt+0x6d4>
				goto outerr;

			/* Calc the byte offset in the buffer */
			pageoffs = page - (int)(to >> this->page_shift);
c7e134b0:	e59d5020 	ldr	r5, [sp, #32]
c7e134b4:	e1a0000a 	mov	r0, sl
c7e134b8:	e5954054 	ldr	r4, [r5, #84]
c7e134bc:	e1a0100b 	mov	r1, fp
c7e134c0:	e1a02004 	mov	r2, r4
c7e134c4:	eb005cad 	bl	c7e2a780 <__ashrdi3>
c7e134c8:	e59d7024 	ldr	r7, [sp, #36]
			offs = pageoffs << this->page_shift;
			/* Preset the bbt area with 0xff */
			memset(&buf[offs], 0xff, (size_t) (numblocks >> sft));
c7e134cc:	e59d3028 	ldr	r3, [sp, #40]
			res = mtd->read_oob(mtd, to + mtd->writesize, &ops);
			if (res < 0 || ops.oobretlen != ops.ooblen)
				goto outerr;

			/* Calc the byte offset in the buffer */
			pageoffs = page - (int)(to >> this->page_shift);
c7e134d0:	e0605007 	rsb	r5, r0, r7
			offs = pageoffs << this->page_shift;
c7e134d4:	e1a07415 	lsl	r7, r5, r4
			/* Preset the bbt area with 0xff */
			memset(&buf[offs], 0xff, (size_t) (numblocks >> sft));
c7e134d8:	e59dc01c 	ldr	ip, [sp, #28]
c7e134dc:	e59d402c 	ldr	r4, [sp, #44]
c7e134e0:	e3a010ff 	mov	r1, #255	; 0xff
c7e134e4:	e1a02453 	asr	r2, r3, r4
c7e134e8:	e08c0007 	add	r0, ip, r7
c7e134ec:	eb003da8 	bl	c7e22b94 <memset>
			ooboffs = len + (pageoffs * mtd->oobsize);
c7e134f0:	e5993018 	ldr	r3, [r9, #24]
c7e134f4:	e0206593 	mla	r0, r3, r5, r6
c7e134f8:	ea000031 	b	c7e135c4 <write_bbt+0x4e4>

		} else if (td->options & NAND_BBT_NO_OOB) {
c7e134fc:	e2145501 	ands	r5, r4, #4194304	; 0x400000
c7e13500:	0a000016 	beq	c7e13560 <write_bbt+0x480>
				offs++;
			/* Calc length */
			len = (size_t) (numblocks >> sft);
			len += offs;
			/* Make it page aligned ! */
			len = ALIGN(len, mtd->writesize);
c7e13504:	e5992014 	ldr	r2, [r9, #20]
c7e13508:	e59dc028 	ldr	ip, [sp, #40]
c7e1350c:	e59d002c 	ldr	r0, [sp, #44]
c7e13510:	e2423001 	sub	r3, r2, #1	; 0x1
c7e13514:	e083305c 	add	r3, r3, ip, asr r0
			memset(&buf[offs], 0xff, (size_t) (numblocks >> sft));
			ooboffs = len + (pageoffs * mtd->oobsize);

		} else if (td->options & NAND_BBT_NO_OOB) {
			ooboffs = 0;
			offs = td->len;
c7e13518:	e59d5018 	ldr	r5, [sp, #24]
			/* the version byte */
			if (td->options & NAND_BBT_VERSION)
c7e1351c:	e3140c01 	tst	r4, #256	; 0x100
			memset(&buf[offs], 0xff, (size_t) (numblocks >> sft));
			ooboffs = len + (pageoffs * mtd->oobsize);

		} else if (td->options & NAND_BBT_NO_OOB) {
			ooboffs = 0;
			offs = td->len;
c7e13520:	e5957014 	ldr	r7, [r5, #20]
				offs++;
			/* Calc length */
			len = (size_t) (numblocks >> sft);
			len += offs;
			/* Make it page aligned ! */
			len = ALIGN(len, mtd->writesize);
c7e13524:	e2622000 	rsb	r2, r2, #0	; 0x0
		} else if (td->options & NAND_BBT_NO_OOB) {
			ooboffs = 0;
			offs = td->len;
			/* the version byte */
			if (td->options & NAND_BBT_VERSION)
				offs++;
c7e13528:	12877001 	addne	r7, r7, #1	; 0x1
			/* Calc length */
			len = (size_t) (numblocks >> sft);
			len += offs;
			/* Make it page aligned ! */
			len = ALIGN(len, mtd->writesize);
c7e1352c:	e0833007 	add	r3, r3, r7
c7e13530:	e0032002 	and	r2, r3, r2
			/* Preset the buffer with 0xff */
			memset(buf, 0xff, len);
c7e13534:	e3a010ff 	mov	r1, #255	; 0xff
c7e13538:	e59d001c 	ldr	r0, [sp, #28]
				offs++;
			/* Calc length */
			len = (size_t) (numblocks >> sft);
			len += offs;
			/* Make it page aligned ! */
			len = ALIGN(len, mtd->writesize);
c7e1353c:	e58d203c 	str	r2, [sp, #60]
			/* Preset the buffer with 0xff */
			memset(buf, 0xff, len);
c7e13540:	eb003d93 	bl	c7e22b94 <memset>
			/* Pattern is located at the begin of first page */
			memcpy(buf, td->pattern, td->len);
c7e13544:	e59d2018 	ldr	r2, [sp, #24]
c7e13548:	e59d001c 	ldr	r0, [sp, #28]
c7e1354c:	e5921020 	ldr	r1, [r2, #32]
c7e13550:	e5922014 	ldr	r2, [r2, #20]
c7e13554:	eb003db8 	bl	c7e22c3c <memcpy>
c7e13558:	e3a00000 	mov	r0, #0	; 0x0
c7e1355c:	ea000018 	b	c7e135c4 <write_bbt+0x4e4>
		} else {
			/* Calc length */
			len = (size_t) (numblocks >> sft);
			/* Make it page aligned ! */
			len = ALIGN(len, mtd->writesize);
c7e13560:	e5992014 	ldr	r2, [r9, #20]
c7e13564:	e59d702c 	ldr	r7, [sp, #44]
c7e13568:	e59d4028 	ldr	r4, [sp, #40]
c7e1356c:	e2423001 	sub	r3, r2, #1	; 0x1
c7e13570:	e0833754 	add	r3, r3, r4, asr r7
c7e13574:	e2622000 	rsb	r2, r2, #0	; 0x0
c7e13578:	e0032002 	and	r2, r3, r2
			/* Preset the buffer with 0xff */
			memset(buf, 0xff, len +
c7e1357c:	e1a03632 	lsr	r3, r2, r6
c7e13580:	e5991018 	ldr	r1, [r9, #24]
			memcpy(buf, td->pattern, td->len);
		} else {
			/* Calc length */
			len = (size_t) (numblocks >> sft);
			/* Make it page aligned ! */
			len = ALIGN(len, mtd->writesize);
c7e13584:	e58d203c 	str	r2, [sp, #60]
			/* Preset the buffer with 0xff */
			memset(buf, 0xff, len +
c7e13588:	e59d001c 	ldr	r0, [sp, #28]
c7e1358c:	e0222391 	mla	r2, r1, r3, r2
c7e13590:	e3a010ff 	mov	r1, #255	; 0xff
c7e13594:	eb003d7e 	bl	c7e22b94 <memset>
			       (len >> this->page_shift)* mtd->oobsize);
			offs = 0;
			ooboffs = len;
			/* Pattern is located in oob area of first page */
			memcpy(&buf[ooboffs + td->offs], td->pattern, td->len);
c7e13598:	e59dc018 	ldr	ip, [sp, #24]
c7e1359c:	e59d203c 	ldr	r2, [sp, #60]
c7e135a0:	e59c0008 	ldr	r0, [ip, #8]
c7e135a4:	e59d301c 	ldr	r3, [sp, #28]
c7e135a8:	e0820000 	add	r0, r2, r0
c7e135ac:	e59c1020 	ldr	r1, [ip, #32]
c7e135b0:	e0830000 	add	r0, r3, r0
c7e135b4:	e59c2014 	ldr	r2, [ip, #20]
c7e135b8:	eb003d9f 	bl	c7e22c3c <memcpy>
			len = ALIGN(len, mtd->writesize);
			/* Preset the buffer with 0xff */
			memset(buf, 0xff, len +
			       (len >> this->page_shift)* mtd->oobsize);
			offs = 0;
			ooboffs = len;
c7e135bc:	e59d003c 	ldr	r0, [sp, #60]
			/* Pattern is located in oob area of first page */
			memcpy(&buf[ooboffs + td->offs], td->pattern, td->len);
c7e135c0:	e1a07005 	mov	r7, r5
		}

		if (td->options & NAND_BBT_VERSION)
c7e135c4:	e59d4018 	ldr	r4, [sp, #24]
c7e135c8:	e5943000 	ldr	r3, [r4]
c7e135cc:	e3130c01 	tst	r3, #256	; 0x100
c7e135d0:	0a000023 	beq	c7e13664 <write_bbt+0x584>
			buf[ooboffs + td->veroffs] = td->version[chip];
c7e135d4:	e59d5050 	ldr	r5, [sp, #80]
c7e135d8:	e59dc040 	ldr	ip, [sp, #64]
c7e135dc:	e0843005 	add	r3, r4, r5
c7e135e0:	e083300c 	add	r3, r3, ip
c7e135e4:	e594200c 	ldr	r2, [r4, #12]
c7e135e8:	e59d401c 	ldr	r4, [sp, #28]
c7e135ec:	e5d31010 	ldrb	r1, [r3, #16]
c7e135f0:	e0843000 	add	r3, r4, r0
c7e135f4:	e7c31002 	strb	r1, [r3, r2]
c7e135f8:	ea000019 	b	c7e13664 <write_bbt+0x584>

		/* walk through the memory table */
		for (i = 0; i < numblocks;) {
			uint8_t dat;
			dat = this->bbt[bbtoffs + (i >> 2)];
c7e135fc:	e59d5020 	ldr	r5, [sp, #32]
c7e13600:	e59d0054 	ldr	r0, [sp, #84]
c7e13604:	e5953110 	ldr	r3, [r5, #272]
c7e13608:	e1a0c00e 	mov	ip, lr
c7e1360c:	e0833000 	add	r3, r3, r0
c7e13610:	e7d3414e 	ldrb	r4, [r3, lr, asr #2]
			for (j = 0; j < 4; j++, i++) {
				int sftcnt = (i << (3 - sft)) & sftmsk;
				/* Do not store the reserved bbt blocks ! */
				buf[offs + (i >> sft)] &=
c7e13614:	e59d102c 	ldr	r1, [sp, #44]
c7e13618:	e59d2030 	ldr	r2, [sp, #48]
c7e1361c:	e087015c 	add	r0, r7, ip, asr r1
c7e13620:	e2611003 	rsb	r1, r1, #3	; 0x3
c7e13624:	e002111c 	and	r1, r2, ip, lsl r1
c7e13628:	e2043003 	and	r3, r4, #3	; 0x3
c7e1362c:	e28d50e8 	add	r5, sp, #232	; 0xe8
c7e13630:	e0853003 	add	r3, r5, r3
c7e13634:	e59d501c 	ldr	r5, [sp, #28]
c7e13638:	e5533004 	ldrb	r3, [r3, #-4]
c7e1363c:	e7d52000 	ldrb	r2, [r5, r0]

		/* walk through the memory table */
		for (i = 0; i < numblocks;) {
			uint8_t dat;
			dat = this->bbt[bbtoffs + (i >> 2)];
			for (j = 0; j < 4; j++, i++) {
c7e13640:	e28cc001 	add	ip, ip, #1	; 0x1
				int sftcnt = (i << (3 - sft)) & sftmsk;
				/* Do not store the reserved bbt blocks ! */
				buf[offs + (i >> sft)] &=
c7e13644:	e1c22113 	bic	r2, r2, r3, lsl r1

		/* walk through the memory table */
		for (i = 0; i < numblocks;) {
			uint8_t dat;
			dat = this->bbt[bbtoffs + (i >> 2)];
			for (j = 0; j < 4; j++, i++) {
c7e13648:	e28e3004 	add	r3, lr, #4	; 0x4
c7e1364c:	e15c0003 	cmp	ip, r3
				int sftcnt = (i << (3 - sft)) & sftmsk;
				/* Do not store the reserved bbt blocks ! */
				buf[offs + (i >> sft)] &=
c7e13650:	e7c52000 	strb	r2, [r5, r0]
					~(msk[dat & 0x03] << sftcnt);
				dat >>= 2;
c7e13654:	e1a04124 	lsr	r4, r4, #2

		/* walk through the memory table */
		for (i = 0; i < numblocks;) {
			uint8_t dat;
			dat = this->bbt[bbtoffs + (i >> 2)];
			for (j = 0; j < 4; j++, i++) {
c7e13658:	1affffed 	bne	c7e13614 <write_bbt+0x534>
c7e1365c:	e1a0e00c 	mov	lr, ip
c7e13660:	ea000000 	b	c7e13668 <write_bbt+0x588>
c7e13664:	e3a0e000 	mov	lr, #0	; 0x0

		if (td->options & NAND_BBT_VERSION)
			buf[ooboffs + td->veroffs] = td->version[chip];

		/* walk through the memory table */
		for (i = 0; i < numblocks;) {
c7e13668:	e59dc028 	ldr	ip, [sp, #40]
c7e1366c:	e15e000c 	cmp	lr, ip
c7e13670:	baffffe1 	blt	c7e135fc <write_bbt+0x51c>
					~(msk[dat & 0x03] << sftcnt);
				dat >>= 2;
			}
		}

		memset(&einfo, 0, sizeof(einfo));
c7e13674:	e28d4058 	add	r4, sp, #88	; 0x58
c7e13678:	e3a01000 	mov	r1, #0	; 0x0
c7e1367c:	e3a02048 	mov	r2, #72	; 0x48
c7e13680:	e1a00004 	mov	r0, r4
c7e13684:	eb003d42 	bl	c7e22b94 <memset>
		einfo.mtd = mtd;
		einfo.addr = to;
		einfo.len = 1 << this->bbt_erase_shift;
c7e13688:	e59d0020 	ldr	r0, [sp, #32]
c7e1368c:	e3a02001 	mov	r2, #1	; 0x1
c7e13690:	e590505c 	ldr	r5, [r0, #92]
		res = nand_erase_nand(mtd, &einfo, 1);
c7e13694:	e1a01004 	mov	r1, r4
		}

		memset(&einfo, 0, sizeof(einfo));
		einfo.mtd = mtd;
		einfo.addr = to;
		einfo.len = 1 << this->bbt_erase_shift;
c7e13698:	e1a05512 	lsl	r5, r2, r5
		res = nand_erase_nand(mtd, &einfo, 1);
c7e1369c:	e1a00009 	mov	r0, r9
		}

		memset(&einfo, 0, sizeof(einfo));
		einfo.mtd = mtd;
		einfo.addr = to;
		einfo.len = 1 << this->bbt_erase_shift;
c7e136a0:	e1a06fc5 	asr	r6, r5, #31
c7e136a4:	e58d5068 	str	r5, [sp, #104]
c7e136a8:	e58d606c 	str	r6, [sp, #108]
				dat >>= 2;
			}
		}

		memset(&einfo, 0, sizeof(einfo));
		einfo.mtd = mtd;
c7e136ac:	e58d9058 	str	r9, [sp, #88]
		einfo.addr = to;
c7e136b0:	e58da060 	str	sl, [sp, #96]
c7e136b4:	e58db064 	str	fp, [sp, #100]
		einfo.len = 1 << this->bbt_erase_shift;
		res = nand_erase_nand(mtd, &einfo, 1);
c7e136b8:	eb001296 	bl	c7e18118 <nand_erase_nand>
		if (res < 0)
c7e136bc:	e2504000 	subs	r4, r0, #0	; 0x0
			}
		}

		memset(&einfo, 0, sizeof(einfo));
		einfo.mtd = mtd;
		einfo.addr = to;
c7e136c0:	e1a0500a 	mov	r5, sl
c7e136c4:	e1a0600b 	mov	r6, fp
		einfo.len = 1 << this->bbt_erase_shift;
		res = nand_erase_nand(mtd, &einfo, 1);
		if (res < 0)
c7e136c8:	ba000039 	blt	c7e137b4 <write_bbt+0x6d4>
			goto outerr;

		res = scan_write_bbt(mtd, to, len, buf,
c7e136cc:	e59d1018 	ldr	r1, [sp, #24]
	ops.mode = MTD_OOB_PLACE;
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;
	ops.datbuf = buf;
	ops.oobbuf = oob;
	ops.len = len;
c7e136d0:	e59d403c 	ldr	r4, [sp, #60]
		einfo.len = 1 << this->bbt_erase_shift;
		res = nand_erase_nand(mtd, &einfo, 1);
		if (res < 0)
			goto outerr;

		res = scan_write_bbt(mtd, to, len, buf,
c7e136d4:	e5913000 	ldr	r3, [r1]
	struct mtd_oob_ops ops;

	ops.mode = MTD_OOB_PLACE;
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;
	ops.datbuf = buf;
c7e136d8:	e59d701c 	ldr	r7, [sp, #28]
		einfo.len = 1 << this->bbt_erase_shift;
		res = nand_erase_nand(mtd, &einfo, 1);
		if (res < 0)
			goto outerr;

		res = scan_write_bbt(mtd, to, len, buf,
c7e136dc:	e3130501 	tst	r3, #4194304	; 0x400000
c7e136e0:	059d301c 	ldreq	r3, [sp, #28]
c7e136e4:	059d203c 	ldreq	r2, [sp, #60]
c7e136e8:	13a01000 	movne	r1, #0	; 0x0
c7e136ec:	00831002 	addeq	r1, r3, r2
{
	struct mtd_oob_ops ops;

	ops.mode = MTD_OOB_PLACE;
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;
c7e136f0:	e5993018 	ldr	r3, [r9, #24]
static int scan_write_bbt(struct mtd_info *mtd, loff_t offs, size_t len,
			  uint8_t *buf, uint8_t *oob)
{
	struct mtd_oob_ops ops;

	ops.mode = MTD_OOB_PLACE;
c7e136f4:	e3a02000 	mov	r2, #0	; 0x0
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;
c7e136f8:	e58d30ac 	str	r3, [sp, #172]
	ops.datbuf = buf;
	ops.oobbuf = oob;
	ops.len = len;

	return mtd->write_oob(mtd, offs, &ops);
c7e136fc:	e28d30a0 	add	r3, sp, #160	; 0xa0
			  uint8_t *buf, uint8_t *oob)
{
	struct mtd_oob_ops ops;

	ops.mode = MTD_OOB_PLACE;
	ops.ooboffs = 0;
c7e13700:	e58d20b4 	str	r2, [sp, #180]
	ops.ooblen = mtd->oobsize;
	ops.datbuf = buf;
	ops.oobbuf = oob;
c7e13704:	e58d10bc 	str	r1, [sp, #188]
	ops.len = len;
c7e13708:	e58d40a4 	str	r4, [sp, #164]

	return mtd->write_oob(mtd, offs, &ops);
c7e1370c:	e58d3000 	str	r3, [sp]
static int scan_write_bbt(struct mtd_info *mtd, loff_t offs, size_t len,
			  uint8_t *buf, uint8_t *oob)
{
	struct mtd_oob_ops ops;

	ops.mode = MTD_OOB_PLACE;
c7e13710:	e58d20a0 	str	r2, [sp, #160]
	ops.ooboffs = 0;
	ops.ooblen = mtd->oobsize;
	ops.datbuf = buf;
c7e13714:	e58d70b8 	str	r7, [sp, #184]
	ops.oobbuf = oob;
	ops.len = len;

	return mtd->write_oob(mtd, offs, &ops);
c7e13718:	e1a0200a 	mov	r2, sl
c7e1371c:	e1a0300b 	mov	r3, fp
c7e13720:	e1a00009 	mov	r0, r9
c7e13724:	e1a0e00f 	mov	lr, pc
c7e13728:	e599f050 	ldr	pc, [r9, #80]
c7e1372c:	e59dc054 	ldr	ip, [sp, #84]
c7e13730:	e59d104c 	ldr	r1, [sp, #76]
			goto outerr;

		res = scan_write_bbt(mtd, to, len, buf,
				td->options & NAND_BBT_NO_OOB ? NULL :
				&buf[len]);
		if (res < 0)
c7e13734:	e2504000 	subs	r4, r0, #0	; 0x0
	ops.ooblen = mtd->oobsize;
	ops.datbuf = buf;
	ops.oobbuf = oob;
	ops.len = len;

	return mtd->write_oob(mtd, offs, &ops);
c7e13738:	e59d2028 	ldr	r2, [sp, #40]
c7e1373c:	e59d0044 	ldr	r0, [sp, #68]
c7e13740:	e0811002 	add	r1, r1, r2
c7e13744:	e08cc000 	add	ip, ip, r0
c7e13748:	e58dc054 	str	ip, [sp, #84]
c7e1374c:	e58d104c 	str	r1, [sp, #76]
			goto outerr;

		res = scan_write_bbt(mtd, to, len, buf,
				td->options & NAND_BBT_NO_OOB ? NULL :
				&buf[len]);
		if (res < 0)
c7e13750:	ba000017 	blt	c7e137b4 <write_bbt+0x6d4>
			goto outerr;

		printk(KERN_DEBUG "Bad block table written to 0x%012llx, version "
c7e13754:	e59d7018 	ldr	r7, [sp, #24]
c7e13758:	e59d4050 	ldr	r4, [sp, #80]
c7e1375c:	e59dc040 	ldr	ip, [sp, #64]
c7e13760:	e0873004 	add	r3, r7, r4
c7e13764:	e083300c 	add	r3, r3, ip
c7e13768:	e5d31010 	ldrb	r1, [r3, #16]
		       "0x%02X\n", (unsigned long long)to, td->version[chip]);

		/* Mark it as used */
		td->pages[chip] = page;
c7e1376c:	e28cc001 	add	ip, ip, #1	; 0x1
				td->options & NAND_BBT_NO_OOB ? NULL :
				&buf[len]);
		if (res < 0)
			goto outerr;

		printk(KERN_DEBUG "Bad block table written to 0x%012llx, version "
c7e13770:	e1a0200a 	mov	r2, sl
c7e13774:	e1a0300b 	mov	r3, fp
c7e13778:	e59f0058 	ldr	r0, [pc, #88]	; c7e137d8 <write_bbt+0x6f8>
c7e1377c:	e58d1000 	str	r1, [sp]
		       "0x%02X\n", (unsigned long long)to, td->version[chip]);

		/* Mark it as used */
		td->pages[chip] = page;
c7e13780:	e58dc040 	str	ip, [sp, #64]
				td->options & NAND_BBT_NO_OOB ? NULL :
				&buf[len]);
		if (res < 0)
			goto outerr;

		printk(KERN_DEBUG "Bad block table written to 0x%012llx, version "
c7e13784:	ebffd4b3 	bl	c7e08a58 <printf>
		       "0x%02X\n", (unsigned long long)to, td->version[chip]);

		/* Mark it as used */
		td->pages[chip] = page;
c7e13788:	e59d0024 	ldr	r0, [sp, #36]
c7e1378c:	e59d1048 	ldr	r1, [sp, #72]
c7e13790:	e5810004 	str	r0, [r1, #4]
		numblocks = (int)(mtd->size >> this->bbt_erase_shift);
		nrchips = 1;
	}

	/* Loop through the chips */
	for (; chip < nrchips; chip++) {
c7e13794:	e59d2040 	ldr	r2, [sp, #64]
c7e13798:	e59d4050 	ldr	r4, [sp, #80]
c7e1379c:	e59d5034 	ldr	r5, [sp, #52]
c7e137a0:	e0823004 	add	r3, r2, r4
c7e137a4:	e1530005 	cmp	r3, r5
c7e137a8:	bafffe83 	blt	c7e131bc <write_bbt+0xdc>
c7e137ac:	e3a04000 	mov	r4, #0	; 0x0
c7e137b0:	ea000002 	b	c7e137c0 <write_bbt+0x6e0>
		td->pages[chip] = page;
	}
	return 0;

 outerr:
	printk(KERN_WARNING
c7e137b4:	e59f0020 	ldr	r0, [pc, #32]	; c7e137dc <write_bbt+0x6fc>
c7e137b8:	e1a01004 	mov	r1, r4
c7e137bc:	ebffd4a5 	bl	c7e08a58 <printf>
	       "nand_bbt: Error while writing bad block table %d\n", res);
	return res;
}
c7e137c0:	e1a00004 	mov	r0, r4
c7e137c4:	e28dd0e8 	add	sp, sp, #232	; 0xe8
c7e137c8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e137cc:	c7e3307a 	.word	0xc7e3307a
c7e137d0:	c7e330a2 	.word	0xc7e330a2
c7e137d4:	c7e330e1 	.word	0xc7e330e1
c7e137d8:	c7e33126 	.word	0xc7e33126
c7e137dc:	c7e3315c 	.word	0xc7e3315c

c7e137e0 <nand_update_bbt>:
 * @offs:	the offset of the newly marked block
 *
 * The function updates the bad block table(s)
*/
int nand_update_bbt(struct mtd_info *mtd, loff_t offs)
{
c7e137e0:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	struct nand_chip *this = mtd->priv;
c7e137e4:	e5904094 	ldr	r4, [r0, #148]
 * @offs:	the offset of the newly marked block
 *
 * The function updates the bad block table(s)
*/
int nand_update_bbt(struct mtd_info *mtd, loff_t offs)
{
c7e137e8:	e1a0b003 	mov	fp, r3
	struct nand_chip *this = mtd->priv;
	int len, res = 0, writeops = 0;
	int chip, chipsel;
	uint8_t *buf;
	struct nand_bbt_descr *td = this->bbt_td;
c7e137ec:	e5946114 	ldr	r6, [r4, #276]
	struct nand_bbt_descr *md = this->bbt_md;

	if (!this->bbt || !td)
c7e137f0:	e5943110 	ldr	r3, [r4, #272]
	struct nand_chip *this = mtd->priv;
	int len, res = 0, writeops = 0;
	int chip, chipsel;
	uint8_t *buf;
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;
c7e137f4:	e5945118 	ldr	r5, [r4, #280]

	if (!this->bbt || !td)
c7e137f8:	e3560000 	cmp	r6, #0	; 0x0
c7e137fc:	13530000 	cmpne	r3, #0	; 0x0
 * @offs:	the offset of the newly marked block
 *
 * The function updates the bad block table(s)
*/
int nand_update_bbt(struct mtd_info *mtd, loff_t offs)
{
c7e13800:	e1a09000 	mov	r9, r0
c7e13804:	e1a0a002 	mov	sl, r2
	int chip, chipsel;
	uint8_t *buf;
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;

	if (!this->bbt || !td)
c7e13808:	03e04015 	mvneq	r4, #21	; 0x15
c7e1380c:	0a000045 	beq	c7e13928 <nand_update_bbt+0x148>
		return -EINVAL;

	/* Allocate a temporary buffer for one eraseblock incl. oob */
	len = (1 << this->bbt_erase_shift);
c7e13810:	e594305c 	ldr	r3, [r4, #92]
c7e13814:	e3a02001 	mov	r2, #1	; 0x1
c7e13818:	e1a02312 	lsl	r2, r2, r3
	len += (len >> this->page_shift) * mtd->oobsize;
	buf = kmalloc(len, GFP_KERNEL);
c7e1381c:	e5943054 	ldr	r3, [r4, #84]
c7e13820:	e5901018 	ldr	r1, [r0, #24]
c7e13824:	e1a03352 	asr	r3, r2, r3
c7e13828:	e0202391 	mla	r0, r1, r3, r2
c7e1382c:	ebffd65a 	bl	c7e0919c <malloc>
	if (!buf) {
c7e13830:	e3500000 	cmp	r0, #0	; 0x0
c7e13834:	e58d000c 	str	r0, [sp, #12]
c7e13838:	1a000003 	bne	c7e1384c <nand_update_bbt+0x6c>
		printk(KERN_ERR "nand_update_bbt: Out of memory\n");
c7e1383c:	e59f00f0 	ldr	r0, [pc, #240]	; c7e13934 <nand_update_bbt+0x154>
c7e13840:	ebffd484 	bl	c7e08a58 <printf>
c7e13844:	e3e0400b 	mvn	r4, #11	; 0xb
c7e13848:	ea000036 	b	c7e13928 <nand_update_bbt+0x148>
	}

	writeops = md != NULL ? 0x03 : 0x01;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e1384c:	e5963000 	ldr	r3, [r6]
	if (!buf) {
		printk(KERN_ERR "nand_update_bbt: Out of memory\n");
		return -ENOMEM;
	}

	writeops = md != NULL ? 0x03 : 0x01;
c7e13850:	e3550000 	cmp	r5, #0	; 0x0
c7e13854:	13a02003 	movne	r2, #3	; 0x3
c7e13858:	03a02001 	moveq	r2, #1	; 0x1

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e1385c:	e2130080 	ands	r0, r3, #128	; 0x80
	if (!buf) {
		printk(KERN_ERR "nand_update_bbt: Out of memory\n");
		return -ENOMEM;
	}

	writeops = md != NULL ? 0x03 : 0x01;
c7e13860:	e58d2008 	str	r2, [sp, #8]

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13864:	03e07000 	mvneq	r7, #0	; 0x0
c7e13868:	0a000004 	beq	c7e13880 <nand_update_bbt+0xa0>
		chip = (int)(offs >> this->chip_shift);
c7e1386c:	e1a0000a 	mov	r0, sl
c7e13870:	e1a0100b 	mov	r1, fp
c7e13874:	e5942060 	ldr	r2, [r4, #96]
c7e13878:	eb005bc0 	bl	c7e2a780 <__ashrdi3>
c7e1387c:	e1a07000 	mov	r7, r0
	} else {
		chip = 0;
		chipsel = -1;
	}

	td->version[chip]++;
c7e13880:	e0862000 	add	r2, r6, r0
c7e13884:	e5d23010 	ldrb	r3, [r2, #16]
	if (md)
c7e13888:	e3550000 	cmp	r5, #0	; 0x0
	} else {
		chip = 0;
		chipsel = -1;
	}

	td->version[chip]++;
c7e1388c:	e2833001 	add	r3, r3, #1	; 0x1
c7e13890:	e5c23010 	strb	r3, [r2, #16]
	if (md)
		md->version[chip]++;
c7e13894:	10852000 	addne	r2, r5, r0
c7e13898:	15d23010 	ldrbne	r3, [r2, #16]
c7e1389c:	12833001 	addne	r3, r3, #1	; 0x1
c7e138a0:	15c23010 	strbne	r3, [r2, #16]

	/* Write the bad block table to the device ? */
	if ((writeops & 0x01) && (td->options & NAND_BBT_WRITE)) {
c7e138a4:	e59d3008 	ldr	r3, [sp, #8]
c7e138a8:	e3130001 	tst	r3, #1	; 0x1
c7e138ac:	0a00000b 	beq	c7e138e0 <nand_update_bbt+0x100>
c7e138b0:	e5963000 	ldr	r3, [r6]
c7e138b4:	e3130a01 	tst	r3, #4096	; 0x1000
c7e138b8:	0a000008 	beq	c7e138e0 <nand_update_bbt+0x100>
		res = write_bbt(mtd, buf, td, md, chipsel);
c7e138bc:	e1a00009 	mov	r0, r9
c7e138c0:	e59d100c 	ldr	r1, [sp, #12]
c7e138c4:	e1a02006 	mov	r2, r6
c7e138c8:	e1a03005 	mov	r3, r5
c7e138cc:	e58d7000 	str	r7, [sp]
c7e138d0:	ebfffe02 	bl	c7e130e0 <write_bbt>
		if (res < 0)
c7e138d4:	e2504000 	subs	r4, r0, #0	; 0x0
c7e138d8:	aa000001 	bge	c7e138e4 <nand_update_bbt+0x104>
c7e138dc:	ea00000f 	b	c7e13920 <nand_update_bbt+0x140>
c7e138e0:	e3a04000 	mov	r4, #0	; 0x0
			goto out;
	}
	/* Write the mirror bad block table to the device ? */
	if ((writeops & 0x02) && md && (md->options & NAND_BBT_WRITE)) {
c7e138e4:	e59d2008 	ldr	r2, [sp, #8]
c7e138e8:	e2553000 	subs	r3, r5, #0	; 0x0
c7e138ec:	13a03001 	movne	r3, #1	; 0x1
c7e138f0:	e01320a2 	ands	r2, r3, r2, lsr #1
c7e138f4:	0a000009 	beq	c7e13920 <nand_update_bbt+0x140>
c7e138f8:	e5953000 	ldr	r3, [r5]
c7e138fc:	e3130a01 	tst	r3, #4096	; 0x1000
c7e13900:	0a000006 	beq	c7e13920 <nand_update_bbt+0x140>
		res = write_bbt(mtd, buf, md, td, chipsel);
c7e13904:	e1a00009 	mov	r0, r9
c7e13908:	e1a02005 	mov	r2, r5
c7e1390c:	e1a03006 	mov	r3, r6
c7e13910:	e59d100c 	ldr	r1, [sp, #12]
c7e13914:	e58d7000 	str	r7, [sp]
c7e13918:	ebfffdf0 	bl	c7e130e0 <write_bbt>
c7e1391c:	e1a04000 	mov	r4, r0
	}

 out:
	kfree(buf);
c7e13920:	e59d000c 	ldr	r0, [sp, #12]
c7e13924:	ebffd58d 	bl	c7e08f60 <free>
	return res;
}
c7e13928:	e1a00004 	mov	r0, r4
c7e1392c:	e28dd010 	add	sp, sp, #16	; 0x10
c7e13930:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e13934:	c7e3318e 	.word	0xc7e3318e

c7e13938 <mark_bbt_region>:
	struct nand_chip *this = mtd->priv;
	int i, j, chips, block, nrblocks, update;
	uint8_t oldval, newval;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13938:	e5913000 	ldr	r3, [r1]
 * The bad block table regions are marked as "bad" to prevent
 * accidental erasures / writes. The regions are identified by
 * the mark 0x02.
*/
static void mark_bbt_region(struct mtd_info *mtd, struct nand_bbt_descr *td)
{
c7e1393c:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	struct nand_chip *this = mtd->priv;
c7e13940:	e5904094 	ldr	r4, [r0, #148]
	int i, j, chips, block, nrblocks, update;
	uint8_t oldval, newval;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13944:	e3130080 	tst	r3, #128	; 0x80
 * The bad block table regions are marked as "bad" to prevent
 * accidental erasures / writes. The regions are identified by
 * the mark 0x02.
*/
static void mark_bbt_region(struct mtd_info *mtd, struct nand_bbt_descr *td)
{
c7e13948:	e1a05001 	mov	r5, r1
c7e1394c:	e1a09000 	mov	r9, r0
c7e13950:	e594205c 	ldr	r2, [r4, #92]
	struct nand_chip *this = mtd->priv;
	int i, j, chips, block, nrblocks, update;
	uint8_t oldval, newval;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e13954:	0a000005 	beq	c7e13970 <mark_bbt_region+0x38>
		chips = this->numchips;
		nrblocks = (int)(this->chipsize >> this->bbt_erase_shift);
c7e13958:	e2841068 	add	r1, r4, #104	; 0x68
c7e1395c:	e8910003 	ldm	r1, {r0, r1}
c7e13960:	eb005b7f 	bl	c7e2a764 <__lshrdi3>
	int i, j, chips, block, nrblocks, update;
	uint8_t oldval, newval;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
		chips = this->numchips;
c7e13964:	e5943064 	ldr	r3, [r4, #100]
		nrblocks = (int)(this->chipsize >> this->bbt_erase_shift);
c7e13968:	e1a0b000 	mov	fp, r0
c7e1396c:	ea000004 	b	c7e13984 <mark_bbt_region+0x4c>
	} else {
		chips = 1;
		nrblocks = (int)(mtd->size >> this->bbt_erase_shift);
c7e13970:	e2801008 	add	r1, r0, #8	; 0x8
c7e13974:	e8910003 	ldm	r1, {r0, r1}
c7e13978:	eb005b79 	bl	c7e2a764 <__lshrdi3>
c7e1397c:	e3a03001 	mov	r3, #1	; 0x1
c7e13980:	e1a0b000 	mov	fp, r0
c7e13984:	e3a07000 	mov	r7, #0	; 0x0
c7e13988:	e58d3004 	str	r3, [sp, #4]
c7e1398c:	e1a0a007 	mov	sl, r7
c7e13990:	ea000044 	b	c7e13aa8 <mark_bbt_region+0x170>
	}

	for (i = 0; i < chips; i++) {
		if ((td->options & NAND_BBT_ABSPAGE) ||
c7e13994:	e5953000 	ldr	r3, [r5]
c7e13998:	e3130020 	tst	r3, #32	; 0x20
c7e1399c:	1a000001 	bne	c7e139a8 <mark_bbt_region+0x70>
c7e139a0:	e3130a01 	tst	r3, #4096	; 0x1000
c7e139a4:	1a000018 	bne	c7e13a0c <mark_bbt_region+0xd4>
		    !(td->options & NAND_BBT_WRITE)) {
			if (td->pages[i] == -1)
c7e139a8:	e0853107 	add	r3, r5, r7, lsl #2
c7e139ac:	e5931004 	ldr	r1, [r3, #4]
c7e139b0:	e3710001 	cmn	r1, #1	; 0x1
c7e139b4:	0a000039 	beq	c7e13aa0 <mark_bbt_region+0x168>
				continue;
			block = td->pages[i] >> (this->bbt_erase_shift - this->page_shift);
c7e139b8:	e5942054 	ldr	r2, [r4, #84]
c7e139bc:	e594305c 	ldr	r3, [r4, #92]
			block <<= 1;
			oldval = this->bbt[(block >> 3)];
c7e139c0:	e5940110 	ldr	r0, [r4, #272]
	for (i = 0; i < chips; i++) {
		if ((td->options & NAND_BBT_ABSPAGE) ||
		    !(td->options & NAND_BBT_WRITE)) {
			if (td->pages[i] == -1)
				continue;
			block = td->pages[i] >> (this->bbt_erase_shift - this->page_shift);
c7e139c4:	e0623003 	rsb	r3, r2, r3
c7e139c8:	e1a03351 	asr	r3, r1, r3
			block <<= 1;
c7e139cc:	e1a0c083 	lsl	ip, r3, #1
			oldval = this->bbt[(block >> 3)];
c7e139d0:	e7d011cc 	ldrb	r1, [r0, ip, asr #3]
			newval = oldval | (0x2 << (block & 0x06));
c7e139d4:	e20c2006 	and	r2, ip, #6	; 0x6
c7e139d8:	e3a03002 	mov	r3, #2	; 0x2
c7e139dc:	e1813213 	orr	r3, r1, r3, lsl r2
c7e139e0:	e20330ff 	and	r3, r3, #255	; 0xff
			this->bbt[(block >> 3)] = newval;
			if ((oldval != newval) && td->reserved_block_code)
c7e139e4:	e1510003 	cmp	r1, r3
				continue;
			block = td->pages[i] >> (this->bbt_erase_shift - this->page_shift);
			block <<= 1;
			oldval = this->bbt[(block >> 3)];
			newval = oldval | (0x2 << (block & 0x06));
			this->bbt[(block >> 3)] = newval;
c7e139e8:	e7c031cc 	strb	r3, [r0, ip, asr #3]
			if ((oldval != newval) && td->reserved_block_code)
c7e139ec:	0a00002b 	beq	c7e13aa0 <mark_bbt_region+0x168>
c7e139f0:	e595301c 	ldr	r3, [r5, #28]
c7e139f4:	e3530000 	cmp	r3, #0	; 0x0
				nand_update_bbt(mtd, (loff_t)block << (this->bbt_erase_shift - 1));
c7e139f8:	1594205c 	ldrne	r2, [r4, #92]
c7e139fc:	11a0000c 	movne	r0, ip
c7e13a00:	11a01fc0 	asrne	r1, r0, #31
			block = td->pages[i] >> (this->bbt_erase_shift - this->page_shift);
			block <<= 1;
			oldval = this->bbt[(block >> 3)];
			newval = oldval | (0x2 << (block & 0x06));
			this->bbt[(block >> 3)] = newval;
			if ((oldval != newval) && td->reserved_block_code)
c7e13a04:	0a000025 	beq	c7e13aa0 <mark_bbt_region+0x168>
c7e13a08:	ea00001e 	b	c7e13a88 <mark_bbt_region+0x150>
				nand_update_bbt(mtd, (loff_t)block << (this->bbt_erase_shift - 1));
			continue;
		}
		update = 0;
		if (td->options & NAND_BBT_LASTBLOCK)
c7e13a0c:	e3130010 	tst	r3, #16	; 0x10
			block = ((i + 1) * nrblocks) - td->maxblocks;
c7e13a10:	15952018 	ldrne	r2, [r5, #24]
c7e13a14:	108a300b 	addne	r3, sl, fp
c7e13a18:	10620003 	rsbne	r0, r2, r3
c7e13a1c:	01a0000a 	moveq	r0, sl
		else
			block = i * nrblocks;
		block <<= 1;
c7e13a20:	e3a0c000 	mov	ip, #0	; 0x0
c7e13a24:	e1a00080 	lsl	r0, r0, #1
c7e13a28:	e1a0e00c 	mov	lr, ip
c7e13a2c:	ea000008 	b	c7e13a54 <mark_bbt_region+0x11c>
		for (j = 0; j < td->maxblocks; j++) {
			oldval = this->bbt[(block >> 3)];
c7e13a30:	e5941110 	ldr	r1, [r4, #272]
			newval = oldval | (0x2 << (block & 0x06));
c7e13a34:	e3a03002 	mov	r3, #2	; 0x2
			block = ((i + 1) * nrblocks) - td->maxblocks;
		else
			block = i * nrblocks;
		block <<= 1;
		for (j = 0; j < td->maxblocks; j++) {
			oldval = this->bbt[(block >> 3)];
c7e13a38:	e7d121c0 	ldrb	r2, [r1, r0, asr #3]
			newval = oldval | (0x2 << (block & 0x06));
c7e13a3c:	e1823613 	orr	r3, r2, r3, lsl r6
c7e13a40:	e20330ff 	and	r3, r3, #255	; 0xff
			this->bbt[(block >> 3)] = newval;
			if (oldval != newval)
c7e13a44:	e1520003 	cmp	r2, r3
			block = i * nrblocks;
		block <<= 1;
		for (j = 0; j < td->maxblocks; j++) {
			oldval = this->bbt[(block >> 3)];
			newval = oldval | (0x2 << (block & 0x06));
			this->bbt[(block >> 3)] = newval;
c7e13a48:	e7c131c0 	strb	r3, [r1, r0, asr #3]
			if (oldval != newval)
c7e13a4c:	13a0e001 	movne	lr, #1	; 0x1
				update = 1;
			block += 2;
c7e13a50:	e2800002 	add	r0, r0, #2	; 0x2
		if (td->options & NAND_BBT_LASTBLOCK)
			block = ((i + 1) * nrblocks) - td->maxblocks;
		else
			block = i * nrblocks;
		block <<= 1;
		for (j = 0; j < td->maxblocks; j++) {
c7e13a54:	e5953018 	ldr	r3, [r5, #24]
			oldval = this->bbt[(block >> 3)];
			newval = oldval | (0x2 << (block & 0x06));
c7e13a58:	e2006006 	and	r6, r0, #6	; 0x6
		if (td->options & NAND_BBT_LASTBLOCK)
			block = ((i + 1) * nrblocks) - td->maxblocks;
		else
			block = i * nrblocks;
		block <<= 1;
		for (j = 0; j < td->maxblocks; j++) {
c7e13a5c:	e15c0003 	cmp	ip, r3
c7e13a60:	e28cc001 	add	ip, ip, #1	; 0x1
c7e13a64:	bafffff1 	blt	c7e13a30 <mark_bbt_region+0xf8>
			block += 2;
		}
		/* If we want reserved blocks to be recorded to flash, and some
		   new ones have been marked, then we need to update the stored
		   bbts.  This should only happen once. */
		if (update && td->reserved_block_code)
c7e13a68:	e35e0000 	cmp	lr, #0	; 0x0
c7e13a6c:	0a00000b 	beq	c7e13aa0 <mark_bbt_region+0x168>
c7e13a70:	e595301c 	ldr	r3, [r5, #28]
c7e13a74:	e3530000 	cmp	r3, #0	; 0x0
c7e13a78:	0a000008 	beq	c7e13aa0 <mark_bbt_region+0x168>
			nand_update_bbt(mtd, (loff_t)(block - 2) << (this->bbt_erase_shift - 1));
c7e13a7c:	e2400002 	sub	r0, r0, #2	; 0x2
c7e13a80:	e594205c 	ldr	r2, [r4, #92]
c7e13a84:	e1a01fc0 	asr	r1, r0, #31
c7e13a88:	e2422001 	sub	r2, r2, #1	; 0x1
c7e13a8c:	eb005b42 	bl	c7e2a79c <__ashldi3>
c7e13a90:	e1a02000 	mov	r2, r0
c7e13a94:	e1a03001 	mov	r3, r1
c7e13a98:	e1a00009 	mov	r0, r9
c7e13a9c:	ebffff4f 	bl	c7e137e0 <nand_update_bbt>
	} else {
		chips = 1;
		nrblocks = (int)(mtd->size >> this->bbt_erase_shift);
	}

	for (i = 0; i < chips; i++) {
c7e13aa0:	e2877001 	add	r7, r7, #1	; 0x1
c7e13aa4:	e08aa00b 	add	sl, sl, fp
c7e13aa8:	e59d3004 	ldr	r3, [sp, #4]
c7e13aac:	e1570003 	cmp	r7, r3
c7e13ab0:	baffffb7 	blt	c7e13994 <mark_bbt_region+0x5c>
		   new ones have been marked, then we need to update the stored
		   bbts.  This should only happen once. */
		if (update && td->reserved_block_code)
			nand_update_bbt(mtd, (loff_t)(block - 2) << (this->bbt_erase_shift - 1));
	}
}
c7e13ab4:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}

c7e13ab8 <verify_bbt_descr>:
	struct nand_chip *this = mtd->priv;
	u32 pattern_len;
	u32 bits;
	u32 table_size;

	if (!bd)
c7e13ab8:	e3510000 	cmp	r1, #0	; 0x0
 *
 * This functions performs a few sanity checks on the bad block description
 * table.
 */
static void verify_bbt_descr(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
c7e13abc:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e13ac0:	e1a06000 	mov	r6, r0
	struct nand_chip *this = mtd->priv;
c7e13ac4:	e5904094 	ldr	r4, [r0, #148]
	u32 pattern_len;
	u32 bits;
	u32 table_size;

	if (!bd)
c7e13ac8:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
		return;

	pattern_len = bd->len;
	bits = bd->options & NAND_BBT_NRBITS_MSK;

	BUG_ON((this->options & NAND_USE_FLASH_BBT_NO_OOB) &&
c7e13acc:	e5943050 	ldr	r3, [r4, #80]
	u32 table_size;

	if (!bd)
		return;

	pattern_len = bd->len;
c7e13ad0:	e591c014 	ldr	ip, [r1, #20]
	bits = bd->options & NAND_BBT_NRBITS_MSK;

	BUG_ON((this->options & NAND_USE_FLASH_BBT_NO_OOB) &&
c7e13ad4:	e2130502 	ands	r0, r3, #8388608	; 0x800000

	if (!bd)
		return;

	pattern_len = bd->len;
	bits = bd->options & NAND_BBT_NRBITS_MSK;
c7e13ad8:	e5912000 	ldr	r2, [r1]

	BUG_ON((this->options & NAND_USE_FLASH_BBT_NO_OOB) &&
c7e13adc:	0a000041 	beq	c7e13be8 <verify_bbt_descr+0x130>
c7e13ae0:	e3130801 	tst	r3, #65536	; 0x10000
c7e13ae4:	1a00003f 	bne	c7e13be8 <verify_bbt_descr+0x130>
c7e13ae8:	e59f0104 	ldr	r0, [pc, #260]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13aec:	e59f1104 	ldr	r1, [pc, #260]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13af0:	e59f2104 	ldr	r2, [pc, #260]	; c7e13bfc <verify_bbt_descr+0x144>
c7e13af4:	ea000002 	b	c7e13b04 <verify_bbt_descr+0x4c>
			!(this->options & NAND_USE_FLASH_BBT));
	BUG_ON(!bits);
c7e13af8:	e59f00f4 	ldr	r0, [pc, #244]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13afc:	e59f10f4 	ldr	r1, [pc, #244]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13b00:	e59f20f8 	ldr	r2, [pc, #248]	; c7e13c00 <verify_bbt_descr+0x148>
c7e13b04:	e59f30f8 	ldr	r3, [pc, #248]	; c7e13c04 <verify_bbt_descr+0x14c>
c7e13b08:	ebffd3d2 	bl	c7e08a58 <printf>
c7e13b0c:	e59f00f4 	ldr	r0, [pc, #244]	; c7e13c08 <verify_bbt_descr+0x150>
c7e13b10:	eb003df8 	bl	c7e232f8 <panic>

	if (bd->options & NAND_BBT_VERSION)
c7e13b14:	e212ec01 	ands	lr, r2, #256	; 0x100
	u32 table_size;

	if (!bd)
		return;

	pattern_len = bd->len;
c7e13b18:	e1a0500c 	mov	r5, ip
	BUG_ON((this->options & NAND_USE_FLASH_BBT_NO_OOB) &&
			!(this->options & NAND_USE_FLASH_BBT));
	BUG_ON(!bits);

	if (bd->options & NAND_BBT_VERSION)
		pattern_len++;
c7e13b1c:	128c5001 	addne	r5, ip, #1	; 0x1

	if (bd->options & NAND_BBT_NO_OOB) {
c7e13b20:	e2127501 	ands	r7, r2, #4194304	; 0x400000
c7e13b24:	0a00001c 	beq	c7e13b9c <verify_bbt_descr+0xe4>
		BUG_ON(!(this->options & NAND_USE_FLASH_BBT));
c7e13b28:	e3130801 	tst	r3, #65536	; 0x10000
c7e13b2c:	059f00c0 	ldreq	r0, [pc, #192]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13b30:	059f10c0 	ldreq	r1, [pc, #192]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13b34:	059f20d0 	ldreq	r2, [pc, #208]	; c7e13c0c <verify_bbt_descr+0x154>
c7e13b38:	0afffff1 	beq	c7e13b04 <verify_bbt_descr+0x4c>
		BUG_ON(!(this->options & NAND_USE_FLASH_BBT_NO_OOB));
c7e13b3c:	e3500000 	cmp	r0, #0	; 0x0
c7e13b40:	059f00ac 	ldreq	r0, [pc, #172]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13b44:	059f10ac 	ldreq	r1, [pc, #172]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13b48:	059f20c0 	ldreq	r2, [pc, #192]	; c7e13c10 <verify_bbt_descr+0x158>
c7e13b4c:	0affffec 	beq	c7e13b04 <verify_bbt_descr+0x4c>
		BUG_ON(bd->offs);
c7e13b50:	e5913008 	ldr	r3, [r1, #8]
c7e13b54:	e3530000 	cmp	r3, #0	; 0x0
c7e13b58:	159f0094 	ldrne	r0, [pc, #148]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13b5c:	159f1094 	ldrne	r1, [pc, #148]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13b60:	159f20ac 	ldrne	r2, [pc, #172]	; c7e13c14 <verify_bbt_descr+0x15c>
c7e13b64:	1affffe6 	bne	c7e13b04 <verify_bbt_descr+0x4c>
		if (bd->options & NAND_BBT_VERSION)
c7e13b68:	e35e0000 	cmp	lr, #0	; 0x0
c7e13b6c:	0a000005 	beq	c7e13b88 <verify_bbt_descr+0xd0>
			BUG_ON(bd->veroffs != bd->len);
c7e13b70:	e591300c 	ldr	r3, [r1, #12]
c7e13b74:	e153000c 	cmp	r3, ip
c7e13b78:	159f0074 	ldrne	r0, [pc, #116]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13b7c:	159f1074 	ldrne	r1, [pc, #116]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13b80:	159f2090 	ldrne	r2, [pc, #144]	; c7e13c18 <verify_bbt_descr+0x160>
c7e13b84:	1affffde 	bne	c7e13b04 <verify_bbt_descr+0x4c>
		BUG_ON(bd->options & NAND_BBT_SAVECONTENT);
c7e13b88:	e3120a02 	tst	r2, #8192	; 0x2000
c7e13b8c:	159f0060 	ldrne	r0, [pc, #96]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13b90:	159f1060 	ldrne	r1, [pc, #96]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13b94:	159f2080 	ldrne	r2, [pc, #128]	; c7e13c1c <verify_bbt_descr+0x164>
c7e13b98:	1affffd9 	bne	c7e13b04 <verify_bbt_descr+0x4c>
	}

	if (bd->options & NAND_BBT_PERCHIP)
c7e13b9c:	e3120080 	tst	r2, #128	; 0x80
c7e13ba0:	e594205c 	ldr	r2, [r4, #92]
		table_size = this->chipsize >> this->bbt_erase_shift;
c7e13ba4:	12841068 	addne	r1, r4, #104	; 0x68
c7e13ba8:	18910003 	ldmne	r1, {r0, r1}
	else
		table_size = mtd->size >> this->bbt_erase_shift;
c7e13bac:	02861008 	addeq	r1, r6, #8	; 0x8
c7e13bb0:	08910003 	ldmeq	r1, {r0, r1}
c7e13bb4:	eb005aea 	bl	c7e2a764 <__lshrdi3>
	table_size >>= 3;
c7e13bb8:	e1a031a0 	lsr	r3, r0, #3
	table_size *= bits;
c7e13bbc:	e001039a 	mul	r1, sl, r3
	if (bd->options & NAND_BBT_NO_OOB)
c7e13bc0:	e3570000 	cmp	r7, #0	; 0x0
		table_size += pattern_len;
	BUG_ON(table_size > (1 << this->bbt_erase_shift));
c7e13bc4:	e594205c 	ldr	r2, [r4, #92]
	else
		table_size = mtd->size >> this->bbt_erase_shift;
	table_size >>= 3;
	table_size *= bits;
	if (bd->options & NAND_BBT_NO_OOB)
		table_size += pattern_len;
c7e13bc8:	10811005 	addne	r1, r1, r5
	BUG_ON(table_size > (1 << this->bbt_erase_shift));
c7e13bcc:	e3a03001 	mov	r3, #1	; 0x1
c7e13bd0:	e1510213 	cmp	r1, r3, lsl r2
c7e13bd4:	98bd84f0 	popls	{r4, r5, r6, r7, sl, pc}
c7e13bd8:	e59f0014 	ldr	r0, [pc, #20]	; c7e13bf4 <verify_bbt_descr+0x13c>
c7e13bdc:	e59f1014 	ldr	r1, [pc, #20]	; c7e13bf8 <verify_bbt_descr+0x140>
c7e13be0:	e59f2038 	ldr	r2, [pc, #56]	; c7e13c20 <verify_bbt_descr+0x168>
c7e13be4:	eaffffc6 	b	c7e13b04 <verify_bbt_descr+0x4c>
	pattern_len = bd->len;
	bits = bd->options & NAND_BBT_NRBITS_MSK;

	BUG_ON((this->options & NAND_USE_FLASH_BBT_NO_OOB) &&
			!(this->options & NAND_USE_FLASH_BBT));
	BUG_ON(!bits);
c7e13be8:	e212a00f 	ands	sl, r2, #15	; 0xf
c7e13bec:	1affffc8 	bne	c7e13b14 <verify_bbt_descr+0x5c>
c7e13bf0:	eaffffc0 	b	c7e13af8 <verify_bbt_descr+0x40>
c7e13bf4:	c7e30403 	.word	0xc7e30403
c7e13bf8:	c7e331ae 	.word	0xc7e331ae
c7e13bfc:	0000045b 	.word	0x0000045b
c7e13c00:	0000045c 	.word	0x0000045c
c7e13c04:	c7e2a7d0 	.word	0xc7e2a7d0
c7e13c08:	c7e3042a 	.word	0xc7e3042a
c7e13c0c:	00000462 	.word	0x00000462
c7e13c10:	00000463 	.word	0x00000463
c7e13c14:	00000464 	.word	0x00000464
c7e13c18:	00000466 	.word	0x00000466
c7e13c1c:	00000467 	.word	0x00000467
c7e13c20:	00000472 	.word	0x00000472

c7e13c24 <check_pattern>:
 * If the SCAN_EMPTY option is set then check, if all bytes except the
 * pattern area contain 0xff
 *
*/
static int check_pattern(uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
{
c7e13c24:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int i, end = 0;
	uint8_t *p = buf;

	if (td->options & NAND_BBT_NO_OOB)
c7e13c28:	e5934000 	ldr	r4, [r3]
 * If the SCAN_EMPTY option is set then check, if all bytes except the
 * pattern area contain 0xff
 *
*/
static int check_pattern(uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
{
c7e13c2c:	e1a05003 	mov	r5, r3
	int i, end = 0;
	uint8_t *p = buf;

	if (td->options & NAND_BBT_NO_OOB)
c7e13c30:	e2143501 	ands	r3, r4, #4194304	; 0x400000
 * If the SCAN_EMPTY option is set then check, if all bytes except the
 * pattern area contain 0xff
 *
*/
static int check_pattern(uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
{
c7e13c34:	e1a09001 	mov	r9, r1
c7e13c38:	e1a0c000 	mov	ip, r0
	int i, end = 0;
	uint8_t *p = buf;

	if (td->options & NAND_BBT_NO_OOB)
c7e13c3c:	0a000005 	beq	c7e13c58 <check_pattern+0x34>

static int check_pattern_no_oob(uint8_t *buf, struct nand_bbt_descr *td)
{
	int ret;

	ret = memcmp(buf, td->pattern, td->len);
c7e13c40:	e5952014 	ldr	r2, [r5, #20]
c7e13c44:	e5951020 	ldr	r1, [r5, #32]
c7e13c48:	eb003c35 	bl	c7e22d24 <memcmp>
	if (!ret)
c7e13c4c:	e3500000 	cmp	r0, #0	; 0x0
c7e13c50:	13e00000 	mvnne	r0, #0	; 0x0
c7e13c54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t *p = buf;

	if (td->options & NAND_BBT_NO_OOB)
		return check_pattern_no_oob(buf, td);

	end = paglen + td->offs;
c7e13c58:	e5957008 	ldr	r7, [r5, #8]
	if (td->options & NAND_BBT_SCANEMPTY) {
c7e13c5c:	e214ab02 	ands	sl, r4, #2048	; 0x800
	uint8_t *p = buf;

	if (td->options & NAND_BBT_NO_OOB)
		return check_pattern_no_oob(buf, td);

	end = paglen + td->offs;
c7e13c60:	e0826007 	add	r6, r2, r7
	if (td->options & NAND_BBT_SCANEMPTY) {
c7e13c64:	11a02003 	movne	r2, r3
c7e13c68:	1a000004 	bne	c7e13c80 <check_pattern+0x5c>
c7e13c6c:	ea000005 	b	c7e13c88 <check_pattern+0x64>
		for (i = 0; i < end; i++) {
			if (p[i] != 0xff)
c7e13c70:	e7dc3002 	ldrb	r3, [ip, r2]
	if (td->options & NAND_BBT_NO_OOB)
		return check_pattern_no_oob(buf, td);

	end = paglen + td->offs;
	if (td->options & NAND_BBT_SCANEMPTY) {
		for (i = 0; i < end; i++) {
c7e13c74:	e2822001 	add	r2, r2, #1	; 0x1
			if (p[i] != 0xff)
c7e13c78:	e35300ff 	cmp	r3, #255	; 0xff
c7e13c7c:	1a000038 	bne	c7e13d64 <check_pattern+0x140>
	if (td->options & NAND_BBT_NO_OOB)
		return check_pattern_no_oob(buf, td);

	end = paglen + td->offs;
	if (td->options & NAND_BBT_SCANEMPTY) {
		for (i = 0; i < end; i++) {
c7e13c80:	e1520006 	cmp	r2, r6
c7e13c84:	bafffff9 	blt	c7e13c70 <check_pattern+0x4c>
			if (p[i] != 0xff)
				return -1;
		}
	}
	p += end;
c7e13c88:	e08c0006 	add	r0, ip, r6

	/* Compare the pattern */
	for (i = 0; i < td->len; i++) {
c7e13c8c:	e5951014 	ldr	r1, [r5, #20]
c7e13c90:	e3a0c000 	mov	ip, #0	; 0x0
c7e13c94:	ea000005 	b	c7e13cb0 <check_pattern+0x8c>
		if (p[i] != td->pattern[i])
c7e13c98:	e5953020 	ldr	r3, [r5, #32]
c7e13c9c:	e7d0200c 	ldrb	r2, [r0, ip]
c7e13ca0:	e7d3300c 	ldrb	r3, [r3, ip]
		}
	}
	p += end;

	/* Compare the pattern */
	for (i = 0; i < td->len; i++) {
c7e13ca4:	e28cc001 	add	ip, ip, #1	; 0x1
		if (p[i] != td->pattern[i])
c7e13ca8:	e1520003 	cmp	r2, r3
c7e13cac:	1a00002c 	bne	c7e13d64 <check_pattern+0x140>
		}
	}
	p += end;

	/* Compare the pattern */
	for (i = 0; i < td->len; i++) {
c7e13cb0:	e15c0001 	cmp	ip, r1
c7e13cb4:	bafffff7 	blt	c7e13c98 <check_pattern+0x74>
		if (p[i] != td->pattern[i])
			return -1;
	}

	/* Check both positions 1 and 6 for pattern? */
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
c7e13cb8:	e3140601 	tst	r4, #1048576	; 0x100000
c7e13cbc:	0a00001a 	beq	c7e13d2c <check_pattern+0x108>
		if (td->options & NAND_BBT_SCANEMPTY) {
c7e13cc0:	e35a0000 	cmp	sl, #0	; 0x0
c7e13cc4:	e267c005 	rsb	ip, r7, #5	; 0x5
			p += td->len;
c7e13cc8:	10804001 	addne	r4, r0, r1
			end += NAND_SMALL_BADBLOCK_POS - td->offs;
c7e13ccc:	13a02000 	movne	r2, #0	; 0x0
			return -1;
	}

	/* Check both positions 1 and 6 for pattern? */
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
		if (td->options & NAND_BBT_SCANEMPTY) {
c7e13cd0:	1a000004 	bne	c7e13ce8 <check_pattern+0xc4>
c7e13cd4:	ea000009 	b	c7e13d00 <check_pattern+0xdc>
			p += td->len;
			end += NAND_SMALL_BADBLOCK_POS - td->offs;
			/* Check region between positions 1 and 6 */
			for (i = 0; i < NAND_SMALL_BADBLOCK_POS - td->offs - td->len;
					i++) {
				if (*p++ != 0xff)
c7e13cd8:	e7d43002 	ldrb	r3, [r4, r2]
		if (td->options & NAND_BBT_SCANEMPTY) {
			p += td->len;
			end += NAND_SMALL_BADBLOCK_POS - td->offs;
			/* Check region between positions 1 and 6 */
			for (i = 0; i < NAND_SMALL_BADBLOCK_POS - td->offs - td->len;
					i++) {
c7e13cdc:	e2822001 	add	r2, r2, #1	; 0x1
				if (*p++ != 0xff)
c7e13ce0:	e35300ff 	cmp	r3, #255	; 0xff
c7e13ce4:	1a00001e 	bne	c7e13d64 <check_pattern+0x140>
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
		if (td->options & NAND_BBT_SCANEMPTY) {
			p += td->len;
			end += NAND_SMALL_BADBLOCK_POS - td->offs;
			/* Check region between positions 1 and 6 */
			for (i = 0; i < NAND_SMALL_BADBLOCK_POS - td->offs - td->len;
c7e13ce8:	e061300c 	rsb	r3, r1, ip
c7e13cec:	e1520003 	cmp	r2, r3
 * If the SCAN_EMPTY option is set then check, if all bytes except the
 * pattern area contain 0xff
 *
*/
static int check_pattern(uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
{
c7e13cf0:	e0840002 	add	r0, r4, r2
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
		if (td->options & NAND_BBT_SCANEMPTY) {
			p += td->len;
			end += NAND_SMALL_BADBLOCK_POS - td->offs;
			/* Check region between positions 1 and 6 */
			for (i = 0; i < NAND_SMALL_BADBLOCK_POS - td->offs - td->len;
c7e13cf4:	bafffff7 	blt	c7e13cd8 <check_pattern+0xb4>

	/* Check both positions 1 and 6 for pattern? */
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
		if (td->options & NAND_BBT_SCANEMPTY) {
			p += td->len;
			end += NAND_SMALL_BADBLOCK_POS - td->offs;
c7e13cf8:	e086600c 	add	r6, r6, ip
c7e13cfc:	ea000000 	b	c7e13d04 <check_pattern+0xe0>
				if (*p++ != 0xff)
					return -1;
			}
		}
		else {
			p += NAND_SMALL_BADBLOCK_POS - td->offs;
c7e13d00:	e080000c 	add	r0, r0, ip
c7e13d04:	e3a0c000 	mov	ip, #0	; 0x0
c7e13d08:	ea000005 	b	c7e13d24 <check_pattern+0x100>
		}
		/* Compare the pattern */
		for (i = 0; i < td->len; i++) {
			if (p[i] != td->pattern[i])
c7e13d0c:	e5953020 	ldr	r3, [r5, #32]
c7e13d10:	e7d0200c 	ldrb	r2, [r0, ip]
c7e13d14:	e7d3300c 	ldrb	r3, [r3, ip]
		}
		else {
			p += NAND_SMALL_BADBLOCK_POS - td->offs;
		}
		/* Compare the pattern */
		for (i = 0; i < td->len; i++) {
c7e13d18:	e28cc001 	add	ip, ip, #1	; 0x1
			if (p[i] != td->pattern[i])
c7e13d1c:	e1520003 	cmp	r2, r3
c7e13d20:	1a00000f 	bne	c7e13d64 <check_pattern+0x140>
		}
		else {
			p += NAND_SMALL_BADBLOCK_POS - td->offs;
		}
		/* Compare the pattern */
		for (i = 0; i < td->len; i++) {
c7e13d24:	e15c0001 	cmp	ip, r1
c7e13d28:	bafffff7 	blt	c7e13d0c <check_pattern+0xe8>
			if (p[i] != td->pattern[i])
				return -1;
		}
	}

	if (td->options & NAND_BBT_SCANEMPTY) {
c7e13d2c:	e35a0000 	cmp	sl, #0	; 0x0
		p += td->len;
		end += td->len;
c7e13d30:	10862001 	addne	r2, r6, r1
				return -1;
		}
	}

	if (td->options & NAND_BBT_SCANEMPTY) {
		p += td->len;
c7e13d34:	10800001 	addne	r0, r0, r1
		end += td->len;
c7e13d38:	11a0c002 	movne	ip, r2
			if (p[i] != td->pattern[i])
				return -1;
		}
	}

	if (td->options & NAND_BBT_SCANEMPTY) {
c7e13d3c:	1a000004 	bne	c7e13d54 <check_pattern+0x130>
c7e13d40:	ea000009 	b	c7e13d6c <check_pattern+0x148>
		p += td->len;
		end += td->len;
		for (i = end; i < len; i++) {
			if (*p++ != 0xff)
c7e13d44:	e7d3300c 	ldrb	r3, [r3, ip]
	}

	if (td->options & NAND_BBT_SCANEMPTY) {
		p += td->len;
		end += td->len;
		for (i = end; i < len; i++) {
c7e13d48:	e28cc001 	add	ip, ip, #1	; 0x1
			if (*p++ != 0xff)
c7e13d4c:	e35300ff 	cmp	r3, #255	; 0xff
c7e13d50:	1a000003 	bne	c7e13d64 <check_pattern+0x140>
	}

	if (td->options & NAND_BBT_SCANEMPTY) {
		p += td->len;
		end += td->len;
		for (i = end; i < len; i++) {
c7e13d54:	e15c0009 	cmp	ip, r9
			if (*p++ != 0xff)
c7e13d58:	e0623000 	rsb	r3, r2, r0
	}

	if (td->options & NAND_BBT_SCANEMPTY) {
		p += td->len;
		end += td->len;
		for (i = end; i < len; i++) {
c7e13d5c:	bafffff8 	blt	c7e13d44 <check_pattern+0x120>
c7e13d60:	ea000001 	b	c7e13d6c <check_pattern+0x148>
c7e13d64:	e3e00000 	mvn	r0, #0	; 0x0
c7e13d68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e13d6c:	e3a00000 	mov	r0, #0	; 0x0
			if (*p++ != 0xff)
				return -1;
		}
	}
	return 0;
}
c7e13d70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

c7e13d74 <create_bbt>:
 * Create a bad block table by scanning the device
 * for the given good/bad block identify pattern
 */
static int create_bbt(struct mtd_info *mtd, uint8_t *buf,
	struct nand_bbt_descr *bd, int chip)
{
c7e13d74:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	loff_t from;
	size_t readlen;

	MTDDEBUG(MTD_DEBUG_LEVEL0, "Scanning device for bad blocks\n");

	if (bd->options & NAND_BBT_SCANALLPAGES)
c7e13d78:	e592c000 	ldr	ip, [r2]
 * Create a bad block table by scanning the device
 * for the given good/bad block identify pattern
 */
static int create_bbt(struct mtd_info *mtd, uint8_t *buf,
	struct nand_bbt_descr *bd, int chip)
{
c7e13d7c:	e24dd048 	sub	sp, sp, #72	; 0x48
	loff_t from;
	size_t readlen;

	MTDDEBUG(MTD_DEBUG_LEVEL0, "Scanning device for bad blocks\n");

	if (bd->options & NAND_BBT_SCANALLPAGES)
c7e13d80:	e31c0b01 	tst	ip, #1024	; 0x400
 * Create a bad block table by scanning the device
 * for the given good/bad block identify pattern
 */
static int create_bbt(struct mtd_info *mtd, uint8_t *buf,
	struct nand_bbt_descr *bd, int chip)
{
c7e13d84:	e58d2008 	str	r2, [sp, #8]
c7e13d88:	e1a07000 	mov	r7, r0
c7e13d8c:	e58d100c 	str	r1, [sp, #12]
c7e13d90:	e1a06003 	mov	r6, r3
	struct nand_chip *this = mtd->priv;
c7e13d94:	e5909094 	ldr	r9, [r0, #148]
	loff_t from;
	size_t readlen;

	MTDDEBUG(MTD_DEBUG_LEVEL0, "Scanning device for bad blocks\n");

	if (bd->options & NAND_BBT_SCANALLPAGES)
c7e13d98:	0a000006 	beq	c7e13db8 <create_bbt+0x44>
		len = 1 << (this->bbt_erase_shift - this->page_shift);
c7e13d9c:	e5992054 	ldr	r2, [r9, #84]
c7e13da0:	e599305c 	ldr	r3, [r9, #92]
c7e13da4:	e0623003 	rsb	r3, r2, r3
c7e13da8:	e3a02001 	mov	r2, #1	; 0x1
c7e13dac:	e1a02312 	lsl	r2, r2, r3
c7e13db0:	e58d2018 	str	r2, [sp, #24]
c7e13db4:	ea000003 	b	c7e13dc8 <create_bbt+0x54>
	else if (bd->options & NAND_BBT_SCAN2NDPAGE)
c7e13db8:	e31c0901 	tst	ip, #16384	; 0x4000
c7e13dbc:	13a01002 	movne	r1, #2	; 0x2
c7e13dc0:	03a01001 	moveq	r1, #1	; 0x1
c7e13dc4:	e58d1018 	str	r1, [sp, #24]
		len = 2;
	else
		len = 1;

	if (!(bd->options & NAND_BBT_SCANEMPTY)) {
c7e13dc8:	e21c1b02 	ands	r1, ip, #2048	; 0x800
		/* We need only read few bytes from the OOB area */
		scanlen = 0;
		readlen = bd->len;
c7e13dcc:	059d2008 	ldreq	r2, [sp, #8]
c7e13dd0:	058d101c 	streq	r1, [sp, #28]
c7e13dd4:	05922014 	ldreq	r2, [r2, #20]
c7e13dd8:	058d2020 	streq	r2, [sp, #32]
c7e13ddc:	0a000006 	beq	c7e13dfc <create_bbt+0x88>
	} else {
		/* Full page content should be read */
		scanlen = mtd->writesize + mtd->oobsize;
c7e13de0:	e5973014 	ldr	r3, [r7, #20]
		readlen = len * mtd->writesize;
c7e13de4:	e59dc018 	ldr	ip, [sp, #24]
		/* We need only read few bytes from the OOB area */
		scanlen = 0;
		readlen = bd->len;
	} else {
		/* Full page content should be read */
		scanlen = mtd->writesize + mtd->oobsize;
c7e13de8:	e5972018 	ldr	r2, [r7, #24]
		readlen = len * mtd->writesize;
c7e13dec:	e00c0c93 	mul	ip, r3, ip
		/* We need only read few bytes from the OOB area */
		scanlen = 0;
		readlen = bd->len;
	} else {
		/* Full page content should be read */
		scanlen = mtd->writesize + mtd->oobsize;
c7e13df0:	e0832002 	add	r2, r3, r2
		readlen = len * mtd->writesize;
c7e13df4:	e58dc020 	str	ip, [sp, #32]
		/* We need only read few bytes from the OOB area */
		scanlen = 0;
		readlen = bd->len;
	} else {
		/* Full page content should be read */
		scanlen = mtd->writesize + mtd->oobsize;
c7e13df8:	e58d201c 	str	r2, [sp, #28]
		readlen = len * mtd->writesize;
	}

	if (chip == -1) {
c7e13dfc:	e3760001 	cmn	r6, #1	; 0x1
c7e13e00:	1a000009 	bne	c7e13e2c <create_bbt+0xb8>
		/* Note that numblocks is 2 * (real numblocks) here, see i+=2
		 * below as it makes shifting and masking less painful */
		numblocks = mtd->size >> (this->bbt_erase_shift - 1);
c7e13e04:	e599205c 	ldr	r2, [r9, #92]
c7e13e08:	e2871008 	add	r1, r7, #8	; 0x8
c7e13e0c:	e8910003 	ldm	r1, {r0, r1}
c7e13e10:	e2422001 	sub	r2, r2, #1	; 0x1
c7e13e14:	eb005a52 	bl	c7e2a764 <__lshrdi3>
c7e13e18:	e3a05000 	mov	r5, #0	; 0x0
c7e13e1c:	e58d0014 	str	r0, [sp, #20]
c7e13e20:	e3a0a000 	mov	sl, #0	; 0x0
c7e13e24:	e3a0b000 	mov	fp, #0	; 0x0
c7e13e28:	ea000017 	b	c7e13e8c <create_bbt+0x118>
		startblock = 0;
		from = 0;
	} else {
		if (chip >= this->numchips) {
c7e13e2c:	e5992064 	ldr	r2, [r9, #100]
c7e13e30:	e1560002 	cmp	r6, r2
c7e13e34:	ba000004 	blt	c7e13e4c <create_bbt+0xd8>
			printk(KERN_WARNING "create_bbt(): chipnr (%d) > available chips (%d)\n",
c7e13e38:	e2861001 	add	r1, r6, #1	; 0x1
c7e13e3c:	e59f02a4 	ldr	r0, [pc, #676]	; c7e140e8 <create_bbt+0x374>
c7e13e40:	ebffd304 	bl	c7e08a58 <printf>
c7e13e44:	e3e04015 	mvn	r4, #21	; 0x15
c7e13e48:	ea00009c 	b	c7e140c0 <create_bbt+0x34c>
			       chip + 1, this->numchips);
			return -EINVAL;
		}
		numblocks = this->chipsize >> (this->bbt_erase_shift - 1);
c7e13e4c:	e599405c 	ldr	r4, [r9, #92]
c7e13e50:	e2891068 	add	r1, r9, #104	; 0x68
c7e13e54:	e8910003 	ldm	r1, {r0, r1}
c7e13e58:	e2444001 	sub	r4, r4, #1	; 0x1
c7e13e5c:	e1a02004 	mov	r2, r4
c7e13e60:	eb005a3f 	bl	c7e2a764 <__lshrdi3>
		startblock = chip * numblocks;
c7e13e64:	e0050690 	mul	r5, r0, r6
		if (chip >= this->numchips) {
			printk(KERN_WARNING "create_bbt(): chipnr (%d) > available chips (%d)\n",
			       chip + 1, this->numchips);
			return -EINVAL;
		}
		numblocks = this->chipsize >> (this->bbt_erase_shift - 1);
c7e13e68:	e1a03000 	mov	r3, r0
		startblock = chip * numblocks;
		numblocks += startblock;
c7e13e6c:	e0853003 	add	r3, r5, r3
		from = (loff_t)startblock << (this->bbt_erase_shift - 1);
c7e13e70:	e1a02004 	mov	r2, r4
c7e13e74:	e1a00005 	mov	r0, r5
c7e13e78:	e1a01fc0 	asr	r1, r0, #31
			       chip + 1, this->numchips);
			return -EINVAL;
		}
		numblocks = this->chipsize >> (this->bbt_erase_shift - 1);
		startblock = chip * numblocks;
		numblocks += startblock;
c7e13e7c:	e58d3014 	str	r3, [sp, #20]
		from = (loff_t)startblock << (this->bbt_erase_shift - 1);
c7e13e80:	eb005a45 	bl	c7e2a79c <__ashldi3>
c7e13e84:	e1a0a000 	mov	sl, r0
c7e13e88:	e1a0b001 	mov	fp, r1
	}

	if (this->options & NAND_BBT_SCANLASTPAGE)
c7e13e8c:	e5993050 	ldr	r3, [r9, #80]
c7e13e90:	e3130902 	tst	r3, #32768	; 0x8000
c7e13e94:	0a000006 	beq	c7e13eb4 <create_bbt+0x140>
		from += mtd->erasesize - (mtd->writesize * len);
c7e13e98:	e5973014 	ldr	r3, [r7, #20]
c7e13e9c:	e59de018 	ldr	lr, [sp, #24]
c7e13ea0:	e5972010 	ldr	r2, [r7, #16]
c7e13ea4:	e003039e 	mul	r3, lr, r3
c7e13ea8:	e0632002 	rsb	r2, r3, r2
c7e13eac:	e09aa002 	adds	sl, sl, r2
c7e13eb0:	e2abb000 	adc	fp, fp, #0	; 0x0
c7e13eb4:	e58d5010 	str	r5, [sp, #16]
c7e13eb8:	ea00007b 	b	c7e140ac <create_bbt+0x338>

	for (i = startblock; i < numblocks;) {
		int ret;

		BUG_ON(bd->options & NAND_BBT_NO_OOB);
c7e13ebc:	e59d1008 	ldr	r1, [sp, #8]
c7e13ec0:	e5913000 	ldr	r3, [r1]
c7e13ec4:	e3130501 	tst	r3, #4194304	; 0x400000
c7e13ec8:	0a000006 	beq	c7e13ee8 <create_bbt+0x174>
c7e13ecc:	e59f0218 	ldr	r0, [pc, #536]	; c7e140ec <create_bbt+0x378>
c7e13ed0:	e59f1218 	ldr	r1, [pc, #536]	; c7e140f0 <create_bbt+0x37c>
c7e13ed4:	e3a02f8b 	mov	r2, #556	; 0x22c
c7e13ed8:	e59f3214 	ldr	r3, [pc, #532]	; c7e140f4 <create_bbt+0x380>
c7e13edc:	ebffd2dd 	bl	c7e08a58 <printf>
c7e13ee0:	e59f0210 	ldr	r0, [pc, #528]	; c7e140f8 <create_bbt+0x384>
c7e13ee4:	eb003d03 	bl	c7e232f8 <panic>

		if (bd->options & NAND_BBT_SCANALLPAGES)
c7e13ee8:	e2132b01 	ands	r2, r3, #1024	; 0x400
c7e13eec:	0a000019 	beq	c7e13f58 <create_bbt+0x1e4>
			   loff_t offs, uint8_t *buf, size_t readlen,
			   int scanlen, int len)
{
	int ret, j;

	ret = scan_read_raw_oob(mtd, buf, offs, readlen);
c7e13ef0:	e59dc020 	ldr	ip, [sp, #32]
c7e13ef4:	e1a00007 	mov	r0, r7
c7e13ef8:	e59d100c 	ldr	r1, [sp, #12]
c7e13efc:	e1a0200a 	mov	r2, sl
c7e13f00:	e1a0300b 	mov	r3, fp
c7e13f04:	e58dc000 	str	ip, [sp]
c7e13f08:	ebfffb3e 	bl	c7e12c08 <scan_read_raw_oob>
	if (ret)
c7e13f0c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e13f10:	059d600c 	ldreq	r6, [sp, #12]
c7e13f14:	01a05004 	moveq	r5, r4
c7e13f18:	0a00000a 	beq	c7e13f48 <create_bbt+0x1d4>
c7e13f1c:	ea00004d 	b	c7e14058 <create_bbt+0x2e4>
		return ret;

	for (j = 0; j < len; j++, buf += scanlen) {
		if (check_pattern(buf, scanlen, mtd->writesize, bd))
c7e13f20:	e1a00006 	mov	r0, r6
c7e13f24:	e59d101c 	ldr	r1, [sp, #28]
c7e13f28:	e5972014 	ldr	r2, [r7, #20]
c7e13f2c:	e59d3008 	ldr	r3, [sp, #8]
c7e13f30:	ebffff3b 	bl	c7e13c24 <check_pattern>
c7e13f34:	e3500000 	cmp	r0, #0	; 0x0
c7e13f38:	1a000043 	bne	c7e1404c <create_bbt+0x2d8>
 * Create a bad block table by scanning the device
 * for the given good/bad block identify pattern
 */
static int create_bbt(struct mtd_info *mtd, uint8_t *buf,
	struct nand_bbt_descr *bd, int chip)
{
c7e13f3c:	e59de01c 	ldr	lr, [sp, #28]

	ret = scan_read_raw_oob(mtd, buf, offs, readlen);
	if (ret)
		return ret;

	for (j = 0; j < len; j++, buf += scanlen) {
c7e13f40:	e2855001 	add	r5, r5, #1	; 0x1
 * Create a bad block table by scanning the device
 * for the given good/bad block identify pattern
 */
static int create_bbt(struct mtd_info *mtd, uint8_t *buf,
	struct nand_bbt_descr *bd, int chip)
{
c7e13f44:	e086600e 	add	r6, r6, lr

	ret = scan_read_raw_oob(mtd, buf, offs, readlen);
	if (ret)
		return ret;

	for (j = 0; j < len; j++, buf += scanlen) {
c7e13f48:	e59d1018 	ldr	r1, [sp, #24]
c7e13f4c:	e1550001 	cmp	r5, r1
c7e13f50:	bafffff2 	blt	c7e13f20 <create_bbt+0x1ac>
c7e13f54:	ea00003d 	b	c7e14050 <create_bbt+0x2dc>
			   loff_t offs, uint8_t *buf, int len)
{
	struct mtd_oob_ops ops;
	int j, ret;

	ops.ooblen = mtd->oobsize;
c7e13f58:	e5973018 	ldr	r3, [r7, #24]
	ops.oobbuf = buf;
c7e13f5c:	e59dc00c 	ldr	ip, [sp, #12]
			   loff_t offs, uint8_t *buf, int len)
{
	struct mtd_oob_ops ops;
	int j, ret;

	ops.ooblen = mtd->oobsize;
c7e13f60:	e58d3034 	str	r3, [sp, #52]
	ops.oobbuf = buf;
c7e13f64:	e58dc044 	str	ip, [sp, #68]
	ops.ooboffs = 0;
c7e13f68:	e58d203c 	str	r2, [sp, #60]
	ops.datbuf = NULL;
c7e13f6c:	e58d2040 	str	r2, [sp, #64]
	ops.mode = MTD_OOB_PLACE;
c7e13f70:	e58d2028 	str	r2, [sp, #40]
c7e13f74:	e58d2024 	str	r2, [sp, #36]
c7e13f78:	e1a0500a 	mov	r5, sl
c7e13f7c:	e1a0600b 	mov	r6, fp
c7e13f80:	ea00002a 	b	c7e14030 <create_bbt+0x2bc>
		/*
		 * Read the full oob until read_oob is fixed to
		 * handle single byte reads for 16 bit
		 * buswidth
		 */
		ret = mtd->read_oob(mtd, offs, &ops);
c7e13f84:	e28d3028 	add	r3, sp, #40	; 0x28
c7e13f88:	e58d3000 	str	r3, [sp]
c7e13f8c:	e1a00007 	mov	r0, r7
c7e13f90:	e1a02005 	mov	r2, r5
c7e13f94:	e1a03006 	mov	r3, r6
c7e13f98:	e1a0e00f 	mov	lr, pc
c7e13f9c:	e597f04c 	ldr	pc, [r7, #76]
		if (ret)
c7e13fa0:	e2504000 	subs	r4, r0, #0	; 0x0
c7e13fa4:	1a00002b 	bne	c7e14058 <create_bbt+0x2e4>
{
	int i;
	uint8_t *p = buf;

	/* Compare the pattern */
	for (i = 0; i < td->len; i++) {
c7e13fa8:	e59de008 	ldr	lr, [sp, #8]
c7e13fac:	e1a00004 	mov	r0, r4
c7e13fb0:	e59ec014 	ldr	ip, [lr, #20]
c7e13fb4:	ea000009 	b	c7e13fe0 <create_bbt+0x26c>
		if (p[td->offs + i] != td->pattern[i])
c7e13fb8:	e59d1008 	ldr	r1, [sp, #8]
c7e13fbc:	e59de00c 	ldr	lr, [sp, #12]
c7e13fc0:	e5912008 	ldr	r2, [r1, #8]
c7e13fc4:	e5911020 	ldr	r1, [r1, #32]
c7e13fc8:	e08e3000 	add	r3, lr, r0
c7e13fcc:	e7d32002 	ldrb	r2, [r3, r2]
c7e13fd0:	e7d13000 	ldrb	r3, [r1, r0]
c7e13fd4:	e1520003 	cmp	r2, r3
c7e13fd8:	1a00001b 	bne	c7e1404c <create_bbt+0x2d8>
{
	int i;
	uint8_t *p = buf;

	/* Compare the pattern */
	for (i = 0; i < td->len; i++) {
c7e13fdc:	e2800001 	add	r0, r0, #1	; 0x1
c7e13fe0:	e150000c 	cmp	r0, ip
c7e13fe4:	bafffff3 	blt	c7e13fb8 <create_bbt+0x244>
		if (p[td->offs + i] != td->pattern[i])
			return -1;
	}
	/* Need to check location 1 AND 6? */
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
c7e13fe8:	e59d1008 	ldr	r1, [sp, #8]
c7e13fec:	e5913000 	ldr	r3, [r1]
c7e13ff0:	e3130601 	tst	r3, #1048576	; 0x100000
c7e13ff4:	159d000c 	ldrne	r0, [sp, #12]
c7e13ff8:	13a01000 	movne	r1, #0	; 0x0
c7e13ffc:	1a000008 	bne	c7e14024 <create_bbt+0x2b0>
c7e14000:	ea000031 	b	c7e140cc <create_bbt+0x358>
		for (i = 0; i < td->len; i++) {
			if (p[NAND_SMALL_BADBLOCK_POS + i] != td->pattern[i])
c7e14004:	e59d2008 	ldr	r2, [sp, #8]
c7e14008:	e5923020 	ldr	r3, [r2, #32]
c7e1400c:	e5d02005 	ldrb	r2, [r0, #5]
c7e14010:	e7d33001 	ldrb	r3, [r3, r1]
c7e14014:	e2800001 	add	r0, r0, #1	; 0x1
c7e14018:	e1530002 	cmp	r3, r2
c7e1401c:	1a00000a 	bne	c7e1404c <create_bbt+0x2d8>
		if (p[td->offs + i] != td->pattern[i])
			return -1;
	}
	/* Need to check location 1 AND 6? */
	if (td->options & NAND_BBT_SCANBYTE1AND6) {
		for (i = 0; i < td->len; i++) {
c7e14020:	e2811001 	add	r1, r1, #1	; 0x1
c7e14024:	e151000c 	cmp	r1, ip
c7e14028:	bafffff5 	blt	c7e14004 <create_bbt+0x290>
c7e1402c:	ea000026 	b	c7e140cc <create_bbt+0x358>
	ops.oobbuf = buf;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	for (j = 0; j < len; j++) {
c7e14030:	e59d3024 	ldr	r3, [sp, #36]
c7e14034:	e59dc018 	ldr	ip, [sp, #24]
c7e14038:	e153000c 	cmp	r3, ip
c7e1403c:	baffffd0 	blt	c7e13f84 <create_bbt+0x210>
c7e14040:	e3a04000 	mov	r4, #0	; 0x0
c7e14044:	e1540004 	cmp	r4, r4
c7e14048:	ea000004 	b	c7e14060 <create_bbt+0x2ec>
c7e1404c:	e3a04001 	mov	r4, #1	; 0x1
c7e14050:	e3540000 	cmp	r4, #0	; 0x0
c7e14054:	ea000001 	b	c7e14060 <create_bbt+0x2ec>
			ret = scan_block_full(mtd, bd, from, buf, readlen,
					      scanlen, len);
		else
			ret = scan_block_fast(mtd, bd, from, buf, len);

		if (ret < 0)
c7e14058:	e3540000 	cmp	r4, #0	; 0x0
c7e1405c:	ba000017 	blt	c7e140c0 <create_bbt+0x34c>
			return ret;

		if (ret) {
c7e14060:	0a000009 	beq	c7e1408c <create_bbt+0x318>
			this->bbt[i >> 3] |= 0x03 << (i & 0x6);
c7e14064:	e59de010 	ldr	lr, [sp, #16]
c7e14068:	e5990110 	ldr	r0, [r9, #272]
c7e1406c:	e20e1006 	and	r1, lr, #6	; 0x6
c7e14070:	e7d031ce 	ldrb	r3, [r0, lr, asr #3]
c7e14074:	e3a02003 	mov	r2, #3	; 0x3
c7e14078:	e1833112 	orr	r3, r3, r2, lsl r1
c7e1407c:	e7c031ce 	strb	r3, [r0, lr, asr #3]
			MTDDEBUG(MTD_DEBUG_LEVEL0,
				  "Bad eraseblock %d at 0x%012llx\n",
				  i >> 1, (unsigned long long)from);
			mtd->ecc_stats.badblocks++;
c7e14080:	e5973088 	ldr	r3, [r7, #136]
c7e14084:	e2833001 	add	r3, r3, #1	; 0x1
c7e14088:	e5873088 	str	r3, [r7, #136]
		}

		i += 2;
		from += (1 << this->bbt_erase_shift);
c7e1408c:	e599205c 	ldr	r2, [r9, #92]
c7e14090:	e3a03001 	mov	r3, #1	; 0x1
c7e14094:	e1a03213 	lsl	r3, r3, r2
				  "Bad eraseblock %d at 0x%012llx\n",
				  i >> 1, (unsigned long long)from);
			mtd->ecc_stats.badblocks++;
		}

		i += 2;
c7e14098:	e59d1010 	ldr	r1, [sp, #16]
		from += (1 << this->bbt_erase_shift);
c7e1409c:	e09aa003 	adds	sl, sl, r3
				  "Bad eraseblock %d at 0x%012llx\n",
				  i >> 1, (unsigned long long)from);
			mtd->ecc_stats.badblocks++;
		}

		i += 2;
c7e140a0:	e2811002 	add	r1, r1, #2	; 0x2
		from += (1 << this->bbt_erase_shift);
c7e140a4:	e0abbfc3 	adc	fp, fp, r3, asr #31
				  "Bad eraseblock %d at 0x%012llx\n",
				  i >> 1, (unsigned long long)from);
			mtd->ecc_stats.badblocks++;
		}

		i += 2;
c7e140a8:	e58d1010 	str	r1, [sp, #16]
	}

	if (this->options & NAND_BBT_SCANLASTPAGE)
		from += mtd->erasesize - (mtd->writesize * len);

	for (i = startblock; i < numblocks;) {
c7e140ac:	e59d2010 	ldr	r2, [sp, #16]
c7e140b0:	e59d3014 	ldr	r3, [sp, #20]
c7e140b4:	e1520003 	cmp	r2, r3
c7e140b8:	baffff7f 	blt	c7e13ebc <create_bbt+0x148>
c7e140bc:	e3a04000 	mov	r4, #0	; 0x0

		i += 2;
		from += (1 << this->bbt_erase_shift);
	}
	return 0;
}
c7e140c0:	e1a00004 	mov	r0, r4
c7e140c4:	e28dd048 	add	sp, sp, #72	; 0x48
c7e140c8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	ops.oobbuf = buf;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	for (j = 0; j < len; j++) {
c7e140cc:	e59dc024 	ldr	ip, [sp, #36]
			return ret;

		if (check_short_pattern(buf, bd))
			return 1;

		offs += mtd->writesize;
c7e140d0:	e5973014 	ldr	r3, [r7, #20]
	ops.oobbuf = buf;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	for (j = 0; j < len; j++) {
c7e140d4:	e28cc001 	add	ip, ip, #1	; 0x1
			return ret;

		if (check_short_pattern(buf, bd))
			return 1;

		offs += mtd->writesize;
c7e140d8:	e0955003 	adds	r5, r5, r3
	ops.oobbuf = buf;
	ops.ooboffs = 0;
	ops.datbuf = NULL;
	ops.mode = MTD_OOB_PLACE;

	for (j = 0; j < len; j++) {
c7e140dc:	e58dc024 	str	ip, [sp, #36]
			return ret;

		if (check_short_pattern(buf, bd))
			return 1;

		offs += mtd->writesize;
c7e140e0:	e2a66000 	adc	r6, r6, #0	; 0x0
c7e140e4:	eaffffd1 	b	c7e14030 <create_bbt+0x2bc>
c7e140e8:	c7e331b9 	.word	0xc7e331b9
c7e140ec:	c7e30403 	.word	0xc7e30403
c7e140f0:	c7e331ae 	.word	0xc7e331ae
c7e140f4:	c7e2a7e1 	.word	0xc7e2a7e1
c7e140f8:	c7e3042a 	.word	0xc7e3042a

c7e140fc <search_bbt>:
 *
 * The bbt ident pattern resides in the oob area of the first page
 * in a block.
 */
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
c7e140fc:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	struct nand_chip *this = mtd->priv;
c7e14100:	e590a094 	ldr	sl, [r0, #148]
	int scanlen = mtd->writesize + mtd->oobsize;
	int bbtblocks;
	int blocktopage = this->bbt_erase_shift - this->page_shift;

	/* Search direction top -> down ? */
	if (td->options & NAND_BBT_LASTBLOCK) {
c7e14104:	e5925000 	ldr	r5, [r2]
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
	struct nand_chip *this = mtd->priv;
	int i, chips;
	int startblock, block, dir;
	int scanlen = mtd->writesize + mtd->oobsize;
c7e14108:	e5903018 	ldr	r3, [r0, #24]
 *
 * The bbt ident pattern resides in the oob area of the first page
 * in a block.
 */
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
c7e1410c:	e1a06000 	mov	r6, r0
c7e14110:	e1a07002 	mov	r7, r2
	struct nand_chip *this = mtd->priv;
	int i, chips;
	int startblock, block, dir;
	int scanlen = mtd->writesize + mtd->oobsize;
	int bbtblocks;
	int blocktopage = this->bbt_erase_shift - this->page_shift;
c7e14114:	e59a405c 	ldr	r4, [sl, #92]
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
	struct nand_chip *this = mtd->priv;
	int i, chips;
	int startblock, block, dir;
	int scanlen = mtd->writesize + mtd->oobsize;
c7e14118:	e5902014 	ldr	r2, [r0, #20]
	int bbtblocks;
	int blocktopage = this->bbt_erase_shift - this->page_shift;
c7e1411c:	e59a0054 	ldr	r0, [sl, #84]
 *
 * The bbt ident pattern resides in the oob area of the first page
 * in a block.
 */
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
c7e14120:	e24dd028 	sub	sp, sp, #40	; 0x28
	int scanlen = mtd->writesize + mtd->oobsize;
	int bbtblocks;
	int blocktopage = this->bbt_erase_shift - this->page_shift;

	/* Search direction top -> down ? */
	if (td->options & NAND_BBT_LASTBLOCK) {
c7e14124:	e215c010 	ands	ip, r5, #16	; 0x10
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
	struct nand_chip *this = mtd->priv;
	int i, chips;
	int startblock, block, dir;
	int scanlen = mtd->writesize + mtd->oobsize;
c7e14128:	e0832002 	add	r2, r3, r2
 *
 * The bbt ident pattern resides in the oob area of the first page
 * in a block.
 */
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
c7e1412c:	e58d1008 	str	r1, [sp, #8]
	struct nand_chip *this = mtd->priv;
	int i, chips;
	int startblock, block, dir;
	int scanlen = mtd->writesize + mtd->oobsize;
	int bbtblocks;
	int blocktopage = this->bbt_erase_shift - this->page_shift;
c7e14130:	e0600004 	rsb	r0, r0, r4

	/* Search direction top -> down ? */
	if (td->options & NAND_BBT_LASTBLOCK) {
c7e14134:	03a01001 	moveq	r1, #1	; 0x1
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
	struct nand_chip *this = mtd->priv;
	int i, chips;
	int startblock, block, dir;
	int scanlen = mtd->writesize + mtd->oobsize;
c7e14138:	e58d2014 	str	r2, [sp, #20]
	int bbtblocks;
	int blocktopage = this->bbt_erase_shift - this->page_shift;
c7e1413c:	e58d0018 	str	r0, [sp, #24]

	/* Search direction top -> down ? */
	if (td->options & NAND_BBT_LASTBLOCK) {
c7e14140:	01a0900c 	moveq	r9, ip
c7e14144:	058d1010 	streq	r1, [sp, #16]
c7e14148:	0a000006 	beq	c7e14168 <search_bbt+0x6c>
		startblock = (mtd->size >> this->bbt_erase_shift) - 1;
c7e1414c:	e1a02004 	mov	r2, r4
c7e14150:	e2861008 	add	r1, r6, #8	; 0x8
c7e14154:	e8910003 	ldm	r1, {r0, r1}
c7e14158:	eb005981 	bl	c7e2a764 <__lshrdi3>
c7e1415c:	e3e02000 	mvn	r2, #0	; 0x0
c7e14160:	e2409001 	sub	r9, r0, #1	; 0x1
c7e14164:	e58d2010 	str	r2, [sp, #16]
		startblock = 0;
		dir = 1;
	}

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
c7e14168:	e3150080 	tst	r5, #128	; 0x80
c7e1416c:	03a03001 	moveq	r3, #1	; 0x1
c7e14170:	058d300c 	streq	r3, [sp, #12]
c7e14174:	0a000007 	beq	c7e14198 <search_bbt+0x9c>
		chips = this->numchips;
		bbtblocks = this->chipsize >> this->bbt_erase_shift;
		startblock &= bbtblocks - 1;
c7e14178:	e1a02004 	mov	r2, r4
c7e1417c:	e28a1068 	add	r1, sl, #104	; 0x68
c7e14180:	e8910003 	ldm	r1, {r0, r1}
c7e14184:	eb005976 	bl	c7e2a764 <__lshrdi3>
		dir = 1;
	}

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
		chips = this->numchips;
c7e14188:	e59a1064 	ldr	r1, [sl, #100]
		bbtblocks = this->chipsize >> this->bbt_erase_shift;
		startblock &= bbtblocks - 1;
c7e1418c:	e2400001 	sub	r0, r0, #1	; 0x1
		dir = 1;
	}

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP) {
		chips = this->numchips;
c7e14190:	e58d100c 	str	r1, [sp, #12]
		bbtblocks = this->chipsize >> this->bbt_erase_shift;
		startblock &= bbtblocks - 1;
c7e14194:	e0099000 	and	r9, r9, r0
c7e14198:	e3a0b000 	mov	fp, #0	; 0x0
c7e1419c:	e1a05007 	mov	r5, r7
c7e141a0:	e58db020 	str	fp, [sp, #32]
c7e141a4:	ea00003d 	b	c7e142a0 <search_bbt+0x1a4>
 *
 * The bbt ident pattern resides in the oob area of the first page
 * in a block.
 */
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
c7e141a8:	e59d3020 	ldr	r3, [sp, #32]
		bbtblocks = mtd->size >> this->bbt_erase_shift;
	}

	for (i = 0; i < chips; i++) {
		/* Reset version information */
		td->version[i] = 0;
c7e141ac:	e3a02000 	mov	r2, #0	; 0x0
 *
 * The bbt ident pattern resides in the oob area of the first page
 * in a block.
 */
static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
{
c7e141b0:	e0873003 	add	r3, r7, r3
c7e141b4:	e58d3024 	str	r3, [sp, #36]
	}

	for (i = 0; i < chips; i++) {
		/* Reset version information */
		td->version[i] = 0;
		td->pages[i] = -1;
c7e141b8:	e59d1024 	ldr	r1, [sp, #36]
c7e141bc:	e3e03000 	mvn	r3, #0	; 0x0
c7e141c0:	e5813004 	str	r3, [r1, #4]
		bbtblocks = mtd->size >> this->bbt_erase_shift;
	}

	for (i = 0; i < chips; i++) {
		/* Reset version information */
		td->version[i] = 0;
c7e141c4:	e5c52010 	strb	r2, [r5, #16]
		td->pages[i] = -1;
c7e141c8:	e1a04002 	mov	r4, r2
c7e141cc:	ea000026 	b	c7e1426c <search_bbt+0x170>
		/* Scan the maximum number of blocks */
		for (block = 0; block < td->maxblocks; block++) {

			int actblock = startblock + dir * block;
c7e141d0:	e59d2010 	ldr	r2, [sp, #16]
c7e141d4:	e0229294 	mla	r2, r4, r2, r9
c7e141d8:	e58d201c 	str	r2, [sp, #28]
			loff_t offs = (loff_t)actblock << this->bbt_erase_shift;

			/* Read first page */
			scan_read_raw(mtd, buf, offs, mtd->writesize, td);
c7e141dc:	e59d301c 	ldr	r3, [sp, #28]
c7e141e0:	e59a205c 	ldr	r2, [sl, #92]
c7e141e4:	e1a00003 	mov	r0, r3
c7e141e8:	e1a01fc0 	asr	r1, r0, #31
c7e141ec:	eb00596a 	bl	c7e2a79c <__ashldi3>
c7e141f0:	e596c014 	ldr	ip, [r6, #20]
c7e141f4:	e1a02000 	mov	r2, r0
c7e141f8:	e1a03001 	mov	r3, r1
c7e141fc:	e1a00006 	mov	r0, r6
c7e14200:	e59d1008 	ldr	r1, [sp, #8]
c7e14204:	e58dc000 	str	ip, [sp]
c7e14208:	e58d7004 	str	r7, [sp, #4]
c7e1420c:	ebfffaaf 	bl	c7e12cd0 <scan_read_raw>
			if (!check_pattern(buf, scanlen, mtd->writesize, td)) {
c7e14210:	e59d0008 	ldr	r0, [sp, #8]
c7e14214:	e59d1014 	ldr	r1, [sp, #20]
c7e14218:	e5962014 	ldr	r2, [r6, #20]
c7e1421c:	e1a03007 	mov	r3, r7
c7e14220:	ebfffe7f 	bl	c7e13c24 <check_pattern>
c7e14224:	e3500000 	cmp	r0, #0	; 0x0
c7e14228:	1a00000e 	bne	c7e14268 <search_bbt+0x16c>
				td->pages[i] = actblock << blocktopage;
c7e1422c:	e59d101c 	ldr	r1, [sp, #28]
c7e14230:	e59d2018 	ldr	r2, [sp, #24]
c7e14234:	e1a03211 	lsl	r3, r1, r2
				if (td->options & NAND_BBT_VERSION) {
c7e14238:	e5972000 	ldr	r2, [r7]
			loff_t offs = (loff_t)actblock << this->bbt_erase_shift;

			/* Read first page */
			scan_read_raw(mtd, buf, offs, mtd->writesize, td);
			if (!check_pattern(buf, scanlen, mtd->writesize, td)) {
				td->pages[i] = actblock << blocktopage;
c7e1423c:	e59d1024 	ldr	r1, [sp, #36]
				if (td->options & NAND_BBT_VERSION) {
c7e14240:	e3120c01 	tst	r2, #256	; 0x100
			loff_t offs = (loff_t)actblock << this->bbt_erase_shift;

			/* Read first page */
			scan_read_raw(mtd, buf, offs, mtd->writesize, td);
			if (!check_pattern(buf, scanlen, mtd->writesize, td)) {
				td->pages[i] = actblock << blocktopage;
c7e14244:	e5813004 	str	r3, [r1, #4]
				if (td->options & NAND_BBT_VERSION) {
c7e14248:	0a00000a 	beq	c7e14278 <search_bbt+0x17c>
					offs = bbt_get_ver_offs(mtd, td);
c7e1424c:	e1a00006 	mov	r0, r6
c7e14250:	e1a01007 	mov	r1, r7
c7e14254:	ebfffab6 	bl	c7e12d34 <bbt_get_ver_offs>
					td->version[i] = buf[offs];
c7e14258:	e59d2008 	ldr	r2, [sp, #8]
c7e1425c:	e7d23000 	ldrb	r3, [r2, r0]
c7e14260:	e5c53010 	strb	r3, [r5, #16]
c7e14264:	ea000003 	b	c7e14278 <search_bbt+0x17c>
	for (i = 0; i < chips; i++) {
		/* Reset version information */
		td->version[i] = 0;
		td->pages[i] = -1;
		/* Scan the maximum number of blocks */
		for (block = 0; block < td->maxblocks; block++) {
c7e14268:	e2844001 	add	r4, r4, #1	; 0x1
c7e1426c:	e5973018 	ldr	r3, [r7, #24]
c7e14270:	e1540003 	cmp	r4, r3
c7e14274:	baffffd5 	blt	c7e141d0 <search_bbt+0xd4>
					td->version[i] = buf[offs];
				}
				break;
			}
		}
		startblock += this->chipsize >> this->bbt_erase_shift;
c7e14278:	e28a1068 	add	r1, sl, #104	; 0x68
c7e1427c:	e8910003 	ldm	r1, {r0, r1}
c7e14280:	e59a205c 	ldr	r2, [sl, #92]
c7e14284:	eb005936 	bl	c7e2a764 <__lshrdi3>
	} else {
		chips = 1;
		bbtblocks = mtd->size >> this->bbt_erase_shift;
	}

	for (i = 0; i < chips; i++) {
c7e14288:	e59d3020 	ldr	r3, [sp, #32]
					td->version[i] = buf[offs];
				}
				break;
			}
		}
		startblock += this->chipsize >> this->bbt_erase_shift;
c7e1428c:	e0899000 	add	r9, r9, r0
	} else {
		chips = 1;
		bbtblocks = mtd->size >> this->bbt_erase_shift;
	}

	for (i = 0; i < chips; i++) {
c7e14290:	e2833004 	add	r3, r3, #4	; 0x4
c7e14294:	e28bb001 	add	fp, fp, #1	; 0x1
c7e14298:	e2855001 	add	r5, r5, #1	; 0x1
c7e1429c:	e58d3020 	str	r3, [sp, #32]
c7e142a0:	e59d100c 	ldr	r1, [sp, #12]
c7e142a4:	e15b0001 	cmp	fp, r1
c7e142a8:	baffffbe 	blt	c7e141a8 <search_bbt+0xac>
c7e142ac:	e3a04000 	mov	r4, #0	; 0x0
c7e142b0:	ea000006 	b	c7e142d0 <search_bbt+0x1d4>
		}
		startblock += this->chipsize >> this->bbt_erase_shift;
	}
	/* Check, if we found a bbt for each requested chip */
	for (i = 0; i < chips; i++) {
		if (td->pages[i] == -1)
c7e142b4:	e5933004 	ldr	r3, [r3, #4]
c7e142b8:	e3730001 	cmn	r3, #1	; 0x1
c7e142bc:	1a000002 	bne	c7e142cc <search_bbt+0x1d0>
			printk(KERN_WARNING "Bad block table not found for chip %d\n", i);
c7e142c0:	e1a01004 	mov	r1, r4
c7e142c4:	e59f0020 	ldr	r0, [pc, #32]	; c7e142ec <search_bbt+0x1f0>
c7e142c8:	ebffd1e2 	bl	c7e08a58 <printf>
			}
		}
		startblock += this->chipsize >> this->bbt_erase_shift;
	}
	/* Check, if we found a bbt for each requested chip */
	for (i = 0; i < chips; i++) {
c7e142cc:	e2844001 	add	r4, r4, #1	; 0x1
c7e142d0:	e59d200c 	ldr	r2, [sp, #12]
		if (td->pages[i] == -1)
c7e142d4:	e0873104 	add	r3, r7, r4, lsl #2
			}
		}
		startblock += this->chipsize >> this->bbt_erase_shift;
	}
	/* Check, if we found a bbt for each requested chip */
	for (i = 0; i < chips; i++) {
c7e142d8:	e1540002 	cmp	r4, r2
c7e142dc:	bafffff4 	blt	c7e142b4 <search_bbt+0x1b8>
			MTDDEBUG(MTD_DEBUG_LEVEL0, "Bad block table found " \
				"at page %d, version 0x%02X\n", td->pages[i],
				td->version[i]);
	}
	return 0;
}
c7e142e0:	e3a00000 	mov	r0, #0	; 0x0
c7e142e4:	e28dd028 	add	sp, sp, #40	; 0x28
c7e142e8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e142ec:	c7e331eb 	.word	0xc7e331eb

c7e142f0 <nand_scan_bbt>:
 * The bad block table memory is allocated here. It must be freed
 * by calling the nand_free_bbt function.
 *
*/
int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
c7e142f0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	struct nand_chip *this = mtd->priv;
c7e142f4:	e5904094 	ldr	r4, [r0, #148]
 * The bad block table memory is allocated here. It must be freed
 * by calling the nand_free_bbt function.
 *
*/
int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
c7e142f8:	e24dd030 	sub	sp, sp, #48	; 0x30
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;

	len = mtd->size >> (this->bbt_erase_shift + 2);
	/* Allocate memory (2bit per block) and clear the memory bad block table */
	this->bbt = kzalloc(len, GFP_KERNEL);
c7e142fc:	e594205c 	ldr	r2, [r4, #92]
 * The bad block table memory is allocated here. It must be freed
 * by calling the nand_free_bbt function.
 *
*/
int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
c7e14300:	e58d100c 	str	r1, [sp, #12]
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;

	len = mtd->size >> (this->bbt_erase_shift + 2);
	/* Allocate memory (2bit per block) and clear the memory bad block table */
	this->bbt = kzalloc(len, GFP_KERNEL);
c7e14304:	e2822002 	add	r2, r2, #2	; 0x2
 * The bad block table memory is allocated here. It must be freed
 * by calling the nand_free_bbt function.
 *
*/
int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
c7e14308:	e1a07000 	mov	r7, r0
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;

	len = mtd->size >> (this->bbt_erase_shift + 2);
	/* Allocate memory (2bit per block) and clear the memory bad block table */
	this->bbt = kzalloc(len, GFP_KERNEL);
c7e1430c:	e2801008 	add	r1, r0, #8	; 0x8
c7e14310:	e8910003 	ldm	r1, {r0, r1}
c7e14314:	eb005912 	bl	c7e2a764 <__lshrdi3>
int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
	struct nand_chip *this = mtd->priv;
	int len, res = 0;
	uint8_t *buf;
	struct nand_bbt_descr *td = this->bbt_td;
c7e14318:	e5942114 	ldr	r2, [r4, #276]
	struct nand_bbt_descr *md = this->bbt_md;
c7e1431c:	e5943118 	ldr	r3, [r4, #280]

	len = mtd->size >> (this->bbt_erase_shift + 2);
	/* Allocate memory (2bit per block) and clear the memory bad block table */
	this->bbt = kzalloc(len, GFP_KERNEL);
c7e14320:	e3a01001 	mov	r1, #1	; 0x1
int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
	struct nand_chip *this = mtd->priv;
	int len, res = 0;
	uint8_t *buf;
	struct nand_bbt_descr *td = this->bbt_td;
c7e14324:	e58d2010 	str	r2, [sp, #16]
	struct nand_bbt_descr *md = this->bbt_md;
c7e14328:	e58d3014 	str	r3, [sp, #20]

	len = mtd->size >> (this->bbt_erase_shift + 2);
	/* Allocate memory (2bit per block) and clear the memory bad block table */
	this->bbt = kzalloc(len, GFP_KERNEL);
c7e1432c:	ebffd574 	bl	c7e09904 <calloc>
	if (!this->bbt) {
c7e14330:	e3500000 	cmp	r0, #0	; 0x0
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;

	len = mtd->size >> (this->bbt_erase_shift + 2);
	/* Allocate memory (2bit per block) and clear the memory bad block table */
	this->bbt = kzalloc(len, GFP_KERNEL);
c7e14334:	e5840110 	str	r0, [r4, #272]
	if (!this->bbt) {
c7e14338:	1a000002 	bne	c7e14348 <nand_scan_bbt+0x58>
		printk(KERN_ERR "nand_scan_bbt: Out of memory\n");
c7e1433c:	e59f0468 	ldr	r0, [pc, #1128]	; c7e147ac <nand_scan_bbt+0x4bc>
c7e14340:	ebffd1c4 	bl	c7e08a58 <printf>
c7e14344:	ea00002c 	b	c7e143fc <nand_scan_bbt+0x10c>
	}

	/* If no primary table decriptor is given, scan the device
	 * to build a memory based bad block table
	 */
	if (!td) {
c7e14348:	e59dc010 	ldr	ip, [sp, #16]
c7e1434c:	e35c0000 	cmp	ip, #0	; 0x0
c7e14350:	1a000014 	bne	c7e143a8 <nand_scan_bbt+0xb8>
*/
static inline int nand_memory_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
	struct nand_chip *this = mtd->priv;

	bd->options &= ~NAND_BBT_SCANEMPTY;
c7e14354:	e59d100c 	ldr	r1, [sp, #12]
 * The function creates a memory based bbt by scanning the device
 * for manufacturer / software marked good / bad blocks
*/
static inline int nand_memory_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
	struct nand_chip *this = mtd->priv;
c7e14358:	e5973094 	ldr	r3, [r7, #148]

	bd->options &= ~NAND_BBT_SCANEMPTY;
c7e1435c:	e5912000 	ldr	r2, [r1]
	return create_bbt(mtd, this->buffers->databuf, bd, -1);
c7e14360:	e59310e8 	ldr	r1, [r3, #232]
*/
static inline int nand_memory_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
{
	struct nand_chip *this = mtd->priv;

	bd->options &= ~NAND_BBT_SCANEMPTY;
c7e14364:	e59d300c 	ldr	r3, [sp, #12]
c7e14368:	e3c22b02 	bic	r2, r2, #2048	; 0x800
c7e1436c:	e5832000 	str	r2, [r3]
	return create_bbt(mtd, this->buffers->databuf, bd, -1);
c7e14370:	e1a00007 	mov	r0, r7
c7e14374:	e1a02003 	mov	r2, r3
c7e14378:	e2811d12 	add	r1, r1, #1152	; 0x480
c7e1437c:	e3e03000 	mvn	r3, #0	; 0x0
c7e14380:	ebfffe7b 	bl	c7e13d74 <create_bbt>

	/* If no primary table decriptor is given, scan the device
	 * to build a memory based bad block table
	 */
	if (!td) {
		if ((res = nand_memory_bbt(mtd, bd))) {
c7e14384:	e2505000 	subs	r5, r0, #0	; 0x0
c7e14388:	0a000100 	beq	c7e14790 <nand_scan_bbt+0x4a0>
			printk(KERN_ERR "nand_bbt: Can't scan flash and build the RAM-based BBT\n");
c7e1438c:	e59f041c 	ldr	r0, [pc, #1052]	; c7e147b0 <nand_scan_bbt+0x4c0>
c7e14390:	ebffd1b0 	bl	c7e08a58 <printf>
			kfree(this->bbt);
c7e14394:	e5940110 	ldr	r0, [r4, #272]
c7e14398:	ebffd2f0 	bl	c7e08f60 <free>
			this->bbt = NULL;
c7e1439c:	e59dc010 	ldr	ip, [sp, #16]
c7e143a0:	e584c110 	str	ip, [r4, #272]
c7e143a4:	ea0000f9 	b	c7e14790 <nand_scan_bbt+0x4a0>
		}
		return res;
	}
	verify_bbt_descr(mtd, td);
c7e143a8:	e1a00007 	mov	r0, r7
c7e143ac:	e59d1010 	ldr	r1, [sp, #16]
c7e143b0:	ebfffdc0 	bl	c7e13ab8 <verify_bbt_descr>
	verify_bbt_descr(mtd, md);
c7e143b4:	e1a00007 	mov	r0, r7
c7e143b8:	e59d1014 	ldr	r1, [sp, #20]
c7e143bc:	ebfffdbd 	bl	c7e13ab8 <verify_bbt_descr>

	/* Allocate a temporary buffer for one eraseblock incl. oob */
	len = (1 << this->bbt_erase_shift);
c7e143c0:	e594305c 	ldr	r3, [r4, #92]
c7e143c4:	e3a02001 	mov	r2, #1	; 0x1
c7e143c8:	e1a02312 	lsl	r2, r2, r3
	len += (len >> this->page_shift) * mtd->oobsize;
	buf = vmalloc(len);
c7e143cc:	e5943054 	ldr	r3, [r4, #84]
c7e143d0:	e5971018 	ldr	r1, [r7, #24]
c7e143d4:	e1a03352 	asr	r3, r2, r3
c7e143d8:	e0202391 	mla	r0, r1, r3, r2
c7e143dc:	ebffd36e 	bl	c7e0919c <malloc>
	if (!buf) {
c7e143e0:	e250b000 	subs	fp, r0, #0	; 0x0
c7e143e4:	1a000006 	bne	c7e14404 <nand_scan_bbt+0x114>
		printk(KERN_ERR "nand_bbt: Out of memory\n");
c7e143e8:	e59f03c4 	ldr	r0, [pc, #964]	; c7e147b4 <nand_scan_bbt+0x4c4>
c7e143ec:	ebffd199 	bl	c7e08a58 <printf>
		kfree(this->bbt);
c7e143f0:	e5940110 	ldr	r0, [r4, #272]
c7e143f4:	ebffd2d9 	bl	c7e08f60 <free>
		this->bbt = NULL;
c7e143f8:	e584b110 	str	fp, [r4, #272]
c7e143fc:	e3e0500b 	mvn	r5, #11	; 0xb
c7e14400:	ea0000e2 	b	c7e14790 <nand_scan_bbt+0x4a0>
		return -ENOMEM;
	}

	/* Is the bbt at a given page ? */
	if (td->options & NAND_BBT_ABSPAGE) {
c7e14404:	e59d1010 	ldr	r1, [sp, #16]
c7e14408:	e5913000 	ldr	r3, [r1]
c7e1440c:	e3130020 	tst	r3, #32	; 0x20
c7e14410:	0a000035 	beq	c7e144ec <nand_scan_bbt+0x1fc>
			 struct nand_bbt_descr *td, struct nand_bbt_descr *md)
{
	struct nand_chip *this = mtd->priv;

	/* Read the primary version, if available */
	if (td->options & NAND_BBT_VERSION) {
c7e14414:	e3130c01 	tst	r3, #256	; 0x100
 *
*/
static int read_abs_bbts(struct mtd_info *mtd, uint8_t *buf,
			 struct nand_bbt_descr *td, struct nand_bbt_descr *md)
{
	struct nand_chip *this = mtd->priv;
c7e14418:	e5974094 	ldr	r4, [r7, #148]

	/* Read the primary version, if available */
	if (td->options & NAND_BBT_VERSION) {
c7e1441c:	0a000015 	beq	c7e14478 <nand_scan_bbt+0x188>
		scan_read_raw(mtd, buf, (loff_t)td->pages[0] << this->page_shift,
c7e14420:	e5910004 	ldr	r0, [r1, #4]
c7e14424:	e5942054 	ldr	r2, [r4, #84]
c7e14428:	e1a01fc0 	asr	r1, r0, #31
c7e1442c:	eb0058da 	bl	c7e2a79c <__ashldi3>
c7e14430:	e597c014 	ldr	ip, [r7, #20]
c7e14434:	e1a02000 	mov	r2, r0
c7e14438:	e58dc000 	str	ip, [sp]
c7e1443c:	e59dc010 	ldr	ip, [sp, #16]
c7e14440:	e1a03001 	mov	r3, r1
c7e14444:	e1a00007 	mov	r0, r7
c7e14448:	e1a0100b 	mov	r1, fp
c7e1444c:	e58dc004 	str	ip, [sp, #4]
c7e14450:	ebfffa1e 	bl	c7e12cd0 <scan_read_raw>
			      mtd->writesize, td);
		td->version[0] = buf[bbt_get_ver_offs(mtd, td)];
c7e14454:	e59d1010 	ldr	r1, [sp, #16]
c7e14458:	e1a00007 	mov	r0, r7
c7e1445c:	ebfffa34 	bl	c7e12d34 <bbt_get_ver_offs>
		printk(KERN_DEBUG "Bad block table at page %d, version 0x%02X\n",
c7e14460:	e59d3010 	ldr	r3, [sp, #16]

	/* Read the primary version, if available */
	if (td->options & NAND_BBT_VERSION) {
		scan_read_raw(mtd, buf, (loff_t)td->pages[0] << this->page_shift,
			      mtd->writesize, td);
		td->version[0] = buf[bbt_get_ver_offs(mtd, td)];
c7e14464:	e7db2000 	ldrb	r2, [fp, r0]
		printk(KERN_DEBUG "Bad block table at page %d, version 0x%02X\n",
c7e14468:	e5931004 	ldr	r1, [r3, #4]

	/* Read the primary version, if available */
	if (td->options & NAND_BBT_VERSION) {
		scan_read_raw(mtd, buf, (loff_t)td->pages[0] << this->page_shift,
			      mtd->writesize, td);
		td->version[0] = buf[bbt_get_ver_offs(mtd, td)];
c7e1446c:	e5c32010 	strb	r2, [r3, #16]
		printk(KERN_DEBUG "Bad block table at page %d, version 0x%02X\n",
c7e14470:	e59f0340 	ldr	r0, [pc, #832]	; c7e147b8 <nand_scan_bbt+0x4c8>
c7e14474:	ebffd177 	bl	c7e08a58 <printf>
		       td->pages[0], td->version[0]);
	}

	/* Read the mirror version, if available */
	if (md && (md->options & NAND_BBT_VERSION)) {
c7e14478:	e59dc014 	ldr	ip, [sp, #20]
c7e1447c:	e35c0000 	cmp	ip, #0	; 0x0
c7e14480:	0a000024 	beq	c7e14518 <nand_scan_bbt+0x228>
c7e14484:	e59c3000 	ldr	r3, [ip]
c7e14488:	e3130c01 	tst	r3, #256	; 0x100
c7e1448c:	0a000021 	beq	c7e14518 <nand_scan_bbt+0x228>
		scan_read_raw(mtd, buf, (loff_t)md->pages[0] << this->page_shift,
c7e14490:	e59c0004 	ldr	r0, [ip, #4]
c7e14494:	e5942054 	ldr	r2, [r4, #84]
c7e14498:	e1a01fc0 	asr	r1, r0, #31
c7e1449c:	eb0058be 	bl	c7e2a79c <__ashldi3>
c7e144a0:	e597c014 	ldr	ip, [r7, #20]
c7e144a4:	e1a02000 	mov	r2, r0
c7e144a8:	e58dc000 	str	ip, [sp]
c7e144ac:	e59dc010 	ldr	ip, [sp, #16]
c7e144b0:	e1a03001 	mov	r3, r1
c7e144b4:	e1a00007 	mov	r0, r7
c7e144b8:	e1a0100b 	mov	r1, fp
c7e144bc:	e58dc004 	str	ip, [sp, #4]
c7e144c0:	ebfffa02 	bl	c7e12cd0 <scan_read_raw>
			      mtd->writesize, td);
		md->version[0] = buf[bbt_get_ver_offs(mtd, md)];
c7e144c4:	e59d1014 	ldr	r1, [sp, #20]
c7e144c8:	e1a00007 	mov	r0, r7
c7e144cc:	ebfffa18 	bl	c7e12d34 <bbt_get_ver_offs>
		printk(KERN_DEBUG "Bad block table at page %d, version 0x%02X\n",
c7e144d0:	e59d3014 	ldr	r3, [sp, #20]

	/* Read the mirror version, if available */
	if (md && (md->options & NAND_BBT_VERSION)) {
		scan_read_raw(mtd, buf, (loff_t)md->pages[0] << this->page_shift,
			      mtd->writesize, td);
		md->version[0] = buf[bbt_get_ver_offs(mtd, md)];
c7e144d4:	e7db2000 	ldrb	r2, [fp, r0]
		printk(KERN_DEBUG "Bad block table at page %d, version 0x%02X\n",
c7e144d8:	e5931004 	ldr	r1, [r3, #4]

	/* Read the mirror version, if available */
	if (md && (md->options & NAND_BBT_VERSION)) {
		scan_read_raw(mtd, buf, (loff_t)md->pages[0] << this->page_shift,
			      mtd->writesize, td);
		md->version[0] = buf[bbt_get_ver_offs(mtd, md)];
c7e144dc:	e5c32010 	strb	r2, [r3, #16]
		printk(KERN_DEBUG "Bad block table at page %d, version 0x%02X\n",
c7e144e0:	e59f02d0 	ldr	r0, [pc, #720]	; c7e147b8 <nand_scan_bbt+0x4c8>
c7e144e4:	ebffd15b 	bl	c7e08a58 <printf>
c7e144e8:	ea00000a 	b	c7e14518 <nand_scan_bbt+0x228>
 * Search and read the bad block table(s)
*/
static int search_read_bbts(struct mtd_info *mtd, uint8_t * buf, struct nand_bbt_descr *td, struct nand_bbt_descr *md)
{
	/* Search the primary table */
	search_bbt(mtd, buf, td);
c7e144ec:	e1a00007 	mov	r0, r7
c7e144f0:	e1a0100b 	mov	r1, fp
c7e144f4:	e59d2010 	ldr	r2, [sp, #16]
c7e144f8:	ebfffeff 	bl	c7e140fc <search_bbt>

	/* Search the mirror table */
	if (md)
c7e144fc:	e59dc014 	ldr	ip, [sp, #20]
c7e14500:	e35c0000 	cmp	ip, #0	; 0x0
c7e14504:	0a000003 	beq	c7e14518 <nand_scan_bbt+0x228>
		search_bbt(mtd, buf, md);
c7e14508:	e1a00007 	mov	r0, r7
c7e1450c:	e1a0100b 	mov	r1, fp
c7e14510:	e1a0200c 	mov	r2, ip
c7e14514:	ebfffef8 	bl	c7e140fc <search_bbt>
 * version nr. of one table is less than the other
*/
static int check_create(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *bd)
{
	int i, chips, writeops, chipsel, res;
	struct nand_chip *this = mtd->priv;
c7e14518:	e5971094 	ldr	r1, [r7, #148]
	struct nand_bbt_descr *md = this->bbt_md;
	struct nand_bbt_descr *rd, *rd2;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP)
		chips = this->numchips;
c7e1451c:	e3a0c000 	mov	ip, #0	; 0x0
*/
static int check_create(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *bd)
{
	int i, chips, writeops, chipsel, res;
	struct nand_chip *this = mtd->priv;
	struct nand_bbt_descr *td = this->bbt_td;
c7e14520:	e5919114 	ldr	r9, [r1, #276]
 * version nr. of one table is less than the other
*/
static int check_create(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *bd)
{
	int i, chips, writeops, chipsel, res;
	struct nand_chip *this = mtd->priv;
c7e14524:	e58d1018 	str	r1, [sp, #24]
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;
	struct nand_bbt_descr *rd, *rd2;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP)
c7e14528:	e5993000 	ldr	r3, [r9]
static int check_create(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *bd)
{
	int i, chips, writeops, chipsel, res;
	struct nand_chip *this = mtd->priv;
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;
c7e1452c:	e591a118 	ldr	sl, [r1, #280]
	struct nand_bbt_descr *rd, *rd2;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP)
c7e14530:	e3130080 	tst	r3, #128	; 0x80
		chips = this->numchips;
c7e14534:	159d3018 	ldrne	r3, [sp, #24]
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;
	struct nand_bbt_descr *rd, *rd2;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP)
c7e14538:	03a02001 	moveq	r2, #1	; 0x1
		chips = this->numchips;
c7e1453c:	15933064 	ldrne	r3, [r3, #100]
	struct nand_bbt_descr *td = this->bbt_td;
	struct nand_bbt_descr *md = this->bbt_md;
	struct nand_bbt_descr *rd, *rd2;

	/* Do we have a bbt per chip ? */
	if (td->options & NAND_BBT_PERCHIP)
c7e14540:	058d2020 	streq	r2, [sp, #32]
		chips = this->numchips;
c7e14544:	158d3020 	strne	r3, [sp, #32]
c7e14548:	e58da024 	str	sl, [sp, #36]
c7e1454c:	e58d9028 	str	r9, [sp, #40]
c7e14550:	e58dc01c 	str	ip, [sp, #28]
c7e14554:	ea00007d 	b	c7e14750 <nand_scan_bbt+0x460>
	for (i = 0; i < chips; i++) {
		writeops = 0;
		rd = NULL;
		rd2 = NULL;
		/* Per chip or per device ? */
		chipsel = (td->options & NAND_BBT_PERCHIP) ? i : -1;
c7e14558:	e5990000 	ldr	r0, [r9]
c7e1455c:	e59d101c 	ldr	r1, [sp, #28]
c7e14560:	e3100080 	tst	r0, #128	; 0x80
c7e14564:	e1a02101 	lsl	r2, r1, #2
c7e14568:	03e01000 	mvneq	r1, #0	; 0x0
		/* Mirrored table available ? */
		if (md) {
c7e1456c:	e35a0000 	cmp	sl, #0	; 0x0
	for (i = 0; i < chips; i++) {
		writeops = 0;
		rd = NULL;
		rd2 = NULL;
		/* Per chip or per device ? */
		chipsel = (td->options & NAND_BBT_PERCHIP) ? i : -1;
c7e14570:	e58d102c 	str	r1, [sp, #44]
		/* Mirrored table available ? */
		if (md) {
c7e14574:	0a000029 	beq	c7e14620 <nand_scan_bbt+0x330>
			if (td->pages[i] == -1 && md->pages[i] == -1) {
c7e14578:	e0893002 	add	r3, r9, r2
c7e1457c:	e5933004 	ldr	r3, [r3, #4]
c7e14580:	e08a2002 	add	r2, sl, r2
c7e14584:	e3730001 	cmn	r3, #1	; 0x1
c7e14588:	1a000008 	bne	c7e145b0 <nand_scan_bbt+0x2c0>
c7e1458c:	e5923004 	ldr	r3, [r2, #4]
c7e14590:	e3730001 	cmn	r3, #1	; 0x1
c7e14594:	03a06003 	moveq	r6, #3	; 0x3
c7e14598:	0a000025 	beq	c7e14634 <nand_scan_bbt+0x344>
				goto create;
			}

			if (td->pages[i] == -1) {
				rd = md;
				td->version[i] = md->version[i];
c7e1459c:	e59d2024 	ldr	r2, [sp, #36]
c7e145a0:	e59dc028 	ldr	ip, [sp, #40]
c7e145a4:	e5d23010 	ldrb	r3, [r2, #16]
c7e145a8:	e5cc3010 	strb	r3, [ip, #16]
c7e145ac:	ea00007a 	b	c7e1479c <nand_scan_bbt+0x4ac>
				writeops = 1;
				goto writecheck;
			}

			if (md->pages[i] == -1) {
c7e145b0:	e5923004 	ldr	r3, [r2, #4]
c7e145b4:	e59d2028 	ldr	r2, [sp, #40]
c7e145b8:	e3730001 	cmn	r3, #1	; 0x1
c7e145bc:	e5d21010 	ldrb	r1, [r2, #16]
				rd = td;
				md->version[i] = td->version[i];
c7e145c0:	059d3024 	ldreq	r3, [sp, #36]
c7e145c4:	05c31010 	strbeq	r1, [r3, #16]
				td->version[i] = md->version[i];
				writeops = 1;
				goto writecheck;
			}

			if (md->pages[i] == -1) {
c7e145c8:	0a00000e 	beq	c7e14608 <nand_scan_bbt+0x318>
				md->version[i] = td->version[i];
				writeops = 2;
				goto writecheck;
			}

			if (td->version[i] == md->version[i]) {
c7e145cc:	e59dc024 	ldr	ip, [sp, #36]
c7e145d0:	e5dc2010 	ldrb	r2, [ip, #16]
c7e145d4:	e1510002 	cmp	r1, r2
c7e145d8:	1a000004 	bne	c7e145f0 <nand_scan_bbt+0x300>
				rd = td;
				if (!(td->options & NAND_BBT_VERSION))
c7e145dc:	e3100c01 	tst	r0, #256	; 0x100
c7e145e0:	13a04000 	movne	r4, #0	; 0x0
c7e145e4:	11a06004 	movne	r6, r4
c7e145e8:	1a000025 	bne	c7e14684 <nand_scan_bbt+0x394>
c7e145ec:	ea000022 	b	c7e1467c <nand_scan_bbt+0x38c>
					rd2 = md;
				goto writecheck;
			}

			if (((int8_t) (td->version[i] - md->version[i])) > 0) {
c7e145f0:	e0623001 	rsb	r3, r2, r1
c7e145f4:	e1a03c03 	lsl	r3, r3, #24
c7e145f8:	e3530000 	cmp	r3, #0	; 0x0
c7e145fc:	da000004 	ble	c7e14614 <nand_scan_bbt+0x324>
				rd = td;
				md->version[i] = td->version[i];
c7e14600:	e59d2024 	ldr	r2, [sp, #36]
c7e14604:	e5c21010 	strb	r1, [r2, #16]
c7e14608:	e3a04000 	mov	r4, #0	; 0x0
c7e1460c:	e3a06002 	mov	r6, #2	; 0x2
c7e14610:	ea00001b 	b	c7e14684 <nand_scan_bbt+0x394>
				writeops = 2;
			} else {
				rd = md;
				td->version[i] = md->version[i];
c7e14614:	e59d3028 	ldr	r3, [sp, #40]
c7e14618:	e5c32010 	strb	r2, [r3, #16]
c7e1461c:	ea00005e 	b	c7e1479c <nand_scan_bbt+0x4ac>
			}

			goto writecheck;

		} else {
			if (td->pages[i] == -1) {
c7e14620:	e0893002 	add	r3, r9, r2
c7e14624:	e5933004 	ldr	r3, [r3, #4]
c7e14628:	e3730001 	cmn	r3, #1	; 0x1
c7e1462c:	1a000012 	bne	c7e1467c <nand_scan_bbt+0x38c>
c7e14630:	e3a06001 	mov	r6, #1	; 0x1
			rd = td;
			goto writecheck;
		}
	create:
		/* Create the bad block table by scanning the device ? */
		if (!(td->options & NAND_BBT_CREATE))
c7e14634:	e3100c02 	tst	r0, #512	; 0x200
c7e14638:	0a00003b 	beq	c7e1472c <nand_scan_bbt+0x43c>
			continue;

		/* Create the table in memory by scanning the chip(s) */
		if (!(this->options & NAND_CREATE_EMPTY_BBT))
c7e1463c:	e59dc018 	ldr	ip, [sp, #24]
c7e14640:	e59c3050 	ldr	r3, [ip, #80]
c7e14644:	e3130401 	tst	r3, #16777216	; 0x1000000
c7e14648:	1a000004 	bne	c7e14660 <nand_scan_bbt+0x370>
			create_bbt(mtd, buf, bd, chipsel);
c7e1464c:	e1a00007 	mov	r0, r7
c7e14650:	e1a0100b 	mov	r1, fp
c7e14654:	e59d200c 	ldr	r2, [sp, #12]
c7e14658:	e59d302c 	ldr	r3, [sp, #44]
c7e1465c:	ebfffdc4 	bl	c7e13d74 <create_bbt>

		td->version[i] = 1;
c7e14660:	e59d1028 	ldr	r1, [sp, #40]
c7e14664:	e3a03001 	mov	r3, #1	; 0x1
		if (md)
c7e14668:	e35a0000 	cmp	sl, #0	; 0x0

		/* Create the table in memory by scanning the chip(s) */
		if (!(this->options & NAND_CREATE_EMPTY_BBT))
			create_bbt(mtd, buf, bd, chipsel);

		td->version[i] = 1;
c7e1466c:	e5c13010 	strb	r3, [r1, #16]
		if (md)
			md->version[i] = 1;
c7e14670:	159d2024 	ldrne	r2, [sp, #36]
c7e14674:	15c23010 	strbne	r3, [r2, #16]
c7e14678:	ea00000d 	b	c7e146b4 <nand_scan_bbt+0x3c4>
	writecheck:
c7e1467c:	e1a0400a 	mov	r4, sl
c7e14680:	e3a06000 	mov	r6, #0	; 0x0
c7e14684:	e1a02009 	mov	r2, r9
		/* read back first ? */
		if (rd)
			read_abs_bbt(mtd, buf, rd, chipsel);
c7e14688:	e1a00007 	mov	r0, r7
c7e1468c:	e1a0100b 	mov	r1, fp
c7e14690:	e59d302c 	ldr	r3, [sp, #44]
c7e14694:	ebfffa59 	bl	c7e13000 <read_abs_bbt>
		/* If they weren't versioned, read both. */
		if (rd2)
c7e14698:	e3540000 	cmp	r4, #0	; 0x0
c7e1469c:	0a000004 	beq	c7e146b4 <nand_scan_bbt+0x3c4>
			read_abs_bbt(mtd, buf, rd2, chipsel);
c7e146a0:	e1a02004 	mov	r2, r4
c7e146a4:	e1a00007 	mov	r0, r7
c7e146a8:	e1a0100b 	mov	r1, fp
c7e146ac:	e59d302c 	ldr	r3, [sp, #44]
c7e146b0:	ebfffa52 	bl	c7e13000 <read_abs_bbt>

		/* Write the bad block table to the device ? */
		if ((writeops & 0x01) && (td->options & NAND_BBT_WRITE)) {
c7e146b4:	e3160001 	tst	r6, #1	; 0x1
c7e146b8:	0a00000b 	beq	c7e146ec <nand_scan_bbt+0x3fc>
c7e146bc:	e5993000 	ldr	r3, [r9]
c7e146c0:	e3130a01 	tst	r3, #4096	; 0x1000
c7e146c4:	0a000008 	beq	c7e146ec <nand_scan_bbt+0x3fc>
			res = write_bbt(mtd, buf, td, md, chipsel);
c7e146c8:	e59dc02c 	ldr	ip, [sp, #44]
c7e146cc:	e1a00007 	mov	r0, r7
c7e146d0:	e1a0100b 	mov	r1, fp
c7e146d4:	e1a02009 	mov	r2, r9
c7e146d8:	e1a0300a 	mov	r3, sl
c7e146dc:	e58dc000 	str	ip, [sp]
c7e146e0:	ebfffa7e 	bl	c7e130e0 <write_bbt>
			if (res < 0)
c7e146e4:	e2505000 	subs	r5, r0, #0	; 0x0
c7e146e8:	ba00001d 	blt	c7e14764 <nand_scan_bbt+0x474>
				return res;
		}

		/* Write the mirror bad block table to the device ? */
		if ((writeops & 0x02) && md && (md->options & NAND_BBT_WRITE)) {
c7e146ec:	e25a3000 	subs	r3, sl, #0	; 0x0
c7e146f0:	13a03001 	movne	r3, #1	; 0x1
c7e146f4:	e01330a6 	ands	r3, r3, r6, lsr #1
c7e146f8:	0a00000b 	beq	c7e1472c <nand_scan_bbt+0x43c>
c7e146fc:	e59a3000 	ldr	r3, [sl]
c7e14700:	e3130a01 	tst	r3, #4096	; 0x1000
c7e14704:	0a000008 	beq	c7e1472c <nand_scan_bbt+0x43c>
			res = write_bbt(mtd, buf, md, td, chipsel);
c7e14708:	e59dc02c 	ldr	ip, [sp, #44]
c7e1470c:	e1a00007 	mov	r0, r7
c7e14710:	e1a0100b 	mov	r1, fp
c7e14714:	e1a0200a 	mov	r2, sl
c7e14718:	e1a03009 	mov	r3, r9
c7e1471c:	e58dc000 	str	ip, [sp]
c7e14720:	ebfffa6e 	bl	c7e130e0 <write_bbt>
			if (res < 0)
c7e14724:	e2505000 	subs	r5, r0, #0	; 0x0
c7e14728:	ba00000d 	blt	c7e14764 <nand_scan_bbt+0x474>
	if (td->options & NAND_BBT_PERCHIP)
		chips = this->numchips;
	else
		chips = 1;

	for (i = 0; i < chips; i++) {
c7e1472c:	e59d101c 	ldr	r1, [sp, #28]
c7e14730:	e59d2024 	ldr	r2, [sp, #36]
c7e14734:	e59d3028 	ldr	r3, [sp, #40]
c7e14738:	e2811001 	add	r1, r1, #1	; 0x1
c7e1473c:	e2822001 	add	r2, r2, #1	; 0x1
c7e14740:	e2833001 	add	r3, r3, #1	; 0x1
c7e14744:	e58d101c 	str	r1, [sp, #28]
c7e14748:	e58d2024 	str	r2, [sp, #36]
c7e1474c:	e58d3028 	str	r3, [sp, #40]
c7e14750:	e59dc01c 	ldr	ip, [sp, #28]
c7e14754:	e59d1020 	ldr	r1, [sp, #32]
c7e14758:	e15c0001 	cmp	ip, r1
c7e1475c:	baffff7d 	blt	c7e14558 <nand_scan_bbt+0x268>
c7e14760:	e3a05000 	mov	r5, #0	; 0x0

	if (res)
		res = check_create(mtd, buf, bd);

	/* Prevent the bbt regions from erasing / writing */
	mark_bbt_region(mtd, td);
c7e14764:	e59d1010 	ldr	r1, [sp, #16]
c7e14768:	e1a00007 	mov	r0, r7
c7e1476c:	ebfffc71 	bl	c7e13938 <mark_bbt_region>
	if (md)
c7e14770:	e59d2014 	ldr	r2, [sp, #20]
c7e14774:	e3520000 	cmp	r2, #0	; 0x0
c7e14778:	0a000002 	beq	c7e14788 <nand_scan_bbt+0x498>
		mark_bbt_region(mtd, md);
c7e1477c:	e1a00007 	mov	r0, r7
c7e14780:	e1a01002 	mov	r1, r2
c7e14784:	ebfffc6b 	bl	c7e13938 <mark_bbt_region>

	vfree(buf);
c7e14788:	e1a0000b 	mov	r0, fp
c7e1478c:	ebffd1f3 	bl	c7e08f60 <free>
	return res;
}
c7e14790:	e1a00005 	mov	r0, r5
c7e14794:	e28dd030 	add	sp, sp, #48	; 0x30
c7e14798:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
	/* Prevent the bbt regions from erasing / writing */
	mark_bbt_region(mtd, td);
	if (md)
		mark_bbt_region(mtd, md);

	vfree(buf);
c7e1479c:	e1a0200a 	mov	r2, sl
c7e147a0:	e3a04000 	mov	r4, #0	; 0x0
c7e147a4:	e3a06001 	mov	r6, #1	; 0x1
c7e147a8:	eaffffb6 	b	c7e14688 <nand_scan_bbt+0x398>
c7e147ac:	c7e33212 	.word	0xc7e33212
c7e147b0:	c7e33230 	.word	0xc7e33230
c7e147b4:	c7e33268 	.word	0xc7e33268
c7e147b8:	c7e33281 	.word	0xc7e33281

c7e147bc <nand_default_bbt>:
 * This function selects the default bad block table
 * support for the device and calls the nand_scan_bbt function
 *
*/
int nand_default_bbt(struct mtd_info *mtd)
{
c7e147bc:	e92d4070 	push	{r4, r5, r6, lr}
	struct nand_chip *this = mtd->priv;
c7e147c0:	e5904094 	ldr	r4, [r0, #148]
 * This function selects the default bad block table
 * support for the device and calls the nand_scan_bbt function
 *
*/
int nand_default_bbt(struct mtd_info *mtd)
{
c7e147c4:	e1a05000 	mov	r5, r0
	 * _good_ blocks. Erasing those blocks leads to loss
	 * of the good / bad information, so we _must_ store
	 * this information in a good / bad table during
	 * startup
	 */
	if (this->options & NAND_IS_AND) {
c7e147c8:	e5942050 	ldr	r2, [r4, #80]
c7e147cc:	e3120020 	tst	r2, #32	; 0x20
c7e147d0:	0a00000a 	beq	c7e14800 <nand_default_bbt+0x44>
		/* Use the default pattern descriptors */
		if (!this->bbt_td) {
c7e147d4:	e5943114 	ldr	r3, [r4, #276]
			this->bbt_td = &bbt_main_descr;
			this->bbt_md = &bbt_mirror_descr;
		}
		this->options |= NAND_USE_FLASH_BBT;
		return nand_scan_bbt(mtd, &agand_flashbased);
c7e147d8:	e59f10d4 	ldr	r1, [pc, #212]	; c7e148b4 <nand_default_bbt+0xf8>
	 * this information in a good / bad table during
	 * startup
	 */
	if (this->options & NAND_IS_AND) {
		/* Use the default pattern descriptors */
		if (!this->bbt_td) {
c7e147dc:	e3530000 	cmp	r3, #0	; 0x0
			this->bbt_td = &bbt_main_descr;
c7e147e0:	059f20d0 	ldreq	r2, [pc, #208]	; c7e148b8 <nand_default_bbt+0xfc>
			this->bbt_md = &bbt_mirror_descr;
c7e147e4:	02823024 	addeq	r3, r2, #36	; 0x24
c7e147e8:	05843118 	streq	r3, [r4, #280]
		}
		this->options |= NAND_USE_FLASH_BBT;
c7e147ec:	e5943050 	ldr	r3, [r4, #80]
	 * startup
	 */
	if (this->options & NAND_IS_AND) {
		/* Use the default pattern descriptors */
		if (!this->bbt_td) {
			this->bbt_td = &bbt_main_descr;
c7e147f0:	05842114 	streq	r2, [r4, #276]
			this->bbt_md = &bbt_mirror_descr;
		}
		this->options |= NAND_USE_FLASH_BBT;
c7e147f4:	e3833801 	orr	r3, r3, #65536	; 0x10000
c7e147f8:	e5843050 	str	r3, [r4, #80]
c7e147fc:	ea00002a 	b	c7e148ac <nand_default_bbt+0xf0>
		return nand_scan_bbt(mtd, &agand_flashbased);
	}

	/* Is a flash based bad block table requested ? */
	if (this->options & NAND_USE_FLASH_BBT) {
c7e14800:	e2123801 	ands	r3, r2, #65536	; 0x10000
				this->bbt_md = &bbt_mirror_descr;
			}
		}
	} else {
		this->bbt_td = NULL;
		this->bbt_md = NULL;
c7e14804:	05843118 	streq	r3, [r4, #280]
				this->bbt_td = &bbt_main_descr;
				this->bbt_md = &bbt_mirror_descr;
			}
		}
	} else {
		this->bbt_td = NULL;
c7e14808:	05843114 	streq	r3, [r4, #276]
		this->options |= NAND_USE_FLASH_BBT;
		return nand_scan_bbt(mtd, &agand_flashbased);
	}

	/* Is a flash based bad block table requested ? */
	if (this->options & NAND_USE_FLASH_BBT) {
c7e1480c:	0a00000b 	beq	c7e14840 <nand_default_bbt+0x84>
		/* Use the default pattern descriptors */
		if (!this->bbt_td) {
c7e14810:	e5943114 	ldr	r3, [r4, #276]
c7e14814:	e3530000 	cmp	r3, #0	; 0x0
c7e14818:	1a000008 	bne	c7e14840 <nand_default_bbt+0x84>
c7e1481c:	e59f1094 	ldr	r1, [pc, #148]	; c7e148b8 <nand_default_bbt+0xfc>
			if (this->options & NAND_USE_FLASH_BBT_NO_OOB) {
c7e14820:	e3120502 	tst	r2, #8388608	; 0x800000
				this->bbt_td = &bbt_main_no_bbt_descr;
				this->bbt_md = &bbt_mirror_no_bbt_descr;
c7e14824:	12812090 	addne	r2, r1, #144	; 0x90
	/* Is a flash based bad block table requested ? */
	if (this->options & NAND_USE_FLASH_BBT) {
		/* Use the default pattern descriptors */
		if (!this->bbt_td) {
			if (this->options & NAND_USE_FLASH_BBT_NO_OOB) {
				this->bbt_td = &bbt_main_no_bbt_descr;
c7e14828:	1281306c 	addne	r3, r1, #108	; 0x6c
				this->bbt_md = &bbt_mirror_no_bbt_descr;
			} else {
				this->bbt_td = &bbt_main_descr;
				this->bbt_md = &bbt_mirror_descr;
c7e1482c:	02813024 	addeq	r3, r1, #36	; 0x24
	/* Is a flash based bad block table requested ? */
	if (this->options & NAND_USE_FLASH_BBT) {
		/* Use the default pattern descriptors */
		if (!this->bbt_td) {
			if (this->options & NAND_USE_FLASH_BBT_NO_OOB) {
				this->bbt_td = &bbt_main_no_bbt_descr;
c7e14830:	15843114 	strne	r3, [r4, #276]
				this->bbt_md = &bbt_mirror_no_bbt_descr;
c7e14834:	15842118 	strne	r2, [r4, #280]
			} else {
				this->bbt_td = &bbt_main_descr;
				this->bbt_md = &bbt_mirror_descr;
c7e14838:	05843118 	streq	r3, [r4, #280]
		if (!this->bbt_td) {
			if (this->options & NAND_USE_FLASH_BBT_NO_OOB) {
				this->bbt_td = &bbt_main_no_bbt_descr;
				this->bbt_md = &bbt_mirror_no_bbt_descr;
			} else {
				this->bbt_td = &bbt_main_descr;
c7e1483c:	05841114 	streq	r1, [r4, #276]
	} else {
		this->bbt_td = NULL;
		this->bbt_md = NULL;
	}

	if (!this->badblock_pattern)
c7e14840:	e594311c 	ldr	r3, [r4, #284]
c7e14844:	e3530000 	cmp	r3, #0	; 0x0
c7e14848:	1a000015 	bne	c7e148a4 <nand_default_bbt+0xe8>
	struct nand_bbt_descr *bd;
	if (this->badblock_pattern) {
		printk(KERN_WARNING "BBT descr already allocated; not replacing.\n");
		return -EINVAL;
	}
	bd = kzalloc(sizeof(*bd), GFP_KERNEL);
c7e1484c:	e3a00024 	mov	r0, #36	; 0x24
c7e14850:	e3a01001 	mov	r1, #1	; 0x1
c7e14854:	ebffd42a 	bl	c7e09904 <calloc>
	if (!bd) {
c7e14858:	e3500000 	cmp	r0, #0	; 0x0
c7e1485c:	1a000002 	bne	c7e1486c <nand_default_bbt+0xb0>
		printk(KERN_ERR "nand_create_default_bbt_descr: Out of memory\n");
c7e14860:	e59f0054 	ldr	r0, [pc, #84]	; c7e148bc <nand_default_bbt+0x100>
c7e14864:	ebffd07b 	bl	c7e08a58 <printf>
c7e14868:	ea00000d 	b	c7e148a4 <nand_default_bbt+0xe8>
		return -ENOMEM;
	}
	bd->options = this->options & BBT_SCAN_OPTIONS;
c7e1486c:	e5943050 	ldr	r3, [r4, #80]
	bd->offs = this->badblockpos;
	bd->len = (this->options & NAND_BUSWIDTH_16) ? 2 : 1;
	bd->pattern = scan_ff_pattern;
	bd->options |= NAND_BBT_DYNAMICSTRUCT;
	this->badblock_pattern = bd;
c7e14870:	e584011c 	str	r0, [r4, #284]
	bd = kzalloc(sizeof(*bd), GFP_KERNEL);
	if (!bd) {
		printk(KERN_ERR "nand_create_default_bbt_descr: Out of memory\n");
		return -ENOMEM;
	}
	bd->options = this->options & BBT_SCAN_OPTIONS;
c7e14874:	e2032943 	and	r2, r3, #1097728	; 0x10c000
c7e14878:	e5802000 	str	r2, [r0]
	bd->offs = this->badblockpos;
	bd->len = (this->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e1487c:	e3130002 	tst	r3, #2	; 0x2
	if (!bd) {
		printk(KERN_ERR "nand_create_default_bbt_descr: Out of memory\n");
		return -ENOMEM;
	}
	bd->options = this->options & BBT_SCAN_OPTIONS;
	bd->offs = this->badblockpos;
c7e14880:	e5943080 	ldr	r3, [r4, #128]
	bd->len = (this->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e14884:	13a01002 	movne	r1, #2	; 0x2
c7e14888:	03a01001 	moveq	r1, #1	; 0x1
	if (!bd) {
		printk(KERN_ERR "nand_create_default_bbt_descr: Out of memory\n");
		return -ENOMEM;
	}
	bd->options = this->options & BBT_SCAN_OPTIONS;
	bd->offs = this->badblockpos;
c7e1488c:	e5803008 	str	r3, [r0, #8]
	bd->len = (this->options & NAND_BUSWIDTH_16) ? 2 : 1;
	bd->pattern = scan_ff_pattern;
c7e14890:	e59f3028 	ldr	r3, [pc, #40]	; c7e148c0 <nand_default_bbt+0x104>
	bd->options |= NAND_BBT_DYNAMICSTRUCT;
c7e14894:	e3822602 	orr	r2, r2, #2097152	; 0x200000
		printk(KERN_ERR "nand_create_default_bbt_descr: Out of memory\n");
		return -ENOMEM;
	}
	bd->options = this->options & BBT_SCAN_OPTIONS;
	bd->offs = this->badblockpos;
	bd->len = (this->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e14898:	e5801014 	str	r1, [r0, #20]
	bd->pattern = scan_ff_pattern;
c7e1489c:	e5803020 	str	r3, [r0, #32]
	bd->options |= NAND_BBT_DYNAMICSTRUCT;
c7e148a0:	e5802000 	str	r2, [r0]
	}

	if (!this->badblock_pattern)
		nand_create_default_bbt_descr(this);

	return nand_scan_bbt(mtd, this->badblock_pattern);
c7e148a4:	e594111c 	ldr	r1, [r4, #284]
c7e148a8:	e1a00005 	mov	r0, r5
}
c7e148ac:	e8bd4070 	pop	{r4, r5, r6, lr}
	}

	if (!this->badblock_pattern)
		nand_create_default_bbt_descr(this);

	return nand_scan_bbt(mtd, this->badblock_pattern);
c7e148b0:	eafffe8e 	b	c7e142f0 <nand_scan_bbt>
c7e148b4:	c7e39610 	.word	0xc7e39610
c7e148b8:	c7e395c8 	.word	0xc7e395c8
c7e148bc:	c7e332ad 	.word	0xc7e332ad
c7e148c0:	c7e3967c 	.word	0xc7e3967c

c7e148c4 <nand_read>:

extern int nand_curr_device;
extern nand_info_t nand_info[];

static inline int nand_read(nand_info_t *info, loff_t ofs, size_t *len, u_char *buf)
{
c7e148c4:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
c7e148c8:	e59d1018 	ldr	r1, [sp, #24]
	return info->read(info, ofs, *len, (size_t *)len, buf);
c7e148cc:	e591c000 	ldr	ip, [r1]
c7e148d0:	e58d1004 	str	r1, [sp, #4]
c7e148d4:	e59d101c 	ldr	r1, [sp, #28]
c7e148d8:	e58dc000 	str	ip, [sp]
c7e148dc:	e58d1008 	str	r1, [sp, #8]
c7e148e0:	e1a0e00f 	mov	lr, pc
c7e148e4:	e590f040 	ldr	pc, [r0, #64]
}
c7e148e8:	e28dd014 	add	sp, sp, #20	; 0x14
c7e148ec:	e8bd8000 	pop	{pc}

c7e148f0 <nand_write>:

static inline int nand_write(nand_info_t *info, loff_t ofs, size_t *len, u_char *buf)
{
c7e148f0:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
c7e148f4:	e59d1018 	ldr	r1, [sp, #24]
	return info->write(info, ofs, *len, (size_t *)len, buf);
c7e148f8:	e591c000 	ldr	ip, [r1]
c7e148fc:	e58d1004 	str	r1, [sp, #4]
c7e14900:	e59d101c 	ldr	r1, [sp, #28]
c7e14904:	e58dc000 	str	ip, [sp]
c7e14908:	e58d1008 	str	r1, [sp, #8]
c7e1490c:	e1a0e00f 	mov	lr, pc
c7e14910:	e590f044 	ldr	pc, [r0, #68]
}
c7e14914:	e28dd014 	add	sp, sp, #20	; 0x14
c7e14918:	e8bd8000 	pop	{pc}

c7e1491c <nand_block_isbad>:

static inline int nand_block_isbad(nand_info_t *info, loff_t ofs)
{
c7e1491c:	e92d4010 	push	{r4, lr}
	return info->block_isbad(info, ofs);
c7e14920:	e1a0e00f 	mov	lr, pc
c7e14924:	e590f078 	ldr	pc, [r0, #120]
}
c7e14928:	e8bd8010 	pop	{r4, pc}

c7e1492c <check_skip_len>:
 * @return 0 if the image fits and there are no bad blocks
 *         1 if the image fits, but there are bad blocks
 *        -1 if the image does not fit
 */
static int check_skip_len(nand_info_t *nand, loff_t offset, size_t length)
{
c7e1492c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e14930:	e3a0a000 	mov	sl, #0	; 0x0
c7e14934:	e1a07000 	mov	r7, r0
c7e14938:	e1a04002 	mov	r4, r2
c7e1493c:	e1a05003 	mov	r5, r3
c7e14940:	e59db020 	ldr	fp, [sp, #32]
c7e14944:	e1a0900a 	mov	r9, sl
c7e14948:	ea000014 	b	c7e149a0 <check_skip_len+0x74>

	while (len_excl_bad < length) {
		size_t block_len, block_off;
		loff_t block_start;

		if (offset >= nand->size)
c7e1494c:	e597300c 	ldr	r3, [r7, #12]
c7e14950:	e1530005 	cmp	r3, r5
c7e14954:	8a000005 	bhi	c7e14970 <check_skip_len+0x44>
c7e14958:	1a000002 	bne	c7e14968 <check_skip_len+0x3c>
c7e1495c:	e5973008 	ldr	r3, [r7, #8]
c7e14960:	e1530004 	cmp	r3, r4
c7e14964:	8a000001 	bhi	c7e14970 <check_skip_len+0x44>
c7e14968:	e3e09000 	mvn	r9, #0	; 0x0
c7e1496c:	ea00000e 	b	c7e149ac <check_skip_len+0x80>
			return -1;

		block_start = offset & ~(loff_t)(nand->erasesize - 1);
c7e14970:	e597c010 	ldr	ip, [r7, #16]
		block_off = offset & (nand->erasesize - 1);
		block_len = nand->erasesize - block_off;

		if (!nand_block_isbad(nand, block_start))
c7e14974:	e1a03005 	mov	r3, r5
		loff_t block_start;

		if (offset >= nand->size)
			return -1;

		block_start = offset & ~(loff_t)(nand->erasesize - 1);
c7e14978:	e24c1001 	sub	r1, ip, #1	; 0x1
		block_off = offset & (nand->erasesize - 1);
		block_len = nand->erasesize - block_off;

		if (!nand_block_isbad(nand, block_start))
c7e1497c:	e1c42001 	bic	r2, r4, r1
		if (offset >= nand->size)
			return -1;

		block_start = offset & ~(loff_t)(nand->erasesize - 1);
		block_off = offset & (nand->erasesize - 1);
		block_len = nand->erasesize - block_off;
c7e14980:	e0011004 	and	r1, r1, r4
c7e14984:	e061600c 	rsb	r6, r1, ip

		if (!nand_block_isbad(nand, block_start))
c7e14988:	ebffffe3 	bl	c7e1491c <nand_block_isbad>
c7e1498c:	e3500000 	cmp	r0, #0	; 0x0
c7e14990:	13a09001 	movne	r9, #1	; 0x1
			len_excl_bad += block_len;
c7e14994:	008aa006 	addeq	sl, sl, r6
		else
			ret = 1;

		offset += block_len;
c7e14998:	e0944006 	adds	r4, r4, r6
c7e1499c:	e2a55000 	adc	r5, r5, #0	; 0x0
static int check_skip_len(nand_info_t *nand, loff_t offset, size_t length)
{
	size_t len_excl_bad = 0;
	int ret = 0;

	while (len_excl_bad < length) {
c7e149a0:	e15a000b 	cmp	sl, fp

		block_start = offset & ~(loff_t)(nand->erasesize - 1);
		block_off = offset & (nand->erasesize - 1);
		block_len = nand->erasesize - block_off;

		if (!nand_block_isbad(nand, block_start))
c7e149a4:	e1a00007 	mov	r0, r7
static int check_skip_len(nand_info_t *nand, loff_t offset, size_t length)
{
	size_t len_excl_bad = 0;
	int ret = 0;

	while (len_excl_bad < length) {
c7e149a8:	3affffe7 	bcc	c7e1494c <check_skip_len+0x20>

		offset += block_len;
	}

	return ret;
}
c7e149ac:	e1a00009 	mov	r0, r9
c7e149b0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e149b4 <nand_read_skip_bad>:
 * @param buffer buffer to write to
 * @return 0 in case of success
 */
int nand_read_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
		       u_char *buffer)
{
c7e149b4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int rval;
	size_t left_to_read = *length;
	u_char *p_buffer = buffer;
	int need_skip;

	if ((offset & (nand->writesize - 1)) != 0) {
c7e149b8:	e5901014 	ldr	r1, [r0, #20]
 * @param buffer buffer to write to
 * @return 0 in case of success
 */
int nand_read_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
		       u_char *buffer)
{
c7e149bc:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e149c0:	e59db038 	ldr	fp, [sp, #56]
	int rval;
	size_t left_to_read = *length;
	u_char *p_buffer = buffer;
	int need_skip;

	if ((offset & (nand->writesize - 1)) != 0) {
c7e149c4:	e2411001 	sub	r1, r1, #1	; 0x1
c7e149c8:	e0024001 	and	r4, r2, r1
c7e149cc:	e3a05000 	mov	r5, #0	; 0x0
 */
int nand_read_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
		       u_char *buffer)
{
	int rval;
	size_t left_to_read = *length;
c7e149d0:	e59b1000 	ldr	r1, [fp]
	u_char *p_buffer = buffer;
	int need_skip;

	if ((offset & (nand->writesize - 1)) != 0) {
c7e149d4:	e1944005 	orrs	r4, r4, r5
 * @param buffer buffer to write to
 * @return 0 in case of success
 */
int nand_read_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
		       u_char *buffer)
{
c7e149d8:	e1a0a000 	mov	sl, r0
c7e149dc:	e1a06002 	mov	r6, r2
c7e149e0:	e1a07003 	mov	r7, r3
c7e149e4:	e59d903c 	ldr	r9, [sp, #60]
	int rval;
	size_t left_to_read = *length;
c7e149e8:	e58d100c 	str	r1, [sp, #12]
	u_char *p_buffer = buffer;
	int need_skip;

	if ((offset & (nand->writesize - 1)) != 0) {
c7e149ec:	0a000004 	beq	c7e14a04 <nand_read_skip_bad+0x50>
		printf ("Attempt to read non page aligned data\n");
c7e149f0:	e59f0188 	ldr	r0, [pc, #392]	; c7e14b80 <nand_read_skip_bad+0x1cc>
c7e149f4:	ebffd017 	bl	c7e08a58 <printf>
		*length = 0;
c7e149f8:	e3a03000 	mov	r3, #0	; 0x0
c7e149fc:	e58b3000 	str	r3, [fp]
c7e14a00:	ea000007 	b	c7e14a24 <nand_read_skip_bad+0x70>
		return -EINVAL;
	}

	need_skip = check_skip_len(nand, offset, *length);
c7e14a04:	e59d500c 	ldr	r5, [sp, #12]
c7e14a08:	e58d5000 	str	r5, [sp]
c7e14a0c:	ebffffc6 	bl	c7e1492c <check_skip_len>
	if (need_skip < 0) {
c7e14a10:	e3500000 	cmp	r0, #0	; 0x0
c7e14a14:	aa000004 	bge	c7e14a2c <nand_read_skip_bad+0x78>
		printf ("Attempt to read outside the flash area\n");
c7e14a18:	e59f0164 	ldr	r0, [pc, #356]	; c7e14b84 <nand_read_skip_bad+0x1d0>
c7e14a1c:	ebffd00d 	bl	c7e08a58 <printf>
		*length = 0;
c7e14a20:	e58b4000 	str	r4, [fp]
c7e14a24:	e3e04015 	mvn	r4, #21	; 0x15
c7e14a28:	ea000051 	b	c7e14b74 <nand_read_skip_bad+0x1c0>
		return -EINVAL;
	}

	if (!need_skip) {
c7e14a2c:	1a00004b 	bne	c7e14b60 <nand_read_skip_bad+0x1ac>
		rval = nand_read (nand, offset, length, buffer);
c7e14a30:	e1a03007 	mov	r3, r7
c7e14a34:	e1a0000a 	mov	r0, sl
c7e14a38:	e1a02006 	mov	r2, r6
c7e14a3c:	e58d9004 	str	r9, [sp, #4]
c7e14a40:	e58db000 	str	fp, [sp]
c7e14a44:	ebffff9e 	bl	c7e148c4 <nand_read>
		if (!rval || rval == -EUCLEAN)
c7e14a48:	e3700075 	cmn	r0, #117	; 0x75
c7e14a4c:	13500000 	cmpne	r0, #0	; 0x0
c7e14a50:	e1a04000 	mov	r4, r0
c7e14a54:	13a03000 	movne	r3, #0	; 0x0
c7e14a58:	03a03001 	moveq	r3, #1	; 0x1
c7e14a5c:	0a000043 	beq	c7e14b70 <nand_read_skip_bad+0x1bc>
			return 0;

		*length = 0;
c7e14a60:	e58b3000 	str	r3, [fp]
		printf ("NAND read from offset %llx failed %d\n",
c7e14a64:	e1a02006 	mov	r2, r6
c7e14a68:	e1a03007 	mov	r3, r7
c7e14a6c:	e59f0114 	ldr	r0, [pc, #276]	; c7e14b88 <nand_read_skip_bad+0x1d4>
c7e14a70:	e58d4000 	str	r4, [sp]
c7e14a74:	ebffcff7 	bl	c7e08a58 <printf>
c7e14a78:	ea00003d 	b	c7e14b74 <nand_read_skip_bad+0x1c0>
			offset, rval);
		return rval;
	}

	while (left_to_read > 0) {
		size_t block_offset = offset & (nand->erasesize - 1);
c7e14a7c:	e59a1010 	ldr	r1, [sl, #16]
		size_t read_length;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14a80:	e3a05000 	mov	r5, #0	; 0x0
c7e14a84:	e2613000 	rsb	r3, r1, #0	; 0x0
c7e14a88:	e0064003 	and	r4, r6, r3
c7e14a8c:	e1a02004 	mov	r2, r4
			offset, rval);
		return rval;
	}

	while (left_to_read > 0) {
		size_t block_offset = offset & (nand->erasesize - 1);
c7e14a90:	e2411001 	sub	r1, r1, #1	; 0x1
		size_t read_length;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14a94:	e1a03005 	mov	r3, r5
			offset, rval);
		return rval;
	}

	while (left_to_read > 0) {
		size_t block_offset = offset & (nand->erasesize - 1);
c7e14a98:	e0014006 	and	r4, r1, r6
		size_t read_length;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14a9c:	ebffff9e 	bl	c7e1491c <nand_block_isbad>
c7e14aa0:	e3500000 	cmp	r0, #0	; 0x0
			offset += nand->erasesize - block_offset;
			continue;
		}

		if (left_to_read < (nand->erasesize - block_offset))
			read_length = left_to_read;
c7e14aa4:	e28dc018 	add	ip, sp, #24	; 0x18
		else
			read_length = nand->erasesize - block_offset;

		rval = nand_read (nand, offset, &read_length, p_buffer);
c7e14aa8:	e1a02006 	mov	r2, r6
c7e14aac:	e1a03007 	mov	r3, r7
c7e14ab0:	e1a0000a 	mov	r0, sl
c7e14ab4:	e59a1010 	ldr	r1, [sl, #16]
		size_t block_offset = offset & (nand->erasesize - 1);
		size_t read_length;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14ab8:	0a00000b 	beq	c7e14aec <nand_read_skip_bad+0x138>
			printf ("Skipping bad block 0x%08llx\n",
c7e14abc:	e2613000 	rsb	r3, r1, #0	; 0x0
c7e14ac0:	e0060003 	and	r0, r6, r3
c7e14ac4:	e3a01000 	mov	r1, #0	; 0x0
c7e14ac8:	e1a02000 	mov	r2, r0
c7e14acc:	e1a03001 	mov	r3, r1
c7e14ad0:	e59f00b4 	ldr	r0, [pc, #180]	; c7e14b8c <nand_read_skip_bad+0x1d8>
c7e14ad4:	ebffcfdf 	bl	c7e08a58 <printf>
				offset & ~(nand->erasesize - 1));
			offset += nand->erasesize - block_offset;
c7e14ad8:	e59a3010 	ldr	r3, [sl, #16]
c7e14adc:	e0643003 	rsb	r3, r4, r3
c7e14ae0:	e0966003 	adds	r6, r6, r3
c7e14ae4:	e2a77000 	adc	r7, r7, #0	; 0x0
c7e14ae8:	ea00001c 	b	c7e14b60 <nand_read_skip_bad+0x1ac>
			continue;
		}

		if (left_to_read < (nand->erasesize - block_offset))
c7e14aec:	e0641001 	rsb	r1, r4, r1
			read_length = left_to_read;
c7e14af0:	e59d400c 	ldr	r4, [sp, #12]
c7e14af4:	e1540001 	cmp	r4, r1
c7e14af8:	952c4004 	strls	r4, [ip, #-4]!
c7e14afc:	852c1004 	strhi	r1, [ip, #-4]!
		else
			read_length = nand->erasesize - block_offset;

		rval = nand_read (nand, offset, &read_length, p_buffer);
c7e14b00:	e58dc000 	str	ip, [sp]
c7e14b04:	e58d9004 	str	r9, [sp, #4]
c7e14b08:	ebffff6d 	bl	c7e148c4 <nand_read>
		if (rval && rval != -EUCLEAN) {
c7e14b0c:	e3500000 	cmp	r0, #0	; 0x0
c7e14b10:	13700075 	cmnne	r0, #117	; 0x75
c7e14b14:	e1a04000 	mov	r4, r0
c7e14b18:	0a000009 	beq	c7e14b44 <nand_read_skip_bad+0x190>
			printf ("NAND read from offset %llx failed %d\n",
c7e14b1c:	e1a03007 	mov	r3, r7
c7e14b20:	e1a02006 	mov	r2, r6
c7e14b24:	e59f005c 	ldr	r0, [pc, #92]	; c7e14b88 <nand_read_skip_bad+0x1d4>
c7e14b28:	e58d4000 	str	r4, [sp]
c7e14b2c:	ebffcfc9 	bl	c7e08a58 <printf>
				offset, rval);
			*length -= left_to_read;
c7e14b30:	e59b3000 	ldr	r3, [fp]
c7e14b34:	e59d500c 	ldr	r5, [sp, #12]
c7e14b38:	e0653003 	rsb	r3, r5, r3
c7e14b3c:	e58b3000 	str	r3, [fp]
c7e14b40:	ea00000b 	b	c7e14b74 <nand_read_skip_bad+0x1c0>
			return rval;
		}

		left_to_read -= read_length;
c7e14b44:	e59d3014 	ldr	r3, [sp, #20]
c7e14b48:	e59de00c 	ldr	lr, [sp, #12]
		offset       += read_length;
c7e14b4c:	e0966003 	adds	r6, r6, r3
				offset, rval);
			*length -= left_to_read;
			return rval;
		}

		left_to_read -= read_length;
c7e14b50:	e063e00e 	rsb	lr, r3, lr
		offset       += read_length;
c7e14b54:	e2a77000 	adc	r7, r7, #0	; 0x0
		p_buffer     += read_length;
c7e14b58:	e0899003 	add	r9, r9, r3
				offset, rval);
			*length -= left_to_read;
			return rval;
		}

		left_to_read -= read_length;
c7e14b5c:	e58de00c 	str	lr, [sp, #12]
		printf ("NAND read from offset %llx failed %d\n",
			offset, rval);
		return rval;
	}

	while (left_to_read > 0) {
c7e14b60:	e59d100c 	ldr	r1, [sp, #12]
		size_t block_offset = offset & (nand->erasesize - 1);
		size_t read_length;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14b64:	e1a0000a 	mov	r0, sl
		printf ("NAND read from offset %llx failed %d\n",
			offset, rval);
		return rval;
	}

	while (left_to_read > 0) {
c7e14b68:	e3510000 	cmp	r1, #0	; 0x0
c7e14b6c:	1affffc2 	bne	c7e14a7c <nand_read_skip_bad+0xc8>
c7e14b70:	e3a04000 	mov	r4, #0	; 0x0
		offset       += read_length;
		p_buffer     += read_length;
	}

	return 0;
}
c7e14b74:	e1a00004 	mov	r0, r4
c7e14b78:	e28dd018 	add	sp, sp, #24	; 0x18
c7e14b7c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e14b80:	c7e337b4 	.word	0xc7e337b4
c7e14b84:	c7e337db 	.word	0xc7e337db
c7e14b88:	c7e33803 	.word	0xc7e33803
c7e14b8c:	c7e33829 	.word	0xc7e33829

c7e14b90 <nand_write_skip_bad>:
 * @param flags		flags modifying the behaviour of the write to NAND
 * @return		0 in case of success
 */
int nand_write_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
			u_char *buffer, int flags)
{
c7e14b90:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	 * However, starting at an unaligned offset makes the
	 * semantics of bad block skipping ambiguous (really,
	 * you should only start a block skipping access at a
	 * partition boundary).  So don't try to handle that.
	 */
	if ((offset & (nand->writesize - 1)) != 0) {
c7e14b94:	e5901014 	ldr	r1, [r0, #20]
 * @param flags		flags modifying the behaviour of the write to NAND
 * @return		0 in case of success
 */
int nand_write_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
			u_char *buffer, int flags)
{
c7e14b98:	e24dd020 	sub	sp, sp, #32	; 0x20
	 * However, starting at an unaligned offset makes the
	 * semantics of bad block skipping ambiguous (really,
	 * you should only start a block skipping access at a
	 * partition boundary).  So don't try to handle that.
	 */
	if ((offset & (nand->writesize - 1)) != 0) {
c7e14b9c:	e2411001 	sub	r1, r1, #1	; 0x1
c7e14ba0:	e0024001 	and	r4, r2, r1
c7e14ba4:	e3a05000 	mov	r5, #0	; 0x0
 */
int nand_write_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
			u_char *buffer, int flags)
{
	int rval = 0, blocksize;
	size_t left_to_write = *length;
c7e14ba8:	e59d1040 	ldr	r1, [sp, #64]
			return -EINVAL;
		}
	} else
#endif
	{
		blocksize = nand->erasesize;
c7e14bac:	e590c010 	ldr	ip, [r0, #16]
	 * However, starting at an unaligned offset makes the
	 * semantics of bad block skipping ambiguous (really,
	 * you should only start a block skipping access at a
	 * partition boundary).  So don't try to handle that.
	 */
	if ((offset & (nand->writesize - 1)) != 0) {
c7e14bb0:	e1944005 	orrs	r4, r4, r5
 * @param flags		flags modifying the behaviour of the write to NAND
 * @return		0 in case of success
 */
int nand_write_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
			u_char *buffer, int flags)
{
c7e14bb4:	e1a0a000 	mov	sl, r0
c7e14bb8:	e1a06002 	mov	r6, r2
c7e14bbc:	e1a07003 	mov	r7, r3
c7e14bc0:	e59db044 	ldr	fp, [sp, #68]
c7e14bc4:	e59d5048 	ldr	r5, [sp, #72]
	int rval = 0, blocksize;
	size_t left_to_write = *length;
c7e14bc8:	e5919000 	ldr	r9, [r1]
			return -EINVAL;
		}
	} else
#endif
	{
		blocksize = nand->erasesize;
c7e14bcc:	e58dc014 	str	ip, [sp, #20]
	 * However, starting at an unaligned offset makes the
	 * semantics of bad block skipping ambiguous (really,
	 * you should only start a block skipping access at a
	 * partition boundary).  So don't try to handle that.
	 */
	if ((offset & (nand->writesize - 1)) != 0) {
c7e14bd0:	0a000005 	beq	c7e14bec <nand_write_skip_bad+0x5c>
		printf ("Attempt to write non page aligned data\n");
c7e14bd4:	e59f0174 	ldr	r0, [pc, #372]	; c7e14d50 <nand_write_skip_bad+0x1c0>
c7e14bd8:	ebffcf9e 	bl	c7e08a58 <printf>
		*length = 0;
c7e14bdc:	e59d1040 	ldr	r1, [sp, #64]
c7e14be0:	e3a03000 	mov	r3, #0	; 0x0
c7e14be4:	e5813000 	str	r3, [r1]
c7e14be8:	ea000007 	b	c7e14c0c <nand_write_skip_bad+0x7c>
		return -EINVAL;
	}

	need_skip = check_skip_len(nand, offset, *length);
c7e14bec:	e58d9000 	str	r9, [sp]
c7e14bf0:	ebffff4d 	bl	c7e1492c <check_skip_len>
	if (need_skip < 0) {
c7e14bf4:	e3500000 	cmp	r0, #0	; 0x0
c7e14bf8:	aa000005 	bge	c7e14c14 <nand_write_skip_bad+0x84>
		printf ("Attempt to write outside the flash area\n");
c7e14bfc:	e59f0150 	ldr	r0, [pc, #336]	; c7e14d54 <nand_write_skip_bad+0x1c4>
c7e14c00:	ebffcf94 	bl	c7e08a58 <printf>
		*length = 0;
c7e14c04:	e59d2040 	ldr	r2, [sp, #64]
c7e14c08:	e5824000 	str	r4, [r2]
c7e14c0c:	e3e04015 	mvn	r4, #21	; 0x15
c7e14c10:	ea00004b 	b	c7e14d44 <nand_write_skip_bad+0x1b4>
		return -EINVAL;
	}

	if (!need_skip && !(flags & WITH_DROP_FFS)) {
c7e14c14:	1a000046 	bne	c7e14d34 <nand_write_skip_bad+0x1a4>
c7e14c18:	e2155002 	ands	r5, r5, #2	; 0x2
c7e14c1c:	1a000044 	bne	c7e14d34 <nand_write_skip_bad+0x1a4>
		rval = nand_write (nand, offset, length, buffer);
c7e14c20:	e59d4040 	ldr	r4, [sp, #64]
c7e14c24:	e1a0000a 	mov	r0, sl
c7e14c28:	e1a02006 	mov	r2, r6
c7e14c2c:	e1a03007 	mov	r3, r7
c7e14c30:	e88d0810 	stm	sp, {r4, fp}
c7e14c34:	ebffff2d 	bl	c7e148f0 <nand_write>
		if (rval == 0)
c7e14c38:	e2504000 	subs	r4, r0, #0	; 0x0
c7e14c3c:	0a000040 	beq	c7e14d44 <nand_write_skip_bad+0x1b4>
			return 0;

		*length = 0;
c7e14c40:	e59dc040 	ldr	ip, [sp, #64]
		printf ("NAND write to offset %llx failed %d\n",
c7e14c44:	e1a02006 	mov	r2, r6
	if (!need_skip && !(flags & WITH_DROP_FFS)) {
		rval = nand_write (nand, offset, length, buffer);
		if (rval == 0)
			return 0;

		*length = 0;
c7e14c48:	e58c5000 	str	r5, [ip]
		printf ("NAND write to offset %llx failed %d\n",
c7e14c4c:	e1a03007 	mov	r3, r7
c7e14c50:	e59f0100 	ldr	r0, [pc, #256]	; c7e14d58 <nand_write_skip_bad+0x1c8>
c7e14c54:	e58d4000 	str	r4, [sp]
c7e14c58:	ebffcf7e 	bl	c7e08a58 <printf>
c7e14c5c:	ea000038 	b	c7e14d44 <nand_write_skip_bad+0x1b4>
			offset, rval);
		return rval;
	}

	while (left_to_write > 0) {
		size_t block_offset = offset & (nand->erasesize - 1);
c7e14c60:	e59a1010 	ldr	r1, [sl, #16]
		size_t write_size, truncated_write_size;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14c64:	e3a05000 	mov	r5, #0	; 0x0
c7e14c68:	e2613000 	rsb	r3, r1, #0	; 0x0
c7e14c6c:	e0064003 	and	r4, r6, r3
			printf ("Skip bad block 0x%08llx\n",
				offset & ~(nand->erasesize - 1));
			offset += nand->erasesize - block_offset;
			continue;
c7e14c70:	e59dc014 	ldr	ip, [sp, #20]
			offset, rval);
		return rval;
	}

	while (left_to_write > 0) {
		size_t block_offset = offset & (nand->erasesize - 1);
c7e14c74:	e2411001 	sub	r1, r1, #1	; 0x1
c7e14c78:	e0011006 	and	r1, r1, r6
		size_t write_size, truncated_write_size;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14c7c:	e1a03005 	mov	r3, r5
c7e14c80:	e1a02004 	mov	r2, r4
			offset, rval);
		return rval;
	}

	while (left_to_write > 0) {
		size_t block_offset = offset & (nand->erasesize - 1);
c7e14c84:	e58d100c 	str	r1, [sp, #12]

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
			printf ("Skip bad block 0x%08llx\n",
				offset & ~(nand->erasesize - 1));
			offset += nand->erasesize - block_offset;
			continue;
c7e14c88:	e061500c 	rsb	r5, r1, ip
		size_t block_offset = offset & (nand->erasesize - 1);
		size_t write_size, truncated_write_size;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14c8c:	ebffff22 	bl	c7e1491c <nand_block_isbad>
c7e14c90:	e3500000 	cmp	r0, #0	; 0x0
			}
		}
		else
#endif
		{
			truncated_write_size = write_size;
c7e14c94:	e28d1020 	add	r1, sp, #32	; 0x20
			if (flags & WITH_DROP_FFS)
				truncated_write_size = drop_ffs(nand, p_buffer,
						&write_size);
#endif

			rval = nand_write(nand, offset, &truncated_write_size,
c7e14c98:	e1a02006 	mov	r2, r6
c7e14c9c:	e1a03007 	mov	r3, r7
c7e14ca0:	e1a0000a 	mov	r0, sl
		size_t block_offset = offset & (nand->erasesize - 1);
		size_t write_size, truncated_write_size;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14ca4:	0a00000d 	beq	c7e14ce0 <nand_write_skip_bad+0x150>
			printf ("Skip bad block 0x%08llx\n",
c7e14ca8:	e59a3010 	ldr	r3, [sl, #16]
c7e14cac:	e3a05000 	mov	r5, #0	; 0x0
c7e14cb0:	e2633000 	rsb	r3, r3, #0	; 0x0
c7e14cb4:	e0064003 	and	r4, r6, r3
c7e14cb8:	e59f009c 	ldr	r0, [pc, #156]	; c7e14d5c <nand_write_skip_bad+0x1cc>
c7e14cbc:	e1a03005 	mov	r3, r5
c7e14cc0:	e1a02004 	mov	r2, r4
c7e14cc4:	ebffcf63 	bl	c7e08a58 <printf>
				offset & ~(nand->erasesize - 1));
			offset += nand->erasesize - block_offset;
c7e14cc8:	e59a3010 	ldr	r3, [sl, #16]
c7e14ccc:	e59d500c 	ldr	r5, [sp, #12]
c7e14cd0:	e0653003 	rsb	r3, r5, r3
c7e14cd4:	e0966003 	adds	r6, r6, r3
c7e14cd8:	e2a77000 	adc	r7, r7, #0	; 0x0
c7e14cdc:	ea000014 	b	c7e14d34 <nand_write_skip_bad+0x1a4>
			continue;
c7e14ce0:	e1550009 	cmp	r5, r9
c7e14ce4:	21a05009 	movcs	r5, r9
			}
		}
		else
#endif
		{
			truncated_write_size = write_size;
c7e14ce8:	e5215004 	str	r5, [r1, #-4]!
			if (flags & WITH_DROP_FFS)
				truncated_write_size = drop_ffs(nand, p_buffer,
						&write_size);
#endif

			rval = nand_write(nand, offset, &truncated_write_size,
c7e14cec:	e88d0802 	stm	sp, {r1, fp}
c7e14cf0:	ebfffefe 	bl	c7e148f0 <nand_write>
					p_buffer);
			offset += write_size;
c7e14cf4:	e0966005 	adds	r6, r6, r5
c7e14cf8:	e2a77000 	adc	r7, r7, #0	; 0x0
			p_buffer += write_size;
		}

		if (rval != 0) {
c7e14cfc:	e2504000 	subs	r4, r0, #0	; 0x0
#endif

			rval = nand_write(nand, offset, &truncated_write_size,
					p_buffer);
			offset += write_size;
			p_buffer += write_size;
c7e14d00:	e08bb005 	add	fp, fp, r5
		}

		if (rval != 0) {
c7e14d04:	0a000009 	beq	c7e14d30 <nand_write_skip_bad+0x1a0>
			printf ("NAND write to offset %llx failed %d\n",
c7e14d08:	e1a03007 	mov	r3, r7
c7e14d0c:	e1a02006 	mov	r2, r6
c7e14d10:	e59f0040 	ldr	r0, [pc, #64]	; c7e14d58 <nand_write_skip_bad+0x1c8>
c7e14d14:	e58d4000 	str	r4, [sp]
c7e14d18:	ebffcf4e 	bl	c7e08a58 <printf>
				offset, rval);
			*length -= left_to_write;
c7e14d1c:	e59dc040 	ldr	ip, [sp, #64]
c7e14d20:	e59c3000 	ldr	r3, [ip]
c7e14d24:	e0693003 	rsb	r3, r9, r3
c7e14d28:	e58c3000 	str	r3, [ip]
c7e14d2c:	ea000004 	b	c7e14d44 <nand_write_skip_bad+0x1b4>
			return rval;
		}

		left_to_write -= write_size;
c7e14d30:	e0659009 	rsb	r9, r5, r9
		printf ("NAND write to offset %llx failed %d\n",
			offset, rval);
		return rval;
	}

	while (left_to_write > 0) {
c7e14d34:	e3590000 	cmp	r9, #0	; 0x0
		size_t block_offset = offset & (nand->erasesize - 1);
		size_t write_size, truncated_write_size;

		WATCHDOG_RESET ();

		if (nand_block_isbad (nand, offset & ~(nand->erasesize - 1))) {
c7e14d38:	e1a0000a 	mov	r0, sl
		printf ("NAND write to offset %llx failed %d\n",
			offset, rval);
		return rval;
	}

	while (left_to_write > 0) {
c7e14d3c:	1affffc7 	bne	c7e14c60 <nand_write_skip_bad+0xd0>
c7e14d40:	e1a04009 	mov	r4, r9

		left_to_write -= write_size;
	}

	return 0;
}
c7e14d44:	e1a00004 	mov	r0, r4
c7e14d48:	e28dd020 	add	sp, sp, #32	; 0x20
c7e14d4c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e14d50:	c7e33846 	.word	0xc7e33846
c7e14d54:	c7e3386e 	.word	0xc7e3386e
c7e14d58:	c7e33897 	.word	0xc7e33897
c7e14d5c:	c7e338bc 	.word	0xc7e338bc

c7e14d60 <nand_erase_opts>:
 *
 * This code is ported from flash_eraseall.c from Linux mtd utils by
 * Arcom Control System Ltd.
 */
int nand_erase_opts(nand_info_t *meminfo, const nand_erase_options_t *opts)
{
c7e14d60:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int percent_complete = -1;
	const char *mtd_device = meminfo->name;
	struct mtd_oob_ops oob_opts;
	struct nand_chip *chip = meminfo->priv;

	if ((opts->offset & (meminfo->writesize - 1)) != 0) {
c7e14d64:	e2814008 	add	r4, r1, #8	; 0x8
c7e14d68:	e8940018 	ldm	r4, {r3, r4}
c7e14d6c:	e5902014 	ldr	r2, [r0, #20]
 *
 * This code is ported from flash_eraseall.c from Linux mtd utils by
 * Arcom Control System Ltd.
 */
int nand_erase_opts(nand_info_t *meminfo, const nand_erase_options_t *opts)
{
c7e14d70:	e1a06001 	mov	r6, r1
	int percent_complete = -1;
	const char *mtd_device = meminfo->name;
	struct mtd_oob_ops oob_opts;
	struct nand_chip *chip = meminfo->priv;

	if ((opts->offset & (meminfo->writesize - 1)) != 0) {
c7e14d74:	e2422001 	sub	r2, r2, #1	; 0x1
c7e14d78:	e0033002 	and	r3, r3, r2
c7e14d7c:	e3a04000 	mov	r4, #0	; 0x0
	erase_info_t erase;
	unsigned long erase_length, erased_length; /* in blocks */
	int bbtest = 1;
	int result;
	int percent_complete = -1;
	const char *mtd_device = meminfo->name;
c7e14d80:	e5901020 	ldr	r1, [r0, #32]
	struct mtd_oob_ops oob_opts;
	struct nand_chip *chip = meminfo->priv;
c7e14d84:	e5902094 	ldr	r2, [r0, #148]
 *
 * This code is ported from flash_eraseall.c from Linux mtd utils by
 * Arcom Control System Ltd.
 */
int nand_erase_opts(nand_info_t *meminfo, const nand_erase_options_t *opts)
{
c7e14d88:	e24dd098 	sub	sp, sp, #152	; 0x98
	int percent_complete = -1;
	const char *mtd_device = meminfo->name;
	struct mtd_oob_ops oob_opts;
	struct nand_chip *chip = meminfo->priv;

	if ((opts->offset & (meminfo->writesize - 1)) != 0) {
c7e14d8c:	e1937004 	orrs	r7, r3, r4
 *
 * This code is ported from flash_eraseall.c from Linux mtd utils by
 * Arcom Control System Ltd.
 */
int nand_erase_opts(nand_info_t *meminfo, const nand_erase_options_t *opts)
{
c7e14d90:	e1a09000 	mov	r9, r0
	erase_info_t erase;
	unsigned long erase_length, erased_length; /* in blocks */
	int bbtest = 1;
	int result;
	int percent_complete = -1;
	const char *mtd_device = meminfo->name;
c7e14d94:	e58d1014 	str	r1, [sp, #20]
	struct mtd_oob_ops oob_opts;
	struct nand_chip *chip = meminfo->priv;
c7e14d98:	e58d200c 	str	r2, [sp, #12]

	if ((opts->offset & (meminfo->writesize - 1)) != 0) {
c7e14d9c:	0a000002 	beq	c7e14dac <nand_erase_opts+0x4c>
		printf("Attempt to erase non page aligned data\n");
c7e14da0:	e59f02f0 	ldr	r0, [pc, #752]	; c7e15098 <nand_erase_opts+0x338>
c7e14da4:	ebffcf2b 	bl	c7e08a58 <printf>
c7e14da8:	ea000056 	b	c7e14f08 <nand_erase_opts+0x1a8>
		return -1;
	}

	memset(&erase, 0, sizeof(erase));
c7e14dac:	e1a01007 	mov	r1, r7
c7e14db0:	e3a02048 	mov	r2, #72	; 0x48
c7e14db4:	e28d0018 	add	r0, sp, #24	; 0x18
c7e14db8:	eb003775 	bl	c7e22b94 <memset>
	memset(&oob_opts, 0, sizeof(oob_opts));
c7e14dbc:	e1a01007 	mov	r1, r7
c7e14dc0:	e3a02020 	mov	r2, #32	; 0x20
c7e14dc4:	e28d0064 	add	r0, sp, #100	; 0x64
c7e14dc8:	eb003771 	bl	c7e22b94 <memset>

	erase.mtd = meminfo;
	erase.len  = meminfo->erasesize;
	erase.addr = opts->offset;
	erase_length = lldiv(opts->length + meminfo->erasesize - 1,
c7e14dcc:	e8960018 	ldm	r6, {r3, r4}
	memset(&erase, 0, sizeof(erase));
	memset(&oob_opts, 0, sizeof(oob_opts));

	erase.mtd = meminfo;
	erase.len  = meminfo->erasesize;
	erase.addr = opts->offset;
c7e14dd0:	e2862008 	add	r2, r6, #8	; 0x8
c7e14dd4:	e8920006 	ldm	r2, {r1, r2}

	memset(&erase, 0, sizeof(erase));
	memset(&oob_opts, 0, sizeof(oob_opts));

	erase.mtd = meminfo;
	erase.len  = meminfo->erasesize;
c7e14dd8:	e5990010 	ldr	r0, [r9, #16]
	erase.addr = opts->offset;
c7e14ddc:	e58d1020 	str	r1, [sp, #32]
c7e14de0:	e58d2024 	str	r2, [sp, #36]
	erase_length = lldiv(opts->length + meminfo->erasesize - 1,
c7e14de4:	e3e01000 	mvn	r1, #0	; 0x0
c7e14de8:	e0933001 	adds	r3, r3, r1
c7e14dec:	e3e02000 	mvn	r2, #0	; 0x0
c7e14df0:	e0a44002 	adc	r4, r4, r2
c7e14df4:	e093a000 	adds	sl, r3, r0
c7e14df8:	e2a4b000 	adc	fp, r4, #0	; 0x0
c7e14dfc:	e35b0000 	cmp	fp, #0	; 0x0

	memset(&erase, 0, sizeof(erase));
	memset(&oob_opts, 0, sizeof(oob_opts));

	erase.mtd = meminfo;
	erase.len  = meminfo->erasesize;
c7e14e00:	e58d702c 	str	r7, [sp, #44]
	}

	memset(&erase, 0, sizeof(erase));
	memset(&oob_opts, 0, sizeof(oob_opts));

	erase.mtd = meminfo;
c7e14e04:	e58d9018 	str	r9, [sp, #24]
	erase.len  = meminfo->erasesize;
c7e14e08:	e58d0028 	str	r0, [sp, #40]
/* Wrapper for do_div(). Doesn't modify dividend and returns
 * the result, not reminder.
 */
static inline uint64_t lldiv(uint64_t dividend, uint32_t divisor)
{
	uint64_t __res = dividend;
c7e14e0c:	e58da090 	str	sl, [sp, #144]
c7e14e10:	e58db094 	str	fp, [sp, #148]
	do_div(__res, divisor);
c7e14e14:	1a000005 	bne	c7e14e30 <nand_erase_opts+0xd0>
c7e14e18:	e1a01000 	mov	r1, r0
c7e14e1c:	e1a0000a 	mov	r0, sl
c7e14e20:	eb0055b8 	bl	c7e2a508 <__udivsi3>
c7e14e24:	e58db094 	str	fp, [sp, #148]
c7e14e28:	e58d0090 	str	r0, [sp, #144]
c7e14e2c:	ea000002 	b	c7e14e3c <nand_erase_opts+0xdc>
c7e14e30:	e1a01000 	mov	r1, r0
c7e14e34:	e28d0090 	add	r0, sp, #144	; 0x90
c7e14e38:	eb003081 	bl	c7e21044 <__div64_32>
	erase.addr = opts->offset;
	erase_length = lldiv(opts->length + meminfo->erasesize - 1,
			     meminfo->erasesize);

	cleanmarker.magic = cpu_to_je16 (JFFS2_MAGIC_BITMASK);
c7e14e3c:	e59f3258 	ldr	r3, [pc, #600]	; c7e1509c <nand_erase_opts+0x33c>

	/* scrub option allows to erase badblock. To prevent internal
	 * check from erase() method, set block check method to dummy
	 * and disable bad block table while erasing.
	 */
	if (opts->scrub) {
c7e14e40:	e5962018 	ldr	r2, [r6, #24]
	erase.len  = meminfo->erasesize;
	erase.addr = opts->offset;
	erase_length = lldiv(opts->length + meminfo->erasesize - 1,
			     meminfo->erasesize);

	cleanmarker.magic = cpu_to_je16 (JFFS2_MAGIC_BITMASK);
c7e14e44:	e1cd38b4 	strh	r3, [sp, #132]
	cleanmarker.nodetype = cpu_to_je16 (JFFS2_NODETYPE_CLEANMARKER);
c7e14e48:	e59f3250 	ldr	r3, [pc, #592]	; c7e150a0 <nand_erase_opts+0x340>

	/* scrub option allows to erase badblock. To prevent internal
	 * check from erase() method, set block check method to dummy
	 * and disable bad block table while erasing.
	 */
	if (opts->scrub) {
c7e14e4c:	e3520000 	cmp	r2, #0	; 0x0
	erase.addr = opts->offset;
	erase_length = lldiv(opts->length + meminfo->erasesize - 1,
			     meminfo->erasesize);

	cleanmarker.magic = cpu_to_je16 (JFFS2_MAGIC_BITMASK);
	cleanmarker.nodetype = cpu_to_je16 (JFFS2_NODETYPE_CLEANMARKER);
c7e14e50:	e1cd38b6 	strh	r3, [sp, #134]
	cleanmarker.totlen = cpu_to_je32(8);
c7e14e54:	e3a03008 	mov	r3, #8	; 0x8
c7e14e58:	e58d3088 	str	r3, [sp, #136]
	memset(&oob_opts, 0, sizeof(oob_opts));

	erase.mtd = meminfo;
	erase.len  = meminfo->erasesize;
	erase.addr = opts->offset;
	erase_length = lldiv(opts->length + meminfo->erasesize - 1,
c7e14e5c:	e59db090 	ldr	fp, [sp, #144]

	/* scrub option allows to erase badblock. To prevent internal
	 * check from erase() method, set block check method to dummy
	 * and disable bad block table while erasing.
	 */
	if (opts->scrub) {
c7e14e60:	0a000008 	beq	c7e14e88 <nand_erase_opts+0x128>
		erase.scrub = opts->scrub;
		/*
		 * We don't need the bad block table anymore...
		 * after scrub, there are no bad blocks left!
		 */
		if (chip->bbt) {
c7e14e64:	e59d300c 	ldr	r3, [sp, #12]
	/* scrub option allows to erase badblock. To prevent internal
	 * check from erase() method, set block check method to dummy
	 * and disable bad block table while erasing.
	 */
	if (opts->scrub) {
		erase.scrub = opts->scrub;
c7e14e68:	e58d2058 	str	r2, [sp, #88]
		/*
		 * We don't need the bad block table anymore...
		 * after scrub, there are no bad blocks left!
		 */
		if (chip->bbt) {
c7e14e6c:	e5930110 	ldr	r0, [r3, #272]
c7e14e70:	e3500000 	cmp	r0, #0	; 0x0
c7e14e74:	0a000000 	beq	c7e14e7c <nand_erase_opts+0x11c>
			kfree(chip->bbt);
c7e14e78:	ebffd038 	bl	c7e08f60 <free>
		}
		chip->bbt = NULL;
c7e14e7c:	e59d400c 	ldr	r4, [sp, #12]
c7e14e80:	e3a03000 	mov	r3, #0	; 0x0
c7e14e84:	e5843110 	str	r3, [r4, #272]
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = (uint8_t *)&cleanmarker;
			chip->ops.ooboffs = 0;
			chip->ops.mode = MTD_OOB_AUTO;

			result = meminfo->write_oob(meminfo,
c7e14e88:	e59d500c 	ldr	r5, [sp, #12]
c7e14e8c:	e3a07000 	mov	r7, #0	; 0x0
c7e14e90:	e28550f0 	add	r5, r5, #240	; 0xf0
c7e14e94:	e58d5010 	str	r5, [sp, #16]
c7e14e98:	e3e0a000 	mvn	sl, #0	; 0x0
c7e14e9c:	ea00006c 	b	c7e15054 <nand_erase_opts+0x2f4>
	     erased_length < erase_length;
	     erase.addr += meminfo->erasesize) {

		WATCHDOG_RESET ();

		if (!opts->scrub && bbtest) {
c7e14ea0:	e5963018 	ldr	r3, [r6, #24]
c7e14ea4:	e3530000 	cmp	r3, #0	; 0x0
c7e14ea8:	1a000018 	bne	c7e14f10 <nand_erase_opts+0x1b0>
			int ret = meminfo->block_isbad(meminfo, erase.addr);
c7e14eac:	e1a00009 	mov	r0, r9
c7e14eb0:	e28d3020 	add	r3, sp, #32	; 0x20
c7e14eb4:	e893000c 	ldm	r3, {r2, r3}
c7e14eb8:	e1a0e00f 	mov	lr, pc
c7e14ebc:	e599f078 	ldr	pc, [r9, #120]
			if (ret > 0) {
c7e14ec0:	e3500000 	cmp	r0, #0	; 0x0
c7e14ec4:	da00000a 	ble	c7e14ef4 <nand_erase_opts+0x194>
				if (!opts->quiet)
c7e14ec8:	e5963010 	ldr	r3, [r6, #16]
c7e14ecc:	e3530000 	cmp	r3, #0	; 0x0
c7e14ed0:	1a000003 	bne	c7e14ee4 <nand_erase_opts+0x184>
					printf("\rSkipping bad block at  "
c7e14ed4:	e59f01c8 	ldr	r0, [pc, #456]	; c7e150a4 <nand_erase_opts+0x344>
c7e14ed8:	e28d3020 	add	r3, sp, #32	; 0x20
c7e14edc:	e893000c 	ldm	r3, {r2, r3}
c7e14ee0:	ebffcedc 	bl	c7e08a58 <printf>
					       "0x%08llx                 "
					       "                         \n",
					       erase.addr);

				if (!opts->spread)
c7e14ee4:	e596301c 	ldr	r3, [r6, #28]
c7e14ee8:	e3530000 	cmp	r3, #0	; 0x0
					erased_length++;
c7e14eec:	02877001 	addeq	r7, r7, #1	; 0x1
c7e14ef0:	ea000050 	b	c7e15038 <nand_erase_opts+0x2d8>

				continue;

			} else if (ret < 0) {
c7e14ef4:	0a000005 	beq	c7e14f10 <nand_erase_opts+0x1b0>
				printf("\n%s: MTD get bad block failed: %d\n",
c7e14ef8:	e1a02000 	mov	r2, r0
c7e14efc:	e59d1014 	ldr	r1, [sp, #20]
c7e14f00:	e59f01a0 	ldr	r0, [pc, #416]	; c7e150a8 <nand_erase_opts+0x348>
c7e14f04:	ebffced3 	bl	c7e08a58 <printf>
c7e14f08:	e3e00000 	mvn	r0, #0	; 0x0
c7e14f0c:	ea00005f 	b	c7e15090 <nand_erase_opts+0x330>
			}
		}

		erased_length++;

		result = meminfo->erase(meminfo, &erase);
c7e14f10:	e1a00009 	mov	r0, r9
c7e14f14:	e28d1018 	add	r1, sp, #24	; 0x18
c7e14f18:	e1a0e00f 	mov	lr, pc
c7e14f1c:	e599f034 	ldr	pc, [r9, #52]
		if (result != 0) {
c7e14f20:	e3500000 	cmp	r0, #0	; 0x0
				       ret);
				return -1;
			}
		}

		erased_length++;
c7e14f24:	e2877001 	add	r7, r7, #1	; 0x1

		result = meminfo->erase(meminfo, &erase);
		if (result != 0) {
			printf("\n%s: MTD Erase failure: %d\n",
c7e14f28:	11a02000 	movne	r2, r0
c7e14f2c:	159d1014 	ldrne	r1, [sp, #20]
c7e14f30:	159f0174 	ldrne	r0, [pc, #372]	; c7e150ac <nand_erase_opts+0x34c>
c7e14f34:	1a00001b 	bne	c7e14fa8 <nand_erase_opts+0x248>
			       mtd_device, result);
			continue;
		}

		/* format for JFFS2 ? */
		if (opts->jffs2 && chip->ecc.layout->oobavail >= 8) {
c7e14f38:	e5963014 	ldr	r3, [r6, #20]
c7e14f3c:	e3530000 	cmp	r3, #0	; 0x0
c7e14f40:	0a00001a 	beq	c7e14fb0 <nand_erase_opts+0x250>
c7e14f44:	e59d100c 	ldr	r1, [sp, #12]
c7e14f48:	e59130b8 	ldr	r3, [r1, #184]
c7e14f4c:	e5933204 	ldr	r3, [r3, #516]
c7e14f50:	e3530007 	cmp	r3, #7	; 0x7
c7e14f54:	9a000015 	bls	c7e14fb0 <nand_erase_opts+0x250>
			chip->ops.ooblen = 8;
c7e14f58:	e3a03008 	mov	r3, #8	; 0x8
c7e14f5c:	e58130fc 	str	r3, [r1, #252]
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = (uint8_t *)&cleanmarker;
			chip->ops.ooboffs = 0;
			chip->ops.mode = MTD_OOB_AUTO;

			result = meminfo->write_oob(meminfo,
c7e14f60:	e59d2010 	ldr	r2, [sp, #16]

		/* format for JFFS2 ? */
		if (opts->jffs2 && chip->ecc.layout->oobavail >= 8) {
			chip->ops.ooblen = 8;
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = (uint8_t *)&cleanmarker;
c7e14f64:	e28d3084 	add	r3, sp, #132	; 0x84
c7e14f68:	e581310c 	str	r3, [r1, #268]
			chip->ops.ooboffs = 0;
			chip->ops.mode = MTD_OOB_AUTO;
c7e14f6c:	e3a03001 	mov	r3, #1	; 0x1
		/* format for JFFS2 ? */
		if (opts->jffs2 && chip->ecc.layout->oobavail >= 8) {
			chip->ops.ooblen = 8;
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = (uint8_t *)&cleanmarker;
			chip->ops.ooboffs = 0;
c7e14f70:	e5810104 	str	r0, [r1, #260]
			chip->ops.mode = MTD_OOB_AUTO;
c7e14f74:	e58130f0 	str	r3, [r1, #240]
		}

		/* format for JFFS2 ? */
		if (opts->jffs2 && chip->ecc.layout->oobavail >= 8) {
			chip->ops.ooblen = 8;
			chip->ops.datbuf = NULL;
c7e14f78:	e5810108 	str	r0, [r1, #264]
			chip->ops.oobbuf = (uint8_t *)&cleanmarker;
			chip->ops.ooboffs = 0;
			chip->ops.mode = MTD_OOB_AUTO;

			result = meminfo->write_oob(meminfo,
c7e14f7c:	e58d2000 	str	r2, [sp]
c7e14f80:	e1a00009 	mov	r0, r9
c7e14f84:	e28d3020 	add	r3, sp, #32	; 0x20
c7e14f88:	e893000c 	ldm	r3, {r2, r3}
c7e14f8c:	e1a0e00f 	mov	lr, pc
c7e14f90:	e599f050 	ldr	pc, [r9, #80]
			                            erase.addr,
			                            &chip->ops);
			if (result != 0) {
c7e14f94:	e3500000 	cmp	r0, #0	; 0x0
c7e14f98:	0a000004 	beq	c7e14fb0 <nand_erase_opts+0x250>
				printf("\n%s: MTD writeoob failure: %d\n",
c7e14f9c:	e1a02000 	mov	r2, r0
c7e14fa0:	e59d1014 	ldr	r1, [sp, #20]
c7e14fa4:	e59f0104 	ldr	r0, [pc, #260]	; c7e150b0 <nand_erase_opts+0x350>
c7e14fa8:	ebffceaa 	bl	c7e08a58 <printf>
c7e14fac:	ea000021 	b	c7e15038 <nand_erase_opts+0x2d8>
				       mtd_device, result);
				continue;
			}
		}

		if (!opts->quiet) {
c7e14fb0:	e5963010 	ldr	r3, [r6, #16]
c7e14fb4:	e3530000 	cmp	r3, #0	; 0x0
c7e14fb8:	1a00001e 	bne	c7e15038 <nand_erase_opts+0x2d8>
			unsigned long long n = erased_length * 100ULL;
c7e14fbc:	e2833064 	add	r3, r3, #100	; 0x64
c7e14fc0:	e0854397 	umull	r4, r5, r7, r3
			int percent;

			do_div(n, erase_length);
c7e14fc4:	e3550000 	cmp	r5, #0	; 0x0
				continue;
			}
		}

		if (!opts->quiet) {
			unsigned long long n = erased_length * 100ULL;
c7e14fc8:	e58d4090 	str	r4, [sp, #144]
c7e14fcc:	e58d5094 	str	r5, [sp, #148]
			int percent;

			do_div(n, erase_length);
c7e14fd0:	1a000005 	bne	c7e14fec <nand_erase_opts+0x28c>
c7e14fd4:	e1a00004 	mov	r0, r4
c7e14fd8:	e1a0100b 	mov	r1, fp
c7e14fdc:	eb005549 	bl	c7e2a508 <__udivsi3>
c7e14fe0:	e58d5094 	str	r5, [sp, #148]
c7e14fe4:	e58d0090 	str	r0, [sp, #144]
c7e14fe8:	ea000002 	b	c7e14ff8 <nand_erase_opts+0x298>
c7e14fec:	e28d0090 	add	r0, sp, #144	; 0x90
c7e14ff0:	e1a0100b 	mov	r1, fp
c7e14ff4:	eb003012 	bl	c7e21044 <__div64_32>
			percent = (int)n;
c7e14ff8:	e59d4090 	ldr	r4, [sp, #144]

			/* output progress message only at whole percent
			 * steps to reduce the number of messages printed
			 * on (slow) serial consoles
			 */
			if (percent != percent_complete) {
c7e14ffc:	e154000a 	cmp	r4, sl
c7e15000:	0a00000c 	beq	c7e15038 <nand_erase_opts+0x2d8>
				percent_complete = percent;

				printf("\rErasing at 0x%llx -- %3d%% complete.",
c7e15004:	e28d3020 	add	r3, sp, #32	; 0x20
c7e15008:	e893000c 	ldm	r3, {r2, r3}
c7e1500c:	e59f00a0 	ldr	r0, [pc, #160]	; c7e150b4 <nand_erase_opts+0x354>
c7e15010:	e58d4000 	str	r4, [sp]
c7e15014:	ebffce8f 	bl	c7e08a58 <printf>
				       erase.addr, percent);

				if (opts->jffs2 && result == 0)
c7e15018:	e5963014 	ldr	r3, [r6, #20]
c7e1501c:	e3530000 	cmp	r3, #0	; 0x0
c7e15020:	0a000003 	beq	c7e15034 <nand_erase_opts+0x2d4>
					printf(" Cleanmarker written at 0x%llx.",
c7e15024:	e59f008c 	ldr	r0, [pc, #140]	; c7e150b8 <nand_erase_opts+0x358>
c7e15028:	e28d3020 	add	r3, sp, #32	; 0x20
c7e1502c:	e893000c 	ldm	r3, {r2, r3}
c7e15030:	ebffce88 	bl	c7e08a58 <printf>
c7e15034:	e1a0a004 	mov	sl, r4
		chip->bbt = NULL;
	}

	for (erased_length = 0;
	     erased_length < erase_length;
	     erase.addr += meminfo->erasesize) {
c7e15038:	e5993010 	ldr	r3, [r9, #16]
c7e1503c:	e28d2020 	add	r2, sp, #32	; 0x20
c7e15040:	e8920006 	ldm	r2, {r1, r2}
c7e15044:	e0914003 	adds	r4, r1, r3
c7e15048:	e2a25000 	adc	r5, r2, #0	; 0x0
c7e1504c:	e58d4020 	str	r4, [sp, #32]
c7e15050:	e58d5024 	str	r5, [sp, #36]
		}
		chip->bbt = NULL;
	}

	for (erased_length = 0;
	     erased_length < erase_length;
c7e15054:	e157000b 	cmp	r7, fp
c7e15058:	3affff90 	bcc	c7e14ea0 <nand_erase_opts+0x140>
					printf(" Cleanmarker written at 0x%llx.",
					       erase.addr);
			}
		}
	}
	if (!opts->quiet)
c7e1505c:	e5963010 	ldr	r3, [r6, #16]
c7e15060:	e3530000 	cmp	r3, #0	; 0x0
c7e15064:	1a000001 	bne	c7e15070 <nand_erase_opts+0x310>
		printf("\n");
c7e15068:	e59f004c 	ldr	r0, [pc, #76]	; c7e150bc <nand_erase_opts+0x35c>
c7e1506c:	ebffce79 	bl	c7e08a58 <printf>

	if (opts->scrub)
c7e15070:	e5960018 	ldr	r0, [r6, #24]
c7e15074:	e3500000 	cmp	r0, #0	; 0x0
c7e15078:	0a000004 	beq	c7e15090 <nand_erase_opts+0x330>
		chip->scan_bbt(meminfo);
c7e1507c:	e1a00009 	mov	r0, r9
c7e15080:	e59d200c 	ldr	r2, [sp, #12]
c7e15084:	e1a0e00f 	mov	lr, pc
c7e15088:	e592f040 	ldr	pc, [r2, #64]
c7e1508c:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e15090:	e28dd098 	add	sp, sp, #152	; 0x98
c7e15094:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e15098:	c7e338d5 	.word	0xc7e338d5
c7e1509c:	00001985 	.word	0x00001985
c7e150a0:	00002003 	.word	0x00002003
c7e150a4:	c7e338fd 	.word	0xc7e338fd
c7e150a8:	c7e33949 	.word	0xc7e33949
c7e150ac:	c7e3396c 	.word	0xc7e3396c
c7e150b0:	c7e33988 	.word	0xc7e33988
c7e150b4:	c7e339a7 	.word	0xc7e339a7
c7e150b8:	c7e339cd 	.word	0xc7e339cd
c7e150bc:	c7e31f94 	.word	0xc7e31f94

c7e150c0 <nand_calculate_ecc>:
 * @dat:	raw data
 * @ecc_code:	buffer for ECC
 */
int nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
		       u_char *ecc_code)
{
c7e150c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
c7e150c4:	e3a05000 	mov	r5, #0	; 0x0
c7e150c8:	e1a07001 	mov	r7, r1
c7e150cc:	e1a06002 	mov	r6, r2
c7e150d0:	e1a04005 	mov	r4, r5
c7e150d4:	e1a0c005 	mov	ip, r5
c7e150d8:	e1a00005 	mov	r0, r5
	reg1 = reg2 = reg3 = 0;

	/* Build up column parity */
	for(i = 0; i < 256; i++) {
		/* Get CP0 - CP5 from table */
		idx = nand_ecc_precalc_table[*dat++];
c7e150dc:	e7d72000 	ldrb	r2, [r7, r0]
c7e150e0:	e59f30cc 	ldr	r3, [pc, #204]	; c7e151b4 <nand_calculate_ecc+0xf4>
		reg1 ^= (idx & 0x3f);

		/* All bit XOR = 1 ? */
		if (idx & 0x40) {
			reg3 ^= (uint8_t) i;
			reg2 ^= ~((uint8_t) i);
c7e150e4:	e1e01000 	mvn	r1, r0
	reg1 = reg2 = reg3 = 0;

	/* Build up column parity */
	for(i = 0; i < 256; i++) {
		/* Get CP0 - CP5 from table */
		idx = nand_ecc_precalc_table[*dat++];
c7e150e8:	e7d33002 	ldrb	r3, [r3, r2]
		reg1 ^= (idx & 0x3f);

		/* All bit XOR = 1 ? */
		if (idx & 0x40) {
			reg3 ^= (uint8_t) i;
			reg2 ^= ~((uint8_t) i);
c7e150ec:	e0211004 	eor	r1, r1, r4
		/* Get CP0 - CP5 from table */
		idx = nand_ecc_precalc_table[*dat++];
		reg1 ^= (idx & 0x3f);

		/* All bit XOR = 1 ? */
		if (idx & 0x40) {
c7e150f0:	e3130040 	tst	r3, #64	; 0x40
			reg3 ^= (uint8_t) i;
c7e150f4:	e02c2000 	eor	r2, ip, r0

	/* Initialize variables */
	reg1 = reg2 = reg3 = 0;

	/* Build up column parity */
	for(i = 0; i < 256; i++) {
c7e150f8:	e2800001 	add	r0, r0, #1	; 0x1
		/* Get CP0 - CP5 from table */
		idx = nand_ecc_precalc_table[*dat++];
		reg1 ^= (idx & 0x3f);
c7e150fc:	e203303f 	and	r3, r3, #63	; 0x3f

		/* All bit XOR = 1 ? */
		if (idx & 0x40) {
			reg3 ^= (uint8_t) i;
c7e15100:	1202c0ff 	andne	ip, r2, #255	; 0xff
			reg2 ^= ~((uint8_t) i);
c7e15104:	120140ff 	andne	r4, r1, #255	; 0xff

	/* Initialize variables */
	reg1 = reg2 = reg3 = 0;

	/* Build up column parity */
	for(i = 0; i < 256; i++) {
c7e15108:	e3500c01 	cmp	r0, #256	; 0x100
		/* Get CP0 - CP5 from table */
		idx = nand_ecc_precalc_table[*dat++];
		reg1 ^= (idx & 0x3f);
c7e1510c:	e0255003 	eor	r5, r5, r3

	/* Initialize variables */
	reg1 = reg2 = reg3 = 0;

	/* Build up column parity */
	for(i = 0; i < 256; i++) {
c7e15110:	1afffff1 	bne	c7e150dc <nand_calculate_ecc+0x1c>
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15114:	e20c3040 	and	r3, ip, #64	; 0x40
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15118:	e20c0008 	and	r0, ip, #8	; 0x8
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e1511c:	e2041080 	and	r1, r4, #128	; 0x80
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15120:	e2042001 	and	r2, r4, #1	; 0x1
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15124:	e1811003 	orr	r1, r1, r3
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15128:	e1822200 	orr	r2, r2, r0, lsl #4
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e1512c:	e3cc307f 	bic	r3, ip, #127	; 0x7f
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15130:	e2040008 	and	r0, r4, #8	; 0x8
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15134:	e18330a1 	orr	r3, r3, r1, lsr #1
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15138:	e1822180 	orr	r2, r2, r0, lsl #3
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e1513c:	e2041040 	and	r1, r4, #64	; 0x40
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15140:	e20c0004 	and	r0, ip, #4	; 0x4
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15144:	e1833121 	orr	r3, r3, r1, lsr #2
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15148:	e1822180 	orr	r2, r2, r0, lsl #3
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e1514c:	e20c1020 	and	r1, ip, #32	; 0x20
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15150:	e2040004 	and	r0, r4, #4	; 0x4
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15154:	e1833121 	orr	r3, r3, r1, lsr #2
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15158:	e1822100 	orr	r2, r2, r0, lsl #2
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e1515c:	e2041020 	and	r1, r4, #32	; 0x20
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15160:	e20c0002 	and	r0, ip, #2	; 0x2
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15164:	e18331a1 	orr	r3, r3, r1, lsr #3
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15168:	e1822100 	orr	r2, r2, r0, lsl #2
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e1516c:	e20c1010 	and	r1, ip, #16	; 0x10
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15170:	e2040002 	and	r0, r4, #2	; 0x2
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15174:	e18331a1 	orr	r3, r3, r1, lsr #3
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e15178:	e1822080 	orr	r2, r2, r0, lsl #1
c7e1517c:	e20cc001 	and	ip, ip, #1	; 0x1
	ecc_code[1] = ~tmp1;
#else
	ecc_code[0] = ~tmp1;
	ecc_code[1] = ~tmp2;
#endif
	ecc_code[2] = ((~reg1) << 2) | 0x03;
c7e15180:	e1e00005 	mvn	r0, r5
	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
c7e15184:	e2041010 	and	r1, r4, #16	; 0x10
c7e15188:	e1833221 	orr	r3, r3, r1, lsr #4
	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
c7e1518c:	e182208c 	orr	r2, r2, ip, lsl #1
	ecc_code[1] = ~tmp1;
#else
	ecc_code[0] = ~tmp1;
	ecc_code[1] = ~tmp2;
#endif
	ecc_code[2] = ((~reg1) << 2) | 0x03;
c7e15190:	e1a00100 	lsl	r0, r0, #2
	/* Calculate final ECC code */
#ifdef CONFIG_MTD_NAND_ECC_SMC
	ecc_code[0] = ~tmp2;
	ecc_code[1] = ~tmp1;
#else
	ecc_code[0] = ~tmp1;
c7e15194:	e1e03003 	mvn	r3, r3
	ecc_code[1] = ~tmp2;
c7e15198:	e1e02002 	mvn	r2, r2
#endif
	ecc_code[2] = ((~reg1) << 2) | 0x03;
c7e1519c:	e3800003 	orr	r0, r0, #3	; 0x3
c7e151a0:	e5c60002 	strb	r0, [r6, #2]
	/* Calculate final ECC code */
#ifdef CONFIG_MTD_NAND_ECC_SMC
	ecc_code[0] = ~tmp2;
	ecc_code[1] = ~tmp1;
#else
	ecc_code[0] = ~tmp1;
c7e151a4:	e5c63000 	strb	r3, [r6]
	ecc_code[1] = ~tmp2;
c7e151a8:	e5c62001 	strb	r2, [r6, #1]
#endif
	ecc_code[2] = ((~reg1) << 2) | 0x03;

	return 0;
}
c7e151ac:	e3a00000 	mov	r0, #0	; 0x0
c7e151b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e151b4:	c7e2aefc 	.word	0xc7e2aefc

c7e151b8 <nand_correct_data>:
 *
 * Detect and correct a 1 bit error for 256 byte block
 */
int nand_correct_data(struct mtd_info *mtd, u_char *dat,
		      u_char *read_ecc, u_char *calc_ecc)
{
c7e151b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	s1 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#else
	s1 = calc_ecc[0] ^ read_ecc[0];
	s0 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
c7e151bc:	e5d36002 	ldrb	r6, [r3, #2]
#ifdef CONFIG_MTD_NAND_ECC_SMC
	s0 = calc_ecc[0] ^ read_ecc[0];
	s1 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#else
	s1 = calc_ecc[0] ^ read_ecc[0];
c7e151c0:	e5d34000 	ldrb	r4, [r3]
c7e151c4:	e5d20000 	ldrb	r0, [r2]
	s0 = calc_ecc[1] ^ read_ecc[1];
c7e151c8:	e5d3c001 	ldrb	ip, [r3, #1]
	s2 = calc_ecc[2] ^ read_ecc[2];
c7e151cc:	e5d25002 	ldrb	r5, [r2, #2]
	s0 = calc_ecc[0] ^ read_ecc[0];
	s1 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#else
	s1 = calc_ecc[0] ^ read_ecc[0];
	s0 = calc_ecc[1] ^ read_ecc[1];
c7e151d0:	e5d23001 	ldrb	r3, [r2, #1]
#ifdef CONFIG_MTD_NAND_ECC_SMC
	s0 = calc_ecc[0] ^ read_ecc[0];
	s1 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#else
	s1 = calc_ecc[0] ^ read_ecc[0];
c7e151d4:	e0244000 	eor	r4, r4, r0
	s0 = calc_ecc[1] ^ read_ecc[1];
c7e151d8:	e02cc003 	eor	ip, ip, r3
	s2 = calc_ecc[2] ^ read_ecc[2];
c7e151dc:	e0266005 	eor	r6, r6, r5
#ifdef CONFIG_MTD_NAND_ECC_SMC
	s0 = calc_ecc[0] ^ read_ecc[0];
	s1 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#else
	s1 = calc_ecc[0] ^ read_ecc[0];
c7e151e0:	e20400ff 	and	r0, r4, #255	; 0xff
	s0 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#endif
	if ((s0 | s1 | s2) == 0)
c7e151e4:	e18c3006 	orr	r3, ip, r6
c7e151e8:	e1903003 	orrs	r3, r0, r3
 *
 * Detect and correct a 1 bit error for 256 byte block
 */
int nand_correct_data(struct mtd_info *mtd, u_char *dat,
		      u_char *read_ecc, u_char *calc_ecc)
{
c7e151ec:	e1a07001 	mov	r7, r1
#else
	s1 = calc_ecc[0] ^ read_ecc[0];
	s0 = calc_ecc[1] ^ read_ecc[1];
	s2 = calc_ecc[2] ^ read_ecc[2];
#endif
	if ((s0 | s1 | s2) == 0)
c7e151f0:	01a00003 	moveq	r0, r3
c7e151f4:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
		return 0;

	/* Check for a single bit error */
	if( ((s0 ^ (s0 >> 1)) & 0x55) == 0x55 &&
c7e151f8:	e1a050ac 	lsr	r5, ip, #1
c7e151fc:	e025300c 	eor	r3, r5, ip
c7e15200:	e2033055 	and	r3, r3, #85	; 0x55
c7e15204:	e3530055 	cmp	r3, #85	; 0x55
c7e15208:	1a000028 	bne	c7e152b0 <nand_correct_data+0xf8>
c7e1520c:	e02030a0 	eor	r3, r0, r0, lsr #1
c7e15210:	e2033055 	and	r3, r3, #85	; 0x55
c7e15214:	e3530055 	cmp	r3, #85	; 0x55
c7e15218:	1a000024 	bne	c7e152b0 <nand_correct_data+0xf8>
c7e1521c:	e02630a6 	eor	r3, r6, r6, lsr #1
c7e15220:	e2033054 	and	r3, r3, #84	; 0x54
c7e15224:	e3530054 	cmp	r3, #84	; 0x54
c7e15228:	1a000020 	bne	c7e152b0 <nand_correct_data+0xf8>
	    ((s2 ^ (s2 >> 1)) & 0x54) == 0x54) {

		uint32_t byteoffs, bitnum;

		byteoffs = (s1 << 0) & 0x80;
		byteoffs |= (s1 << 1) & 0x40;
c7e1522c:	e1a02080 	lsl	r2, r0, #1
c7e15230:	e1a03100 	lsl	r3, r0, #2
c7e15234:	e2033020 	and	r3, r3, #32	; 0x20
c7e15238:	e2022040 	and	r2, r2, #64	; 0x40
c7e1523c:	e1822003 	orr	r2, r2, r3
	    ((s1 ^ (s1 >> 1)) & 0x55) == 0x55 &&
	    ((s2 ^ (s2 >> 1)) & 0x54) == 0x54) {

		uint32_t byteoffs, bitnum;

		byteoffs = (s1 << 0) & 0x80;
c7e15240:	e2041080 	and	r1, r4, #128	; 0x80
		byteoffs |= (s1 << 1) & 0x40;
		byteoffs |= (s1 << 2) & 0x20;
		byteoffs |= (s1 << 3) & 0x10;
c7e15244:	e1a03180 	lsl	r3, r0, #3

		uint32_t byteoffs, bitnum;

		byteoffs = (s1 << 0) & 0x80;
		byteoffs |= (s1 << 1) & 0x40;
		byteoffs |= (s1 << 2) & 0x20;
c7e15248:	e1822001 	orr	r2, r2, r1
		byteoffs |= (s1 << 3) & 0x10;
c7e1524c:	e2033010 	and	r3, r3, #16	; 0x10

		byteoffs |= (s0 >> 4) & 0x08;
c7e15250:	e1a0122c 	lsr	r1, ip, #4
		uint32_t byteoffs, bitnum;

		byteoffs = (s1 << 0) & 0x80;
		byteoffs |= (s1 << 1) & 0x40;
		byteoffs |= (s1 << 2) & 0x20;
		byteoffs |= (s1 << 3) & 0x10;
c7e15254:	e1822003 	orr	r2, r2, r3

		byteoffs |= (s0 >> 4) & 0x08;
c7e15258:	e2011008 	and	r1, r1, #8	; 0x8
		byteoffs |= (s0 >> 3) & 0x04;
c7e1525c:	e1a001ac 	lsr	r0, ip, #3
		byteoffs = (s1 << 0) & 0x80;
		byteoffs |= (s1 << 1) & 0x40;
		byteoffs |= (s1 << 2) & 0x20;
		byteoffs |= (s1 << 3) & 0x10;

		byteoffs |= (s0 >> 4) & 0x08;
c7e15260:	e1822001 	orr	r2, r2, r1
		byteoffs |= (s0 >> 3) & 0x04;
c7e15264:	e2000004 	and	r0, r0, #4	; 0x4
		byteoffs |= (s0 >> 2) & 0x02;
c7e15268:	e1a0312c 	lsr	r3, ip, #2
		byteoffs |= (s1 << 1) & 0x40;
		byteoffs |= (s1 << 2) & 0x20;
		byteoffs |= (s1 << 3) & 0x10;

		byteoffs |= (s0 >> 4) & 0x08;
		byteoffs |= (s0 >> 3) & 0x04;
c7e1526c:	e1822000 	orr	r2, r2, r0
		byteoffs |= (s0 >> 2) & 0x02;
c7e15270:	e2033002 	and	r3, r3, #2	; 0x2
c7e15274:	e1822003 	orr	r2, r2, r3

		bitnum = (s2 >> 5) & 0x04;
		bitnum |= (s2 >> 4) & 0x02;
		bitnum |= (s2 >> 3) & 0x01;

		dat[byteoffs] ^= (1 << bitnum);
c7e15278:	e2050001 	and	r0, r5, #1	; 0x1
		byteoffs |= (s0 >> 4) & 0x08;
		byteoffs |= (s0 >> 3) & 0x04;
		byteoffs |= (s0 >> 2) & 0x02;
		byteoffs |= (s0 >> 1) & 0x01;

		bitnum = (s2 >> 5) & 0x04;
c7e1527c:	e1a012a6 	lsr	r1, r6, #5
		bitnum |= (s2 >> 4) & 0x02;
c7e15280:	e1a03226 	lsr	r3, r6, #4
		bitnum |= (s2 >> 3) & 0x01;

		dat[byteoffs] ^= (1 << bitnum);
c7e15284:	e1822000 	orr	r2, r2, r0
		byteoffs |= (s0 >> 4) & 0x08;
		byteoffs |= (s0 >> 3) & 0x04;
		byteoffs |= (s0 >> 2) & 0x02;
		byteoffs |= (s0 >> 1) & 0x01;

		bitnum = (s2 >> 5) & 0x04;
c7e15288:	e2011004 	and	r1, r1, #4	; 0x4
		bitnum |= (s2 >> 4) & 0x02;
c7e1528c:	e2033002 	and	r3, r3, #2	; 0x2
c7e15290:	e1833001 	orr	r3, r3, r1
		bitnum |= (s2 >> 3) & 0x01;

		dat[byteoffs] ^= (1 << bitnum);
c7e15294:	e1a00e06 	lsl	r0, r6, #28
c7e15298:	e7d71002 	ldrb	r1, [r7, r2]
c7e1529c:	e1833fa0 	orr	r3, r3, r0, lsr #31
c7e152a0:	e3a00001 	mov	r0, #1	; 0x1
c7e152a4:	e0211310 	eor	r1, r1, r0, lsl r3
c7e152a8:	e7c71002 	strb	r1, [r7, r2]
c7e152ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

		return 1;
	}

	if(countbits(s0 | ((uint32_t)s1 << 8) | ((uint32_t)s2 <<16)) == 1)
c7e152b0:	e18c3400 	orr	r3, ip, r0, lsl #8
c7e152b4:	e1830806 	orr	r0, r3, r6, lsl #16
c7e152b8:	e3a02000 	mov	r2, #0	; 0x0
c7e152bc:	ea000002 	b	c7e152cc <nand_correct_data+0x114>
static inline int countbits(uint32_t byte)
{
	int res = 0;

	for (;byte; byte >>= 1)
		res += byte & 0x01;
c7e152c0:	e2003001 	and	r3, r0, #1	; 0x1
c7e152c4:	e0832002 	add	r2, r3, r2

static inline int countbits(uint32_t byte)
{
	int res = 0;

	for (;byte; byte >>= 1)
c7e152c8:	e1a000a0 	lsr	r0, r0, #1
c7e152cc:	e3500000 	cmp	r0, #0	; 0x0
c7e152d0:	1afffffa 	bne	c7e152c0 <nand_correct_data+0x108>
		dat[byteoffs] ^= (1 << bitnum);

		return 1;
	}

	if(countbits(s0 | ((uint32_t)s1 << 8) | ((uint32_t)s2 <<16)) == 1)
c7e152d4:	e3520001 	cmp	r2, #1	; 0x1
c7e152d8:	01a00002 	moveq	r0, r2
c7e152dc:	13e00049 	mvnne	r0, #73	; 0x49
		return 1;

	return -EBADMSG;
}
c7e152e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

c7e152e4 <generic_ffs>:

static inline int generic_ffs(int x)
{
	int r = 1;

	if (!x)
c7e152e4:	e3500000 	cmp	r0, #0	; 0x0
c7e152e8:	01a03000 	moveq	r3, r0
c7e152ec:	0a000010 	beq	c7e15334 <generic_ffs+0x50>
		return 0;
	if (!(x & 0xffff)) {
c7e152f0:	e1a03800 	lsl	r3, r0, #16
c7e152f4:	e1a03823 	lsr	r3, r3, #16
c7e152f8:	e3530000 	cmp	r3, #0	; 0x0
		x >>= 16;
c7e152fc:	01a00840 	asreq	r0, r0, #16
{
	int r = 1;

	if (!x)
		return 0;
	if (!(x & 0xffff)) {
c7e15300:	13a03001 	movne	r3, #1	; 0x1
		x >>= 16;
c7e15304:	03a03011 	moveq	r3, #17	; 0x11
		r += 16;
	}
	if (!(x & 0xff)) {
c7e15308:	e31000ff 	tst	r0, #255	; 0xff
		x >>= 8;
c7e1530c:	01a00440 	asreq	r0, r0, #8
		r += 8;
c7e15310:	02833008 	addeq	r3, r3, #8	; 0x8
	}
	if (!(x & 0xf)) {
c7e15314:	e310000f 	tst	r0, #15	; 0xf
		x >>= 4;
c7e15318:	01a00240 	asreq	r0, r0, #4
		r += 4;
c7e1531c:	02833004 	addeq	r3, r3, #4	; 0x4
	}
	if (!(x & 3)) {
c7e15320:	e3100003 	tst	r0, #3	; 0x3
		x >>= 2;
c7e15324:	01a00140 	asreq	r0, r0, #2
		r += 2;
c7e15328:	02833002 	addeq	r3, r3, #2	; 0x2
	}
	if (!(x & 1)) {
c7e1532c:	e3100001 	tst	r0, #1	; 0x1
		x >>= 1;
		r += 1;
c7e15330:	02833001 	addeq	r3, r3, #1	; 0x1
	}
	return r;
}
c7e15334:	e1a00003 	mov	r0, r3
c7e15338:	e12fff1e 	bx	lr

c7e1533c <nand_bch_calculate_ecc>:
static inline int
nand_bch_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
		       u_char *ecc_code)
{
	return -1;
}
c7e1533c:	e3e00000 	mvn	r0, #0	; 0x0
c7e15340:	e12fff1e 	bx	lr

c7e15344 <nand_bch_correct_data>:
static inline int
nand_bch_correct_data(struct mtd_info *mtd, unsigned char *buf,
		      unsigned char *read_ecc, unsigned char *calc_ecc)
{
	return -1;
}
c7e15344:	e3e00000 	mvn	r0, #0	; 0x0
c7e15348:	e12fff1e 	bx	lr

c7e1534c <nand_release_device>:
 * @mtd:	MTD device structure
 *
 * Deselect, release chip lock and wake up anyone waiting on the device
 */
static void nand_release_device(struct mtd_info *mtd)
{
c7e1534c:	e92d4010 	push	{r4, lr}
	struct nand_chip *chip = mtd->priv;

	/* De-select the NAND device */
	chip->select_chip(mtd, -1);
c7e15350:	e5903094 	ldr	r3, [r0, #148]
c7e15354:	e3e01000 	mvn	r1, #0	; 0x0
c7e15358:	e1a0e00f 	mov	lr, pc
c7e1535c:	e593f01c 	ldr	pc, [r3, #28]
}
c7e15360:	e8bd8010 	pop	{r4, pc}

c7e15364 <nand_read_byte>:
 * Default read function for 8bit buswith
 */
uint8_t nand_read_byte(struct mtd_info *mtd)
{
	struct nand_chip *chip = mtd->priv;
	return readb(chip->IO_ADDR_R);
c7e15364:	e5903094 	ldr	r3, [r0, #148]
c7e15368:	e5933000 	ldr	r3, [r3]
c7e1536c:	e5d30000 	ldrb	r0, [r3]
c7e15370:	e20000ff 	and	r0, r0, #255	; 0xff
}
c7e15374:	e12fff1e 	bx	lr

c7e15378 <nand_read_byte16>:
 * endianess conversion
 */
static uint8_t nand_read_byte16(struct mtd_info *mtd)
{
	struct nand_chip *chip = mtd->priv;
	return (uint8_t) cpu_to_le16(readw(chip->IO_ADDR_R));
c7e15378:	e5903094 	ldr	r3, [r0, #148]
c7e1537c:	e5933000 	ldr	r3, [r3]
c7e15380:	e1d300b0 	ldrh	r0, [r3]
c7e15384:	e20000ff 	and	r0, r0, #255	; 0xff
}
c7e15388:	e12fff1e 	bx	lr

c7e1538c <nand_read_word>:
 * endianess conversion
 */
static u16 nand_read_word(struct mtd_info *mtd)
{
	struct nand_chip *chip = mtd->priv;
	return readw(chip->IO_ADDR_R);
c7e1538c:	e5903094 	ldr	r3, [r0, #148]
c7e15390:	e5933000 	ldr	r3, [r3]
c7e15394:	e1d300b0 	ldrh	r0, [r3]
}
c7e15398:	e12fff1e 	bx	lr

c7e1539c <nand_write_buf>:
 * @len:	number of bytes to write
 *
 * Default write function for 8bit buswith
 */
void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e1539c:	e92d4010 	push	{r4, lr}
	int i;
	struct nand_chip *chip = mtd->priv;
c7e153a0:	e590c094 	ldr	ip, [r0, #148]
 * @len:	number of bytes to write
 *
 * Default write function for 8bit buswith
 */
void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e153a4:	e1a04001 	mov	r4, r1
	int i;
	struct nand_chip *chip = mtd->priv;
c7e153a8:	e3a00000 	mov	r0, #0	; 0x0
 * @len:	number of bytes to write
 *
 * Default write function for 8bit buswith
 */
void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e153ac:	e1a01002 	mov	r1, r2
c7e153b0:	ea000003 	b	c7e153c4 <nand_write_buf+0x28>
	int i;
	struct nand_chip *chip = mtd->priv;

	for (i = 0; i < len; i++)
		writeb(buf[i], chip->IO_ADDR_W);
c7e153b4:	e7d42000 	ldrb	r2, [r4, r0]
c7e153b8:	e59c3004 	ldr	r3, [ip, #4]
void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
	int i;
	struct nand_chip *chip = mtd->priv;

	for (i = 0; i < len; i++)
c7e153bc:	e2800001 	add	r0, r0, #1	; 0x1
		writeb(buf[i], chip->IO_ADDR_W);
c7e153c0:	e5c32000 	strb	r2, [r3]
void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
	int i;
	struct nand_chip *chip = mtd->priv;

	for (i = 0; i < len; i++)
c7e153c4:	e1500001 	cmp	r0, r1
c7e153c8:	bafffff9 	blt	c7e153b4 <nand_write_buf+0x18>
		writeb(buf[i], chip->IO_ADDR_W);
}
c7e153cc:	e8bd8010 	pop	{r4, pc}

c7e153d0 <nand_read_buf>:
 * Default read function for 8bit buswith
 */
void nand_read_buf(struct mtd_info *mtd, uint8_t *buf, int len)
{
	int i;
	struct nand_chip *chip = mtd->priv;
c7e153d0:	e590c094 	ldr	ip, [r0, #148]
c7e153d4:	e3a00000 	mov	r0, #0	; 0x0
c7e153d8:	ea000004 	b	c7e153f0 <nand_read_buf+0x20>

	for (i = 0; i < len; i++)
		buf[i] = readb(chip->IO_ADDR_R);
c7e153dc:	e59c3000 	ldr	r3, [ip]
c7e153e0:	e5d33000 	ldrb	r3, [r3]
c7e153e4:	e20330ff 	and	r3, r3, #255	; 0xff
c7e153e8:	e7c13000 	strb	r3, [r1, r0]
void nand_read_buf(struct mtd_info *mtd, uint8_t *buf, int len)
{
	int i;
	struct nand_chip *chip = mtd->priv;

	for (i = 0; i < len; i++)
c7e153ec:	e2800001 	add	r0, r0, #1	; 0x1
c7e153f0:	e1500002 	cmp	r0, r2
c7e153f4:	bafffff8 	blt	c7e153dc <nand_read_buf+0xc>
		buf[i] = readb(chip->IO_ADDR_R);
}
c7e153f8:	e12fff1e 	bx	lr

c7e153fc <nand_verify_buf>:
 * @len:	number of bytes to compare
 *
 * Default verify function for 8bit buswith
 */
static int nand_verify_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e153fc:	e92d4010 	push	{r4, lr}
	int i;
	struct nand_chip *chip = mtd->priv;
c7e15400:	e590c094 	ldr	ip, [r0, #148]
 * @len:	number of bytes to compare
 *
 * Default verify function for 8bit buswith
 */
static int nand_verify_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e15404:	e1a04001 	mov	r4, r1
	int i;
	struct nand_chip *chip = mtd->priv;
c7e15408:	e3a00000 	mov	r0, #0	; 0x0
 * @len:	number of bytes to compare
 *
 * Default verify function for 8bit buswith
 */
static int nand_verify_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e1540c:	e1a01002 	mov	r1, r2
c7e15410:	ea000008 	b	c7e15438 <nand_verify_buf+0x3c>
	int i;
	struct nand_chip *chip = mtd->priv;

	for (i = 0; i < len; i++)
		if (buf[i] != readb(chip->IO_ADDR_R))
c7e15414:	e59c3000 	ldr	r3, [ip]
c7e15418:	e7d42000 	ldrb	r2, [r4, r0]
c7e1541c:	e5d33000 	ldrb	r3, [r3]
c7e15420:	e20330ff 	and	r3, r3, #255	; 0xff
c7e15424:	e1520003 	cmp	r2, r3
c7e15428:	0a000001 	beq	c7e15434 <nand_verify_buf+0x38>
c7e1542c:	e3e0000d 	mvn	r0, #13	; 0xd
c7e15430:	e8bd8010 	pop	{r4, pc}
static int nand_verify_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
{
	int i;
	struct nand_chip *chip = mtd->priv;

	for (i = 0; i < len; i++)
c7e15434:	e2800001 	add	r0, r0, #1	; 0x1
c7e15438:	e1500001 	cmp	r0, r1
c7e1543c:	bafffff4 	blt	c7e15414 <nand_verify_buf+0x18>
c7e15440:	e3a00000 	mov	r0, #0	; 0x0
		if (buf[i] != readb(chip->IO_ADDR_R))
			return -EFAULT;
	return 0;
}
c7e15444:	e8bd8010 	pop	{r4, pc}

c7e15448 <nand_write_buf16>:
 * @len:	number of bytes to write
 *
 * Default write function for 16bit buswith
 */
void nand_write_buf16(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e15448:	e92d4010 	push	{r4, lr}
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;
c7e1544c:	e1a0c0c2 	asr	ip, r2, #1
 * @len:	number of bytes to write
 *
 * Default write function for 16bit buswith
 */
void nand_write_buf16(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e15450:	e1a04001 	mov	r4, r1
	int i;
	struct nand_chip *chip = mtd->priv;
c7e15454:	e5901094 	ldr	r1, [r0, #148]
	u16 *p = (u16 *) buf;
	len >>= 1;
c7e15458:	e3a00000 	mov	r0, #0	; 0x0
c7e1545c:	ea000003 	b	c7e15470 <nand_write_buf16+0x28>

	for (i = 0; i < len; i++)
		writew(p[i], chip->IO_ADDR_W);
c7e15460:	e19420b3 	ldrh	r2, [r4, r3]
c7e15464:	e5913004 	ldr	r3, [r1, #4]
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;

	for (i = 0; i < len; i++)
c7e15468:	e2800001 	add	r0, r0, #1	; 0x1
		writew(p[i], chip->IO_ADDR_W);
c7e1546c:	e1c320b0 	strh	r2, [r3]
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;

	for (i = 0; i < len; i++)
c7e15470:	e150000c 	cmp	r0, ip
		writew(p[i], chip->IO_ADDR_W);
c7e15474:	e1a03080 	lsl	r3, r0, #1
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;

	for (i = 0; i < len; i++)
c7e15478:	bafffff8 	blt	c7e15460 <nand_write_buf16+0x18>
		writew(p[i], chip->IO_ADDR_W);

}
c7e1547c:	e8bd8010 	pop	{r4, pc}

c7e15480 <nand_read_buf16>:
 * @len:	number of bytes to read
 *
 * Default read function for 16bit buswith
 */
void nand_read_buf16(struct mtd_info *mtd, uint8_t *buf, int len)
{
c7e15480:	e92d4010 	push	{r4, lr}
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;
c7e15484:	e1a0c0c2 	asr	ip, r2, #1
 * @len:	number of bytes to read
 *
 * Default read function for 16bit buswith
 */
void nand_read_buf16(struct mtd_info *mtd, uint8_t *buf, int len)
{
c7e15488:	e1a04001 	mov	r4, r1
	int i;
	struct nand_chip *chip = mtd->priv;
c7e1548c:	e5901094 	ldr	r1, [r0, #148]
	u16 *p = (u16 *) buf;
	len >>= 1;
c7e15490:	e3a00000 	mov	r0, #0	; 0x0
c7e15494:	ea000004 	b	c7e154ac <nand_read_buf16+0x2c>

	for (i = 0; i < len; i++)
		p[i] = readw(chip->IO_ADDR_R);
c7e15498:	e5913000 	ldr	r3, [r1]
c7e1549c:	e1d330b0 	ldrh	r3, [r3]
c7e154a0:	e1a02080 	lsl	r2, r0, #1
c7e154a4:	e18430b2 	strh	r3, [r4, r2]
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;

	for (i = 0; i < len; i++)
c7e154a8:	e2800001 	add	r0, r0, #1	; 0x1
c7e154ac:	e150000c 	cmp	r0, ip
c7e154b0:	bafffff8 	blt	c7e15498 <nand_read_buf16+0x18>
		p[i] = readw(chip->IO_ADDR_R);
}
c7e154b4:	e8bd8010 	pop	{r4, pc}

c7e154b8 <nand_verify_buf16>:
 * @len:	number of bytes to compare
 *
 * Default verify function for 16bit buswith
 */
static int nand_verify_buf16(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e154b8:	e92d4010 	push	{r4, lr}
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;
c7e154bc:	e1a0c0c2 	asr	ip, r2, #1
 * @len:	number of bytes to compare
 *
 * Default verify function for 16bit buswith
 */
static int nand_verify_buf16(struct mtd_info *mtd, const uint8_t *buf, int len)
{
c7e154c0:	e1a04001 	mov	r4, r1
	int i;
	struct nand_chip *chip = mtd->priv;
c7e154c4:	e5901094 	ldr	r1, [r0, #148]
	u16 *p = (u16 *) buf;
	len >>= 1;
c7e154c8:	e3a00000 	mov	r0, #0	; 0x0
c7e154cc:	ea000007 	b	c7e154f0 <nand_verify_buf16+0x38>

	for (i = 0; i < len; i++)
		if (p[i] != readw(chip->IO_ADDR_R))
c7e154d0:	e5913000 	ldr	r3, [r1]
c7e154d4:	e19420b2 	ldrh	r2, [r4, r2]
c7e154d8:	e1d330b0 	ldrh	r3, [r3]
c7e154dc:	e1520003 	cmp	r2, r3
c7e154e0:	0a000001 	beq	c7e154ec <nand_verify_buf16+0x34>
c7e154e4:	e3e0000d 	mvn	r0, #13	; 0xd
c7e154e8:	e8bd8010 	pop	{r4, pc}
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;

	for (i = 0; i < len; i++)
c7e154ec:	e2800001 	add	r0, r0, #1	; 0x1
c7e154f0:	e150000c 	cmp	r0, ip
		if (p[i] != readw(chip->IO_ADDR_R))
c7e154f4:	e1a02080 	lsl	r2, r0, #1
	int i;
	struct nand_chip *chip = mtd->priv;
	u16 *p = (u16 *) buf;
	len >>= 1;

	for (i = 0; i < len; i++)
c7e154f8:	bafffff4 	blt	c7e154d0 <nand_verify_buf16+0x18>
c7e154fc:	e3a00000 	mov	r0, #0	; 0x0
		if (p[i] != readw(chip->IO_ADDR_R))
			return -EFAULT;

	return 0;
}
c7e15500:	e8bd8010 	pop	{r4, pc}

c7e15504 <nand_check_wp>:
 * Check, if the device is write protected
 *
 * The function expects, that the device is already selected
 */
static int nand_check_wp(struct mtd_info *mtd)
{
c7e15504:	e92d4070 	push	{r4, r5, r6, lr}
	struct nand_chip *chip = mtd->priv;
c7e15508:	e5904094 	ldr	r4, [r0, #148]
 * Check, if the device is write protected
 *
 * The function expects, that the device is already selected
 */
static int nand_check_wp(struct mtd_info *mtd)
{
c7e1550c:	e1a05000 	mov	r5, r0
	struct nand_chip *chip = mtd->priv;

	/* broken xD cards report WP despite being writable */
	if (chip->options & NAND_BROKEN_XD)
c7e15510:	e5943050 	ldr	r3, [r4, #80]
c7e15514:	e3130b01 	tst	r3, #1024	; 0x400
c7e15518:	13a00000 	movne	r0, #0	; 0x0
c7e1551c:	18bd8070 	popne	{r4, r5, r6, pc}
		return 0;

	/* Check the WP bit */
	chip->cmdfunc(mtd, NAND_CMD_STATUS, -1, -1);
c7e15520:	e3e02000 	mvn	r2, #0	; 0x0
c7e15524:	e3a01070 	mov	r1, #112	; 0x70
c7e15528:	e1a03002 	mov	r3, r2
c7e1552c:	e1a0e00f 	mov	lr, pc
c7e15530:	e594f034 	ldr	pc, [r4, #52]
	return (chip->read_byte(mtd) & NAND_STATUS_WP) ? 0 : 1;
c7e15534:	e1a00005 	mov	r0, r5
c7e15538:	e1a0e00f 	mov	lr, pc
c7e1553c:	e594f008 	ldr	pc, [r4, #8]
c7e15540:	e1a00c00 	lsl	r0, r0, #24
c7e15544:	e1e00000 	mvn	r0, r0
c7e15548:	e1a00fa0 	lsr	r0, r0, #31
}
c7e1554c:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e15550 <nand_get_device>:
 * Get the device and lock it for exclusive access
 */
static int
nand_get_device(struct nand_chip *chip, struct mtd_info *mtd, int new_state)
{
	chip->state = new_state;
c7e15550:	e580208c 	str	r2, [r0, #140]
	return 0;
}
c7e15554:	e3a00000 	mov	r0, #0	; 0x0
c7e15558:	e12fff1e 	bx	lr

c7e1555c <nand_block_bad>:
 * @getchip:	0, if the chip is already selected
 *
 * Check, if the block is bad.
 */
static int nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
{
c7e1555c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int page, chipnr, res = 0;
	struct nand_chip *chip = mtd->priv;
c7e15560:	e5906094 	ldr	r6, [r0, #148]
 * @getchip:	0, if the chip is already selected
 *
 * Check, if the block is bad.
 */
static int nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
{
c7e15564:	e1a05003 	mov	r5, r3
	int page, chipnr, res = 0;
	struct nand_chip *chip = mtd->priv;
	u16 bad;

	if (chip->options & NAND_BBT_SCANLASTPAGE)
c7e15568:	e5963050 	ldr	r3, [r6, #80]
 * @getchip:	0, if the chip is already selected
 *
 * Check, if the block is bad.
 */
static int nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
{
c7e1556c:	e1a07000 	mov	r7, r0
	int page, chipnr, res = 0;
	struct nand_chip *chip = mtd->priv;
	u16 bad;

	if (chip->options & NAND_BBT_SCANLASTPAGE)
c7e15570:	e3130902 	tst	r3, #32768	; 0x8000
 * @getchip:	0, if the chip is already selected
 *
 * Check, if the block is bad.
 */
static int nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
{
c7e15574:	e1a04002 	mov	r4, r2
c7e15578:	e59d9020 	ldr	r9, [sp, #32]
	int page, chipnr, res = 0;
	struct nand_chip *chip = mtd->priv;
	u16 bad;

	if (chip->options & NAND_BBT_SCANLASTPAGE)
c7e1557c:	0a000004 	beq	c7e15594 <nand_block_bad+0x38>
		ofs += mtd->erasesize - mtd->writesize;
c7e15580:	e5903010 	ldr	r3, [r0, #16]
c7e15584:	e5902014 	ldr	r2, [r0, #20]
c7e15588:	e0623003 	rsb	r3, r2, r3
c7e1558c:	e0944003 	adds	r4, r4, r3
c7e15590:	e2a55000 	adc	r5, r5, #0	; 0x0

	page = (int)(ofs >> chip->page_shift) & chip->pagemask;
c7e15594:	e1a00004 	mov	r0, r4
c7e15598:	e1a01005 	mov	r1, r5
c7e1559c:	e5962054 	ldr	r2, [r6, #84]
c7e155a0:	eb005476 	bl	c7e2a780 <__ashrdi3>
c7e155a4:	e5963070 	ldr	r3, [r6, #112]

	if (getchip) {
c7e155a8:	e3590000 	cmp	r9, #0	; 0x0
	u16 bad;

	if (chip->options & NAND_BBT_SCANLASTPAGE)
		ofs += mtd->erasesize - mtd->writesize;

	page = (int)(ofs >> chip->page_shift) & chip->pagemask;
c7e155ac:	e003a000 	and	sl, r3, r0

	if (getchip) {
c7e155b0:	0a00000d 	beq	c7e155ec <nand_block_bad+0x90>
		chipnr = (int)(ofs >> chip->chip_shift);
c7e155b4:	e5962060 	ldr	r2, [r6, #96]
c7e155b8:	e1a00004 	mov	r0, r4
c7e155bc:	e1a01005 	mov	r1, r5
c7e155c0:	eb00546e 	bl	c7e2a780 <__ashrdi3>

		nand_get_device(chip, mtd, FL_READING);
c7e155c4:	e3a02001 	mov	r2, #1	; 0x1
		ofs += mtd->erasesize - mtd->writesize;

	page = (int)(ofs >> chip->page_shift) & chip->pagemask;

	if (getchip) {
		chipnr = (int)(ofs >> chip->chip_shift);
c7e155c8:	e1a04000 	mov	r4, r0
c7e155cc:	e1a05001 	mov	r5, r1

		nand_get_device(chip, mtd, FL_READING);
c7e155d0:	e1a00006 	mov	r0, r6
c7e155d4:	e1a01007 	mov	r1, r7
c7e155d8:	ebffffdc 	bl	c7e15550 <nand_get_device>

		/* Select the NAND device */
		chip->select_chip(mtd, chipnr);
c7e155dc:	e1a00007 	mov	r0, r7
c7e155e0:	e1a01004 	mov	r1, r4
c7e155e4:	e1a0e00f 	mov	lr, pc
c7e155e8:	e596f01c 	ldr	pc, [r6, #28]
	}

	if (chip->options & NAND_BUSWIDTH_16) {
c7e155ec:	e5963050 	ldr	r3, [r6, #80]
c7e155f0:	e596c034 	ldr	ip, [r6, #52]
c7e155f4:	e3130002 	tst	r3, #2	; 0x2
c7e155f8:	0a00000e 	beq	c7e15638 <nand_block_bad+0xdc>
		chip->cmdfunc(mtd, NAND_CMD_READOOB, chip->badblockpos & 0xFE,
c7e155fc:	e5962080 	ldr	r2, [r6, #128]
c7e15600:	e1a0300a 	mov	r3, sl
c7e15604:	e20220fe 	and	r2, r2, #254	; 0xfe
c7e15608:	e3a01050 	mov	r1, #80	; 0x50
c7e1560c:	e1a00007 	mov	r0, r7
c7e15610:	e12fff3c 	blx	ip
			      page);
		bad = cpu_to_le16(chip->read_word(mtd));
c7e15614:	e1a00007 	mov	r0, r7
c7e15618:	e1a0e00f 	mov	lr, pc
c7e1561c:	e596f00c 	ldr	pc, [r6, #12]
		if (chip->badblockpos & 0x1)
c7e15620:	e5963080 	ldr	r3, [r6, #128]
c7e15624:	e3130001 	tst	r3, #1	; 0x1
			bad >>= 8;
c7e15628:	11a03400 	lslne	r3, r0, #8
c7e1562c:	11a00823 	lsrne	r0, r3, #16
		else
			bad &= 0xFF;
c7e15630:	020000ff 	andeq	r0, r0, #255	; 0xff
c7e15634:	ea000007 	b	c7e15658 <nand_block_bad+0xfc>
	} else {
		chip->cmdfunc(mtd, NAND_CMD_READOOB, chip->badblockpos, page);
c7e15638:	e1a00007 	mov	r0, r7
c7e1563c:	e1a0300a 	mov	r3, sl
c7e15640:	e3a01050 	mov	r1, #80	; 0x50
c7e15644:	e5962080 	ldr	r2, [r6, #128]
c7e15648:	e12fff3c 	blx	ip
		bad = chip->read_byte(mtd);
c7e1564c:	e1a00007 	mov	r0, r7
c7e15650:	e1a0e00f 	mov	lr, pc
c7e15654:	e596f008 	ldr	pc, [r6, #8]
	}

	if (likely(chip->badblockbits == 8))
c7e15658:	e5961084 	ldr	r1, [r6, #132]
c7e1565c:	e3510008 	cmp	r1, #8	; 0x8
c7e15660:	1a000002 	bne	c7e15670 <nand_block_bad+0x114>
		res = bad != 0xFF;
c7e15664:	e25040ff 	subs	r4, r0, #255	; 0xff
c7e15668:	13a04001 	movne	r4, #1	; 0x1
c7e1566c:	ea00000c 	b	c7e156a4 <nand_block_bad+0x148>
	return (res & 0x00FF) + ((res >> 8) & 0x00FF);
}

static inline unsigned int generic_hweight8(unsigned int w)
{
	unsigned int res = (w & 0x55) + ((w >> 1) & 0x55);
c7e15670:	e1a030a0 	lsr	r3, r0, #1
c7e15674:	e2002055 	and	r2, r0, #85	; 0x55
c7e15678:	e2033055 	and	r3, r3, #85	; 0x55
c7e1567c:	e0833002 	add	r3, r3, r2
	res = (res & 0x33) + ((res >> 2) & 0x33);
c7e15680:	e1a02123 	lsr	r2, r3, #2
c7e15684:	e2022033 	and	r2, r2, #51	; 0x33
c7e15688:	e2033033 	and	r3, r3, #51	; 0x33
c7e1568c:	e0822003 	add	r2, r2, r3
	else
		res = hweight8(bad) < chip->badblockbits;
c7e15690:	e202300f 	and	r3, r2, #15	; 0xf
c7e15694:	e0833222 	add	r3, r3, r2, lsr #4
c7e15698:	e1530001 	cmp	r3, r1
c7e1569c:	23a04000 	movcs	r4, #0	; 0x0
c7e156a0:	33a04001 	movcc	r4, #1	; 0x1

	if (getchip)
c7e156a4:	e3590000 	cmp	r9, #0	; 0x0
c7e156a8:	0a000001 	beq	c7e156b4 <nand_block_bad+0x158>
		nand_release_device(mtd);
c7e156ac:	e1a00007 	mov	r0, r7
c7e156b0:	ebffff25 	bl	c7e1534c <nand_release_device>

	return res;
}
c7e156b4:	e1a00004 	mov	r0, r4
c7e156b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

c7e156bc <nand_read_page_raw>:
 *
 * Not for syndrome calculating ecc controllers, which use a special oob layout
 */
static int nand_read_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
			      uint8_t *buf, int page)
{
c7e156bc:	e92d4070 	push	{r4, r5, r6, lr}
c7e156c0:	e1a04001 	mov	r4, r1
c7e156c4:	e1a05000 	mov	r5, r0
	chip->read_buf(mtd, buf, mtd->writesize);
c7e156c8:	e1a01002 	mov	r1, r2
c7e156cc:	e5902014 	ldr	r2, [r0, #20]
c7e156d0:	e1a0e00f 	mov	lr, pc
c7e156d4:	e594f014 	ldr	pc, [r4, #20]
	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
c7e156d8:	e1a00005 	mov	r0, r5
c7e156dc:	e5952018 	ldr	r2, [r5, #24]
c7e156e0:	e5941090 	ldr	r1, [r4, #144]
c7e156e4:	e1a0e00f 	mov	lr, pc
c7e156e8:	e594f014 	ldr	pc, [r4, #20]
	return 0;
}
c7e156ec:	e3a00000 	mov	r0, #0	; 0x0
c7e156f0:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e156f4 <nand_read_page_raw_syndrome>:
 * We need a special oob layout and handling even when OOB isn't used.
 */
static int nand_read_page_raw_syndrome(struct mtd_info *mtd,
					struct nand_chip *chip,
					uint8_t *buf, int page)
{
c7e156f4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e156f8:	e1a04001 	mov	r4, r1
c7e156fc:	e1a06000 	mov	r6, r0
c7e15700:	e1a0a002 	mov	sl, r2
	int eccsize = chip->ecc.size;
c7e15704:	e591b0a4 	ldr	fp, [r1, #164]
	int eccbytes = chip->ecc.bytes;
c7e15708:	e59190a8 	ldr	r9, [r1, #168]
	uint8_t *oob = chip->oob_poi;
c7e1570c:	e5915090 	ldr	r5, [r1, #144]
	int steps, size;

	for (steps = chip->ecc.steps; steps > 0; steps--) {
c7e15710:	e59170a0 	ldr	r7, [r1, #160]
c7e15714:	ea000019 	b	c7e15780 <nand_read_page_raw_syndrome+0x8c>
		chip->read_buf(mtd, buf, eccsize);
c7e15718:	e1a0e00f 	mov	lr, pc
c7e1571c:	e594f014 	ldr	pc, [r4, #20]
		buf += eccsize;

		if (chip->ecc.prepad) {
c7e15720:	e59420b0 	ldr	r2, [r4, #176]
c7e15724:	e3520000 	cmp	r2, #0	; 0x0
c7e15728:	0a000005 	beq	c7e15744 <nand_read_page_raw_syndrome+0x50>
			chip->read_buf(mtd, oob, chip->ecc.prepad);
c7e1572c:	e1a01005 	mov	r1, r5
c7e15730:	e1a00006 	mov	r0, r6
c7e15734:	e1a0e00f 	mov	lr, pc
c7e15738:	e594f014 	ldr	pc, [r4, #20]
			oob += chip->ecc.prepad;
c7e1573c:	e59430b0 	ldr	r3, [r4, #176]
c7e15740:	e0855003 	add	r5, r5, r3
		}

		chip->read_buf(mtd, oob, eccbytes);
c7e15744:	e1a01005 	mov	r1, r5
c7e15748:	e1a02009 	mov	r2, r9
c7e1574c:	e1a00006 	mov	r0, r6
c7e15750:	e1a0e00f 	mov	lr, pc
c7e15754:	e594f014 	ldr	pc, [r4, #20]
		oob += eccbytes;

		if (chip->ecc.postpad) {
c7e15758:	e59420b4 	ldr	r2, [r4, #180]
			chip->read_buf(mtd, oob, chip->ecc.prepad);
			oob += chip->ecc.prepad;
		}

		chip->read_buf(mtd, oob, eccbytes);
		oob += eccbytes;
c7e1575c:	e0855009 	add	r5, r5, r9

		if (chip->ecc.postpad) {
c7e15760:	e3520000 	cmp	r2, #0	; 0x0
c7e15764:	0a000005 	beq	c7e15780 <nand_read_page_raw_syndrome+0x8c>
			chip->read_buf(mtd, oob, chip->ecc.postpad);
c7e15768:	e1a01005 	mov	r1, r5
c7e1576c:	e1a00006 	mov	r0, r6
c7e15770:	e1a0e00f 	mov	lr, pc
c7e15774:	e594f014 	ldr	pc, [r4, #20]
			oob += chip->ecc.postpad;
c7e15778:	e59430b4 	ldr	r3, [r4, #180]
c7e1577c:	e0855003 	add	r5, r5, r3
	int eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	uint8_t *oob = chip->oob_poi;
	int steps, size;

	for (steps = chip->ecc.steps; steps > 0; steps--) {
c7e15780:	e3570000 	cmp	r7, #0	; 0x0
		chip->read_buf(mtd, buf, eccsize);
c7e15784:	e1a0100a 	mov	r1, sl
c7e15788:	e1a00006 	mov	r0, r6
c7e1578c:	e1a0200b 	mov	r2, fp
 * We need a special oob layout and handling even when OOB isn't used.
 */
static int nand_read_page_raw_syndrome(struct mtd_info *mtd,
					struct nand_chip *chip,
					uint8_t *buf, int page)
{
c7e15790:	e08aa00b 	add	sl, sl, fp
	int eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	uint8_t *oob = chip->oob_poi;
	int steps, size;

	for (steps = chip->ecc.steps; steps > 0; steps--) {
c7e15794:	e2477001 	sub	r7, r7, #1	; 0x1
c7e15798:	caffffde 	bgt	c7e15718 <nand_read_page_raw_syndrome+0x24>
			chip->read_buf(mtd, oob, chip->ecc.postpad);
			oob += chip->ecc.postpad;
		}
	}

	size = mtd->oobsize - (oob - chip->oob_poi);
c7e1579c:	e5943090 	ldr	r3, [r4, #144]
c7e157a0:	e5962018 	ldr	r2, [r6, #24]
c7e157a4:	e0653003 	rsb	r3, r5, r3
	if (size)
c7e157a8:	e0932002 	adds	r2, r3, r2
c7e157ac:	0a000002 	beq	c7e157bc <nand_read_page_raw_syndrome+0xc8>
		chip->read_buf(mtd, oob, size);
c7e157b0:	e1a01005 	mov	r1, r5
c7e157b4:	e1a0e00f 	mov	lr, pc
c7e157b8:	e594f014 	ldr	pc, [r4, #20]

	return 0;
}
c7e157bc:	e3a00000 	mov	r0, #0	; 0x0
c7e157c0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e157c4 <nand_read_page_swecc>:
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e157c4:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	int i, eccsize = chip->ecc.size;
c7e157c8:	e591c0a4 	ldr	ip, [r1, #164]
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e157cc:	e1a0b002 	mov	fp, r2
	int i, eccsize = chip->ecc.size;
c7e157d0:	e58dc008 	str	ip, [sp, #8]
	int eccbytes = chip->ecc.bytes;
c7e157d4:	e591c0a8 	ldr	ip, [r1, #168]
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e157d8:	e1a05001 	mov	r5, r1
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
c7e157dc:	e58dc00c 	str	ip, [sp, #12]
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e157e0:	e591c0b8 	ldr	ip, [r1, #184]
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e157e4:	e1a0a000 	mov	sl, r0
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e157e8:	e58dc004 	str	ip, [sp, #4]
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
c7e157ec:	e59170a0 	ldr	r7, [r1, #160]
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
c7e157f0:	e59190e8 	ldr	r9, [r1, #232]
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	chip->ecc.read_page_raw(mtd, chip, buf, page);
c7e157f4:	e1a0600b 	mov	r6, fp
c7e157f8:	e1a0e00f 	mov	lr, pc
c7e157fc:	e591f0cc 	ldr	pc, [r1, #204]
c7e15800:	e3a04000 	mov	r4, #0	; 0x0
c7e15804:	ea000002 	b	c7e15814 <nand_read_page_swecc+0x50>

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15808:	e1a0e00f 	mov	lr, pc
c7e1580c:	e595f0c4 	ldr	pc, [r5, #196]
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	chip->ecc.read_page_raw(mtd, chip, buf, page);

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e15810:	e2477001 	sub	r7, r7, #1	; 0x1
c7e15814:	e59d300c 	ldr	r3, [sp, #12]
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e15818:	e59dc008 	ldr	ip, [sp, #8]
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	chip->ecc.read_page_raw(mtd, chip, buf, page);

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e1581c:	e3570000 	cmp	r7, #0	; 0x0
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15820:	e1a01006 	mov	r1, r6
c7e15824:	e0892004 	add	r2, r9, r4
c7e15828:	e1a0000a 	mov	r0, sl
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	chip->ecc.read_page_raw(mtd, chip, buf, page);

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e1582c:	e0844003 	add	r4, r4, r3
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e15830:	e086600c 	add	r6, r6, ip
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	chip->ecc.read_page_raw(mtd, chip, buf, page);

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e15834:	1afffff3 	bne	c7e15808 <nand_read_page_swecc+0x44>
c7e15838:	e1a01007 	mov	r1, r7
c7e1583c:	e1a00009 	mov	r0, r9
c7e15840:	ea000003 	b	c7e15854 <nand_read_page_swecc+0x90>
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

	for (i = 0; i < chip->ecc.total; i++)
		ecc_code[i] = chip->oob_poi[eccpos[i]];
c7e15844:	e5923004 	ldr	r3, [r2, #4]
c7e15848:	e5952090 	ldr	r2, [r5, #144]
c7e1584c:	e7d23003 	ldrb	r3, [r2, r3]
c7e15850:	e5c0323f 	strb	r3, [r0, #575]
c7e15854:	e59d3004 	ldr	r3, [sp, #4]
	chip->ecc.read_page_raw(mtd, chip, buf, page);

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

	for (i = 0; i < chip->ecc.total; i++)
c7e15858:	e2800001 	add	r0, r0, #1	; 0x1
		ecc_code[i] = chip->oob_poi[eccpos[i]];
c7e1585c:	e0832101 	add	r2, r3, r1, lsl #2
	chip->ecc.read_page_raw(mtd, chip, buf, page);

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

	for (i = 0; i < chip->ecc.total; i++)
c7e15860:	e59530ac 	ldr	r3, [r5, #172]
c7e15864:	e1510003 	cmp	r1, r3
c7e15868:	e2811001 	add	r1, r1, #1	; 0x1
c7e1586c:	bafffff4 	blt	c7e15844 <nand_read_page_swecc+0x80>
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	eccsteps = chip->ecc.steps;
c7e15870:	e1a0700b 	mov	r7, fp
c7e15874:	e59560a0 	ldr	r6, [r5, #160]
c7e15878:	e3a04000 	mov	r4, #0	; 0x0
c7e1587c:	ea00000d 	b	c7e158b8 <nand_read_page_swecc+0xf4>
	p = buf;

	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
c7e15880:	e1a0e00f 	mov	lr, pc
c7e15884:	e595f0c8 	ldr	pc, [r5, #200]
		if (stat < 0)
c7e15888:	e3500000 	cmp	r0, #0	; 0x0
			mtd->ecc_stats.failed++;
c7e1588c:	b59a3084 	ldrlt	r3, [sl, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15890:	a59a3080 	ldrge	r3, [sl, #128]
	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15894:	b2833001 	addlt	r3, r3, #1	; 0x1
		else
			mtd->ecc_stats.corrected += stat;
c7e15898:	a0833000 	addge	r3, r3, r0
	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e1589c:	b58a3084 	strlt	r3, [sl, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e158a0:	a58a3080 	strge	r3, [sl, #128]
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	eccsteps = chip->ecc.steps;
	p = buf;

	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e158a4:	e59dc00c 	ldr	ip, [sp, #12]
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e158a8:	e59d3008 	ldr	r3, [sp, #8]
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	eccsteps = chip->ecc.steps;
	p = buf;

	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e158ac:	e2466001 	sub	r6, r6, #1	; 0x1
c7e158b0:	e084400c 	add	r4, r4, ip
 * @buf:	buffer to store read data
 * @page:	page number to read
 */
static int nand_read_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e158b4:	e0877003 	add	r7, r7, r3
	p = buf;

	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
c7e158b8:	e2842d09 	add	r2, r4, #576	; 0x240
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	eccsteps = chip->ecc.steps;
	p = buf;

	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e158bc:	e3560000 	cmp	r6, #0	; 0x0
		int stat;

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
c7e158c0:	e0892002 	add	r2, r9, r2
c7e158c4:	e1a01007 	mov	r1, r7
c7e158c8:	e0893004 	add	r3, r9, r4
c7e158cc:	e1a0000a 	mov	r0, sl
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	eccsteps = chip->ecc.steps;
	p = buf;

	for (i = 0 ; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e158d0:	1affffea 	bne	c7e15880 <nand_read_page_swecc+0xbc>
			mtd->ecc_stats.failed++;
		else
			mtd->ecc_stats.corrected += stat;
	}
	return 0;
}
c7e158d4:	e1a00006 	mov	r0, r6
c7e158d8:	e28dd010 	add	sp, sp, #16	; 0x10
c7e158dc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e158e0 <nand_read_subpage>:
 * @readlen:	data length
 * @bufpoi:	buffer to store read data
 */
static int nand_read_subpage(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t data_offs, uint32_t readlen, uint8_t *bufpoi)
{
c7e158e0:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
	int index = 0;

	/* Column address wihin the page aligned to ECC size (256bytes). */
	start_step = data_offs / chip->ecc.size;
c7e158e4:	e591a0a4 	ldr	sl, [r1, #164]
 * @readlen:	data length
 * @bufpoi:	buffer to store read data
 */
static int nand_read_subpage(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t data_offs, uint32_t readlen, uint8_t *bufpoi)
{
c7e158e8:	e1a06001 	mov	r6, r1
	int start_step, end_step, num_steps;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
	uint8_t *p;
	int data_col_addr, i, gaps = 0;
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e158ec:	e5911050 	ldr	r1, [r1, #80]
 * @readlen:	data length
 * @bufpoi:	buffer to store read data
 */
static int nand_read_subpage(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t data_offs, uint32_t readlen, uint8_t *bufpoi)
{
c7e158f0:	e1a04002 	mov	r4, r2
	int start_step, end_step, num_steps;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
	uint8_t *p;
	int data_col_addr, i, gaps = 0;
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e158f4:	e3110002 	tst	r1, #2	; 0x2
 * @readlen:	data length
 * @bufpoi:	buffer to store read data
 */
static int nand_read_subpage(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t data_offs, uint32_t readlen, uint8_t *bufpoi)
{
c7e158f8:	e1a07000 	mov	r7, r0
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
	int index = 0;

	/* Column address wihin the page aligned to ECC size (256bytes). */
	start_step = data_offs / chip->ecc.size;
c7e158fc:	e1a0100a 	mov	r1, sl
c7e15900:	e1a00002 	mov	r0, r2
	int start_step, end_step, num_steps;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
	uint8_t *p;
	int data_col_addr, i, gaps = 0;
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e15904:	13a02002 	movne	r2, #2	; 0x2
c7e15908:	03a02001 	moveq	r2, #1	; 0x1
 * @readlen:	data length
 * @bufpoi:	buffer to store read data
 */
static int nand_read_subpage(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t data_offs, uint32_t readlen, uint8_t *bufpoi)
{
c7e1590c:	e1a05003 	mov	r5, r3
	int start_step, end_step, num_steps;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
	uint8_t *p;
	int data_col_addr, i, gaps = 0;
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
c7e15910:	e58d2008 	str	r2, [sp, #8]
	int index = 0;

	/* Column address wihin the page aligned to ECC size (256bytes). */
	start_step = data_offs / chip->ecc.size;
c7e15914:	eb0052fb 	bl	c7e2a508 <__udivsi3>
	end_step = (data_offs + readlen - 1) / chip->ecc.size;
	num_steps = end_step - start_step + 1;
c7e15918:	e2444001 	sub	r4, r4, #1	; 0x1
	int datafrag_len, eccfrag_len, aligned_len, aligned_pos;
	int busw = (chip->options & NAND_BUSWIDTH_16) ? 2 : 1;
	int index = 0;

	/* Column address wihin the page aligned to ECC size (256bytes). */
	start_step = data_offs / chip->ecc.size;
c7e1591c:	e1a09000 	mov	r9, r0
	end_step = (data_offs + readlen - 1) / chip->ecc.size;
	num_steps = end_step - start_step + 1;
c7e15920:	e1a0100a 	mov	r1, sl
c7e15924:	e0840005 	add	r0, r4, r5
c7e15928:	eb0052f6 	bl	c7e2a508 <__udivsi3>
c7e1592c:	e2693001 	rsb	r3, r9, #1	; 0x1

	/* Data size aligned to ECC ecc.size*/
	datafrag_len = num_steps * chip->ecc.size;
	eccfrag_len = num_steps * chip->ecc.bytes;
c7e15930:	e59620a8 	ldr	r2, [r6, #168]
	int index = 0;

	/* Column address wihin the page aligned to ECC size (256bytes). */
	start_step = data_offs / chip->ecc.size;
	end_step = (data_offs + readlen - 1) / chip->ecc.size;
	num_steps = end_step - start_step + 1;
c7e15934:	e0833000 	add	r3, r3, r0
c7e15938:	e58d3000 	str	r3, [sp]
	datafrag_len = num_steps * chip->ecc.size;
	eccfrag_len = num_steps * chip->ecc.bytes;

	data_col_addr = start_step * chip->ecc.size;
	/* If we read not a page aligned data */
	if (data_col_addr != 0)
c7e1593c:	e014099a 	muls	r4, sl, r9
	end_step = (data_offs + readlen - 1) / chip->ecc.size;
	num_steps = end_step - start_step + 1;

	/* Data size aligned to ECC ecc.size*/
	datafrag_len = num_steps * chip->ecc.size;
	eccfrag_len = num_steps * chip->ecc.bytes;
c7e15940:	e0030392 	mul	r3, r2, r3
 */
static int nand_read_subpage(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t data_offs, uint32_t readlen, uint8_t *bufpoi)
{
	int start_step, end_step, num_steps;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e15944:	e596b0b8 	ldr	fp, [r6, #184]
	end_step = (data_offs + readlen - 1) / chip->ecc.size;
	num_steps = end_step - start_step + 1;

	/* Data size aligned to ECC ecc.size*/
	datafrag_len = num_steps * chip->ecc.size;
	eccfrag_len = num_steps * chip->ecc.bytes;
c7e15948:	e58d3004 	str	r3, [sp, #4]

	data_col_addr = start_step * chip->ecc.size;
	/* If we read not a page aligned data */
	if (data_col_addr != 0)
c7e1594c:	0a000005 	beq	c7e15968 <nand_read_subpage+0x88>
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, data_col_addr, -1);
c7e15950:	e1a00007 	mov	r0, r7
c7e15954:	e3a01005 	mov	r1, #5	; 0x5
c7e15958:	e1a02004 	mov	r2, r4
c7e1595c:	e3e03000 	mvn	r3, #0	; 0x0
c7e15960:	e1a0e00f 	mov	lr, pc
c7e15964:	e596f034 	ldr	pc, [r6, #52]

	p = bufpoi + data_col_addr;
c7e15968:	e59d3030 	ldr	r3, [sp, #48]
	chip->read_buf(mtd, p, datafrag_len);
c7e1596c:	e59d2000 	ldr	r2, [sp]
	data_col_addr = start_step * chip->ecc.size;
	/* If we read not a page aligned data */
	if (data_col_addr != 0)
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, data_col_addr, -1);

	p = bufpoi + data_col_addr;
c7e15970:	e0833004 	add	r3, r3, r4
c7e15974:	e58d300c 	str	r3, [sp, #12]
	chip->read_buf(mtd, p, datafrag_len);
c7e15978:	e002029a 	mul	r2, sl, r2
c7e1597c:	e1a00007 	mov	r0, r7
c7e15980:	e1a01003 	mov	r1, r3
c7e15984:	e1a0e00f 	mov	lr, pc
c7e15988:	e596f014 	ldr	pc, [r6, #20]
c7e1598c:	e3a04000 	mov	r4, #0	; 0x0
c7e15990:	e59d500c 	ldr	r5, [sp, #12]
c7e15994:	ea000007 	b	c7e159b8 <nand_read_subpage+0xd8>

	/* Calculate  ECC */
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size)
		chip->ecc.calculate(mtd, p, &chip->buffers->ecccalc[i]);
c7e15998:	e59620e8 	ldr	r2, [r6, #232]
c7e1599c:	e0822004 	add	r2, r2, r4
c7e159a0:	e1a0e00f 	mov	lr, pc
c7e159a4:	e596f0c4 	ldr	pc, [r6, #196]

	p = bufpoi + data_col_addr;
	chip->read_buf(mtd, p, datafrag_len);

	/* Calculate  ECC */
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size)
c7e159a8:	e59630a8 	ldr	r3, [r6, #168]
c7e159ac:	e59620a4 	ldr	r2, [r6, #164]
c7e159b0:	e0844003 	add	r4, r4, r3
c7e159b4:	e0855002 	add	r5, r5, r2
c7e159b8:	e59d3004 	ldr	r3, [sp, #4]
		chip->ecc.calculate(mtd, p, &chip->buffers->ecccalc[i]);
c7e159bc:	e1a01005 	mov	r1, r5

	p = bufpoi + data_col_addr;
	chip->read_buf(mtd, p, datafrag_len);

	/* Calculate  ECC */
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size)
c7e159c0:	e1540003 	cmp	r4, r3
		chip->ecc.calculate(mtd, p, &chip->buffers->ecccalc[i]);
c7e159c4:	e1a00007 	mov	r0, r7

	p = bufpoi + data_col_addr;
	chip->read_buf(mtd, p, datafrag_len);

	/* Calculate  ECC */
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size)
c7e159c8:	bafffff2 	blt	c7e15998 <nand_read_subpage+0xb8>
c7e159cc:	e3a01000 	mov	r1, #0	; 0x0
c7e159d0:	ea000008 	b	c7e159f8 <nand_read_subpage+0x118>

	/* The performance is faster if to position offsets
	   according to ecc.pos. Let make sure here that
	   there are no gaps in ecc positions */
	for (i = 0; i < eccfrag_len - 1; i++) {
		if (eccpos[i + start_step * chip->ecc.bytes] + 1 !=
c7e159d4:	e0231990 	mla	r3, r0, r9, r1
c7e159d8:	e08b2103 	add	r2, fp, r3, lsl #2
c7e159dc:	e5922004 	ldr	r2, [r2, #4]
c7e159e0:	e08b3103 	add	r3, fp, r3, lsl #2
c7e159e4:	e5933008 	ldr	r3, [r3, #8]
c7e159e8:	e2822001 	add	r2, r2, #1	; 0x1
c7e159ec:	e1520003 	cmp	r2, r3
c7e159f0:	1a000006 	bne	c7e15a10 <nand_read_subpage+0x130>
		chip->ecc.calculate(mtd, p, &chip->buffers->ecccalc[i]);

	/* The performance is faster if to position offsets
	   according to ecc.pos. Let make sure here that
	   there are no gaps in ecc positions */
	for (i = 0; i < eccfrag_len - 1; i++) {
c7e159f4:	e2811001 	add	r1, r1, #1	; 0x1
c7e159f8:	e59dc004 	ldr	ip, [sp, #4]
c7e159fc:	e59600a8 	ldr	r0, [r6, #168]
c7e15a00:	e24c3001 	sub	r3, ip, #1	; 0x1
c7e15a04:	e1510003 	cmp	r1, r3
c7e15a08:	bafffff1 	blt	c7e159d4 <nand_read_subpage+0xf4>
c7e15a0c:	ea00004d 	b	c7e15b48 <nand_read_subpage+0x268>
			gaps = 1;
			break;
		}
	}
	if (gaps) {
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, mtd->writesize, -1);
c7e15a10:	e3a01005 	mov	r1, #5	; 0x5
c7e15a14:	e5972014 	ldr	r2, [r7, #20]
c7e15a18:	e3e03000 	mvn	r3, #0	; 0x0
c7e15a1c:	e1a00007 	mov	r0, r7
c7e15a20:	e1a0e00f 	mov	lr, pc
c7e15a24:	e596f034 	ldr	pc, [r6, #52]
		chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
c7e15a28:	e1a00007 	mov	r0, r7
c7e15a2c:	e5961090 	ldr	r1, [r6, #144]
c7e15a30:	e5972018 	ldr	r2, [r7, #24]
c7e15a34:	e1a0e00f 	mov	lr, pc
c7e15a38:	e596f014 	ldr	pc, [r6, #20]
c7e15a3c:	e3a05000 	mov	r5, #0	; 0x0
c7e15a40:	ea000014 	b	c7e15a98 <nand_read_subpage+0x1b8>
		index = start_step * chip->ecc.bytes;

		aligned_pos = eccpos[index] & ~(busw - 1);
		aligned_len = eccfrag_len;
		if (eccpos[index] & (busw - 1))
			aligned_len++;
c7e15a44:	e59d2004 	ldr	r2, [sp, #4]
c7e15a48:	e2824001 	add	r4, r2, #1	; 0x1
		if (eccpos[index + (num_steps * chip->ecc.bytes)] & (busw - 1))
c7e15a4c:	e59d3000 	ldr	r3, [sp]
			aligned_len++;

		chip->cmdfunc(mtd, NAND_CMD_RNDOUT,
c7e15a50:	e5972014 	ldr	r2, [r7, #20]

		aligned_pos = eccpos[index] & ~(busw - 1);
		aligned_len = eccfrag_len;
		if (eccpos[index] & (busw - 1))
			aligned_len++;
		if (eccpos[index + (num_steps * chip->ecc.bytes)] & (busw - 1))
c7e15a54:	e0235390 	mla	r3, r0, r3, r5
c7e15a58:	e08b3103 	add	r3, fp, r3, lsl #2
c7e15a5c:	e5933004 	ldr	r3, [r3, #4]
			aligned_len++;

		chip->cmdfunc(mtd, NAND_CMD_RNDOUT,
c7e15a60:	e1a00007 	mov	r0, r7

		aligned_pos = eccpos[index] & ~(busw - 1);
		aligned_len = eccfrag_len;
		if (eccpos[index] & (busw - 1))
			aligned_len++;
		if (eccpos[index + (num_steps * chip->ecc.bytes)] & (busw - 1))
c7e15a64:	e1110003 	tst	r1, r3
			aligned_len++;

		chip->cmdfunc(mtd, NAND_CMD_RNDOUT,
c7e15a68:	e08a2002 	add	r2, sl, r2
c7e15a6c:	e3a01005 	mov	r1, #5	; 0x5
c7e15a70:	e3e03000 	mvn	r3, #0	; 0x0
		aligned_pos = eccpos[index] & ~(busw - 1);
		aligned_len = eccfrag_len;
		if (eccpos[index] & (busw - 1))
			aligned_len++;
		if (eccpos[index + (num_steps * chip->ecc.bytes)] & (busw - 1))
			aligned_len++;
c7e15a74:	12844001 	addne	r4, r4, #1	; 0x1

		chip->cmdfunc(mtd, NAND_CMD_RNDOUT,
c7e15a78:	e1a0e00f 	mov	lr, pc
c7e15a7c:	e596f034 	ldr	pc, [r6, #52]
					mtd->writesize + aligned_pos, -1);
		chip->read_buf(mtd, &chip->oob_poi[aligned_pos], aligned_len);
c7e15a80:	e5961090 	ldr	r1, [r6, #144]
c7e15a84:	e1a02004 	mov	r2, r4
c7e15a88:	e081100a 	add	r1, r1, sl
c7e15a8c:	e1a00007 	mov	r0, r7
c7e15a90:	e1a0e00f 	mov	lr, pc
c7e15a94:	e596f014 	ldr	pc, [r6, #20]
c7e15a98:	e08b3105 	add	r3, fp, r5, lsl #2
c7e15a9c:	e283c004 	add	ip, r3, #4	; 0x4
c7e15aa0:	e3a00000 	mov	r0, #0	; 0x0
c7e15aa4:	ea000006 	b	c7e15ac4 <nand_read_subpage+0x1e4>
	}

	for (i = 0; i < eccfrag_len; i++)
		chip->buffers->ecccode[i] = chip->oob_poi[eccpos[i + index]];
c7e15aa8:	e5961090 	ldr	r1, [r6, #144]
c7e15aac:	e51c2004 	ldr	r2, [ip, #-4]
c7e15ab0:	e59630e8 	ldr	r3, [r6, #232]
c7e15ab4:	e7d12002 	ldrb	r2, [r1, r2]
c7e15ab8:	e0833000 	add	r3, r3, r0
c7e15abc:	e5c32240 	strb	r2, [r3, #576]
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT,
					mtd->writesize + aligned_pos, -1);
		chip->read_buf(mtd, &chip->oob_poi[aligned_pos], aligned_len);
	}

	for (i = 0; i < eccfrag_len; i++)
c7e15ac0:	e2800001 	add	r0, r0, #1	; 0x1
c7e15ac4:	e59d3004 	ldr	r3, [sp, #4]
c7e15ac8:	e28cc004 	add	ip, ip, #4	; 0x4
c7e15acc:	e1500003 	cmp	r0, r3
c7e15ad0:	bafffff4 	blt	c7e15aa8 <nand_read_subpage+0x1c8>
c7e15ad4:	e3a04000 	mov	r4, #0	; 0x0
c7e15ad8:	ea000011 	b	c7e15b24 <nand_read_subpage+0x244>

	p = bufpoi + data_col_addr;
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size) {
		int stat;

		stat = chip->ecc.correct(mtd, p,
c7e15adc:	e59620e8 	ldr	r2, [r6, #232]
c7e15ae0:	e0823004 	add	r3, r2, r4
c7e15ae4:	e082200c 	add	r2, r2, ip
c7e15ae8:	e1a0e00f 	mov	lr, pc
c7e15aec:	e596f0c8 	ldr	pc, [r6, #200]
			&chip->buffers->ecccode[i], &chip->buffers->ecccalc[i]);
		if (stat < 0)
c7e15af0:	e3500000 	cmp	r0, #0	; 0x0
			mtd->ecc_stats.failed++;
c7e15af4:	b5973084 	ldrlt	r3, [r7, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15af8:	a5973080 	ldrge	r3, [r7, #128]
		int stat;

		stat = chip->ecc.correct(mtd, p,
			&chip->buffers->ecccode[i], &chip->buffers->ecccalc[i]);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15afc:	b2833001 	addlt	r3, r3, #1	; 0x1
		else
			mtd->ecc_stats.corrected += stat;
c7e15b00:	a0833000 	addge	r3, r3, r0
		int stat;

		stat = chip->ecc.correct(mtd, p,
			&chip->buffers->ecccode[i], &chip->buffers->ecccalc[i]);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15b04:	b5873084 	strlt	r3, [r7, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15b08:	a5873080 	strge	r3, [r7, #128]

	for (i = 0; i < eccfrag_len; i++)
		chip->buffers->ecccode[i] = chip->oob_poi[eccpos[i + index]];

	p = bufpoi + data_col_addr;
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size) {
c7e15b0c:	e59dc00c 	ldr	ip, [sp, #12]
c7e15b10:	e59620a4 	ldr	r2, [r6, #164]
c7e15b14:	e59630a8 	ldr	r3, [r6, #168]
c7e15b18:	e08cc002 	add	ip, ip, r2
c7e15b1c:	e0844003 	add	r4, r4, r3
c7e15b20:	e58dc00c 	str	ip, [sp, #12]
c7e15b24:	e59d2004 	ldr	r2, [sp, #4]
		int stat;

		stat = chip->ecc.correct(mtd, p,
c7e15b28:	e284cd09 	add	ip, r4, #576	; 0x240

	for (i = 0; i < eccfrag_len; i++)
		chip->buffers->ecccode[i] = chip->oob_poi[eccpos[i + index]];

	p = bufpoi + data_col_addr;
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size) {
c7e15b2c:	e1540002 	cmp	r4, r2
		int stat;

		stat = chip->ecc.correct(mtd, p,
c7e15b30:	e59d100c 	ldr	r1, [sp, #12]
c7e15b34:	e1a00007 	mov	r0, r7

	for (i = 0; i < eccfrag_len; i++)
		chip->buffers->ecccode[i] = chip->oob_poi[eccpos[i + index]];

	p = bufpoi + data_col_addr;
	for (i = 0; i < eccfrag_len ; i += chip->ecc.bytes, p += chip->ecc.size) {
c7e15b38:	baffffe7 	blt	c7e15adc <nand_read_subpage+0x1fc>
			mtd->ecc_stats.failed++;
		else
			mtd->ecc_stats.corrected += stat;
	}
	return 0;
}
c7e15b3c:	e3a00000 	mov	r0, #0	; 0x0
c7e15b40:	e28dd010 	add	sp, sp, #16	; 0x10
c7e15b44:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, mtd->writesize, -1);
		chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
	} else {
		/* send the command to read the particular ecc bytes */
		/* take care about buswidth alignment in read_buf */
		index = start_step * chip->ecc.bytes;
c7e15b48:	e0050990 	mul	r5, r0, r9

		aligned_pos = eccpos[index] & ~(busw - 1);
c7e15b4c:	e08b3105 	add	r3, fp, r5, lsl #2
c7e15b50:	e5932004 	ldr	r2, [r3, #4]
		aligned_len = eccfrag_len;
		if (eccpos[index] & (busw - 1))
c7e15b54:	e59d3008 	ldr	r3, [sp, #8]
c7e15b58:	e2431001 	sub	r1, r3, #1	; 0x1
c7e15b5c:	e1110002 	tst	r1, r2
	} else {
		/* send the command to read the particular ecc bytes */
		/* take care about buswidth alignment in read_buf */
		index = start_step * chip->ecc.bytes;

		aligned_pos = eccpos[index] & ~(busw - 1);
c7e15b60:	e2633000 	rsb	r3, r3, #0	; 0x0
c7e15b64:	e003a002 	and	sl, r3, r2
		aligned_len = eccfrag_len;
		if (eccpos[index] & (busw - 1))
c7e15b68:	059d4004 	ldreq	r4, [sp, #4]
c7e15b6c:	0affffb6 	beq	c7e15a4c <nand_read_subpage+0x16c>
c7e15b70:	eaffffb3 	b	c7e15a44 <nand_read_subpage+0x164>

c7e15b74 <nand_read_page_hwecc>:
 *
 * Not for syndrome calculating ecc controllers which need a special oob layout
 */
static int nand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e15b74:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
c7e15b78:	e59130e8 	ldr	r3, [r1, #232]
 *
 * Not for syndrome calculating ecc controllers which need a special oob layout
 */
static int nand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e15b7c:	e24dd018 	sub	sp, sp, #24	; 0x18
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
c7e15b80:	e58d3004 	str	r3, [sp, #4]
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e15b84:	e1a09002 	mov	r9, r2
 */
static int nand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
c7e15b88:	e591c0a8 	ldr	ip, [r1, #168]
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	uint8_t *ecc_code = chip->buffers->ecccode;
c7e15b8c:	e2832d09 	add	r2, r3, #576	; 0x240
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e15b90:	e59130b8 	ldr	r3, [r1, #184]
c7e15b94:	e3a0b000 	mov	fp, #0	; 0x0
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	uint8_t *ecc_code = chip->buffers->ecccode;
c7e15b98:	e58d2014 	str	r2, [sp, #20]
 *
 * Not for syndrome calculating ecc controllers which need a special oob layout
 */
static int nand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e15b9c:	e1a06001 	mov	r6, r1
c7e15ba0:	e1a05000 	mov	r5, r0
	int i, eccsize = chip->ecc.size;
c7e15ba4:	e591a0a4 	ldr	sl, [r1, #164]
	int eccbytes = chip->ecc.bytes;
c7e15ba8:	e58dc010 	str	ip, [sp, #16]
	int eccsteps = chip->ecc.steps;
c7e15bac:	e59170a0 	ldr	r7, [r1, #160]
	uint8_t *p = buf;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e15bb0:	e58d3008 	str	r3, [sp, #8]
c7e15bb4:	e1a0200b 	mov	r2, fp
c7e15bb8:	ea00003c 	b	c7e15cb0 <nand_read_page_hwecc+0x13c>
	}
#else
	int col = 0;
	int eccoffset,stat;
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {		
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, col, -1);
c7e15bbc:	e1a0e00f 	mov	lr, pc
c7e15bc0:	e596f034 	ldr	pc, [r6, #52]
		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15bc4:	e1a00005 	mov	r0, r5
c7e15bc8:	e3a01000 	mov	r1, #0	; 0x0
c7e15bcc:	e1a0e00f 	mov	lr, pc
c7e15bd0:	e596f0c0 	ldr	pc, [r6, #192]
		chip->read_buf(mtd, p, eccsize);
c7e15bd4:	e1a01009 	mov	r1, r9
c7e15bd8:	e1a0200a 	mov	r2, sl
c7e15bdc:	e1a00005 	mov	r0, r5
c7e15be0:	e1a0e00f 	mov	lr, pc
c7e15be4:	e596f014 	ldr	pc, [r6, #20]
		eccoffset = mtd->writesize + eccpos[0] + (((mtd->writesize /
			 eccsize) - eccsteps) * eccbytes);
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, eccoffset, -1);
c7e15be8:	e59dc008 	ldr	ip, [sp, #8]
	int eccoffset,stat;
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {		
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, col, -1);
		chip->ecc.hwctl(mtd, NAND_ECC_READ);
		chip->read_buf(mtd, p, eccsize);
		eccoffset = mtd->writesize + eccpos[0] + (((mtd->writesize /
c7e15bec:	e5954014 	ldr	r4, [r5, #20]
			 eccsize) - eccsteps) * eccbytes);
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, eccoffset, -1);
c7e15bf0:	e59c3004 	ldr	r3, [ip, #4]
c7e15bf4:	e1a00004 	mov	r0, r4
c7e15bf8:	e1a0100a 	mov	r1, sl
c7e15bfc:	e0844003 	add	r4, r4, r3
c7e15c00:	eb005240 	bl	c7e2a508 <__udivsi3>
c7e15c04:	e59d2010 	ldr	r2, [sp, #16]
c7e15c08:	e0670000 	rsb	r0, r7, r0
c7e15c0c:	e3e03000 	mvn	r3, #0	; 0x0
c7e15c10:	e0224290 	mla	r2, r0, r2, r4
c7e15c14:	e3a01005 	mov	r1, #5	; 0x5
c7e15c18:	e1a00005 	mov	r0, r5
c7e15c1c:	e1a0e00f 	mov	lr, pc
c7e15c20:	e596f034 	ldr	pc, [r6, #52]
		chip->read_buf(mtd, ecc_code, eccbytes);
c7e15c24:	e1a00005 	mov	r0, r5
c7e15c28:	e59d1014 	ldr	r1, [sp, #20]
c7e15c2c:	e59d2010 	ldr	r2, [sp, #16]
c7e15c30:	e1a0e00f 	mov	lr, pc
c7e15c34:	e596f014 	ldr	pc, [r6, #20]
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15c38:	e1a01009 	mov	r1, r9
c7e15c3c:	e59d200c 	ldr	r2, [sp, #12]
c7e15c40:	e1a00005 	mov	r0, r5
c7e15c44:	e1a0e00f 	mov	lr, pc
c7e15c48:	e596f0c4 	ldr	pc, [r6, #196]
		
		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
c7e15c4c:	e59d3004 	ldr	r3, [sp, #4]
c7e15c50:	e28b2d09 	add	r2, fp, #576	; 0x240
c7e15c54:	e0832002 	add	r2, r3, r2
c7e15c58:	e1a01009 	mov	r1, r9
c7e15c5c:	e59d300c 	ldr	r3, [sp, #12]
c7e15c60:	e1a00005 	mov	r0, r5
c7e15c64:	e1a0e00f 	mov	lr, pc
c7e15c68:	e596f0c8 	ldr	pc, [r6, #200]
		if (stat < 0)
c7e15c6c:	e3500000 	cmp	r0, #0	; 0x0
			mtd->ecc_stats.failed++;
c7e15c70:	b5953084 	ldrlt	r3, [r5, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15c74:	a5953080 	ldrge	r3, [r5, #128]
		chip->read_buf(mtd, ecc_code, eccbytes);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
		
		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15c78:	b2833001 	addlt	r3, r3, #1	; 0x1
		else
			mtd->ecc_stats.corrected += stat;
c7e15c7c:	a0833000 	addge	r3, r3, r0
		chip->read_buf(mtd, ecc_code, eccbytes);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
		
		stat = chip->ecc.correct(mtd, p, &ecc_code[i], &ecc_calc[i]);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15c80:	b5853084 	strlt	r3, [r5, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15c84:	a5853080 	strge	r3, [r5, #128]
		col = eccsize * ((mtd->writesize / eccsize) + 1 - eccsteps);
c7e15c88:	e5950014 	ldr	r0, [r5, #20]
c7e15c8c:	e1a0100a 	mov	r1, sl
c7e15c90:	eb00521c 	bl	c7e2a508 <__udivsi3>
c7e15c94:	e2800001 	add	r0, r0, #1	; 0x1
c7e15c98:	e0670000 	rsb	r0, r7, r0
c7e15c9c:	e002009a 	mul	r2, sl, r0
			mtd->ecc_stats.corrected += stat;
	}
#else
	int col = 0;
	int eccoffset,stat;
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {		
c7e15ca0:	e59dc010 	ldr	ip, [sp, #16]
c7e15ca4:	e2477001 	sub	r7, r7, #1	; 0x1
c7e15ca8:	e08bb00c 	add	fp, fp, ip
 *
 * Not for syndrome calculating ecc controllers which need a special oob layout
 */
static int nand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int page)
{
c7e15cac:	e089900a 	add	r9, r9, sl
		chip->read_buf(mtd, p, eccsize);
		eccoffset = mtd->writesize + eccpos[0] + (((mtd->writesize /
			 eccsize) - eccsteps) * eccbytes);
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, eccoffset, -1);
		chip->read_buf(mtd, ecc_code, eccbytes);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15cb0:	e59dc004 	ldr	ip, [sp, #4]
			mtd->ecc_stats.corrected += stat;
	}
#else
	int col = 0;
	int eccoffset,stat;
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {		
c7e15cb4:	e3570000 	cmp	r7, #0	; 0x0
		chip->read_buf(mtd, p, eccsize);
		eccoffset = mtd->writesize + eccpos[0] + (((mtd->writesize /
			 eccsize) - eccsteps) * eccbytes);
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, eccoffset, -1);
		chip->read_buf(mtd, ecc_code, eccbytes);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15cb8:	e08cc00b 	add	ip, ip, fp
	}
#else
	int col = 0;
	int eccoffset,stat;
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {		
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, col, -1);
c7e15cbc:	e3e03000 	mvn	r3, #0	; 0x0
c7e15cc0:	e1a00005 	mov	r0, r5
c7e15cc4:	e3a01005 	mov	r1, #5	; 0x5
		chip->read_buf(mtd, p, eccsize);
		eccoffset = mtd->writesize + eccpos[0] + (((mtd->writesize /
			 eccsize) - eccsteps) * eccbytes);
		chip->cmdfunc(mtd, NAND_CMD_RNDOUT, eccoffset, -1);
		chip->read_buf(mtd, ecc_code, eccbytes);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15cc8:	e58dc00c 	str	ip, [sp, #12]
			mtd->ecc_stats.corrected += stat;
	}
#else
	int col = 0;
	int eccoffset,stat;
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {		
c7e15ccc:	1affffba 	bne	c7e15bbc <nand_read_page_hwecc+0x48>
			mtd->ecc_stats.corrected += stat;
		col = eccsize * ((mtd->writesize / eccsize) + 1 - eccsteps);
	}
#endif
	return 0;
}
c7e15cd0:	e1a00007 	mov	r0, r7
c7e15cd4:	e28dd018 	add	sp, sp, #24	; 0x18
c7e15cd8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e15cdc <nand_read_page_hwecc_oob_first>:
 * "infix ECC" scheme and reads/writes ECC from the data area, by
 * overwriting the NAND manufacturer bad block markings.
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
c7e15cdc:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e15ce0:	e1a05001 	mov	r5, r1
	int i, eccsize = chip->ecc.size;
c7e15ce4:	e595c0a4 	ldr	ip, [r5, #164]
 * "infix ECC" scheme and reads/writes ECC from the data area, by
 * overwriting the NAND manufacturer bad block markings.
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
c7e15ce8:	e1a06000 	mov	r6, r0
	int i, eccsize = chip->ecc.size;
c7e15cec:	e58dc000 	str	ip, [sp]
	int eccbytes = chip->ecc.bytes;
c7e15cf0:	e595c0a8 	ldr	ip, [r5, #168]
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
	uint8_t *ecc_calc = chip->buffers->ecccalc;

	/* Read the OOB area first */
	chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
c7e15cf4:	e3a01050 	mov	r1, #80	; 0x50
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
c7e15cf8:	e58dc004 	str	ip, [sp, #4]
 * "infix ECC" scheme and reads/writes ECC from the data area, by
 * overwriting the NAND manufacturer bad block markings.
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
c7e15cfc:	e1a0b002 	mov	fp, r2
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
	uint8_t *ecc_calc = chip->buffers->ecccalc;

	/* Read the OOB area first */
	chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
c7e15d00:	e3a02000 	mov	r2, #0	; 0x0
 * "infix ECC" scheme and reads/writes ECC from the data area, by
 * overwriting the NAND manufacturer bad block markings.
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
c7e15d04:	e1a04003 	mov	r4, r3
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *ecc_code = chip->buffers->ecccode;
c7e15d08:	e59590e8 	ldr	r9, [r5, #232]
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
c7e15d0c:	e595a0a0 	ldr	sl, [r5, #160]
	uint8_t *p = buf;
	uint8_t *ecc_code = chip->buffers->ecccode;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e15d10:	e59570b8 	ldr	r7, [r5, #184]
	uint8_t *ecc_calc = chip->buffers->ecccalc;

	/* Read the OOB area first */
	chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
c7e15d14:	e1a0e00f 	mov	lr, pc
c7e15d18:	e595f034 	ldr	pc, [r5, #52]
	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
c7e15d1c:	e1a00006 	mov	r0, r6
c7e15d20:	e5951090 	ldr	r1, [r5, #144]
c7e15d24:	e5962018 	ldr	r2, [r6, #24]
c7e15d28:	e1a0e00f 	mov	lr, pc
c7e15d2c:	e595f014 	ldr	pc, [r5, #20]
	chip->cmdfunc(mtd, NAND_CMD_READ0, 0, page);
c7e15d30:	e3a01000 	mov	r1, #0	; 0x0
c7e15d34:	e1a00006 	mov	r0, r6
c7e15d38:	e1a02001 	mov	r2, r1
c7e15d3c:	e1a03004 	mov	r3, r4
c7e15d40:	e1a0e00f 	mov	lr, pc
c7e15d44:	e595f034 	ldr	pc, [r5, #52]
c7e15d48:	e1a00009 	mov	r0, r9
c7e15d4c:	e3a01000 	mov	r1, #0	; 0x0
c7e15d50:	ea000003 	b	c7e15d64 <nand_read_page_hwecc_oob_first+0x88>

	for (i = 0; i < chip->ecc.total; i++)
		ecc_code[i] = chip->oob_poi[eccpos[i]];
c7e15d54:	e5923004 	ldr	r3, [r2, #4]
c7e15d58:	e5952090 	ldr	r2, [r5, #144]
c7e15d5c:	e7d23003 	ldrb	r3, [r2, r3]
c7e15d60:	e5c0323f 	strb	r3, [r0, #575]
	/* Read the OOB area first */
	chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
	chip->cmdfunc(mtd, NAND_CMD_READ0, 0, page);

	for (i = 0; i < chip->ecc.total; i++)
c7e15d64:	e59530ac 	ldr	r3, [r5, #172]
		ecc_code[i] = chip->oob_poi[eccpos[i]];
c7e15d68:	e0872101 	add	r2, r7, r1, lsl #2
	/* Read the OOB area first */
	chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
	chip->cmdfunc(mtd, NAND_CMD_READ0, 0, page);

	for (i = 0; i < chip->ecc.total; i++)
c7e15d6c:	e1510003 	cmp	r1, r3
c7e15d70:	e2800001 	add	r0, r0, #1	; 0x1
c7e15d74:	e2811001 	add	r1, r1, #1	; 0x1
c7e15d78:	bafffff5 	blt	c7e15d54 <nand_read_page_hwecc_oob_first+0x78>
c7e15d7c:	e1a0400b 	mov	r4, fp
c7e15d80:	e3a07000 	mov	r7, #0	; 0x0
c7e15d84:	ea00001e 	b	c7e15e04 <nand_read_page_hwecc_oob_first+0x128>
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15d88:	e1a0e00f 	mov	lr, pc
c7e15d8c:	e595f0c0 	ldr	pc, [r5, #192]
		chip->read_buf(mtd, p, eccsize);
c7e15d90:	e1a01004 	mov	r1, r4
c7e15d94:	e1a00006 	mov	r0, r6
c7e15d98:	e59d2000 	ldr	r2, [sp]
c7e15d9c:	e1a0e00f 	mov	lr, pc
c7e15da0:	e595f014 	ldr	pc, [r5, #20]
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e15da4:	e1a01004 	mov	r1, r4
c7e15da8:	e0892007 	add	r2, r9, r7
c7e15dac:	e1a00006 	mov	r0, r6
c7e15db0:	e1a0e00f 	mov	lr, pc
c7e15db4:	e595f0c4 	ldr	pc, [r5, #196]

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], NULL);
c7e15db8:	e2872d09 	add	r2, r7, #576	; 0x240
c7e15dbc:	e3a03000 	mov	r3, #0	; 0x0
c7e15dc0:	e1a01004 	mov	r1, r4
c7e15dc4:	e0892002 	add	r2, r9, r2
c7e15dc8:	e1a00006 	mov	r0, r6
c7e15dcc:	e1a0e00f 	mov	lr, pc
c7e15dd0:	e595f0c8 	ldr	pc, [r5, #200]
		if (stat < 0)
c7e15dd4:	e3500000 	cmp	r0, #0	; 0x0
			mtd->ecc_stats.failed++;
c7e15dd8:	b5963084 	ldrlt	r3, [r6, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15ddc:	a5963080 	ldrge	r3, [r6, #128]
		chip->read_buf(mtd, p, eccsize);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], NULL);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15de0:	b2833001 	addlt	r3, r3, #1	; 0x1
		else
			mtd->ecc_stats.corrected += stat;
c7e15de4:	a0833000 	addge	r3, r3, r0
		chip->read_buf(mtd, p, eccsize);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

		stat = chip->ecc.correct(mtd, p, &ecc_code[i], NULL);
		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15de8:	b5863084 	strlt	r3, [r6, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15dec:	a5863080 	strge	r3, [r6, #128]
 * "infix ECC" scheme and reads/writes ECC from the data area, by
 * overwriting the NAND manufacturer bad block markings.
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
c7e15df0:	e59dc000 	ldr	ip, [sp]
	chip->cmdfunc(mtd, NAND_CMD_READ0, 0, page);

	for (i = 0; i < chip->ecc.total; i++)
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e15df4:	e59d3004 	ldr	r3, [sp, #4]
c7e15df8:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e15dfc:	e0877003 	add	r7, r7, r3
 * "infix ECC" scheme and reads/writes ECC from the data area, by
 * overwriting the NAND manufacturer bad block markings.
 */
static int nand_read_page_hwecc_oob_first(struct mtd_info *mtd,
	struct nand_chip *chip, uint8_t *buf, int page)
{
c7e15e00:	e084400c 	add	r4, r4, ip
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15e04:	e3a01000 	mov	r1, #0	; 0x0
	chip->cmdfunc(mtd, NAND_CMD_READ0, 0, page);

	for (i = 0; i < chip->ecc.total; i++)
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e15e08:	e15a0001 	cmp	sl, r1
		int stat;

		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15e0c:	e1a00006 	mov	r0, r6
	chip->cmdfunc(mtd, NAND_CMD_READ0, 0, page);

	for (i = 0; i < chip->ecc.total; i++)
		ecc_code[i] = chip->oob_poi[eccpos[i]];

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e15e10:	1affffdc 	bne	c7e15d88 <nand_read_page_hwecc_oob_first+0xac>
			mtd->ecc_stats.failed++;
		else
			mtd->ecc_stats.corrected += stat;
	}
	return 0;
}
c7e15e14:	e1a0000a 	mov	r0, sl
c7e15e18:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}

c7e15e1c <nand_read_page_syndrome>:
 * The hw generator calculates the error syndrome automatically. Therefor
 * we need a special oob layout and handling.
 */
static int nand_read_page_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				   uint8_t *buf, int page)
{
c7e15e1c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e15e20:	e1a04001 	mov	r4, r1
c7e15e24:	e1a05000 	mov	r5, r0
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;
c7e15e28:	e1a07002 	mov	r7, r2
 * we need a special oob layout and handling.
 */
static int nand_read_page_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				   uint8_t *buf, int page)
{
	int i, eccsize = chip->ecc.size;
c7e15e2c:	e591b0a4 	ldr	fp, [r1, #164]
	int eccbytes = chip->ecc.bytes;
c7e15e30:	e59190a8 	ldr	r9, [r1, #168]
	int eccsteps = chip->ecc.steps;
c7e15e34:	e591a0a0 	ldr	sl, [r1, #160]
	uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;
c7e15e38:	e5916090 	ldr	r6, [r1, #144]
c7e15e3c:	ea000031 	b	c7e15f08 <nand_read_page_syndrome+0xec>

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15e40:	e1a0e00f 	mov	lr, pc
c7e15e44:	e594f0c0 	ldr	pc, [r4, #192]
		chip->read_buf(mtd, p, eccsize);
c7e15e48:	e1a0200b 	mov	r2, fp
c7e15e4c:	e1a00005 	mov	r0, r5
c7e15e50:	e1a01007 	mov	r1, r7
c7e15e54:	e1a0e00f 	mov	lr, pc
c7e15e58:	e594f014 	ldr	pc, [r4, #20]

		if (chip->ecc.prepad) {
c7e15e5c:	e59420b0 	ldr	r2, [r4, #176]
c7e15e60:	e3520000 	cmp	r2, #0	; 0x0
c7e15e64:	0a000005 	beq	c7e15e80 <nand_read_page_syndrome+0x64>
			chip->read_buf(mtd, oob, chip->ecc.prepad);
c7e15e68:	e1a01006 	mov	r1, r6
c7e15e6c:	e1a00005 	mov	r0, r5
c7e15e70:	e1a0e00f 	mov	lr, pc
c7e15e74:	e594f014 	ldr	pc, [r4, #20]
			oob += chip->ecc.prepad;
c7e15e78:	e59430b0 	ldr	r3, [r4, #176]
c7e15e7c:	e0866003 	add	r6, r6, r3
		}

		chip->ecc.hwctl(mtd, NAND_ECC_READSYN);
c7e15e80:	e1a00005 	mov	r0, r5
c7e15e84:	e3a01002 	mov	r1, #2	; 0x2
c7e15e88:	e1a0e00f 	mov	lr, pc
c7e15e8c:	e594f0c0 	ldr	pc, [r4, #192]
		chip->read_buf(mtd, oob, eccbytes);
c7e15e90:	e1a01006 	mov	r1, r6
c7e15e94:	e1a00005 	mov	r0, r5
c7e15e98:	e1a02009 	mov	r2, r9
c7e15e9c:	e1a0e00f 	mov	lr, pc
c7e15ea0:	e594f014 	ldr	pc, [r4, #20]
		stat = chip->ecc.correct(mtd, p, oob, NULL);
c7e15ea4:	e3a03000 	mov	r3, #0	; 0x0
c7e15ea8:	e1a02006 	mov	r2, r6
c7e15eac:	e1a01007 	mov	r1, r7
c7e15eb0:	e1a00005 	mov	r0, r5
c7e15eb4:	e1a0e00f 	mov	lr, pc
c7e15eb8:	e594f0c8 	ldr	pc, [r4, #200]

		if (stat < 0)
c7e15ebc:	e3500000 	cmp	r0, #0	; 0x0
			mtd->ecc_stats.failed++;
c7e15ec0:	b5953084 	ldrlt	r3, [r5, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15ec4:	a5953080 	ldrge	r3, [r5, #128]
		chip->ecc.hwctl(mtd, NAND_ECC_READSYN);
		chip->read_buf(mtd, oob, eccbytes);
		stat = chip->ecc.correct(mtd, p, oob, NULL);

		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15ec8:	b2833001 	addlt	r3, r3, #1	; 0x1
		else
			mtd->ecc_stats.corrected += stat;
c7e15ecc:	a0833000 	addge	r3, r3, r0
		chip->ecc.hwctl(mtd, NAND_ECC_READSYN);
		chip->read_buf(mtd, oob, eccbytes);
		stat = chip->ecc.correct(mtd, p, oob, NULL);

		if (stat < 0)
			mtd->ecc_stats.failed++;
c7e15ed0:	b5853084 	strlt	r3, [r5, #132]
		else
			mtd->ecc_stats.corrected += stat;
c7e15ed4:	a5853080 	strge	r3, [r5, #128]

		oob += eccbytes;

		if (chip->ecc.postpad) {
c7e15ed8:	e59420b4 	ldr	r2, [r4, #180]
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e15edc:	e24aa001 	sub	sl, sl, #1	; 0x1
		else
			mtd->ecc_stats.corrected += stat;

		oob += eccbytes;

		if (chip->ecc.postpad) {
c7e15ee0:	e3520000 	cmp	r2, #0	; 0x0
 * The hw generator calculates the error syndrome automatically. Therefor
 * we need a special oob layout and handling.
 */
static int nand_read_page_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				   uint8_t *buf, int page)
{
c7e15ee4:	e087700b 	add	r7, r7, fp
		if (stat < 0)
			mtd->ecc_stats.failed++;
		else
			mtd->ecc_stats.corrected += stat;

		oob += eccbytes;
c7e15ee8:	e0866009 	add	r6, r6, r9

		if (chip->ecc.postpad) {
c7e15eec:	0a000005 	beq	c7e15f08 <nand_read_page_syndrome+0xec>
			chip->read_buf(mtd, oob, chip->ecc.postpad);
c7e15ef0:	e1a01006 	mov	r1, r6
c7e15ef4:	e1a00005 	mov	r0, r5
c7e15ef8:	e1a0e00f 	mov	lr, pc
c7e15efc:	e594f014 	ldr	pc, [r4, #20]
			oob += chip->ecc.postpad;
c7e15f00:	e59430b4 	ldr	r3, [r4, #180]
c7e15f04:	e0866003 	add	r6, r6, r3
	uint8_t *oob = chip->oob_poi;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		int stat;

		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15f08:	e3a01000 	mov	r1, #0	; 0x0
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e15f0c:	e15a0001 	cmp	sl, r1
		int stat;

		chip->ecc.hwctl(mtd, NAND_ECC_READ);
c7e15f10:	e1a00005 	mov	r0, r5
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e15f14:	1affffc9 	bne	c7e15e40 <nand_read_page_syndrome+0x24>
			oob += chip->ecc.postpad;
		}
	}

	/* Calculate remaining oob bytes */
	i = mtd->oobsize - (oob - chip->oob_poi);
c7e15f18:	e5943090 	ldr	r3, [r4, #144]
c7e15f1c:	e5952018 	ldr	r2, [r5, #24]
c7e15f20:	e0663003 	rsb	r3, r6, r3
	if (i)
c7e15f24:	e0932002 	adds	r2, r3, r2
c7e15f28:	0a000002 	beq	c7e15f38 <nand_read_page_syndrome+0x11c>
		chip->read_buf(mtd, oob, i);
c7e15f2c:	e1a01006 	mov	r1, r6
c7e15f30:	e1a0e00f 	mov	lr, pc
c7e15f34:	e594f014 	ldr	pc, [r4, #20]

	return 0;
}
c7e15f38:	e3a00000 	mov	r0, #0	; 0x0
c7e15f3c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e15f40 <nand_read_oob_std>:
 * @sndcmd:	flag whether to issue read command or not
 */
static int nand_read_oob_std(struct mtd_info *mtd, struct nand_chip *chip,
			     int page, int sndcmd)
{
	if (sndcmd) {
c7e15f40:	e3530000 	cmp	r3, #0	; 0x0
 * @page:	page number to read
 * @sndcmd:	flag whether to issue read command or not
 */
static int nand_read_oob_std(struct mtd_info *mtd, struct nand_chip *chip,
			     int page, int sndcmd)
{
c7e15f44:	e92d4070 	push	{r4, r5, r6, lr}
c7e15f48:	e1a04001 	mov	r4, r1
c7e15f4c:	e1a05000 	mov	r5, r0
	if (sndcmd) {
c7e15f50:	0a000004 	beq	c7e15f68 <nand_read_oob_std+0x28>
		chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
c7e15f54:	e1a03002 	mov	r3, r2
c7e15f58:	e3a01050 	mov	r1, #80	; 0x50
c7e15f5c:	e3a02000 	mov	r2, #0	; 0x0
c7e15f60:	e1a0e00f 	mov	lr, pc
c7e15f64:	e594f034 	ldr	pc, [r4, #52]
		sndcmd = 0;
	}
	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
c7e15f68:	e1a00005 	mov	r0, r5
c7e15f6c:	e5952018 	ldr	r2, [r5, #24]
c7e15f70:	e5941090 	ldr	r1, [r4, #144]
c7e15f74:	e1a0e00f 	mov	lr, pc
c7e15f78:	e594f014 	ldr	pc, [r4, #20]
	return sndcmd;
}
c7e15f7c:	e3a00000 	mov	r0, #0	; 0x0
c7e15f80:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e15f84 <nand_read_oob_syndrome>:
 * @page:	page number to read
 * @sndcmd:	flag whether to issue read command or not
 */
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
c7e15f84:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
c7e15f88:	e1a05001 	mov	r5, r1
	uint8_t *buf = chip->oob_poi;
	int length = mtd->oobsize;
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e15f8c:	e59130b0 	ldr	r3, [r1, #176]
c7e15f90:	e59110a8 	ldr	r1, [r1, #168]
c7e15f94:	e595c0b4 	ldr	ip, [r5, #180]
	int eccsize = chip->ecc.size;
c7e15f98:	e59540a4 	ldr	r4, [r5, #164]
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
	uint8_t *buf = chip->oob_poi;
	int length = mtd->oobsize;
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e15f9c:	e0833001 	add	r3, r3, r1
 * @page:	page number to read
 * @sndcmd:	flag whether to issue read command or not
 */
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
c7e15fa0:	e58d2000 	str	r2, [sp]
	uint8_t *buf = chip->oob_poi;
	int length = mtd->oobsize;
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e15fa4:	e083c00c 	add	ip, r3, ip
 * @sndcmd:	flag whether to issue read command or not
 */
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
	uint8_t *buf = chip->oob_poi;
c7e15fa8:	e595e090 	ldr	lr, [r5, #144]
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
	int eccsize = chip->ecc.size;
	uint8_t *bufpoi = buf;
	int i, toread, sndrnd = 0, pos;

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
c7e15fac:	e3a01000 	mov	r1, #0	; 0x0
c7e15fb0:	e1a02004 	mov	r2, r4
c7e15fb4:	e59d3000 	ldr	r3, [sp]
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
	uint8_t *buf = chip->oob_poi;
	int length = mtd->oobsize;
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e15fb8:	e58dc004 	str	ip, [sp, #4]
	int eccsize = chip->ecc.size;
	uint8_t *bufpoi = buf;
	int i, toread, sndrnd = 0, pos;

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
c7e15fbc:	e1a09001 	mov	r9, r1
 * @page:	page number to read
 * @sndcmd:	flag whether to issue read command or not
 */
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
c7e15fc0:	e1a06000 	mov	r6, r0
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
	int eccsize = chip->ecc.size;
	uint8_t *bufpoi = buf;
	int i, toread, sndrnd = 0, pos;

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
c7e15fc4:	e1a0b00e 	mov	fp, lr
 */
static int nand_read_oob_syndrome(struct mtd_info *mtd, struct nand_chip *chip,
				  int page, int sndcmd)
{
	uint8_t *buf = chip->oob_poi;
	int length = mtd->oobsize;
c7e15fc8:	e5907018 	ldr	r7, [r0, #24]
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
	int eccsize = chip->ecc.size;
	uint8_t *bufpoi = buf;
	int i, toread, sndrnd = 0, pos;

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
c7e15fcc:	e1a0e00f 	mov	lr, pc
c7e15fd0:	e595f034 	ldr	pc, [r5, #52]
c7e15fd4:	e59d3004 	ldr	r3, [sp, #4]
c7e15fd8:	e1a0a004 	mov	sl, r4
c7e15fdc:	e0834004 	add	r4, r3, r4
c7e15fe0:	e58d400c 	str	r4, [sp, #12]
c7e15fe4:	e58d9008 	str	r9, [sp, #8]
c7e15fe8:	ea00001c 	b	c7e16060 <nand_read_oob_syndrome+0xdc>
	for (i = 0; i < chip->ecc.steps; i++) {
		if (sndrnd) {
c7e15fec:	e59d3008 	ldr	r3, [sp, #8]
c7e15ff0:	e3530000 	cmp	r3, #0	; 0x0
c7e15ff4:	02833001 	addeq	r3, r3, #1	; 0x1
c7e15ff8:	058d3008 	streq	r3, [sp, #8]
c7e15ffc:	0a00000a 	beq	c7e1602c <nand_read_oob_syndrome+0xa8>
			pos = eccsize + i * (eccsize + chunk);
			if (mtd->writesize > 512)
c7e16000:	e5963014 	ldr	r3, [r6, #20]
				chip->cmdfunc(mtd, NAND_CMD_RNDOUT, pos, -1);
c7e16004:	e1a00006 	mov	r0, r6

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
	for (i = 0; i < chip->ecc.steps; i++) {
		if (sndrnd) {
			pos = eccsize + i * (eccsize + chunk);
			if (mtd->writesize > 512)
c7e16008:	e3530c02 	cmp	r3, #512	; 0x200
				chip->cmdfunc(mtd, NAND_CMD_RNDOUT, pos, -1);
c7e1600c:	e3a01005 	mov	r1, #5	; 0x5
c7e16010:	e3e03000 	mvn	r3, #0	; 0x0
			else
				chip->cmdfunc(mtd, NAND_CMD_READ0, pos, page);
c7e16014:	e1a0200a 	mov	r2, sl
c7e16018:	e595c034 	ldr	ip, [r5, #52]
c7e1601c:	91a00006 	movls	r0, r6
c7e16020:	93a01000 	movls	r1, #0	; 0x0
c7e16024:	959d3000 	ldrls	r3, [sp]
c7e16028:	e12fff3c 	blx	ip
		} else
			sndrnd = 1;
		toread = min_t(int, length, chunk);
c7e1602c:	e59d4004 	ldr	r4, [sp, #4]
		chip->read_buf(mtd, bufpoi, toread);
c7e16030:	e1a0100b 	mov	r1, fp
				chip->cmdfunc(mtd, NAND_CMD_RNDOUT, pos, -1);
			else
				chip->cmdfunc(mtd, NAND_CMD_READ0, pos, page);
		} else
			sndrnd = 1;
		toread = min_t(int, length, chunk);
c7e16034:	e1540007 	cmp	r4, r7
c7e16038:	a1a04007 	movge	r4, r7
		chip->read_buf(mtd, bufpoi, toread);
c7e1603c:	e1a00006 	mov	r0, r6
c7e16040:	e1a02004 	mov	r2, r4
c7e16044:	e1a0e00f 	mov	lr, pc
c7e16048:	e595f014 	ldr	pc, [r5, #20]
	int eccsize = chip->ecc.size;
	uint8_t *bufpoi = buf;
	int i, toread, sndrnd = 0, pos;

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
	for (i = 0; i < chip->ecc.steps; i++) {
c7e1604c:	e59d300c 	ldr	r3, [sp, #12]
		} else
			sndrnd = 1;
		toread = min_t(int, length, chunk);
		chip->read_buf(mtd, bufpoi, toread);
		bufpoi += toread;
		length -= toread;
c7e16050:	e0647007 	rsb	r7, r4, r7
				chip->cmdfunc(mtd, NAND_CMD_READ0, pos, page);
		} else
			sndrnd = 1;
		toread = min_t(int, length, chunk);
		chip->read_buf(mtd, bufpoi, toread);
		bufpoi += toread;
c7e16054:	e08bb004 	add	fp, fp, r4
	int eccsize = chip->ecc.size;
	uint8_t *bufpoi = buf;
	int i, toread, sndrnd = 0, pos;

	chip->cmdfunc(mtd, NAND_CMD_READ0, chip->ecc.size, page);
	for (i = 0; i < chip->ecc.steps; i++) {
c7e16058:	e2899001 	add	r9, r9, #1	; 0x1
c7e1605c:	e08aa003 	add	sl, sl, r3
c7e16060:	e59530a0 	ldr	r3, [r5, #160]
c7e16064:	e1590003 	cmp	r9, r3
c7e16068:	baffffdf 	blt	c7e15fec <nand_read_oob_syndrome+0x68>
		toread = min_t(int, length, chunk);
		chip->read_buf(mtd, bufpoi, toread);
		bufpoi += toread;
		length -= toread;
	}
	if (length > 0)
c7e1606c:	e3570000 	cmp	r7, #0	; 0x0
c7e16070:	da000004 	ble	c7e16088 <nand_read_oob_syndrome+0x104>
		chip->read_buf(mtd, bufpoi, length);
c7e16074:	e1a00006 	mov	r0, r6
c7e16078:	e1a0100b 	mov	r1, fp
c7e1607c:	e1a02007 	mov	r2, r7
c7e16080:	e1a0e00f 	mov	lr, pc
c7e16084:	e595f014 	ldr	pc, [r5, #20]

	return 1;
}
c7e16088:	e3a00001 	mov	r0, #1	; 0x1
c7e1608c:	e28dd010 	add	sp, sp, #16	; 0x10
c7e16090:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e16094 <nand_write_oob_std>:
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_std(struct mtd_info *mtd, struct nand_chip *chip,
			      int page)
{
c7e16094:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int status = 0;
	const uint8_t *buf = chip->oob_poi;
c7e16098:	e5916090 	ldr	r6, [r1, #144]
	int length = mtd->oobsize;
c7e1609c:	e5907018 	ldr	r7, [r0, #24]
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_std(struct mtd_info *mtd, struct nand_chip *chip,
			      int page)
{
c7e160a0:	e1a05001 	mov	r5, r1
c7e160a4:	e1a04000 	mov	r4, r0
c7e160a8:	e1a03002 	mov	r3, r2
	int status = 0;
	const uint8_t *buf = chip->oob_poi;
	int length = mtd->oobsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, mtd->writesize, page);
c7e160ac:	e3a01080 	mov	r1, #128	; 0x80
c7e160b0:	e5902014 	ldr	r2, [r0, #20]
c7e160b4:	e1a0e00f 	mov	lr, pc
c7e160b8:	e595f034 	ldr	pc, [r5, #52]
	chip->write_buf(mtd, buf, length);
c7e160bc:	e1a00004 	mov	r0, r4
c7e160c0:	e1a01006 	mov	r1, r6
c7e160c4:	e1a02007 	mov	r2, r7
c7e160c8:	e1a0e00f 	mov	lr, pc
c7e160cc:	e595f010 	ldr	pc, [r5, #16]
	/* Send command to program the OOB data */
	chip->cmdfunc(mtd, NAND_CMD_PAGEPROG, -1, -1);
c7e160d0:	e3e02000 	mvn	r2, #0	; 0x0
c7e160d4:	e1a00004 	mov	r0, r4
c7e160d8:	e1a03002 	mov	r3, r2
c7e160dc:	e3a01010 	mov	r1, #16	; 0x10
c7e160e0:	e1a0e00f 	mov	lr, pc
c7e160e4:	e595f034 	ldr	pc, [r5, #52]

	status = chip->waitfunc(mtd, chip);
c7e160e8:	e1a00004 	mov	r0, r4
c7e160ec:	e1a01005 	mov	r1, r5
c7e160f0:	e1a0e00f 	mov	lr, pc
c7e160f4:	e595f038 	ldr	pc, [r5, #56]

	return status & NAND_STATUS_FAIL ? -EIO : 0;
}
c7e160f8:	e2100001 	ands	r0, r0, #1	; 0x1
c7e160fc:	13e00004 	mvnne	r0, #4	; 0x4
c7e16100:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e16104 <nand_write_oob_syndrome>:
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
c7e16104:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e16108:	e59130b0 	ldr	r3, [r1, #176]
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
c7e1610c:	e1a06001 	mov	r6, r1
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e16110:	e59110a8 	ldr	r1, [r1, #168]
c7e16114:	e596c0b4 	ldr	ip, [r6, #180]
	/*
	 * data-ecc-data-ecc ... ecc-oob
	 * or
	 * data-pad-ecc-pad-data-pad .... ecc-pad-oob
	 */
	if (!chip->ecc.prepad && !chip->ecc.postpad) {
c7e16118:	e3530000 	cmp	r3, #0	; 0x0
 * @page:	page number to write
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e1611c:	e0833001 	add	r3, r3, r1
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
c7e16120:	e24dd020 	sub	sp, sp, #32	; 0x20
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e16124:	e083300c 	add	r3, r3, ip
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
c7e16128:	e1a01002 	mov	r1, r2
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
c7e1612c:	e58d3004 	str	r3, [sp, #4]
	int eccsize = chip->ecc.size, length = mtd->oobsize;
	int i, len, pos, status = 0, sndcmd = 0, steps = chip->ecc.steps;
c7e16130:	e59620a0 	ldr	r2, [r6, #160]
	const uint8_t *bufpoi = chip->oob_poi;
c7e16134:	e5963090 	ldr	r3, [r6, #144]
 * @chip:	nand chip info structure
 * @page:	page number to write
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
c7e16138:	e1a07000 	mov	r7, r0
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
	int eccsize = chip->ecc.size, length = mtd->oobsize;
c7e1613c:	e596b0a4 	ldr	fp, [r6, #164]
c7e16140:	e5904018 	ldr	r4, [r0, #24]
	int i, len, pos, status = 0, sndcmd = 0, steps = chip->ecc.steps;
c7e16144:	e58d2008 	str	r2, [sp, #8]
	const uint8_t *bufpoi = chip->oob_poi;
c7e16148:	e58d300c 	str	r3, [sp, #12]
	/*
	 * data-ecc-data-ecc ... ecc-oob
	 * or
	 * data-pad-ecc-pad-data-pad .... ecc-pad-oob
	 */
	if (!chip->ecc.prepad && !chip->ecc.postpad) {
c7e1614c:	1a000007 	bne	c7e16170 <nand_write_oob_syndrome+0x6c>
c7e16150:	e35c0000 	cmp	ip, #0	; 0x0
c7e16154:	1a000005 	bne	c7e16170 <nand_write_oob_syndrome+0x6c>
		pos = steps * (eccsize + chunk);
c7e16158:	e59d2004 	ldr	r2, [sp, #4]
c7e1615c:	e082300b 	add	r3, r2, fp
c7e16160:	e59d2008 	ldr	r2, [sp, #8]
c7e16164:	e58dc008 	str	ip, [sp, #8]
c7e16168:	e0020293 	mul	r2, r3, r2
c7e1616c:	ea000000 	b	c7e16174 <nand_write_oob_syndrome+0x70>
	/*
	 * data-ecc-data-ecc ... ecc-oob
	 * or
	 * data-pad-ecc-pad-data-pad .... ecc-pad-oob
	 */
	if (!chip->ecc.prepad && !chip->ecc.postpad) {
c7e16170:	e1a0200b 	mov	r2, fp
		pos = steps * (eccsize + chunk);
		steps = 0;
	} else
		pos = eccsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, pos, page);
c7e16174:	e1a03001 	mov	r3, r1
c7e16178:	e1a00007 	mov	r0, r7
c7e1617c:	e3a01080 	mov	r1, #128	; 0x80
c7e16180:	e1a0e00f 	mov	lr, pc
c7e16184:	e596f034 	ldr	pc, [r6, #52]
c7e16188:	e59d3004 	ldr	r3, [sp, #4]
c7e1618c:	e3a09000 	mov	r9, #0	; 0x0
c7e16190:	e083300b 	add	r3, r3, fp
c7e16194:	e58d3014 	str	r3, [sp, #20]
 */
static int nand_write_oob_syndrome(struct mtd_info *mtd,
				   struct nand_chip *chip, int page)
{
	int chunk = chip->ecc.bytes + chip->ecc.prepad + chip->ecc.postpad;
	int eccsize = chip->ecc.size, length = mtd->oobsize;
c7e16198:	e1a0a004 	mov	sl, r4
		pos = steps * (eccsize + chunk);
		steps = 0;
	} else
		pos = eccsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, pos, page);
c7e1619c:	e58db010 	str	fp, [sp, #16]
c7e161a0:	e1a03009 	mov	r3, r9
c7e161a4:	ea00002c 	b	c7e1625c <nand_write_oob_syndrome+0x158>
	for (i = 0; i < steps; i++) {
		if (sndcmd) {
c7e161a8:	e3530000 	cmp	r3, #0	; 0x0
c7e161ac:	0a000018 	beq	c7e16214 <nand_write_oob_syndrome+0x110>
			if (mtd->writesize <= 512) {
c7e161b0:	e5973014 	ldr	r3, [r7, #20]
c7e161b4:	e3530c02 	cmp	r3, #512	; 0x200
				uint32_t fill = 0xFFFFFFFF;
c7e161b8:	93e03000 	mvnls	r3, #0	; 0x0
c7e161bc:	958d301c 	strls	r3, [sp, #28]
c7e161c0:	91a0500b 	movls	r5, fp
		pos = eccsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, pos, page);
	for (i = 0; i < steps; i++) {
		if (sndcmd) {
			if (mtd->writesize <= 512) {
c7e161c4:	9a000007 	bls	c7e161e8 <nand_write_oob_syndrome+0xe4>
c7e161c8:	ea00000b 	b	c7e161fc <nand_write_oob_syndrome+0xf8>
				uint32_t fill = 0xFFFFFFFF;

				len = eccsize;
				while (len > 0) {
					int num = min_t(int, len, 4);
c7e161cc:	e3550004 	cmp	r5, #4	; 0x4
c7e161d0:	b1a04005 	movlt	r4, r5
c7e161d4:	a3a04004 	movge	r4, #4	; 0x4
					chip->write_buf(mtd, (uint8_t *)&fill,
c7e161d8:	e1a02004 	mov	r2, r4
c7e161dc:	e1a0e00f 	mov	lr, pc
c7e161e0:	e596f010 	ldr	pc, [r6, #16]
							num);
					len -= num;
c7e161e4:	e0645005 	rsb	r5, r4, r5
		if (sndcmd) {
			if (mtd->writesize <= 512) {
				uint32_t fill = 0xFFFFFFFF;

				len = eccsize;
				while (len > 0) {
c7e161e8:	e3550000 	cmp	r5, #0	; 0x0
					int num = min_t(int, len, 4);
					chip->write_buf(mtd, (uint8_t *)&fill,
c7e161ec:	e1a00007 	mov	r0, r7
c7e161f0:	e28d101c 	add	r1, sp, #28	; 0x1c
		if (sndcmd) {
			if (mtd->writesize <= 512) {
				uint32_t fill = 0xFFFFFFFF;

				len = eccsize;
				while (len > 0) {
c7e161f4:	cafffff4 	bgt	c7e161cc <nand_write_oob_syndrome+0xc8>
c7e161f8:	ea000005 	b	c7e16214 <nand_write_oob_syndrome+0x110>
							num);
					len -= num;
				}
			} else {
				pos = eccsize + i * (eccsize + chunk);
				chip->cmdfunc(mtd, NAND_CMD_RNDIN, pos, -1);
c7e161fc:	e1a00007 	mov	r0, r7
c7e16200:	e3a01085 	mov	r1, #133	; 0x85
c7e16204:	e59d2010 	ldr	r2, [sp, #16]
c7e16208:	e3e03000 	mvn	r3, #0	; 0x0
c7e1620c:	e1a0e00f 	mov	lr, pc
c7e16210:	e596f034 	ldr	pc, [r6, #52]
			}
		} else
			sndcmd = 1;
		len = min_t(int, length, chunk);
c7e16214:	e59d4004 	ldr	r4, [sp, #4]
		chip->write_buf(mtd, bufpoi, len);
c7e16218:	e59d100c 	ldr	r1, [sp, #12]
				pos = eccsize + i * (eccsize + chunk);
				chip->cmdfunc(mtd, NAND_CMD_RNDIN, pos, -1);
			}
		} else
			sndcmd = 1;
		len = min_t(int, length, chunk);
c7e1621c:	e154000a 	cmp	r4, sl
c7e16220:	a1a0400a 	movge	r4, sl
		chip->write_buf(mtd, bufpoi, len);
c7e16224:	e1a02004 	mov	r2, r4
c7e16228:	e1a00007 	mov	r0, r7
c7e1622c:	e1a0e00f 	mov	lr, pc
c7e16230:	e596f010 	ldr	pc, [r6, #16]
		bufpoi += len;
c7e16234:	e59d200c 	ldr	r2, [sp, #12]
		steps = 0;
	} else
		pos = eccsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, pos, page);
	for (i = 0; i < steps; i++) {
c7e16238:	e59d3010 	ldr	r3, [sp, #16]
			}
		} else
			sndcmd = 1;
		len = min_t(int, length, chunk);
		chip->write_buf(mtd, bufpoi, len);
		bufpoi += len;
c7e1623c:	e0822004 	add	r2, r2, r4
c7e16240:	e58d200c 	str	r2, [sp, #12]
		steps = 0;
	} else
		pos = eccsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, pos, page);
	for (i = 0; i < steps; i++) {
c7e16244:	e59d2014 	ldr	r2, [sp, #20]
		} else
			sndcmd = 1;
		len = min_t(int, length, chunk);
		chip->write_buf(mtd, bufpoi, len);
		bufpoi += len;
		length -= len;
c7e16248:	e064a00a 	rsb	sl, r4, sl
		steps = 0;
	} else
		pos = eccsize;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, pos, page);
	for (i = 0; i < steps; i++) {
c7e1624c:	e0833002 	add	r3, r3, r2
c7e16250:	e58d3010 	str	r3, [sp, #16]
c7e16254:	e2899001 	add	r9, r9, #1	; 0x1
c7e16258:	e3a03001 	mov	r3, #1	; 0x1
c7e1625c:	e59d2008 	ldr	r2, [sp, #8]
c7e16260:	e1590002 	cmp	r9, r2
c7e16264:	baffffcf 	blt	c7e161a8 <nand_write_oob_syndrome+0xa4>
		len = min_t(int, length, chunk);
		chip->write_buf(mtd, bufpoi, len);
		bufpoi += len;
		length -= len;
	}
	if (length > 0)
c7e16268:	e35a0000 	cmp	sl, #0	; 0x0
c7e1626c:	da000004 	ble	c7e16284 <nand_write_oob_syndrome+0x180>
		chip->write_buf(mtd, bufpoi, length);
c7e16270:	e59d100c 	ldr	r1, [sp, #12]
c7e16274:	e1a0200a 	mov	r2, sl
c7e16278:	e1a00007 	mov	r0, r7
c7e1627c:	e1a0e00f 	mov	lr, pc
c7e16280:	e596f010 	ldr	pc, [r6, #16]

	chip->cmdfunc(mtd, NAND_CMD_PAGEPROG, -1, -1);
c7e16284:	e3e02000 	mvn	r2, #0	; 0x0
c7e16288:	e1a03002 	mov	r3, r2
c7e1628c:	e1a00007 	mov	r0, r7
c7e16290:	e3a01010 	mov	r1, #16	; 0x10
c7e16294:	e1a0e00f 	mov	lr, pc
c7e16298:	e596f034 	ldr	pc, [r6, #52]
	status = chip->waitfunc(mtd, chip);
c7e1629c:	e1a00007 	mov	r0, r7
c7e162a0:	e1a01006 	mov	r1, r6
c7e162a4:	e1a0e00f 	mov	lr, pc
c7e162a8:	e596f038 	ldr	pc, [r6, #56]

	return status & NAND_STATUS_FAIL ? -EIO : 0;
}
c7e162ac:	e2100001 	ands	r0, r0, #1	; 0x1
c7e162b0:	13e00004 	mvnne	r0, #4	; 0x4
c7e162b4:	e28dd020 	add	sp, sp, #32	; 0x20
c7e162b8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e162bc <nand_write_page_raw>:
 *
 * Not for syndrome calculating ecc controllers, which use a special oob layout
 */
static void nand_write_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
				const uint8_t *buf)
{
c7e162bc:	e92d4070 	push	{r4, r5, r6, lr}
c7e162c0:	e1a05000 	mov	r5, r0
c7e162c4:	e1a04001 	mov	r4, r1
	chip->write_buf(mtd, buf, mtd->writesize);
c7e162c8:	e1a01002 	mov	r1, r2
c7e162cc:	e5902014 	ldr	r2, [r0, #20]
c7e162d0:	e1a0e00f 	mov	lr, pc
c7e162d4:	e594f010 	ldr	pc, [r4, #16]
	chip->write_buf(mtd, chip->oob_poi, mtd->oobsize);
c7e162d8:	e1a00005 	mov	r0, r5
c7e162dc:	e5941090 	ldr	r1, [r4, #144]
c7e162e0:	e5952018 	ldr	r2, [r5, #24]
c7e162e4:	e1a0e00f 	mov	lr, pc
c7e162e8:	e594f010 	ldr	pc, [r4, #16]
}
c7e162ec:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e162f0 <nand_write_page_raw_syndrome>:
 * We need a special oob layout and handling even when ECC isn't checked.
 */
static void nand_write_page_raw_syndrome(struct mtd_info *mtd,
					struct nand_chip *chip,
					const uint8_t *buf)
{
c7e162f0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e162f4:	e1a04001 	mov	r4, r1
c7e162f8:	e1a06000 	mov	r6, r0
c7e162fc:	e1a0a002 	mov	sl, r2
	int eccsize = chip->ecc.size;
c7e16300:	e591b0a4 	ldr	fp, [r1, #164]
	int eccbytes = chip->ecc.bytes;
c7e16304:	e59190a8 	ldr	r9, [r1, #168]
	uint8_t *oob = chip->oob_poi;
c7e16308:	e5915090 	ldr	r5, [r1, #144]
	int steps, size;

	for (steps = chip->ecc.steps; steps > 0; steps--) {
c7e1630c:	e59170a0 	ldr	r7, [r1, #160]
c7e16310:	ea000019 	b	c7e1637c <nand_write_page_raw_syndrome+0x8c>
		chip->write_buf(mtd, buf, eccsize);
c7e16314:	e1a0e00f 	mov	lr, pc
c7e16318:	e594f010 	ldr	pc, [r4, #16]
		buf += eccsize;

		if (chip->ecc.prepad) {
c7e1631c:	e59420b0 	ldr	r2, [r4, #176]
c7e16320:	e3520000 	cmp	r2, #0	; 0x0
c7e16324:	0a000005 	beq	c7e16340 <nand_write_page_raw_syndrome+0x50>
			chip->write_buf(mtd, oob, chip->ecc.prepad);
c7e16328:	e1a01005 	mov	r1, r5
c7e1632c:	e1a00006 	mov	r0, r6
c7e16330:	e1a0e00f 	mov	lr, pc
c7e16334:	e594f010 	ldr	pc, [r4, #16]
			oob += chip->ecc.prepad;
c7e16338:	e59430b0 	ldr	r3, [r4, #176]
c7e1633c:	e0855003 	add	r5, r5, r3
		}

		chip->read_buf(mtd, oob, eccbytes);
c7e16340:	e1a01005 	mov	r1, r5
c7e16344:	e1a02009 	mov	r2, r9
c7e16348:	e1a00006 	mov	r0, r6
c7e1634c:	e1a0e00f 	mov	lr, pc
c7e16350:	e594f014 	ldr	pc, [r4, #20]
		oob += eccbytes;

		if (chip->ecc.postpad) {
c7e16354:	e59420b4 	ldr	r2, [r4, #180]
			chip->write_buf(mtd, oob, chip->ecc.prepad);
			oob += chip->ecc.prepad;
		}

		chip->read_buf(mtd, oob, eccbytes);
		oob += eccbytes;
c7e16358:	e0855009 	add	r5, r5, r9

		if (chip->ecc.postpad) {
c7e1635c:	e3520000 	cmp	r2, #0	; 0x0
c7e16360:	0a000005 	beq	c7e1637c <nand_write_page_raw_syndrome+0x8c>
			chip->write_buf(mtd, oob, chip->ecc.postpad);
c7e16364:	e1a01005 	mov	r1, r5
c7e16368:	e1a00006 	mov	r0, r6
c7e1636c:	e1a0e00f 	mov	lr, pc
c7e16370:	e594f010 	ldr	pc, [r4, #16]
			oob += chip->ecc.postpad;
c7e16374:	e59430b4 	ldr	r3, [r4, #180]
c7e16378:	e0855003 	add	r5, r5, r3
	int eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	uint8_t *oob = chip->oob_poi;
	int steps, size;

	for (steps = chip->ecc.steps; steps > 0; steps--) {
c7e1637c:	e3570000 	cmp	r7, #0	; 0x0
		chip->write_buf(mtd, buf, eccsize);
c7e16380:	e1a0100a 	mov	r1, sl
c7e16384:	e1a00006 	mov	r0, r6
c7e16388:	e1a0200b 	mov	r2, fp
 * We need a special oob layout and handling even when ECC isn't checked.
 */
static void nand_write_page_raw_syndrome(struct mtd_info *mtd,
					struct nand_chip *chip,
					const uint8_t *buf)
{
c7e1638c:	e08aa00b 	add	sl, sl, fp
	int eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	uint8_t *oob = chip->oob_poi;
	int steps, size;

	for (steps = chip->ecc.steps; steps > 0; steps--) {
c7e16390:	e2477001 	sub	r7, r7, #1	; 0x1
c7e16394:	caffffde 	bgt	c7e16314 <nand_write_page_raw_syndrome+0x24>
			chip->write_buf(mtd, oob, chip->ecc.postpad);
			oob += chip->ecc.postpad;
		}
	}

	size = mtd->oobsize - (oob - chip->oob_poi);
c7e16398:	e5943090 	ldr	r3, [r4, #144]
c7e1639c:	e5962018 	ldr	r2, [r6, #24]
c7e163a0:	e0653003 	rsb	r3, r5, r3
	if (size)
c7e163a4:	e0932002 	adds	r2, r3, r2
c7e163a8:	08bd8ef0 	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
		chip->write_buf(mtd, oob, size);
c7e163ac:	e1a01005 	mov	r1, r5
c7e163b0:	e1a0e00f 	mov	lr, pc
c7e163b4:	e594f010 	ldr	pc, [r4, #16]
c7e163b8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e163bc <nand_write_page_swecc>:
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e163bc:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e163c0:	e59130b8 	ldr	r3, [r1, #184]
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e163c4:	e1a04001 	mov	r4, r1
c7e163c8:	e58d2004 	str	r2, [sp, #4]
c7e163cc:	e58d0008 	str	r0, [sp, #8]
	int i, eccsize = chip->ecc.size;
c7e163d0:	e591b0a4 	ldr	fp, [r1, #164]
	int eccbytes = chip->ecc.bytes;
c7e163d4:	e591a0a8 	ldr	sl, [r1, #168]
	int eccsteps = chip->ecc.steps;
c7e163d8:	e59170a0 	ldr	r7, [r1, #160]
	uint8_t *ecc_calc = chip->buffers->ecccalc;
c7e163dc:	e59190e8 	ldr	r9, [r1, #232]
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e163e0:	e58d300c 	str	r3, [sp, #12]
c7e163e4:	e1a06002 	mov	r6, r2
c7e163e8:	e3a05000 	mov	r5, #0	; 0x0
c7e163ec:	ea000002 	b	c7e163fc <nand_write_page_swecc+0x40>

	/* Software ecc calculation */
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e163f0:	e1a0e00f 	mov	lr, pc
c7e163f4:	e594f0c4 	ldr	pc, [r4, #196]
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	/* Software ecc calculation */
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e163f8:	e2477001 	sub	r7, r7, #1	; 0x1
c7e163fc:	e3570000 	cmp	r7, #0	; 0x0
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e16400:	e1a01006 	mov	r1, r6
c7e16404:	e0892005 	add	r2, r9, r5
c7e16408:	e59d0008 	ldr	r0, [sp, #8]
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	/* Software ecc calculation */
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e1640c:	e085500a 	add	r5, r5, sl
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_swecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e16410:	e086600b 	add	r6, r6, fp
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	/* Software ecc calculation */
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
c7e16414:	1afffff5 	bne	c7e163f0 <nand_write_page_swecc+0x34>
c7e16418:	e1a00007 	mov	r0, r7
c7e1641c:	ea000004 	b	c7e16434 <nand_write_page_swecc+0x78>
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

	for (i = 0; i < chip->ecc.total; i++)
		chip->oob_poi[eccpos[i]] = ecc_calc[i];
c7e16420:	e5921004 	ldr	r1, [r2, #4]
c7e16424:	e5943090 	ldr	r3, [r4, #144]
c7e16428:	e7d92000 	ldrb	r2, [r9, r0]

	/* Software ecc calculation */
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

	for (i = 0; i < chip->ecc.total; i++)
c7e1642c:	e2800001 	add	r0, r0, #1	; 0x1
		chip->oob_poi[eccpos[i]] = ecc_calc[i];
c7e16430:	e7c32001 	strb	r2, [r3, r1]
c7e16434:	e59d300c 	ldr	r3, [sp, #12]
c7e16438:	e0832100 	add	r2, r3, r0, lsl #2

	/* Software ecc calculation */
	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize)
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);

	for (i = 0; i < chip->ecc.total; i++)
c7e1643c:	e59430ac 	ldr	r3, [r4, #172]
c7e16440:	e1500003 	cmp	r0, r3
c7e16444:	bafffff5 	blt	c7e16420 <nand_write_page_swecc+0x64>
		chip->oob_poi[eccpos[i]] = ecc_calc[i];

	chip->ecc.write_page_raw(mtd, chip, buf);
c7e16448:	e59d0008 	ldr	r0, [sp, #8]
c7e1644c:	e59d2004 	ldr	r2, [sp, #4]
c7e16450:	e1a01004 	mov	r1, r4
c7e16454:	e1a0e00f 	mov	lr, pc
c7e16458:	e594f0d0 	ldr	pc, [r4, #208]
}
c7e1645c:	e8bd8eff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}

c7e16460 <nand_write_page_hwecc>:
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e16460:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
c7e16464:	e59130a8 	ldr	r3, [r1, #168]
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e16468:	e1a04001 	mov	r4, r1
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
c7e1646c:	e58d3004 	str	r3, [sp, #4]
	int eccsteps = chip->ecc.steps;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e16470:	e59130b8 	ldr	r3, [r1, #184]
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e16474:	e1a0a000 	mov	sl, r0
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e16478:	e1a07002 	mov	r7, r2
 * @buf:	data buffer
 */
static void nand_write_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
	int i, eccsize = chip->ecc.size;
c7e1647c:	e59190a4 	ldr	r9, [r1, #164]
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
c7e16480:	e59150a0 	ldr	r5, [r1, #160]
	uint8_t *ecc_calc = chip->buffers->ecccalc;
c7e16484:	e591b0e8 	ldr	fp, [r1, #232]
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;
c7e16488:	e58d3000 	str	r3, [sp]
c7e1648c:	e3a06000 	mov	r6, #0	; 0x0
c7e16490:	ea00000f 	b	c7e164d4 <nand_write_page_hwecc+0x74>

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
		chip->ecc.hwctl(mtd, NAND_ECC_WRITE);
c7e16494:	e1a0e00f 	mov	lr, pc
c7e16498:	e594f0c0 	ldr	pc, [r4, #192]
		chip->write_buf(mtd, p, eccsize);
c7e1649c:	e1a01007 	mov	r1, r7
c7e164a0:	e1a0000a 	mov	r0, sl
c7e164a4:	e1a02009 	mov	r2, r9
c7e164a8:	e1a0e00f 	mov	lr, pc
c7e164ac:	e594f010 	ldr	pc, [r4, #16]
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
c7e164b0:	e1a01007 	mov	r1, r7
c7e164b4:	e08b2006 	add	r2, fp, r6
c7e164b8:	e1a0000a 	mov	r0, sl
c7e164bc:	e1a0e00f 	mov	lr, pc
c7e164c0:	e594f0c4 	ldr	pc, [r4, #196]
	int eccsteps = chip->ecc.steps;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e164c4:	e59d3004 	ldr	r3, [sp, #4]
c7e164c8:	e2455001 	sub	r5, r5, #1	; 0x1
c7e164cc:	e0866003 	add	r6, r6, r3
 * @chip:	nand chip info structure
 * @buf:	data buffer
 */
static void nand_write_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				  const uint8_t *buf)
{
c7e164d0:	e0877009 	add	r7, r7, r9
	int eccsteps = chip->ecc.steps;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e164d4:	e3550000 	cmp	r5, #0	; 0x0
		chip->ecc.hwctl(mtd, NAND_ECC_WRITE);
c7e164d8:	e1a0000a 	mov	r0, sl
c7e164dc:	e3a01001 	mov	r1, #1	; 0x1
	int eccsteps = chip->ecc.steps;
	uint8_t *ecc_calc = chip->buffers->ecccalc;
	const uint8_t *p = buf;
	uint32_t *eccpos = chip->ecc.layout->eccpos;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e164e0:	1affffeb 	bne	c7e16494 <nand_write_page_hwecc+0x34>
c7e164e4:	e1a00005 	mov	r0, r5
c7e164e8:	ea000004 	b	c7e16500 <nand_write_page_hwecc+0xa0>
		chip->write_buf(mtd, p, eccsize);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
	}

	for (i = 0; i < chip->ecc.total; i++)
		chip->oob_poi[eccpos[i]] = ecc_calc[i];
c7e164ec:	e5921004 	ldr	r1, [r2, #4]
c7e164f0:	e5943090 	ldr	r3, [r4, #144]
c7e164f4:	e7db2000 	ldrb	r2, [fp, r0]
		chip->ecc.hwctl(mtd, NAND_ECC_WRITE);
		chip->write_buf(mtd, p, eccsize);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
	}

	for (i = 0; i < chip->ecc.total; i++)
c7e164f8:	e2800001 	add	r0, r0, #1	; 0x1
		chip->oob_poi[eccpos[i]] = ecc_calc[i];
c7e164fc:	e7c32001 	strb	r2, [r3, r1]
c7e16500:	e59d3000 	ldr	r3, [sp]
c7e16504:	e0832100 	add	r2, r3, r0, lsl #2
		chip->ecc.hwctl(mtd, NAND_ECC_WRITE);
		chip->write_buf(mtd, p, eccsize);
		chip->ecc.calculate(mtd, p, &ecc_calc[i]);
	}

	for (i = 0; i < chip->ecc.total; i++)
c7e16508:	e59430ac 	ldr	r3, [r4, #172]
c7e1650c:	e1500003 	cmp	r0, r3
c7e16510:	bafffff5 	blt	c7e164ec <nand_write_page_hwecc+0x8c>
		chip->oob_poi[eccpos[i]] = ecc_calc[i];

	chip->write_buf(mtd, chip->oob_poi, mtd->oobsize);
c7e16514:	e1a0000a 	mov	r0, sl
c7e16518:	e5941090 	ldr	r1, [r4, #144]
c7e1651c:	e59a2018 	ldr	r2, [sl, #24]
c7e16520:	e1a0e00f 	mov	lr, pc
c7e16524:	e594f010 	ldr	pc, [r4, #16]
}
c7e16528:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}

c7e1652c <nand_write_page_syndrome>:
 * The hw generator calculates the error syndrome automatically. Therefor
 * we need a special oob layout and handling.
 */
static void nand_write_page_syndrome(struct mtd_info *mtd,
				    struct nand_chip *chip, const uint8_t *buf)
{
c7e1652c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e16530:	e1a04001 	mov	r4, r1
c7e16534:	e1a06000 	mov	r6, r0
	int i, eccsize = chip->ecc.size;
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	const uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;
c7e16538:	e1a07002 	mov	r7, r2
 * we need a special oob layout and handling.
 */
static void nand_write_page_syndrome(struct mtd_info *mtd,
				    struct nand_chip *chip, const uint8_t *buf)
{
	int i, eccsize = chip->ecc.size;
c7e1653c:	e591b0a4 	ldr	fp, [r1, #164]
	int eccbytes = chip->ecc.bytes;
c7e16540:	e59190a8 	ldr	r9, [r1, #168]
	int eccsteps = chip->ecc.steps;
c7e16544:	e591a0a0 	ldr	sl, [r1, #160]
	const uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;
c7e16548:	e5915090 	ldr	r5, [r1, #144]
c7e1654c:	ea000024 	b	c7e165e4 <nand_write_page_syndrome+0xb8>

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {

		chip->ecc.hwctl(mtd, NAND_ECC_WRITE);
c7e16550:	e1a0e00f 	mov	lr, pc
c7e16554:	e594f0c0 	ldr	pc, [r4, #192]
		chip->write_buf(mtd, p, eccsize);
c7e16558:	e1a0200b 	mov	r2, fp
c7e1655c:	e1a00006 	mov	r0, r6
c7e16560:	e1a01007 	mov	r1, r7
c7e16564:	e1a0e00f 	mov	lr, pc
c7e16568:	e594f010 	ldr	pc, [r4, #16]

		if (chip->ecc.prepad) {
c7e1656c:	e59420b0 	ldr	r2, [r4, #176]
c7e16570:	e3520000 	cmp	r2, #0	; 0x0
c7e16574:	0a000005 	beq	c7e16590 <nand_write_page_syndrome+0x64>
			chip->write_buf(mtd, oob, chip->ecc.prepad);
c7e16578:	e1a01005 	mov	r1, r5
c7e1657c:	e1a00006 	mov	r0, r6
c7e16580:	e1a0e00f 	mov	lr, pc
c7e16584:	e594f010 	ldr	pc, [r4, #16]
			oob += chip->ecc.prepad;
c7e16588:	e59430b0 	ldr	r3, [r4, #176]
c7e1658c:	e0855003 	add	r5, r5, r3
		}

		chip->ecc.calculate(mtd, p, oob);
c7e16590:	e1a01007 	mov	r1, r7
c7e16594:	e1a02005 	mov	r2, r5
c7e16598:	e1a00006 	mov	r0, r6
c7e1659c:	e1a0e00f 	mov	lr, pc
c7e165a0:	e594f0c4 	ldr	pc, [r4, #196]
		chip->write_buf(mtd, oob, eccbytes);
c7e165a4:	e1a01005 	mov	r1, r5
c7e165a8:	e1a02009 	mov	r2, r9
c7e165ac:	e1a00006 	mov	r0, r6
c7e165b0:	e1a0e00f 	mov	lr, pc
c7e165b4:	e594f010 	ldr	pc, [r4, #16]
		oob += eccbytes;

		if (chip->ecc.postpad) {
c7e165b8:	e59420b4 	ldr	r2, [r4, #180]
 * The hw generator calculates the error syndrome automatically. Therefor
 * we need a special oob layout and handling.
 */
static void nand_write_page_syndrome(struct mtd_info *mtd,
				    struct nand_chip *chip, const uint8_t *buf)
{
c7e165bc:	e087700b 	add	r7, r7, fp

		chip->ecc.calculate(mtd, p, oob);
		chip->write_buf(mtd, oob, eccbytes);
		oob += eccbytes;

		if (chip->ecc.postpad) {
c7e165c0:	e3520000 	cmp	r2, #0	; 0x0
			oob += chip->ecc.prepad;
		}

		chip->ecc.calculate(mtd, p, oob);
		chip->write_buf(mtd, oob, eccbytes);
		oob += eccbytes;
c7e165c4:	e0855009 	add	r5, r5, r9

		if (chip->ecc.postpad) {
c7e165c8:	0a000005 	beq	c7e165e4 <nand_write_page_syndrome+0xb8>
			chip->write_buf(mtd, oob, chip->ecc.postpad);
c7e165cc:	e1a01005 	mov	r1, r5
c7e165d0:	e1a00006 	mov	r0, r6
c7e165d4:	e1a0e00f 	mov	lr, pc
c7e165d8:	e594f010 	ldr	pc, [r4, #16]
			oob += chip->ecc.postpad;
c7e165dc:	e59430b4 	ldr	r3, [r4, #180]
c7e165e0:	e0855003 	add	r5, r5, r3
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	const uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e165e4:	e35a0000 	cmp	sl, #0	; 0x0

		chip->ecc.hwctl(mtd, NAND_ECC_WRITE);
c7e165e8:	e1a00006 	mov	r0, r6
c7e165ec:	e3a01001 	mov	r1, #1	; 0x1
	int eccbytes = chip->ecc.bytes;
	int eccsteps = chip->ecc.steps;
	const uint8_t *p = buf;
	uint8_t *oob = chip->oob_poi;

	for (i = 0; eccsteps; eccsteps--, i += eccbytes, p += eccsize) {
c7e165f0:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e165f4:	1affffd5 	bne	c7e16550 <nand_write_page_syndrome+0x24>
			oob += chip->ecc.postpad;
		}
	}

	/* Calculate remaining oob bytes */
	i = mtd->oobsize - (oob - chip->oob_poi);
c7e165f8:	e5943090 	ldr	r3, [r4, #144]
c7e165fc:	e5962018 	ldr	r2, [r6, #24]
c7e16600:	e0653003 	rsb	r3, r5, r3
	if (i)
c7e16604:	e0932002 	adds	r2, r3, r2
c7e16608:	08bd8ef0 	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
		chip->write_buf(mtd, oob, i);
c7e1660c:	e1a01005 	mov	r1, r5
c7e16610:	e1a0e00f 	mov	lr, pc
c7e16614:	e594f010 	ldr	pc, [r4, #16]
c7e16618:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e1661c <nand_write_page>:
 * @cached:	cached programming
 * @raw:	use _raw version of write_page
 */
static int nand_write_page(struct mtd_info *mtd, struct nand_chip *chip,
			   const uint8_t *buf, int page, int cached, int raw)
{
c7e1661c:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
c7e16620:	e1a04001 	mov	r4, r1
c7e16624:	e1a06002 	mov	r6, r2
	int status;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, 0x00, page);
c7e16628:	e3a01080 	mov	r1, #128	; 0x80
c7e1662c:	e3a02000 	mov	r2, #0	; 0x0
 * @cached:	cached programming
 * @raw:	use _raw version of write_page
 */
static int nand_write_page(struct mtd_info *mtd, struct nand_chip *chip,
			   const uint8_t *buf, int page, int cached, int raw)
{
c7e16630:	e1a07003 	mov	r7, r3
c7e16634:	e1a05000 	mov	r5, r0
	int status;

	chip->cmdfunc(mtd, NAND_CMD_SEQIN, 0x00, page);
c7e16638:	e1a0e00f 	mov	lr, pc
c7e1663c:	e594f034 	ldr	pc, [r4, #52]

	if (unlikely(raw))
c7e16640:	e59d3024 	ldr	r3, [sp, #36]
c7e16644:	e3530000 	cmp	r3, #0	; 0x0
c7e16648:	0a000005 	beq	c7e16664 <nand_write_page+0x48>
		chip->ecc.write_page_raw(mtd, chip, buf);
c7e1664c:	e1a02006 	mov	r2, r6
c7e16650:	e1a00005 	mov	r0, r5
c7e16654:	e1a01004 	mov	r1, r4
c7e16658:	e1a0e00f 	mov	lr, pc
c7e1665c:	e594f0d0 	ldr	pc, [r4, #208]
c7e16660:	ea000004 	b	c7e16678 <nand_write_page+0x5c>
	else
		chip->ecc.write_page(mtd, chip, buf);
c7e16664:	e1a02006 	mov	r2, r6
c7e16668:	e1a00005 	mov	r0, r5
c7e1666c:	e1a01004 	mov	r1, r4
c7e16670:	e1a0e00f 	mov	lr, pc
c7e16674:	e594f0dc 	ldr	pc, [r4, #220]
	 */
	cached = 0;

	if (!cached || !(chip->options & NAND_CACHEPRG)) {

		chip->cmdfunc(mtd, NAND_CMD_PAGEPROG, -1, -1);
c7e16678:	e3e02000 	mvn	r2, #0	; 0x0
c7e1667c:	e1a03002 	mov	r3, r2
c7e16680:	e1a00005 	mov	r0, r5
c7e16684:	e3a01010 	mov	r1, #16	; 0x10
c7e16688:	e1a0e00f 	mov	lr, pc
c7e1668c:	e594f034 	ldr	pc, [r4, #52]
		status = chip->waitfunc(mtd, chip);
c7e16690:	e1a00005 	mov	r0, r5
c7e16694:	e1a01004 	mov	r1, r4
c7e16698:	e1a0e00f 	mov	lr, pc
c7e1669c:	e594f038 	ldr	pc, [r4, #56]
		/*
		 * See if operation failed and additional status checks are
		 * available
		 */
		if ((status & NAND_STATUS_FAIL) && (chip->errstat))
c7e166a0:	e3100001 	tst	r0, #1	; 0x1
	cached = 0;

	if (!cached || !(chip->options & NAND_CACHEPRG)) {

		chip->cmdfunc(mtd, NAND_CMD_PAGEPROG, -1, -1);
		status = chip->waitfunc(mtd, chip);
c7e166a4:	e1a03000 	mov	r3, r0
		/*
		 * See if operation failed and additional status checks are
		 * available
		 */
		if ((status & NAND_STATUS_FAIL) && (chip->errstat))
c7e166a8:	0a000008 	beq	c7e166d0 <nand_write_page+0xb4>
c7e166ac:	e594c044 	ldr	ip, [r4, #68]
c7e166b0:	e35c0000 	cmp	ip, #0	; 0x0
c7e166b4:	0a000005 	beq	c7e166d0 <nand_write_page+0xb4>
			status = chip->errstat(mtd, chip, FL_WRITING, status,
c7e166b8:	e58d7000 	str	r7, [sp]
c7e166bc:	e1a00005 	mov	r0, r5
c7e166c0:	e1a01004 	mov	r1, r4
c7e166c4:	e3a02002 	mov	r2, #2	; 0x2
c7e166c8:	e12fff3c 	blx	ip
c7e166cc:	e1a03000 	mov	r3, r0

	if (chip->verify_buf(mtd, buf, mtd->writesize))
		return -EIO;
#endif
	return 0;
}
c7e166d0:	e2130001 	ands	r0, r3, #1	; 0x1
c7e166d4:	13e00004 	mvnne	r0, #4	; 0x4
c7e166d8:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

c7e166dc <single_erase_cmd>:
 * @page:	the page address of the block which will be erased
 *
 * Standard erase command for NAND chips
 */
static void single_erase_cmd(struct mtd_info *mtd, int page)
{
c7e166dc:	e92d4070 	push	{r4, r5, r6, lr}
c7e166e0:	e1a03001 	mov	r3, r1
	struct nand_chip *chip = mtd->priv;
c7e166e4:	e5905094 	ldr	r5, [r0, #148]
	/* Send commands to erase a block */
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page);
c7e166e8:	e3a01060 	mov	r1, #96	; 0x60
c7e166ec:	e3e02000 	mvn	r2, #0	; 0x0
 * @page:	the page address of the block which will be erased
 *
 * Standard erase command for NAND chips
 */
static void single_erase_cmd(struct mtd_info *mtd, int page)
{
c7e166f0:	e1a04000 	mov	r4, r0
	struct nand_chip *chip = mtd->priv;
	/* Send commands to erase a block */
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page);
c7e166f4:	e1a0e00f 	mov	lr, pc
c7e166f8:	e595f034 	ldr	pc, [r5, #52]
	chip->cmdfunc(mtd, NAND_CMD_ERASE2, -1, -1);
c7e166fc:	e3e02000 	mvn	r2, #0	; 0x0
c7e16700:	e1a00004 	mov	r0, r4
c7e16704:	e3a010d0 	mov	r1, #208	; 0xd0
c7e16708:	e1a03002 	mov	r3, r2
c7e1670c:	e1a0e00f 	mov	lr, pc
c7e16710:	e595f034 	ldr	pc, [r5, #52]
}
c7e16714:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e16718 <multi_erase_cmd>:
 *
 * AND multi block erase command function
 * Erase 4 consecutive blocks
 */
static void multi_erase_cmd(struct mtd_info *mtd, int page)
{
c7e16718:	e92d4070 	push	{r4, r5, r6, lr}
	struct nand_chip *chip = mtd->priv;
	/* Send commands to erase a block */
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page++);
c7e1671c:	e1a03001 	mov	r3, r1
 *
 * AND multi block erase command function
 * Erase 4 consecutive blocks
 */
static void multi_erase_cmd(struct mtd_info *mtd, int page)
{
c7e16720:	e1a05000 	mov	r5, r0
	struct nand_chip *chip = mtd->priv;
c7e16724:	e5906094 	ldr	r6, [r0, #148]
	/* Send commands to erase a block */
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page++);
c7e16728:	e2814001 	add	r4, r1, #1	; 0x1
c7e1672c:	e3e02000 	mvn	r2, #0	; 0x0
c7e16730:	e3a01060 	mov	r1, #96	; 0x60
c7e16734:	e1a0e00f 	mov	lr, pc
c7e16738:	e596f034 	ldr	pc, [r6, #52]
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page++);
c7e1673c:	e1a03004 	mov	r3, r4
c7e16740:	e1a00005 	mov	r0, r5
c7e16744:	e2844001 	add	r4, r4, #1	; 0x1
c7e16748:	e3a01060 	mov	r1, #96	; 0x60
c7e1674c:	e3e02000 	mvn	r2, #0	; 0x0
c7e16750:	e1a0e00f 	mov	lr, pc
c7e16754:	e596f034 	ldr	pc, [r6, #52]
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page++);
c7e16758:	e1a00005 	mov	r0, r5
c7e1675c:	e1a03004 	mov	r3, r4
c7e16760:	e3a01060 	mov	r1, #96	; 0x60
c7e16764:	e3e02000 	mvn	r2, #0	; 0x0
c7e16768:	e1a0e00f 	mov	lr, pc
c7e1676c:	e596f034 	ldr	pc, [r6, #52]
	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page);
c7e16770:	e1a00005 	mov	r0, r5
c7e16774:	e2843001 	add	r3, r4, #1	; 0x1
c7e16778:	e3a01060 	mov	r1, #96	; 0x60
c7e1677c:	e3e02000 	mvn	r2, #0	; 0x0
c7e16780:	e1a0e00f 	mov	lr, pc
c7e16784:	e596f034 	ldr	pc, [r6, #52]
	chip->cmdfunc(mtd, NAND_CMD_ERASE2, -1, -1);
c7e16788:	e3e02000 	mvn	r2, #0	; 0x0
c7e1678c:	e1a00005 	mov	r0, r5
c7e16790:	e3a010d0 	mov	r1, #208	; 0xd0
c7e16794:	e1a03002 	mov	r3, r2
c7e16798:	e1a0e00f 	mov	lr, pc
c7e1679c:	e596f034 	ldr	pc, [r6, #52]
}
c7e167a0:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e167a4 <nand_sync>:
 * @mtd:	MTD device structure
 *
 * Sync is actually a wait for chip ready function
 */
static void nand_sync(struct mtd_info *mtd)
{
c7e167a4:	e92d4010 	push	{r4, lr}
c7e167a8:	e1a04000 	mov	r4, r0
	struct nand_chip *chip = mtd->priv;

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: called\n", __func__);

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_SYNCING);
c7e167ac:	e1a01004 	mov	r1, r4
c7e167b0:	e3a02004 	mov	r2, #4	; 0x4
c7e167b4:	e5900094 	ldr	r0, [r0, #148]
c7e167b8:	ebfffb64 	bl	c7e15550 <nand_get_device>
	/* Release it and go back */
	nand_release_device(mtd);
c7e167bc:	e1a00004 	mov	r0, r4
}
c7e167c0:	e8bd4010 	pop	{r4, lr}
	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: called\n", __func__);

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_SYNCING);
	/* Release it and go back */
	nand_release_device(mtd);
c7e167c4:	eafffae0 	b	c7e1534c <nand_release_device>

c7e167c8 <nand_release>:
/**
 * nand_release - [NAND Interface] Free resources held by the NAND device
 * @mtd:	MTD device structure
*/
void nand_release(struct mtd_info *mtd)
{
c7e167c8:	e92d4010 	push	{r4, lr}
	struct nand_chip *chip = mtd->priv;
c7e167cc:	e5904094 	ldr	r4, [r0, #148]
	/* Deregister partitions */
	del_mtd_partitions(mtd);
#endif

	/* Free bad block table memory */
	kfree(chip->bbt);
c7e167d0:	e5940110 	ldr	r0, [r4, #272]
c7e167d4:	ebffc9e1 	bl	c7e08f60 <free>
	if (!(chip->options & NAND_OWN_BUFFERS))
c7e167d8:	e5943050 	ldr	r3, [r4, #80]
c7e167dc:	e3130701 	tst	r3, #262144	; 0x40000
c7e167e0:	1a000001 	bne	c7e167ec <nand_release+0x24>
		kfree(chip->buffers);
c7e167e4:	e59400e8 	ldr	r0, [r4, #232]
c7e167e8:	ebffc9dc 	bl	c7e08f60 <free>

	/* Free bad block descriptor memory */
	if (chip->badblock_pattern && chip->badblock_pattern->options
c7e167ec:	e594011c 	ldr	r0, [r4, #284]
c7e167f0:	e3500000 	cmp	r0, #0	; 0x0
c7e167f4:	08bd8010 	popeq	{r4, pc}
c7e167f8:	e5903000 	ldr	r3, [r0]
c7e167fc:	e3130602 	tst	r3, #2097152	; 0x200000
c7e16800:	08bd8010 	popeq	{r4, pc}
			& NAND_BBT_DYNAMICSTRUCT)
		kfree(chip->badblock_pattern);
}
c7e16804:	e8bd4010 	pop	{r4, lr}
		kfree(chip->buffers);

	/* Free bad block descriptor memory */
	if (chip->badblock_pattern && chip->badblock_pattern->options
			& NAND_BBT_DYNAMICSTRUCT)
		kfree(chip->badblock_pattern);
c7e16808:	eaffc9d4 	b	c7e08f60 <free>

c7e1680c <nand_scan_ident>:
 *
 * The mtd->owner field must be set to the module of the caller.
 */
int nand_scan_ident(struct mtd_info *mtd, int maxchips,
		    const struct nand_flash_dev *table)
{
c7e1680c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	int i, busw, nand_maf_id, nand_dev_id;
	struct nand_chip *chip = mtd->priv;
c7e16810:	e5905094 	ldr	r5, [r0, #148]
 *
 * The mtd->owner field must be set to the module of the caller.
 */
int nand_scan_ident(struct mtd_info *mtd, int maxchips,
		    const struct nand_flash_dev *table)
{
c7e16814:	e24dd018 	sub	sp, sp, #24	; 0x18
 * Set default functions
 */
static void nand_set_defaults(struct nand_chip *chip, int busw)
{
	/* check for proper chip_delay setup, set 20us if not */
	if (!chip->chip_delay)
c7e16818:	e595304c 	ldr	r3, [r5, #76]
 *
 * The mtd->owner field must be set to the module of the caller.
 */
int nand_scan_ident(struct mtd_info *mtd, int maxchips,
		    const struct nand_flash_dev *table)
{
c7e1681c:	e58d100c 	str	r1, [sp, #12]
 * Set default functions
 */
static void nand_set_defaults(struct nand_chip *chip, int busw)
{
	/* check for proper chip_delay setup, set 20us if not */
	if (!chip->chip_delay)
c7e16820:	e3530000 	cmp	r3, #0	; 0x0
		chip->chip_delay = 20;
c7e16824:	02833014 	addeq	r3, r3, #20	; 0x14
c7e16828:	0585304c 	streq	r3, [r5, #76]

	/* check, if a user supplied command function given */
	if (chip->cmdfunc == NULL)
c7e1682c:	e5953034 	ldr	r3, [r5, #52]
	int i, busw, nand_maf_id, nand_dev_id;
	struct nand_chip *chip = mtd->priv;
	const struct nand_flash_dev *type;

	/* Get buswidth to select the correct functions */
	busw = chip->options & NAND_BUSWIDTH_16;
c7e16830:	e5951050 	ldr	r1, [r5, #80]
	/* check for proper chip_delay setup, set 20us if not */
	if (!chip->chip_delay)
		chip->chip_delay = 20;

	/* check, if a user supplied command function given */
	if (chip->cmdfunc == NULL)
c7e16834:	e3530000 	cmp	r3, #0	; 0x0
		chip->cmdfunc = nand_command;
c7e16838:	059f36d0 	ldreq	r3, [pc, #1744]	; c7e16f10 <nand_scan_ident+0x704>
 *
 * The mtd->owner field must be set to the module of the caller.
 */
int nand_scan_ident(struct mtd_info *mtd, int maxchips,
		    const struct nand_flash_dev *table)
{
c7e1683c:	e1a06000 	mov	r6, r0
	if (!chip->chip_delay)
		chip->chip_delay = 20;

	/* check, if a user supplied command function given */
	if (chip->cmdfunc == NULL)
		chip->cmdfunc = nand_command;
c7e16840:	05853034 	streq	r3, [r5, #52]

	/* check, if a user supplied wait function given */
	if (chip->waitfunc == NULL)
c7e16844:	e5953038 	ldr	r3, [r5, #56]
 *
 * The mtd->owner field must be set to the module of the caller.
 */
int nand_scan_ident(struct mtd_info *mtd, int maxchips,
		    const struct nand_flash_dev *table)
{
c7e16848:	e1a07002 	mov	r7, r2
	/* check, if a user supplied command function given */
	if (chip->cmdfunc == NULL)
		chip->cmdfunc = nand_command;

	/* check, if a user supplied wait function given */
	if (chip->waitfunc == NULL)
c7e1684c:	e3530000 	cmp	r3, #0	; 0x0
		chip->waitfunc = nand_wait;
c7e16850:	059f36bc 	ldreq	r3, [pc, #1724]	; c7e16f14 <nand_scan_ident+0x708>
	int i, busw, nand_maf_id, nand_dev_id;
	struct nand_chip *chip = mtd->priv;
	const struct nand_flash_dev *type;

	/* Get buswidth to select the correct functions */
	busw = chip->options & NAND_BUSWIDTH_16;
c7e16854:	e2011002 	and	r1, r1, #2	; 0x2
	if (chip->cmdfunc == NULL)
		chip->cmdfunc = nand_command;

	/* check, if a user supplied wait function given */
	if (chip->waitfunc == NULL)
		chip->waitfunc = nand_wait;
c7e16858:	05853038 	streq	r3, [r5, #56]

	if (!chip->select_chip)
c7e1685c:	e595301c 	ldr	r3, [r5, #28]
c7e16860:	e3530000 	cmp	r3, #0	; 0x0
		chip->select_chip = nand_select_chip;
c7e16864:	059f36ac 	ldreq	r3, [pc, #1708]	; c7e16f18 <nand_scan_ident+0x70c>
c7e16868:	0585301c 	streq	r3, [r5, #28]
	if (!chip->read_byte)
c7e1686c:	e5953008 	ldr	r3, [r5, #8]
c7e16870:	e3530000 	cmp	r3, #0	; 0x0
c7e16874:	1a000004 	bne	c7e1688c <nand_scan_ident+0x80>
		chip->read_byte = busw ? nand_read_byte16 : nand_read_byte;
c7e16878:	e59f269c 	ldr	r2, [pc, #1692]	; c7e16f1c <nand_scan_ident+0x710>
c7e1687c:	e59f369c 	ldr	r3, [pc, #1692]	; c7e16f20 <nand_scan_ident+0x714>
c7e16880:	e3510000 	cmp	r1, #0	; 0x0
c7e16884:	01a03002 	moveq	r3, r2
c7e16888:	e5853008 	str	r3, [r5, #8]
	if (!chip->read_word)
c7e1688c:	e595300c 	ldr	r3, [r5, #12]
c7e16890:	e3530000 	cmp	r3, #0	; 0x0
		chip->read_word = nand_read_word;
c7e16894:	059f3688 	ldreq	r3, [pc, #1672]	; c7e16f24 <nand_scan_ident+0x718>
c7e16898:	0585300c 	streq	r3, [r5, #12]
	if (!chip->block_bad)
c7e1689c:	e5953020 	ldr	r3, [r5, #32]
c7e168a0:	e3530000 	cmp	r3, #0	; 0x0
		chip->block_bad = nand_block_bad;
c7e168a4:	059f367c 	ldreq	r3, [pc, #1660]	; c7e16f28 <nand_scan_ident+0x71c>
c7e168a8:	05853020 	streq	r3, [r5, #32]
	if (!chip->block_markbad)
c7e168ac:	e5953024 	ldr	r3, [r5, #36]
c7e168b0:	e3530000 	cmp	r3, #0	; 0x0
		chip->block_markbad = nand_default_block_markbad;
c7e168b4:	059f3670 	ldreq	r3, [pc, #1648]	; c7e16f2c <nand_scan_ident+0x720>
c7e168b8:	05853024 	streq	r3, [r5, #36]
	if (!chip->write_buf)
c7e168bc:	e5953010 	ldr	r3, [r5, #16]
c7e168c0:	e3530000 	cmp	r3, #0	; 0x0
c7e168c4:	1a000004 	bne	c7e168dc <nand_scan_ident+0xd0>
		chip->write_buf = busw ? nand_write_buf16 : nand_write_buf;
c7e168c8:	e59f2660 	ldr	r2, [pc, #1632]	; c7e16f30 <nand_scan_ident+0x724>
c7e168cc:	e59f3660 	ldr	r3, [pc, #1632]	; c7e16f34 <nand_scan_ident+0x728>
c7e168d0:	e3510000 	cmp	r1, #0	; 0x0
c7e168d4:	01a03002 	moveq	r3, r2
c7e168d8:	e5853010 	str	r3, [r5, #16]
	if (!chip->read_buf)
c7e168dc:	e5953014 	ldr	r3, [r5, #20]
c7e168e0:	e3530000 	cmp	r3, #0	; 0x0
c7e168e4:	1a000004 	bne	c7e168fc <nand_scan_ident+0xf0>
		chip->read_buf = busw ? nand_read_buf16 : nand_read_buf;
c7e168e8:	e59f2648 	ldr	r2, [pc, #1608]	; c7e16f38 <nand_scan_ident+0x72c>
c7e168ec:	e59f3648 	ldr	r3, [pc, #1608]	; c7e16f3c <nand_scan_ident+0x730>
c7e168f0:	e3510000 	cmp	r1, #0	; 0x0
c7e168f4:	01a03002 	moveq	r3, r2
c7e168f8:	e5853014 	str	r3, [r5, #20]
	if (!chip->verify_buf)
c7e168fc:	e5953018 	ldr	r3, [r5, #24]
c7e16900:	e3530000 	cmp	r3, #0	; 0x0
c7e16904:	1a000004 	bne	c7e1691c <nand_scan_ident+0x110>
		chip->verify_buf = busw ? nand_verify_buf16 : nand_verify_buf;
c7e16908:	e59f2630 	ldr	r2, [pc, #1584]	; c7e16f40 <nand_scan_ident+0x734>
c7e1690c:	e59f3630 	ldr	r3, [pc, #1584]	; c7e16f44 <nand_scan_ident+0x738>
c7e16910:	e3510000 	cmp	r1, #0	; 0x0
c7e16914:	01a03002 	moveq	r3, r2
c7e16918:	e5853018 	str	r3, [r5, #24]
	if (!chip->scan_bbt)
c7e1691c:	e5953040 	ldr	r3, [r5, #64]
	int i, maf_idx;
	u8 id_data[8];
	int ret;

	/* Select the device */
	chip->select_chip(mtd, 0);
c7e16920:	e3a01000 	mov	r1, #0	; 0x0
		chip->write_buf = busw ? nand_write_buf16 : nand_write_buf;
	if (!chip->read_buf)
		chip->read_buf = busw ? nand_read_buf16 : nand_read_buf;
	if (!chip->verify_buf)
		chip->verify_buf = busw ? nand_verify_buf16 : nand_verify_buf;
	if (!chip->scan_bbt)
c7e16924:	e3530000 	cmp	r3, #0	; 0x0
		chip->scan_bbt = nand_default_bbt;
c7e16928:	059f3618 	ldreq	r3, [pc, #1560]	; c7e16f48 <nand_scan_ident+0x73c>
	int i, maf_idx;
	u8 id_data[8];
	int ret;

	/* Select the device */
	chip->select_chip(mtd, 0);
c7e1692c:	e1a00006 	mov	r0, r6
	if (!chip->read_buf)
		chip->read_buf = busw ? nand_read_buf16 : nand_read_buf;
	if (!chip->verify_buf)
		chip->verify_buf = busw ? nand_verify_buf16 : nand_verify_buf;
	if (!chip->scan_bbt)
		chip->scan_bbt = nand_default_bbt;
c7e16930:	05853040 	streq	r3, [r5, #64]
	if (!chip->controller)
c7e16934:	e5953094 	ldr	r3, [r5, #148]
c7e16938:	e3530000 	cmp	r3, #0	; 0x0
		chip->controller = &chip->hwcontrol;
c7e1693c:	028530ec 	addeq	r3, r5, #236	; 0xec
c7e16940:	05853094 	streq	r3, [r5, #148]
	int i, maf_idx;
	u8 id_data[8];
	int ret;

	/* Select the device */
	chip->select_chip(mtd, 0);
c7e16944:	e1a0e00f 	mov	lr, pc
c7e16948:	e595f01c 	ldr	pc, [r5, #28]

	/*
	 * Reset the chip, required by some chips (e.g. Micron MT29FxGxxxxx)
	 * after power-up
	 */
	chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
c7e1694c:	e3e02000 	mvn	r2, #0	; 0x0
c7e16950:	e1a03002 	mov	r3, r2
c7e16954:	e1a00006 	mov	r0, r6
c7e16958:	e3a010ff 	mov	r1, #255	; 0xff
c7e1695c:	e1a0e00f 	mov	lr, pc
c7e16960:	e595f034 	ldr	pc, [r5, #52]

	/* Send the command for reading device ID */
	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
c7e16964:	e3a01090 	mov	r1, #144	; 0x90
c7e16968:	e3a02000 	mov	r2, #0	; 0x0
c7e1696c:	e3e03000 	mvn	r3, #0	; 0x0
c7e16970:	e1a00006 	mov	r0, r6
c7e16974:	e1a0e00f 	mov	lr, pc
c7e16978:	e595f034 	ldr	pc, [r5, #52]

	/* Read manufacturer and device IDs */
	*maf_id = chip->read_byte(mtd);
c7e1697c:	e1a00006 	mov	r0, r6
c7e16980:	e1a0e00f 	mov	lr, pc
c7e16984:	e595f008 	ldr	pc, [r5, #8]
c7e16988:	e1a0b000 	mov	fp, r0
	*dev_id = chip->read_byte(mtd);
c7e1698c:	e1a00006 	mov	r0, r6
c7e16990:	e1a0e00f 	mov	lr, pc
c7e16994:	e595f008 	ldr	pc, [r5, #8]
	 * interface concerns can cause random data which looks like a
	 * possibly credible NAND flash to appear. If the two results do
	 * not match, ignore the device completely.
	 */

	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
c7e16998:	e3a01090 	mov	r1, #144	; 0x90
c7e1699c:	e3a02000 	mov	r2, #0	; 0x0
c7e169a0:	e3e03000 	mvn	r3, #0	; 0x0
	/* Send the command for reading device ID */
	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);

	/* Read manufacturer and device IDs */
	*maf_id = chip->read_byte(mtd);
	*dev_id = chip->read_byte(mtd);
c7e169a4:	e58d0008 	str	r0, [sp, #8]
	 * interface concerns can cause random data which looks like a
	 * possibly credible NAND flash to appear. If the two results do
	 * not match, ignore the device completely.
	 */

	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
c7e169a8:	e1a00006 	mov	r0, r6
c7e169ac:	e1a0e00f 	mov	lr, pc
c7e169b0:	e595f034 	ldr	pc, [r5, #52]

	for (i = 0; i < 2; i++)
		id_data[i] = chip->read_byte(mtd);
c7e169b4:	e1a00006 	mov	r0, r6
c7e169b8:	e1a0e00f 	mov	lr, pc
c7e169bc:	e595f008 	ldr	pc, [r5, #8]
c7e169c0:	e5cd0010 	strb	r0, [sp, #16]
c7e169c4:	e1a00006 	mov	r0, r6
c7e169c8:	e1a0e00f 	mov	lr, pc
c7e169cc:	e595f008 	ldr	pc, [r5, #8]

	if (id_data[0] != *maf_id || id_data[1] != *dev_id) {
c7e169d0:	e5dd9010 	ldrb	r9, [sp, #16]
	 */

	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);

	for (i = 0; i < 2; i++)
		id_data[i] = chip->read_byte(mtd);
c7e169d4:	e1a0a000 	mov	sl, r0

	if (id_data[0] != *maf_id || id_data[1] != *dev_id) {
c7e169d8:	e159000b 	cmp	r9, fp
	 */

	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);

	for (i = 0; i < 2; i++)
		id_data[i] = chip->read_byte(mtd);
c7e169dc:	e5cd0011 	strb	r0, [sp, #17]

	if (id_data[0] != *maf_id || id_data[1] != *dev_id) {
c7e169e0:	1a000002 	bne	c7e169f0 <nand_scan_ident+0x1e4>
c7e169e4:	e59d3008 	ldr	r3, [sp, #8]
c7e169e8:	e1500003 	cmp	r0, r3
c7e169ec:	0a000006 	beq	c7e16a0c <nand_scan_ident+0x200>
		printk(KERN_INFO "%s: second ID read did not match "
c7e169f0:	e1a0200b 	mov	r2, fp
c7e169f4:	e59d3008 	ldr	r3, [sp, #8]
c7e169f8:	e59f154c 	ldr	r1, [pc, #1356]	; c7e16f4c <nand_scan_ident+0x740>
c7e169fc:	e59f054c 	ldr	r0, [pc, #1356]	; c7e16f50 <nand_scan_ident+0x744>
c7e16a00:	e88d0600 	stm	sp, {r9, sl}
c7e16a04:	ebffc813 	bl	c7e08a58 <printf>
c7e16a08:	ea00001d 	b	c7e16a84 <nand_scan_ident+0x278>
		       "%02x,%02x against %02x,%02x\n", __func__,
		       *maf_id, *dev_id, id_data[0], id_data[1]);
		return ERR_PTR(-ENODEV);
	}

	if (!type)
c7e16a0c:	e59f3540 	ldr	r3, [pc, #1344]	; c7e16f54 <nand_scan_ident+0x748>
c7e16a10:	e3570000 	cmp	r7, #0	; 0x0
c7e16a14:	01a07003 	moveq	r7, r3
c7e16a18:	ea000003 	b	c7e16a2c <nand_scan_ident+0x220>
		type = nand_flash_ids;

	for (; type->name != NULL; type++)
		if (*dev_id == type->id)
c7e16a1c:	e5973004 	ldr	r3, [r7, #4]
c7e16a20:	e15a0003 	cmp	sl, r3
c7e16a24:	0a000003 	beq	c7e16a38 <nand_scan_ident+0x22c>
	}

	if (!type)
		type = nand_flash_ids;

	for (; type->name != NULL; type++)
c7e16a28:	e2877018 	add	r7, r7, #24	; 0x18
c7e16a2c:	e5973000 	ldr	r3, [r7]
c7e16a30:	e3530000 	cmp	r3, #0	; 0x0
c7e16a34:	1afffff8 	bne	c7e16a1c <nand_scan_ident+0x210>
		if (*dev_id == type->id)
			break;

	chip->onfi_version = 0;
c7e16a38:	e3a04000 	mov	r4, #0	; 0x0
c7e16a3c:	e5854088 	str	r4, [r5, #136]
		ret = nand_flash_detect_onfi(mtd, chip, &busw);
		if (ret)
			goto ident_done;
	}

	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
c7e16a40:	e1a00006 	mov	r0, r6
c7e16a44:	e3a01090 	mov	r1, #144	; 0x90
c7e16a48:	e1a02004 	mov	r2, r4
c7e16a4c:	e3e03000 	mvn	r3, #0	; 0x0
c7e16a50:	e1a0e00f 	mov	lr, pc
c7e16a54:	e595f034 	ldr	pc, [r5, #52]

	/* Read entire ID string */

	for (i = 0; i < 8; i++)
		id_data[i] = chip->read_byte(mtd);
c7e16a58:	e1a00006 	mov	r0, r6
c7e16a5c:	e1a0e00f 	mov	lr, pc
c7e16a60:	e595f008 	ldr	pc, [r5, #8]
c7e16a64:	e28d3010 	add	r3, sp, #16	; 0x10
c7e16a68:	e7c30004 	strb	r0, [r3, r4]

	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);

	/* Read entire ID string */

	for (i = 0; i < 8; i++)
c7e16a6c:	e2844001 	add	r4, r4, #1	; 0x1
c7e16a70:	e3540008 	cmp	r4, #8	; 0x8
c7e16a74:	1afffff7 	bne	c7e16a58 <nand_scan_ident+0x24c>
		id_data[i] = chip->read_byte(mtd);

	if (!type->name)
c7e16a78:	e5972000 	ldr	r2, [r7]
c7e16a7c:	e3520000 	cmp	r2, #0	; 0x0
c7e16a80:	1a000001 	bne	c7e16a8c <nand_scan_ident+0x280>
c7e16a84:	e3e04012 	mvn	r4, #18	; 0x12
c7e16a88:	ea0000eb 	b	c7e16e3c <nand_scan_ident+0x630>
		return ERR_PTR(-ENODEV);

	if (!mtd->name)
c7e16a8c:	e5963020 	ldr	r3, [r6, #32]
		mtd->name = type->name;

	chip->chipsize = (uint64_t)type->chipsize << 20;

	if (!type->pagesize && chip->init_size) {
c7e16a90:	e597c008 	ldr	ip, [r7, #8]
		id_data[i] = chip->read_byte(mtd);

	if (!type->name)
		return ERR_PTR(-ENODEV);

	if (!mtd->name)
c7e16a94:	e3530000 	cmp	r3, #0	; 0x0
		mtd->name = type->name;

	chip->chipsize = (uint64_t)type->chipsize << 20;
c7e16a98:	e597300c 	ldr	r3, [r7, #12]

	if (!type->name)
		return ERR_PTR(-ENODEV);

	if (!mtd->name)
		mtd->name = type->name;
c7e16a9c:	05862020 	streq	r2, [r6, #32]

	chip->chipsize = (uint64_t)type->chipsize << 20;
c7e16aa0:	e1a02a03 	lsl	r2, r3, #20

	if (!type->pagesize && chip->init_size) {
c7e16aa4:	e35c0000 	cmp	ip, #0	; 0x0
		return ERR_PTR(-ENODEV);

	if (!mtd->name)
		mtd->name = type->name;

	chip->chipsize = (uint64_t)type->chipsize << 20;
c7e16aa8:	e1a03623 	lsr	r3, r3, #12
c7e16aac:	e585306c 	str	r3, [r5, #108]
c7e16ab0:	e5852068 	str	r2, [r5, #104]

	if (!type->pagesize && chip->init_size) {
c7e16ab4:	1a000040 	bne	c7e16bbc <nand_scan_ident+0x3b0>
c7e16ab8:	e595302c 	ldr	r3, [r5, #44]
c7e16abc:	e3530000 	cmp	r3, #0	; 0x0
c7e16ac0:	0a000005 	beq	c7e16adc <nand_scan_ident+0x2d0>
		/* set the pagesize, oobsize, erasesize by the driver*/
		busw = chip->init_size(mtd, chip, id_data);
c7e16ac4:	e1a00006 	mov	r0, r6
c7e16ac8:	e1a01005 	mov	r1, r5
c7e16acc:	e28d2010 	add	r2, sp, #16	; 0x10
c7e16ad0:	e12fff33 	blx	r3
c7e16ad4:	e1a04000 	mov	r4, r0
c7e16ad8:	ea000054 	b	c7e16c30 <nand_scan_ident+0x424>
	} else if (!type->pagesize) {
		int extid;
		/* The 3rd id byte holds MLC / multichip data */
		chip->cellinfo = id_data[2];
c7e16adc:	e5dd2012 	ldrb	r2, [sp, #18]
c7e16ae0:	e5c5207c 	strb	r2, [r5, #124]
		 *
		 * Check for wraparound + Samsung ID + nonzero 6th byte
		 * to decide what to do.
		 */
		//if (id_data[0] == id_data[6] && id_data[1] == id_data[7] &&
		if (id_data[0] == NAND_MFR_SAMSUNG &&
c7e16ae4:	e5dd3010 	ldrb	r3, [sp, #16]
	} else if (!type->pagesize) {
		int extid;
		/* The 3rd id byte holds MLC / multichip data */
		chip->cellinfo = id_data[2];
		/* The 4th id byte is the important one */
		extid = id_data[3];
c7e16ae8:	e5dd1013 	ldrb	r1, [sp, #19]
		 *
		 * Check for wraparound + Samsung ID + nonzero 6th byte
		 * to decide what to do.
		 */
		//if (id_data[0] == id_data[6] && id_data[1] == id_data[7] &&
		if (id_data[0] == NAND_MFR_SAMSUNG &&
c7e16aec:	e35300ec 	cmp	r3, #236	; 0xec
c7e16af0:	1a00001d 	bne	c7e16b6c <nand_scan_ident+0x360>
c7e16af4:	e312000c 	tst	r2, #12	; 0xc
c7e16af8:	0a00001b 	beq	c7e16b6c <nand_scan_ident+0x360>
c7e16afc:	e5dd3015 	ldrb	r3, [sp, #21]
c7e16b00:	e3530000 	cmp	r3, #0	; 0x0
c7e16b04:	0a000018 	beq	c7e16b6c <nand_scan_ident+0x360>
				(chip->cellinfo & NAND_CI_CELLTYPE_MSK) &&
				id_data[5] != 0x00) {
			/* Calc pagesize */
			mtd->writesize = 2048 << (extid & 0x03);
c7e16b08:	e2012003 	and	r2, r1, #3	; 0x3
c7e16b0c:	e3a03b02 	mov	r3, #2048	; 0x800
c7e16b10:	e1a03213 	lsl	r3, r3, r2
			extid >>= 2;
c7e16b14:	e1a02141 	asr	r2, r1, #2
			/* Calc oobsize */
			switch (extid & 0x03) {
c7e16b18:	e2021003 	and	r1, r2, #3	; 0x3
c7e16b1c:	e3510002 	cmp	r1, #2	; 0x2
		//if (id_data[0] == id_data[6] && id_data[1] == id_data[7] &&
		if (id_data[0] == NAND_MFR_SAMSUNG &&
				(chip->cellinfo & NAND_CI_CELLTYPE_MSK) &&
				id_data[5] != 0x00) {
			/* Calc pagesize */
			mtd->writesize = 2048 << (extid & 0x03);
c7e16b20:	e5863014 	str	r3, [r6, #20]
			switch (extid & 0x03) {
			case 1:
				mtd->oobsize = 128;
				break;
			case 2:
				mtd->oobsize = 218;
c7e16b24:	03a030da 	moveq	r3, #218	; 0xda
				id_data[5] != 0x00) {
			/* Calc pagesize */
			mtd->writesize = 2048 << (extid & 0x03);
			extid >>= 2;
			/* Calc oobsize */
			switch (extid & 0x03) {
c7e16b28:	0a000005 	beq	c7e16b44 <nand_scan_ident+0x338>
c7e16b2c:	e3510003 	cmp	r1, #3	; 0x3
				break;
			case 2:
				mtd->oobsize = 218;
				break;
			case 3:
				mtd->oobsize = 400;
c7e16b30:	03a03e19 	moveq	r3, #400	; 0x190
				id_data[5] != 0x00) {
			/* Calc pagesize */
			mtd->writesize = 2048 << (extid & 0x03);
			extid >>= 2;
			/* Calc oobsize */
			switch (extid & 0x03) {
c7e16b34:	0a000002 	beq	c7e16b44 <nand_scan_ident+0x338>
c7e16b38:	e3510001 	cmp	r1, #1	; 0x1
			case 1:
				mtd->oobsize = 128;
c7e16b3c:	03a03080 	moveq	r3, #128	; 0x80
				break;
			case 3:
				mtd->oobsize = 400;
				break;
			default:
				mtd->oobsize = 436;
c7e16b40:	13a03f6d 	movne	r3, #436	; 0x1b4
c7e16b44:	e5863018 	str	r3, [r6, #24]
				break;
			}
			extid >>= 2;
			/* Calc blocksize */
			mtd->erasesize = (128 * 1024) <<
c7e16b48:	e1a031c2 	asr	r3, r2, #3
c7e16b4c:	e2033004 	and	r3, r3, #4	; 0x4
c7e16b50:	e1a02e02 	lsl	r2, r2, #28
c7e16b54:	e1833f22 	orr	r3, r3, r2, lsr #30
c7e16b58:	e3a02802 	mov	r2, #131072	; 0x20000
c7e16b5c:	e1a02312 	lsl	r2, r2, r3
c7e16b60:	e3a04000 	mov	r4, #0	; 0x0
c7e16b64:	e5862010 	str	r2, [r6, #16]
c7e16b68:	ea000030 	b	c7e16c30 <nand_scan_ident+0x424>
				(((extid >> 1) & 0x04) | (extid & 0x03));
			busw = 0;
		} else {
			/* Calc pagesize */
			mtd->writesize = 1024 << (extid & 0x03);
c7e16b6c:	e2012003 	and	r2, r1, #3	; 0x3
			extid >>= 2;
c7e16b70:	e1a03141 	asr	r3, r1, #2
			mtd->erasesize = (128 * 1024) <<
				(((extid >> 1) & 0x04) | (extid & 0x03));
			busw = 0;
		} else {
			/* Calc pagesize */
			mtd->writesize = 1024 << (extid & 0x03);
c7e16b74:	e3a0cb01 	mov	ip, #1024	; 0x400
c7e16b78:	e1a0c21c 	lsl	ip, ip, r2
			extid >>= 2;
			/* Calc oobsize */
			mtd->oobsize = (8 << (extid & 0x01)) *
c7e16b7c:	e2033001 	and	r3, r3, #1	; 0x1
c7e16b80:	e3a00008 	mov	r0, #8	; 0x8
c7e16b84:	e1a00310 	lsl	r0, r0, r3
				(mtd->writesize >> 9);
			extid >>= 2;
c7e16b88:	e1a02241 	asr	r2, r1, #4
			/* Calc blocksize. Blocksize is multiples of 64KiB */
			mtd->erasesize = (64 * 1024) << (extid & 0x03);
c7e16b8c:	e2023003 	and	r3, r2, #3	; 0x3
c7e16b90:	e3a01801 	mov	r1, #65536	; 0x10000
c7e16b94:	e1a01311 	lsl	r1, r1, r3
		} else {
			/* Calc pagesize */
			mtd->writesize = 1024 << (extid & 0x03);
			extid >>= 2;
			/* Calc oobsize */
			mtd->oobsize = (8 << (extid & 0x01)) *
c7e16b98:	e1a034ac 	lsr	r3, ip, #9
c7e16b9c:	e0030390 	mul	r3, r0, r3
			extid >>= 2;
			/* Calc blocksize. Blocksize is multiples of 64KiB */
			mtd->erasesize = (64 * 1024) << (extid & 0x03);
			extid >>= 2;
			/* Get buswidth information */
			busw = (extid & 0x01) ? NAND_BUSWIDTH_16 : 0;
c7e16ba0:	e2122004 	ands	r2, r2, #4	; 0x4
		} else {
			/* Calc pagesize */
			mtd->writesize = 1024 << (extid & 0x03);
			extid >>= 2;
			/* Calc oobsize */
			mtd->oobsize = (8 << (extid & 0x01)) *
c7e16ba4:	e5863018 	str	r3, [r6, #24]
				(mtd->writesize >> 9);
			extid >>= 2;
			/* Calc blocksize. Blocksize is multiples of 64KiB */
			mtd->erasesize = (64 * 1024) << (extid & 0x03);
c7e16ba8:	e5861010 	str	r1, [r6, #16]
			extid >>= 2;
			/* Get buswidth information */
			busw = (extid & 0x01) ? NAND_BUSWIDTH_16 : 0;
c7e16bac:	01a04002 	moveq	r4, r2
c7e16bb0:	13a04002 	movne	r4, #2	; 0x2
			mtd->erasesize = (128 * 1024) <<
				(((extid >> 1) & 0x04) | (extid & 0x03));
			busw = 0;
		} else {
			/* Calc pagesize */
			mtd->writesize = 1024 << (extid & 0x03);
c7e16bb4:	e586c014 	str	ip, [r6, #20]
c7e16bb8:	ea00001c 	b	c7e16c30 <nand_scan_ident+0x424>
		}
	} else {
		/*
		 * Old devices have chip data hardcoded in the device id table
		 */
		mtd->erasesize = type->erasesize;
c7e16bbc:	e5973010 	ldr	r3, [r7, #16]
		mtd->writesize = type->pagesize;
		mtd->oobsize = mtd->writesize / 32;
		busw = type->options & NAND_BUSWIDTH_16;
c7e16bc0:	e5971014 	ldr	r1, [r7, #20]
		/*
		 * Old devices have chip data hardcoded in the device id table
		 */
		mtd->erasesize = type->erasesize;
		mtd->writesize = type->pagesize;
		mtd->oobsize = mtd->writesize / 32;
c7e16bc4:	e1a022ac 	lsr	r2, ip, #5
		 * Check for Spansion/AMD ID + repeating 5th, 6th byte since
		 * some Spansion chips have erasesize that conflicts with size
		 * listed in nand_ids table
		 * Data sheet (5 byte ID): Spansion S30ML-P ORNAND (p.39)
		 */
		if (*maf_id == NAND_MFR_AMD && id_data[4] != 0x00 &&
c7e16bc8:	e3590001 	cmp	r9, #1	; 0x1
		}
	} else {
		/*
		 * Old devices have chip data hardcoded in the device id table
		 */
		mtd->erasesize = type->erasesize;
c7e16bcc:	e5863010 	str	r3, [r6, #16]
		mtd->writesize = type->pagesize;
		mtd->oobsize = mtd->writesize / 32;
c7e16bd0:	e5862018 	str	r2, [r6, #24]
	} else {
		/*
		 * Old devices have chip data hardcoded in the device id table
		 */
		mtd->erasesize = type->erasesize;
		mtd->writesize = type->pagesize;
c7e16bd4:	e586c014 	str	ip, [r6, #20]
		mtd->oobsize = mtd->writesize / 32;
		busw = type->options & NAND_BUSWIDTH_16;
c7e16bd8:	e2014002 	and	r4, r1, #2	; 0x2
		 * Check for Spansion/AMD ID + repeating 5th, 6th byte since
		 * some Spansion chips have erasesize that conflicts with size
		 * listed in nand_ids table
		 * Data sheet (5 byte ID): Spansion S30ML-P ORNAND (p.39)
		 */
		if (*maf_id == NAND_MFR_AMD && id_data[4] != 0x00 &&
c7e16bdc:	1a000013 	bne	c7e16c30 <nand_scan_ident+0x424>
c7e16be0:	e5dd3014 	ldrb	r3, [sp, #20]
c7e16be4:	e3530000 	cmp	r3, #0	; 0x0
c7e16be8:	0a000010 	beq	c7e16c30 <nand_scan_ident+0x424>
c7e16bec:	e5dd3015 	ldrb	r3, [sp, #21]
c7e16bf0:	e3530000 	cmp	r3, #0	; 0x0
c7e16bf4:	1a00000d 	bne	c7e16c30 <nand_scan_ident+0x424>
c7e16bf8:	e5dd3016 	ldrb	r3, [sp, #22]
c7e16bfc:	e3530000 	cmp	r3, #0	; 0x0
c7e16c00:	1a00000a 	bne	c7e16c30 <nand_scan_ident+0x424>
c7e16c04:	e5dd3017 	ldrb	r3, [sp, #23]
c7e16c08:	e3530000 	cmp	r3, #0	; 0x0
c7e16c0c:	1a000007 	bne	c7e16c30 <nand_scan_ident+0x424>
c7e16c10:	e35c0c02 	cmp	ip, #512	; 0x200
c7e16c14:	1a000005 	bne	c7e16c30 <nand_scan_ident+0x424>
				id_data[5] == 0x00 && id_data[6] == 0x00 &&
				id_data[7] == 0x00 && mtd->writesize == 512) {
			mtd->erasesize = 128 * 1024;
			mtd->erasesize <<= ((id_data[3] & 0x03) << 1);
c7e16c18:	e5dd2013 	ldrb	r2, [sp, #19]
c7e16c1c:	e2833802 	add	r3, r3, #131072	; 0x20000
c7e16c20:	e2022003 	and	r2, r2, #3	; 0x3
c7e16c24:	e1a02082 	lsl	r2, r2, #1
c7e16c28:	e1a03213 	lsl	r3, r3, r2
c7e16c2c:	e5863010 	str	r3, [r6, #16]
		}
	}
	/* Get chip options, preserve non chip based options */
	chip->options |= type->options;
c7e16c30:	e5952050 	ldr	r2, [r5, #80]
c7e16c34:	e5973014 	ldr	r3, [r7, #20]

	/* Check if chip is a not a samsung device. Do not clear the
	 * options for chips which are not having an extended id.
	 */
	if (*maf_id != NAND_MFR_SAMSUNG && !type->pagesize)
c7e16c38:	e35900ec 	cmp	r9, #236	; 0xec
			mtd->erasesize = 128 * 1024;
			mtd->erasesize <<= ((id_data[3] & 0x03) << 1);
		}
	}
	/* Get chip options, preserve non chip based options */
	chip->options |= type->options;
c7e16c3c:	e1832002 	orr	r2, r3, r2
c7e16c40:	e5852050 	str	r2, [r5, #80]

	/* Check if chip is a not a samsung device. Do not clear the
	 * options for chips which are not having an extended id.
	 */
	if (*maf_id != NAND_MFR_SAMSUNG && !type->pagesize)
c7e16c44:	0a000003 	beq	c7e16c58 <nand_scan_ident+0x44c>
c7e16c48:	e5973008 	ldr	r3, [r7, #8]
c7e16c4c:	e3530000 	cmp	r3, #0	; 0x0
		chip->options &= ~NAND_SAMSUNG_LP_OPTIONS;
c7e16c50:	03c2301c 	biceq	r3, r2, #28	; 0x1c
c7e16c54:	05853050 	streq	r3, [r5, #80]
ident_done:

	/*
	 * Set chip as a default. Board drivers can override it, if necessary
	 */
	chip->options |= NAND_NO_AUTOINCR;
c7e16c58:	e5953050 	ldr	r3, [r5, #80]
c7e16c5c:	e3a02000 	mov	r2, #0	; 0x0
c7e16c60:	e3831001 	orr	r1, r3, #1	; 0x1
c7e16c64:	e5851050 	str	r1, [r5, #80]
c7e16c68:	ea000002 	b	c7e16c78 <nand_scan_ident+0x46c>

	/* Try to identify manufacturer */
	for (maf_idx = 0; nand_manuf_ids[maf_idx].id != 0x0; maf_idx++) {
		if (nand_manuf_ids[maf_idx].id == *maf_id)
c7e16c6c:	e1530009 	cmp	r3, r9
c7e16c70:	0a000004 	beq	c7e16c88 <nand_scan_ident+0x47c>
	 * Set chip as a default. Board drivers can override it, if necessary
	 */
	chip->options |= NAND_NO_AUTOINCR;

	/* Try to identify manufacturer */
	for (maf_idx = 0; nand_manuf_ids[maf_idx].id != 0x0; maf_idx++) {
c7e16c74:	e2822001 	add	r2, r2, #1	; 0x1
c7e16c78:	e59f32d8 	ldr	r3, [pc, #728]	; c7e16f58 <nand_scan_ident+0x74c>
c7e16c7c:	e7933182 	ldr	r3, [r3, r2, lsl #3]
c7e16c80:	e3530000 	cmp	r3, #0	; 0x0
c7e16c84:	1afffff8 	bne	c7e16c6c <nand_scan_ident+0x460>

	/*
	 * Check, if buswidth is correct. Hardware drivers should set
	 * chip correct !
	 */
	if (busw != (chip->options & NAND_BUSWIDTH_16)) {
c7e16c88:	e2013002 	and	r3, r1, #2	; 0x2
c7e16c8c:	e1540003 	cmp	r4, r3
c7e16c90:	0a000013 	beq	c7e16ce4 <nand_scan_ident+0x4d8>
		printk(KERN_INFO "NAND device: Manufacturer ID:"
c7e16c94:	e59f32bc 	ldr	r3, [pc, #700]	; c7e16f58 <nand_scan_ident+0x74c>
c7e16c98:	e596c020 	ldr	ip, [r6, #32]
c7e16c9c:	e0833182 	add	r3, r3, r2, lsl #3
c7e16ca0:	e1a01009 	mov	r1, r9
c7e16ca4:	e1a0200a 	mov	r2, sl
c7e16ca8:	e5933004 	ldr	r3, [r3, #4]
c7e16cac:	e59f02a8 	ldr	r0, [pc, #680]	; c7e16f5c <nand_scan_ident+0x750>
c7e16cb0:	e58dc000 	str	ip, [sp]
c7e16cb4:	ebffc767 	bl	c7e08a58 <printf>
		       " 0x%02x, Chip ID: 0x%02x (%s %s)\n", *maf_id,
		       *dev_id, nand_manuf_ids[maf_idx].name, mtd->name);
		printk(KERN_WARNING "NAND bus width %d instead %d bit\n",
c7e16cb8:	e5953050 	ldr	r3, [r5, #80]
c7e16cbc:	e59f029c 	ldr	r0, [pc, #668]	; c7e16f60 <nand_scan_ident+0x754>
c7e16cc0:	e3130002 	tst	r3, #2	; 0x2
c7e16cc4:	13a01010 	movne	r1, #16	; 0x10
c7e16cc8:	03a01008 	moveq	r1, #8	; 0x8
c7e16ccc:	e3540000 	cmp	r4, #0	; 0x0
c7e16cd0:	13a02010 	movne	r2, #16	; 0x10
c7e16cd4:	03a02008 	moveq	r2, #8	; 0x8
c7e16cd8:	ebffc75e 	bl	c7e08a58 <printf>
c7e16cdc:	e3e04015 	mvn	r4, #21	; 0x15
c7e16ce0:	ea000055 	b	c7e16e3c <nand_scan_ident+0x630>
		       busw ? 16 : 8);
		return ERR_PTR(-EINVAL);
	}

	/* Calculate the address shift from the page size */
	chip->page_shift = ffs(mtd->writesize) - 1;
c7e16ce4:	e596a014 	ldr	sl, [r6, #20]
c7e16ce8:	e1a0000a 	mov	r0, sl
c7e16cec:	ebfff97c 	bl	c7e152e4 <generic_ffs>
c7e16cf0:	e2400001 	sub	r0, r0, #1	; 0x1
	/* Convert chipsize to number of pages per chip -1. */
	chip->pagemask = (chip->chipsize >> chip->page_shift) - 1;
c7e16cf4:	e1a02000 	mov	r2, r0
		       busw ? 16 : 8);
		return ERR_PTR(-EINVAL);
	}

	/* Calculate the address shift from the page size */
	chip->page_shift = ffs(mtd->writesize) - 1;
c7e16cf8:	e5850054 	str	r0, [r5, #84]
	/* Convert chipsize to number of pages per chip -1. */
	chip->pagemask = (chip->chipsize >> chip->page_shift) - 1;
c7e16cfc:	e2851068 	add	r1, r5, #104	; 0x68
c7e16d00:	e8910003 	ldm	r1, {r0, r1}
c7e16d04:	eb004e96 	bl	c7e2a764 <__lshrdi3>
c7e16d08:	e2400001 	sub	r0, r0, #1	; 0x1
c7e16d0c:	e5850070 	str	r0, [r5, #112]

	chip->bbt_erase_shift = chip->phys_erase_shift =
c7e16d10:	e5960010 	ldr	r0, [r6, #16]
c7e16d14:	ebfff972 	bl	c7e152e4 <generic_ffs>
		ffs(mtd->erasesize) - 1;
	if (chip->chipsize & 0xffffffff)
c7e16d18:	e5953068 	ldr	r3, [r5, #104]
	/* Calculate the address shift from the page size */
	chip->page_shift = ffs(mtd->writesize) - 1;
	/* Convert chipsize to number of pages per chip -1. */
	chip->pagemask = (chip->chipsize >> chip->page_shift) - 1;

	chip->bbt_erase_shift = chip->phys_erase_shift =
c7e16d1c:	e2400001 	sub	r0, r0, #1	; 0x1
		ffs(mtd->erasesize) - 1;
	if (chip->chipsize & 0xffffffff)
c7e16d20:	e3530000 	cmp	r3, #0	; 0x0
	/* Calculate the address shift from the page size */
	chip->page_shift = ffs(mtd->writesize) - 1;
	/* Convert chipsize to number of pages per chip -1. */
	chip->pagemask = (chip->chipsize >> chip->page_shift) - 1;

	chip->bbt_erase_shift = chip->phys_erase_shift =
c7e16d24:	e585005c 	str	r0, [r5, #92]
c7e16d28:	e5850058 	str	r0, [r5, #88]
		ffs(mtd->erasesize) - 1;
	if (chip->chipsize & 0xffffffff)
c7e16d2c:	e595006c 	ldr	r0, [r5, #108]
c7e16d30:	0a000003 	beq	c7e16d44 <nand_scan_ident+0x538>
		chip->chip_shift = ffs((unsigned)chip->chipsize) - 1;
c7e16d34:	e1a00003 	mov	r0, r3
c7e16d38:	ebfff969 	bl	c7e152e4 <generic_ffs>
c7e16d3c:	e2400001 	sub	r0, r0, #1	; 0x1
c7e16d40:	ea000001 	b	c7e16d4c <nand_scan_ident+0x540>
	else {
		chip->chip_shift = ffs((unsigned)(chip->chipsize >> 32));
c7e16d44:	ebfff966 	bl	c7e152e4 <generic_ffs>
		chip->chip_shift += 32 - 1;
c7e16d48:	e280001f 	add	r0, r0, #31	; 0x1f
	}

	chip->badblockbits = 8;
c7e16d4c:	e3a03008 	mov	r3, #8	; 0x8

	/* Set the bad block position */
	if (mtd->writesize > 512 || (busw & NAND_BUSWIDTH_16))
c7e16d50:	e35a0c02 	cmp	sl, #512	; 0x200
		ffs(mtd->erasesize) - 1;
	if (chip->chipsize & 0xffffffff)
		chip->chip_shift = ffs((unsigned)chip->chipsize) - 1;
	else {
		chip->chip_shift = ffs((unsigned)(chip->chipsize >> 32));
		chip->chip_shift += 32 - 1;
c7e16d54:	e5850060 	str	r0, [r5, #96]
	}

	chip->badblockbits = 8;
c7e16d58:	e5853084 	str	r3, [r5, #132]

	/* Set the bad block position */
	if (mtd->writesize > 512 || (busw & NAND_BUSWIDTH_16))
c7e16d5c:	8a000002 	bhi	c7e16d6c <nand_scan_ident+0x560>
c7e16d60:	e3140002 	tst	r4, #2	; 0x2
		chip->badblockpos = NAND_LARGE_BADBLOCK_POS;
	else
		chip->badblockpos = NAND_SMALL_BADBLOCK_POS;
c7e16d64:	03a03005 	moveq	r3, #5	; 0x5
	}

	chip->badblockbits = 8;

	/* Set the bad block position */
	if (mtd->writesize > 512 || (busw & NAND_BUSWIDTH_16))
c7e16d68:	0a000000 	beq	c7e16d70 <nand_scan_ident+0x564>
		chip->badblockpos = NAND_LARGE_BADBLOCK_POS;
c7e16d6c:	e3a03000 	mov	r3, #0	; 0x0
	else
		chip->badblockpos = NAND_SMALL_BADBLOCK_POS;
c7e16d70:	e5853080 	str	r3, [r5, #128]
	 * on Samsung and Hynix MLC devices; stored in first two pages
	 * of each block on Micron devices with 2KiB pages and on
	 * SLC Samsung, Hynix, Toshiba and AMD/Spansion. All others scan
	 * only the first page.
	 */
	if ((chip->cellinfo & NAND_CI_CELLTYPE_MSK) &&
c7e16d74:	e5d5307c 	ldrb	r3, [r5, #124]
c7e16d78:	e313000c 	tst	r3, #12	; 0xc
c7e16d7c:	0a000005 	beq	c7e16d98 <nand_scan_ident+0x58c>
c7e16d80:	e35900ad 	cmp	r9, #173	; 0xad
c7e16d84:	135900ec 	cmpne	r9, #236	; 0xec
			(*maf_id == NAND_MFR_SAMSUNG ||
			 *maf_id == NAND_MFR_HYNIX))
		chip->options |= NAND_BBT_SCANLASTPAGE;
c7e16d88:	05953050 	ldreq	r3, [r5, #80]
c7e16d8c:	03833902 	orreq	r3, r3, #32768	; 0x8000
	 * on Samsung and Hynix MLC devices; stored in first two pages
	 * of each block on Micron devices with 2KiB pages and on
	 * SLC Samsung, Hynix, Toshiba and AMD/Spansion. All others scan
	 * only the first page.
	 */
	if ((chip->cellinfo & NAND_CI_CELLTYPE_MSK) &&
c7e16d90:	0a00000d 	beq	c7e16dcc <nand_scan_ident+0x5c0>
c7e16d94:	ea000006 	b	c7e16db4 <nand_scan_ident+0x5a8>
			(*maf_id == NAND_MFR_SAMSUNG ||
			 *maf_id == NAND_MFR_HYNIX))
		chip->options |= NAND_BBT_SCANLASTPAGE;
	else if ((!(chip->cellinfo & NAND_CI_CELLTYPE_MSK) &&
c7e16d98:	e35b00ad 	cmp	fp, #173	; 0xad
c7e16d9c:	135b00ec 	cmpne	fp, #236	; 0xec
c7e16da0:	0a000007 	beq	c7e16dc4 <nand_scan_ident+0x5b8>
c7e16da4:	e35b0098 	cmp	fp, #152	; 0x98
c7e16da8:	0a000005 	beq	c7e16dc4 <nand_scan_ident+0x5b8>
c7e16dac:	e35b0001 	cmp	fp, #1	; 0x1
c7e16db0:	0a000003 	beq	c7e16dc4 <nand_scan_ident+0x5b8>
c7e16db4:	e35a0b02 	cmp	sl, #2048	; 0x800
c7e16db8:	1a000004 	bne	c7e16dd0 <nand_scan_ident+0x5c4>
c7e16dbc:	e359002c 	cmp	r9, #44	; 0x2c
c7e16dc0:	1a000002 	bne	c7e16dd0 <nand_scan_ident+0x5c4>
				 *maf_id == NAND_MFR_HYNIX ||
				 *maf_id == NAND_MFR_TOSHIBA ||
				 *maf_id == NAND_MFR_AMD)) ||
			(mtd->writesize == 2048 &&
			 *maf_id == NAND_MFR_MICRON))
		chip->options |= NAND_BBT_SCAN2NDPAGE;
c7e16dc4:	e5953050 	ldr	r3, [r5, #80]
c7e16dc8:	e3833901 	orr	r3, r3, #16384	; 0x4000
c7e16dcc:	e5853050 	str	r3, [r5, #80]

	/*
	 * Numonyx/ST 2K pages, x8 bus use BOTH byte 1 and 6
	 */
	if (!(busw & NAND_BUSWIDTH_16) &&
c7e16dd0:	e2142002 	ands	r2, r4, #2	; 0x2
c7e16dd4:	1a000006 	bne	c7e16df4 <nand_scan_ident+0x5e8>
c7e16dd8:	e3590020 	cmp	r9, #32	; 0x20
c7e16ddc:	1a000004 	bne	c7e16df4 <nand_scan_ident+0x5e8>
c7e16de0:	e35a0b02 	cmp	sl, #2048	; 0x800
			*maf_id == NAND_MFR_STMICRO &&
			mtd->writesize == 2048) {
		chip->options |= NAND_BBT_SCANBYTE1AND6;
c7e16de4:	05953050 	ldreq	r3, [r5, #80]
		chip->badblockpos = 0;
c7e16de8:	05852080 	streq	r2, [r5, #128]
	 * Numonyx/ST 2K pages, x8 bus use BOTH byte 1 and 6
	 */
	if (!(busw & NAND_BUSWIDTH_16) &&
			*maf_id == NAND_MFR_STMICRO &&
			mtd->writesize == 2048) {
		chip->options |= NAND_BBT_SCANBYTE1AND6;
c7e16dec:	03833601 	orreq	r3, r3, #1048576	; 0x100000
c7e16df0:	05853050 	streq	r3, [r5, #80]
		chip->badblockpos = 0;
	}

	/* Check for AND chips with 4 page planes */
	if (chip->options & NAND_4PAGE_ARRAY)
c7e16df4:	e5953050 	ldr	r3, [r5, #80]
c7e16df8:	e3130040 	tst	r3, #64	; 0x40
		chip->erase_cmd = multi_erase_cmd;
c7e16dfc:	159f3160 	ldrne	r3, [pc, #352]	; c7e16f64 <nand_scan_ident+0x758>
	else
		chip->erase_cmd = single_erase_cmd;
c7e16e00:	059f3160 	ldreq	r3, [pc, #352]	; c7e16f68 <nand_scan_ident+0x75c>

	/* Do not replace user supplied command function ! */
	if (mtd->writesize > 512 && chip->cmdfunc == nand_command)
c7e16e04:	e35a0c02 	cmp	sl, #512	; 0x200

	/* Check for AND chips with 4 page planes */
	if (chip->options & NAND_4PAGE_ARRAY)
		chip->erase_cmd = multi_erase_cmd;
	else
		chip->erase_cmd = single_erase_cmd;
c7e16e08:	e585303c 	str	r3, [r5, #60]

	/* Do not replace user supplied command function ! */
	if (mtd->writesize > 512 && chip->cmdfunc == nand_command)
c7e16e0c:	9a000006 	bls	c7e16e2c <nand_scan_ident+0x620>
c7e16e10:	e5952034 	ldr	r2, [r5, #52]
c7e16e14:	e59f30f4 	ldr	r3, [pc, #244]	; c7e16f10 <nand_scan_ident+0x704>
c7e16e18:	e1520003 	cmp	r2, r3
		chip->cmdfunc = nand_command_lp;
c7e16e1c:	059f3148 	ldreq	r3, [pc, #328]	; c7e16f6c <nand_scan_ident+0x760>
c7e16e20:	01a04007 	moveq	r4, r7
c7e16e24:	05853034 	streq	r3, [r5, #52]
c7e16e28:	0a000000 	beq	c7e16e30 <nand_scan_ident+0x624>
c7e16e2c:	e1a04007 	mov	r4, r7

	/* Read the flash type */
	type = nand_get_flash_type(mtd, chip, busw,
				&nand_maf_id, &nand_dev_id, table);

	if (IS_ERR(type)) {
c7e16e30:	e3770a01 	cmn	r7, #4096	; 0x1000
c7e16e34:	93a04001 	movls	r4, #1	; 0x1
c7e16e38:	9a000021 	bls	c7e16ec4 <nand_scan_ident+0x6b8>
#ifndef CONFIG_SYS_NAND_QUIET_TEST
		printk(KERN_WARNING "No NAND device found!!!\n");
c7e16e3c:	e59f012c 	ldr	r0, [pc, #300]	; c7e16f70 <nand_scan_ident+0x764>
c7e16e40:	ebffc704 	bl	c7e08a58 <printf>
#endif
		chip->select_chip(mtd, -1);
c7e16e44:	e1a00006 	mov	r0, r6
c7e16e48:	e3e01000 	mvn	r1, #0	; 0x0
c7e16e4c:	e1a0e00f 	mov	lr, pc
c7e16e50:	e595f01c 	ldr	pc, [r5, #28]
	return (void *) error;
}

static inline long PTR_ERR(const void *ptr)
{
	return (long) ptr;
c7e16e54:	e1a00004 	mov	r0, r4
c7e16e58:	ea00002a 	b	c7e16f08 <nand_scan_ident+0x6fc>
		return PTR_ERR(type);
	}

	/* Check for a chip array */
	for (i = 1; i < maxchips; i++) {
		chip->select_chip(mtd, i);
c7e16e5c:	e1a0e00f 	mov	lr, pc
c7e16e60:	e595f01c 	ldr	pc, [r5, #28]
		/* See comment in nand_get_flash_type for reset */
		chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
c7e16e64:	e3e02000 	mvn	r2, #0	; 0x0
c7e16e68:	e1a03002 	mov	r3, r2
c7e16e6c:	e1a00006 	mov	r0, r6
c7e16e70:	e3a010ff 	mov	r1, #255	; 0xff
c7e16e74:	e1a0e00f 	mov	lr, pc
c7e16e78:	e595f034 	ldr	pc, [r5, #52]
		/* Send the command for reading device ID */
		chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
c7e16e7c:	e1a00006 	mov	r0, r6
c7e16e80:	e3a01090 	mov	r1, #144	; 0x90
c7e16e84:	e3a02000 	mov	r2, #0	; 0x0
c7e16e88:	e3e03000 	mvn	r3, #0	; 0x0
c7e16e8c:	e1a0e00f 	mov	lr, pc
c7e16e90:	e595f034 	ldr	pc, [r5, #52]
		/* Read manufacturer and device IDs */
		if (nand_maf_id != chip->read_byte(mtd) ||
c7e16e94:	e1a00006 	mov	r0, r6
c7e16e98:	e1a0e00f 	mov	lr, pc
c7e16e9c:	e595f008 	ldr	pc, [r5, #8]
c7e16ea0:	e15b0000 	cmp	fp, r0
c7e16ea4:	e1a00006 	mov	r0, r6
c7e16ea8:	1a00000a 	bne	c7e16ed8 <nand_scan_ident+0x6cc>
c7e16eac:	e1a0e00f 	mov	lr, pc
c7e16eb0:	e595f008 	ldr	pc, [r5, #8]
c7e16eb4:	e59d3008 	ldr	r3, [sp, #8]
c7e16eb8:	e1530000 	cmp	r3, r0
c7e16ebc:	1a000005 	bne	c7e16ed8 <nand_scan_ident+0x6cc>
		chip->select_chip(mtd, -1);
		return PTR_ERR(type);
	}

	/* Check for a chip array */
	for (i = 1; i < maxchips; i++) {
c7e16ec0:	e2844001 	add	r4, r4, #1	; 0x1
c7e16ec4:	e59d300c 	ldr	r3, [sp, #12]
		chip->select_chip(mtd, i);
c7e16ec8:	e1a01004 	mov	r1, r4
		chip->select_chip(mtd, -1);
		return PTR_ERR(type);
	}

	/* Check for a chip array */
	for (i = 1; i < maxchips; i++) {
c7e16ecc:	e1540003 	cmp	r4, r3
		chip->select_chip(mtd, i);
c7e16ed0:	e1a00006 	mov	r0, r6
		chip->select_chip(mtd, -1);
		return PTR_ERR(type);
	}

	/* Check for a chip array */
	for (i = 1; i < maxchips; i++) {
c7e16ed4:	baffffe0 	blt	c7e16e5c <nand_scan_ident+0x650>
		printk(KERN_INFO "%d NAND chips detected\n", i);
#endif

	/* Store the number of chips and calc total size for mtd */
	chip->numchips = i;
	mtd->size = i * chip->chipsize;
c7e16ed8:	e595306c 	ldr	r3, [r5, #108]
c7e16edc:	e1a01004 	mov	r1, r4
c7e16ee0:	e1a02fc1 	asr	r2, r1, #31
c7e16ee4:	e00c0391 	mul	ip, r1, r3
c7e16ee8:	e5950068 	ldr	r0, [r5, #104]
	if (i > 1)
		printk(KERN_INFO "%d NAND chips detected\n", i);
#endif

	/* Store the number of chips and calc total size for mtd */
	chip->numchips = i;
c7e16eec:	e5854064 	str	r4, [r5, #100]
	mtd->size = i * chip->chipsize;
c7e16ef0:	e022c290 	mla	r2, r0, r2, ip
c7e16ef4:	e0843190 	umull	r3, r4, r0, r1
c7e16ef8:	e0824004 	add	r4, r2, r4
c7e16efc:	e5863008 	str	r3, [r6, #8]
c7e16f00:	e586400c 	str	r4, [r6, #12]
c7e16f04:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e16f08:	e28dd018 	add	sp, sp, #24	; 0x18
c7e16f0c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e16f10:	c7e18df8 	.word	0xc7e18df8
c7e16f14:	c7e1852c 	.word	0xc7e1852c
c7e16f18:	c7e17570 	.word	0xc7e17570
c7e16f1c:	c7e15364 	.word	0xc7e15364
c7e16f20:	c7e15378 	.word	0xc7e15378
c7e16f24:	c7e1538c 	.word	0xc7e1538c
c7e16f28:	c7e1555c 	.word	0xc7e1555c
c7e16f2c:	c7e17f94 	.word	0xc7e17f94
c7e16f30:	c7e1539c 	.word	0xc7e1539c
c7e16f34:	c7e15448 	.word	0xc7e15448
c7e16f38:	c7e153d0 	.word	0xc7e153d0
c7e16f3c:	c7e15480 	.word	0xc7e15480
c7e16f40:	c7e153fc 	.word	0xc7e153fc
c7e16f44:	c7e154b8 	.word	0xc7e154b8
c7e16f48:	c7e147bc 	.word	0xc7e147bc
c7e16f4c:	c7e2b000 	.word	0xc7e2b000
c7e16f50:	c7e339ed 	.word	0xc7e339ed
c7e16f54:	c7e2a7ec 	.word	0xc7e2a7ec
c7e16f58:	c7e2aeac 	.word	0xc7e2aeac
c7e16f5c:	c7e33a2b 	.word	0xc7e33a2b
c7e16f60:	c7e33a6a 	.word	0xc7e33a6a
c7e16f64:	c7e16718 	.word	0xc7e16718
c7e16f68:	c7e166dc 	.word	0xc7e166dc
c7e16f6c:	c7e18fd4 	.word	0xc7e18fd4
c7e16f70:	c7e33a8c 	.word	0xc7e33a8c

c7e16f74 <nand_scan_tail>:
 * This is the second phase of the normal nand_scan() function. It
 * fills out all the uninitialized function pointers with the defaults
 * and scans for a bad block table if appropriate.
 */
int nand_scan_tail(struct mtd_info *mtd)
{
c7e16f74:	e92d4070 	push	{r4, r5, r6, lr}
	int i;
	struct nand_chip *chip = mtd->priv;
c7e16f78:	e5905094 	ldr	r5, [r0, #148]
 * This is the second phase of the normal nand_scan() function. It
 * fills out all the uninitialized function pointers with the defaults
 * and scans for a bad block table if appropriate.
 */
int nand_scan_tail(struct mtd_info *mtd)
{
c7e16f7c:	e1a06000 	mov	r6, r0
	int i;
	struct nand_chip *chip = mtd->priv;

	if (!(chip->options & NAND_OWN_BUFFERS))
c7e16f80:	e5953050 	ldr	r3, [r5, #80]
c7e16f84:	e3130701 	tst	r3, #262144	; 0x40000
c7e16f88:	1a000003 	bne	c7e16f9c <nand_scan_tail+0x28>
		chip->buffers = memalign(ARCH_DMA_MINALIGN,
c7e16f8c:	e3a00040 	mov	r0, #64	; 0x40
c7e16f90:	e3a01d9b 	mov	r1, #9920	; 0x26c0
c7e16f94:	ebffca0d 	bl	c7e097d0 <memalign>
c7e16f98:	e58500e8 	str	r0, [r5, #232]
					 sizeof(*chip->buffers));
	if (!chip->buffers)
c7e16f9c:	e59510e8 	ldr	r1, [r5, #232]
c7e16fa0:	e3510000 	cmp	r1, #0	; 0x0
c7e16fa4:	03e0000b 	mvneq	r0, #11	; 0xb
c7e16fa8:	08bd8070 	popeq	{r4, r5, r6, pc}
		return -ENOMEM;

	/* Set the internal oob buffer location, just after the page data */
	chip->oob_poi = chip->buffers->databuf + mtd->writesize;
c7e16fac:	e5963014 	ldr	r3, [r6, #20]

	/*
	 * If no default placement scheme is given, select an appropriate one
	 */
	if (!chip->ecc.layout && (chip->ecc.mode != NAND_ECC_SOFT_BCH)) {
c7e16fb0:	e59520b8 	ldr	r2, [r5, #184]
					 sizeof(*chip->buffers));
	if (!chip->buffers)
		return -ENOMEM;

	/* Set the internal oob buffer location, just after the page data */
	chip->oob_poi = chip->buffers->databuf + mtd->writesize;
c7e16fb4:	e2833d12 	add	r3, r3, #1152	; 0x480
c7e16fb8:	e0813003 	add	r3, r1, r3

	/*
	 * If no default placement scheme is given, select an appropriate one
	 */
	if (!chip->ecc.layout && (chip->ecc.mode != NAND_ECC_SOFT_BCH)) {
c7e16fbc:	e3520000 	cmp	r2, #0	; 0x0
					 sizeof(*chip->buffers));
	if (!chip->buffers)
		return -ENOMEM;

	/* Set the internal oob buffer location, just after the page data */
	chip->oob_poi = chip->buffers->databuf + mtd->writesize;
c7e16fc0:	e5853090 	str	r3, [r5, #144]

	/*
	 * If no default placement scheme is given, select an appropriate one
	 */
	if (!chip->ecc.layout && (chip->ecc.mode != NAND_ECC_SOFT_BCH)) {
c7e16fc4:	1a00001d 	bne	c7e17040 <nand_scan_tail+0xcc>
c7e16fc8:	e595309c 	ldr	r3, [r5, #156]
c7e16fcc:	e3530005 	cmp	r3, #5	; 0x5
c7e16fd0:	0a00001a 	beq	c7e17040 <nand_scan_tail+0xcc>
		switch (mtd->oobsize) {
c7e16fd4:	e5961018 	ldr	r1, [r6, #24]
c7e16fd8:	e3510040 	cmp	r1, #64	; 0x40
c7e16fdc:	0a00000f 	beq	c7e17020 <nand_scan_tail+0xac>
c7e16fe0:	8a000004 	bhi	c7e16ff8 <nand_scan_tail+0x84>
c7e16fe4:	e3510008 	cmp	r1, #8	; 0x8
c7e16fe8:	0a000007 	beq	c7e1700c <nand_scan_tail+0x98>
c7e16fec:	e3510010 	cmp	r1, #16	; 0x10
c7e16ff0:	1a000010 	bne	c7e17038 <nand_scan_tail+0xc4>
c7e16ff4:	ea000006 	b	c7e17014 <nand_scan_tail+0xa0>
c7e16ff8:	e3510080 	cmp	r1, #128	; 0x80
c7e16ffc:	0a000009 	beq	c7e17028 <nand_scan_tail+0xb4>
c7e17000:	e35100da 	cmp	r1, #218	; 0xda
c7e17004:	1a00000b 	bne	c7e17038 <nand_scan_tail+0xc4>
c7e17008:	ea000008 	b	c7e17030 <nand_scan_tail+0xbc>
		case 8:
			chip->ecc.layout = &nand_oob_8;
c7e1700c:	e59f347c 	ldr	r3, [pc, #1148]	; c7e17490 <nand_scan_tail+0x51c>
c7e17010:	ea000000 	b	c7e17018 <nand_scan_tail+0xa4>
			break;
		case 16:
			chip->ecc.layout = &nand_oob_16;
c7e17014:	e59f3478 	ldr	r3, [pc, #1144]	; c7e17494 <nand_scan_tail+0x520>
c7e17018:	e58530b8 	str	r3, [r5, #184]
c7e1701c:	ea000007 	b	c7e17040 <nand_scan_tail+0xcc>
			break;
		case 64:
			chip->ecc.layout = &nand_oob_64;
c7e17020:	e59f3470 	ldr	r3, [pc, #1136]	; c7e17498 <nand_scan_tail+0x524>
c7e17024:	eafffffb 	b	c7e17018 <nand_scan_tail+0xa4>
			break;
		case 128:
			chip->ecc.layout = &nand_oob_128;
c7e17028:	e59f346c 	ldr	r3, [pc, #1132]	; c7e1749c <nand_scan_tail+0x528>
c7e1702c:	eafffff9 	b	c7e17018 <nand_scan_tail+0xa4>
			break;
		case 218:
			chip->ecc.layout = &nand_oob_218;
c7e17030:	e59f3468 	ldr	r3, [pc, #1128]	; c7e174a0 <nand_scan_tail+0x52c>
c7e17034:	eafffff7 	b	c7e17018 <nand_scan_tail+0xa4>
			break;
		default:
			printk(KERN_WARNING "No oob scheme defined for "
c7e17038:	e59f0464 	ldr	r0, [pc, #1124]	; c7e174a4 <nand_scan_tail+0x530>
c7e1703c:	ebffc685 	bl	c7e08a58 <printf>
			       "oobsize %d\n", mtd->oobsize);
		}
	}

	if (!chip->write_page)
c7e17040:	e5953048 	ldr	r3, [r5, #72]
	/*
	 * check ECC mode, default to software if 3byte/512byte hardware ECC is
	 * selected and we have 256 byte pagesize fallback to software ECC
	 */

	switch (chip->ecc.mode) {
c7e17044:	e595109c 	ldr	r1, [r5, #156]
			printk(KERN_WARNING "No oob scheme defined for "
			       "oobsize %d\n", mtd->oobsize);
		}
	}

	if (!chip->write_page)
c7e17048:	e3530000 	cmp	r3, #0	; 0x0
		chip->write_page = nand_write_page;
c7e1704c:	059f3454 	ldreq	r3, [pc, #1108]	; c7e174a8 <nand_scan_tail+0x534>
c7e17050:	05853048 	streq	r3, [r5, #72]
	/*
	 * check ECC mode, default to software if 3byte/512byte hardware ECC is
	 * selected and we have 256 byte pagesize fallback to software ECC
	 */

	switch (chip->ecc.mode) {
c7e17054:	e3510005 	cmp	r1, #5	; 0x5
c7e17058:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
c7e1705c:	ea00009c 	b	c7e172d4 <nand_scan_tail+0x360>
c7e17060:	c7e17290 	.word	0xc7e17290
c7e17064:	c7e1721c 	.word	0xc7e1721c
c7e17068:	c7e170c4 	.word	0xc7e170c4
c7e1706c:	c7e17124 	.word	0xc7e17124
c7e17070:	c7e17078 	.word	0xc7e17078
c7e17074:	c7e17280 	.word	0xc7e17280
	case NAND_ECC_HW_OOB_FIRST:
		/* Similar to NAND_ECC_HW, but a separate read_page handle */
		if (!chip->ecc.calculate || !chip->ecc.correct ||
c7e17078:	e59530c4 	ldr	r3, [r5, #196]
c7e1707c:	e3530000 	cmp	r3, #0	; 0x0
c7e17080:	0a000005 	beq	c7e1709c <nand_scan_tail+0x128>
c7e17084:	e59530c8 	ldr	r3, [r5, #200]
c7e17088:	e3530000 	cmp	r3, #0	; 0x0
c7e1708c:	0a000002 	beq	c7e1709c <nand_scan_tail+0x128>
c7e17090:	e59530c0 	ldr	r3, [r5, #192]
c7e17094:	e3530000 	cmp	r3, #0	; 0x0
c7e17098:	1a000005 	bne	c7e170b4 <nand_scan_tail+0x140>
		     !chip->ecc.hwctl) {
			printk(KERN_WARNING "No ECC functions supplied; "
c7e1709c:	e59f0408 	ldr	r0, [pc, #1032]	; c7e174ac <nand_scan_tail+0x538>
c7e170a0:	ebffc66c 	bl	c7e08a58 <printf>
			       "Hardware ECC not possible\n");
			BUG();
c7e170a4:	e59f0404 	ldr	r0, [pc, #1028]	; c7e174b0 <nand_scan_tail+0x53c>
c7e170a8:	e59f1404 	ldr	r1, [pc, #1028]	; c7e174b4 <nand_scan_tail+0x540>
c7e170ac:	e59f2404 	ldr	r2, [pc, #1028]	; c7e174b8 <nand_scan_tail+0x544>
c7e170b0:	ea000035 	b	c7e1718c <nand_scan_tail+0x218>
		}
		if (!chip->ecc.read_page)
c7e170b4:	e59530d4 	ldr	r3, [r5, #212]
c7e170b8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_page = nand_read_page_hwecc_oob_first;
c7e170bc:	059f33f8 	ldreq	r3, [pc, #1016]	; c7e174bc <nand_scan_tail+0x548>
c7e170c0:	058530d4 	streq	r3, [r5, #212]

	case NAND_ECC_HW:
		/* Use standard hwecc read page function ? */
		if (!chip->ecc.read_page)
c7e170c4:	e59530d4 	ldr	r3, [r5, #212]
c7e170c8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_page = nand_read_page_hwecc;
c7e170cc:	059f33ec 	ldreq	r3, [pc, #1004]	; c7e174c0 <nand_scan_tail+0x54c>
c7e170d0:	058530d4 	streq	r3, [r5, #212]
		if (!chip->ecc.write_page)
c7e170d4:	e59530dc 	ldr	r3, [r5, #220]
c7e170d8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.write_page = nand_write_page_hwecc;
c7e170dc:	059f33e0 	ldreq	r3, [pc, #992]	; c7e174c4 <nand_scan_tail+0x550>
c7e170e0:	058530dc 	streq	r3, [r5, #220]
		if (!chip->ecc.read_page_raw)
c7e170e4:	e59530cc 	ldr	r3, [r5, #204]
c7e170e8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_page_raw = nand_read_page_raw;
c7e170ec:	059f33d4 	ldreq	r3, [pc, #980]	; c7e174c8 <nand_scan_tail+0x554>
c7e170f0:	058530cc 	streq	r3, [r5, #204]
		if (!chip->ecc.write_page_raw)
c7e170f4:	e59530d0 	ldr	r3, [r5, #208]
c7e170f8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.write_page_raw = nand_write_page_raw;
c7e170fc:	059f33c8 	ldreq	r3, [pc, #968]	; c7e174cc <nand_scan_tail+0x558>
c7e17100:	058530d0 	streq	r3, [r5, #208]
		if (!chip->ecc.read_oob)
c7e17104:	e59530e0 	ldr	r3, [r5, #224]
c7e17108:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_oob = nand_read_oob_std;
c7e1710c:	059f33bc 	ldreq	r3, [pc, #956]	; c7e174d0 <nand_scan_tail+0x55c>
c7e17110:	058530e0 	streq	r3, [r5, #224]
		if (!chip->ecc.write_oob)
c7e17114:	e59530e4 	ldr	r3, [r5, #228]
c7e17118:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.write_oob = nand_write_oob_std;
c7e1711c:	059f33b0 	ldreq	r3, [pc, #944]	; c7e174d4 <nand_scan_tail+0x560>
c7e17120:	058530e4 	streq	r3, [r5, #228]

	case NAND_ECC_HW_SYNDROME:
		if ((!chip->ecc.calculate || !chip->ecc.correct ||
c7e17124:	e59530c4 	ldr	r3, [r5, #196]
c7e17128:	e3530000 	cmp	r3, #0	; 0x0
c7e1712c:	0a000005 	beq	c7e17148 <nand_scan_tail+0x1d4>
c7e17130:	e59530c8 	ldr	r3, [r5, #200]
c7e17134:	e3530000 	cmp	r3, #0	; 0x0
c7e17138:	0a000002 	beq	c7e17148 <nand_scan_tail+0x1d4>
c7e1713c:	e59530c0 	ldr	r3, [r5, #192]
c7e17140:	e3530000 	cmp	r3, #0	; 0x0
c7e17144:	1a000014 	bne	c7e1719c <nand_scan_tail+0x228>
c7e17148:	e59520d4 	ldr	r2, [r5, #212]
c7e1714c:	e3520000 	cmp	r2, #0	; 0x0
c7e17150:	0a000008 	beq	c7e17178 <nand_scan_tail+0x204>
c7e17154:	e59f3364 	ldr	r3, [pc, #868]	; c7e174c0 <nand_scan_tail+0x54c>
c7e17158:	e1520003 	cmp	r2, r3
c7e1715c:	0a000005 	beq	c7e17178 <nand_scan_tail+0x204>
c7e17160:	e59520dc 	ldr	r2, [r5, #220]
c7e17164:	e3520000 	cmp	r2, #0	; 0x0
c7e17168:	0a000002 	beq	c7e17178 <nand_scan_tail+0x204>
c7e1716c:	e59f3350 	ldr	r3, [pc, #848]	; c7e174c4 <nand_scan_tail+0x550>
c7e17170:	e1520003 	cmp	r2, r3
c7e17174:	1a000008 	bne	c7e1719c <nand_scan_tail+0x228>
		     !chip->ecc.hwctl) &&
		    (!chip->ecc.read_page ||
		     chip->ecc.read_page == nand_read_page_hwecc ||
		     !chip->ecc.write_page ||
		     chip->ecc.write_page == nand_write_page_hwecc)) {
			printk(KERN_WARNING "No ECC functions supplied; "
c7e17178:	e59f032c 	ldr	r0, [pc, #812]	; c7e174ac <nand_scan_tail+0x538>
c7e1717c:	ebffc635 	bl	c7e08a58 <printf>
			       "Hardware ECC not possible\n");
			BUG();
c7e17180:	e59f0328 	ldr	r0, [pc, #808]	; c7e174b0 <nand_scan_tail+0x53c>
c7e17184:	e59f1328 	ldr	r1, [pc, #808]	; c7e174b4 <nand_scan_tail+0x540>
c7e17188:	e59f2348 	ldr	r2, [pc, #840]	; c7e174d8 <nand_scan_tail+0x564>
c7e1718c:	e59f3348 	ldr	r3, [pc, #840]	; c7e174dc <nand_scan_tail+0x568>
c7e17190:	ebffc630 	bl	c7e08a58 <printf>
c7e17194:	e59f0344 	ldr	r0, [pc, #836]	; c7e174e0 <nand_scan_tail+0x56c>
c7e17198:	eb003056 	bl	c7e232f8 <panic>
		}
		/* Use standard syndrome read/write page function ? */
		if (!chip->ecc.read_page)
c7e1719c:	e59530d4 	ldr	r3, [r5, #212]
		if (!chip->ecc.read_oob)
			chip->ecc.read_oob = nand_read_oob_syndrome;
		if (!chip->ecc.write_oob)
			chip->ecc.write_oob = nand_write_oob_syndrome;

		if (mtd->writesize >= chip->ecc.size)
c7e171a0:	e5962014 	ldr	r2, [r6, #20]
			printk(KERN_WARNING "No ECC functions supplied; "
			       "Hardware ECC not possible\n");
			BUG();
		}
		/* Use standard syndrome read/write page function ? */
		if (!chip->ecc.read_page)
c7e171a4:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_page = nand_read_page_syndrome;
c7e171a8:	059f3334 	ldreq	r3, [pc, #820]	; c7e174e4 <nand_scan_tail+0x570>
		if (!chip->ecc.read_oob)
			chip->ecc.read_oob = nand_read_oob_syndrome;
		if (!chip->ecc.write_oob)
			chip->ecc.write_oob = nand_write_oob_syndrome;

		if (mtd->writesize >= chip->ecc.size)
c7e171ac:	e59510a4 	ldr	r1, [r5, #164]
			       "Hardware ECC not possible\n");
			BUG();
		}
		/* Use standard syndrome read/write page function ? */
		if (!chip->ecc.read_page)
			chip->ecc.read_page = nand_read_page_syndrome;
c7e171b0:	058530d4 	streq	r3, [r5, #212]
		if (!chip->ecc.write_page)
c7e171b4:	e59530dc 	ldr	r3, [r5, #220]
c7e171b8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.write_page = nand_write_page_syndrome;
c7e171bc:	059f3324 	ldreq	r3, [pc, #804]	; c7e174e8 <nand_scan_tail+0x574>
c7e171c0:	058530dc 	streq	r3, [r5, #220]
		if (!chip->ecc.read_page_raw)
c7e171c4:	e59530cc 	ldr	r3, [r5, #204]
c7e171c8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_page_raw = nand_read_page_raw_syndrome;
c7e171cc:	059f3318 	ldreq	r3, [pc, #792]	; c7e174ec <nand_scan_tail+0x578>
c7e171d0:	058530cc 	streq	r3, [r5, #204]
		if (!chip->ecc.write_page_raw)
c7e171d4:	e59530d0 	ldr	r3, [r5, #208]
c7e171d8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.write_page_raw = nand_write_page_raw_syndrome;
c7e171dc:	059f330c 	ldreq	r3, [pc, #780]	; c7e174f0 <nand_scan_tail+0x57c>
c7e171e0:	058530d0 	streq	r3, [r5, #208]
		if (!chip->ecc.read_oob)
c7e171e4:	e59530e0 	ldr	r3, [r5, #224]
c7e171e8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.read_oob = nand_read_oob_syndrome;
c7e171ec:	059f3300 	ldreq	r3, [pc, #768]	; c7e174f4 <nand_scan_tail+0x580>
c7e171f0:	058530e0 	streq	r3, [r5, #224]
		if (!chip->ecc.write_oob)
c7e171f4:	e59530e4 	ldr	r3, [r5, #228]
c7e171f8:	e3530000 	cmp	r3, #0	; 0x0
			chip->ecc.write_oob = nand_write_oob_syndrome;
c7e171fc:	059f32f4 	ldreq	r3, [pc, #756]	; c7e174f8 <nand_scan_tail+0x584>
c7e17200:	058530e4 	streq	r3, [r5, #228]

		if (mtd->writesize >= chip->ecc.size)
c7e17204:	e1520001 	cmp	r2, r1
c7e17208:	2a000037 	bcs	c7e172ec <nand_scan_tail+0x378>
			break;
		printk(KERN_WARNING "%d byte HW ECC not possible on "
c7e1720c:	e59f02e8 	ldr	r0, [pc, #744]	; c7e174fc <nand_scan_tail+0x588>
c7e17210:	ebffc610 	bl	c7e08a58 <printf>
		       "%d byte page size, fallback to SW ECC\n",
		       chip->ecc.size, mtd->writesize);
		chip->ecc.mode = NAND_ECC_SOFT;
c7e17214:	e3a03001 	mov	r3, #1	; 0x1
c7e17218:	e585309c 	str	r3, [r5, #156]
		chip->ecc.write_page = nand_write_page_swecc;
		chip->ecc.read_page_raw = nand_read_page_raw;
		chip->ecc.write_page_raw = nand_write_page_raw;
		chip->ecc.read_oob = nand_read_oob_std;
		chip->ecc.write_oob = nand_write_oob_std;
		if (!chip->ecc.size)
c7e1721c:	e59530a4 	ldr	r3, [r5, #164]
c7e17220:	e3530000 	cmp	r3, #0	; 0x0
		       "%d byte page size, fallback to SW ECC\n",
		       chip->ecc.size, mtd->writesize);
		chip->ecc.mode = NAND_ECC_SOFT;

	case NAND_ECC_SOFT:
		chip->ecc.calculate = nand_calculate_ecc;
c7e17224:	e59f32d4 	ldr	r3, [pc, #724]	; c7e17500 <nand_scan_tail+0x58c>
c7e17228:	e58530c4 	str	r3, [r5, #196]
		chip->ecc.correct = nand_correct_data;
c7e1722c:	e59f32d0 	ldr	r3, [pc, #720]	; c7e17504 <nand_scan_tail+0x590>
c7e17230:	e58530c8 	str	r3, [r5, #200]
		chip->ecc.read_page = nand_read_page_swecc;
c7e17234:	e59f32cc 	ldr	r3, [pc, #716]	; c7e17508 <nand_scan_tail+0x594>
c7e17238:	e58530d4 	str	r3, [r5, #212]
		chip->ecc.read_subpage = nand_read_subpage;
c7e1723c:	e59f32c8 	ldr	r3, [pc, #712]	; c7e1750c <nand_scan_tail+0x598>
c7e17240:	e58530d8 	str	r3, [r5, #216]
		chip->ecc.write_page = nand_write_page_swecc;
c7e17244:	e59f32c4 	ldr	r3, [pc, #708]	; c7e17510 <nand_scan_tail+0x59c>
c7e17248:	e58530dc 	str	r3, [r5, #220]
		chip->ecc.read_page_raw = nand_read_page_raw;
c7e1724c:	e59f3274 	ldr	r3, [pc, #628]	; c7e174c8 <nand_scan_tail+0x554>
c7e17250:	e58530cc 	str	r3, [r5, #204]
		chip->ecc.write_page_raw = nand_write_page_raw;
c7e17254:	e59f3270 	ldr	r3, [pc, #624]	; c7e174cc <nand_scan_tail+0x558>
c7e17258:	e58530d0 	str	r3, [r5, #208]
		chip->ecc.read_oob = nand_read_oob_std;
c7e1725c:	e59f326c 	ldr	r3, [pc, #620]	; c7e174d0 <nand_scan_tail+0x55c>
c7e17260:	e58530e0 	str	r3, [r5, #224]
		chip->ecc.write_oob = nand_write_oob_std;
c7e17264:	e59f3268 	ldr	r3, [pc, #616]	; c7e174d4 <nand_scan_tail+0x560>
c7e17268:	e58530e4 	str	r3, [r5, #228]
		if (!chip->ecc.size)
			chip->ecc.size = 256;
c7e1726c:	03a03c01 	moveq	r3, #256	; 0x100
c7e17270:	058530a4 	streq	r3, [r5, #164]
		chip->ecc.bytes = 3;
c7e17274:	e3a03003 	mov	r3, #3	; 0x3
c7e17278:	e58530a8 	str	r3, [r5, #168]
c7e1727c:	ea00001a 	b	c7e172ec <nand_scan_tail+0x378>
		break;

	case NAND_ECC_SOFT_BCH:
		if (!mtd_nand_has_bch()) {
			printk(KERN_WARNING "CONFIG_MTD_ECC_BCH not enabled\n");
c7e17280:	e59f028c 	ldr	r0, [pc, #652]	; c7e17514 <nand_scan_tail+0x5a0>
c7e17284:	ebffc5f3 	bl	c7e08a58 <printf>
c7e17288:	e3e00015 	mvn	r0, #21	; 0x15
c7e1728c:	e8bd8070 	pop	{r4, r5, r6, pc}
			printk(KERN_WARNING "BCH ECC initialization failed!\n");

		break;

	case NAND_ECC_NONE:
		printk(KERN_WARNING "NAND_ECC_NONE selected by board driver. "
c7e17290:	e59f0280 	ldr	r0, [pc, #640]	; c7e17518 <nand_scan_tail+0x5a4>
c7e17294:	ebffc5ef 	bl	c7e08a58 <printf>
		       "This is not recommended !!\n");
		chip->ecc.read_page = nand_read_page_raw;
		chip->ecc.write_page = nand_write_page_raw;
		chip->ecc.read_oob = nand_read_oob_std;
c7e17298:	e59f3230 	ldr	r3, [pc, #560]	; c7e174d0 <nand_scan_tail+0x55c>
		break;

	case NAND_ECC_NONE:
		printk(KERN_WARNING "NAND_ECC_NONE selected by board driver. "
		       "This is not recommended !!\n");
		chip->ecc.read_page = nand_read_page_raw;
c7e1729c:	e59f1224 	ldr	r1, [pc, #548]	; c7e174c8 <nand_scan_tail+0x554>
		chip->ecc.write_page = nand_write_page_raw;
		chip->ecc.read_oob = nand_read_oob_std;
c7e172a0:	e58530e0 	str	r3, [r5, #224]
		chip->ecc.read_page_raw = nand_read_page_raw;
		chip->ecc.write_page_raw = nand_write_page_raw;
		chip->ecc.write_oob = nand_write_oob_std;
c7e172a4:	e59f3228 	ldr	r3, [pc, #552]	; c7e174d4 <nand_scan_tail+0x560>

	case NAND_ECC_NONE:
		printk(KERN_WARNING "NAND_ECC_NONE selected by board driver. "
		       "This is not recommended !!\n");
		chip->ecc.read_page = nand_read_page_raw;
		chip->ecc.write_page = nand_write_page_raw;
c7e172a8:	e59f021c 	ldr	r0, [pc, #540]	; c7e174cc <nand_scan_tail+0x558>
		chip->ecc.read_oob = nand_read_oob_std;
		chip->ecc.read_page_raw = nand_read_page_raw;
		chip->ecc.write_page_raw = nand_write_page_raw;
		chip->ecc.write_oob = nand_write_oob_std;
		chip->ecc.size = mtd->writesize;
c7e172ac:	e5962014 	ldr	r2, [r6, #20]
		chip->ecc.read_page = nand_read_page_raw;
		chip->ecc.write_page = nand_write_page_raw;
		chip->ecc.read_oob = nand_read_oob_std;
		chip->ecc.read_page_raw = nand_read_page_raw;
		chip->ecc.write_page_raw = nand_write_page_raw;
		chip->ecc.write_oob = nand_write_oob_std;
c7e172b0:	e58530e4 	str	r3, [r5, #228]
		chip->ecc.size = mtd->writesize;
		chip->ecc.bytes = 0;
c7e172b4:	e3a03000 	mov	r3, #0	; 0x0
		printk(KERN_WARNING "NAND_ECC_NONE selected by board driver. "
		       "This is not recommended !!\n");
		chip->ecc.read_page = nand_read_page_raw;
		chip->ecc.write_page = nand_write_page_raw;
		chip->ecc.read_oob = nand_read_oob_std;
		chip->ecc.read_page_raw = nand_read_page_raw;
c7e172b8:	e58510cc 	str	r1, [r5, #204]
		chip->ecc.write_page_raw = nand_write_page_raw;
c7e172bc:	e58500d0 	str	r0, [r5, #208]
		chip->ecc.write_oob = nand_write_oob_std;
		chip->ecc.size = mtd->writesize;
c7e172c0:	e58520a4 	str	r2, [r5, #164]
		chip->ecc.bytes = 0;
c7e172c4:	e58530a8 	str	r3, [r5, #168]
		break;

	case NAND_ECC_NONE:
		printk(KERN_WARNING "NAND_ECC_NONE selected by board driver. "
		       "This is not recommended !!\n");
		chip->ecc.read_page = nand_read_page_raw;
c7e172c8:	e58510d4 	str	r1, [r5, #212]
		chip->ecc.write_page = nand_write_page_raw;
c7e172cc:	e58500dc 	str	r0, [r5, #220]
c7e172d0:	ea000005 	b	c7e172ec <nand_scan_tail+0x378>
		chip->ecc.size = mtd->writesize;
		chip->ecc.bytes = 0;
		break;

	default:
		printk(KERN_WARNING "Invalid NAND_ECC_MODE %d\n",
c7e172d4:	e59f0240 	ldr	r0, [pc, #576]	; c7e1751c <nand_scan_tail+0x5a8>
c7e172d8:	ebffc5de 	bl	c7e08a58 <printf>
		       chip->ecc.mode);
		BUG();
c7e172dc:	e59f01cc 	ldr	r0, [pc, #460]	; c7e174b0 <nand_scan_tail+0x53c>
c7e172e0:	e59f11cc 	ldr	r1, [pc, #460]	; c7e174b4 <nand_scan_tail+0x540>
c7e172e4:	e59f2234 	ldr	r2, [pc, #564]	; c7e17520 <nand_scan_tail+0x5ac>
c7e172e8:	eaffffa7 	b	c7e1718c <nand_scan_tail+0x218>

	/*
	 * The number of bytes available for a client to place data into
	 * the out of band area
	 */
	chip->ecc.layout->oobavail = 0;
c7e172ec:	e59520b8 	ldr	r2, [r5, #184]
c7e172f0:	e3a03000 	mov	r3, #0	; 0x0
c7e172f4:	e5823204 	str	r3, [r2, #516]
c7e172f8:	e1a01003 	mov	r1, r3
c7e172fc:	ea000002 	b	c7e1730c <nand_scan_tail+0x398>
	for (i = 0; chip->ecc.layout->oobfree[i].length
			&& i < ARRAY_SIZE(chip->ecc.layout->oobfree); i++)
		chip->ecc.layout->oobavail +=
c7e17300:	e08c3000 	add	r3, ip, r0
c7e17304:	e5823204 	str	r3, [r2, #516]
	 * The number of bytes available for a client to place data into
	 * the out of band area
	 */
	chip->ecc.layout->oobavail = 0;
	for (i = 0; chip->ecc.layout->oobfree[i].length
			&& i < ARRAY_SIZE(chip->ecc.layout->oobfree); i++)
c7e17308:	e2811001 	add	r1, r1, #1	; 0x1
	/*
	 * The number of bytes available for a client to place data into
	 * the out of band area
	 */
	chip->ecc.layout->oobavail = 0;
	for (i = 0; chip->ecc.layout->oobfree[i].length
c7e1730c:	e59520b8 	ldr	r2, [r5, #184]
c7e17310:	e0823181 	add	r3, r2, r1, lsl #3
c7e17314:	e593020c 	ldr	r0, [r3, #524]
c7e17318:	e592c204 	ldr	ip, [r2, #516]
c7e1731c:	e2503000 	subs	r3, r0, #0	; 0x0
c7e17320:	13a03001 	movne	r3, #1	; 0x1
c7e17324:	e3510007 	cmp	r1, #7	; 0x7
c7e17328:	83a03000 	movhi	r3, #0	; 0x0
c7e1732c:	e3530000 	cmp	r3, #0	; 0x0
c7e17330:	1afffff2 	bne	c7e17300 <nand_scan_tail+0x38c>
			&& i < ARRAY_SIZE(chip->ecc.layout->oobfree); i++)
		chip->ecc.layout->oobavail +=
			chip->ecc.layout->oobfree[i].length;
	mtd->oobavail = chip->ecc.layout->oobavail;
c7e17334:	e586c01c 	str	ip, [r6, #28]

	/*
	 * Set the number of read / write steps for one page depending on ECC
	 * mode
	 */
	chip->ecc.steps = mtd->writesize / chip->ecc.size;
c7e17338:	e59540a4 	ldr	r4, [r5, #164]
c7e1733c:	e5960014 	ldr	r0, [r6, #20]
c7e17340:	e1a01004 	mov	r1, r4
c7e17344:	eb004c6f 	bl	c7e2a508 <__udivsi3>
	if (chip->ecc.steps * chip->ecc.size != mtd->writesize) {
c7e17348:	e0020094 	mul	r2, r4, r0

	/*
	 * Set the number of read / write steps for one page depending on ECC
	 * mode
	 */
	chip->ecc.steps = mtd->writesize / chip->ecc.size;
c7e1734c:	e58500a0 	str	r0, [r5, #160]
	if (chip->ecc.steps * chip->ecc.size != mtd->writesize) {
c7e17350:	e5963014 	ldr	r3, [r6, #20]
c7e17354:	e1520003 	cmp	r2, r3
c7e17358:	0a000005 	beq	c7e17374 <nand_scan_tail+0x400>
		printk(KERN_WARNING "Invalid ecc parameters\n");
c7e1735c:	e59f01c0 	ldr	r0, [pc, #448]	; c7e17524 <nand_scan_tail+0x5b0>
c7e17360:	ebffc5bc 	bl	c7e08a58 <printf>
		BUG();
c7e17364:	e59f0144 	ldr	r0, [pc, #324]	; c7e174b0 <nand_scan_tail+0x53c>
c7e17368:	e59f1144 	ldr	r1, [pc, #324]	; c7e174b4 <nand_scan_tail+0x540>
c7e1736c:	e59f21b4 	ldr	r2, [pc, #436]	; c7e17528 <nand_scan_tail+0x5b4>
c7e17370:	eaffff85 	b	c7e1718c <nand_scan_tail+0x218>
	}
	chip->ecc.total = chip->ecc.steps * chip->ecc.bytes;
c7e17374:	e59530a8 	ldr	r3, [r5, #168]

	/*
	 * Allow subpage writes up to ecc.steps. Not possible for MLC
	 * FLASH.
	 */
	if (!(chip->options & NAND_NO_SUBPAGE_WRITE) &&
c7e17378:	e5952050 	ldr	r2, [r5, #80]
	chip->ecc.steps = mtd->writesize / chip->ecc.size;
	if (chip->ecc.steps * chip->ecc.size != mtd->writesize) {
		printk(KERN_WARNING "Invalid ecc parameters\n");
		BUG();
	}
	chip->ecc.total = chip->ecc.steps * chip->ecc.bytes;
c7e1737c:	e0030390 	mul	r3, r0, r3

	/*
	 * Allow subpage writes up to ecc.steps. Not possible for MLC
	 * FLASH.
	 */
	if (!(chip->options & NAND_NO_SUBPAGE_WRITE) &&
c7e17380:	e3120c02 	tst	r2, #512	; 0x200
	chip->ecc.steps = mtd->writesize / chip->ecc.size;
	if (chip->ecc.steps * chip->ecc.size != mtd->writesize) {
		printk(KERN_WARNING "Invalid ecc parameters\n");
		BUG();
	}
	chip->ecc.total = chip->ecc.steps * chip->ecc.bytes;
c7e17384:	e58530ac 	str	r3, [r5, #172]

	/*
	 * Allow subpage writes up to ecc.steps. Not possible for MLC
	 * FLASH.
	 */
	if (!(chip->options & NAND_NO_SUBPAGE_WRITE) &&
c7e17388:	1a000011 	bne	c7e173d4 <nand_scan_tail+0x460>
c7e1738c:	e5d5307c 	ldrb	r3, [r5, #124]
c7e17390:	e313000c 	tst	r3, #12	; 0xc
c7e17394:	1a00000e 	bne	c7e173d4 <nand_scan_tail+0x460>
	    !(chip->cellinfo & NAND_CI_CELLTYPE_MSK)) {
		switch (chip->ecc.steps) {
c7e17398:	e3500004 	cmp	r0, #4	; 0x4
c7e1739c:	0a00000a 	beq	c7e173cc <nand_scan_tail+0x458>
c7e173a0:	ca000002 	bgt	c7e173b0 <nand_scan_tail+0x43c>
c7e173a4:	e3500002 	cmp	r0, #2	; 0x2
c7e173a8:	1a000009 	bne	c7e173d4 <nand_scan_tail+0x460>
c7e173ac:	ea000004 	b	c7e173c4 <nand_scan_tail+0x450>
c7e173b0:	e3500008 	cmp	r0, #8	; 0x8
c7e173b4:	0a000004 	beq	c7e173cc <nand_scan_tail+0x458>
c7e173b8:	e3500010 	cmp	r0, #16	; 0x10
c7e173bc:	1a000004 	bne	c7e173d4 <nand_scan_tail+0x460>
c7e173c0:	ea000001 	b	c7e173cc <nand_scan_tail+0x458>
		case 2:
			mtd->subpage_sft = 1;
c7e173c4:	e3a03001 	mov	r3, #1	; 0x1
c7e173c8:	ea000000 	b	c7e173d0 <nand_scan_tail+0x45c>
			break;
		case 4:
		case 8:
		case 16:
			mtd->subpage_sft = 2;
c7e173cc:	e3a03002 	mov	r3, #2	; 0x2
c7e173d0:	e5863090 	str	r3, [r6, #144]
			break;
		}
	}
	chip->subpagesize = mtd->writesize >> mtd->subpage_sft;
c7e173d4:	e5962090 	ldr	r2, [r6, #144]
c7e173d8:	e5963014 	ldr	r3, [r6, #20]

	/* Initialize state */
	chip->state = FL_READY;
c7e173dc:	e3a04000 	mov	r4, #0	; 0x0
		case 16:
			mtd->subpage_sft = 2;
			break;
		}
	}
	chip->subpagesize = mtd->writesize >> mtd->subpage_sft;
c7e173e0:	e1a03233 	lsr	r3, r3, r2

	/* Initialize state */
	chip->state = FL_READY;

	/* De-select the device */
	chip->select_chip(mtd, -1);
c7e173e4:	e1a00006 	mov	r0, r6
		case 16:
			mtd->subpage_sft = 2;
			break;
		}
	}
	chip->subpagesize = mtd->writesize >> mtd->subpage_sft;
c7e173e8:	e5853078 	str	r3, [r5, #120]

	/* Initialize state */
	chip->state = FL_READY;
c7e173ec:	e585408c 	str	r4, [r5, #140]

	/* De-select the device */
	chip->select_chip(mtd, -1);
c7e173f0:	e3e01000 	mvn	r1, #0	; 0x0
c7e173f4:	e1a0e00f 	mov	lr, pc
c7e173f8:	e595f01c 	ldr	pc, [r5, #28]

	/* Invalidate the pagebuffer reference */
	chip->pagebuf = -1;
c7e173fc:	e3e03000 	mvn	r3, #0	; 0x0
c7e17400:	e5853074 	str	r3, [r5, #116]

	/* Fill in remaining MTD driver data */
	mtd->type = MTD_NANDFLASH;
c7e17404:	e2833005 	add	r3, r3, #5	; 0x5
c7e17408:	e5c63000 	strb	r3, [r6]
	mtd->flags = (chip->options & NAND_ROM) ? MTD_CAP_ROM :
c7e1740c:	e5953050 	ldr	r3, [r5, #80]
						MTD_CAP_NANDFLASH;
	mtd->erase = nand_erase;
	mtd->point = NULL;
c7e17410:	e5864038 	str	r4, [r6, #56]
	/* Invalidate the pagebuffer reference */
	chip->pagebuf = -1;

	/* Fill in remaining MTD driver data */
	mtd->type = MTD_NANDFLASH;
	mtd->flags = (chip->options & NAND_ROM) ? MTD_CAP_ROM :
c7e17414:	e3130b02 	tst	r3, #2048	; 0x800
c7e17418:	11a03004 	movne	r3, r4
c7e1741c:	03a03b01 	moveq	r3, #1024	; 0x400
c7e17420:	e5863004 	str	r3, [r6, #4]
	mtd->unlock = NULL;
	mtd->block_isbad = nand_block_isbad;
	mtd->block_markbad = nand_block_markbad;

	/* propagate ecc.layout to mtd_info */
	mtd->ecclayout = chip->ecc.layout;
c7e17424:	e59530b8 	ldr	r3, [r5, #184]

	/* Check, if we should skip the bad block table scan */
	if (chip->options & NAND_SKIP_BBTSCAN)
c7e17428:	e5952050 	ldr	r2, [r5, #80]
	mtd->unlock = NULL;
	mtd->block_isbad = nand_block_isbad;
	mtd->block_markbad = nand_block_markbad;

	/* propagate ecc.layout to mtd_info */
	mtd->ecclayout = chip->ecc.layout;
c7e1742c:	e5863028 	str	r3, [r6, #40]

	/* Fill in remaining MTD driver data */
	mtd->type = MTD_NANDFLASH;
	mtd->flags = (chip->options & NAND_ROM) ? MTD_CAP_ROM :
						MTD_CAP_NANDFLASH;
	mtd->erase = nand_erase;
c7e17430:	e59f30f4 	ldr	r3, [pc, #244]	; c7e1752c <nand_scan_tail+0x5b8>

	/* propagate ecc.layout to mtd_info */
	mtd->ecclayout = chip->ecc.layout;

	/* Check, if we should skip the bad block table scan */
	if (chip->options & NAND_SKIP_BBTSCAN)
c7e17434:	e2120802 	ands	r0, r2, #131072	; 0x20000

	/* Fill in remaining MTD driver data */
	mtd->type = MTD_NANDFLASH;
	mtd->flags = (chip->options & NAND_ROM) ? MTD_CAP_ROM :
						MTD_CAP_NANDFLASH;
	mtd->erase = nand_erase;
c7e17438:	e5863034 	str	r3, [r6, #52]
	mtd->point = NULL;
	mtd->unpoint = NULL;
	mtd->read = nand_read;
c7e1743c:	e59f30ec 	ldr	r3, [pc, #236]	; c7e17530 <nand_scan_tail+0x5bc>
	mtd->type = MTD_NANDFLASH;
	mtd->flags = (chip->options & NAND_ROM) ? MTD_CAP_ROM :
						MTD_CAP_NANDFLASH;
	mtd->erase = nand_erase;
	mtd->point = NULL;
	mtd->unpoint = NULL;
c7e17440:	e586403c 	str	r4, [r6, #60]
	mtd->read = nand_read;
c7e17444:	e5863040 	str	r3, [r6, #64]
	mtd->write = nand_write;
c7e17448:	e59f30e4 	ldr	r3, [pc, #228]	; c7e17534 <nand_scan_tail+0x5c0>
	mtd->read_oob = nand_read_oob;
	mtd->write_oob = nand_write_oob;
	mtd->sync = nand_sync;
	mtd->lock = NULL;
c7e1744c:	e5864070 	str	r4, [r6, #112]
						MTD_CAP_NANDFLASH;
	mtd->erase = nand_erase;
	mtd->point = NULL;
	mtd->unpoint = NULL;
	mtd->read = nand_read;
	mtd->write = nand_write;
c7e17450:	e5863044 	str	r3, [r6, #68]
	mtd->read_oob = nand_read_oob;
c7e17454:	e59f30dc 	ldr	r3, [pc, #220]	; c7e17538 <nand_scan_tail+0x5c4>
	mtd->write_oob = nand_write_oob;
	mtd->sync = nand_sync;
	mtd->lock = NULL;
	mtd->unlock = NULL;
c7e17458:	e5864074 	str	r4, [r6, #116]
	mtd->erase = nand_erase;
	mtd->point = NULL;
	mtd->unpoint = NULL;
	mtd->read = nand_read;
	mtd->write = nand_write;
	mtd->read_oob = nand_read_oob;
c7e1745c:	e586304c 	str	r3, [r6, #76]
	mtd->write_oob = nand_write_oob;
c7e17460:	e59f30d4 	ldr	r3, [pc, #212]	; c7e1753c <nand_scan_tail+0x5c8>
	/* propagate ecc.layout to mtd_info */
	mtd->ecclayout = chip->ecc.layout;

	/* Check, if we should skip the bad block table scan */
	if (chip->options & NAND_SKIP_BBTSCAN)
		chip->options |= NAND_BBT_SCANNED;
c7e17464:	11a00004 	movne	r0, r4
	mtd->point = NULL;
	mtd->unpoint = NULL;
	mtd->read = nand_read;
	mtd->write = nand_write;
	mtd->read_oob = nand_read_oob;
	mtd->write_oob = nand_write_oob;
c7e17468:	e5863050 	str	r3, [r6, #80]
	mtd->sync = nand_sync;
c7e1746c:	e59f30cc 	ldr	r3, [pc, #204]	; c7e17540 <nand_scan_tail+0x5cc>
c7e17470:	e586306c 	str	r3, [r6, #108]
	mtd->lock = NULL;
	mtd->unlock = NULL;
	mtd->block_isbad = nand_block_isbad;
c7e17474:	e59f30c8 	ldr	r3, [pc, #200]	; c7e17544 <nand_scan_tail+0x5d0>
c7e17478:	e5863078 	str	r3, [r6, #120]
	mtd->block_markbad = nand_block_markbad;
c7e1747c:	e59f30c4 	ldr	r3, [pc, #196]	; c7e17548 <nand_scan_tail+0x5d4>
c7e17480:	e586307c 	str	r3, [r6, #124]
	/* propagate ecc.layout to mtd_info */
	mtd->ecclayout = chip->ecc.layout;

	/* Check, if we should skip the bad block table scan */
	if (chip->options & NAND_SKIP_BBTSCAN)
		chip->options |= NAND_BBT_SCANNED;
c7e17484:	13823101 	orrne	r3, r2, #1073741824	; 0x40000000
c7e17488:	15853050 	strne	r3, [r5, #80]

	return 0;
}
c7e1748c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e17490:	c7e3968c 	.word	0xc7e3968c
c7e17494:	c7e398d4 	.word	0xc7e398d4
c7e17498:	c7e39b1c 	.word	0xc7e39b1c
c7e1749c:	c7e39d64 	.word	0xc7e39d64
c7e174a0:	c7e39fac 	.word	0xc7e39fac
c7e174a4:	c7e33aa5 	.word	0xc7e33aa5
c7e174a8:	c7e1661c 	.word	0xc7e1661c
c7e174ac:	c7e33acb 	.word	0xc7e33acb
c7e174b0:	c7e30403 	.word	0xc7e30403
c7e174b4:	c7e33b01 	.word	0xc7e33b01
c7e174b8:	00000bd4 	.word	0x00000bd4
c7e174bc:	c7e15cdc 	.word	0xc7e15cdc
c7e174c0:	c7e15b74 	.word	0xc7e15b74
c7e174c4:	c7e16460 	.word	0xc7e16460
c7e174c8:	c7e156bc 	.word	0xc7e156bc
c7e174cc:	c7e162bc 	.word	0xc7e162bc
c7e174d0:	c7e15f40 	.word	0xc7e15f40
c7e174d4:	c7e16094 	.word	0xc7e16094
c7e174d8:	00000bf1 	.word	0x00000bf1
c7e174dc:	c7e2b014 	.word	0xc7e2b014
c7e174e0:	c7e3042a 	.word	0xc7e3042a
c7e174e4:	c7e15e1c 	.word	0xc7e15e1c
c7e174e8:	c7e1652c 	.word	0xc7e1652c
c7e174ec:	c7e156f4 	.word	0xc7e156f4
c7e174f0:	c7e162f0 	.word	0xc7e162f0
c7e174f4:	c7e15f84 	.word	0xc7e15f84
c7e174f8:	c7e16104 	.word	0xc7e16104
c7e174fc:	c7e33b0d 	.word	0xc7e33b0d
c7e17500:	c7e150c0 	.word	0xc7e150c0
c7e17504:	c7e151b8 	.word	0xc7e151b8
c7e17508:	c7e157c4 	.word	0xc7e157c4
c7e1750c:	c7e158e0 	.word	0xc7e158e0
c7e17510:	c7e163bc 	.word	0xc7e163bc
c7e17514:	c7e33b53 	.word	0xc7e33b53
c7e17518:	c7e33b73 	.word	0xc7e33b73
c7e1751c:	c7e33bb7 	.word	0xc7e33bb7
c7e17520:	00000c48 	.word	0x00000c48
c7e17524:	c7e33bd1 	.word	0xc7e33bd1
c7e17528:	00000c5d 	.word	0x00000c5d
c7e1752c:	c7e18524 	.word	0xc7e18524
c7e17530:	c7e18d50 	.word	0xc7e18d50
c7e17534:	c7e17ddc 	.word	0xc7e17ddc
c7e17538:	c7e18a74 	.word	0xc7e18a74
c7e1753c:	c7e17d10 	.word	0xc7e17d10
c7e17540:	c7e167a4 	.word	0xc7e167a4
c7e17544:	c7e17648 	.word	0xc7e17648
c7e17548:	c7e17690 	.word	0xc7e17690

c7e1754c <nand_scan>:
 * filled with the appropriate values.
 * The mtd->owner field must be set to the module of the caller
 *
 */
int nand_scan(struct mtd_info *mtd, int maxchips)
{
c7e1754c:	e92d4010 	push	{r4, lr}
	int ret;

	ret = nand_scan_ident(mtd, maxchips, NULL);
c7e17550:	e3a02000 	mov	r2, #0	; 0x0
 * filled with the appropriate values.
 * The mtd->owner field must be set to the module of the caller
 *
 */
int nand_scan(struct mtd_info *mtd, int maxchips)
{
c7e17554:	e1a04000 	mov	r4, r0
	int ret;

	ret = nand_scan_ident(mtd, maxchips, NULL);
c7e17558:	ebfffcab 	bl	c7e1680c <nand_scan_ident>
	if (!ret)
c7e1755c:	e3500000 	cmp	r0, #0	; 0x0
c7e17560:	18bd8010 	popne	{r4, pc}
		ret = nand_scan_tail(mtd);
c7e17564:	e1a00004 	mov	r0, r4
	return ret;
}
c7e17568:	e8bd4010 	pop	{r4, lr}
{
	int ret;

	ret = nand_scan_ident(mtd, maxchips, NULL);
	if (!ret)
		ret = nand_scan_tail(mtd);
c7e1756c:	eafffe80 	b	c7e16f74 <nand_scan_tail>

c7e17570 <nand_select_chip>:
 */
static void nand_select_chip(struct mtd_info *mtd, int chipnr)
{
	struct nand_chip *chip = mtd->priv;

	switch (chipnr) {
c7e17570:	e3710001 	cmn	r1, #1	; 0x1
 * @chipnr:	chipnumber to select, -1 for deselect
 *
 * Default select function for 1 chip devices.
 */
static void nand_select_chip(struct mtd_info *mtd, int chipnr)
{
c7e17574:	e92d4010 	push	{r4, lr}
	struct nand_chip *chip = mtd->priv;
c7e17578:	e590c094 	ldr	ip, [r0, #148]

	switch (chipnr) {
c7e1757c:	0a000002 	beq	c7e1758c <nand_select_chip+0x1c>
c7e17580:	e3510000 	cmp	r1, #0	; 0x0
c7e17584:	08bd8010 	popeq	{r4, pc}
c7e17588:	ea000003 	b	c7e1759c <nand_select_chip+0x2c>
	case -1:
		chip->cmd_ctrl(mtd, NAND_CMD_NONE, 0 | NAND_CTRL_CHANGE);
c7e1758c:	e3a02080 	mov	r2, #128	; 0x80
c7e17590:	e1a0e00f 	mov	lr, pc
c7e17594:	e59cf028 	ldr	pc, [ip, #40]
c7e17598:	e8bd8010 	pop	{r4, pc}
		break;
	case 0:
		break;

	default:
		BUG();
c7e1759c:	e59f0014 	ldr	r0, [pc, #20]	; c7e175b8 <nand_select_chip+0x48>
c7e175a0:	e59f1014 	ldr	r1, [pc, #20]	; c7e175bc <nand_select_chip+0x4c>
c7e175a4:	e3a020ee 	mov	r2, #238	; 0xee
c7e175a8:	e59f3010 	ldr	r3, [pc, #16]	; c7e175c0 <nand_select_chip+0x50>
c7e175ac:	ebffc529 	bl	c7e08a58 <printf>
c7e175b0:	e59f000c 	ldr	r0, [pc, #12]	; c7e175c4 <nand_select_chip+0x54>
c7e175b4:	eb002f4f 	bl	c7e232f8 <panic>
c7e175b8:	c7e30403 	.word	0xc7e30403
c7e175bc:	c7e33b01 	.word	0xc7e33b01
c7e175c0:	c7e2b023 	.word	0xc7e2b023
c7e175c4:	c7e3042a 	.word	0xc7e3042a

c7e175c8 <nand_block_checkbad>:
 * Check, if the block is bad. Either by reading the bad block table or
 * calling of the scan function.
 */
static int nand_block_checkbad(struct mtd_info *mtd, loff_t ofs, int getchip,
			       int allowbbt)
{
c7e175c8:	e92d46f7 	push	{r0, r1, r2, r4, r5, r6, r7, r9, sl, lr}
	struct nand_chip *chip = mtd->priv;
c7e175cc:	e5904094 	ldr	r4, [r0, #148]
 * Check, if the block is bad. Either by reading the bad block table or
 * calling of the scan function.
 */
static int nand_block_checkbad(struct mtd_info *mtd, loff_t ofs, int getchip,
			       int allowbbt)
{
c7e175d0:	e1a07003 	mov	r7, r3
	struct nand_chip *chip = mtd->priv;

	if (!(chip->options & NAND_BBT_SCANNED)) {
c7e175d4:	e5943050 	ldr	r3, [r4, #80]
 * Check, if the block is bad. Either by reading the bad block table or
 * calling of the scan function.
 */
static int nand_block_checkbad(struct mtd_info *mtd, loff_t ofs, int getchip,
			       int allowbbt)
{
c7e175d8:	e1a05000 	mov	r5, r0
	struct nand_chip *chip = mtd->priv;

	if (!(chip->options & NAND_BBT_SCANNED)) {
c7e175dc:	e3130101 	tst	r3, #1073741824	; 0x40000000
 * Check, if the block is bad. Either by reading the bad block table or
 * calling of the scan function.
 */
static int nand_block_checkbad(struct mtd_info *mtd, loff_t ofs, int getchip,
			       int allowbbt)
{
c7e175e0:	e1a06002 	mov	r6, r2
c7e175e4:	e59da028 	ldr	sl, [sp, #40]
c7e175e8:	e59d902c 	ldr	r9, [sp, #44]
	struct nand_chip *chip = mtd->priv;

	if (!(chip->options & NAND_BBT_SCANNED)) {
c7e175ec:	1a000003 	bne	c7e17600 <nand_block_checkbad+0x38>
		chip->options |= NAND_BBT_SCANNED;
c7e175f0:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
c7e175f4:	e5843050 	str	r3, [r4, #80]
		chip->scan_bbt(mtd);
c7e175f8:	e1a0e00f 	mov	lr, pc
c7e175fc:	e594f040 	ldr	pc, [r4, #64]
	}

	if (!chip->bbt)
c7e17600:	e5943110 	ldr	r3, [r4, #272]
c7e17604:	e3530000 	cmp	r3, #0	; 0x0
c7e17608:	1a000007 	bne	c7e1762c <nand_block_checkbad+0x64>
		return chip->block_bad(mtd, ofs, getchip);
c7e1760c:	e58da000 	str	sl, [sp]
c7e17610:	e1a00005 	mov	r0, r5
c7e17614:	e1a02006 	mov	r2, r6
c7e17618:	e1a03007 	mov	r3, r7
c7e1761c:	e1a0e00f 	mov	lr, pc
c7e17620:	e594f020 	ldr	pc, [r4, #32]

	/* Return info from the table */
	return nand_isbad_bbt(mtd, ofs, allowbbt);
}
c7e17624:	e28dd00c 	add	sp, sp, #12	; 0xc
c7e17628:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}

	if (!chip->bbt)
		return chip->block_bad(mtd, ofs, getchip);

	/* Return info from the table */
	return nand_isbad_bbt(mtd, ofs, allowbbt);
c7e1762c:	e1a00005 	mov	r0, r5
c7e17630:	e1a02006 	mov	r2, r6
c7e17634:	e1a03007 	mov	r3, r7
c7e17638:	e58d9028 	str	r9, [sp, #40]
}
c7e1763c:	e28dd00c 	add	sp, sp, #12	; 0xc
c7e17640:	e8bd46f0 	pop	{r4, r5, r6, r7, r9, sl, lr}

	if (!chip->bbt)
		return chip->block_bad(mtd, ofs, getchip);

	/* Return info from the table */
	return nand_isbad_bbt(mtd, ofs, allowbbt);
c7e17644:	eaffedc1 	b	c7e12d50 <nand_isbad_bbt>

c7e17648 <nand_block_isbad>:
 * nand_block_isbad - [MTD Interface] Check if block at offset is bad
 * @mtd:	MTD device structure
 * @offs:	offset relative to mtd start
 */
static int nand_block_isbad(struct mtd_info *mtd, loff_t offs)
{
c7e17648:	e92d4007 	push	{r0, r1, r2, lr}
	/* Check for invalid offset */
	if (offs > mtd->size)
c7e1764c:	e590100c 	ldr	r1, [r0, #12]
 * nand_block_isbad - [MTD Interface] Check if block at offset is bad
 * @mtd:	MTD device structure
 * @offs:	offset relative to mtd start
 */
static int nand_block_isbad(struct mtd_info *mtd, loff_t offs)
{
c7e17650:	e1a0c003 	mov	ip, r3
	/* Check for invalid offset */
	if (offs > mtd->size)
c7e17654:	e1510003 	cmp	r1, r3
c7e17658:	3a000003 	bcc	c7e1766c <nand_block_isbad+0x24>
c7e1765c:	1a000004 	bne	c7e17674 <nand_block_isbad+0x2c>
c7e17660:	e5903008 	ldr	r3, [r0, #8]
c7e17664:	e1530002 	cmp	r3, r2
c7e17668:	2a000001 	bcs	c7e17674 <nand_block_isbad+0x2c>
c7e1766c:	e3e00015 	mvn	r0, #21	; 0x15
c7e17670:	ea000005 	b	c7e1768c <nand_block_isbad+0x44>
		return -EINVAL;

	return nand_block_checkbad(mtd, offs, 1, 0);
c7e17674:	e3a01001 	mov	r1, #1	; 0x1
c7e17678:	e58d1000 	str	r1, [sp]
c7e1767c:	e1a0300c 	mov	r3, ip
c7e17680:	e3a01000 	mov	r1, #0	; 0x0
c7e17684:	e58d1004 	str	r1, [sp, #4]
c7e17688:	ebffffce 	bl	c7e175c8 <nand_block_checkbad>
}
c7e1768c:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e17690 <nand_block_markbad>:
 * nand_block_markbad - [MTD Interface] Mark block at the given offset as bad
 * @mtd:	MTD device structure
 * @ofs:	offset relative to mtd start
 */
static int nand_block_markbad(struct mtd_info *mtd, loff_t ofs)
{
c7e17690:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e17694:	e1a06000 	mov	r6, r0
c7e17698:	e1a04002 	mov	r4, r2
c7e1769c:	e1a05003 	mov	r5, r3
	struct nand_chip *chip = mtd->priv;
c7e176a0:	e5907094 	ldr	r7, [r0, #148]
	int ret;

	ret = nand_block_isbad(mtd, ofs);
c7e176a4:	ebffffe7 	bl	c7e17648 <nand_block_isbad>
	if (ret) {
c7e176a8:	e3500000 	cmp	r0, #0	; 0x0
c7e176ac:	10000fc0 	andne	r0, r0, r0, asr #31
c7e176b0:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
		if (ret > 0)
			return 0;
		return ret;
	}

	return chip->block_markbad(mtd, ofs);
c7e176b4:	e1a00006 	mov	r0, r6
c7e176b8:	e1a02004 	mov	r2, r4
c7e176bc:	e1a03005 	mov	r3, r5
c7e176c0:	e1a0e00f 	mov	lr, pc
c7e176c4:	e597f024 	ldr	pc, [r7, #36]
}
c7e176c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e176cc <nand_fill_oob>:
 * @len:	oob data write length
 * @ops:	oob ops structure
 */
static uint8_t *nand_fill_oob(struct nand_chip *chip, uint8_t *oob, size_t len,
						struct mtd_oob_ops *ops)
{
c7e176cc:	e1a0c003 	mov	ip, r3
	switch (ops->mode) {
c7e176d0:	e5933000 	ldr	r3, [r3]
 * @len:	oob data write length
 * @ops:	oob ops structure
 */
static uint8_t *nand_fill_oob(struct nand_chip *chip, uint8_t *oob, size_t len,
						struct mtd_oob_ops *ops)
{
c7e176d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	switch (ops->mode) {
c7e176d8:	e3530001 	cmp	r3, #1	; 0x1
 * @len:	oob data write length
 * @ops:	oob ops structure
 */
static uint8_t *nand_fill_oob(struct nand_chip *chip, uint8_t *oob, size_t len,
						struct mtd_oob_ops *ops)
{
c7e176dc:	e1a09000 	mov	r9, r0
c7e176e0:	e1a06001 	mov	r6, r1
c7e176e4:	e1a05002 	mov	r5, r2
	switch (ops->mode) {
c7e176e8:	0a00000a 	beq	c7e17718 <nand_fill_oob+0x4c>
c7e176ec:	3a000001 	bcc	c7e176f8 <nand_fill_oob+0x2c>
c7e176f0:	e3530002 	cmp	r3, #2	; 0x2
c7e176f4:	1a00002b 	bne	c7e177a8 <nand_fill_oob+0xdc>

	case MTD_OOB_PLACE:
	case MTD_OOB_RAW:
		memcpy(chip->oob_poi + ops->ooboffs, oob, len);
c7e176f8:	e5993090 	ldr	r3, [r9, #144]
c7e176fc:	e59c0014 	ldr	r0, [ip, #20]
c7e17700:	e1a01006 	mov	r1, r6
c7e17704:	e0830000 	add	r0, r3, r0
c7e17708:	e1a02005 	mov	r2, r5
c7e1770c:	eb002d4a 	bl	c7e22c3c <memcpy>
		return oob + len;
c7e17710:	e0866005 	add	r6, r6, r5
c7e17714:	ea00002a 	b	c7e177c4 <nand_fill_oob+0xf8>

	case MTD_OOB_AUTO: {
		struct nand_oobfree *free = chip->ecc.layout->oobfree;
c7e17718:	e59030b8 	ldr	r3, [r0, #184]
		uint32_t boffs = 0, woffs = ops->ooboffs;
c7e1771c:	e3a04000 	mov	r4, #0	; 0x0
	case MTD_OOB_RAW:
		memcpy(chip->oob_poi + ops->ooboffs, oob, len);
		return oob + len;

	case MTD_OOB_AUTO: {
		struct nand_oobfree *free = chip->ecc.layout->oobfree;
c7e17720:	e283af82 	add	sl, r3, #520	; 0x208
		uint32_t boffs = 0, woffs = ops->ooboffs;
c7e17724:	e59c2014 	ldr	r2, [ip, #20]
c7e17728:	e1a07004 	mov	r7, r4
c7e1772c:	ea000017 	b	c7e17790 <nand_fill_oob+0xc4>
		size_t bytes = 0;

		for (; free->length && len; free++, len -= bytes) {
			/* Write request not from offset 0 ? */
			if (unlikely(woffs)) {
c7e17730:	e3520000 	cmp	r2, #0	; 0x0
c7e17734:	0a000008 	beq	c7e1775c <nand_fill_oob+0x90>
				if (woffs >= free->length) {
c7e17738:	e1520001 	cmp	r2, r1
					woffs -= free->length;
c7e1773c:	20612002 	rsbcs	r2, r1, r2
		size_t bytes = 0;

		for (; free->length && len; free++, len -= bytes) {
			/* Write request not from offset 0 ? */
			if (unlikely(woffs)) {
				if (woffs >= free->length) {
c7e17740:	2a000010 	bcs	c7e17788 <nand_fill_oob+0xbc>
					woffs -= free->length;
					continue;
				}
				boffs = free->offset + woffs;
c7e17744:	e79a3007 	ldr	r3, [sl, r7]
				bytes = min_t(size_t, len,
c7e17748:	e0624001 	rsb	r4, r2, r1
c7e1774c:	e1540005 	cmp	r4, r5
c7e17750:	21a04005 	movcs	r4, r5
			if (unlikely(woffs)) {
				if (woffs >= free->length) {
					woffs -= free->length;
					continue;
				}
				boffs = free->offset + woffs;
c7e17754:	e0823003 	add	r3, r2, r3
c7e17758:	ea000003 	b	c7e1776c <nand_fill_oob+0xa0>
				bytes = min_t(size_t, len,
					      (free->length - woffs));
				woffs = 0;
			} else {
				bytes = min_t(size_t, len, free->length);
				boffs = free->offset;
c7e1775c:	e79a3007 	ldr	r3, [sl, r7]
				boffs = free->offset + woffs;
				bytes = min_t(size_t, len,
					      (free->length - woffs));
				woffs = 0;
			} else {
				bytes = min_t(size_t, len, free->length);
c7e17760:	e1550001 	cmp	r5, r1
c7e17764:	31a04005 	movcc	r4, r5
c7e17768:	21a04001 	movcs	r4, r1
				boffs = free->offset;
			}
			memcpy(chip->oob_poi + boffs, oob, bytes);
c7e1776c:	e5990090 	ldr	r0, [r9, #144]
c7e17770:	e1a01006 	mov	r1, r6
c7e17774:	e1a02004 	mov	r2, r4
c7e17778:	e0800003 	add	r0, r0, r3
c7e1777c:	eb002d2e 	bl	c7e22c3c <memcpy>
			oob += bytes;
c7e17780:	e0866004 	add	r6, r6, r4
c7e17784:	e3a02000 	mov	r2, #0	; 0x0
	case MTD_OOB_AUTO: {
		struct nand_oobfree *free = chip->ecc.layout->oobfree;
		uint32_t boffs = 0, woffs = ops->ooboffs;
		size_t bytes = 0;

		for (; free->length && len; free++, len -= bytes) {
c7e17788:	e0645005 	rsb	r5, r4, r5
c7e1778c:	e2877008 	add	r7, r7, #8	; 0x8
c7e17790:	e08a3007 	add	r3, sl, r7
c7e17794:	e5931004 	ldr	r1, [r3, #4]
c7e17798:	e3510000 	cmp	r1, #0	; 0x0
c7e1779c:	13550000 	cmpne	r5, #0	; 0x0
c7e177a0:	1affffe2 	bne	c7e17730 <nand_fill_oob+0x64>
c7e177a4:	ea000006 	b	c7e177c4 <nand_fill_oob+0xf8>
			oob += bytes;
		}
		return oob;
	}
	default:
		BUG();
c7e177a8:	e59f001c 	ldr	r0, [pc, #28]	; c7e177cc <nand_fill_oob+0x100>
c7e177ac:	e59f101c 	ldr	r1, [pc, #28]	; c7e177d0 <nand_fill_oob+0x104>
c7e177b0:	e59f201c 	ldr	r2, [pc, #28]	; c7e177d4 <nand_fill_oob+0x108>
c7e177b4:	e59f301c 	ldr	r3, [pc, #28]	; c7e177d8 <nand_fill_oob+0x10c>
c7e177b8:	ebffc4a6 	bl	c7e08a58 <printf>
c7e177bc:	e59f0018 	ldr	r0, [pc, #24]	; c7e177dc <nand_fill_oob+0x110>
c7e177c0:	eb002ecc 	bl	c7e232f8 <panic>
	}
	return NULL;
}
c7e177c4:	e1a00006 	mov	r0, r6
c7e177c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e177cc:	c7e30403 	.word	0xc7e30403
c7e177d0:	c7e33b01 	.word	0xc7e33b01
c7e177d4:	00000797 	.word	0x00000797
c7e177d8:	c7e2b034 	.word	0xc7e2b034
c7e177dc:	c7e3042a 	.word	0xc7e3042a

c7e177e0 <nand_do_write_oob>:
 *
 * NAND write out-of-band
 */
static int nand_do_write_oob(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
c7e177e0:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
c7e177e4:	e1a0b000 	mov	fp, r0
	struct nand_chip *chip = mtd->priv;

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: to = 0x%08x, len = %i\n",
			 __func__, (unsigned int)to, (int)ops->ooblen);

	if (ops->mode == MTD_OOB_AUTO)
c7e177e8:	e59d0030 	ldr	r0, [sp, #48]
 */
static int nand_do_write_oob(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
	int chipnr, page, status, len;
	struct nand_chip *chip = mtd->priv;
c7e177ec:	e59b7094 	ldr	r7, [fp, #148]

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: to = 0x%08x, len = %i\n",
			 __func__, (unsigned int)to, (int)ops->ooblen);

	if (ops->mode == MTD_OOB_AUTO)
c7e177f0:	e5901000 	ldr	r1, [r0]
 *
 * NAND write out-of-band
 */
static int nand_do_write_oob(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
c7e177f4:	e88d000c 	stm	sp, {r2, r3}
	struct nand_chip *chip = mtd->priv;

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: to = 0x%08x, len = %i\n",
			 __func__, (unsigned int)to, (int)ops->ooblen);

	if (ops->mode == MTD_OOB_AUTO)
c7e177f8:	e3510001 	cmp	r1, #1	; 0x1
		len = chip->ecc.layout->oobavail;
c7e177fc:	059730b8 	ldreq	r3, [r7, #184]
	else
		len = mtd->oobsize;

	/* Do not allow write past end of page */
	if ((ops->ooboffs + ops->ooblen) > len) {
c7e17800:	e59d1030 	ldr	r1, [sp, #48]

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: to = 0x%08x, len = %i\n",
			 __func__, (unsigned int)to, (int)ops->ooblen);

	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
c7e17804:	05935204 	ldreq	r5, [r3, #516]
	else
		len = mtd->oobsize;

	/* Do not allow write past end of page */
	if ((ops->ooboffs + ops->ooblen) > len) {
c7e17808:	e5912014 	ldr	r2, [r1, #20]
c7e1780c:	e591300c 	ldr	r3, [r1, #12]
			 __func__, (unsigned int)to, (int)ops->ooblen);

	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
	else
		len = mtd->oobsize;
c7e17810:	159b5018 	ldrne	r5, [fp, #24]

	/* Do not allow write past end of page */
	if ((ops->ooboffs + ops->ooblen) > len) {
c7e17814:	e0823003 	add	r3, r2, r3
c7e17818:	e1530005 	cmp	r3, r5
c7e1781c:	e58d300c 	str	r3, [sp, #12]
c7e17820:	8a000054 	bhi	c7e17978 <nand_do_write_oob+0x198>
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Attempt to write "
				"past end of page\n", __func__);
		return -EINVAL;
	}

	if (unlikely(ops->ooboffs >= len)) {
c7e17824:	e1520005 	cmp	r2, r5
c7e17828:	2a000052 	bcs	c7e17978 <nand_do_write_oob+0x198>
				"write outside oob\n", __func__);
		return -EINVAL;
	}

	/* Do not allow write past end of device */
	if (unlikely(to >= mtd->size ||
c7e1782c:	e59d2004 	ldr	r2, [sp, #4]
c7e17830:	e28b1008 	add	r1, fp, #8	; 0x8
c7e17834:	e8910003 	ldm	r1, {r0, r1}
c7e17838:	e1510002 	cmp	r1, r2
c7e1783c:	8a000003 	bhi	c7e17850 <nand_do_write_oob+0x70>
c7e17840:	1a00004c 	bne	c7e17978 <nand_do_write_oob+0x198>
c7e17844:	e59d3000 	ldr	r3, [sp]
c7e17848:	e1500003 	cmp	r0, r3
c7e1784c:	9a000049 	bls	c7e17978 <nand_do_write_oob+0x198>
c7e17850:	e5974054 	ldr	r4, [r7, #84]
c7e17854:	e1a06fc5 	asr	r6, r5, #31
c7e17858:	e1a02004 	mov	r2, r4
c7e1785c:	eb004bc0 	bl	c7e2a764 <__lshrdi3>
c7e17860:	e1a02004 	mov	r2, r4
c7e17864:	e1a09000 	mov	r9, r0
c7e17868:	e1a0a001 	mov	sl, r1
c7e1786c:	e89d0003 	ldm	sp, {r0, r1}
c7e17870:	eb004bc2 	bl	c7e2a780 <__ashrdi3>
c7e17874:	e1a0400a 	mov	r4, sl
c7e17878:	e1a03009 	mov	r3, r9
c7e1787c:	e0533000 	subs	r3, r3, r0
c7e17880:	e0c44001 	sbc	r4, r4, r1
c7e17884:	e0020495 	mul	r2, r5, r4
c7e17888:	e0810395 	umull	r0, r1, r5, r3
c7e1788c:	e0232396 	mla	r3, r6, r3, r2
c7e17890:	e0831001 	add	r1, r3, r1
c7e17894:	e3510000 	cmp	r1, #0	; 0x0
c7e17898:	1a000002 	bne	c7e178a8 <nand_do_write_oob+0xc8>
c7e1789c:	e59dc00c 	ldr	ip, [sp, #12]
c7e178a0:	e15c0000 	cmp	ip, r0
c7e178a4:	8a000033 	bhi	c7e17978 <nand_do_write_oob+0x198>
				"end of device\n", __func__);
		return -EINVAL;
	}

	chipnr = (int)(to >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);
c7e178a8:	e5972060 	ldr	r2, [r7, #96]
c7e178ac:	e89d0003 	ldm	sp, {r0, r1}
c7e178b0:	eb004bb2 	bl	c7e2a780 <__ashrdi3>
c7e178b4:	e1a01000 	mov	r1, r0
c7e178b8:	e1a0000b 	mov	r0, fp
c7e178bc:	e1a0e00f 	mov	lr, pc
c7e178c0:	e597f01c 	ldr	pc, [r7, #28]
	 * Reset the chip. Some chips (like the Toshiba TC5832DC found in one
	 * of my DiskOnChip 2000 test units) will clear the whole data page too
	 * if we don't do this. I have no clue why, but I seem to have 'fixed'
	 * it in the doc2000 driver in August 1999.  dwmw2.
	 */
	chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
c7e178c4:	e3e02000 	mvn	r2, #0	; 0x0
c7e178c8:	e3a010ff 	mov	r1, #255	; 0xff
c7e178cc:	e1a03002 	mov	r3, r2
c7e178d0:	e1a0000b 	mov	r0, fp

	chipnr = (int)(to >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);

	/* Shift to get page */
	page = (int)(to >> chip->page_shift);
c7e178d4:	e5974054 	ldr	r4, [r7, #84]
	 * Reset the chip. Some chips (like the Toshiba TC5832DC found in one
	 * of my DiskOnChip 2000 test units) will clear the whole data page too
	 * if we don't do this. I have no clue why, but I seem to have 'fixed'
	 * it in the doc2000 driver in August 1999.  dwmw2.
	 */
	chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
c7e178d8:	e1a0e00f 	mov	lr, pc
c7e178dc:	e597f034 	ldr	pc, [r7, #52]

	/* Check, if it is write protected */
	if (nand_check_wp(mtd))
c7e178e0:	e1a0000b 	mov	r0, fp
c7e178e4:	ebfff706 	bl	c7e15504 <nand_check_wp>
c7e178e8:	e3500000 	cmp	r0, #0	; 0x0
c7e178ec:	13e0401d 	mvnne	r4, #29	; 0x1d
c7e178f0:	1a000021 	bne	c7e1797c <nand_do_write_oob+0x19c>

	chipnr = (int)(to >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);

	/* Shift to get page */
	page = (int)(to >> chip->page_shift);
c7e178f4:	e1a02004 	mov	r2, r4
c7e178f8:	e89d0003 	ldm	sp, {r0, r1}
c7e178fc:	eb004b9f 	bl	c7e2a780 <__ashrdi3>
	/* Check, if it is write protected */
	if (nand_check_wp(mtd))
		return -EROFS;

	/* Invalidate the page cache, if we write to the cached page */
	if (page == chip->pagebuf)
c7e17900:	e5973074 	ldr	r3, [r7, #116]

	chipnr = (int)(to >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);

	/* Shift to get page */
	page = (int)(to >> chip->page_shift);
c7e17904:	e1a04000 	mov	r4, r0
	/* Check, if it is write protected */
	if (nand_check_wp(mtd))
		return -EROFS;

	/* Invalidate the page cache, if we write to the cached page */
	if (page == chip->pagebuf)
c7e17908:	e1500003 	cmp	r0, r3
		chip->pagebuf = -1;
c7e1790c:	03e03000 	mvneq	r3, #0	; 0x0
c7e17910:	05873074 	streq	r3, [r7, #116]

	memset(chip->oob_poi, 0xff, mtd->oobsize);
c7e17914:	e3a010ff 	mov	r1, #255	; 0xff
c7e17918:	e59b2018 	ldr	r2, [fp, #24]
c7e1791c:	e5970090 	ldr	r0, [r7, #144]
c7e17920:	eb002c9b 	bl	c7e22b94 <memset>
	nand_fill_oob(chip, ops->oobbuf, ops->ooblen, ops);
c7e17924:	e59d3030 	ldr	r3, [sp, #48]
c7e17928:	e1a00007 	mov	r0, r7
c7e1792c:	e593101c 	ldr	r1, [r3, #28]
c7e17930:	e593200c 	ldr	r2, [r3, #12]
c7e17934:	ebffff64 	bl	c7e176cc <nand_fill_oob>
	status = chip->ecc.write_oob(mtd, chip, page & chip->pagemask);
c7e17938:	e5972070 	ldr	r2, [r7, #112]
c7e1793c:	e1a01007 	mov	r1, r7
c7e17940:	e0042002 	and	r2, r4, r2
c7e17944:	e1a0000b 	mov	r0, fp
c7e17948:	e1a0e00f 	mov	lr, pc
c7e1794c:	e597f0e4 	ldr	pc, [r7, #228]
	memset(chip->oob_poi, 0xff, mtd->oobsize);
c7e17950:	e59b2018 	ldr	r2, [fp, #24]
	if (page == chip->pagebuf)
		chip->pagebuf = -1;

	memset(chip->oob_poi, 0xff, mtd->oobsize);
	nand_fill_oob(chip, ops->oobbuf, ops->ooblen, ops);
	status = chip->ecc.write_oob(mtd, chip, page & chip->pagemask);
c7e17954:	e1a04000 	mov	r4, r0
	memset(chip->oob_poi, 0xff, mtd->oobsize);
c7e17958:	e3a010ff 	mov	r1, #255	; 0xff
c7e1795c:	e5970090 	ldr	r0, [r7, #144]
c7e17960:	eb002c8b 	bl	c7e22b94 <memset>

	if (status)
c7e17964:	e3540000 	cmp	r4, #0	; 0x0
		return status;

	ops->oobretlen = ops->ooblen;
c7e17968:	059d0030 	ldreq	r0, [sp, #48]
c7e1796c:	0590300c 	ldreq	r3, [r0, #12]
c7e17970:	05803010 	streq	r3, [r0, #16]
c7e17974:	ea000000 	b	c7e1797c <nand_do_write_oob+0x19c>

	return 0;
c7e17978:	e3e04015 	mvn	r4, #21	; 0x15
}
c7e1797c:	e1a00004 	mov	r0, r4
c7e17980:	e28dd010 	add	sp, sp, #16	; 0x10
c7e17984:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e17988 <nand_do_write_ops>:
 *
 * NAND write with ECC
 */
static int nand_do_write_ops(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
c7e17988:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e1798c:	e24dd038 	sub	sp, sp, #56	; 0x38
c7e17990:	e1a09000 	mov	r9, r0
	struct nand_chip *chip = mtd->priv;
	uint32_t writelen = ops->len;

	uint32_t oobwritelen = ops->ooblen;
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;
c7e17994:	e59d0058 	ldr	r0, [sp, #88]
 *
 * NAND write with ECC
 */
static int nand_do_write_ops(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
c7e17998:	e1a06002 	mov	r6, r2
	struct nand_chip *chip = mtd->priv;
	uint32_t writelen = ops->len;

	uint32_t oobwritelen = ops->ooblen;
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;
c7e1799c:	e8900802 	ldm	r0, {r1, fp}
c7e179a0:	e3510001 	cmp	r1, #1	; 0x1
c7e179a4:	0599201c 	ldreq	r2, [r9, #28]
{
	int chipnr, realpage, page, blockmask, column;
	struct nand_chip *chip = mtd->priv;
	uint32_t writelen = ops->len;

	uint32_t oobwritelen = ops->ooblen;
c7e179a8:	e590100c 	ldr	r1, [r0, #12]

	uint8_t *oob = ops->oobbuf;
	uint8_t *buf = ops->datbuf;
	int ret, subpage;

	ops->retlen = 0;
c7e179ac:	e59d0058 	ldr	r0, [sp, #88]
 *
 * NAND write with ECC
 */
static int nand_do_write_ops(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
c7e179b0:	e1a07003 	mov	r7, r3
	struct nand_chip *chip = mtd->priv;
	uint32_t writelen = ops->len;

	uint32_t oobwritelen = ops->ooblen;
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;
c7e179b4:	15993018 	ldrne	r3, [r9, #24]
c7e179b8:	058d2028 	streq	r2, [sp, #40]
{
	int chipnr, realpage, page, blockmask, column;
	struct nand_chip *chip = mtd->priv;
	uint32_t writelen = ops->len;

	uint32_t oobwritelen = ops->ooblen;
c7e179bc:	e58d1024 	str	r1, [sp, #36]
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;

	uint8_t *oob = ops->oobbuf;
	uint8_t *buf = ops->datbuf;
c7e179c0:	e5902018 	ldr	r2, [r0, #24]

	uint32_t oobwritelen = ops->ooblen;
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;

	uint8_t *oob = ops->oobbuf;
c7e179c4:	e590101c 	ldr	r1, [r0, #28]
	struct nand_chip *chip = mtd->priv;
	uint32_t writelen = ops->len;

	uint32_t oobwritelen = ops->ooblen;
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;
c7e179c8:	158d3028 	strne	r3, [sp, #40]
	uint8_t *oob = ops->oobbuf;
	uint8_t *buf = ops->datbuf;
	int ret, subpage;

	ops->retlen = 0;
	if (!writelen)
c7e179cc:	e35b0000 	cmp	fp, #0	; 0x0

	uint8_t *oob = ops->oobbuf;
	uint8_t *buf = ops->datbuf;
	int ret, subpage;

	ops->retlen = 0;
c7e179d0:	e3a03000 	mov	r3, #0	; 0x0
c7e179d4:	e5803008 	str	r3, [r0, #8]
 */
static int nand_do_write_ops(struct mtd_info *mtd, loff_t to,
			     struct mtd_oob_ops *ops)
{
	int chipnr, realpage, page, blockmask, column;
	struct nand_chip *chip = mtd->priv;
c7e179d8:	e599a094 	ldr	sl, [r9, #148]

	uint32_t oobwritelen = ops->ooblen;
	uint32_t oobmaxlen = ops->mode == MTD_OOB_AUTO ?
				mtd->oobavail : mtd->oobsize;

	uint8_t *oob = ops->oobbuf;
c7e179dc:	e58d102c 	str	r1, [sp, #44]
	uint8_t *buf = ops->datbuf;
c7e179e0:	e58d2030 	str	r2, [sp, #48]
	int ret, subpage;

	ops->retlen = 0;
	if (!writelen)
c7e179e4:	01a0000b 	moveq	r0, fp
c7e179e8:	0a0000c5 	beq	c7e17d04 <nand_do_write_ops+0x37c>
		return 0;

	column = to & (mtd->writesize - 1);
c7e179ec:	e5993014 	ldr	r3, [r9, #20]
c7e179f0:	e2433001 	sub	r3, r3, #1	; 0x1
	subpage = column || (writelen & (mtd->writesize - 1));
c7e179f4:	e0130006 	ands	r0, r3, r6
c7e179f8:	e58d0020 	str	r0, [sp, #32]
c7e179fc:	13a03001 	movne	r3, #1	; 0x1
c7e17a00:	1a000002 	bne	c7e17a10 <nand_do_write_ops+0x88>
c7e17a04:	e113000b 	tst	r3, fp
c7e17a08:	03a03000 	moveq	r3, #0	; 0x0
c7e17a0c:	13a03001 	movne	r3, #1	; 0x1

	if (subpage && oob)
c7e17a10:	e59d102c 	ldr	r1, [sp, #44]
c7e17a14:	e2511000 	subs	r1, r1, #0	; 0x0
c7e17a18:	13a01001 	movne	r1, #1	; 0x1
c7e17a1c:	e1110003 	tst	r1, r3
c7e17a20:	e58d1008 	str	r1, [sp, #8]
c7e17a24:	1a0000b5 	bne	c7e17d00 <nand_do_write_ops+0x378>
		return -EINVAL;

	chipnr = (int)(to >> chip->chip_shift);
c7e17a28:	e59a2060 	ldr	r2, [sl, #96]
c7e17a2c:	e1a00006 	mov	r0, r6
c7e17a30:	e1a01007 	mov	r1, r7
c7e17a34:	eb004b51 	bl	c7e2a780 <__ashrdi3>
c7e17a38:	e1a03000 	mov	r3, r0
c7e17a3c:	e58d3014 	str	r3, [sp, #20]
c7e17a40:	e1a04001 	mov	r4, r1
	chip->select_chip(mtd, chipnr);
c7e17a44:	e1a01000 	mov	r1, r0
c7e17a48:	e1a00009 	mov	r0, r9
c7e17a4c:	e1a0e00f 	mov	lr, pc
c7e17a50:	e59af01c 	ldr	pc, [sl, #28]

	/* Check, if it is write protected */
	if (nand_check_wp(mtd)) {
c7e17a54:	e1a00009 	mov	r0, r9
c7e17a58:	ebfff6a9 	bl	c7e15504 <nand_check_wp>
c7e17a5c:	e3500000 	cmp	r0, #0	; 0x0
c7e17a60:	0a000003 	beq	c7e17a74 <nand_do_write_ops+0xec>
		printk (KERN_NOTICE "nand_do_write_ops: Device is write protected\n");
c7e17a64:	e59f02a0 	ldr	r0, [pc, #672]	; c7e17d0c <nand_do_write_ops+0x384>
c7e17a68:	ebffc3fa 	bl	c7e08a58 <printf>
c7e17a6c:	e3e00004 	mvn	r0, #4	; 0x4
c7e17a70:	ea0000a3 	b	c7e17d04 <nand_do_write_ops+0x37c>
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
c7e17a74:	e59a2054 	ldr	r2, [sl, #84]
	page = realpage & chip->pagemask;
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;

	/* Invalidate the page cache, when we write to the cached page */
	if (to <= (chip->pagebuf << chip->page_shift) &&
c7e17a78:	e59a3074 	ldr	r3, [sl, #116]
	if (nand_check_wp(mtd)) {
		printk (KERN_NOTICE "nand_do_write_ops: Device is write protected\n");
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
c7e17a7c:	e58d200c 	str	r2, [sp, #12]
	page = realpage & chip->pagemask;
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;

	/* Invalidate the page cache, when we write to the cached page */
	if (to <= (chip->pagebuf << chip->page_shift) &&
c7e17a80:	e59d000c 	ldr	r0, [sp, #12]
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
	page = realpage & chip->pagemask;
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e17a84:	e59a2058 	ldr	r2, [sl, #88]

	/* Invalidate the page cache, when we write to the cached page */
	if (to <= (chip->pagebuf << chip->page_shift) &&
c7e17a88:	e1a03013 	lsl	r3, r3, r0
c7e17a8c:	e1a00003 	mov	r0, r3
c7e17a90:	e1a01fc0 	asr	r1, r0, #31
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
	page = realpage & chip->pagemask;
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e17a94:	e59d300c 	ldr	r3, [sp, #12]

	/* Invalidate the page cache, when we write to the cached page */
	if (to <= (chip->pagebuf << chip->page_shift) &&
c7e17a98:	e1570001 	cmp	r7, r1
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
	page = realpage & chip->pagemask;
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e17a9c:	e0632002 	rsb	r2, r3, r2
c7e17aa0:	e3e03000 	mvn	r3, #0	; 0x0
c7e17aa4:	e1e03213 	mvn	r3, r3, lsl r2
		printk (KERN_NOTICE "nand_do_write_ops: Device is write protected\n");
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
	page = realpage & chip->pagemask;
c7e17aa8:	e59a2070 	ldr	r2, [sl, #112]
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e17aac:	e58d301c 	str	r3, [sp, #28]
		printk (KERN_NOTICE "nand_do_write_ops: Device is write protected\n");
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
	page = realpage & chip->pagemask;
c7e17ab0:	e58d2010 	str	r2, [sp, #16]
	blockmask = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;

	/* Invalidate the page cache, when we write to the cached page */
	if (to <= (chip->pagebuf << chip->page_shift) &&
c7e17ab4:	ca00000d 	bgt	c7e17af0 <nand_do_write_ops+0x168>
c7e17ab8:	1a000001 	bne	c7e17ac4 <nand_do_write_ops+0x13c>
c7e17abc:	e1560000 	cmp	r6, r0
c7e17ac0:	8a00000a 	bhi	c7e17af0 <nand_do_write_ops+0x168>
c7e17ac4:	e59d2058 	ldr	r2, [sp, #88]
c7e17ac8:	e5923004 	ldr	r3, [r2, #4]
c7e17acc:	e0964003 	adds	r4, r6, r3
c7e17ad0:	e2a75000 	adc	r5, r7, #0	; 0x0
c7e17ad4:	e1550001 	cmp	r5, r1
c7e17ad8:	ca000002 	bgt	c7e17ae8 <nand_do_write_ops+0x160>
c7e17adc:	1a000003 	bne	c7e17af0 <nand_do_write_ops+0x168>
c7e17ae0:	e1540000 	cmp	r4, r0
c7e17ae4:	9a000001 	bls	c7e17af0 <nand_do_write_ops+0x168>
	    (chip->pagebuf << chip->page_shift) < (to + ops->len))
		chip->pagebuf = -1;
c7e17ae8:	e3e03000 	mvn	r3, #0	; 0x0
c7e17aec:	e58a3074 	str	r3, [sl, #116]

	/* If we're not given explicit OOB data, let it be 0xFF */
	if (likely(!oob))
c7e17af0:	e59d302c 	ldr	r3, [sp, #44]
c7e17af4:	e3530000 	cmp	r3, #0	; 0x0
c7e17af8:	1a000004 	bne	c7e17b10 <nand_do_write_ops+0x188>
		memset(chip->oob_poi, 0xff, mtd->oobsize);
c7e17afc:	e59a0090 	ldr	r0, [sl, #144]
c7e17b00:	e3a010ff 	mov	r1, #255	; 0xff
c7e17b04:	e5992018 	ldr	r2, [r9, #24]
c7e17b08:	eb002c21 	bl	c7e22b94 <memset>
c7e17b0c:	ea00000b 	b	c7e17b40 <nand_do_write_ops+0x1b8>

	/* Don't allow multipage oob writes with offset */
	if (oob && ops->ooboffs && (ops->ooboffs + ops->ooblen > oobmaxlen))
c7e17b10:	e59d0008 	ldr	r0, [sp, #8]
c7e17b14:	e3500000 	cmp	r0, #0	; 0x0
c7e17b18:	0a000008 	beq	c7e17b40 <nand_do_write_ops+0x1b8>
c7e17b1c:	e59d1058 	ldr	r1, [sp, #88]
c7e17b20:	e5912014 	ldr	r2, [r1, #20]
c7e17b24:	e3520000 	cmp	r2, #0	; 0x0
c7e17b28:	0a000004 	beq	c7e17b40 <nand_do_write_ops+0x1b8>
c7e17b2c:	e591300c 	ldr	r3, [r1, #12]
c7e17b30:	e0823003 	add	r3, r2, r3
c7e17b34:	e59d2028 	ldr	r2, [sp, #40]
c7e17b38:	e1530002 	cmp	r3, r2
c7e17b3c:	8a00006f 	bhi	c7e17d00 <nand_do_write_ops+0x378>
	if (nand_check_wp(mtd)) {
		printk (KERN_NOTICE "nand_do_write_ops: Device is write protected\n");
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
c7e17b40:	e1a01007 	mov	r1, r7
c7e17b44:	e1a00006 	mov	r0, r6
c7e17b48:	e59d200c 	ldr	r2, [sp, #12]
c7e17b4c:	eb004b0b 	bl	c7e2a780 <__ashrdi3>
	page = realpage & chip->pagemask;
c7e17b50:	e59d3010 	ldr	r3, [sp, #16]
	if (nand_check_wp(mtd)) {
		printk (KERN_NOTICE "nand_do_write_ops: Device is write protected\n");
		return -EIO;
	}

	realpage = (int)(to >> chip->page_shift);
c7e17b54:	e1a07000 	mov	r7, r0
	page = realpage & chip->pagemask;
c7e17b58:	e0003003 	and	r3, r0, r3
c7e17b5c:	e58d3018 	str	r3, [sp, #24]
c7e17b60:	ea000004 	b	c7e17b78 <nand_do_write_ops+0x1f0>
		writelen -= bytes;
		if (!writelen)
			break;

		column = 0;
		buf += bytes;
c7e17b64:	e59d0030 	ldr	r0, [sp, #48]
c7e17b68:	e3a01000 	mov	r1, #0	; 0x0
c7e17b6c:	e0800005 	add	r0, r0, r5
c7e17b70:	e58d0030 	str	r0, [sp, #48]
c7e17b74:	e58d1020 	str	r1, [sp, #32]
		int bytes = mtd->writesize;
		int cached = writelen > bytes && page != blockmask;
		uint8_t *wbuf = buf;

		/* Partial page write ? */
		if (unlikely(column || writelen < (mtd->writesize - 1))) {
c7e17b78:	e59d2020 	ldr	r2, [sp, #32]
		return -EINVAL;

	while (1) {
		WATCHDOG_RESET();

		int bytes = mtd->writesize;
c7e17b7c:	e5995014 	ldr	r5, [r9, #20]
		int cached = writelen > bytes && page != blockmask;
		uint8_t *wbuf = buf;

		/* Partial page write ? */
		if (unlikely(column || writelen < (mtd->writesize - 1))) {
c7e17b80:	e3520000 	cmp	r2, #0	; 0x0
c7e17b84:	1a00000b 	bne	c7e17bb8 <nand_do_write_ops+0x230>
c7e17b88:	e2453001 	sub	r3, r5, #1	; 0x1
c7e17b8c:	e15b0003 	cmp	fp, r3
c7e17b90:	3a000008 	bcc	c7e17bb8 <nand_do_write_ops+0x230>

	while (1) {
		WATCHDOG_RESET();

		int bytes = mtd->writesize;
		int cached = writelen > bytes && page != blockmask;
c7e17b94:	e59d3018 	ldr	r3, [sp, #24]
c7e17b98:	e59d001c 	ldr	r0, [sp, #28]
c7e17b9c:	e59d1030 	ldr	r1, [sp, #48]
c7e17ba0:	e1530000 	cmp	r3, r0
c7e17ba4:	115b0005 	cmpne	fp, r5
c7e17ba8:	93a06000 	movls	r6, #0	; 0x0
c7e17bac:	83a06001 	movhi	r6, #1	; 0x1
c7e17bb0:	e58d1034 	str	r1, [sp, #52]
c7e17bb4:	ea000016 	b	c7e17c14 <nand_do_write_ops+0x28c>
		uint8_t *wbuf = buf;

		/* Partial page write ? */
		if (unlikely(column || writelen < (mtd->writesize - 1))) {
			cached = 0;
			bytes = min_t(int, bytes - column, (int) writelen);
c7e17bb8:	e59d2020 	ldr	r2, [sp, #32]
			chip->pagebuf = -1;
			memset(chip->buffers->databuf, 0xff, mtd->writesize);
c7e17bbc:	e59a00e8 	ldr	r0, [sl, #232]

		/* Partial page write ? */
		if (unlikely(column || writelen < (mtd->writesize - 1))) {
			cached = 0;
			bytes = min_t(int, bytes - column, (int) writelen);
			chip->pagebuf = -1;
c7e17bc0:	e3e03000 	mvn	r3, #0	; 0x0
c7e17bc4:	e58a3074 	str	r3, [sl, #116]
			memset(chip->buffers->databuf, 0xff, mtd->writesize);
c7e17bc8:	e3a010ff 	mov	r1, #255	; 0xff
		uint8_t *wbuf = buf;

		/* Partial page write ? */
		if (unlikely(column || writelen < (mtd->writesize - 1))) {
			cached = 0;
			bytes = min_t(int, bytes - column, (int) writelen);
c7e17bcc:	e0623005 	rsb	r3, r2, r5
			chip->pagebuf = -1;
			memset(chip->buffers->databuf, 0xff, mtd->writesize);
c7e17bd0:	e2800d12 	add	r0, r0, #1152	; 0x480
c7e17bd4:	e5992014 	ldr	r2, [r9, #20]
		uint8_t *wbuf = buf;

		/* Partial page write ? */
		if (unlikely(column || writelen < (mtd->writesize - 1))) {
			cached = 0;
			bytes = min_t(int, bytes - column, (int) writelen);
c7e17bd8:	e15b0003 	cmp	fp, r3
c7e17bdc:	b1a0500b 	movlt	r5, fp
c7e17be0:	a1a05003 	movge	r5, r3
			chip->pagebuf = -1;
			memset(chip->buffers->databuf, 0xff, mtd->writesize);
c7e17be4:	eb002bea 	bl	c7e22b94 <memset>
			memcpy(&chip->buffers->databuf[column], buf, bytes);
c7e17be8:	e59d1020 	ldr	r1, [sp, #32]
c7e17bec:	e59a30e8 	ldr	r3, [sl, #232]
c7e17bf0:	e2810d12 	add	r0, r1, #1152	; 0x480
c7e17bf4:	e0830000 	add	r0, r3, r0
c7e17bf8:	e59d1030 	ldr	r1, [sp, #48]
c7e17bfc:	e1a02005 	mov	r2, r5
c7e17c00:	eb002c0d 	bl	c7e22c3c <memcpy>
			wbuf = chip->buffers->databuf;
c7e17c04:	e59a30e8 	ldr	r3, [sl, #232]
c7e17c08:	e3a06000 	mov	r6, #0	; 0x0
c7e17c0c:	e2833d12 	add	r3, r3, #1152	; 0x480
c7e17c10:	e58d3034 	str	r3, [sp, #52]
		}

		if (unlikely(oob)) {
c7e17c14:	e59d202c 	ldr	r2, [sp, #44]
c7e17c18:	e3520000 	cmp	r2, #0	; 0x0
c7e17c1c:	0a00000c 	beq	c7e17c54 <nand_do_write_ops+0x2cc>
			size_t len = min(oobwritelen, oobmaxlen);
c7e17c20:	e59d3028 	ldr	r3, [sp, #40]
c7e17c24:	e59d4024 	ldr	r4, [sp, #36]
			oob = nand_fill_oob(chip, oob, len, ops);
c7e17c28:	e1a01002 	mov	r1, r2
			memcpy(&chip->buffers->databuf[column], buf, bytes);
			wbuf = chip->buffers->databuf;
		}

		if (unlikely(oob)) {
			size_t len = min(oobwritelen, oobmaxlen);
c7e17c2c:	e1540003 	cmp	r4, r3
c7e17c30:	21a04003 	movcs	r4, r3
			oob = nand_fill_oob(chip, oob, len, ops);
c7e17c34:	e1a0000a 	mov	r0, sl
c7e17c38:	e1a02004 	mov	r2, r4
c7e17c3c:	e59d3058 	ldr	r3, [sp, #88]
c7e17c40:	ebfffea1 	bl	c7e176cc <nand_fill_oob>
c7e17c44:	e58d002c 	str	r0, [sp, #44]
			oobwritelen -= len;
c7e17c48:	e59d0024 	ldr	r0, [sp, #36]
c7e17c4c:	e0640000 	rsb	r0, r4, r0
c7e17c50:	e58d0024 	str	r0, [sp, #36]
		}

		ret = chip->write_page(mtd, chip, wbuf, page, cached,
c7e17c54:	e59d1058 	ldr	r1, [sp, #88]
c7e17c58:	e59d2034 	ldr	r2, [sp, #52]
c7e17c5c:	e5913000 	ldr	r3, [r1]
c7e17c60:	e1a00009 	mov	r0, r9
c7e17c64:	e3530002 	cmp	r3, #2	; 0x2
c7e17c68:	13a03000 	movne	r3, #0	; 0x0
c7e17c6c:	03a03001 	moveq	r3, #1	; 0x1
c7e17c70:	e58d3004 	str	r3, [sp, #4]
c7e17c74:	e58d6000 	str	r6, [sp]
c7e17c78:	e59d3018 	ldr	r3, [sp, #24]
c7e17c7c:	e1a0100a 	mov	r1, sl
c7e17c80:	e1a0e00f 	mov	lr, pc
c7e17c84:	e59af048 	ldr	pc, [sl, #72]
				       (ops->mode == MTD_OOB_RAW));
		if (ret)
c7e17c88:	e3500000 	cmp	r0, #0	; 0x0
c7e17c8c:	1a000012 	bne	c7e17cdc <nand_do_write_ops+0x354>
			break;

		writelen -= bytes;
		if (!writelen)
c7e17c90:	e05bb005 	subs	fp, fp, r5
c7e17c94:	0a000010 	beq	c7e17cdc <nand_do_write_ops+0x354>

		column = 0;
		buf += bytes;
		realpage++;

		page = realpage & chip->pagemask;
c7e17c98:	e59a3070 	ldr	r3, [sl, #112]
		if (!writelen)
			break;

		column = 0;
		buf += bytes;
		realpage++;
c7e17c9c:	e2877001 	add	r7, r7, #1	; 0x1

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
c7e17ca0:	e0173003 	ands	r3, r7, r3
c7e17ca4:	e58d3018 	str	r3, [sp, #24]
c7e17ca8:	1affffad 	bne	c7e17b64 <nand_do_write_ops+0x1dc>
			chipnr++;
c7e17cac:	e59d2014 	ldr	r2, [sp, #20]
			chip->select_chip(mtd, -1);
c7e17cb0:	e1a00009 	mov	r0, r9
		realpage++;

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
			chipnr++;
c7e17cb4:	e2822001 	add	r2, r2, #1	; 0x1
c7e17cb8:	e58d2014 	str	r2, [sp, #20]
			chip->select_chip(mtd, -1);
c7e17cbc:	e3e01000 	mvn	r1, #0	; 0x0
c7e17cc0:	e1a0e00f 	mov	lr, pc
c7e17cc4:	e59af01c 	ldr	pc, [sl, #28]
			chip->select_chip(mtd, chipnr);
c7e17cc8:	e1a00009 	mov	r0, r9
c7e17ccc:	e59d1014 	ldr	r1, [sp, #20]
c7e17cd0:	e1a0e00f 	mov	lr, pc
c7e17cd4:	e59af01c 	ldr	pc, [sl, #28]
c7e17cd8:	eaffffa1 	b	c7e17b64 <nand_do_write_ops+0x1dc>
		}
	}

	ops->retlen = ops->len - writelen;
c7e17cdc:	e59d1058 	ldr	r1, [sp, #88]
	if (unlikely(oob))
c7e17ce0:	e59d202c 	ldr	r2, [sp, #44]
			chip->select_chip(mtd, -1);
			chip->select_chip(mtd, chipnr);
		}
	}

	ops->retlen = ops->len - writelen;
c7e17ce4:	e5913004 	ldr	r3, [r1, #4]
	if (unlikely(oob))
c7e17ce8:	e3520000 	cmp	r2, #0	; 0x0
			chip->select_chip(mtd, -1);
			chip->select_chip(mtd, chipnr);
		}
	}

	ops->retlen = ops->len - writelen;
c7e17cec:	e06b3003 	rsb	r3, fp, r3
c7e17cf0:	e5813008 	str	r3, [r1, #8]
	if (unlikely(oob))
		ops->oobretlen = ops->ooblen;
c7e17cf4:	1591300c 	ldrne	r3, [r1, #12]
c7e17cf8:	15813010 	strne	r3, [r1, #16]
c7e17cfc:	ea000000 	b	c7e17d04 <nand_do_write_ops+0x37c>
c7e17d00:	e3e00015 	mvn	r0, #21	; 0x15
	return ret;
}
c7e17d04:	e28dd038 	add	sp, sp, #56	; 0x38
c7e17d08:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e17d0c:	c7e33be9 	.word	0xc7e33be9

c7e17d10 <nand_write_oob>:
 * @to:		offset to write to
 * @ops:	oob operation description structure
 */
static int nand_write_oob(struct mtd_info *mtd, loff_t to,
			  struct mtd_oob_ops *ops)
{
c7e17d10:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
c7e17d14:	e59d7020 	ldr	r7, [sp, #32]
c7e17d18:	e1a06000 	mov	r6, r0
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow writes past end of device */
	if (ops->datbuf && (to + ops->len) > mtd->size) {
c7e17d1c:	e5971018 	ldr	r1, [r7, #24]
 * @to:		offset to write to
 * @ops:	oob operation description structure
 */
static int nand_write_oob(struct mtd_info *mtd, loff_t to,
			  struct mtd_oob_ops *ops)
{
c7e17d20:	e1a04002 	mov	r4, r2
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow writes past end of device */
	if (ops->datbuf && (to + ops->len) > mtd->size) {
c7e17d24:	e3510000 	cmp	r1, #0	; 0x0
			  struct mtd_oob_ops *ops)
{
	struct nand_chip *chip = mtd->priv;
	int ret = -ENOTSUPP;

	ops->retlen = 0;
c7e17d28:	e3a01000 	mov	r1, #0	; 0x0
c7e17d2c:	e5871008 	str	r1, [r7, #8]
 * @to:		offset to write to
 * @ops:	oob operation description structure
 */
static int nand_write_oob(struct mtd_info *mtd, loff_t to,
			  struct mtd_oob_ops *ops)
{
c7e17d30:	e1a05003 	mov	r5, r3
	struct nand_chip *chip = mtd->priv;
c7e17d34:	e590c094 	ldr	ip, [r0, #148]
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow writes past end of device */
	if (ops->datbuf && (to + ops->len) > mtd->size) {
c7e17d38:	0a00000b 	beq	c7e17d6c <nand_write_oob+0x5c>
c7e17d3c:	e5973004 	ldr	r3, [r7, #4]
c7e17d40:	e590200c 	ldr	r2, [r0, #12]
c7e17d44:	e0940003 	adds	r0, r4, r3
c7e17d48:	e2a51000 	adc	r1, r5, #0	; 0x0
c7e17d4c:	e1520001 	cmp	r2, r1
c7e17d50:	3a000003 	bcc	c7e17d64 <nand_write_oob+0x54>
c7e17d54:	1a000004 	bne	c7e17d6c <nand_write_oob+0x5c>
c7e17d58:	e5963008 	ldr	r3, [r6, #8]
c7e17d5c:	e1530000 	cmp	r3, r0
c7e17d60:	2a000001 	bcs	c7e17d6c <nand_write_oob+0x5c>
c7e17d64:	e3e04015 	mvn	r4, #21	; 0x15
c7e17d68:	ea000018 	b	c7e17dd0 <nand_write_oob+0xc0>
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Attempt write beyond "
				"end of device\n", __func__);
		return -EINVAL;
	}

	nand_get_device(chip, mtd, FL_WRITING);
c7e17d6c:	e1a0000c 	mov	r0, ip
c7e17d70:	e1a01006 	mov	r1, r6
c7e17d74:	e3a02002 	mov	r2, #2	; 0x2
c7e17d78:	ebfff5f4 	bl	c7e15550 <nand_get_device>

	switch (ops->mode) {
c7e17d7c:	e5973000 	ldr	r3, [r7]
c7e17d80:	e3530002 	cmp	r3, #2	; 0x2
c7e17d84:	859f404c 	ldrhi	r4, [pc, #76]	; c7e17dd8 <nand_write_oob+0xc8>
c7e17d88:	8a00000e 	bhi	c7e17dc8 <nand_write_oob+0xb8>

	default:
		goto out;
	}

	if (!ops->datbuf)
c7e17d8c:	e5973018 	ldr	r3, [r7, #24]
c7e17d90:	e3530000 	cmp	r3, #0	; 0x0
c7e17d94:	1a000005 	bne	c7e17db0 <nand_write_oob+0xa0>
		ret = nand_do_write_oob(mtd, to, ops);
c7e17d98:	e1a02004 	mov	r2, r4
c7e17d9c:	e1a03005 	mov	r3, r5
c7e17da0:	e1a00006 	mov	r0, r6
c7e17da4:	e58d7000 	str	r7, [sp]
c7e17da8:	ebfffe8c 	bl	c7e177e0 <nand_do_write_oob>
c7e17dac:	ea000004 	b	c7e17dc4 <nand_write_oob+0xb4>
	else
		ret = nand_do_write_ops(mtd, to, ops);
c7e17db0:	e1a02004 	mov	r2, r4
c7e17db4:	e1a03005 	mov	r3, r5
c7e17db8:	e1a00006 	mov	r0, r6
c7e17dbc:	e58d7000 	str	r7, [sp]
c7e17dc0:	ebfffef0 	bl	c7e17988 <nand_do_write_ops>
c7e17dc4:	e1a04000 	mov	r4, r0

out:
	nand_release_device(mtd);
c7e17dc8:	e1a00006 	mov	r0, r6
c7e17dcc:	ebfff55e 	bl	c7e1534c <nand_release_device>
	return ret;
}
c7e17dd0:	e1a00004 	mov	r0, r4
c7e17dd4:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
c7e17dd8:	fffffdf4 	.word	0xfffffdf4

c7e17ddc <nand_write>:
 *
 * NAND write with ECC
 */
static int nand_write(struct mtd_info *mtd, loff_t to, size_t len,
			  size_t *retlen, const uint8_t *buf)
{
c7e17ddc:	e92d4c73 	push	{r0, r1, r4, r5, r6, sl, fp, lr}
c7e17de0:	e59d4020 	ldr	r4, [sp, #32]
c7e17de4:	e1a0b003 	mov	fp, r3
	struct nand_chip *chip = mtd->priv;
	int ret;

	/* Do not allow writes past end of device */
	if ((to + len) > mtd->size)
c7e17de8:	e0921004 	adds	r1, r2, r4
c7e17dec:	e590300c 	ldr	r3, [r0, #12]
 *
 * NAND write with ECC
 */
static int nand_write(struct mtd_info *mtd, loff_t to, size_t len,
			  size_t *retlen, const uint8_t *buf)
{
c7e17df0:	e1a0a002 	mov	sl, r2
	struct nand_chip *chip = mtd->priv;
	int ret;

	/* Do not allow writes past end of device */
	if ((to + len) > mtd->size)
c7e17df4:	e2ab2000 	adc	r2, fp, #0	; 0x0
c7e17df8:	e1530002 	cmp	r3, r2
 *
 * NAND write with ECC
 */
static int nand_write(struct mtd_info *mtd, loff_t to, size_t len,
			  size_t *retlen, const uint8_t *buf)
{
c7e17dfc:	e1a06000 	mov	r6, r0
	struct nand_chip *chip = mtd->priv;
c7e17e00:	e5905094 	ldr	r5, [r0, #148]
	int ret;

	/* Do not allow writes past end of device */
	if ((to + len) > mtd->size)
c7e17e04:	3a000003 	bcc	c7e17e18 <nand_write+0x3c>
c7e17e08:	1a000004 	bne	c7e17e20 <nand_write+0x44>
c7e17e0c:	e5903008 	ldr	r3, [r0, #8]
c7e17e10:	e1530001 	cmp	r3, r1
c7e17e14:	2a000001 	bcs	c7e17e20 <nand_write+0x44>
c7e17e18:	e3e04015 	mvn	r4, #21	; 0x15
c7e17e1c:	ea000016 	b	c7e17e7c <nand_write+0xa0>
		return -EINVAL;
	if (!len)
c7e17e20:	e3540000 	cmp	r4, #0	; 0x0
c7e17e24:	0a000014 	beq	c7e17e7c <nand_write+0xa0>
		return 0;

	nand_get_device(chip, mtd, FL_WRITING);
c7e17e28:	e1a01006 	mov	r1, r6
c7e17e2c:	e3a02002 	mov	r2, #2	; 0x2
c7e17e30:	e1a00005 	mov	r0, r5
c7e17e34:	ebfff5c5 	bl	c7e15550 <nand_get_device>

	chip->ops.len = len;
	chip->ops.datbuf = (uint8_t *)buf;
c7e17e38:	e59d3028 	ldr	r3, [sp, #40]
	if (!len)
		return 0;

	nand_get_device(chip, mtd, FL_WRITING);

	chip->ops.len = len;
c7e17e3c:	e58540f4 	str	r4, [r5, #244]
	chip->ops.datbuf = (uint8_t *)buf;
c7e17e40:	e5853108 	str	r3, [r5, #264]
	chip->ops.oobbuf = NULL;
c7e17e44:	e3a03000 	mov	r3, #0	; 0x0
c7e17e48:	e585310c 	str	r3, [r5, #268]

	ret = nand_do_write_ops(mtd, to, &chip->ops);
c7e17e4c:	e1a0200a 	mov	r2, sl
c7e17e50:	e1a0300b 	mov	r3, fp
c7e17e54:	e28510f0 	add	r1, r5, #240	; 0xf0
c7e17e58:	e1a00006 	mov	r0, r6
c7e17e5c:	e58d1000 	str	r1, [sp]
c7e17e60:	ebfffec8 	bl	c7e17988 <nand_do_write_ops>

	*retlen = chip->ops.retlen;
c7e17e64:	e59520f8 	ldr	r2, [r5, #248]
c7e17e68:	e59d3024 	ldr	r3, [sp, #36]

	chip->ops.len = len;
	chip->ops.datbuf = (uint8_t *)buf;
	chip->ops.oobbuf = NULL;

	ret = nand_do_write_ops(mtd, to, &chip->ops);
c7e17e6c:	e1a04000 	mov	r4, r0

	*retlen = chip->ops.retlen;
c7e17e70:	e5832000 	str	r2, [r3]

	nand_release_device(mtd);
c7e17e74:	e1a00006 	mov	r0, r6
c7e17e78:	ebfff533 	bl	c7e1534c <nand_release_device>

	return ret;
}
c7e17e7c:	e1a00004 	mov	r0, r4
c7e17e80:	e8bd8c7c 	pop	{r2, r3, r4, r5, r6, sl, fp, pc}

c7e17e84 <nand_transfer_oob>:
 * @len:	size of oob to transfer
 */
static uint8_t *nand_transfer_oob(struct nand_chip *chip, uint8_t *oob,
				  struct mtd_oob_ops *ops, size_t len)
{
	switch (ops->mode) {
c7e17e84:	e592c000 	ldr	ip, [r2]
 * @ops:	oob ops structure
 * @len:	size of oob to transfer
 */
static uint8_t *nand_transfer_oob(struct nand_chip *chip, uint8_t *oob,
				  struct mtd_oob_ops *ops, size_t len)
{
c7e17e88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	switch (ops->mode) {
c7e17e8c:	e35c0001 	cmp	ip, #1	; 0x1
 * @ops:	oob ops structure
 * @len:	size of oob to transfer
 */
static uint8_t *nand_transfer_oob(struct nand_chip *chip, uint8_t *oob,
				  struct mtd_oob_ops *ops, size_t len)
{
c7e17e90:	e1a09000 	mov	r9, r0
c7e17e94:	e1a06001 	mov	r6, r1
c7e17e98:	e1a05003 	mov	r5, r3
	switch (ops->mode) {
c7e17e9c:	0a00000a 	beq	c7e17ecc <nand_transfer_oob+0x48>
c7e17ea0:	3a000001 	bcc	c7e17eac <nand_transfer_oob+0x28>
c7e17ea4:	e35c0002 	cmp	ip, #2	; 0x2
c7e17ea8:	1a00002b 	bne	c7e17f5c <nand_transfer_oob+0xd8>

	case MTD_OOB_PLACE:
	case MTD_OOB_RAW:
		memcpy(oob, chip->oob_poi + ops->ooboffs, len);
c7e17eac:	e5921014 	ldr	r1, [r2, #20]
c7e17eb0:	e5993090 	ldr	r3, [r9, #144]
c7e17eb4:	e1a00006 	mov	r0, r6
c7e17eb8:	e0831001 	add	r1, r3, r1
c7e17ebc:	e1a02005 	mov	r2, r5
c7e17ec0:	eb002b5d 	bl	c7e22c3c <memcpy>
		return oob + len;
c7e17ec4:	e0866005 	add	r6, r6, r5
c7e17ec8:	ea00002a 	b	c7e17f78 <nand_transfer_oob+0xf4>

	case MTD_OOB_AUTO: {
		struct nand_oobfree *free = chip->ecc.layout->oobfree;
c7e17ecc:	e59030b8 	ldr	r3, [r0, #184]
		uint32_t boffs = 0, roffs = ops->ooboffs;
c7e17ed0:	e3a04000 	mov	r4, #0	; 0x0
	case MTD_OOB_RAW:
		memcpy(oob, chip->oob_poi + ops->ooboffs, len);
		return oob + len;

	case MTD_OOB_AUTO: {
		struct nand_oobfree *free = chip->ecc.layout->oobfree;
c7e17ed4:	e283af82 	add	sl, r3, #520	; 0x208
		uint32_t boffs = 0, roffs = ops->ooboffs;
c7e17ed8:	e5922014 	ldr	r2, [r2, #20]
c7e17edc:	e1a07004 	mov	r7, r4
c7e17ee0:	ea000017 	b	c7e17f44 <nand_transfer_oob+0xc0>
		size_t bytes = 0;

		for (; free->length && len; free++, len -= bytes) {
			/* Read request not from offset 0 ? */
			if (unlikely(roffs)) {
c7e17ee4:	e3520000 	cmp	r2, #0	; 0x0
c7e17ee8:	0a000008 	beq	c7e17f10 <nand_transfer_oob+0x8c>
				if (roffs >= free->length) {
c7e17eec:	e1520001 	cmp	r2, r1
					roffs -= free->length;
c7e17ef0:	20612002 	rsbcs	r2, r1, r2
		size_t bytes = 0;

		for (; free->length && len; free++, len -= bytes) {
			/* Read request not from offset 0 ? */
			if (unlikely(roffs)) {
				if (roffs >= free->length) {
c7e17ef4:	2a000010 	bcs	c7e17f3c <nand_transfer_oob+0xb8>
					roffs -= free->length;
					continue;
				}
				boffs = free->offset + roffs;
c7e17ef8:	e79a3007 	ldr	r3, [sl, r7]
				bytes = min_t(size_t, len,
c7e17efc:	e0624001 	rsb	r4, r2, r1
c7e17f00:	e1540005 	cmp	r4, r5
c7e17f04:	21a04005 	movcs	r4, r5
			if (unlikely(roffs)) {
				if (roffs >= free->length) {
					roffs -= free->length;
					continue;
				}
				boffs = free->offset + roffs;
c7e17f08:	e0822003 	add	r2, r2, r3
c7e17f0c:	ea000003 	b	c7e17f20 <nand_transfer_oob+0x9c>
				bytes = min_t(size_t, len,
					      (free->length - roffs));
				roffs = 0;
			} else {
				bytes = min_t(size_t, len, free->length);
				boffs = free->offset;
c7e17f10:	e79a2007 	ldr	r2, [sl, r7]
				boffs = free->offset + roffs;
				bytes = min_t(size_t, len,
					      (free->length - roffs));
				roffs = 0;
			} else {
				bytes = min_t(size_t, len, free->length);
c7e17f14:	e1550001 	cmp	r5, r1
c7e17f18:	31a04005 	movcc	r4, r5
c7e17f1c:	21a04001 	movcs	r4, r1
				boffs = free->offset;
			}
			memcpy(oob, chip->oob_poi + boffs, bytes);
c7e17f20:	e5991090 	ldr	r1, [r9, #144]
c7e17f24:	e1a00006 	mov	r0, r6
c7e17f28:	e0811002 	add	r1, r1, r2
c7e17f2c:	e1a02004 	mov	r2, r4
c7e17f30:	eb002b41 	bl	c7e22c3c <memcpy>
			oob += bytes;
c7e17f34:	e0866004 	add	r6, r6, r4
c7e17f38:	e3a02000 	mov	r2, #0	; 0x0
	case MTD_OOB_AUTO: {
		struct nand_oobfree *free = chip->ecc.layout->oobfree;
		uint32_t boffs = 0, roffs = ops->ooboffs;
		size_t bytes = 0;

		for (; free->length && len; free++, len -= bytes) {
c7e17f3c:	e0645005 	rsb	r5, r4, r5
c7e17f40:	e2877008 	add	r7, r7, #8	; 0x8
c7e17f44:	e08a3007 	add	r3, sl, r7
c7e17f48:	e5931004 	ldr	r1, [r3, #4]
c7e17f4c:	e3510000 	cmp	r1, #0	; 0x0
c7e17f50:	13550000 	cmpne	r5, #0	; 0x0
c7e17f54:	1affffe2 	bne	c7e17ee4 <nand_transfer_oob+0x60>
c7e17f58:	ea000006 	b	c7e17f78 <nand_transfer_oob+0xf4>
			oob += bytes;
		}
		return oob;
	}
	default:
		BUG();
c7e17f5c:	e59f001c 	ldr	r0, [pc, #28]	; c7e17f80 <nand_transfer_oob+0xfc>
c7e17f60:	e59f101c 	ldr	r1, [pc, #28]	; c7e17f84 <nand_transfer_oob+0x100>
c7e17f64:	e59f201c 	ldr	r2, [pc, #28]	; c7e17f88 <nand_transfer_oob+0x104>
c7e17f68:	e59f301c 	ldr	r3, [pc, #28]	; c7e17f8c <nand_transfer_oob+0x108>
c7e17f6c:	ebffc2b9 	bl	c7e08a58 <printf>
c7e17f70:	e59f0018 	ldr	r0, [pc, #24]	; c7e17f90 <nand_transfer_oob+0x10c>
c7e17f74:	eb002cdf 	bl	c7e232f8 <panic>
	}
	return NULL;
}
c7e17f78:	e1a00006 	mov	r0, r6
c7e17f7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e17f80:	c7e30403 	.word	0xc7e30403
c7e17f84:	c7e33b01 	.word	0xc7e33b01
c7e17f88:	000004cc 	.word	0x000004cc
c7e17f8c:	c7e2b042 	.word	0xc7e2b042
c7e17f90:	c7e3042a 	.word	0xc7e3042a

c7e17f94 <nand_default_block_markbad>:
 *
 * This is the default implementation, which can be overridden by
 * a hardware specific driver.
*/
static int nand_default_block_markbad(struct mtd_info *mtd, loff_t ofs)
{
c7e17f94:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	struct nand_chip *chip = mtd->priv;
c7e17f98:	e5904094 	ldr	r4, [r0, #148]
 *
 * This is the default implementation, which can be overridden by
 * a hardware specific driver.
*/
static int nand_default_block_markbad(struct mtd_info *mtd, loff_t ofs)
{
c7e17f9c:	e1a0a000 	mov	sl, r0
c7e17fa0:	e1a05002 	mov	r5, r2
	struct nand_chip *chip = mtd->priv;
	uint8_t buf[2] = { 0, 0 };
c7e17fa4:	e28d000e 	add	r0, sp, #14	; 0xe
c7e17fa8:	e59f1164 	ldr	r1, [pc, #356]	; c7e18114 <nand_default_block_markbad+0x180>
c7e17fac:	e3a02002 	mov	r2, #2	; 0x2
 *
 * This is the default implementation, which can be overridden by
 * a hardware specific driver.
*/
static int nand_default_block_markbad(struct mtd_info *mtd, loff_t ofs)
{
c7e17fb0:	e1a06003 	mov	r6, r3
	struct nand_chip *chip = mtd->priv;
	uint8_t buf[2] = { 0, 0 };
c7e17fb4:	eb002b20 	bl	c7e22c3c <memcpy>
	int block, ret, i = 0;

	if (chip->options & NAND_BBT_SCANLASTPAGE)
c7e17fb8:	e5943050 	ldr	r3, [r4, #80]
c7e17fbc:	e3130902 	tst	r3, #32768	; 0x8000
c7e17fc0:	0a000004 	beq	c7e17fd8 <nand_default_block_markbad+0x44>
		ofs += mtd->erasesize - mtd->writesize;
c7e17fc4:	e59a3010 	ldr	r3, [sl, #16]
c7e17fc8:	e59a2014 	ldr	r2, [sl, #20]
c7e17fcc:	e0623003 	rsb	r3, r2, r3
c7e17fd0:	e0955003 	adds	r5, r5, r3
c7e17fd4:	e2a66000 	adc	r6, r6, #0	; 0x0

	/* Get block number */
	block = (int)(ofs >> chip->bbt_erase_shift);
	if (chip->bbt)
c7e17fd8:	e5947110 	ldr	r7, [r4, #272]

	if (chip->options & NAND_BBT_SCANLASTPAGE)
		ofs += mtd->erasesize - mtd->writesize;

	/* Get block number */
	block = (int)(ofs >> chip->bbt_erase_shift);
c7e17fdc:	e594205c 	ldr	r2, [r4, #92]
	if (chip->bbt)
c7e17fe0:	e3570000 	cmp	r7, #0	; 0x0
c7e17fe4:	0a000008 	beq	c7e1800c <nand_default_block_markbad+0x78>

	if (chip->options & NAND_BBT_SCANLASTPAGE)
		ofs += mtd->erasesize - mtd->writesize;

	/* Get block number */
	block = (int)(ofs >> chip->bbt_erase_shift);
c7e17fe8:	e1a00005 	mov	r0, r5
c7e17fec:	e1a01006 	mov	r1, r6
c7e17ff0:	eb0049e2 	bl	c7e2a780 <__ashrdi3>
	if (chip->bbt)
		chip->bbt[block >> 2] |= 0x01 << ((block & 0x03) << 1);
c7e17ff4:	e7d71140 	ldrb	r1, [r7, r0, asr #2]
c7e17ff8:	e2003003 	and	r3, r0, #3	; 0x3
c7e17ffc:	e1a03083 	lsl	r3, r3, #1
c7e18000:	e3a02001 	mov	r2, #1	; 0x1
c7e18004:	e1811312 	orr	r1, r1, r2, lsl r3
c7e18008:	e7c71140 	strb	r1, [r7, r0, asr #2]

	/* Do we have a flash based bad block table ? */
	if (chip->options & NAND_USE_FLASH_BBT)
c7e1800c:	e5943050 	ldr	r3, [r4, #80]
c7e18010:	e2137801 	ands	r7, r3, #65536	; 0x10000
c7e18014:	0a000005 	beq	c7e18030 <nand_default_block_markbad+0x9c>
		ret = nand_update_bbt(mtd, ofs);
c7e18018:	e1a02005 	mov	r2, r5
c7e1801c:	e1a03006 	mov	r3, r6
c7e18020:	e1a0000a 	mov	r0, sl
c7e18024:	ebffeded 	bl	c7e137e0 <nand_update_bbt>
c7e18028:	e1a07000 	mov	r7, r0
c7e1802c:	ea000031 	b	c7e180f8 <nand_default_block_markbad+0x164>
	else {
		nand_get_device(chip, mtd, FL_WRITING);
c7e18030:	e1a00004 	mov	r0, r4
c7e18034:	e1a0100a 	mov	r1, sl
c7e18038:	e3a02002 	mov	r2, #2	; 0x2
c7e1803c:	ebfff543 	bl	c7e15550 <nand_get_device>
			chip->ops.len = chip->ops.ooblen = 2;
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = buf;
			chip->ops.ooboffs = chip->badblockpos & ~0x01;

			ret = nand_do_write_oob(mtd, ofs, &chip->ops);
c7e18040:	e1a09007 	mov	r9, r7
c7e18044:	e284b0f0 	add	fp, r4, #240	; 0xf0
		 */
		do {
			chip->ops.len = chip->ops.ooblen = 2;
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = buf;
			chip->ops.ooboffs = chip->badblockpos & ~0x01;
c7e18048:	e5942080 	ldr	r2, [r4, #128]
		 * encountered quits the procedure. We write two bytes per
		 * location, so we dont have to mess with 16 bit access.
		 */
		do {
			chip->ops.len = chip->ops.ooblen = 2;
			chip->ops.datbuf = NULL;
c7e1804c:	e3a03000 	mov	r3, #0	; 0x0
		 * If we write to more than one location, the first error
		 * encountered quits the procedure. We write two bytes per
		 * location, so we dont have to mess with 16 bit access.
		 */
		do {
			chip->ops.len = chip->ops.ooblen = 2;
c7e18050:	e3a01002 	mov	r1, #2	; 0x2
			chip->ops.datbuf = NULL;
c7e18054:	e5843108 	str	r3, [r4, #264]
			chip->ops.oobbuf = buf;
			chip->ops.ooboffs = chip->badblockpos & ~0x01;
c7e18058:	e3c22001 	bic	r2, r2, #1	; 0x1
		 * location, so we dont have to mess with 16 bit access.
		 */
		do {
			chip->ops.len = chip->ops.ooblen = 2;
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = buf;
c7e1805c:	e28d300e 	add	r3, sp, #14	; 0xe
c7e18060:	e584310c 	str	r3, [r4, #268]
			chip->ops.ooboffs = chip->badblockpos & ~0x01;
c7e18064:	e5842104 	str	r2, [r4, #260]
		 * If we write to more than one location, the first error
		 * encountered quits the procedure. We write two bytes per
		 * location, so we dont have to mess with 16 bit access.
		 */
		do {
			chip->ops.len = chip->ops.ooblen = 2;
c7e18068:	e58410f4 	str	r1, [r4, #244]
c7e1806c:	e58410fc 	str	r1, [r4, #252]
			chip->ops.datbuf = NULL;
			chip->ops.oobbuf = buf;
			chip->ops.ooboffs = chip->badblockpos & ~0x01;

			ret = nand_do_write_oob(mtd, ofs, &chip->ops);
c7e18070:	e1a02005 	mov	r2, r5
c7e18074:	e1a03006 	mov	r3, r6
c7e18078:	e1a0000a 	mov	r0, sl
c7e1807c:	e58db000 	str	fp, [sp]
c7e18080:	ebfffdd6 	bl	c7e177e0 <nand_do_write_oob>

			if (!ret && (chip->options & NAND_BBT_SCANBYTE1AND6)) {
c7e18084:	e2507000 	subs	r7, r0, #0	; 0x0
c7e18088:	1a00000a 	bne	c7e180b8 <nand_default_block_markbad+0x124>
c7e1808c:	e5943050 	ldr	r3, [r4, #80]
c7e18090:	e3130601 	tst	r3, #1048576	; 0x100000
c7e18094:	0a000007 	beq	c7e180b8 <nand_default_block_markbad+0x124>
				chip->ops.ooboffs = NAND_SMALL_BADBLOCK_POS
c7e18098:	e3a03004 	mov	r3, #4	; 0x4
c7e1809c:	e5843104 	str	r3, [r4, #260]
					& ~0x01;
				ret = nand_do_write_oob(mtd, ofs, &chip->ops);
c7e180a0:	e1a02005 	mov	r2, r5
c7e180a4:	e1a03006 	mov	r3, r6
c7e180a8:	e1a0000a 	mov	r0, sl
c7e180ac:	e58db000 	str	fp, [sp]
c7e180b0:	ebfffdca 	bl	c7e177e0 <nand_do_write_oob>
c7e180b4:	e1a07000 	mov	r7, r0
			}
			i++;
			ofs += mtd->writesize;
		} while (!ret && (chip->options & NAND_BBT_SCAN2NDPAGE) &&
				i < 2);
c7e180b8:	e3570000 	cmp	r7, #0	; 0x0
c7e180bc:	e2893001 	add	r3, r9, #1	; 0x1
				chip->ops.ooboffs = NAND_SMALL_BADBLOCK_POS
					& ~0x01;
				ret = nand_do_write_oob(mtd, ofs, &chip->ops);
			}
			i++;
			ofs += mtd->writesize;
c7e180c0:	e59a1014 	ldr	r1, [sl, #20]
c7e180c4:	e3a09001 	mov	r9, #1	; 0x1
		} while (!ret && (chip->options & NAND_BBT_SCAN2NDPAGE) &&
				i < 2);
c7e180c8:	1a000008 	bne	c7e180f0 <nand_default_block_markbad+0x15c>
c7e180cc:	e5942050 	ldr	r2, [r4, #80]
c7e180d0:	e1530009 	cmp	r3, r9
c7e180d4:	c3a03000 	movgt	r3, #0	; 0x0
c7e180d8:	d3a03001 	movle	r3, #1	; 0x1
c7e180dc:	e0133722 	ands	r3, r3, r2, lsr #14
c7e180e0:	0a000002 	beq	c7e180f0 <nand_default_block_markbad+0x15c>
				chip->ops.ooboffs = NAND_SMALL_BADBLOCK_POS
					& ~0x01;
				ret = nand_do_write_oob(mtd, ofs, &chip->ops);
			}
			i++;
			ofs += mtd->writesize;
c7e180e4:	e0955001 	adds	r5, r5, r1
c7e180e8:	e2a66000 	adc	r6, r6, #0	; 0x0
c7e180ec:	eaffffd5 	b	c7e18048 <nand_default_block_markbad+0xb4>
		} while (!ret && (chip->options & NAND_BBT_SCAN2NDPAGE) &&
				i < 2);

		nand_release_device(mtd);
c7e180f0:	e1a0000a 	mov	r0, sl
c7e180f4:	ebfff494 	bl	c7e1534c <nand_release_device>
	}
	if (!ret)
c7e180f8:	e3570000 	cmp	r7, #0	; 0x0
		mtd->ecc_stats.badblocks++;
c7e180fc:	059a3088 	ldreq	r3, [sl, #136]

	return ret;
}
c7e18100:	e1a00007 	mov	r0, r7
				i < 2);

		nand_release_device(mtd);
	}
	if (!ret)
		mtd->ecc_stats.badblocks++;
c7e18104:	02833001 	addeq	r3, r3, #1	; 0x1
c7e18108:	058a3088 	streq	r3, [sl, #136]

	return ret;
}
c7e1810c:	e28dd010 	add	sp, sp, #16	; 0x10
c7e18110:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e18114:	c7e2b054 	.word	0xc7e2b054

c7e18118 <nand_erase_nand>:
 *
 * Erase one ore more blocks
 */
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
c7e18118:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: start = 0x%012llx, len = %llu\n",
				__func__, (unsigned long long)instr->addr,
				(unsigned long long)instr->len);

	if (check_offs_len(mtd, instr->addr, instr->len))
c7e1811c:	e2816010 	add	r6, r1, #16	; 0x10
c7e18120:	e8960060 	ldm	r6, {r5, r6}
 */
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
	int page, status, pages_per_block, ret, chipnr;
	struct nand_chip *chip = mtd->priv;
c7e18124:	e5907094 	ldr	r7, [r0, #148]
 *
 * Erase one ore more blocks
 */
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
c7e18128:	e1a0a000 	mov	sl, r0
{
	struct nand_chip *chip = mtd->priv;
	int ret = 0;

	/* Start address must align on block boundary */
	if (ofs & ((1 << chip->phys_erase_shift) - 1)) {
c7e1812c:	e5973058 	ldr	r3, [r7, #88]
c7e18130:	e3e00000 	mvn	r0, #0	; 0x0
c7e18134:	e1e00310 	mvn	r0, r0, lsl r3
 *
 * Erase one ore more blocks
 */
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
c7e18138:	e24dd030 	sub	sp, sp, #48	; 0x30
{
	struct nand_chip *chip = mtd->priv;
	int ret = 0;

	/* Start address must align on block boundary */
	if (ofs & ((1 << chip->phys_erase_shift) - 1)) {
c7e1813c:	e1a03000 	mov	r3, r0
c7e18140:	e1a04fc3 	asr	r4, r3, #31
c7e18144:	e58d3008 	str	r3, [sp, #8]
c7e18148:	e58d400c 	str	r4, [sp, #12]
 *
 * Erase one ore more blocks
 */
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
c7e1814c:	e1a0b001 	mov	fp, r1
{
	struct nand_chip *chip = mtd->priv;
	int ret = 0;

	/* Start address must align on block boundary */
	if (ofs & ((1 << chip->phys_erase_shift) - 1)) {
c7e18150:	e2811008 	add	r1, r1, #8	; 0x8
c7e18154:	e8910003 	ldm	r1, {r0, r1}
c7e18158:	e0044001 	and	r4, r4, r1
c7e1815c:	e0033000 	and	r3, r3, r0
c7e18160:	e1933004 	orrs	r3, r3, r4
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Unaligned address\n", __func__);
		ret = -EINVAL;
	}

	/* Length must align on block boundary */
	if (len & ((1 << chip->phys_erase_shift) - 1)) {
c7e18164:	e28d1008 	add	r1, sp, #8	; 0x8
c7e18168:	e8910003 	ldm	r1, {r0, r1}
c7e1816c:	e0000005 	and	r0, r0, r5
c7e18170:	e0011006 	and	r1, r1, r6
{
	struct nand_chip *chip = mtd->priv;
	int ret = 0;

	/* Start address must align on block boundary */
	if (ofs & ((1 << chip->phys_erase_shift) - 1)) {
c7e18174:	01a0c003 	moveq	ip, r3
c7e18178:	13e0c015 	mvnne	ip, #21	; 0x15
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Unaligned address\n", __func__);
		ret = -EINVAL;
	}

	/* Length must align on block boundary */
	if (len & ((1 << chip->phys_erase_shift) - 1)) {
c7e1817c:	e1903001 	orrs	r3, r0, r1
c7e18180:	13e0c015 	mvnne	ip, #21	; 0x15
					__func__);
		ret = -EINVAL;
	}

	/* Do not allow past end of device */
	if (ofs + len > mtd->size) {
c7e18184:	e59a300c 	ldr	r3, [sl, #12]
c7e18188:	e28b1008 	add	r1, fp, #8	; 0x8
c7e1818c:	e8910003 	ldm	r1, {r0, r1}
c7e18190:	e0900005 	adds	r0, r0, r5
c7e18194:	e0a11006 	adc	r1, r1, r6
c7e18198:	e1530001 	cmp	r3, r1
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
	int page, status, pages_per_block, ret, chipnr;
	struct nand_chip *chip = mtd->priv;
	loff_t rewrite_bbt[CONFIG_SYS_NAND_MAX_CHIPS] = {0};
c7e1819c:	e59f3374 	ldr	r3, [pc, #884]	; c7e18518 <nand_erase_nand+0x400>
 *
 * Erase one ore more blocks
 */
int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
		    int allowbbt)
{
c7e181a0:	e58d2010 	str	r2, [sp, #16]
	int page, status, pages_per_block, ret, chipnr;
	struct nand_chip *chip = mtd->priv;
	loff_t rewrite_bbt[CONFIG_SYS_NAND_MAX_CHIPS] = {0};
c7e181a4:	e2834058 	add	r4, r3, #88	; 0x58
c7e181a8:	e8940018 	ldm	r4, {r3, r4}
c7e181ac:	e58d3028 	str	r3, [sp, #40]
c7e181b0:	e58d402c 	str	r4, [sp, #44]
					__func__);
		ret = -EINVAL;
	}

	/* Do not allow past end of device */
	if (ofs + len > mtd->size) {
c7e181b4:	3a0000d3 	bcc	c7e18508 <nand_erase_nand+0x3f0>
c7e181b8:	1a000002 	bne	c7e181c8 <nand_erase_nand+0xb0>
c7e181bc:	e59a3008 	ldr	r3, [sl, #8]
c7e181c0:	e1530000 	cmp	r3, r0
c7e181c4:	3a0000cf 	bcc	c7e18508 <nand_erase_nand+0x3f0>

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: start = 0x%012llx, len = %llu\n",
				__func__, (unsigned long long)instr->addr,
				(unsigned long long)instr->len);

	if (check_offs_len(mtd, instr->addr, instr->len))
c7e181c8:	e35c0000 	cmp	ip, #0	; 0x0
c7e181cc:	1a0000cd 	bne	c7e18508 <nand_erase_nand+0x3f0>
		return -EINVAL;

	instr->fail_addr = MTD_FAIL_ADDR_UNKNOWN;
c7e181d0:	e3e03000 	mvn	r3, #0	; 0x0
c7e181d4:	e3e04000 	mvn	r4, #0	; 0x0
c7e181d8:	e58b3018 	str	r3, [fp, #24]
c7e181dc:	e58b401c 	str	r4, [fp, #28]

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);
c7e181e0:	e1a0100a 	mov	r1, sl
c7e181e4:	e3a02003 	mov	r2, #3	; 0x3
c7e181e8:	e1a00007 	mov	r0, r7
c7e181ec:	ebfff4d7 	bl	c7e15550 <nand_get_device>

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e181f0:	e28b1008 	add	r1, fp, #8	; 0x8
c7e181f4:	e8910003 	ldm	r1, {r0, r1}
	chipnr = (int)(instr->addr >> chip->chip_shift);
c7e181f8:	e5972060 	ldr	r2, [r7, #96]

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e181fc:	e58d0020 	str	r0, [sp, #32]
c7e18200:	e58d1024 	str	r1, [sp, #36]
	chipnr = (int)(instr->addr >> chip->chip_shift);
c7e18204:	eb004956 	bl	c7e2a764 <__lshrdi3>

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e18208:	e5975054 	ldr	r5, [r7, #84]
	chipnr = (int)(instr->addr >> chip->chip_shift);

	/* Calculate pages in each block */
	pages_per_block = 1 << (chip->phys_erase_shift - chip->page_shift);
c7e1820c:	e5972058 	ldr	r2, [r7, #88]
c7e18210:	e3a03001 	mov	r3, #1	; 0x1
c7e18214:	e0652002 	rsb	r2, r5, r2
c7e18218:	e1a03213 	lsl	r3, r3, r2
	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
	chipnr = (int)(instr->addr >> chip->chip_shift);
c7e1821c:	e1a04000 	mov	r4, r0

	/* Calculate pages in each block */
	pages_per_block = 1 << (chip->phys_erase_shift - chip->page_shift);

	/* Select the NAND device */
	chip->select_chip(mtd, chipnr);
c7e18220:	e1a01000 	mov	r1, r0
	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
	chipnr = (int)(instr->addr >> chip->chip_shift);

	/* Calculate pages in each block */
	pages_per_block = 1 << (chip->phys_erase_shift - chip->page_shift);
c7e18224:	e58d3014 	str	r3, [sp, #20]

	/* Select the NAND device */
	chip->select_chip(mtd, chipnr);
c7e18228:	e1a0000a 	mov	r0, sl
	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
	chipnr = (int)(instr->addr >> chip->chip_shift);
c7e1822c:	e58d4018 	str	r4, [sp, #24]

	/* Calculate pages in each block */
	pages_per_block = 1 << (chip->phys_erase_shift - chip->page_shift);

	/* Select the NAND device */
	chip->select_chip(mtd, chipnr);
c7e18230:	e1a0e00f 	mov	lr, pc
c7e18234:	e597f01c 	ldr	pc, [r7, #28]

	/* Check, if it is write protected */
	if (nand_check_wp(mtd)) {
c7e18238:	e1a0000a 	mov	r0, sl
c7e1823c:	ebfff4b0 	bl	c7e15504 <nand_check_wp>
c7e18240:	e3500000 	cmp	r0, #0	; 0x0
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Device is write protected!!!\n",
					__func__);
		instr->state = MTD_ERASE_FAILED;
c7e18244:	13a03010 	movne	r3, #16	; 0x10
c7e18248:	13e01000 	mvnne	r1, #0	; 0x0
c7e1824c:	15cb3038 	strbne	r3, [fp, #56]
c7e18250:	158d101c 	strne	r1, [sp, #28]
c7e18254:	1a000087 	bne	c7e18478 <nand_erase_nand+0x360>
	 * If BBT requires refresh, set the BBT page mask to see if the BBT
	 * should be rewritten. Otherwise the mask is set to 0xffffffff which
	 * can not be matched. This is also done when the bbt is actually
	 * erased to avoid recusrsive updates
	 */
	if (chip->options & BBT_AUTO_REFRESH && !allowbbt)
c7e18258:	e59d4010 	ldr	r4, [sp, #16]
c7e1825c:	e5972050 	ldr	r2, [r7, #80]
c7e18260:	e2743001 	rsbs	r3, r4, #1	; 0x1
c7e18264:	33a03000 	movcc	r3, #0	; 0x0
c7e18268:	e01333a2 	ands	r3, r3, r2, lsr #7
		bbt_masked_page = chip->bbt_td->pages[chipnr] & BBT_PAGE_MASK;
c7e1826c:	15973114 	ldrne	r3, [r7, #276]
c7e18270:	159d0018 	ldrne	r0, [sp, #24]
	 * If BBT requires refresh, set the BBT page mask to see if the BBT
	 * should be rewritten. Otherwise the mask is set to 0xffffffff which
	 * can not be matched. This is also done when the bbt is actually
	 * erased to avoid recusrsive updates
	 */
	if (chip->options & BBT_AUTO_REFRESH && !allowbbt)
c7e18274:	03e0c000 	mvneq	ip, #0	; 0x0
		bbt_masked_page = chip->bbt_td->pages[chipnr] & BBT_PAGE_MASK;
c7e18278:	10833100 	addne	r3, r3, r0, lsl #2
c7e1827c:	15933004 	ldrne	r3, [r3, #4]

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e18280:	e28d1020 	add	r1, sp, #32	; 0x20
c7e18284:	e8910003 	ldm	r1, {r0, r1}
	 * should be rewritten. Otherwise the mask is set to 0xffffffff which
	 * can not be matched. This is also done when the bbt is actually
	 * erased to avoid recusrsive updates
	 */
	if (chip->options & BBT_AUTO_REFRESH && !allowbbt)
		bbt_masked_page = chip->bbt_td->pages[chipnr] & BBT_PAGE_MASK;
c7e18288:	13c330c0 	bicne	r3, r3, #192	; 0xc0

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e1828c:	e1a02005 	mov	r2, r5
	 * should be rewritten. Otherwise the mask is set to 0xffffffff which
	 * can not be matched. This is also done when the bbt is actually
	 * erased to avoid recusrsive updates
	 */
	if (chip->options & BBT_AUTO_REFRESH && !allowbbt)
		bbt_masked_page = chip->bbt_td->pages[chipnr] & BBT_PAGE_MASK;
c7e18290:	158d301c 	strne	r3, [sp, #28]
	 * If BBT requires refresh, set the BBT page mask to see if the BBT
	 * should be rewritten. Otherwise the mask is set to 0xffffffff which
	 * can not be matched. This is also done when the bbt is actually
	 * erased to avoid recusrsive updates
	 */
	if (chip->options & BBT_AUTO_REFRESH && !allowbbt)
c7e18294:	058dc01c 	streq	ip, [sp, #28]

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e18298:	eb004931 	bl	c7e2a764 <__lshrdi3>
	 */
	if (chip->options & BBT_AUTO_REFRESH && !allowbbt)
		bbt_masked_page = chip->bbt_td->pages[chipnr] & BBT_PAGE_MASK;

	/* Loop through the pages */
	len = instr->len;
c7e1829c:	e28b5010 	add	r5, fp, #16	; 0x10
c7e182a0:	e8950030 	ldm	r5, {r4, r5}

	instr->state = MTD_ERASING;
c7e182a4:	e3a03002 	mov	r3, #2	; 0x2

	/* Grab the lock and see if the device is available */
	nand_get_device(chip, mtd, FL_ERASING);

	/* Shift to get first page */
	page = (int)(instr->addr >> chip->page_shift);
c7e182a8:	e1a09000 	mov	r9, r0
		bbt_masked_page = chip->bbt_td->pages[chipnr] & BBT_PAGE_MASK;

	/* Loop through the pages */
	len = instr->len;

	instr->state = MTD_ERASING;
c7e182ac:	e5cb3038 	strb	r3, [fp, #56]
c7e182b0:	ea00006c 	b	c7e18468 <nand_erase_nand+0x350>
	while (len) {
		WATCHDOG_RESET();
		/*
		 * heck if we have a bad block, we do not erase bad blocks !
		 */
		if (!instr->scrub && nand_block_checkbad(mtd, ((loff_t) page) <<
c7e182b4:	e59b6040 	ldr	r6, [fp, #64]
c7e182b8:	e3560000 	cmp	r6, #0	; 0x0
c7e182bc:	1a000012 	bne	c7e1830c <nand_erase_nand+0x1f4>
c7e182c0:	e5972054 	ldr	r2, [r7, #84]
c7e182c4:	e1a00009 	mov	r0, r9
c7e182c8:	e1a01fc0 	asr	r1, r0, #31
c7e182cc:	eb004932 	bl	c7e2a79c <__ashldi3>
c7e182d0:	e1a03001 	mov	r3, r1
c7e182d4:	e59d1010 	ldr	r1, [sp, #16]
c7e182d8:	e1a02000 	mov	r2, r0
c7e182dc:	e1a0000a 	mov	r0, sl
c7e182e0:	e58d6000 	str	r6, [sp]
c7e182e4:	e58d1004 	str	r1, [sp, #4]
c7e182e8:	ebfffcb6 	bl	c7e175c8 <nand_block_checkbad>
c7e182ec:	e3500000 	cmp	r0, #0	; 0x0
c7e182f0:	0a000005 	beq	c7e1830c <nand_erase_nand+0x1f4>
					chip->page_shift, 0, allowbbt)) {
			printk(KERN_WARNING "%s: attempt to erase a bad block "
c7e182f4:	e1a02009 	mov	r2, r9
c7e182f8:	e59f021c 	ldr	r0, [pc, #540]	; c7e1851c <nand_erase_nand+0x404>
c7e182fc:	e59f121c 	ldr	r1, [pc, #540]	; c7e18520 <nand_erase_nand+0x408>
c7e18300:	ebffc1d4 	bl	c7e08a58 <printf>
					"at page 0x%08x\n", __func__, page);
			instr->state = MTD_ERASE_FAILED;
c7e18304:	e3a03010 	mov	r3, #16	; 0x10
c7e18308:	ea000059 	b	c7e18474 <nand_erase_nand+0x35c>

		/*
		 * Invalidate the page cache, if we erase the block which
		 * contains the current cached page
		 */
		if (page <= chip->pagebuf && chip->pagebuf <
c7e1830c:	e5972074 	ldr	r2, [r7, #116]
c7e18310:	e1590002 	cmp	r9, r2
c7e18314:	ca000004 	bgt	c7e1832c <nand_erase_nand+0x214>
c7e18318:	e59dc014 	ldr	ip, [sp, #20]
c7e1831c:	e089300c 	add	r3, r9, ip
c7e18320:	e1520003 	cmp	r2, r3
		    (page + pages_per_block))
			chip->pagebuf = -1;
c7e18324:	b3e03000 	mvnlt	r3, #0	; 0x0
c7e18328:	b5873074 	strlt	r3, [r7, #116]

		chip->erase_cmd(mtd, page & chip->pagemask);
c7e1832c:	e5971070 	ldr	r1, [r7, #112]
c7e18330:	e1a0000a 	mov	r0, sl
c7e18334:	e0091001 	and	r1, r9, r1
c7e18338:	e1a0e00f 	mov	lr, pc
c7e1833c:	e597f03c 	ldr	pc, [r7, #60]

		status = chip->waitfunc(mtd, chip);
c7e18340:	e1a0000a 	mov	r0, sl
c7e18344:	e1a01007 	mov	r1, r7
c7e18348:	e1a0e00f 	mov	lr, pc
c7e1834c:	e597f038 	ldr	pc, [r7, #56]

		/*
		 * See if operation failed and additional status checks are
		 * available
		 */
		if ((status & NAND_STATUS_FAIL) && (chip->errstat))
c7e18350:	e3100001 	tst	r0, #1	; 0x1
c7e18354:	0a000008 	beq	c7e1837c <nand_erase_nand+0x264>
c7e18358:	e597c044 	ldr	ip, [r7, #68]
c7e1835c:	e35c0000 	cmp	ip, #0	; 0x0
c7e18360:	0a000005 	beq	c7e1837c <nand_erase_nand+0x264>
			status = chip->errstat(mtd, chip, FL_ERASING,
c7e18364:	e1a03000 	mov	r3, r0
c7e18368:	e58d9000 	str	r9, [sp]
c7e1836c:	e1a0000a 	mov	r0, sl
c7e18370:	e1a01007 	mov	r1, r7
c7e18374:	e3a02003 	mov	r2, #3	; 0x3
c7e18378:	e12fff3c 	blx	ip
					       status, page);

		/* See if block erase succeeded */
		if (status & NAND_STATUS_FAIL) {
c7e1837c:	e3100001 	tst	r0, #1	; 0x1
c7e18380:	0a000008 	beq	c7e183a8 <nand_erase_nand+0x290>
			MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Failed erase, "
					"page 0x%08x\n", __func__, page);
			instr->state = MTD_ERASE_FAILED;
c7e18384:	e3a03010 	mov	r3, #16	; 0x10
c7e18388:	e5cb3038 	strb	r3, [fp, #56]
			instr->fail_addr =
c7e1838c:	e1a00009 	mov	r0, r9
c7e18390:	e1a01fc0 	asr	r1, r0, #31
c7e18394:	e5972054 	ldr	r2, [r7, #84]
c7e18398:	eb0048ff 	bl	c7e2a79c <__ashldi3>
c7e1839c:	e58b0018 	str	r0, [fp, #24]
c7e183a0:	e58b101c 	str	r1, [fp, #28]
c7e183a4:	ea000033 	b	c7e18478 <nand_erase_nand+0x360>

		/*
		 * If BBT requires refresh, set the BBT rewrite flag to the
		 * page being erased
		 */
		if (bbt_masked_page != 0xffffffff &&
c7e183a8:	e59d001c 	ldr	r0, [sp, #28]
c7e183ac:	e3700001 	cmn	r0, #1	; 0x1
c7e183b0:	0a00000a 	beq	c7e183e0 <nand_erase_nand+0x2c8>
c7e183b4:	e3c930c0 	bic	r3, r9, #192	; 0xc0
c7e183b8:	e1530000 	cmp	r3, r0
c7e183bc:	1a000007 	bne	c7e183e0 <nand_erase_nand+0x2c8>
		    (page & BBT_PAGE_MASK) == bbt_masked_page)
			rewrite_bbt[chipnr] =
c7e183c0:	e5972054 	ldr	r2, [r7, #84]
c7e183c4:	e1a00009 	mov	r0, r9
c7e183c8:	e1a01fc0 	asr	r1, r0, #31
c7e183cc:	eb0048f2 	bl	c7e2a79c <__ashldi3>
c7e183d0:	e59dc018 	ldr	ip, [sp, #24]
c7e183d4:	e28d2030 	add	r2, sp, #48	; 0x30
c7e183d8:	e082318c 	add	r3, r2, ip, lsl #3
c7e183dc:	e9030003 	stmdb	r3, {r0, r1}
				((loff_t)page << chip->page_shift);

		/* Increment page address and decrement length */
		len -= (1 << chip->phys_erase_shift);
c7e183e0:	e5972058 	ldr	r2, [r7, #88]
c7e183e4:	e3a03001 	mov	r3, #1	; 0x1
c7e183e8:	e1a03213 	lsl	r3, r3, r2
		page += pages_per_block;
c7e183ec:	e59d1014 	ldr	r1, [sp, #20]
		    (page & BBT_PAGE_MASK) == bbt_masked_page)
			rewrite_bbt[chipnr] =
				((loff_t)page << chip->page_shift);

		/* Increment page address and decrement length */
		len -= (1 << chip->phys_erase_shift);
c7e183f0:	e0544003 	subs	r4, r4, r3
c7e183f4:	e0c55fc3 	sbc	r5, r5, r3, asr #31
		page += pages_per_block;

		/* Check, if we cross a chip boundary */
		if (len && !(page & chip->pagemask)) {
c7e183f8:	e1940005 	orrs	r0, r4, r5
			rewrite_bbt[chipnr] =
				((loff_t)page << chip->page_shift);

		/* Increment page address and decrement length */
		len -= (1 << chip->phys_erase_shift);
		page += pages_per_block;
c7e183fc:	e0899001 	add	r9, r9, r1

		/* Check, if we cross a chip boundary */
		if (len && !(page & chip->pagemask)) {
c7e18400:	0a000018 	beq	c7e18468 <nand_erase_nand+0x350>
c7e18404:	e5973070 	ldr	r3, [r7, #112]
c7e18408:	e1190003 	tst	r9, r3
c7e1840c:	1a000015 	bne	c7e18468 <nand_erase_nand+0x350>
			chipnr++;
c7e18410:	e59d2018 	ldr	r2, [sp, #24]
			chip->select_chip(mtd, -1);
c7e18414:	e1a0000a 	mov	r0, sl
		len -= (1 << chip->phys_erase_shift);
		page += pages_per_block;

		/* Check, if we cross a chip boundary */
		if (len && !(page & chip->pagemask)) {
			chipnr++;
c7e18418:	e2822001 	add	r2, r2, #1	; 0x1
c7e1841c:	e58d2018 	str	r2, [sp, #24]
			chip->select_chip(mtd, -1);
c7e18420:	e3e01000 	mvn	r1, #0	; 0x0
c7e18424:	e1a0e00f 	mov	lr, pc
c7e18428:	e597f01c 	ldr	pc, [r7, #28]
			chip->select_chip(mtd, chipnr);
c7e1842c:	e1a0000a 	mov	r0, sl
c7e18430:	e59d1018 	ldr	r1, [sp, #24]
c7e18434:	e1a0e00f 	mov	lr, pc
c7e18438:	e597f01c 	ldr	pc, [r7, #28]

			/*
			 * If BBT requires refresh and BBT-PERCHIP, set the BBT
			 * page mask to see if this BBT should be rewritten
			 */
			if (bbt_masked_page != 0xffffffff &&
c7e1843c:	e59d301c 	ldr	r3, [sp, #28]
c7e18440:	e3730001 	cmn	r3, #1	; 0x1
c7e18444:	0a000007 	beq	c7e18468 <nand_erase_nand+0x350>
c7e18448:	e5972114 	ldr	r2, [r7, #276]
c7e1844c:	e5923000 	ldr	r3, [r2]
c7e18450:	e3130080 	tst	r3, #128	; 0x80
			    (chip->bbt_td->options & NAND_BBT_PERCHIP))
				bbt_masked_page = chip->bbt_td->pages[chipnr] &
c7e18454:	159dc018 	ldrne	ip, [sp, #24]
c7e18458:	1082310c 	addne	r3, r2, ip, lsl #2
c7e1845c:	15933004 	ldrne	r3, [r3, #4]
c7e18460:	13c330c0 	bicne	r3, r3, #192	; 0xc0
c7e18464:	158d301c 	strne	r3, [sp, #28]
	/* Loop through the pages */
	len = instr->len;

	instr->state = MTD_ERASING;

	while (len) {
c7e18468:	e1940005 	orrs	r0, r4, r5
c7e1846c:	1affff90 	bne	c7e182b4 <nand_erase_nand+0x19c>
			    (chip->bbt_td->options & NAND_BBT_PERCHIP))
				bbt_masked_page = chip->bbt_td->pages[chipnr] &
					BBT_PAGE_MASK;
		}
	}
	instr->state = MTD_ERASE_DONE;
c7e18470:	e3a03008 	mov	r3, #8	; 0x8
c7e18474:	e5cb3038 	strb	r3, [fp, #56]

erase_exit:

	ret = instr->state == MTD_ERASE_DONE ? 0 : -EIO;
c7e18478:	e5db3038 	ldrb	r3, [fp, #56]

	/* Deselect and wake up anyone waiting on the device */
	nand_release_device(mtd);
c7e1847c:	e1a0000a 	mov	r0, sl
	}
	instr->state = MTD_ERASE_DONE;

erase_exit:

	ret = instr->state == MTD_ERASE_DONE ? 0 : -EIO;
c7e18480:	e3530008 	cmp	r3, #8	; 0x8
c7e18484:	03a04000 	moveq	r4, #0	; 0x0
c7e18488:	13e04004 	mvnne	r4, #4	; 0x4

	/* Deselect and wake up anyone waiting on the device */
	nand_release_device(mtd);
c7e1848c:	ebfff3ae 	bl	c7e1534c <nand_release_device>

	/* Do call back function */
	if (!ret)
c7e18490:	e3540000 	cmp	r4, #0	; 0x0
c7e18494:	1a000004 	bne	c7e184ac <nand_erase_nand+0x394>
#ifdef CONFIG_MTD_PARTITIONS
void mtd_erase_callback(struct erase_info *instr);
#else
static inline void mtd_erase_callback(struct erase_info *instr)
{
	if (instr->callback)
c7e18498:	e59b3030 	ldr	r3, [fp, #48]
c7e1849c:	e3530000 	cmp	r3, #0	; 0x0
c7e184a0:	0a000001 	beq	c7e184ac <nand_erase_nand+0x394>
		instr->callback(instr);
c7e184a4:	e1a0000b 	mov	r0, fp
c7e184a8:	e12fff33 	blx	r3

	/*
	 * If BBT requires refresh and erase was successful, rewrite any
	 * selected bad block tables
	 */
	if (bbt_masked_page == 0xffffffff || ret)
c7e184ac:	e59d101c 	ldr	r1, [sp, #28]
c7e184b0:	e3710001 	cmn	r1, #1	; 0x1
c7e184b4:	13a03000 	movne	r3, #0	; 0x0
c7e184b8:	03a03001 	moveq	r3, #1	; 0x1
c7e184bc:	e3540000 	cmp	r4, #0	; 0x0
c7e184c0:	13833001 	orrne	r3, r3, #1	; 0x1
c7e184c4:	e3530000 	cmp	r3, #0	; 0x0
c7e184c8:	01a05003 	moveq	r5, r3
c7e184cc:	028d4028 	addeq	r4, sp, #40	; 0x28
c7e184d0:	0a000006 	beq	c7e184f0 <nand_erase_nand+0x3d8>
c7e184d4:	ea00000c 	b	c7e1850c <nand_erase_nand+0x3f4>
		return ret;

	for (chipnr = 0; chipnr < chip->numchips; chipnr++) {
		if (!rewrite_bbt[chipnr])
c7e184d8:	e894000c 	ldm	r4, {r2, r3}
	 * selected bad block tables
	 */
	if (bbt_masked_page == 0xffffffff || ret)
		return ret;

	for (chipnr = 0; chipnr < chip->numchips; chipnr++) {
c7e184dc:	e2844008 	add	r4, r4, #8	; 0x8
		if (!rewrite_bbt[chipnr])
c7e184e0:	e192c003 	orrs	ip, r2, r3
c7e184e4:	0a000001 	beq	c7e184f0 <nand_erase_nand+0x3d8>
			continue;
		/* update the BBT for chip */
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: nand_update_bbt "
			"(%d:0x%0llx 0x%0x)\n", __func__, chipnr,
			rewrite_bbt[chipnr], chip->bbt_td->pages[chipnr]);
		nand_update_bbt(mtd, rewrite_bbt[chipnr]);
c7e184e8:	e1a0000a 	mov	r0, sl
c7e184ec:	ebffecbb 	bl	c7e137e0 <nand_update_bbt>
	 * selected bad block tables
	 */
	if (bbt_masked_page == 0xffffffff || ret)
		return ret;

	for (chipnr = 0; chipnr < chip->numchips; chipnr++) {
c7e184f0:	e5973064 	ldr	r3, [r7, #100]
c7e184f4:	e1550003 	cmp	r5, r3
c7e184f8:	e2855001 	add	r5, r5, #1	; 0x1
c7e184fc:	bafffff5 	blt	c7e184d8 <nand_erase_nand+0x3c0>
c7e18500:	e3a04000 	mov	r4, #0	; 0x0
c7e18504:	ea000000 	b	c7e1850c <nand_erase_nand+0x3f4>
c7e18508:	e3e04015 	mvn	r4, #21	; 0x15
		nand_update_bbt(mtd, rewrite_bbt[chipnr]);
	}

	/* Return more or less happy */
	return ret;
}
c7e1850c:	e1a00004 	mov	r0, r4
c7e18510:	e28dd030 	add	sp, sp, #48	; 0x30
c7e18514:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e18518:	c7e2b000 	.word	0xc7e2b000
c7e1851c:	c7e33c17 	.word	0xc7e33c17
c7e18520:	c7e2b060 	.word	0xc7e2b060

c7e18524 <nand_erase>:
 *
 * Erase one ore more blocks
 */
static int nand_erase(struct mtd_info *mtd, struct erase_info *instr)
{
	return nand_erase_nand(mtd, instr, 0);
c7e18524:	e3a02000 	mov	r2, #0	; 0x0
c7e18528:	eafffefa 	b	c7e18118 <nand_erase_nand>

c7e1852c <nand_wait>:
{
	unsigned long	timeo;
	int state = chip->state;
	u32 time_start;

	if (state == FL_ERASING)
c7e1852c:	e591308c 	ldr	r3, [r1, #140]
 * Wait for command done. This applies to erase and program only
 * Erase can take up to 400ms and program up to 20ms according to
 * general NAND and SmartMedia specs
 */
static int nand_wait(struct mtd_info *mtd, struct nand_chip *chip)
{
c7e18530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	unsigned long	timeo;
	int state = chip->state;
	u32 time_start;

	if (state == FL_ERASING)
c7e18534:	e3530003 	cmp	r3, #3	; 0x3
 * Wait for command done. This applies to erase and program only
 * Erase can take up to 400ms and program up to 20ms according to
 * general NAND and SmartMedia specs
 */
static int nand_wait(struct mtd_info *mtd, struct nand_chip *chip)
{
c7e18538:	e1a04001 	mov	r4, r1
c7e1853c:	e1a06000 	mov	r6, r0
	if (state == FL_ERASING)
		timeo = (CONFIG_SYS_HZ * 400) / 1000;
	else
		timeo = (CONFIG_SYS_HZ * 20) / 1000;

	if ((state == FL_ERASING) && (chip->options & NAND_IS_AND))
c7e18540:	13a05014 	movne	r5, #20	; 0x14
{
	unsigned long	timeo;
	int state = chip->state;
	u32 time_start;

	if (state == FL_ERASING)
c7e18544:	1a000007 	bne	c7e18568 <nand_wait+0x3c>
c7e18548:	ea000028 	b	c7e185f0 <nand_wait+0xc4>
		timeo = (CONFIG_SYS_HZ * 400) / 1000;
	else
		timeo = (CONFIG_SYS_HZ * 20) / 1000;

	if ((state == FL_ERASING) && (chip->options & NAND_IS_AND))
		chip->cmdfunc(mtd, NAND_CMD_STATUS_MULTI, -1, -1);
c7e1854c:	e3e02000 	mvn	r2, #0	; 0x0
c7e18550:	e3a01071 	mov	r1, #113	; 0x71
c7e18554:	e1a03002 	mov	r3, r2
c7e18558:	e1a0e00f 	mov	lr, pc
c7e1855c:	e594f034 	ldr	pc, [r4, #52]
c7e18560:	e3a05e19 	mov	r5, #400	; 0x190
c7e18564:	ea000005 	b	c7e18580 <nand_wait+0x54>
	else
		chip->cmdfunc(mtd, NAND_CMD_STATUS, -1, -1);
c7e18568:	e3e02000 	mvn	r2, #0	; 0x0
c7e1856c:	e1a00006 	mov	r0, r6
c7e18570:	e3a01070 	mov	r1, #112	; 0x70
c7e18574:	e1a03002 	mov	r3, r2
c7e18578:	e1a0e00f 	mov	lr, pc
c7e1857c:	e594f034 	ldr	pc, [r4, #52]

	time_start = get_timer(0);
c7e18580:	e3a00000 	mov	r0, #0	; 0x0
c7e18584:	ebffa11d 	bl	c7e00a00 <get_timer>
c7e18588:	e1a07000 	mov	r7, r0

	while (1) {
		if (get_timer(time_start) > timeo) {
c7e1858c:	e1a00007 	mov	r0, r7
c7e18590:	ebffa11a 	bl	c7e00a00 <get_timer>
c7e18594:	e1500005 	cmp	r0, r5
			printf("Timeout!");
			return 0x01;
		}

		if (chip->dev_ready) {
			if (chip->dev_ready(mtd))
c7e18598:	e1a00006 	mov	r0, r6
		chip->cmdfunc(mtd, NAND_CMD_STATUS, -1, -1);

	time_start = get_timer(0);

	while (1) {
		if (get_timer(time_start) > timeo) {
c7e1859c:	9a000003 	bls	c7e185b0 <nand_wait+0x84>
			printf("Timeout!");
c7e185a0:	e59f005c 	ldr	r0, [pc, #92]	; c7e18604 <nand_wait+0xd8>
c7e185a4:	ebffc12b 	bl	c7e08a58 <printf>
c7e185a8:	e3a00001 	mov	r0, #1	; 0x1
c7e185ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			return 0x01;
		}

		if (chip->dev_ready) {
c7e185b0:	e5943030 	ldr	r3, [r4, #48]
c7e185b4:	e3530000 	cmp	r3, #0	; 0x0
c7e185b8:	0a000003 	beq	c7e185cc <nand_wait+0xa0>
			if (chip->dev_ready(mtd))
c7e185bc:	e12fff33 	blx	r3
c7e185c0:	e3500000 	cmp	r0, #0	; 0x0
c7e185c4:	0afffff0 	beq	c7e1858c <nand_wait+0x60>
c7e185c8:	ea000004 	b	c7e185e0 <nand_wait+0xb4>
				break;
		} else {
			if (chip->read_byte(mtd) & NAND_STATUS_READY)
c7e185cc:	e1a00006 	mov	r0, r6
c7e185d0:	e1a0e00f 	mov	lr, pc
c7e185d4:	e594f008 	ldr	pc, [r4, #8]
c7e185d8:	e3100040 	tst	r0, #64	; 0x40
c7e185dc:	0affffea 	beq	c7e1858c <nand_wait+0x60>
	time_start = get_timer(0);
	while (get_timer(time_start) < 10)
		;
#endif /*  PPCHAMELON_NAND_TIMER_HACK */

	return (int)chip->read_byte(mtd);
c7e185e0:	e1a00006 	mov	r0, r6
c7e185e4:	e1a0e00f 	mov	lr, pc
c7e185e8:	e594f008 	ldr	pc, [r4, #8]
}
c7e185ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	if (state == FL_ERASING)
		timeo = (CONFIG_SYS_HZ * 400) / 1000;
	else
		timeo = (CONFIG_SYS_HZ * 20) / 1000;

	if ((state == FL_ERASING) && (chip->options & NAND_IS_AND))
c7e185f0:	e5913050 	ldr	r3, [r1, #80]
c7e185f4:	e3130020 	tst	r3, #32	; 0x20
c7e185f8:	03a05e19 	moveq	r5, #400	; 0x190
c7e185fc:	0affffd9 	beq	c7e18568 <nand_wait+0x3c>
c7e18600:	eaffffd1 	b	c7e1854c <nand_wait+0x20>
c7e18604:	c7e33c48 	.word	0xc7e33c48

c7e18608 <nand_wait_ready>:
/*
 * Wait for the ready pin, after a command
 * The timeout is catched later.
 */
void nand_wait_ready(struct mtd_info *mtd)
{
c7e18608:	e92d4070 	push	{r4, r5, r6, lr}
c7e1860c:	e1a04000 	mov	r4, r0
	struct nand_chip *chip = mtd->priv;
	u32 timeo = (CONFIG_SYS_HZ * 20) / 1000;
	u32 time_start;

	time_start = get_timer(0);
c7e18610:	e3a00000 	mov	r0, #0	; 0x0
 * Wait for the ready pin, after a command
 * The timeout is catched later.
 */
void nand_wait_ready(struct mtd_info *mtd)
{
	struct nand_chip *chip = mtd->priv;
c7e18614:	e5946094 	ldr	r6, [r4, #148]
	u32 timeo = (CONFIG_SYS_HZ * 20) / 1000;
	u32 time_start;

	time_start = get_timer(0);
c7e18618:	ebffa0f8 	bl	c7e00a00 <get_timer>
c7e1861c:	e1a05000 	mov	r5, r0
c7e18620:	ea000006 	b	c7e18640 <nand_wait_ready+0x38>

	/* wait until command is processed or timeout occures */
	while (get_timer(time_start) < timeo) {
		if (chip->dev_ready)
c7e18624:	e5963030 	ldr	r3, [r6, #48]
c7e18628:	e3530000 	cmp	r3, #0	; 0x0
c7e1862c:	0a000003 	beq	c7e18640 <nand_wait_ready+0x38>
			if (chip->dev_ready(mtd))
c7e18630:	e1a00004 	mov	r0, r4
c7e18634:	e12fff33 	blx	r3
c7e18638:	e3500000 	cmp	r0, #0	; 0x0
c7e1863c:	18bd8070 	popne	{r4, r5, r6, pc}
	u32 time_start;

	time_start = get_timer(0);

	/* wait until command is processed or timeout occures */
	while (get_timer(time_start) < timeo) {
c7e18640:	e1a00005 	mov	r0, r5
c7e18644:	ebffa0ed 	bl	c7e00a00 <get_timer>
c7e18648:	e3500013 	cmp	r0, #19	; 0x13
c7e1864c:	9afffff4 	bls	c7e18624 <nand_wait_ready+0x1c>
c7e18650:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e18654 <nand_do_read_ops>:
 *
 * Internal function. Called with chip held.
 */
static int nand_do_read_ops(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
c7e18654:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e18658:	e24dd050 	sub	sp, sp, #80	; 0x50
	int chipnr, page, realpage, col, bytes, aligned;
	struct nand_chip *chip = mtd->priv;
c7e1865c:	e5905094 	ldr	r5, [r0, #148]
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
	uint32_t oobreadlen = ops->ooblen;
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;
c7e18660:	e59d1070 	ldr	r1, [sp, #112]
 *
 * Internal function. Called with chip held.
 */
static int nand_do_read_ops(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
c7e18664:	e1a0a000 	mov	sl, r0
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
	uint32_t oobreadlen = ops->ooblen;
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;
c7e18668:	e591c000 	ldr	ip, [r1]
			    struct mtd_oob_ops *ops)
{
	int chipnr, page, realpage, col, bytes, aligned;
	struct nand_chip *chip = mtd->priv;
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e1866c:	e5950058 	ldr	r0, [r5, #88]
c7e18670:	e5951054 	ldr	r1, [r5, #84]
 *
 * Internal function. Called with chip held.
 */
static int nand_do_read_ops(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
c7e18674:	e1a06002 	mov	r6, r2
	int chipnr, page, realpage, col, bytes, aligned;
	struct nand_chip *chip = mtd->priv;
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e18678:	e0610000 	rsb	r0, r1, r0
c7e1867c:	e3e01000 	mvn	r1, #0	; 0x0
c7e18680:	e1e01011 	mvn	r1, r1, lsl r0
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
c7e18684:	e59d2070 	ldr	r2, [sp, #112]
 *
 * Internal function. Called with chip held.
 */
static int nand_do_read_ops(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
c7e18688:	e1a07003 	mov	r7, r3
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
	uint32_t oobreadlen = ops->ooblen;
c7e1868c:	e59d3070 	ldr	r3, [sp, #112]
	struct nand_chip *chip = mtd->priv;
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
c7e18690:	e5922004 	ldr	r2, [r2, #4]
	uint32_t oobreadlen = ops->ooblen;
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;
c7e18694:	e35c0001 	cmp	ip, #1	; 0x1
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
	uint32_t oobreadlen = ops->ooblen;
c7e18698:	e593300c 	ldr	r3, [r3, #12]
			    struct mtd_oob_ops *ops)
{
	int chipnr, page, realpage, col, bytes, aligned;
	struct nand_chip *chip = mtd->priv;
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e1869c:	e58d1020 	str	r1, [sp, #32]
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
c7e186a0:	e58d2024 	str	r2, [sp, #36]
	uint32_t oobreadlen = ops->ooblen;
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;
c7e186a4:	059a101c 	ldreq	r1, [sl, #28]
c7e186a8:	159a2018 	ldrne	r2, [sl, #24]

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;
c7e186ac:	e28dc040 	add	ip, sp, #64	; 0x40
	struct mtd_ecc_stats stats;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
	uint32_t oobreadlen = ops->ooblen;
c7e186b0:	e58d3028 	str	r3, [sp, #40]
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;
c7e186b4:	e28a3080 	add	r3, sl, #128	; 0x80
	int sndcmd = 1;
	int ret = 0;
	uint32_t readlen = ops->len;
	uint32_t oobreadlen = ops->ooblen;
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;
c7e186b8:	058d102c 	streq	r1, [sp, #44]
c7e186bc:	158d202c 	strne	r2, [sp, #44]

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;
c7e186c0:	e893000f 	ldm	r3, {r0, r1, r2, r3}
c7e186c4:	e88c000f 	stm	ip, {r0, r1, r2, r3}

	chipnr = (int)(from >> chip->chip_shift);
c7e186c8:	e1a00006 	mov	r0, r6
c7e186cc:	e5952060 	ldr	r2, [r5, #96]
c7e186d0:	e1a01007 	mov	r1, r7
c7e186d4:	eb004829 	bl	c7e2a780 <__ashrdi3>
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;
c7e186d8:	e59d2044 	ldr	r2, [sp, #68]

	chipnr = (int)(from >> chip->chip_shift);
c7e186dc:	e1a03000 	mov	r3, r0
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;
c7e186e0:	e58d2038 	str	r2, [sp, #56]
c7e186e4:	e59d2040 	ldr	r2, [sp, #64]

	chipnr = (int)(from >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);
c7e186e8:	e1a01000 	mov	r1, r0

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;

	chipnr = (int)(from >> chip->chip_shift);
c7e186ec:	e58d3010 	str	r3, [sp, #16]
	chip->select_chip(mtd, chipnr);
c7e186f0:	e1a0000a 	mov	r0, sl
	uint32_t max_oobsize = ops->mode == MTD_OOB_AUTO ?
		mtd->oobavail : mtd->oobsize;

	uint8_t *bufpoi, *oob, *buf;

	stats = mtd->ecc_stats;
c7e186f4:	e58d203c 	str	r2, [sp, #60]

	chipnr = (int)(from >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);
c7e186f8:	e1a0e00f 	mov	lr, pc
c7e186fc:	e595f01c 	ldr	pc, [r5, #28]

	realpage = (int)(from >> chip->page_shift);
c7e18700:	e5952054 	ldr	r2, [r5, #84]
c7e18704:	e1a00006 	mov	r0, r6
c7e18708:	e1a01007 	mov	r1, r7
c7e1870c:	eb00481b 	bl	c7e2a780 <__ashrdi3>
	page = realpage & chip->pagemask;

	col = (int)(from & (mtd->writesize - 1));
c7e18710:	e59a3014 	ldr	r3, [sl, #20]

	buf = ops->datbuf;
	oob = ops->oobbuf;
c7e18714:	e59d1070 	ldr	r1, [sp, #112]
	chip->select_chip(mtd, chipnr);

	realpage = (int)(from >> chip->page_shift);
	page = realpage & chip->pagemask;

	col = (int)(from & (mtd->writesize - 1));
c7e18718:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1871c:	e0033006 	and	r3, r3, r6
c7e18720:	e58d3018 	str	r3, [sp, #24]

	buf = ops->datbuf;
c7e18724:	e59d3070 	ldr	r3, [sp, #112]

	chipnr = (int)(from >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);

	realpage = (int)(from >> chip->page_shift);
	page = realpage & chip->pagemask;
c7e18728:	e5952070 	ldr	r2, [r5, #112]

	col = (int)(from & (mtd->writesize - 1));

	buf = ops->datbuf;
c7e1872c:	e5933018 	ldr	r3, [r3, #24]
	oob = ops->oobbuf;
c7e18730:	e591101c 	ldr	r1, [r1, #28]
	stats = mtd->ecc_stats;

	chipnr = (int)(from >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);

	realpage = (int)(from >> chip->page_shift);
c7e18734:	e58d0014 	str	r0, [sp, #20]
	page = realpage & chip->pagemask;
c7e18738:	e000b002 	and	fp, r0, r2

	col = (int)(from & (mtd->writesize - 1));

	buf = ops->datbuf;
c7e1873c:	e58d3034 	str	r3, [sp, #52]
	oob = ops->oobbuf;
c7e18740:	e58d1030 	str	r1, [sp, #48]
c7e18744:	e3a04001 	mov	r4, #1	; 0x1
c7e18748:	e3a09000 	mov	r9, #0	; 0x0
c7e1874c:	ea000002 	b	c7e1875c <nand_do_read_ops+0x108>
c7e18750:	e3a04001 	mov	r4, #1	; 0x1
c7e18754:	e3a02000 	mov	r2, #0	; 0x0
c7e18758:	e58d2018 	str	r2, [sp, #24]

		bytes = min(mtd->writesize - col, readlen);
		aligned = (bytes == mtd->writesize);

		/* Is the current page in the buffer ? */
		if (realpage != chip->pagebuf || oob) {
c7e1875c:	e59d1030 	ldr	r1, [sp, #48]
c7e18760:	e5953074 	ldr	r3, [r5, #116]
c7e18764:	e2511000 	subs	r1, r1, #0	; 0x0
c7e18768:	13a01001 	movne	r1, #1	; 0x1
c7e1876c:	e1a06001 	mov	r6, r1
c7e18770:	e58d100c 	str	r1, [sp, #12]
c7e18774:	e59d1014 	ldr	r1, [sp, #20]
	oob = ops->oobbuf;

	while (1) {
		WATCHDOG_RESET();

		bytes = min(mtd->writesize - col, readlen);
c7e18778:	e59a2014 	ldr	r2, [sl, #20]
		aligned = (bytes == mtd->writesize);

		/* Is the current page in the buffer ? */
		if (realpage != chip->pagebuf || oob) {
c7e1877c:	e1510003 	cmp	r1, r3
c7e18780:	13866001 	orrne	r6, r6, #1	; 0x1
	oob = ops->oobbuf;

	while (1) {
		WATCHDOG_RESET();

		bytes = min(mtd->writesize - col, readlen);
c7e18784:	e59d3018 	ldr	r3, [sp, #24]
c7e18788:	e59d1024 	ldr	r1, [sp, #36]
c7e1878c:	e0637002 	rsb	r7, r3, r2
c7e18790:	e1570001 	cmp	r7, r1
c7e18794:	21a07001 	movcs	r7, r1
		aligned = (bytes == mtd->writesize);

		/* Is the current page in the buffer ? */
		if (realpage != chip->pagebuf || oob) {
c7e18798:	e3560000 	cmp	r6, #0	; 0x0
c7e1879c:	0a000072 	beq	c7e1896c <nand_do_read_ops+0x318>

	while (1) {
		WATCHDOG_RESET();

		bytes = min(mtd->writesize - col, readlen);
		aligned = (bytes == mtd->writesize);
c7e187a0:	e1570002 	cmp	r7, r2
c7e187a4:	13a02000 	movne	r2, #0	; 0x0
c7e187a8:	03a02001 	moveq	r2, #1	; 0x1

		/* Is the current page in the buffer ? */
		if (realpage != chip->pagebuf || oob) {
			bufpoi = aligned ? buf : chip->buffers->databuf;
c7e187ac:	e3520000 	cmp	r2, #0	; 0x0
c7e187b0:	059530e8 	ldreq	r3, [r5, #232]
c7e187b4:	159d6034 	ldrne	r6, [sp, #52]
c7e187b8:	02836d12 	addeq	r6, r3, #1152	; 0x480

			if (likely(sndcmd)) {
c7e187bc:	e3540000 	cmp	r4, #0	; 0x0

	while (1) {
		WATCHDOG_RESET();

		bytes = min(mtd->writesize - col, readlen);
		aligned = (bytes == mtd->writesize);
c7e187c0:	e58d201c 	str	r2, [sp, #28]

		/* Is the current page in the buffer ? */
		if (realpage != chip->pagebuf || oob) {
			bufpoi = aligned ? buf : chip->buffers->databuf;

			if (likely(sndcmd)) {
c7e187c4:	0a000005 	beq	c7e187e0 <nand_do_read_ops+0x18c>
				chip->cmdfunc(mtd, NAND_CMD_READ0, 0x00, page);
c7e187c8:	e3a01000 	mov	r1, #0	; 0x0
c7e187cc:	e1a0000a 	mov	r0, sl
c7e187d0:	e1a02001 	mov	r2, r1
c7e187d4:	e1a0300b 	mov	r3, fp
c7e187d8:	e1a0e00f 	mov	lr, pc
c7e187dc:	e595f034 	ldr	pc, [r5, #52]
				sndcmd = 0;
			}

			/* Now read the page into the buffer */
			if (unlikely(ops->mode == MTD_OOB_RAW))
c7e187e0:	e59d2070 	ldr	r2, [sp, #112]
c7e187e4:	e5923000 	ldr	r3, [r2]
c7e187e8:	e3530002 	cmp	r3, #2	; 0x2
c7e187ec:	1a000006 	bne	c7e1880c <nand_do_read_ops+0x1b8>
				ret = chip->ecc.read_page_raw(mtd, chip,
c7e187f0:	e1a02006 	mov	r2, r6
c7e187f4:	e1a0300b 	mov	r3, fp
c7e187f8:	e1a0000a 	mov	r0, sl
c7e187fc:	e1a01005 	mov	r1, r5
c7e18800:	e1a0e00f 	mov	lr, pc
c7e18804:	e595f0cc 	ldr	pc, [r5, #204]
c7e18808:	ea000019 	b	c7e18874 <nand_do_read_ops+0x220>
							      bufpoi, page);
			else if (!aligned && NAND_SUBPAGE_READ(chip) && !oob)
c7e1880c:	e59d301c 	ldr	r3, [sp, #28]
c7e18810:	e3530000 	cmp	r3, #0	; 0x0
c7e18814:	1a000010 	bne	c7e1885c <nand_do_read_ops+0x208>
c7e18818:	e595309c 	ldr	r3, [r5, #156]
c7e1881c:	e3530001 	cmp	r3, #1	; 0x1
c7e18820:	1a00000d 	bne	c7e1885c <nand_do_read_ops+0x208>
c7e18824:	e5953054 	ldr	r3, [r5, #84]
c7e18828:	e3530009 	cmp	r3, #9	; 0x9
c7e1882c:	da00000a 	ble	c7e1885c <nand_do_read_ops+0x208>
c7e18830:	e59d100c 	ldr	r1, [sp, #12]
c7e18834:	e3510000 	cmp	r1, #0	; 0x0
c7e18838:	1a000007 	bne	c7e1885c <nand_do_read_ops+0x208>
				ret = chip->ecc.read_subpage(mtd, chip,
c7e1883c:	e58d6000 	str	r6, [sp]
c7e18840:	e1a0000a 	mov	r0, sl
c7e18844:	e1a01005 	mov	r1, r5
c7e18848:	e59d2018 	ldr	r2, [sp, #24]
c7e1884c:	e1a03007 	mov	r3, r7
c7e18850:	e1a0e00f 	mov	lr, pc
c7e18854:	e595f0d8 	ldr	pc, [r5, #216]
c7e18858:	ea000005 	b	c7e18874 <nand_do_read_ops+0x220>
							col, bytes, bufpoi);
			else
				ret = chip->ecc.read_page(mtd, chip, bufpoi,
c7e1885c:	e1a02006 	mov	r2, r6
c7e18860:	e1a0300b 	mov	r3, fp
c7e18864:	e1a0000a 	mov	r0, sl
c7e18868:	e1a01005 	mov	r1, r5
c7e1886c:	e1a0e00f 	mov	lr, pc
c7e18870:	e595f0d4 	ldr	pc, [r5, #212]
							  page);
			if (ret < 0)
c7e18874:	e3500000 	cmp	r0, #0	; 0x0
							      bufpoi, page);
			else if (!aligned && NAND_SUBPAGE_READ(chip) && !oob)
				ret = chip->ecc.read_subpage(mtd, chip,
							col, bytes, bufpoi);
			else
				ret = chip->ecc.read_page(mtd, chip, bufpoi,
c7e18878:	e1a09000 	mov	r9, r0
							  page);
			if (ret < 0)
c7e1887c:	ba000061 	blt	c7e18a08 <nand_do_read_ops+0x3b4>
				break;

			/* Transfer not aligned data */
			if (!aligned) {
c7e18880:	e59d201c 	ldr	r2, [sp, #28]
c7e18884:	e3520000 	cmp	r2, #0	; 0x0
c7e18888:	1a000014 	bne	c7e188e0 <nand_do_read_ops+0x28c>
				if (!NAND_SUBPAGE_READ(chip) && !oob &&
c7e1888c:	e595309c 	ldr	r3, [r5, #156]
c7e18890:	e3530001 	cmp	r3, #1	; 0x1
c7e18894:	1a000002 	bne	c7e188a4 <nand_do_read_ops+0x250>
c7e18898:	e5953054 	ldr	r3, [r5, #84]
c7e1889c:	e3530009 	cmp	r3, #9	; 0x9
c7e188a0:	ca000007 	bgt	c7e188c4 <nand_do_read_ops+0x270>
c7e188a4:	e59d3030 	ldr	r3, [sp, #48]
c7e188a8:	e3530000 	cmp	r3, #0	; 0x0
c7e188ac:	1a000004 	bne	c7e188c4 <nand_do_read_ops+0x270>
c7e188b0:	e59a3084 	ldr	r3, [sl, #132]
c7e188b4:	e59d1038 	ldr	r1, [sp, #56]
c7e188b8:	e1530001 	cmp	r3, r1
				    !(mtd->ecc_stats.failed - stats.failed))
					chip->pagebuf = realpage;
c7e188bc:	059d2014 	ldreq	r2, [sp, #20]
c7e188c0:	05852074 	streq	r2, [r5, #116]
				memcpy(buf, chip->buffers->databuf + col, bytes);
c7e188c4:	e59d2018 	ldr	r2, [sp, #24]
c7e188c8:	e59530e8 	ldr	r3, [r5, #232]
c7e188cc:	e2821d12 	add	r1, r2, #1152	; 0x480
c7e188d0:	e0831001 	add	r1, r3, r1
c7e188d4:	e59d0034 	ldr	r0, [sp, #52]
c7e188d8:	e1a02007 	mov	r2, r7
c7e188dc:	eb0028d6 	bl	c7e22c3c <memcpy>
			}

			buf += bytes;
c7e188e0:	e59d1034 	ldr	r1, [sp, #52]

			if (unlikely(oob)) {
c7e188e4:	e59d300c 	ldr	r3, [sp, #12]
				    !(mtd->ecc_stats.failed - stats.failed))
					chip->pagebuf = realpage;
				memcpy(buf, chip->buffers->databuf + col, bytes);
			}

			buf += bytes;
c7e188e8:	e0811007 	add	r1, r1, r7

			if (unlikely(oob)) {
c7e188ec:	e3530000 	cmp	r3, #0	; 0x0
				    !(mtd->ecc_stats.failed - stats.failed))
					chip->pagebuf = realpage;
				memcpy(buf, chip->buffers->databuf + col, bytes);
			}

			buf += bytes;
c7e188f0:	e58d1034 	str	r1, [sp, #52]

			if (unlikely(oob)) {
c7e188f4:	0a00000e 	beq	c7e18934 <nand_do_read_ops+0x2e0>

				int toread = min(oobreadlen, max_oobsize);
c7e188f8:	e59d4028 	ldr	r4, [sp, #40]
c7e188fc:	e59d202c 	ldr	r2, [sp, #44]
c7e18900:	e1540002 	cmp	r4, r2
c7e18904:	21a04002 	movcs	r4, r2

				if (toread) {
c7e18908:	e3540000 	cmp	r4, #0	; 0x0
c7e1890c:	0a000008 	beq	c7e18934 <nand_do_read_ops+0x2e0>
					oob = nand_transfer_oob(chip,
c7e18910:	e1a03004 	mov	r3, r4
c7e18914:	e59d1030 	ldr	r1, [sp, #48]
c7e18918:	e1a00005 	mov	r0, r5
c7e1891c:	e59d2070 	ldr	r2, [sp, #112]
c7e18920:	ebfffd57 	bl	c7e17e84 <nand_transfer_oob>
						oob, ops, toread);
					oobreadlen -= toread;
c7e18924:	e59d3028 	ldr	r3, [sp, #40]
			if (unlikely(oob)) {

				int toread = min(oobreadlen, max_oobsize);

				if (toread) {
					oob = nand_transfer_oob(chip,
c7e18928:	e58d0030 	str	r0, [sp, #48]
						oob, ops, toread);
					oobreadlen -= toread;
c7e1892c:	e0643003 	rsb	r3, r4, r3
c7e18930:	e58d3028 	str	r3, [sp, #40]
				}
			}

			if (!(chip->options & NAND_NO_READRDY)) {
c7e18934:	e5953050 	ldr	r3, [r5, #80]
c7e18938:	e2134c01 	ands	r4, r3, #256	; 0x100
c7e1893c:	13a04000 	movne	r4, #0	; 0x0
c7e18940:	1a000014 	bne	c7e18998 <nand_do_read_ops+0x344>
				 * this before the AUTOINCR check, so no
				 * problems arise if a chip which does auto
				 * increment is marked as NOAUTOINCR by the
				 * board driver.
				 */
				if (!chip->dev_ready)
c7e18944:	e5956030 	ldr	r6, [r5, #48]
c7e18948:	e3560000 	cmp	r6, #0	; 0x0
c7e1894c:	1a000003 	bne	c7e18960 <nand_do_read_ops+0x30c>
					udelay(chip->chip_delay);
c7e18950:	e595004c 	ldr	r0, [r5, #76]
c7e18954:	eb00295b 	bl	c7e22ec8 <udelay>
c7e18958:	e1a04006 	mov	r4, r6
c7e1895c:	ea00000d 	b	c7e18998 <nand_do_read_ops+0x344>
				else
					nand_wait_ready(mtd);
c7e18960:	e1a0000a 	mov	r0, sl
c7e18964:	ebffff27 	bl	c7e18608 <nand_wait_ready>
c7e18968:	ea00000a 	b	c7e18998 <nand_do_read_ops+0x344>
			}
		} else {
			memcpy(buf, chip->buffers->databuf + col, bytes);
c7e1896c:	e59d2018 	ldr	r2, [sp, #24]
c7e18970:	e59530e8 	ldr	r3, [r5, #232]
c7e18974:	e2821d12 	add	r1, r2, #1152	; 0x480
c7e18978:	e0831001 	add	r1, r3, r1
c7e1897c:	e59d0034 	ldr	r0, [sp, #52]
c7e18980:	e1a02007 	mov	r2, r7
c7e18984:	eb0028ac 	bl	c7e22c3c <memcpy>
			buf += bytes;
c7e18988:	e59d3034 	ldr	r3, [sp, #52]
c7e1898c:	e58d6030 	str	r6, [sp, #48]
c7e18990:	e0833007 	add	r3, r3, r7
c7e18994:	e58d3034 	str	r3, [sp, #52]
		}

		readlen -= bytes;

		if (!readlen)
c7e18998:	e59d1024 	ldr	r1, [sp, #36]
c7e1899c:	e0511007 	subs	r1, r1, r7
c7e189a0:	e58d1024 	str	r1, [sp, #36]
c7e189a4:	0a000017 	beq	c7e18a08 <nand_do_read_ops+0x3b4>
			break;

		/* For subsequent reads align to page boundary. */
		col = 0;
		/* Increment page address */
		realpage++;
c7e189a8:	e59d2014 	ldr	r2, [sp, #20]

		page = realpage & chip->pagemask;
c7e189ac:	e5953070 	ldr	r3, [r5, #112]
			break;

		/* For subsequent reads align to page boundary. */
		col = 0;
		/* Increment page address */
		realpage++;
c7e189b0:	e2822001 	add	r2, r2, #1	; 0x1

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
c7e189b4:	e012b003 	ands	fp, r2, r3
			break;

		/* For subsequent reads align to page boundary. */
		col = 0;
		/* Increment page address */
		realpage++;
c7e189b8:	e58d2014 	str	r2, [sp, #20]

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
c7e189bc:	1a00000a 	bne	c7e189ec <nand_do_read_ops+0x398>
			chipnr++;
c7e189c0:	e59d3010 	ldr	r3, [sp, #16]
			chip->select_chip(mtd, -1);
c7e189c4:	e1a0000a 	mov	r0, sl
		realpage++;

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
			chipnr++;
c7e189c8:	e2833001 	add	r3, r3, #1	; 0x1
			chip->select_chip(mtd, -1);
c7e189cc:	e3e01000 	mvn	r1, #0	; 0x0
		realpage++;

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
			chipnr++;
c7e189d0:	e58d3010 	str	r3, [sp, #16]
			chip->select_chip(mtd, -1);
c7e189d4:	e1a0e00f 	mov	lr, pc
c7e189d8:	e595f01c 	ldr	pc, [r5, #28]
			chip->select_chip(mtd, chipnr);
c7e189dc:	e1a0000a 	mov	r0, sl
c7e189e0:	e59d1010 	ldr	r1, [sp, #16]
c7e189e4:	e1a0e00f 	mov	lr, pc
c7e189e8:	e595f01c 	ldr	pc, [r5, #28]
		}

		/* Check, if the chip supports auto page increment
		 * or if we have hit a block boundary.
		 */
		if (!NAND_CANAUTOINCR(chip) || !(page & blkcheck))
c7e189ec:	e5953050 	ldr	r3, [r5, #80]
c7e189f0:	e3130001 	tst	r3, #1	; 0x1
c7e189f4:	1affff55 	bne	c7e18750 <nand_do_read_ops+0xfc>
c7e189f8:	e59d1020 	ldr	r1, [sp, #32]
c7e189fc:	e11b0001 	tst	fp, r1
c7e18a00:	0affff52 	beq	c7e18750 <nand_do_read_ops+0xfc>
c7e18a04:	eaffff52 	b	c7e18754 <nand_do_read_ops+0x100>
			sndcmd = 1;
	}

	ops->retlen = ops->len - (size_t) readlen;
c7e18a08:	e59d2070 	ldr	r2, [sp, #112]
	if (oob)
c7e18a0c:	e59d1030 	ldr	r1, [sp, #48]
		 */
		if (!NAND_CANAUTOINCR(chip) || !(page & blkcheck))
			sndcmd = 1;
	}

	ops->retlen = ops->len - (size_t) readlen;
c7e18a10:	e5923004 	ldr	r3, [r2, #4]
c7e18a14:	e59d2024 	ldr	r2, [sp, #36]
	if (oob)
c7e18a18:	e3510000 	cmp	r1, #0	; 0x0
		 */
		if (!NAND_CANAUTOINCR(chip) || !(page & blkcheck))
			sndcmd = 1;
	}

	ops->retlen = ops->len - (size_t) readlen;
c7e18a1c:	e59d1070 	ldr	r1, [sp, #112]
c7e18a20:	e0623003 	rsb	r3, r2, r3
c7e18a24:	e5813008 	str	r3, [r1, #8]
	if (oob)
		ops->oobretlen = ops->ooblen - oobreadlen;
c7e18a28:	159d2028 	ldrne	r2, [sp, #40]
c7e18a2c:	1591300c 	ldrne	r3, [r1, #12]
c7e18a30:	10623003 	rsbne	r3, r2, r3
c7e18a34:	15813010 	strne	r3, [r1, #16]

	if (ret)
c7e18a38:	e3590000 	cmp	r9, #0	; 0x0
c7e18a3c:	1a000009 	bne	c7e18a68 <nand_do_read_ops+0x414>
		return ret;

	if (mtd->ecc_stats.failed - stats.failed)
c7e18a40:	e59a3084 	ldr	r3, [sl, #132]
c7e18a44:	e59d1038 	ldr	r1, [sp, #56]
c7e18a48:	e1530001 	cmp	r3, r1
c7e18a4c:	13e09049 	mvnne	r9, #73	; 0x49
c7e18a50:	1a000004 	bne	c7e18a68 <nand_do_read_ops+0x414>
		return -EBADMSG;

	return  mtd->ecc_stats.corrected - stats.corrected ? -EUCLEAN : 0;
c7e18a54:	e59a3080 	ldr	r3, [sl, #128]
c7e18a58:	e59d203c 	ldr	r2, [sp, #60]
c7e18a5c:	e1530002 	cmp	r3, r2
c7e18a60:	03a09000 	moveq	r9, #0	; 0x0
c7e18a64:	13e09074 	mvnne	r9, #116	; 0x74
}
c7e18a68:	e1a00009 	mov	r0, r9
c7e18a6c:	e28dd050 	add	sp, sp, #80	; 0x50
c7e18a70:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e18a74 <nand_read_oob>:
 *
 * NAND read data and/or out-of-band data
 */
static int nand_read_oob(struct mtd_info *mtd, loff_t from,
			 struct mtd_oob_ops *ops)
{
c7e18a74:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e18a78:	e24dd020 	sub	sp, sp, #32	; 0x20
c7e18a7c:	e1a09000 	mov	r9, r0
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow reads past end of device */
	if (ops->datbuf && (from + ops->len) > mtd->size) {
c7e18a80:	e59d0040 	ldr	r0, [sp, #64]
 *
 * NAND read data and/or out-of-band data
 */
static int nand_read_oob(struct mtd_info *mtd, loff_t from,
			 struct mtd_oob_ops *ops)
{
c7e18a84:	e1a0a002 	mov	sl, r2
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow reads past end of device */
	if (ops->datbuf && (from + ops->len) > mtd->size) {
c7e18a88:	e5901018 	ldr	r1, [r0, #24]
 *
 * NAND read data and/or out-of-band data
 */
static int nand_read_oob(struct mtd_info *mtd, loff_t from,
			 struct mtd_oob_ops *ops)
{
c7e18a8c:	e1a0b003 	mov	fp, r3
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow reads past end of device */
	if (ops->datbuf && (from + ops->len) > mtd->size) {
c7e18a90:	e3510000 	cmp	r1, #0	; 0x0
			 struct mtd_oob_ops *ops)
{
	struct nand_chip *chip = mtd->priv;
	int ret = -ENOTSUPP;

	ops->retlen = 0;
c7e18a94:	e3a01000 	mov	r1, #0	; 0x0
c7e18a98:	e5801008 	str	r1, [r0, #8]
 * NAND read data and/or out-of-band data
 */
static int nand_read_oob(struct mtd_info *mtd, loff_t from,
			 struct mtd_oob_ops *ops)
{
	struct nand_chip *chip = mtd->priv;
c7e18a9c:	e5990094 	ldr	r0, [r9, #148]
	int ret = -ENOTSUPP;

	ops->retlen = 0;

	/* Do not allow reads past end of device */
	if (ops->datbuf && (from + ops->len) > mtd->size) {
c7e18aa0:	0a00000c 	beq	c7e18ad8 <nand_read_oob+0x64>
c7e18aa4:	e59d1040 	ldr	r1, [sp, #64]
c7e18aa8:	e599200c 	ldr	r2, [r9, #12]
c7e18aac:	e5913004 	ldr	r3, [r1, #4]
c7e18ab0:	e09a4003 	adds	r4, sl, r3
c7e18ab4:	e2ab5000 	adc	r5, fp, #0	; 0x0
c7e18ab8:	e1520005 	cmp	r2, r5
c7e18abc:	3a000003 	bcc	c7e18ad0 <nand_read_oob+0x5c>
c7e18ac0:	1a000004 	bne	c7e18ad8 <nand_read_oob+0x64>
c7e18ac4:	e5993008 	ldr	r3, [r9, #8]
c7e18ac8:	e1530004 	cmp	r3, r4
c7e18acc:	2a000001 	bcs	c7e18ad8 <nand_read_oob+0x64>
c7e18ad0:	e3e04015 	mvn	r4, #21	; 0x15
c7e18ad4:	ea000099 	b	c7e18d40 <nand_read_oob+0x2cc>
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Attempt read "
				"beyond end of device\n", __func__);
		return -EINVAL;
	}

	nand_get_device(chip, mtd, FL_READING);
c7e18ad8:	e3a02001 	mov	r2, #1	; 0x1
c7e18adc:	e1a01009 	mov	r1, r9
c7e18ae0:	ebfff29a 	bl	c7e15550 <nand_get_device>

	switch (ops->mode) {
c7e18ae4:	e59d3040 	ldr	r3, [sp, #64]
c7e18ae8:	e5932000 	ldr	r2, [r3]
c7e18aec:	e3520002 	cmp	r2, #2	; 0x2
c7e18af0:	859f4254 	ldrhi	r4, [pc, #596]	; c7e18d4c <nand_read_oob+0x2d8>
c7e18af4:	8a00008f 	bhi	c7e18d38 <nand_read_oob+0x2c4>

	default:
		goto out;
	}

	if (!ops->datbuf)
c7e18af8:	e59dc040 	ldr	ip, [sp, #64]
c7e18afc:	e59c3018 	ldr	r3, [ip, #24]
c7e18b00:	e3530000 	cmp	r3, #0	; 0x0
c7e18b04:	1a000084 	bne	c7e18d1c <nand_read_oob+0x2a8>
 */
static int nand_do_read_oob(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
c7e18b08:	e5997094 	ldr	r7, [r9, #148]
	uint8_t *buf = ops->oobbuf;

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: from = 0x%08Lx, len = %i\n",
			__func__, (unsigned long long)from, readlen);

	if (ops->mode == MTD_OOB_AUTO)
c7e18b0c:	e3520001 	cmp	r2, #1	; 0x1
static int nand_do_read_oob(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e18b10:	e5976054 	ldr	r6, [r7, #84]
c7e18b14:	e5973058 	ldr	r3, [r7, #88]
c7e18b18:	e3e02000 	mvn	r2, #0	; 0x0
c7e18b1c:	e0663003 	rsb	r3, r6, r3
c7e18b20:	e1e02312 	mvn	r2, r2, lsl r3

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: from = 0x%08Lx, len = %i\n",
			__func__, (unsigned long long)from, readlen);

	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
c7e18b24:	059730b8 	ldreq	r3, [r7, #184]
static int nand_do_read_oob(struct mtd_info *mtd, loff_t from,
			    struct mtd_oob_ops *ops)
{
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
c7e18b28:	e58d2018 	str	r2, [sp, #24]

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: from = 0x%08Lx, len = %i\n",
			__func__, (unsigned long long)from, readlen);

	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
c7e18b2c:	05933204 	ldreq	r3, [r3, #516]
	else
		len = mtd->oobsize;
c7e18b30:	15992018 	ldrne	r2, [r9, #24]
			    struct mtd_oob_ops *ops)
{
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int readlen = ops->ooblen;
c7e18b34:	e59c000c 	ldr	r0, [ip, #12]
	int len;
	uint8_t *buf = ops->oobbuf;
c7e18b38:	e59c101c 	ldr	r1, [ip, #28]
	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
	else
		len = mtd->oobsize;

	if (unlikely(ops->ooboffs >= len)) {
c7e18b3c:	e59dc040 	ldr	ip, [sp, #64]

	MTDDEBUG(MTD_DEBUG_LEVEL3, "%s: from = 0x%08Lx, len = %i\n",
			__func__, (unsigned long long)from, readlen);

	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
c7e18b40:	058d3014 	streq	r3, [sp, #20]
	else
		len = mtd->oobsize;
c7e18b44:	158d2014 	strne	r2, [sp, #20]
			    struct mtd_oob_ops *ops)
{
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int readlen = ops->ooblen;
c7e18b48:	e58d001c 	str	r0, [sp, #28]
	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
	else
		len = mtd->oobsize;

	if (unlikely(ops->ooboffs >= len)) {
c7e18b4c:	e59c3014 	ldr	r3, [ip, #20]
c7e18b50:	e59d0014 	ldr	r0, [sp, #20]
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int readlen = ops->ooblen;
	int len;
	uint8_t *buf = ops->oobbuf;
c7e18b54:	e58d1010 	str	r1, [sp, #16]
	if (ops->mode == MTD_OOB_AUTO)
		len = chip->ecc.layout->oobavail;
	else
		len = mtd->oobsize;

	if (unlikely(ops->ooboffs >= len)) {
c7e18b58:	e1530000 	cmp	r3, r0
c7e18b5c:	2a00006c 	bcs	c7e18d14 <nand_read_oob+0x2a0>
					"outside oob\n", __func__);
		return -EINVAL;
	}

	/* Do not allow reads past end of device */
	if (unlikely(from >= mtd->size ||
c7e18b60:	e2891008 	add	r1, r9, #8	; 0x8
c7e18b64:	e8910003 	ldm	r1, {r0, r1}
c7e18b68:	e151000b 	cmp	r1, fp
c7e18b6c:	8a000002 	bhi	c7e18b7c <nand_read_oob+0x108>
c7e18b70:	1a000067 	bne	c7e18d14 <nand_read_oob+0x2a0>
c7e18b74:	e150000a 	cmp	r0, sl
c7e18b78:	9a000065 	bls	c7e18d14 <nand_read_oob+0x2a0>
c7e18b7c:	e59dc01c 	ldr	ip, [sp, #28]
c7e18b80:	e1a02006 	mov	r2, r6
c7e18b84:	e083300c 	add	r3, r3, ip
c7e18b88:	e58d300c 	str	r3, [sp, #12]
c7e18b8c:	eb0046f4 	bl	c7e2a764 <__lshrdi3>
c7e18b90:	e1a02006 	mov	r2, r6
c7e18b94:	e1a04000 	mov	r4, r0
c7e18b98:	e1a05001 	mov	r5, r1
c7e18b9c:	e1a0000a 	mov	r0, sl
c7e18ba0:	e1a0100b 	mov	r1, fp
c7e18ba4:	eb0046f5 	bl	c7e2a780 <__ashrdi3>
c7e18ba8:	e1a02001 	mov	r2, r1
c7e18bac:	e1a01000 	mov	r1, r0
c7e18bb0:	e59d0014 	ldr	r0, [sp, #20]
c7e18bb4:	e0541001 	subs	r1, r4, r1
c7e18bb8:	e0c52002 	sbc	r2, r5, r2
c7e18bbc:	e1a03000 	mov	r3, r0
c7e18bc0:	e1a04fc3 	asr	r4, r3, #31
c7e18bc4:	e0000293 	mul	r0, r3, r2
c7e18bc8:	e0865193 	umull	r5, r6, r3, r1
c7e18bcc:	e0230491 	mla	r3, r1, r4, r0
c7e18bd0:	e0836006 	add	r6, r3, r6
c7e18bd4:	e3560000 	cmp	r6, #0	; 0x0
c7e18bd8:	1a000002 	bne	c7e18be8 <nand_read_oob+0x174>
c7e18bdc:	e59d100c 	ldr	r1, [sp, #12]
c7e18be0:	e1510005 	cmp	r1, r5
c7e18be4:	8a00004a 	bhi	c7e18d14 <nand_read_oob+0x2a0>
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Attempt read beyond end "
					"of device\n", __func__);
		return -EINVAL;
	}

	chipnr = (int)(from >> chip->chip_shift);
c7e18be8:	e5972060 	ldr	r2, [r7, #96]
c7e18bec:	e1a0000a 	mov	r0, sl
c7e18bf0:	e1a0100b 	mov	r1, fp
c7e18bf4:	eb0046e1 	bl	c7e2a780 <__ashrdi3>
c7e18bf8:	e1a03000 	mov	r3, r0
	chip->select_chip(mtd, chipnr);
c7e18bfc:	e1a01000 	mov	r1, r0
c7e18c00:	e1a00009 	mov	r0, r9
		MTDDEBUG(MTD_DEBUG_LEVEL0, "%s: Attempt read beyond end "
					"of device\n", __func__);
		return -EINVAL;
	}

	chipnr = (int)(from >> chip->chip_shift);
c7e18c04:	e1a04003 	mov	r4, r3
	chip->select_chip(mtd, chipnr);
c7e18c08:	e1a0e00f 	mov	lr, pc
c7e18c0c:	e597f01c 	ldr	pc, [r7, #28]

	/* Shift to get page */
	realpage = (int)(from >> chip->page_shift);
c7e18c10:	e1a0000a 	mov	r0, sl
c7e18c14:	e1a0100b 	mov	r1, fp
c7e18c18:	e5972054 	ldr	r2, [r7, #84]
c7e18c1c:	eb0046d7 	bl	c7e2a780 <__ashrdi3>
	page = realpage & chip->pagemask;
c7e18c20:	e5973070 	ldr	r3, [r7, #112]
			    struct mtd_oob_ops *ops)
{
	int page, realpage, chipnr, sndcmd = 1;
	struct nand_chip *chip = mtd->priv;
	int blkcheck = (1 << (chip->phys_erase_shift - chip->page_shift)) - 1;
	int readlen = ops->ooblen;
c7e18c24:	e59da01c 	ldr	sl, [sp, #28]

	chipnr = (int)(from >> chip->chip_shift);
	chip->select_chip(mtd, chipnr);

	/* Shift to get page */
	realpage = (int)(from >> chip->page_shift);
c7e18c28:	e1a06000 	mov	r6, r0
	page = realpage & chip->pagemask;
c7e18c2c:	e0005003 	and	r5, r0, r3
c7e18c30:	e3a0b001 	mov	fp, #1	; 0x1

	while (1) {
		WATCHDOG_RESET();
		sndcmd = chip->ecc.read_oob(mtd, chip, page, sndcmd);

		len = min(len, readlen);
c7e18c34:	e59d2014 	ldr	r2, [sp, #20]
	realpage = (int)(from >> chip->page_shift);
	page = realpage & chip->pagemask;

	while (1) {
		WATCHDOG_RESET();
		sndcmd = chip->ecc.read_oob(mtd, chip, page, sndcmd);
c7e18c38:	e1a0300b 	mov	r3, fp

		len = min(len, readlen);
c7e18c3c:	e152000a 	cmp	r2, sl
c7e18c40:	a1a0200a 	movge	r2, sl
c7e18c44:	e58d2014 	str	r2, [sp, #20]
	realpage = (int)(from >> chip->page_shift);
	page = realpage & chip->pagemask;

	while (1) {
		WATCHDOG_RESET();
		sndcmd = chip->ecc.read_oob(mtd, chip, page, sndcmd);
c7e18c48:	e1a01007 	mov	r1, r7
c7e18c4c:	e1a02005 	mov	r2, r5
c7e18c50:	e1a00009 	mov	r0, r9
c7e18c54:	e1a0e00f 	mov	lr, pc
c7e18c58:	e597f0e0 	ldr	pc, [r7, #224]

		len = min(len, readlen);
		buf = nand_transfer_oob(chip, buf, ops, len);
c7e18c5c:	e59d3014 	ldr	r3, [sp, #20]
	realpage = (int)(from >> chip->page_shift);
	page = realpage & chip->pagemask;

	while (1) {
		WATCHDOG_RESET();
		sndcmd = chip->ecc.read_oob(mtd, chip, page, sndcmd);
c7e18c60:	e1a0b000 	mov	fp, r0

		len = min(len, readlen);
		buf = nand_transfer_oob(chip, buf, ops, len);
c7e18c64:	e59d1010 	ldr	r1, [sp, #16]
c7e18c68:	e1a00007 	mov	r0, r7
c7e18c6c:	e59d2040 	ldr	r2, [sp, #64]
c7e18c70:	ebfffc83 	bl	c7e17e84 <nand_transfer_oob>

		if (!(chip->options & NAND_NO_READRDY)) {
c7e18c74:	e5973050 	ldr	r3, [r7, #80]
	while (1) {
		WATCHDOG_RESET();
		sndcmd = chip->ecc.read_oob(mtd, chip, page, sndcmd);

		len = min(len, readlen);
		buf = nand_transfer_oob(chip, buf, ops, len);
c7e18c78:	e58d0010 	str	r0, [sp, #16]

		if (!(chip->options & NAND_NO_READRDY)) {
c7e18c7c:	e3130c01 	tst	r3, #256	; 0x100
c7e18c80:	1a000007 	bne	c7e18ca4 <nand_read_oob+0x230>
			 * Apply delay or wait for ready/busy pin. Do this
			 * before the AUTOINCR check, so no problems arise if a
			 * chip which does auto increment is marked as
			 * NOAUTOINCR by the board driver.
			 */
			if (!chip->dev_ready)
c7e18c84:	e5973030 	ldr	r3, [r7, #48]
c7e18c88:	e3530000 	cmp	r3, #0	; 0x0
c7e18c8c:	1a000002 	bne	c7e18c9c <nand_read_oob+0x228>
				udelay(chip->chip_delay);
c7e18c90:	e597004c 	ldr	r0, [r7, #76]
c7e18c94:	eb00288b 	bl	c7e22ec8 <udelay>
c7e18c98:	ea000001 	b	c7e18ca4 <nand_read_oob+0x230>
			else
				nand_wait_ready(mtd);
c7e18c9c:	e1a00009 	mov	r0, r9
c7e18ca0:	ebfffe58 	bl	c7e18608 <nand_wait_ready>
		}

		readlen -= len;
		if (!readlen)
c7e18ca4:	e59d3014 	ldr	r3, [sp, #20]
c7e18ca8:	e05aa003 	subs	sl, sl, r3
c7e18cac:	0a000013 	beq	c7e18d00 <nand_read_oob+0x28c>
			break;

		/* Increment page address */
		realpage++;

		page = realpage & chip->pagemask;
c7e18cb0:	e5973070 	ldr	r3, [r7, #112]
		readlen -= len;
		if (!readlen)
			break;

		/* Increment page address */
		realpage++;
c7e18cb4:	e2866001 	add	r6, r6, #1	; 0x1

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
c7e18cb8:	e0165003 	ands	r5, r6, r3
c7e18cbc:	1a000008 	bne	c7e18ce4 <nand_read_oob+0x270>
			chipnr++;
			chip->select_chip(mtd, -1);
c7e18cc0:	e1a00009 	mov	r0, r9
c7e18cc4:	e3e01000 	mvn	r1, #0	; 0x0
		realpage++;

		page = realpage & chip->pagemask;
		/* Check, if we cross a chip boundary */
		if (!page) {
			chipnr++;
c7e18cc8:	e2844001 	add	r4, r4, #1	; 0x1
			chip->select_chip(mtd, -1);
c7e18ccc:	e1a0e00f 	mov	lr, pc
c7e18cd0:	e597f01c 	ldr	pc, [r7, #28]
			chip->select_chip(mtd, chipnr);
c7e18cd4:	e1a00009 	mov	r0, r9
c7e18cd8:	e1a01004 	mov	r1, r4
c7e18cdc:	e1a0e00f 	mov	lr, pc
c7e18ce0:	e597f01c 	ldr	pc, [r7, #28]
		}

		/* Check, if the chip supports auto page increment
		 * or if we have hit a block boundary.
		 */
		if (!NAND_CANAUTOINCR(chip) || !(page & blkcheck))
c7e18ce4:	e5973050 	ldr	r3, [r7, #80]
c7e18ce8:	e3130001 	tst	r3, #1	; 0x1
c7e18cec:	1affffcf 	bne	c7e18c30 <nand_read_oob+0x1bc>
c7e18cf0:	e59dc018 	ldr	ip, [sp, #24]
c7e18cf4:	e115000c 	tst	r5, ip
c7e18cf8:	0affffcc 	beq	c7e18c30 <nand_read_oob+0x1bc>
c7e18cfc:	eaffffcc 	b	c7e18c34 <nand_read_oob+0x1c0>
			sndcmd = 1;
	}

	ops->oobretlen = ops->ooblen;
c7e18d00:	e59d0040 	ldr	r0, [sp, #64]
c7e18d04:	e1a0400a 	mov	r4, sl
c7e18d08:	e590300c 	ldr	r3, [r0, #12]
c7e18d0c:	e5803010 	str	r3, [r0, #16]
c7e18d10:	ea000008 	b	c7e18d38 <nand_read_oob+0x2c4>
c7e18d14:	e3e04015 	mvn	r4, #21	; 0x15
c7e18d18:	ea000006 	b	c7e18d38 <nand_read_oob+0x2c4>
	}

	if (!ops->datbuf)
		ret = nand_do_read_oob(mtd, from, ops);
	else
		ret = nand_do_read_ops(mtd, from, ops);
c7e18d1c:	e59d1040 	ldr	r1, [sp, #64]
c7e18d20:	e1a0200a 	mov	r2, sl
c7e18d24:	e1a0300b 	mov	r3, fp
c7e18d28:	e1a00009 	mov	r0, r9
c7e18d2c:	e58d1000 	str	r1, [sp]
c7e18d30:	ebfffe47 	bl	c7e18654 <nand_do_read_ops>
c7e18d34:	e1a04000 	mov	r4, r0

out:
	nand_release_device(mtd);
c7e18d38:	e1a00009 	mov	r0, r9
c7e18d3c:	ebfff182 	bl	c7e1534c <nand_release_device>
	return ret;
}
c7e18d40:	e1a00004 	mov	r0, r4
c7e18d44:	e28dd020 	add	sp, sp, #32	; 0x20
c7e18d48:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e18d4c:	fffffdf4 	.word	0xfffffdf4

c7e18d50 <nand_read>:
 *
 * Get hold of the chip and call nand_do_read
 */
static int nand_read(struct mtd_info *mtd, loff_t from, size_t len,
		     size_t *retlen, uint8_t *buf)
{
c7e18d50:	e92d4c73 	push	{r0, r1, r4, r5, r6, sl, fp, lr}
c7e18d54:	e59d4020 	ldr	r4, [sp, #32]
c7e18d58:	e1a0b003 	mov	fp, r3
	struct nand_chip *chip = mtd->priv;
	int ret;

	/* Do not allow reads past end of device */
	if ((from + len) > mtd->size)
c7e18d5c:	e0921004 	adds	r1, r2, r4
c7e18d60:	e590300c 	ldr	r3, [r0, #12]
 *
 * Get hold of the chip and call nand_do_read
 */
static int nand_read(struct mtd_info *mtd, loff_t from, size_t len,
		     size_t *retlen, uint8_t *buf)
{
c7e18d64:	e1a0a002 	mov	sl, r2
	struct nand_chip *chip = mtd->priv;
	int ret;

	/* Do not allow reads past end of device */
	if ((from + len) > mtd->size)
c7e18d68:	e2ab2000 	adc	r2, fp, #0	; 0x0
c7e18d6c:	e1530002 	cmp	r3, r2
 *
 * Get hold of the chip and call nand_do_read
 */
static int nand_read(struct mtd_info *mtd, loff_t from, size_t len,
		     size_t *retlen, uint8_t *buf)
{
c7e18d70:	e1a06000 	mov	r6, r0
	struct nand_chip *chip = mtd->priv;
c7e18d74:	e5905094 	ldr	r5, [r0, #148]
	int ret;

	/* Do not allow reads past end of device */
	if ((from + len) > mtd->size)
c7e18d78:	3a000003 	bcc	c7e18d8c <nand_read+0x3c>
c7e18d7c:	1a000004 	bne	c7e18d94 <nand_read+0x44>
c7e18d80:	e5903008 	ldr	r3, [r0, #8]
c7e18d84:	e1530001 	cmp	r3, r1
c7e18d88:	2a000001 	bcs	c7e18d94 <nand_read+0x44>
c7e18d8c:	e3e04015 	mvn	r4, #21	; 0x15
c7e18d90:	ea000016 	b	c7e18df0 <nand_read+0xa0>
		return -EINVAL;
	if (!len)
c7e18d94:	e3540000 	cmp	r4, #0	; 0x0
c7e18d98:	0a000014 	beq	c7e18df0 <nand_read+0xa0>
		return 0;

	nand_get_device(chip, mtd, FL_READING);
c7e18d9c:	e1a01006 	mov	r1, r6
c7e18da0:	e3a02001 	mov	r2, #1	; 0x1
c7e18da4:	e1a00005 	mov	r0, r5
c7e18da8:	ebfff1e8 	bl	c7e15550 <nand_get_device>

	chip->ops.len = len;
	chip->ops.datbuf = buf;
c7e18dac:	e59d3028 	ldr	r3, [sp, #40]
	if (!len)
		return 0;

	nand_get_device(chip, mtd, FL_READING);

	chip->ops.len = len;
c7e18db0:	e58540f4 	str	r4, [r5, #244]
	chip->ops.datbuf = buf;
c7e18db4:	e5853108 	str	r3, [r5, #264]
	chip->ops.oobbuf = NULL;
c7e18db8:	e3a03000 	mov	r3, #0	; 0x0
c7e18dbc:	e585310c 	str	r3, [r5, #268]

	ret = nand_do_read_ops(mtd, from, &chip->ops);
c7e18dc0:	e1a0200a 	mov	r2, sl
c7e18dc4:	e1a0300b 	mov	r3, fp
c7e18dc8:	e28510f0 	add	r1, r5, #240	; 0xf0
c7e18dcc:	e1a00006 	mov	r0, r6
c7e18dd0:	e58d1000 	str	r1, [sp]
c7e18dd4:	ebfffe1e 	bl	c7e18654 <nand_do_read_ops>

	*retlen = chip->ops.retlen;
c7e18dd8:	e59520f8 	ldr	r2, [r5, #248]
c7e18ddc:	e59d3024 	ldr	r3, [sp, #36]

	chip->ops.len = len;
	chip->ops.datbuf = buf;
	chip->ops.oobbuf = NULL;

	ret = nand_do_read_ops(mtd, from, &chip->ops);
c7e18de0:	e1a04000 	mov	r4, r0

	*retlen = chip->ops.retlen;
c7e18de4:	e5832000 	str	r2, [r3]

	nand_release_device(mtd);
c7e18de8:	e1a00006 	mov	r0, r6
c7e18dec:	ebfff156 	bl	c7e1534c <nand_release_device>

	return ret;
}
c7e18df0:	e1a00004 	mov	r0, r4
c7e18df4:	e8bd8c7c 	pop	{r2, r3, r4, r5, r6, sl, fp, pc}

c7e18df8 <nand_command>:
	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;

	/*
	 * Write out the command to the device.
	 */
	if (command == NAND_CMD_SEQIN) {
c7e18df8:	e3510080 	cmp	r1, #128	; 0x80
 * Send command to NAND device. This function is used for small page
 * devices (256/512 Bytes per page)
 */
static void nand_command(struct mtd_info *mtd, unsigned int command,
			 int column, int page_addr)
{
c7e18dfc:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e18e00:	e1a04002 	mov	r4, r2
c7e18e04:	e1a07001 	mov	r7, r1
c7e18e08:	e1a06000 	mov	r6, r0
c7e18e0c:	e1a0a003 	mov	sl, r3
	register struct nand_chip *chip = mtd->priv;
c7e18e10:	e5905094 	ldr	r5, [r0, #148]
	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;

	/*
	 * Write out the command to the device.
	 */
	if (command == NAND_CMD_SEQIN) {
c7e18e14:	13a02083 	movne	r2, #131	; 0x83
c7e18e18:	1a00000d 	bne	c7e18e54 <nand_command+0x5c>
		int readcmd;

		if (column >= mtd->writesize) {
c7e18e1c:	e5903014 	ldr	r3, [r0, #20]
c7e18e20:	e1540003 	cmp	r4, r3
			/* OOB area */
			column -= mtd->writesize;
c7e18e24:	20634004 	rsbcs	r4, r3, r4
c7e18e28:	23a01050 	movcs	r1, #80	; 0x50
	 * Write out the command to the device.
	 */
	if (command == NAND_CMD_SEQIN) {
		int readcmd;

		if (column >= mtd->writesize) {
c7e18e2c:	2a000003 	bcs	c7e18e40 <nand_command+0x48>
			/* OOB area */
			column -= mtd->writesize;
			readcmd = NAND_CMD_READOOB;
		} else if (column < 256) {
c7e18e30:	e35400ff 	cmp	r4, #255	; 0xff
c7e18e34:	d3a01000 	movle	r1, #0	; 0x0
			/* First 256 bytes --> READ0 */
			readcmd = NAND_CMD_READ0;
		} else {
			column -= 256;
c7e18e38:	c2444c01 	subgt	r4, r4, #256	; 0x100
c7e18e3c:	c3a01001 	movgt	r1, #1	; 0x1
			readcmd = NAND_CMD_READ1;
		}
		chip->cmd_ctrl(mtd, readcmd, ctrl);
c7e18e40:	e3a02083 	mov	r2, #131	; 0x83
c7e18e44:	e1a00006 	mov	r0, r6
c7e18e48:	e1a0e00f 	mov	lr, pc
c7e18e4c:	e595f028 	ldr	pc, [r5, #40]
c7e18e50:	e3a02003 	mov	r2, #3	; 0x3
		ctrl &= ~NAND_CTRL_CHANGE;
	}
	chip->cmd_ctrl(mtd, command, ctrl);
c7e18e54:	e1a00006 	mov	r0, r6
c7e18e58:	e1a01007 	mov	r1, r7
c7e18e5c:	e1a0e00f 	mov	lr, pc
c7e18e60:	e595f028 	ldr	pc, [r5, #40]
	/*
	 * Address cycle, when necessary
	 */
	ctrl = NAND_CTRL_ALE | NAND_CTRL_CHANGE;
	/* Serially input address */
	if (column != -1) {
c7e18e64:	e3740001 	cmn	r4, #1	; 0x1
c7e18e68:	03a02085 	moveq	r2, #133	; 0x85
c7e18e6c:	0a000008 	beq	c7e18e94 <nand_command+0x9c>
		/* Adjust columns for 16 bit buswidth */
		if (chip->options & NAND_BUSWIDTH_16)
c7e18e70:	e5953050 	ldr	r3, [r5, #80]
			column >>= 1;
		chip->cmd_ctrl(mtd, column, ctrl);
c7e18e74:	e3a02085 	mov	r2, #133	; 0x85
	 */
	ctrl = NAND_CTRL_ALE | NAND_CTRL_CHANGE;
	/* Serially input address */
	if (column != -1) {
		/* Adjust columns for 16 bit buswidth */
		if (chip->options & NAND_BUSWIDTH_16)
c7e18e78:	e3130002 	tst	r3, #2	; 0x2
			column >>= 1;
c7e18e7c:	11a040c4 	asrne	r4, r4, #1
		chip->cmd_ctrl(mtd, column, ctrl);
c7e18e80:	e1a01004 	mov	r1, r4
c7e18e84:	e1a00006 	mov	r0, r6
c7e18e88:	e1a0e00f 	mov	lr, pc
c7e18e8c:	e595f028 	ldr	pc, [r5, #40]
c7e18e90:	e3a02005 	mov	r2, #5	; 0x5
		ctrl &= ~NAND_CTRL_CHANGE;
	}
	if (page_addr != -1) {
c7e18e94:	e37a0001 	cmn	sl, #1	; 0x1
c7e18e98:	0a000014 	beq	c7e18ef0 <nand_command+0xf8>
		chip->cmd_ctrl(mtd, page_addr, ctrl);
		ctrl &= ~NAND_CTRL_CHANGE;
		chip->cmd_ctrl(mtd, page_addr >> 8, ctrl);
c7e18e9c:	e3c24080 	bic	r4, r2, #128	; 0x80
			column >>= 1;
		chip->cmd_ctrl(mtd, column, ctrl);
		ctrl &= ~NAND_CTRL_CHANGE;
	}
	if (page_addr != -1) {
		chip->cmd_ctrl(mtd, page_addr, ctrl);
c7e18ea0:	e1a00006 	mov	r0, r6
c7e18ea4:	e1a0100a 	mov	r1, sl
c7e18ea8:	e1a0e00f 	mov	lr, pc
c7e18eac:	e595f028 	ldr	pc, [r5, #40]
		ctrl &= ~NAND_CTRL_CHANGE;
		chip->cmd_ctrl(mtd, page_addr >> 8, ctrl);
c7e18eb0:	e1a00006 	mov	r0, r6
c7e18eb4:	e1a0144a 	asr	r1, sl, #8
c7e18eb8:	e1a02004 	mov	r2, r4
c7e18ebc:	e1a0e00f 	mov	lr, pc
c7e18ec0:	e595f028 	ldr	pc, [r5, #40]
		/* One more address cycle for devices > 32MiB */
		if (chip->chipsize > (32 << 20))
c7e18ec4:	e595306c 	ldr	r3, [r5, #108]
c7e18ec8:	e3530000 	cmp	r3, #0	; 0x0
c7e18ecc:	1a000002 	bne	c7e18edc <nand_command+0xe4>
c7e18ed0:	e5953068 	ldr	r3, [r5, #104]
c7e18ed4:	e3530402 	cmp	r3, #33554432	; 0x2000000
c7e18ed8:	9a000004 	bls	c7e18ef0 <nand_command+0xf8>
			chip->cmd_ctrl(mtd, page_addr >> 16, ctrl);
c7e18edc:	e1a0184a 	asr	r1, sl, #16
c7e18ee0:	e1a02004 	mov	r2, r4
c7e18ee4:	e1a00006 	mov	r0, r6
c7e18ee8:	e1a0e00f 	mov	lr, pc
c7e18eec:	e595f028 	ldr	pc, [r5, #40]
	}
	chip->cmd_ctrl(mtd, NAND_CMD_NONE, NAND_NCE | NAND_CTRL_CHANGE);
c7e18ef0:	e1a00006 	mov	r0, r6
c7e18ef4:	e3e01000 	mvn	r1, #0	; 0x0
c7e18ef8:	e3a02081 	mov	r2, #129	; 0x81
c7e18efc:	e1a0e00f 	mov	lr, pc
c7e18f00:	e595f028 	ldr	pc, [r5, #40]

	/*
	 * program and erase have their own busy handlers
	 * status and sequential in needs no delay
	 */
	switch (command) {
c7e18f04:	e3570070 	cmp	r7, #112	; 0x70
c7e18f08:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
c7e18f0c:	8a000004 	bhi	c7e18f24 <nand_command+0x12c>
c7e18f10:	e3570010 	cmp	r7, #16	; 0x10
c7e18f14:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
c7e18f18:	e3570060 	cmp	r7, #96	; 0x60
c7e18f1c:	1a000020 	bne	c7e18fa4 <nand_command+0x1ac>
c7e18f20:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e18f24:	e35700d0 	cmp	r7, #208	; 0xd0
c7e18f28:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
c7e18f2c:	e35700ff 	cmp	r7, #255	; 0xff
c7e18f30:	0a000002 	beq	c7e18f40 <nand_command+0x148>
c7e18f34:	e3570080 	cmp	r7, #128	; 0x80
c7e18f38:	1a000019 	bne	c7e18fa4 <nand_command+0x1ac>
c7e18f3c:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
	case NAND_CMD_SEQIN:
	case NAND_CMD_STATUS:
		return;

	case NAND_CMD_RESET:
		if (chip->dev_ready)
c7e18f40:	e5953030 	ldr	r3, [r5, #48]
c7e18f44:	e3530000 	cmp	r3, #0	; 0x0
c7e18f48:	1a00001b 	bne	c7e18fbc <nand_command+0x1c4>
			break;
		udelay(chip->chip_delay);
c7e18f4c:	e595004c 	ldr	r0, [r5, #76]
c7e18f50:	eb0027dc 	bl	c7e22ec8 <udelay>
		chip->cmd_ctrl(mtd, NAND_CMD_STATUS,
c7e18f54:	e1a00006 	mov	r0, r6
c7e18f58:	e3a01070 	mov	r1, #112	; 0x70
c7e18f5c:	e3a02083 	mov	r2, #131	; 0x83
c7e18f60:	e1a0e00f 	mov	lr, pc
c7e18f64:	e595f028 	ldr	pc, [r5, #40]
			       NAND_CTRL_CLE | NAND_CTRL_CHANGE);
		chip->cmd_ctrl(mtd,
c7e18f68:	e1a00006 	mov	r0, r6
c7e18f6c:	e3e01000 	mvn	r1, #0	; 0x0
c7e18f70:	e3a02081 	mov	r2, #129	; 0x81
c7e18f74:	e1a0e00f 	mov	lr, pc
c7e18f78:	e595f028 	ldr	pc, [r5, #40]
c7e18f7c:	e59f404c 	ldr	r4, [pc, #76]	; c7e18fd0 <nand_command+0x1d8>
			       NAND_CMD_NONE, NAND_NCE | NAND_CTRL_CHANGE);
		while (!(chip->read_byte(mtd) & NAND_STATUS_READY) &&
c7e18f80:	e1a00006 	mov	r0, r6
c7e18f84:	e1a0e00f 	mov	lr, pc
c7e18f88:	e595f008 	ldr	pc, [r5, #8]
c7e18f8c:	e3100040 	tst	r0, #64	; 0x40
c7e18f90:	18bd84f0 	popne	{r4, r5, r6, r7, sl, pc}
c7e18f94:	e3540000 	cmp	r4, #0	; 0x0
c7e18f98:	e2444001 	sub	r4, r4, #1	; 0x1
c7e18f9c:	1afffff7 	bne	c7e18f80 <nand_command+0x188>
c7e18fa0:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
	default:
		/*
		 * If we don't have access to the busy pin, we apply the given
		 * command delay
		 */
		if (!chip->dev_ready) {
c7e18fa4:	e5953030 	ldr	r3, [r5, #48]
c7e18fa8:	e3530000 	cmp	r3, #0	; 0x0
c7e18fac:	1a000002 	bne	c7e18fbc <nand_command+0x1c4>
			udelay(chip->chip_delay);
c7e18fb0:	e595004c 	ldr	r0, [r5, #76]
	/* Apply this short delay always to ensure that we do wait tWB in
	 * any case on any machine. */
	ndelay(100);

	nand_wait_ready(mtd);
}
c7e18fb4:	e8bd44f0 	pop	{r4, r5, r6, r7, sl, lr}
		/*
		 * If we don't have access to the busy pin, we apply the given
		 * command delay
		 */
		if (!chip->dev_ready) {
			udelay(chip->chip_delay);
c7e18fb8:	ea0027c2 	b	c7e22ec8 <udelay>
			return;
		}
	}
	/* Apply this short delay always to ensure that we do wait tWB in
	 * any case on any machine. */
	ndelay(100);
c7e18fbc:	e3a00001 	mov	r0, #1	; 0x1
c7e18fc0:	eb0027c0 	bl	c7e22ec8 <udelay>

	nand_wait_ready(mtd);
c7e18fc4:	e1a00006 	mov	r0, r6
}
c7e18fc8:	e8bd44f0 	pop	{r4, r5, r6, r7, sl, lr}
	}
	/* Apply this short delay always to ensure that we do wait tWB in
	 * any case on any machine. */
	ndelay(100);

	nand_wait_ready(mtd);
c7e18fcc:	eafffd8d 	b	c7e18608 <nand_wait_ready>
c7e18fd0:	00030d40 	.word	0x00030d40

c7e18fd4 <nand_command_lp>:
{
	register struct nand_chip *chip = mtd->priv;
	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;

	/* Emulate NAND_CMD_READOOB */
	if (command == NAND_CMD_READOOB) {
c7e18fd4:	e3510050 	cmp	r1, #80	; 0x50
 * devices We dont have the separate regions as we have in the small page
 * devices.  We must emulate NAND_CMD_READOOB to keep the code compatible.
 */
static void nand_command_lp(struct mtd_info *mtd, unsigned int command,
			    int column, int page_addr)
{
c7e18fd8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e18fdc:	e1a0a003 	mov	sl, r3
	register struct nand_chip *chip = mtd->priv;
	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;

	/* Emulate NAND_CMD_READOOB */
	if (command == NAND_CMD_READOOB) {
		column += mtd->writesize;
c7e18fe0:	05903014 	ldreq	r3, [r0, #20]
 * devices We dont have the separate regions as we have in the small page
 * devices.  We must emulate NAND_CMD_READOOB to keep the code compatible.
 */
static void nand_command_lp(struct mtd_info *mtd, unsigned int command,
			    int column, int page_addr)
{
c7e18fe4:	e1a04001 	mov	r4, r1
	register struct nand_chip *chip = mtd->priv;
	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;

	/* Emulate NAND_CMD_READOOB */
	if (command == NAND_CMD_READOOB) {
		column += mtd->writesize;
c7e18fe8:	03a04000 	moveq	r4, #0	; 0x0
 * devices We dont have the separate regions as we have in the small page
 * devices.  We must emulate NAND_CMD_READOOB to keep the code compatible.
 */
static void nand_command_lp(struct mtd_info *mtd, unsigned int command,
			    int column, int page_addr)
{
c7e18fec:	e1a05002 	mov	r5, r2
	register struct nand_chip *chip = mtd->priv;
c7e18ff0:	e5906094 	ldr	r6, [r0, #148]
	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;

	/* Emulate NAND_CMD_READOOB */
	if (command == NAND_CMD_READOOB) {
		column += mtd->writesize;
c7e18ff4:	00825003 	addeq	r5, r2, r3
		command = NAND_CMD_READ0;
	}

	/* Command latch cycle */
	chip->cmd_ctrl(mtd, command & 0xff,
c7e18ff8:	e20410ff 	and	r1, r4, #255	; 0xff
c7e18ffc:	e3a02083 	mov	r2, #131	; 0x83
 * devices We dont have the separate regions as we have in the small page
 * devices.  We must emulate NAND_CMD_READOOB to keep the code compatible.
 */
static void nand_command_lp(struct mtd_info *mtd, unsigned int command,
			    int column, int page_addr)
{
c7e19000:	e1a07000 	mov	r7, r0

	/* Command latch cycle */
	chip->cmd_ctrl(mtd, command & 0xff,
		       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);

	if (column != -1 || page_addr != -1) {
c7e19004:	e29a9001 	adds	r9, sl, #1	; 0x1
c7e19008:	13a09001 	movne	r9, #1	; 0x1
		column += mtd->writesize;
		command = NAND_CMD_READ0;
	}

	/* Command latch cycle */
	chip->cmd_ctrl(mtd, command & 0xff,
c7e1900c:	e1a0e00f 	mov	lr, pc
c7e19010:	e596f028 	ldr	pc, [r6, #40]
		       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);

	if (column != -1 || page_addr != -1) {
c7e19014:	e2953001 	adds	r3, r5, #1	; 0x1
c7e19018:	13a03001 	movne	r3, #1	; 0x1
c7e1901c:	e1932009 	orrs	r2, r3, r9
c7e19020:	0a000026 	beq	c7e190c0 <nand_command_lp+0xec>
		int ctrl = NAND_CTRL_CHANGE | NAND_NCE | NAND_ALE;

		/* Serially input address */
		if (column != -1) {
c7e19024:	e3530000 	cmp	r3, #0	; 0x0
c7e19028:	03a02085 	moveq	r2, #133	; 0x85
c7e1902c:	0a00000d 	beq	c7e19068 <nand_command_lp+0x94>
			/* Adjust columns for 16 bit buswidth */
			if (chip->options & NAND_BUSWIDTH_16)
c7e19030:	e5963050 	ldr	r3, [r6, #80]
				column >>= 1;
			chip->cmd_ctrl(mtd, column, ctrl);
c7e19034:	e3a02085 	mov	r2, #133	; 0x85
		int ctrl = NAND_CTRL_CHANGE | NAND_NCE | NAND_ALE;

		/* Serially input address */
		if (column != -1) {
			/* Adjust columns for 16 bit buswidth */
			if (chip->options & NAND_BUSWIDTH_16)
c7e19038:	e3130002 	tst	r3, #2	; 0x2
				column >>= 1;
c7e1903c:	11a050c5 	asrne	r5, r5, #1
			chip->cmd_ctrl(mtd, column, ctrl);
c7e19040:	e1a01005 	mov	r1, r5
c7e19044:	e1a00007 	mov	r0, r7
c7e19048:	e1a0e00f 	mov	lr, pc
c7e1904c:	e596f028 	ldr	pc, [r6, #40]
			ctrl &= ~NAND_CTRL_CHANGE;
			chip->cmd_ctrl(mtd, column >> 8, ctrl);
c7e19050:	e3a02005 	mov	r2, #5	; 0x5
c7e19054:	e1a00007 	mov	r0, r7
c7e19058:	e1a01445 	asr	r1, r5, #8
c7e1905c:	e1a0e00f 	mov	lr, pc
c7e19060:	e596f028 	ldr	pc, [r6, #40]
c7e19064:	e3a02005 	mov	r2, #5	; 0x5
		}
		if (page_addr != -1) {
c7e19068:	e3590000 	cmp	r9, #0	; 0x0
c7e1906c:	0a000013 	beq	c7e190c0 <nand_command_lp+0xec>
			chip->cmd_ctrl(mtd, page_addr, ctrl);
c7e19070:	e1a0100a 	mov	r1, sl
c7e19074:	e1a00007 	mov	r0, r7
c7e19078:	e1a0e00f 	mov	lr, pc
c7e1907c:	e596f028 	ldr	pc, [r6, #40]
			chip->cmd_ctrl(mtd, page_addr >> 8,
c7e19080:	e1a00007 	mov	r0, r7
c7e19084:	e1a0144a 	asr	r1, sl, #8
c7e19088:	e3a02005 	mov	r2, #5	; 0x5
c7e1908c:	e1a0e00f 	mov	lr, pc
c7e19090:	e596f028 	ldr	pc, [r6, #40]
				       NAND_NCE | NAND_ALE);
			/* One more address cycle for devices > 128MiB */
			if (chip->chipsize > (128 << 20))
c7e19094:	e596306c 	ldr	r3, [r6, #108]
c7e19098:	e3530000 	cmp	r3, #0	; 0x0
c7e1909c:	1a000002 	bne	c7e190ac <nand_command_lp+0xd8>
c7e190a0:	e5963068 	ldr	r3, [r6, #104]
c7e190a4:	e3530302 	cmp	r3, #134217728	; 0x8000000
c7e190a8:	9a000004 	bls	c7e190c0 <nand_command_lp+0xec>
				chip->cmd_ctrl(mtd, page_addr >> 16,
c7e190ac:	e1a0184a 	asr	r1, sl, #16
c7e190b0:	e1a00007 	mov	r0, r7
c7e190b4:	e3a02005 	mov	r2, #5	; 0x5
c7e190b8:	e1a0e00f 	mov	lr, pc
c7e190bc:	e596f028 	ldr	pc, [r6, #40]
					       NAND_NCE | NAND_ALE);
		}
	}
	chip->cmd_ctrl(mtd, NAND_CMD_NONE, NAND_NCE | NAND_CTRL_CHANGE);
c7e190c0:	e1a00007 	mov	r0, r7
c7e190c4:	e3e01000 	mvn	r1, #0	; 0x0
c7e190c8:	e3a02081 	mov	r2, #129	; 0x81
c7e190cc:	e1a0e00f 	mov	lr, pc
c7e190d0:	e596f028 	ldr	pc, [r6, #40]

	/*
	 * program and erase have their own busy handlers
	 * status, sequential in, and deplete1 need no delay
	 */
	switch (command) {
c7e190d4:	e3540076 	cmp	r4, #118	; 0x76
c7e190d8:	8a000010 	bhi	c7e19120 <nand_command_lp+0x14c>
c7e190dc:	e3540072 	cmp	r4, #114	; 0x72
c7e190e0:	2a00004c 	bcs	c7e19218 <nand_command_lp+0x244>
c7e190e4:	e3540010 	cmp	r4, #16	; 0x10
c7e190e8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e190ec:	8a000004 	bhi	c7e19104 <nand_command_lp+0x130>
c7e190f0:	e3540000 	cmp	r4, #0	; 0x0
c7e190f4:	0a00003a 	beq	c7e191e4 <nand_command_lp+0x210>
c7e190f8:	e3540005 	cmp	r4, #5	; 0x5
c7e190fc:	1a000042 	bne	c7e1920c <nand_command_lp+0x238>
c7e19100:	ea00002c 	b	c7e191b8 <nand_command_lp+0x1e4>
c7e19104:	e3540060 	cmp	r4, #96	; 0x60
c7e19108:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e1910c:	e3540070 	cmp	r4, #112	; 0x70
c7e19110:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e19114:	e3540015 	cmp	r4, #21	; 0x15
c7e19118:	1a00003b 	bne	c7e1920c <nand_command_lp+0x238>
c7e1911c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e19120:	e35400d0 	cmp	r4, #208	; 0xd0
c7e19124:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e19128:	8a000004 	bhi	c7e19140 <nand_command_lp+0x16c>
c7e1912c:	e3540080 	cmp	r4, #128	; 0x80
c7e19130:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e19134:	e3540085 	cmp	r4, #133	; 0x85
c7e19138:	1a000033 	bne	c7e1920c <nand_command_lp+0x238>
c7e1913c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e19140:	e35400ff 	cmp	r4, #255	; 0xff
c7e19144:	0a000002 	beq	c7e19154 <nand_command_lp+0x180>
c7e19148:	e3540c01 	cmp	r4, #256	; 0x100
c7e1914c:	1a00002e 	bne	c7e1920c <nand_command_lp+0x238>
c7e19150:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	case NAND_CMD_STATUS_ERROR3:
		udelay(chip->chip_delay);
		return;

	case NAND_CMD_RESET:
		if (chip->dev_ready)
c7e19154:	e5963030 	ldr	r3, [r6, #48]
c7e19158:	e3530000 	cmp	r3, #0	; 0x0
c7e1915c:	1a000030 	bne	c7e19224 <nand_command_lp+0x250>
			break;
		udelay(chip->chip_delay);
c7e19160:	e596004c 	ldr	r0, [r6, #76]
c7e19164:	eb002757 	bl	c7e22ec8 <udelay>
		chip->cmd_ctrl(mtd, NAND_CMD_STATUS,
c7e19168:	e1a00007 	mov	r0, r7
c7e1916c:	e3a01070 	mov	r1, #112	; 0x70
c7e19170:	e3a02083 	mov	r2, #131	; 0x83
c7e19174:	e1a0e00f 	mov	lr, pc
c7e19178:	e596f028 	ldr	pc, [r6, #40]
			       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
		chip->cmd_ctrl(mtd, NAND_CMD_NONE,
c7e1917c:	e1a00007 	mov	r0, r7
c7e19180:	e3e01000 	mvn	r1, #0	; 0x0
c7e19184:	e3a02081 	mov	r2, #129	; 0x81
c7e19188:	e1a0e00f 	mov	lr, pc
c7e1918c:	e596f028 	ldr	pc, [r6, #40]
c7e19190:	e59f40a0 	ldr	r4, [pc, #160]	; c7e19238 <nand_command_lp+0x264>
			       NAND_NCE | NAND_CTRL_CHANGE);
		while (!(chip->read_byte(mtd) & NAND_STATUS_READY) &&
c7e19194:	e1a00007 	mov	r0, r7
c7e19198:	e1a0e00f 	mov	lr, pc
c7e1919c:	e596f008 	ldr	pc, [r6, #8]
c7e191a0:	e3100040 	tst	r0, #64	; 0x40
c7e191a4:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e191a8:	e3540000 	cmp	r4, #0	; 0x0
c7e191ac:	e2444001 	sub	r4, r4, #1	; 0x1
c7e191b0:	1afffff7 	bne	c7e19194 <nand_command_lp+0x1c0>
c7e191b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
			(rst_sts_cnt--));
		return;

	case NAND_CMD_RNDOUT:
		/* No ready / busy check necessary */
		chip->cmd_ctrl(mtd, NAND_CMD_RNDOUTSTART,
c7e191b8:	e1a00007 	mov	r0, r7
c7e191bc:	e3a010e0 	mov	r1, #224	; 0xe0
c7e191c0:	e3a02083 	mov	r2, #131	; 0x83
c7e191c4:	e1a0e00f 	mov	lr, pc
c7e191c8:	e596f028 	ldr	pc, [r6, #40]
			       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
		chip->cmd_ctrl(mtd, NAND_CMD_NONE,
c7e191cc:	e1a00007 	mov	r0, r7
c7e191d0:	e3e01000 	mvn	r1, #0	; 0x0
c7e191d4:	e3a02081 	mov	r2, #129	; 0x81
c7e191d8:	e1a0e00f 	mov	lr, pc
c7e191dc:	e596f028 	ldr	pc, [r6, #40]
c7e191e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
			       NAND_NCE | NAND_CTRL_CHANGE);
		return;

	case NAND_CMD_READ0:
		chip->cmd_ctrl(mtd, NAND_CMD_READSTART,
c7e191e4:	e3a01030 	mov	r1, #48	; 0x30
c7e191e8:	e3a02083 	mov	r2, #131	; 0x83
c7e191ec:	e1a00007 	mov	r0, r7
c7e191f0:	e1a0e00f 	mov	lr, pc
c7e191f4:	e596f028 	ldr	pc, [r6, #40]
			       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
		chip->cmd_ctrl(mtd, NAND_CMD_NONE,
c7e191f8:	e1a00007 	mov	r0, r7
c7e191fc:	e3e01000 	mvn	r1, #0	; 0x0
c7e19200:	e3a02081 	mov	r2, #129	; 0x81
c7e19204:	e1a0e00f 	mov	lr, pc
c7e19208:	e596f028 	ldr	pc, [r6, #40]
	default:
		/*
		 * If we don't have access to the busy pin, we apply the given
		 * command delay
		 */
		if (!chip->dev_ready) {
c7e1920c:	e5963030 	ldr	r3, [r6, #48]
c7e19210:	e3530000 	cmp	r3, #0	; 0x0
c7e19214:	1a000002 	bne	c7e19224 <nand_command_lp+0x250>
			udelay(chip->chip_delay);
c7e19218:	e596004c 	ldr	r0, [r6, #76]
	/* Apply this short delay always to ensure that we do wait tWB in
	 * any case on any machine. */
	ndelay(100);

	nand_wait_ready(mtd);
}
c7e1921c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
		/*
		 * If we don't have access to the busy pin, we apply the given
		 * command delay
		 */
		if (!chip->dev_ready) {
			udelay(chip->chip_delay);
c7e19220:	ea002728 	b	c7e22ec8 <udelay>
		}
	}

	/* Apply this short delay always to ensure that we do wait tWB in
	 * any case on any machine. */
	ndelay(100);
c7e19224:	e3a00001 	mov	r0, #1	; 0x1
c7e19228:	eb002726 	bl	c7e22ec8 <udelay>

	nand_wait_ready(mtd);
c7e1922c:	e1a00007 	mov	r0, r7
}
c7e19230:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}

	/* Apply this short delay always to ensure that we do wait tWB in
	 * any case on any machine. */
	ndelay(100);

	nand_wait_ready(mtd);
c7e19234:	eafffcf3 	b	c7e18608 <nand_wait_ready>
c7e19238:	00030d40 	.word	0x00030d40

c7e1923c <s3c_nand_select_chip>:
}
#endif /* S3C_NAND_DEBUG */

static void s3c_nand_select_chip(struct mtd_info *mtd, int chip)
{
	int ctrl = readl(NFCONT);
c7e1923c:	e59f3034 	ldr	r3, [pc, #52]	; c7e19278 <s3c_nand_select_chip+0x3c>
c7e19240:	e5933004 	ldr	r3, [r3, #4]

	switch (chip) {
c7e19244:	e3510000 	cmp	r1, #0	; 0x0
	case -1:
		ctrl |= 6;
		break;
	case 0:
		ctrl &= ~2;
c7e19248:	03c32002 	biceq	r2, r3, #2	; 0x2

static void s3c_nand_select_chip(struct mtd_info *mtd, int chip)
{
	int ctrl = readl(NFCONT);

	switch (chip) {
c7e1924c:	0a000006 	beq	c7e1926c <s3c_nand_select_chip+0x30>
c7e19250:	e3510001 	cmp	r1, #1	; 0x1
c7e19254:	0a000003 	beq	c7e19268 <s3c_nand_select_chip+0x2c>
c7e19258:	e3710001 	cmn	r1, #1	; 0x1
	case -1:
		ctrl |= 6;
c7e1925c:	03832006 	orreq	r2, r3, #6	; 0x6

static void s3c_nand_select_chip(struct mtd_info *mtd, int chip)
{
	int ctrl = readl(NFCONT);

	switch (chip) {
c7e19260:	112fff1e 	bxne	lr
c7e19264:	ea000000 	b	c7e1926c <s3c_nand_select_chip+0x30>
		break;
	case 0:
		ctrl &= ~2;
		break;
	case 1:
		ctrl &= ~4;
c7e19268:	e3c32004 	bic	r2, r3, #4	; 0x4
		break;
	default:
		return;
	}

	writel(ctrl, NFCONT);
c7e1926c:	e59f3004 	ldr	r3, [pc, #4]	; c7e19278 <s3c_nand_select_chip+0x3c>
c7e19270:	e5832004 	str	r2, [r3, #4]
c7e19274:	e12fff1e 	bx	lr
c7e19278:	70200000 	.word	0x70200000

c7e1927c <s3c_nand_hwcontrol>:
 */
static void s3c_nand_hwcontrol(struct mtd_info *mtd, int cmd, unsigned int ctrl)
{
	struct nand_chip *this = mtd->priv;

	if (ctrl & NAND_CTRL_CHANGE) {
c7e1927c:	e3120080 	tst	r2, #128	; 0x80
/*
 * Hardware specific access to control-lines function
 * Written by jsgood
 */
static void s3c_nand_hwcontrol(struct mtd_info *mtd, int cmd, unsigned int ctrl)
{
c7e19280:	e92d4070 	push	{r4, r5, r6, lr}
c7e19284:	e1a05001 	mov	r5, r1
	struct nand_chip *this = mtd->priv;
c7e19288:	e5904094 	ldr	r4, [r0, #148]

	if (ctrl & NAND_CTRL_CHANGE) {
c7e1928c:	0a00000b 	beq	c7e192c0 <s3c_nand_hwcontrol+0x44>
		if (ctrl & NAND_CLE)
c7e19290:	e3120002 	tst	r2, #2	; 0x2
			this->IO_ADDR_W = (void __iomem *)NFCMMD;
c7e19294:	159f303c 	ldrne	r3, [pc, #60]	; c7e192d8 <s3c_nand_hwcontrol+0x5c>
static void s3c_nand_hwcontrol(struct mtd_info *mtd, int cmd, unsigned int ctrl)
{
	struct nand_chip *this = mtd->priv;

	if (ctrl & NAND_CTRL_CHANGE) {
		if (ctrl & NAND_CLE)
c7e19298:	1a000002 	bne	c7e192a8 <s3c_nand_hwcontrol+0x2c>
			this->IO_ADDR_W = (void __iomem *)NFCMMD;
		else if (ctrl & NAND_ALE)
c7e1929c:	e3120004 	tst	r2, #4	; 0x4
			this->IO_ADDR_W = (void __iomem *)NFADDR;
c7e192a0:	159f3034 	ldrne	r3, [pc, #52]	; c7e192dc <s3c_nand_hwcontrol+0x60>
		else
			this->IO_ADDR_W = (void __iomem *)NFDATA;
c7e192a4:	059f3034 	ldreq	r3, [pc, #52]	; c7e192e0 <s3c_nand_hwcontrol+0x64>
		if (ctrl & NAND_NCE)
c7e192a8:	e3120001 	tst	r2, #1	; 0x1
		if (ctrl & NAND_CLE)
			this->IO_ADDR_W = (void __iomem *)NFCMMD;
		else if (ctrl & NAND_ALE)
			this->IO_ADDR_W = (void __iomem *)NFADDR;
		else
			this->IO_ADDR_W = (void __iomem *)NFDATA;
c7e192ac:	e5843004 	str	r3, [r4, #4]
		if (ctrl & NAND_NCE)
			s3c_nand_select_chip(mtd, *(int *)this->priv);
c7e192b0:	15943120 	ldrne	r3, [r4, #288]
		else
			s3c_nand_select_chip(mtd, -1);
c7e192b4:	03e01000 	mvneq	r1, #0	; 0x0
		else if (ctrl & NAND_ALE)
			this->IO_ADDR_W = (void __iomem *)NFADDR;
		else
			this->IO_ADDR_W = (void __iomem *)NFDATA;
		if (ctrl & NAND_NCE)
			s3c_nand_select_chip(mtd, *(int *)this->priv);
c7e192b8:	15931000 	ldrne	r1, [r3]
		else
			s3c_nand_select_chip(mtd, -1);
c7e192bc:	ebffffde 	bl	c7e1923c <s3c_nand_select_chip>
	}

	if (cmd != NAND_CMD_NONE)
c7e192c0:	e3750001 	cmn	r5, #1	; 0x1
c7e192c4:	08bd8070 	popeq	{r4, r5, r6, pc}
		writeb(cmd, this->IO_ADDR_W);
c7e192c8:	e20520ff 	and	r2, r5, #255	; 0xff
c7e192cc:	e5943004 	ldr	r3, [r4, #4]
c7e192d0:	e5c32000 	strb	r2, [r3]
c7e192d4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e192d8:	70200008 	.word	0x70200008
c7e192dc:	7020000c 	.word	0x7020000c
c7e192e0:	70200010 	.word	0x70200010

c7e192e4 <s3c_nand_device_ready>:
 * Function for checking device ready pin
 * Written by jsgood
 */
static int s3c_nand_device_ready(struct mtd_info *mtdinfo)
{
	return !!(readl(NFSTAT) & NFSTAT_RnB);
c7e192e4:	e59f3008 	ldr	r3, [pc, #8]	; c7e192f4 <s3c_nand_device_ready+0x10>
c7e192e8:	e5930028 	ldr	r0, [r3, #40]
}
c7e192ec:	e2000001 	and	r0, r0, #1	; 0x1
c7e192f0:	e12fff1e 	bx	lr
c7e192f4:	70200000 	.word	0x70200000

c7e192f8 <s3c_nand_enable_hwecc>:
	 * The original driver used 4-bit ECC for "new" MLC chips, i.e., for
	 * those with non-zero ID[3][3:2], which anyway only holds for ST
	 * (Numonyx) chips
	 */
//	nfconf = readl(NFCONF) & ~NFCONF_ECC_4BIT;
	nfconf = readl(NFCONF) & ~(3 << 23);
c7e192f8:	e59f2040 	ldr	r2, [pc, #64]	; c7e19340 <s3c_nand_enable_hwecc+0x48>
c7e192fc:	e5923000 	ldr	r3, [r2]
c7e19300:	e3c33506 	bic	r3, r3, #25165824	; 0x1800000
#if	defined(CONFIG_SYS_NAND_HWECC_1BIT)
	nfconf |= NFCONF_ECC_1BIT;
#elif	defined(CONFIG_SYS_NAND_HWECC_4BIT)
	nfconf |= NFCONF_ECC_4BIT;
#elif	defined(CONFIG_SYS_NAND_HWECC_8BIT)
	nfconf |= NFCONF_ECC_8BIT;
c7e19304:	e3833502 	orr	r3, r3, #8388608	; 0x800000
#endif

	writel(nfconf, NFCONF);
c7e19308:	e5823000 	str	r3, [r2]

	/* Initialize & unlock */
	nfcont = readl(NFCONT);
c7e1930c:	e5922004 	ldr	r2, [r2, #4]
	nfcont |= NFCONT_INITECC;
	nfcont &= ~NFCONT_MECCLOCK;
	
	cur_ecc_mode = mode;
c7e19310:	e59f302c 	ldr	r3, [pc, #44]	; c7e19344 <s3c_nand_enable_hwecc+0x4c>

	writel(nfconf, NFCONF);

	/* Initialize & unlock */
	nfcont = readl(NFCONT);
	nfcont |= NFCONT_INITECC;
c7e19314:	e3822030 	orr	r2, r2, #48	; 0x30
	nfcont &= ~NFCONT_MECCLOCK;
	
	cur_ecc_mode = mode;
	if (mode == NAND_ECC_WRITE)
c7e19318:	e3510001 	cmp	r1, #1	; 0x1
	writel(nfconf, NFCONF);

	/* Initialize & unlock */
	nfcont = readl(NFCONT);
	nfcont |= NFCONT_INITECC;
	nfcont &= ~NFCONT_MECCLOCK;
c7e1931c:	e3c22080 	bic	r2, r2, #128	; 0x80
	
	cur_ecc_mode = mode;
c7e19320:	e5831000 	str	r1, [r3]
	if (mode == NAND_ECC_WRITE)
		nfcont |= NFCONT_ECC_ENC;
c7e19324:	03822701 	orreq	r2, r2, #262144	; 0x40000
	nfcont = readl(NFCONT);
	nfcont |= NFCONT_INITECC;
	nfcont &= ~NFCONT_MECCLOCK;
	
	cur_ecc_mode = mode;
	if (mode == NAND_ECC_WRITE)
c7e19328:	0a000001 	beq	c7e19334 <s3c_nand_enable_hwecc+0x3c>
		nfcont |= NFCONT_ECC_ENC;
	else if (mode == NAND_ECC_READ)
c7e1932c:	e3510000 	cmp	r1, #0	; 0x0
		nfcont &= ~NFCONT_ECC_ENC;
c7e19330:	03c22701 	biceq	r2, r2, #262144	; 0x40000

	writel(nfcont, NFCONT);
c7e19334:	e59f3004 	ldr	r3, [pc, #4]	; c7e19340 <s3c_nand_enable_hwecc+0x48>
c7e19338:	e5832004 	str	r2, [r3, #4]
}
c7e1933c:	e12fff1e 	bx	lr
c7e19340:	70200000 	.word	0x70200000
c7e19344:	c7e42030 	.word	0xc7e42030

c7e19348 <s3c_nand_calculate_ecc>:
 * This function returns encoded ecc codes.
 * Written by jsgood
 */
static int s3c_nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
				  u_char *ecc_code)
{
c7e19348:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	}
#elif defined(CONFIG_SYS_NAND_HWECC_8BIT)
	u_long nfcont, nfm8ecc0, nfm8ecc1, nfm8ecc2, nfm8ecc3;

	/* Lock */
	nfcont = readl(NFCONT);
c7e1934c:	e59f10c0 	ldr	r1, [pc, #192]	; c7e19414 <s3c_nand_calculate_ecc+0xcc>
 * This function returns encoded ecc codes.
 * Written by jsgood
 */
static int s3c_nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
				  u_char *ecc_code)
{
c7e19350:	e1a0b002 	mov	fp, r2
	}
#elif defined(CONFIG_SYS_NAND_HWECC_8BIT)
	u_long nfcont, nfm8ecc0, nfm8ecc1, nfm8ecc2, nfm8ecc3;

	/* Lock */
	nfcont = readl(NFCONT);
c7e19354:	e5913004 	ldr	r3, [r1, #4]
	nfcont |= NFCONT_MECCLOCK;
c7e19358:	e3833080 	orr	r3, r3, #128	; 0x80
	writel(nfcont, NFCONT);
c7e1935c:	e5813004 	str	r3, [r1, #4]
	
	if(cur_ecc_mode == NAND_ECC_READ)
c7e19360:	e59f30b0 	ldr	r3, [pc, #176]	; c7e19418 <s3c_nand_calculate_ecc+0xd0>
c7e19364:	e5933000 	ldr	r3, [r3]
c7e19368:	e3530000 	cmp	r3, #0	; 0x0
c7e1936c:	1a000004 	bne	c7e19384 <s3c_nand_calculate_ecc+0x3c>
		while(!(readl(NFSTAT) & NFSTAT_ECCDECDONE));
c7e19370:	e59f309c 	ldr	r3, [pc, #156]	; c7e19414 <s3c_nand_calculate_ecc+0xcc>
c7e19374:	e5933028 	ldr	r3, [r3, #40]
c7e19378:	e3130040 	tst	r3, #64	; 0x40
c7e1937c:	0afffffb 	beq	c7e19370 <s3c_nand_calculate_ecc+0x28>
c7e19380:	ea000021 	b	c7e1940c <s3c_nand_calculate_ecc+0xc4>
	else {
		while(!(readl(NFSTAT) & NFSTAT_ECCENCDONE));
c7e19384:	e59f0088 	ldr	r0, [pc, #136]	; c7e19414 <s3c_nand_calculate_ecc+0xcc>
c7e19388:	e5903028 	ldr	r3, [r0, #40]
c7e1938c:	e3130080 	tst	r3, #128	; 0x80
c7e19390:	0afffffb 	beq	c7e19384 <s3c_nand_calculate_ecc+0x3c>

		nfm8ecc0 = readl(NFM8ECC0);
c7e19394:	e5901050 	ldr	r1, [r0, #80]
		nfm8ecc1 = readl(NFM8ECC1);
c7e19398:	e5902054 	ldr	r2, [r0, #84]
		nfm8ecc2 = readl(NFM8ECC2);
c7e1939c:	e5903058 	ldr	r3, [r0, #88]
		nfm8ecc3 = readl(NFM8ECC3);
c7e193a0:	e590a05c 	ldr	sl, [r0, #92]
		ecc_code[2] = (nfm8ecc0 >> 16) & 0xff;
		ecc_code[3] = (nfm8ecc0 >> 24) & 0xff;
		ecc_code[4] = nfm8ecc1 & 0xff;
		ecc_code[5] = (nfm8ecc1 >> 8) & 0xff;
		ecc_code[6] = (nfm8ecc1 >> 16) & 0xff;
		ecc_code[7] = (nfm8ecc1 >> 24) & 0xff;
c7e193a4:	e1a00c22 	lsr	r0, r2, #24
c7e193a8:	e58d0004 	str	r0, [sp, #4]
		ecc_code[8] = nfm8ecc2 & 0xff;
		ecc_code[9] = (nfm8ecc2 >> 8) & 0xff;
		ecc_code[10] = (nfm8ecc2 >> 16) & 0xff;
		ecc_code[11] = (nfm8ecc2 >> 24) & 0xff;
c7e193ac:	e1a00c23 	lsr	r0, r3, #24
c7e193b0:	e58d0000 	str	r0, [sp]
		nfm8ecc3 = readl(NFM8ECC3);

		ecc_code[0] = nfm8ecc0 & 0xff;
		ecc_code[1] = (nfm8ecc0 >> 8) & 0xff;
		ecc_code[2] = (nfm8ecc0 >> 16) & 0xff;
		ecc_code[3] = (nfm8ecc0 >> 24) & 0xff;
c7e193b4:	e1a09c21 	lsr	r9, r1, #24
		nfm8ecc1 = readl(NFM8ECC1);
		nfm8ecc2 = readl(NFM8ECC2);
		nfm8ecc3 = readl(NFM8ECC3);

		ecc_code[0] = nfm8ecc0 & 0xff;
		ecc_code[1] = (nfm8ecc0 >> 8) & 0xff;
c7e193b8:	e1a00421 	lsr	r0, r1, #8
		ecc_code[2] = (nfm8ecc0 >> 16) & 0xff;
c7e193bc:	e1a0c821 	lsr	ip, r1, #16
		ecc_code[3] = (nfm8ecc0 >> 24) & 0xff;
		ecc_code[4] = nfm8ecc1 & 0xff;
		ecc_code[5] = (nfm8ecc1 >> 8) & 0xff;
c7e193c0:	e1a04422 	lsr	r4, r2, #8
		ecc_code[6] = (nfm8ecc1 >> 16) & 0xff;
c7e193c4:	e1a05822 	lsr	r5, r2, #16
		ecc_code[7] = (nfm8ecc1 >> 24) & 0xff;
		ecc_code[8] = nfm8ecc2 & 0xff;
		ecc_code[9] = (nfm8ecc2 >> 8) & 0xff;
		ecc_code[10] = (nfm8ecc2 >> 16) & 0xff;
		ecc_code[11] = (nfm8ecc2 >> 24) & 0xff;
		ecc_code[12] = nfm8ecc3 & 0xff;
c7e193c8:	e5cba00c 	strb	sl, [fp, #12]
		nfm8ecc1 = readl(NFM8ECC1);
		nfm8ecc2 = readl(NFM8ECC2);
		nfm8ecc3 = readl(NFM8ECC3);

		ecc_code[0] = nfm8ecc0 & 0xff;
		ecc_code[1] = (nfm8ecc0 >> 8) & 0xff;
c7e193cc:	e5cb0001 	strb	r0, [fp, #1]
		ecc_code[2] = (nfm8ecc0 >> 16) & 0xff;
c7e193d0:	e5cbc002 	strb	ip, [fp, #2]
		ecc_code[3] = (nfm8ecc0 >> 24) & 0xff;
c7e193d4:	e5cb9003 	strb	r9, [fp, #3]
		ecc_code[4] = nfm8ecc1 & 0xff;
		ecc_code[5] = (nfm8ecc1 >> 8) & 0xff;
c7e193d8:	e5cb4005 	strb	r4, [fp, #5]
		ecc_code[6] = (nfm8ecc1 >> 16) & 0xff;
c7e193dc:	e5cb5006 	strb	r5, [fp, #6]
		ecc_code[7] = (nfm8ecc1 >> 24) & 0xff;
c7e193e0:	e59d0004 	ldr	r0, [sp, #4]
		ecc_code[8] = nfm8ecc2 & 0xff;
		ecc_code[9] = (nfm8ecc2 >> 8) & 0xff;
c7e193e4:	e1a06423 	lsr	r6, r3, #8
		ecc_code[10] = (nfm8ecc2 >> 16) & 0xff;
c7e193e8:	e1a07823 	lsr	r7, r3, #16
		ecc_code[2] = (nfm8ecc0 >> 16) & 0xff;
		ecc_code[3] = (nfm8ecc0 >> 24) & 0xff;
		ecc_code[4] = nfm8ecc1 & 0xff;
		ecc_code[5] = (nfm8ecc1 >> 8) & 0xff;
		ecc_code[6] = (nfm8ecc1 >> 16) & 0xff;
		ecc_code[7] = (nfm8ecc1 >> 24) & 0xff;
c7e193ec:	e5cb0007 	strb	r0, [fp, #7]
		ecc_code[8] = nfm8ecc2 & 0xff;
		ecc_code[9] = (nfm8ecc2 >> 8) & 0xff;
c7e193f0:	e5cb6009 	strb	r6, [fp, #9]
		ecc_code[10] = (nfm8ecc2 >> 16) & 0xff;
c7e193f4:	e5cb700a 	strb	r7, [fp, #10]
		ecc_code[11] = (nfm8ecc2 >> 24) & 0xff;
c7e193f8:	e59d0000 	ldr	r0, [sp]
		nfm8ecc0 = readl(NFM8ECC0);
		nfm8ecc1 = readl(NFM8ECC1);
		nfm8ecc2 = readl(NFM8ECC2);
		nfm8ecc3 = readl(NFM8ECC3);

		ecc_code[0] = nfm8ecc0 & 0xff;
c7e193fc:	e5cb1000 	strb	r1, [fp]
		ecc_code[6] = (nfm8ecc1 >> 16) & 0xff;
		ecc_code[7] = (nfm8ecc1 >> 24) & 0xff;
		ecc_code[8] = nfm8ecc2 & 0xff;
		ecc_code[9] = (nfm8ecc2 >> 8) & 0xff;
		ecc_code[10] = (nfm8ecc2 >> 16) & 0xff;
		ecc_code[11] = (nfm8ecc2 >> 24) & 0xff;
c7e19400:	e5cb000b 	strb	r0, [fp, #11]

		ecc_code[0] = nfm8ecc0 & 0xff;
		ecc_code[1] = (nfm8ecc0 >> 8) & 0xff;
		ecc_code[2] = (nfm8ecc0 >> 16) & 0xff;
		ecc_code[3] = (nfm8ecc0 >> 24) & 0xff;
		ecc_code[4] = nfm8ecc1 & 0xff;
c7e19404:	e5cb2004 	strb	r2, [fp, #4]
		ecc_code[5] = (nfm8ecc1 >> 8) & 0xff;
		ecc_code[6] = (nfm8ecc1 >> 16) & 0xff;
		ecc_code[7] = (nfm8ecc1 >> 24) & 0xff;
		ecc_code[8] = nfm8ecc2 & 0xff;
c7e19408:	e5cb3008 	strb	r3, [fp, #8]
		printf("\n");
*/
	}
#endif
	return 0;
}
c7e1940c:	e3a00000 	mov	r0, #0	; 0x0
c7e19410:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e19414:	70200000 	.word	0x70200000
c7e19418:	c7e42030 	.word	0xc7e42030

c7e1941c <board_nand_init>:
 *   explanation
 * Members with a "?" were not set in the merged testing-NAND branch,
 * so they are not set here either.
 */
int board_nand_init(struct nand_chip *nand)
{
c7e1941c:	e92d4070 	push	{r4, r5, r6, lr}
	static unsigned int chip_n;

	if (chip_n >= MAX_CHIPS)
c7e19420:	e59f609c 	ldr	r6, [pc, #156]	; c7e194c4 <board_nand_init+0xa8>
 *   explanation
 * Members with a "?" were not set in the merged testing-NAND branch,
 * so they are not set here either.
 */
int board_nand_init(struct nand_chip *nand)
{
c7e19424:	e1a05000 	mov	r5, r0
	static unsigned int chip_n;

	if (chip_n >= MAX_CHIPS)
c7e19428:	e5964004 	ldr	r4, [r6, #4]
c7e1942c:	e3540001 	cmp	r4, #1	; 0x1
c7e19430:	83e00012 	mvnhi	r0, #18	; 0x12
c7e19434:	88bd8070 	pophi	{r4, r5, r6, pc}
		return -ENODEV;

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;
c7e19438:	e59f1088 	ldr	r1, [pc, #136]	; c7e194c8 <board_nand_init+0xac>
	nand->ecc.bytes		= CONFIG_SYS_NAND_ECCBYTES;
#else
	nand->ecc.mode		= NAND_ECC_SOFT;
#endif /* ! CONFIG_SYS_S3C_CONFIG_SYS_NAND_HWECC */

	nand->priv		= nand_cs + chip_n++;
c7e1943c:	e59f2088 	ldr	r2, [pc, #136]	; c7e194cc <board_nand_init+0xb0>
	static unsigned int chip_n;

	if (chip_n >= MAX_CHIPS)
		return -ENODEV;

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;
c7e19440:	e5913004 	ldr	r3, [r1, #4]

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
c7e19444:	e59fc084 	ldr	ip, [pc, #132]	; c7e194d0 <board_nand_init+0xb4>
	static unsigned int chip_n;

	if (chip_n >= MAX_CHIPS)
		return -ENODEV;

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;
c7e19448:	e3c33801 	bic	r3, r3, #65536	; 0x10000
c7e1944c:	e3c33007 	bic	r3, r3, #7	; 0x7
c7e19450:	e3833007 	orr	r3, r3, #7	; 0x7
c7e19454:	e5813004 	str	r3, [r1, #4]
	/*
	 * If you get more than 1 NAND-chip with different page-sizes on the
	 * board one day, it will get more complicated...
	 */
	nand->ecc.mode		= NAND_ECC_HW;
	nand->ecc.size		= CONFIG_SYS_NAND_ECCSIZE;
c7e19458:	e3a03c02 	mov	r3, #512	; 0x200
c7e1945c:	e58530a4 	str	r3, [r5, #164]
	nand->ecc.bytes		= CONFIG_SYS_NAND_ECCBYTES;
c7e19460:	e3a0300d 	mov	r3, #13	; 0xd
c7e19464:	e58530a8 	str	r3, [r5, #168]

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
	nand->IO_ADDR_W		= (void __iomem *)NFDATA;
	nand->cmd_ctrl		= s3c_nand_hwcontrol;
c7e19468:	e59f3064 	ldr	r3, [pc, #100]	; c7e194d4 <board_nand_init+0xb8>
	nand->ecc.bytes		= CONFIG_SYS_NAND_ECCBYTES;
#else
	nand->ecc.mode		= NAND_ECC_SOFT;
#endif /* ! CONFIG_SYS_S3C_CONFIG_SYS_NAND_HWECC */

	nand->priv		= nand_cs + chip_n++;
c7e1946c:	e0822104 	add	r2, r2, r4, lsl #2

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
	nand->IO_ADDR_W		= (void __iomem *)NFDATA;
	nand->cmd_ctrl		= s3c_nand_hwcontrol;
c7e19470:	e5853028 	str	r3, [r5, #40]
	nand->dev_ready		= s3c_nand_device_ready;
c7e19474:	e59f305c 	ldr	r3, [pc, #92]	; c7e194d8 <board_nand_init+0xbc>
	nand->ecc.bytes		= CONFIG_SYS_NAND_ECCBYTES;
#else
	nand->ecc.mode		= NAND_ECC_SOFT;
#endif /* ! CONFIG_SYS_S3C_CONFIG_SYS_NAND_HWECC */

	nand->priv		= nand_cs + chip_n++;
c7e19478:	e2844001 	add	r4, r4, #1	; 0x1
	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
	nand->IO_ADDR_W		= (void __iomem *)NFDATA;
	nand->cmd_ctrl		= s3c_nand_hwcontrol;
	nand->dev_ready		= s3c_nand_device_ready;
c7e1947c:	e5853030 	str	r3, [r5, #48]
	nand->select_chip	= s3c_nand_select_chip;
c7e19480:	e59f3054 	ldr	r3, [pc, #84]	; c7e194dc <board_nand_init+0xc0>
	nand->options		= 0;
c7e19484:	e3a00000 	mov	r0, #0	; 0x0

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
	nand->IO_ADDR_W		= (void __iomem *)NFDATA;
	nand->cmd_ctrl		= s3c_nand_hwcontrol;
	nand->dev_ready		= s3c_nand_device_ready;
	nand->select_chip	= s3c_nand_select_chip;
c7e19488:	e585301c 	str	r3, [r5, #28]
	nand->write_buf		= nand_write_buf;
	nand->read_buf		= nand_read_buf;
#endif

#ifdef CONFIG_SYS_S3C_NAND_HWECC
	nand->ecc.hwctl		= s3c_nand_enable_hwecc;
c7e1948c:	e59f304c 	ldr	r3, [pc, #76]	; c7e194e0 <board_nand_init+0xc4>
	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
	nand->IO_ADDR_W		= (void __iomem *)NFDATA;
	nand->cmd_ctrl		= s3c_nand_hwcontrol;
	nand->dev_ready		= s3c_nand_device_ready;
	nand->select_chip	= s3c_nand_select_chip;
	nand->options		= 0;
c7e19490:	e5850050 	str	r0, [r5, #80]
	nand->write_buf		= nand_write_buf;
	nand->read_buf		= nand_read_buf;
#endif

#ifdef CONFIG_SYS_S3C_NAND_HWECC
	nand->ecc.hwctl		= s3c_nand_enable_hwecc;
c7e19494:	e58530c0 	str	r3, [r5, #192]
	nand->ecc.calculate	= s3c_nand_calculate_ecc;
c7e19498:	e59f3044 	ldr	r3, [pc, #68]	; c7e194e4 <board_nand_init+0xc8>
	nand->ecc.bytes		= CONFIG_SYS_NAND_ECCBYTES;
#else
	nand->ecc.mode		= NAND_ECC_SOFT;
#endif /* ! CONFIG_SYS_S3C_CONFIG_SYS_NAND_HWECC */

	nand->priv		= nand_cs + chip_n++;
c7e1949c:	e5852120 	str	r2, [r5, #288]
	nand->read_buf		= nand_read_buf;
#endif

#ifdef CONFIG_SYS_S3C_NAND_HWECC
	nand->ecc.hwctl		= s3c_nand_enable_hwecc;
	nand->ecc.calculate	= s3c_nand_calculate_ecc;
c7e194a0:	e58530c4 	str	r3, [r5, #196]
	nand->ecc.correct	= s3c_nand_correct_data;
c7e194a4:	e59f303c 	ldr	r3, [pc, #60]	; c7e194e8 <board_nand_init+0xcc>
		return -ENODEV;

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
	nand->IO_ADDR_W		= (void __iomem *)NFDATA;
c7e194a8:	e585c004 	str	ip, [r5, #4]
#endif

#ifdef CONFIG_SYS_S3C_NAND_HWECC
	nand->ecc.hwctl		= s3c_nand_enable_hwecc;
	nand->ecc.calculate	= s3c_nand_calculate_ecc;
	nand->ecc.correct	= s3c_nand_correct_data;
c7e194ac:	e58530c8 	str	r3, [r5, #200]

	/*
	 * If you get more than 1 NAND-chip with different page-sizes on the
	 * board one day, it will get more complicated...
	 */
	nand->ecc.mode		= NAND_ECC_HW;
c7e194b0:	e3a03002 	mov	r3, #2	; 0x2
c7e194b4:	e585309c 	str	r3, [r5, #156]
	nand->ecc.bytes		= CONFIG_SYS_NAND_ECCBYTES;
#else
	nand->ecc.mode		= NAND_ECC_SOFT;
#endif /* ! CONFIG_SYS_S3C_CONFIG_SYS_NAND_HWECC */

	nand->priv		= nand_cs + chip_n++;
c7e194b8:	e5864004 	str	r4, [r6, #4]
	if (chip_n >= MAX_CHIPS)
		return -ENODEV;

	NFCONT_REG = (NFCONT_REG & ~NFCONT_WP) | NFCONT_ENABLE | 0x6;

	nand->IO_ADDR_R		= (void __iomem *)NFDATA;
c7e194bc:	e585c000 	str	ip, [r5]
	nand->ecc.mode		= NAND_ECC_SOFT;
#endif /* ! CONFIG_SYS_S3C_CONFIG_SYS_NAND_HWECC */

	nand->priv		= nand_cs + chip_n++;
	return 0;
}
c7e194c0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e194c4:	c7e42030 	.word	0xc7e42030
c7e194c8:	70200000 	.word	0x70200000
c7e194cc:	c7e3a1f4 	.word	0xc7e3a1f4
c7e194d0:	70200010 	.word	0x70200010
c7e194d4:	c7e1927c 	.word	0xc7e1927c
c7e194d8:	c7e192e4 	.word	0xc7e192e4
c7e194dc:	c7e1923c 	.word	0xc7e1923c
c7e194e0:	c7e192f8 	.word	0xc7e192f8
c7e194e4:	c7e19348 	.word	0xc7e19348
c7e194e8:	c7e194ec 	.word	0xc7e194ec

c7e194ec <s3c_nand_correct_data>:
        }	
#elif defined(CONFIG_SYS_NAND_HWECC_8BIT)
	u_long nf8eccerr0, nf8eccerr1, nf8eccerr2, nfmlc8bitpt0, nfmlc8bitpt1;
	u_char err_type;

	nf8eccerr0 = readl(NF8ECCERR0);
c7e194ec:	e59f316c 	ldr	r3, [pc, #364]	; c7e19660 <s3c_nand_correct_data+0x174>
 * If uncorrectable errors occured, return -1.
 * Written by jsgood
 */
static int s3c_nand_correct_data(struct mtd_info *mtd, u_char *dat,
				 u_char *read_ecc, u_char *calc_ecc)
{
c7e194f0:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e194f4:	e1a04001 	mov	r4, r1
        }	
#elif defined(CONFIG_SYS_NAND_HWECC_8BIT)
	u_long nf8eccerr0, nf8eccerr1, nf8eccerr2, nfmlc8bitpt0, nfmlc8bitpt1;
	u_char err_type;

	nf8eccerr0 = readl(NF8ECCERR0);
c7e194f8:	e593b044 	ldr	fp, [r3, #68]
	nf8eccerr1 = readl(NF8ECCERR1);
c7e194fc:	e593a048 	ldr	sl, [r3, #72]
	nf8eccerr2 = readl(NF8ECCERR2);
c7e19500:	e593604c 	ldr	r6, [r3, #76]
	nfmlc8bitpt0 = readl(NFMLC8BITPT0);
c7e19504:	e5939060 	ldr	r9, [r3, #96]
	nfmlc8bitpt1 = readl(NFMLC8BITPT1);
c7e19508:	e5937064 	ldr	r7, [r3, #100]

	err_type = (nf8eccerr0 >> 25) & 0xf;

	/* No error, If free page (all 0xff) */
	if ((nf8eccerr0 >> 29) & 0x1)
c7e1950c:	e31b0202 	tst	fp, #536870912	; 0x20000000
c7e19510:	1a00004f 	bne	c7e19654 <s3c_nand_correct_data+0x168>
	nf8eccerr1 = readl(NF8ECCERR1);
	nf8eccerr2 = readl(NF8ECCERR2);
	nfmlc8bitpt0 = readl(NFMLC8BITPT0);
	nfmlc8bitpt1 = readl(NFMLC8BITPT1);

	err_type = (nf8eccerr0 >> 25) & 0xf;
c7e19514:	e1a03cab 	lsr	r3, fp, #25
c7e19518:	e203500f 	and	r5, r3, #15	; 0xf

	/* No error, If free page (all 0xff) */
	if ((nf8eccerr0 >> 29) & 0x1)
		err_type = 0;

	switch (err_type) {
c7e1951c:	e3550008 	cmp	r5, #8	; 0x8
c7e19520:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
c7e19524:	ea000008 	b	c7e1954c <s3c_nand_correct_data+0x60>
c7e19528:	c7e19654 	.word	0xc7e19654
c7e1952c:	c7e19630 	.word	0xc7e19630
c7e19530:	c7e1960c 	.word	0xc7e1960c
c7e19534:	c7e195ec 	.word	0xc7e195ec
c7e19538:	c7e195c8 	.word	0xc7e195c8
c7e1953c:	c7e195b0 	.word	0xc7e195b0
c7e19540:	c7e19590 	.word	0xc7e19590
c7e19544:	c7e1956c 	.word	0xc7e1956c
c7e19548:	c7e19554 	.word	0xc7e19554
c7e1954c:	e3e05000 	mvn	r5, #0	; 0x0
c7e19550:	ea000040 	b	c7e19658 <s3c_nand_correct_data+0x16c>
		case 8: /* 8 bit error (Correctable) */
			dat[(nf8eccerr2 >> 22) & 0x3ff] ^= ((nfmlc8bitpt1 >> 24) & 0xff);
c7e19554:	e7d13b26 	ldrb	r3, [r1, r6, lsr #22]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e19558:	e59f0104 	ldr	r0, [pc, #260]	; c7e19664 <s3c_nand_correct_data+0x178>
	if ((nf8eccerr0 >> 29) & 0x1)
		err_type = 0;

	switch (err_type) {
		case 8: /* 8 bit error (Correctable) */
			dat[(nf8eccerr2 >> 22) & 0x3ff] ^= ((nfmlc8bitpt1 >> 24) & 0xff);
c7e1955c:	e0233c27 	eor	r3, r3, r7, lsr #24
c7e19560:	e7c13b26 	strb	r3, [r1, r6, lsr #22]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e19564:	e3a01008 	mov	r1, #8	; 0x8
c7e19568:	ebffbd3a 	bl	c7e08a58 <printf>

		case 7: /* 7 bit error (Correctable) */
			dat[(nf8eccerr2 >> 11) & 0x3ff] ^= ((nfmlc8bitpt1 >> 16) & 0xff);
c7e1956c:	e1a025a6 	lsr	r2, r6, #11
c7e19570:	e1a02b02 	lsl	r2, r2, #22
c7e19574:	e1a02b22 	lsr	r2, r2, #22
c7e19578:	e7d43002 	ldrb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e1957c:	e59f00e0 	ldr	r0, [pc, #224]	; c7e19664 <s3c_nand_correct_data+0x178>
		case 8: /* 8 bit error (Correctable) */
			dat[(nf8eccerr2 >> 22) & 0x3ff] ^= ((nfmlc8bitpt1 >> 24) & 0xff);
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);

		case 7: /* 7 bit error (Correctable) */
			dat[(nf8eccerr2 >> 11) & 0x3ff] ^= ((nfmlc8bitpt1 >> 16) & 0xff);
c7e19580:	e0233827 	eor	r3, r3, r7, lsr #16
c7e19584:	e7c43002 	strb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e19588:	e1a01005 	mov	r1, r5
c7e1958c:	ebffbd31 	bl	c7e08a58 <printf>

		case 6: /* 6 bit error (Correctable) */
			dat[nf8eccerr2 & 0x3ff] ^= ((nfmlc8bitpt1 >> 8) & 0xff);
c7e19590:	e1a02b06 	lsl	r2, r6, #22
c7e19594:	e1a02b22 	lsr	r2, r2, #22
c7e19598:	e7d43002 	ldrb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e1959c:	e59f00c0 	ldr	r0, [pc, #192]	; c7e19664 <s3c_nand_correct_data+0x178>
		case 7: /* 7 bit error (Correctable) */
			dat[(nf8eccerr2 >> 11) & 0x3ff] ^= ((nfmlc8bitpt1 >> 16) & 0xff);
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);

		case 6: /* 6 bit error (Correctable) */
			dat[nf8eccerr2 & 0x3ff] ^= ((nfmlc8bitpt1 >> 8) & 0xff);
c7e195a0:	e0233427 	eor	r3, r3, r7, lsr #8
c7e195a4:	e7c43002 	strb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e195a8:	e1a01005 	mov	r1, r5
c7e195ac:	ebffbd29 	bl	c7e08a58 <printf>

		case 5: /* 5 bit error (Correctable) */
			dat[(nf8eccerr1 >> 22) & 0x3ff] ^= (nfmlc8bitpt1 & 0xff);
c7e195b0:	e7d43b2a 	ldrb	r3, [r4, sl, lsr #22]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e195b4:	e59f00a8 	ldr	r0, [pc, #168]	; c7e19664 <s3c_nand_correct_data+0x178>
		case 6: /* 6 bit error (Correctable) */
			dat[nf8eccerr2 & 0x3ff] ^= ((nfmlc8bitpt1 >> 8) & 0xff);
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);

		case 5: /* 5 bit error (Correctable) */
			dat[(nf8eccerr1 >> 22) & 0x3ff] ^= (nfmlc8bitpt1 & 0xff);
c7e195b8:	e0233007 	eor	r3, r3, r7
c7e195bc:	e7c43b2a 	strb	r3, [r4, sl, lsr #22]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e195c0:	e1a01005 	mov	r1, r5
c7e195c4:	ebffbd23 	bl	c7e08a58 <printf>

		case 4: /* 4 bit error (Correctable) */
			dat[(nf8eccerr1 >> 11) & 0x3ff] ^= ((nfmlc8bitpt0 >> 24) & 0xff);
c7e195c8:	e1a025aa 	lsr	r2, sl, #11
c7e195cc:	e1a02b02 	lsl	r2, r2, #22
c7e195d0:	e1a02b22 	lsr	r2, r2, #22
c7e195d4:	e7d43002 	ldrb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e195d8:	e59f0084 	ldr	r0, [pc, #132]	; c7e19664 <s3c_nand_correct_data+0x178>
		case 5: /* 5 bit error (Correctable) */
			dat[(nf8eccerr1 >> 22) & 0x3ff] ^= (nfmlc8bitpt1 & 0xff);
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);

		case 4: /* 4 bit error (Correctable) */
			dat[(nf8eccerr1 >> 11) & 0x3ff] ^= ((nfmlc8bitpt0 >> 24) & 0xff);
c7e195dc:	e0233c29 	eor	r3, r3, r9, lsr #24
c7e195e0:	e7c43002 	strb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e195e4:	e1a01005 	mov	r1, r5
c7e195e8:	ebffbd1a 	bl	c7e08a58 <printf>

		case 3: /* 3 bit error (Correctable) */
			dat[nf8eccerr1 & 0x3ff] ^= ((nfmlc8bitpt0 >> 16) & 0xff);
c7e195ec:	e1a02b0a 	lsl	r2, sl, #22
c7e195f0:	e1a02b22 	lsr	r2, r2, #22
c7e195f4:	e7d43002 	ldrb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e195f8:	e59f0064 	ldr	r0, [pc, #100]	; c7e19664 <s3c_nand_correct_data+0x178>
		case 4: /* 4 bit error (Correctable) */
			dat[(nf8eccerr1 >> 11) & 0x3ff] ^= ((nfmlc8bitpt0 >> 24) & 0xff);
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);

		case 3: /* 3 bit error (Correctable) */
			dat[nf8eccerr1 & 0x3ff] ^= ((nfmlc8bitpt0 >> 16) & 0xff);
c7e195fc:	e0233829 	eor	r3, r3, r9, lsr #16
c7e19600:	e7c43002 	strb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e19604:	e1a01005 	mov	r1, r5
c7e19608:	ebffbd12 	bl	c7e08a58 <printf>

		case 2: /* 2 bit error (Correctable) */
			dat[(nf8eccerr0 >> 15) & 0x3ff] ^= ((nfmlc8bitpt0 >> 8) & 0xff);
c7e1960c:	e1a027ab 	lsr	r2, fp, #15
c7e19610:	e1a02b02 	lsl	r2, r2, #22
c7e19614:	e1a02b22 	lsr	r2, r2, #22
c7e19618:	e7d43002 	ldrb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e1961c:	e59f0040 	ldr	r0, [pc, #64]	; c7e19664 <s3c_nand_correct_data+0x178>
		case 3: /* 3 bit error (Correctable) */
			dat[nf8eccerr1 & 0x3ff] ^= ((nfmlc8bitpt0 >> 16) & 0xff);
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);

		case 2: /* 2 bit error (Correctable) */
			dat[(nf8eccerr0 >> 15) & 0x3ff] ^= ((nfmlc8bitpt0 >> 8) & 0xff);
c7e19620:	e0233429 	eor	r3, r3, r9, lsr #8
c7e19624:	e7c43002 	strb	r3, [r4, r2]
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e19628:	e1a01005 	mov	r1, r5
c7e1962c:	ebffbd09 	bl	c7e08a58 <printf>

		case 1: /* 1 bit error (Correctable) */
			printf("S3C NAND: %d bit(s) error detected, corrected successfully\n", err_type);
c7e19630:	e59f002c 	ldr	r0, [pc, #44]	; c7e19664 <s3c_nand_correct_data+0x178>
c7e19634:	e1a01005 	mov	r1, r5
c7e19638:	ebffbd06 	bl	c7e08a58 <printf>
			dat[nf8eccerr0 & 0x3ff] ^= (nfmlc8bitpt0 & 0xff);
c7e1963c:	e1a02b0b 	lsl	r2, fp, #22
c7e19640:	e1a02b22 	lsr	r2, r2, #22
c7e19644:	e7d43002 	ldrb	r3, [r4, r2]
c7e19648:	e0233009 	eor	r3, r3, r9
c7e1964c:	e7c43002 	strb	r3, [r4, r2]
c7e19650:	ea000000 	b	c7e19658 <s3c_nand_correct_data+0x16c>
			ret = err_type;
			break;
c7e19654:	e3a05000 	mov	r5, #0	; 0x0
			ret = 0;
			break;
	}
#endif
	return ret;
}
c7e19658:	e1a00005 	mov	r0, r5
c7e1965c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e19660:	70200000 	.word	0x70200000
c7e19664:	c7e33c51 	.word	0xc7e33c51

c7e19668 <dm9000_outblk_8bit>:
	DM9000_DBG("\n");
}
#endif

static void dm9000_outblk_8bit(volatile void *data_ptr, int count)
{
c7e19668:	e3a0c000 	mov	ip, #0	; 0x0
c7e1966c:	ea000003 	b	c7e19680 <dm9000_outblk_8bit+0x18>
	int i;
	for (i = 0; i < count; i++)
		DM9000_outb((((u8 *) data_ptr)[i] & 0xff), DM9000_DATA);
c7e19670:	e7d0200c 	ldrb	r2, [r0, ip]
c7e19674:	e59f3010 	ldr	r3, [pc, #16]	; c7e1968c <dm9000_outblk_8bit+0x24>
#endif

static void dm9000_outblk_8bit(volatile void *data_ptr, int count)
{
	int i;
	for (i = 0; i < count; i++)
c7e19678:	e28cc001 	add	ip, ip, #1	; 0x1
		DM9000_outb((((u8 *) data_ptr)[i] & 0xff), DM9000_DATA);
c7e1967c:	e5c32004 	strb	r2, [r3, #4]
#endif

static void dm9000_outblk_8bit(volatile void *data_ptr, int count)
{
	int i;
	for (i = 0; i < count; i++)
c7e19680:	e15c0001 	cmp	ip, r1
c7e19684:	bafffff9 	blt	c7e19670 <dm9000_outblk_8bit+0x8>
		DM9000_outb((((u8 *) data_ptr)[i] & 0xff), DM9000_DATA);
}
c7e19688:	e12fff1e 	bx	lr
c7e1968c:	18000300 	.word	0x18000300

c7e19690 <dm9000_outblk_16bit>:

static void dm9000_outblk_16bit(volatile void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 1) / 2;
c7e19690:	e2811001 	add	r1, r1, #1	; 0x1
c7e19694:	e0811fa1 	add	r1, r1, r1, lsr #31
c7e19698:	e1a010c1 	asr	r1, r1, #1
c7e1969c:	e3a0c000 	mov	ip, #0	; 0x0
c7e196a0:	ea000003 	b	c7e196b4 <dm9000_outblk_16bit+0x24>

	for (i = 0; i < tmplen; i++)
		DM9000_outw(((u16 *) data_ptr)[i], DM9000_DATA);
c7e196a4:	e19020b3 	ldrh	r2, [r0, r3]
c7e196a8:	e59f3014 	ldr	r3, [pc, #20]	; c7e196c4 <dm9000_outblk_16bit+0x34>
static void dm9000_outblk_16bit(volatile void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 1) / 2;

	for (i = 0; i < tmplen; i++)
c7e196ac:	e28cc001 	add	ip, ip, #1	; 0x1
		DM9000_outw(((u16 *) data_ptr)[i], DM9000_DATA);
c7e196b0:	e1c320b4 	strh	r2, [r3, #4]
static void dm9000_outblk_16bit(volatile void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 1) / 2;

	for (i = 0; i < tmplen; i++)
c7e196b4:	e15c0001 	cmp	ip, r1
		DM9000_outw(((u16 *) data_ptr)[i], DM9000_DATA);
c7e196b8:	e1a0308c 	lsl	r3, ip, #1
static void dm9000_outblk_16bit(volatile void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 1) / 2;

	for (i = 0; i < tmplen; i++)
c7e196bc:	3afffff8 	bcc	c7e196a4 <dm9000_outblk_16bit+0x14>
		DM9000_outw(((u16 *) data_ptr)[i], DM9000_DATA);
}
c7e196c0:	e12fff1e 	bx	lr
c7e196c4:	18000300 	.word	0x18000300

c7e196c8 <dm9000_outblk_32bit>:
static void dm9000_outblk_32bit(volatile void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 3) / 4;
c7e196c8:	e2913003 	adds	r3, r1, #3	; 0x3
c7e196cc:	42813006 	addmi	r3, r1, #6	; 0x6
c7e196d0:	e1a0c143 	asr	ip, r3, #2
c7e196d4:	e3a01000 	mov	r1, #0	; 0x0
c7e196d8:	ea000003 	b	c7e196ec <dm9000_outblk_32bit+0x24>

	for (i = 0; i < tmplen; i++)
		DM9000_outl(((u32 *) data_ptr)[i], DM9000_DATA);
c7e196dc:	e7902101 	ldr	r2, [r0, r1, lsl #2]
c7e196e0:	e3a03306 	mov	r3, #402653184	; 0x18000000
c7e196e4:	e5832304 	str	r2, [r3, #772]
static void dm9000_outblk_32bit(volatile void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 3) / 4;

	for (i = 0; i < tmplen; i++)
c7e196e8:	e2811001 	add	r1, r1, #1	; 0x1
c7e196ec:	e151000c 	cmp	r1, ip
c7e196f0:	3afffff9 	bcc	c7e196dc <dm9000_outblk_32bit+0x14>
		DM9000_outl(((u32 *) data_ptr)[i], DM9000_DATA);
}
c7e196f4:	e12fff1e 	bx	lr

c7e196f8 <dm9000_inblk_8bit>:

static void dm9000_inblk_8bit(void *data_ptr, int count)
{
c7e196f8:	e3a02000 	mov	r2, #0	; 0x0
c7e196fc:	ea000004 	b	c7e19714 <dm9000_inblk_8bit+0x1c>
	int i;
	for (i = 0; i < count; i++)
		((u8 *) data_ptr)[i] = DM9000_inb(DM9000_DATA);
c7e19700:	e59f3018 	ldr	r3, [pc, #24]	; c7e19720 <dm9000_inblk_8bit+0x28>
c7e19704:	e5d33004 	ldrb	r3, [r3, #4]
c7e19708:	e20330ff 	and	r3, r3, #255	; 0xff
c7e1970c:	e7c03002 	strb	r3, [r0, r2]
}

static void dm9000_inblk_8bit(void *data_ptr, int count)
{
	int i;
	for (i = 0; i < count; i++)
c7e19710:	e2822001 	add	r2, r2, #1	; 0x1
c7e19714:	e1520001 	cmp	r2, r1
c7e19718:	bafffff8 	blt	c7e19700 <dm9000_inblk_8bit+0x8>
		((u8 *) data_ptr)[i] = DM9000_inb(DM9000_DATA);
}
c7e1971c:	e12fff1e 	bx	lr
c7e19720:	18000300 	.word	0x18000300

c7e19724 <dm9000_inblk_16bit>:

static void dm9000_inblk_16bit(void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 1) / 2;
c7e19724:	e2811001 	add	r1, r1, #1	; 0x1
c7e19728:	e0811fa1 	add	r1, r1, r1, lsr #31
c7e1972c:	e1a010c1 	asr	r1, r1, #1
c7e19730:	e3a0c000 	mov	ip, #0	; 0x0
c7e19734:	ea000004 	b	c7e1974c <dm9000_inblk_16bit+0x28>

	for (i = 0; i < tmplen; i++)
		((u16 *) data_ptr)[i] = DM9000_inw(DM9000_DATA);
c7e19738:	e59f3018 	ldr	r3, [pc, #24]	; c7e19758 <dm9000_inblk_16bit+0x34>
c7e1973c:	e1d330b4 	ldrh	r3, [r3, #4]
c7e19740:	e1a0208c 	lsl	r2, ip, #1
c7e19744:	e18030b2 	strh	r3, [r0, r2]
static void dm9000_inblk_16bit(void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 1) / 2;

	for (i = 0; i < tmplen; i++)
c7e19748:	e28cc001 	add	ip, ip, #1	; 0x1
c7e1974c:	e15c0001 	cmp	ip, r1
c7e19750:	3afffff8 	bcc	c7e19738 <dm9000_inblk_16bit+0x14>
		((u16 *) data_ptr)[i] = DM9000_inw(DM9000_DATA);
}
c7e19754:	e12fff1e 	bx	lr
c7e19758:	18000300 	.word	0x18000300

c7e1975c <dm9000_inblk_32bit>:
static void dm9000_inblk_32bit(void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 3) / 4;
c7e1975c:	e2913003 	adds	r3, r1, #3	; 0x3
c7e19760:	42813006 	addmi	r3, r1, #6	; 0x6
c7e19764:	e1a01143 	asr	r1, r3, #2
c7e19768:	e3a02000 	mov	r2, #0	; 0x0
c7e1976c:	ea000003 	b	c7e19780 <dm9000_inblk_32bit+0x24>

	for (i = 0; i < tmplen; i++)
		((u32 *) data_ptr)[i] = DM9000_inl(DM9000_DATA);
c7e19770:	e3a03306 	mov	r3, #402653184	; 0x18000000
c7e19774:	e5933304 	ldr	r3, [r3, #772]
c7e19778:	e7803102 	str	r3, [r0, r2, lsl #2]
static void dm9000_inblk_32bit(void *data_ptr, int count)
{
	int i;
	u32 tmplen = (count + 3) / 4;

	for (i = 0; i < tmplen; i++)
c7e1977c:	e2822001 	add	r2, r2, #1	; 0x1
c7e19780:	e1520001 	cmp	r2, r1
c7e19784:	3afffff9 	bcc	c7e19770 <dm9000_inblk_32bit+0x14>
		((u32 *) data_ptr)[i] = DM9000_inl(DM9000_DATA);
}
c7e19788:	e12fff1e 	bx	lr

c7e1978c <dm9000_rx_status_32bit>:

static void dm9000_rx_status_32bit(u16 *RxStatus, u16 *RxLen)
{
	u32 tmpdata;

	DM9000_outb(DM9000_MRCMD, DM9000_IO);
c7e1978c:	e59f301c 	ldr	r3, [pc, #28]	; c7e197b0 <dm9000_rx_status_32bit+0x24>
c7e19790:	e3e0200d 	mvn	r2, #13	; 0xd
c7e19794:	e5c32000 	strb	r2, [r3]

	tmpdata = DM9000_inl(DM9000_DATA);
c7e19798:	e2433c03 	sub	r3, r3, #768	; 0x300
c7e1979c:	e5933304 	ldr	r3, [r3, #772]
	*RxStatus = __le16_to_cpu(tmpdata);
	*RxLen = __le16_to_cpu(tmpdata >> 16);
c7e197a0:	e1a02823 	lsr	r2, r3, #16
	u32 tmpdata;

	DM9000_outb(DM9000_MRCMD, DM9000_IO);

	tmpdata = DM9000_inl(DM9000_DATA);
	*RxStatus = __le16_to_cpu(tmpdata);
c7e197a4:	e1c030b0 	strh	r3, [r0]
	*RxLen = __le16_to_cpu(tmpdata >> 16);
c7e197a8:	e1c120b0 	strh	r2, [r1]
}
c7e197ac:	e12fff1e 	bx	lr
c7e197b0:	18000300 	.word	0x18000300

c7e197b4 <dm9000_rx_status_16bit>:

static void dm9000_rx_status_16bit(u16 *RxStatus, u16 *RxLen)
{
	DM9000_outb(DM9000_MRCMD, DM9000_IO);
c7e197b4:	e59f2018 	ldr	r2, [pc, #24]	; c7e197d4 <dm9000_rx_status_16bit+0x20>
c7e197b8:	e3e0300d 	mvn	r3, #13	; 0xd
c7e197bc:	e5c23000 	strb	r3, [r2]

	*RxStatus = __le16_to_cpu(DM9000_inw(DM9000_DATA));
c7e197c0:	e1d230b4 	ldrh	r3, [r2, #4]
c7e197c4:	e1c030b0 	strh	r3, [r0]
	*RxLen = __le16_to_cpu(DM9000_inw(DM9000_DATA));
c7e197c8:	e1d230b4 	ldrh	r3, [r2, #4]
c7e197cc:	e1c130b0 	strh	r3, [r1]
}
c7e197d0:	e12fff1e 	bx	lr
c7e197d4:	18000300 	.word	0x18000300

c7e197d8 <dm9000_rx_status_8bit>:

static void dm9000_rx_status_8bit(u16 *RxStatus, u16 *RxLen)
{
	DM9000_outb(DM9000_MRCMD, DM9000_IO);
c7e197d8:	e59fc038 	ldr	ip, [pc, #56]	; c7e19818 <dm9000_rx_status_8bit+0x40>
c7e197dc:	e3e0300d 	mvn	r3, #13	; 0xd
c7e197e0:	e5cc3000 	strb	r3, [ip]

	*RxStatus =
	    __le16_to_cpu(DM9000_inb(DM9000_DATA) +
c7e197e4:	e5dc2004 	ldrb	r2, [ip, #4]
c7e197e8:	e20220ff 	and	r2, r2, #255	; 0xff
c7e197ec:	e5dc3004 	ldrb	r3, [ip, #4]
c7e197f0:	e20330ff 	and	r3, r3, #255	; 0xff

static void dm9000_rx_status_8bit(u16 *RxStatus, u16 *RxLen)
{
	DM9000_outb(DM9000_MRCMD, DM9000_IO);

	*RxStatus =
c7e197f4:	e0822403 	add	r2, r2, r3, lsl #8
c7e197f8:	e1c020b0 	strh	r2, [r0]
	    __le16_to_cpu(DM9000_inb(DM9000_DATA) +
			  (DM9000_inb(DM9000_DATA) << 8));
	*RxLen =
	    __le16_to_cpu(DM9000_inb(DM9000_DATA) +
c7e197fc:	e5dc2004 	ldrb	r2, [ip, #4]
c7e19800:	e20220ff 	and	r2, r2, #255	; 0xff
c7e19804:	e5dc3004 	ldrb	r3, [ip, #4]
c7e19808:	e20330ff 	and	r3, r3, #255	; 0xff
	DM9000_outb(DM9000_MRCMD, DM9000_IO);

	*RxStatus =
	    __le16_to_cpu(DM9000_inb(DM9000_DATA) +
			  (DM9000_inb(DM9000_DATA) << 8));
	*RxLen =
c7e1980c:	e0822403 	add	r2, r2, r3, lsl #8
c7e19810:	e1c120b0 	strh	r2, [r1]
	    __le16_to_cpu(DM9000_inb(DM9000_DATA) +
			  (DM9000_inb(DM9000_DATA) << 8));
}
c7e19814:	e12fff1e 	bx	lr
c7e19818:	18000300 	.word	0x18000300

c7e1981c <DM9000_ior>:
   Read a byte from I/O port
*/
static u8
DM9000_ior(int reg)
{
	DM9000_outb(reg, DM9000_IO);
c7e1981c:	e20000ff 	and	r0, r0, #255	; 0xff
c7e19820:	e59f300c 	ldr	r3, [pc, #12]	; c7e19834 <DM9000_ior+0x18>
c7e19824:	e5c30000 	strb	r0, [r3]
	return DM9000_inb(DM9000_DATA);
c7e19828:	e5d30004 	ldrb	r0, [r3, #4]
c7e1982c:	e20000ff 	and	r0, r0, #255	; 0xff
}
c7e19830:	e12fff1e 	bx	lr
c7e19834:	18000300 	.word	0x18000300

c7e19838 <DM9000_iow>:
   Write a byte to I/O port
*/
static void
DM9000_iow(int reg, u8 value)
{
	DM9000_outb(reg, DM9000_IO);
c7e19838:	e20000ff 	and	r0, r0, #255	; 0xff
c7e1983c:	e59f3008 	ldr	r3, [pc, #8]	; c7e1984c <DM9000_iow+0x14>
c7e19840:	e5c30000 	strb	r0, [r3]
	DM9000_outb(value, DM9000_DATA);
c7e19844:	e5c31004 	strb	r1, [r3, #4]
}
c7e19848:	e12fff1e 	bx	lr
c7e1984c:	18000300 	.word	0x18000300

c7e19850 <dm9000_reset>:
}

/* General Purpose dm9000 reset routine */
static void
dm9000_reset(void)
{
c7e19850:	e92d4010 	push	{r4, lr}

	/* Reset DM9000,
	   see DM9000 Application Notes V1.22 Jun 11, 2004 page 29 */

	/* DEBUG: Make all GPIO0 outputs, all others inputs */
	DM9000_iow(DM9000_GPCR, GPCR_GPIO0_OUT);
c7e19854:	e3a0001e 	mov	r0, #30	; 0x1e
c7e19858:	e3a01001 	mov	r1, #1	; 0x1
c7e1985c:	ebfffff5 	bl	c7e19838 <DM9000_iow>
	/* Step 1: Power internal PHY by writing 0 to GPIO0 pin */
	DM9000_iow(DM9000_GPR, 0);
c7e19860:	e3a0001f 	mov	r0, #31	; 0x1f
c7e19864:	e3a01000 	mov	r1, #0	; 0x0
c7e19868:	ebfffff2 	bl	c7e19838 <DM9000_iow>
	/* Step 2: Software reset */
	DM9000_iow(DM9000_NCR, (NCR_LBK_INT_MAC | NCR_RST));
c7e1986c:	e3a00000 	mov	r0, #0	; 0x0
c7e19870:	e3a01003 	mov	r1, #3	; 0x3
c7e19874:	ebffffef 	bl	c7e19838 <DM9000_iow>

	do {
		DM9000_DBG("resetting the DM9000, 1st reset\n");
		udelay(25); /* Wait at least 20 us */
c7e19878:	e3a00019 	mov	r0, #25	; 0x19
c7e1987c:	eb002591 	bl	c7e22ec8 <udelay>
	} while (DM9000_ior(DM9000_NCR) & 1);
c7e19880:	e3a00000 	mov	r0, #0	; 0x0
c7e19884:	ebffffe4 	bl	c7e1981c <DM9000_ior>
c7e19888:	e2104001 	ands	r4, r0, #1	; 0x1
c7e1988c:	1afffff9 	bne	c7e19878 <dm9000_reset+0x28>

	DM9000_iow(DM9000_NCR, 0);
c7e19890:	e1a01004 	mov	r1, r4
c7e19894:	e1a00004 	mov	r0, r4
c7e19898:	ebffffe6 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_NCR, (NCR_LBK_INT_MAC | NCR_RST)); /* Issue a second reset */
c7e1989c:	e1a00004 	mov	r0, r4
c7e198a0:	e3a01003 	mov	r1, #3	; 0x3
c7e198a4:	ebffffe3 	bl	c7e19838 <DM9000_iow>

	do {
		DM9000_DBG("resetting the DM9000, 2nd reset\n");
		udelay(25); /* Wait at least 20 us */
c7e198a8:	e3a00019 	mov	r0, #25	; 0x19
c7e198ac:	eb002585 	bl	c7e22ec8 <udelay>
	} while (DM9000_ior(DM9000_NCR) & 1);
c7e198b0:	e3a00000 	mov	r0, #0	; 0x0
c7e198b4:	ebffffd8 	bl	c7e1981c <DM9000_ior>
c7e198b8:	e3100001 	tst	r0, #1	; 0x1
c7e198bc:	1afffff9 	bne	c7e198a8 <dm9000_reset+0x58>

	/* Check whether the ethernet controller is present */
	if ((DM9000_ior(DM9000_PIDL) != 0x0) ||
c7e198c0:	e3a0002a 	mov	r0, #42	; 0x2a
c7e198c4:	ebffffd4 	bl	c7e1981c <DM9000_ior>
c7e198c8:	e3500000 	cmp	r0, #0	; 0x0
c7e198cc:	1a000003 	bne	c7e198e0 <dm9000_reset+0x90>
c7e198d0:	e280002b 	add	r0, r0, #43	; 0x2b
c7e198d4:	ebffffd0 	bl	c7e1981c <DM9000_ior>
c7e198d8:	e3500090 	cmp	r0, #144	; 0x90
c7e198dc:	08bd8010 	popeq	{r4, pc}
	    (DM9000_ior(DM9000_PIDH) != 0x90))
		printf("ERROR: resetting DM9000 -> not responding\n");
c7e198e0:	e59f0004 	ldr	r0, [pc, #4]	; c7e198ec <dm9000_reset+0x9c>
}
c7e198e4:	e8bd4010 	pop	{r4, lr}
	} while (DM9000_ior(DM9000_NCR) & 1);

	/* Check whether the ethernet controller is present */
	if ((DM9000_ior(DM9000_PIDL) != 0x0) ||
	    (DM9000_ior(DM9000_PIDH) != 0x90))
		printf("ERROR: resetting DM9000 -> not responding\n");
c7e198e8:	eaffbc5a 	b	c7e08a58 <printf>
c7e198ec:	c7e33c8d 	.word	0xc7e33c8d

c7e198f0 <dm9000_rx>:

/*
  Received a packet and pass to upper layer
*/
static int dm9000_rx(struct eth_device *netdev)
{
c7e198f0:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
	u8 rxbyte, *rdptr = (u8 *) NetRxPackets[0];
c7e198f4:	e59f311c 	ldr	r3, [pc, #284]	; c7e19a18 <dm9000_rx+0x128>
	u16 RxStatus, RxLen = 0;
	struct board_info *db = &dm9000_info;

	/* Check packet ready or not, we must check
	   the ISR status first for DM9000A */
	if (!(DM9000_ior(DM9000_ISR) & 0x01)) /* Rx-ISR bit must be set. */
c7e198f8:	e3a000fe 	mov	r0, #254	; 0xfe
/*
  Received a packet and pass to upper layer
*/
static int dm9000_rx(struct eth_device *netdev)
{
	u8 rxbyte, *rdptr = (u8 *) NetRxPackets[0];
c7e198fc:	e5935000 	ldr	r5, [r3]
	u16 RxStatus, RxLen = 0;
c7e19900:	e3a03000 	mov	r3, #0	; 0x0
c7e19904:	e1cd30b4 	strh	r3, [sp, #4]
	struct board_info *db = &dm9000_info;

	/* Check packet ready or not, we must check
	   the ISR status first for DM9000A */
	if (!(DM9000_ior(DM9000_ISR) & 0x01)) /* Rx-ISR bit must be set. */
c7e19908:	ebffffc3 	bl	c7e1981c <DM9000_ior>
c7e1990c:	e3100001 	tst	r0, #1	; 0x1
c7e19910:	0a00003e 	beq	c7e19a10 <dm9000_rx+0x120>
		return 0;

	DM9000_iow(DM9000_ISR, 0x01); /* clear PR status latched in bit 0 */
c7e19914:	e3a000fe 	mov	r0, #254	; 0xfe
c7e19918:	e3a01001 	mov	r1, #1	; 0x1
c7e1991c:	ebffffc5 	bl	c7e19838 <DM9000_iow>

	/* There is _at least_ 1 package in the fifo, read them all */
	for (;;) {
		DM9000_ior(DM9000_MRCMDX);	/* Dummy read */
c7e19920:	e3a000f0 	mov	r0, #240	; 0xf0
c7e19924:	ebffffbc 	bl	c7e1981c <DM9000_ior>

		/* Get most updated data,
		   only look at bits 0:1, See application notes DM9000 */
		rxbyte = DM9000_inb(DM9000_DATA) & 0x03;
c7e19928:	e59f30ec 	ldr	r3, [pc, #236]	; c7e19a1c <dm9000_rx+0x12c>
c7e1992c:	e5d33004 	ldrb	r3, [r3, #4]
c7e19930:	e2034003 	and	r4, r3, #3	; 0x3

		/* Status check: this byte must be 0 or 1 */
		if (rxbyte > DM9000_PKT_RDY) {
c7e19934:	e3540001 	cmp	r4, #1	; 0x1
c7e19938:	9a000009 	bls	c7e19964 <dm9000_rx+0x74>
			DM9000_iow(DM9000_RCR, 0x00);	/* Stop Device */
c7e1993c:	e3a00005 	mov	r0, #5	; 0x5
c7e19940:	e3a01000 	mov	r1, #0	; 0x0
c7e19944:	ebffffbb 	bl	c7e19838 <DM9000_iow>
			DM9000_iow(DM9000_ISR, 0x80);	/* Stop INT request */
c7e19948:	e3a000fe 	mov	r0, #254	; 0xfe
c7e1994c:	e3a01080 	mov	r1, #128	; 0x80
c7e19950:	ebffffb8 	bl	c7e19838 <DM9000_iow>
			printf("DM9000 error: status check fail: 0x%x\n",
c7e19954:	e1a01004 	mov	r1, r4
c7e19958:	e59f00c0 	ldr	r0, [pc, #192]	; c7e19a20 <dm9000_rx+0x130>
c7e1995c:	ebffbc3d 	bl	c7e08a58 <printf>
c7e19960:	ea00002a 	b	c7e19a10 <dm9000_rx+0x120>
				rxbyte);
			return 0;
		}

		if (rxbyte != DM9000_PKT_RDY)
c7e19964:	1a000029 	bne	c7e19a10 <dm9000_rx+0x120>
			return 0; /* No packet received, ignore */

		DM9000_DBG("receiving packet\n");

		/* A packet ready now  & Get status/length */
		(db->rx_status)(&RxStatus, &RxLen);
c7e19968:	e59f40b4 	ldr	r4, [pc, #180]	; c7e19a24 <dm9000_rx+0x134>
c7e1996c:	e28d1004 	add	r1, sp, #4	; 0x4
c7e19970:	e28d0006 	add	r0, sp, #6	; 0x6
c7e19974:	e1a0e00f 	mov	lr, pc
c7e19978:	e594f0a4 	ldr	pc, [r4, #164]

		DM9000_DBG("rx status: 0x%04x rx len: %d\n", RxStatus, RxLen);

		/* Move data from DM9000 */
		/* Read received packet from RX SRAM */
		(db->inblk)(rdptr, RxLen);
c7e1997c:	e1a00005 	mov	r0, r5
c7e19980:	e1dd10b4 	ldrh	r1, [sp, #4]
c7e19984:	e1a0e00f 	mov	lr, pc
c7e19988:	e594f0a0 	ldr	pc, [r4, #160]

		if ((RxStatus & 0xbf00) || (RxLen < 0x40)
c7e1998c:	e1dd30b6 	ldrh	r3, [sp, #6]
c7e19990:	e3130cbf 	tst	r3, #48896	; 0xbf00
c7e19994:	1a000004 	bne	c7e199ac <dm9000_rx+0xbc>
c7e19998:	e1dd10b4 	ldrh	r1, [sp, #4]
c7e1999c:	e351003f 	cmp	r1, #63	; 0x3f
c7e199a0:	9a000001 	bls	c7e199ac <dm9000_rx+0xbc>
c7e199a4:	e3510c06 	cmp	r1, #1536	; 0x600
c7e199a8:	9a000014 	bls	c7e19a00 <dm9000_rx+0x110>
			|| (RxLen > DM9000_PKT_MAX)) {
			if (RxStatus & 0x100) {
c7e199ac:	e3130c01 	tst	r3, #256	; 0x100
c7e199b0:	0a000001 	beq	c7e199bc <dm9000_rx+0xcc>
				printf("rx fifo error\n");
c7e199b4:	e59f006c 	ldr	r0, [pc, #108]	; c7e19a28 <dm9000_rx+0x138>
c7e199b8:	ebffbc26 	bl	c7e08a58 <printf>
			}
			if (RxStatus & 0x200) {
c7e199bc:	e1dd30b6 	ldrh	r3, [sp, #6]
c7e199c0:	e3130c02 	tst	r3, #512	; 0x200
c7e199c4:	0a000001 	beq	c7e199d0 <dm9000_rx+0xe0>
				printf("rx crc error\n");
c7e199c8:	e59f005c 	ldr	r0, [pc, #92]	; c7e19a2c <dm9000_rx+0x13c>
c7e199cc:	ebffbc21 	bl	c7e08a58 <printf>
			}
			if (RxStatus & 0x8000) {
c7e199d0:	e1dd30f6 	ldrsh	r3, [sp, #6]
c7e199d4:	e3530000 	cmp	r3, #0	; 0x0
c7e199d8:	aa000001 	bge	c7e199e4 <dm9000_rx+0xf4>
				printf("rx length error\n");
c7e199dc:	e59f004c 	ldr	r0, [pc, #76]	; c7e19a30 <dm9000_rx+0x140>
c7e199e0:	ebffbc1c 	bl	c7e08a58 <printf>
			}
			if (RxLen > DM9000_PKT_MAX) {
c7e199e4:	e1dd30b4 	ldrh	r3, [sp, #4]
c7e199e8:	e3530c06 	cmp	r3, #1536	; 0x600
c7e199ec:	9affffcb 	bls	c7e19920 <dm9000_rx+0x30>
				printf("rx length too big\n");
c7e199f0:	e59f003c 	ldr	r0, [pc, #60]	; c7e19a34 <dm9000_rx+0x144>
c7e199f4:	ebffbc17 	bl	c7e08a58 <printf>
				dm9000_reset();
c7e199f8:	ebffff94 	bl	c7e19850 <dm9000_reset>
c7e199fc:	eaffffc7 	b	c7e19920 <dm9000_rx+0x30>
			}
		} else {
			DM9000_DMP_PACKET(__func__ , rdptr, RxLen);

			DM9000_DBG("passing packet to upper layer\n");
			NetReceive(NetRxPackets[0], RxLen);
c7e19a00:	e59f3010 	ldr	r3, [pc, #16]	; c7e19a18 <dm9000_rx+0x128>
c7e19a04:	e5930000 	ldr	r0, [r3]
c7e19a08:	eb00396a 	bl	c7e27fb8 <NetReceive>
c7e19a0c:	eaffffc3 	b	c7e19920 <dm9000_rx+0x30>
		}
	}
	return 0;
}
c7e19a10:	e3a00000 	mov	r0, #0	; 0x0
c7e19a14:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e19a18:	c7e74838 	.word	0xc7e74838
c7e19a1c:	18000300 	.word	0x18000300
c7e19a20:	c7e33cb8 	.word	0xc7e33cb8
c7e19a24:	c7e42038 	.word	0xc7e42038
c7e19a28:	c7e33cdf 	.word	0xc7e33cdf
c7e19a2c:	c7e33cee 	.word	0xc7e33cee
c7e19a30:	c7e33cfc 	.word	0xc7e33cfc
c7e19a34:	c7e33d0d 	.word	0xc7e33d0d

c7e19a38 <dm9000_halt>:
/*
  Stop the interface.
  The interface is stopped when it is brought.
*/
static void dm9000_halt(struct eth_device *netdev)
{
c7e19a38:	e92d4010 	push	{r4, lr}
static void
dm9000_phy_write(int reg, u16 value)
{

	/* Fill the phyxcer register into REG_0C */
	DM9000_iow(DM9000_EPAR, DM9000_PHY | reg);
c7e19a3c:	e3a0000c 	mov	r0, #12	; 0xc
c7e19a40:	e3a01040 	mov	r1, #64	; 0x40
c7e19a44:	ebffff7b 	bl	c7e19838 <DM9000_iow>

	/* Fill the written data into REG_0D & REG_0E */
	DM9000_iow(DM9000_EPDRL, (value & 0xff));
c7e19a48:	e3a0000d 	mov	r0, #13	; 0xd
c7e19a4c:	e3a01000 	mov	r1, #0	; 0x0
c7e19a50:	ebffff78 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPDRH, ((value >> 8) & 0xff));
c7e19a54:	e3a0000e 	mov	r0, #14	; 0xe
c7e19a58:	e3a01080 	mov	r1, #128	; 0x80
c7e19a5c:	ebffff75 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPCR, 0xa);	/* Issue phyxcer write command */
c7e19a60:	e3a0100a 	mov	r1, #10	; 0xa
c7e19a64:	e3a0000b 	mov	r0, #11	; 0xb
c7e19a68:	ebffff72 	bl	c7e19838 <DM9000_iow>
	udelay(500);			/* Wait write complete */
c7e19a6c:	e3a00f7d 	mov	r0, #500	; 0x1f4
c7e19a70:	eb002514 	bl	c7e22ec8 <udelay>
	DM9000_iow(DM9000_EPCR, 0x0);	/* Clear phyxcer write command */
c7e19a74:	e3a0000b 	mov	r0, #11	; 0xb
c7e19a78:	e3a01000 	mov	r1, #0	; 0x0
c7e19a7c:	ebffff6d 	bl	c7e19838 <DM9000_iow>
{
	DM9000_DBG("%s\n", __func__);

	/* RESET devie */
	dm9000_phy_write(0, 0x8000);	/* PHY RESET */
	DM9000_iow(DM9000_GPR, 0x01);	/* Power-Down PHY */
c7e19a80:	e3a0001f 	mov	r0, #31	; 0x1f
c7e19a84:	e3a01001 	mov	r1, #1	; 0x1
c7e19a88:	ebffff6a 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_IMR, 0x80);	/* Disable all interrupt */
c7e19a8c:	e3a000ff 	mov	r0, #255	; 0xff
c7e19a90:	e3a01080 	mov	r1, #128	; 0x80
c7e19a94:	ebffff67 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_RCR, 0x00);	/* Disable RX */
c7e19a98:	e3a00005 	mov	r0, #5	; 0x5
c7e19a9c:	e3a01000 	mov	r1, #0	; 0x0
}
c7e19aa0:	e8bd4010 	pop	{r4, lr}

	/* RESET devie */
	dm9000_phy_write(0, 0x8000);	/* PHY RESET */
	DM9000_iow(DM9000_GPR, 0x01);	/* Power-Down PHY */
	DM9000_iow(DM9000_IMR, 0x80);	/* Disable all interrupt */
	DM9000_iow(DM9000_RCR, 0x00);	/* Disable RX */
c7e19aa4:	eaffff63 	b	c7e19838 <DM9000_iow>

c7e19aa8 <dm9000_phy_read>:
dm9000_phy_read(int reg)
{
	u16 val;

	/* Fill the phyxcer register into REG_0C */
	DM9000_iow(DM9000_EPAR, DM9000_PHY | reg);
c7e19aa8:	e3801040 	orr	r1, r0, #64	; 0x40
/*
   Read a word from phyxcer
*/
static u16
dm9000_phy_read(int reg)
{
c7e19aac:	e92d4010 	push	{r4, lr}
	u16 val;

	/* Fill the phyxcer register into REG_0C */
	DM9000_iow(DM9000_EPAR, DM9000_PHY | reg);
c7e19ab0:	e20110ff 	and	r1, r1, #255	; 0xff
c7e19ab4:	e3a0000c 	mov	r0, #12	; 0xc
c7e19ab8:	ebffff5e 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPCR, 0xc);	/* Issue phyxcer read command */
c7e19abc:	e3a0100c 	mov	r1, #12	; 0xc
c7e19ac0:	e3a0000b 	mov	r0, #11	; 0xb
c7e19ac4:	ebffff5b 	bl	c7e19838 <DM9000_iow>
	udelay(100);			/* Wait read complete */
c7e19ac8:	e3a00064 	mov	r0, #100	; 0x64
c7e19acc:	eb0024fd 	bl	c7e22ec8 <udelay>
	DM9000_iow(DM9000_EPCR, 0x0);	/* Clear phyxcer read command */
c7e19ad0:	e3a01000 	mov	r1, #0	; 0x0
c7e19ad4:	e3a0000b 	mov	r0, #11	; 0xb
c7e19ad8:	ebffff56 	bl	c7e19838 <DM9000_iow>
	val = (DM9000_ior(DM9000_EPDRH) << 8) | DM9000_ior(DM9000_EPDRL);
c7e19adc:	e3a0000e 	mov	r0, #14	; 0xe
c7e19ae0:	ebffff4d 	bl	c7e1981c <DM9000_ior>
c7e19ae4:	e1a04000 	mov	r4, r0
c7e19ae8:	e3a0000d 	mov	r0, #13	; 0xd
c7e19aec:	ebffff4a 	bl	c7e1981c <DM9000_ior>
c7e19af0:	e1800404 	orr	r0, r0, r4, lsl #8
c7e19af4:	e1a00800 	lsl	r0, r0, #16

	/* The read data keeps on REG_0D & REG_0E */
	DM9000_DBG("dm9000_phy_read(0x%x): 0x%x\n", reg, val);
	return val;
}
c7e19af8:	e1a00820 	lsr	r0, r0, #16
c7e19afc:	e8bd8010 	pop	{r4, pc}

c7e19b00 <dm9000_init>:
}

/* Initialize dm9000 board
*/
static int dm9000_init(struct eth_device *dev, bd_t *bd)
{
c7e19b00:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e19b04:	e1a0a000 	mov	sl, r0
	struct board_info *db = &dm9000_info;

	DM9000_DBG("%s\n", __func__);

	/* RESET device */
	dm9000_reset();
c7e19b08:	ebffff50 	bl	c7e19850 <dm9000_reset>
*/
int
dm9000_probe(void)
{
	u32 id_val;
	id_val = DM9000_ior(DM9000_VIDL);
c7e19b0c:	e3a00028 	mov	r0, #40	; 0x28
c7e19b10:	ebffff41 	bl	c7e1981c <DM9000_ior>
c7e19b14:	e1a06000 	mov	r6, r0
	id_val |= DM9000_ior(DM9000_VIDH) << 8;
c7e19b18:	e3a00029 	mov	r0, #41	; 0x29
c7e19b1c:	ebffff3e 	bl	c7e1981c <DM9000_ior>
c7e19b20:	e1a05000 	mov	r5, r0
	id_val |= DM9000_ior(DM9000_PIDL) << 16;
c7e19b24:	e3a0002a 	mov	r0, #42	; 0x2a
c7e19b28:	ebffff3b 	bl	c7e1981c <DM9000_ior>
c7e19b2c:	e1a04000 	mov	r4, r0
	id_val |= DM9000_ior(DM9000_PIDH) << 24;
c7e19b30:	e3a0002b 	mov	r0, #43	; 0x2b
c7e19b34:	ebffff38 	bl	c7e1981c <DM9000_ior>
int
dm9000_probe(void)
{
	u32 id_val;
	id_val = DM9000_ior(DM9000_VIDL);
	id_val |= DM9000_ior(DM9000_VIDH) << 8;
c7e19b38:	e1a04804 	lsl	r4, r4, #16
c7e19b3c:	e1844405 	orr	r4, r4, r5, lsl #8
	id_val |= DM9000_ior(DM9000_PIDL) << 16;
c7e19b40:	e1844006 	orr	r4, r4, r6
	id_val |= DM9000_ior(DM9000_PIDH) << 24;
	if (id_val == DM9000_ID) {
c7e19b44:	e59f324c 	ldr	r3, [pc, #588]	; c7e19d98 <dm9000_init+0x298>
{
	u32 id_val;
	id_val = DM9000_ior(DM9000_VIDL);
	id_val |= DM9000_ior(DM9000_VIDH) << 8;
	id_val |= DM9000_ior(DM9000_PIDL) << 16;
	id_val |= DM9000_ior(DM9000_PIDH) << 24;
c7e19b48:	e1842c00 	orr	r2, r4, r0, lsl #24
	if (id_val == DM9000_ID) {
c7e19b4c:	e1520003 	cmp	r2, r3
c7e19b50:	1a000010 	bne	c7e19b98 <dm9000_init+0x98>
		printf("dm9000 i/o: 0x%x, id: 0x%x \n", CONFIG_DM9000_BASE,
c7e19b54:	e59f1240 	ldr	r1, [pc, #576]	; c7e19d9c <dm9000_init+0x29c>
c7e19b58:	e59f0240 	ldr	r0, [pc, #576]	; c7e19da0 <dm9000_init+0x2a0>
c7e19b5c:	ebffbbbd 	bl	c7e08a58 <printf>

	if (dm9000_probe() < 0)
		return -1;

	/* Auto-detect 8/16/32 bit mode, ISR Bit 6+7 indicate bus width */
	io_mode = DM9000_ior(DM9000_ISR) >> 6;
c7e19b60:	e3a000fe 	mov	r0, #254	; 0xfe
c7e19b64:	ebffff2c 	bl	c7e1981c <DM9000_ior>
c7e19b68:	e1a00320 	lsr	r0, r0, #6
c7e19b6c:	e20010ff 	and	r1, r0, #255	; 0xff

	switch (io_mode) {
c7e19b70:	e3510001 	cmp	r1, #1	; 0x1
c7e19b74:	0a000015 	beq	c7e19bd0 <dm9000_init+0xd0>
c7e19b78:	3a00000b 	bcc	c7e19bac <dm9000_init+0xac>
c7e19b7c:	e3510002 	cmp	r1, #2	; 0x2
c7e19b80:	e59f421c 	ldr	r4, [pc, #540]	; c7e19da4 <dm9000_init+0x2a4>
c7e19b84:	e59f621c 	ldr	r6, [pc, #540]	; c7e19da8 <dm9000_init+0x2a8>
c7e19b88:	e59f721c 	ldr	r7, [pc, #540]	; c7e19dac <dm9000_init+0x2ac>
c7e19b8c:	e59f521c 	ldr	r5, [pc, #540]	; c7e19db0 <dm9000_init+0x2b0>
c7e19b90:	1a00001b 	bne	c7e19c04 <dm9000_init+0x104>
c7e19b94:	ea000017 	b	c7e19bf8 <dm9000_init+0xf8>
	if (id_val == DM9000_ID) {
		printf("dm9000 i/o: 0x%x, id: 0x%x \n", CONFIG_DM9000_BASE,
		       id_val);
		return 0;
	} else {
		printf("dm9000 not found at 0x%08x id: 0x%08x\n",
c7e19b98:	e59f0214 	ldr	r0, [pc, #532]	; c7e19db4 <dm9000_init+0x2b4>
c7e19b9c:	e59f11f8 	ldr	r1, [pc, #504]	; c7e19d9c <dm9000_init+0x29c>
c7e19ba0:	ebffbbac 	bl	c7e08a58 <printf>
c7e19ba4:	e3e00000 	mvn	r0, #0	; 0x0
c7e19ba8:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
	/* Auto-detect 8/16/32 bit mode, ISR Bit 6+7 indicate bus width */
	io_mode = DM9000_ior(DM9000_ISR) >> 6;

	switch (io_mode) {
	case 0x0:  /* 16-bit mode */
		printf("DM9000: running in 16 bit mode\n");
c7e19bac:	e59f0204 	ldr	r0, [pc, #516]	; c7e19db8 <dm9000_init+0x2b8>
c7e19bb0:	ebffbba8 	bl	c7e08a58 <printf>
		db->outblk    = dm9000_outblk_16bit;
c7e19bb4:	e59f21e8 	ldr	r2, [pc, #488]	; c7e19da4 <dm9000_init+0x2a4>
c7e19bb8:	e59f31fc 	ldr	r3, [pc, #508]	; c7e19dbc <dm9000_init+0x2bc>
c7e19bbc:	e582309c 	str	r3, [r2, #156]
		db->inblk     = dm9000_inblk_16bit;
		db->rx_status = dm9000_rx_status_16bit;
c7e19bc0:	e59f31f8 	ldr	r3, [pc, #504]	; c7e19dc0 <dm9000_init+0x2c0>
c7e19bc4:	e58230a4 	str	r3, [r2, #164]

	switch (io_mode) {
	case 0x0:  /* 16-bit mode */
		printf("DM9000: running in 16 bit mode\n");
		db->outblk    = dm9000_outblk_16bit;
		db->inblk     = dm9000_inblk_16bit;
c7e19bc8:	e59f31f4 	ldr	r3, [pc, #500]	; c7e19dc4 <dm9000_init+0x2c4>
c7e19bcc:	ea000007 	b	c7e19bf0 <dm9000_init+0xf0>
		db->rx_status = dm9000_rx_status_16bit;
		break;
	case 0x01:  /* 32-bit mode */
		printf("DM9000: running in 32 bit mode\n");
c7e19bd0:	e59f01f0 	ldr	r0, [pc, #496]	; c7e19dc8 <dm9000_init+0x2c8>
c7e19bd4:	ebffbb9f 	bl	c7e08a58 <printf>
		db->outblk    = dm9000_outblk_32bit;
c7e19bd8:	e59f21c4 	ldr	r2, [pc, #452]	; c7e19da4 <dm9000_init+0x2a4>
c7e19bdc:	e59f31e8 	ldr	r3, [pc, #488]	; c7e19dcc <dm9000_init+0x2cc>
c7e19be0:	e582309c 	str	r3, [r2, #156]
		db->inblk     = dm9000_inblk_32bit;
		db->rx_status = dm9000_rx_status_32bit;
c7e19be4:	e59f31e4 	ldr	r3, [pc, #484]	; c7e19dd0 <dm9000_init+0x2d0>
c7e19be8:	e58230a4 	str	r3, [r2, #164]
		db->rx_status = dm9000_rx_status_16bit;
		break;
	case 0x01:  /* 32-bit mode */
		printf("DM9000: running in 32 bit mode\n");
		db->outblk    = dm9000_outblk_32bit;
		db->inblk     = dm9000_inblk_32bit;
c7e19bec:	e59f31e0 	ldr	r3, [pc, #480]	; c7e19dd4 <dm9000_init+0x2d4>
c7e19bf0:	e58230a0 	str	r3, [r2, #160]
c7e19bf4:	ea000007 	b	c7e19c18 <dm9000_init+0x118>
		db->rx_status = dm9000_rx_status_32bit;
		break;
	case 0x02: /* 8 bit mode */
		printf("DM9000: running in 8 bit mode\n");
c7e19bf8:	e59f01d8 	ldr	r0, [pc, #472]	; c7e19dd8 <dm9000_init+0x2d8>
c7e19bfc:	ebffbb95 	bl	c7e08a58 <printf>
c7e19c00:	ea000001 	b	c7e19c0c <dm9000_init+0x10c>
		db->inblk     = dm9000_inblk_8bit;
		db->rx_status = dm9000_rx_status_8bit;
		break;
	default:
		/* Assume 8 bit mode, will probably not work anyway */
		printf("DM9000: Undefined IO-mode:0x%x\n", io_mode);
c7e19c04:	e59f01d0 	ldr	r0, [pc, #464]	; c7e19ddc <dm9000_init+0x2dc>
c7e19c08:	ebffbb92 	bl	c7e08a58 <printf>
		db->outblk    = dm9000_outblk_8bit;
		db->inblk     = dm9000_inblk_8bit;
		db->rx_status = dm9000_rx_status_8bit;
c7e19c0c:	e58450a4 	str	r5, [r4, #164]
		db->rx_status = dm9000_rx_status_8bit;
		break;
	default:
		/* Assume 8 bit mode, will probably not work anyway */
		printf("DM9000: Undefined IO-mode:0x%x\n", io_mode);
		db->outblk    = dm9000_outblk_8bit;
c7e19c10:	e584609c 	str	r6, [r4, #156]
		db->inblk     = dm9000_inblk_8bit;
c7e19c14:	e58470a0 	str	r7, [r4, #160]
		db->rx_status = dm9000_rx_status_8bit;
		break;
	}

	/* Program operating register, only internal phy supported */
	DM9000_iow(DM9000_NCR, 0x0);
c7e19c18:	e3a00000 	mov	r0, #0	; 0x0
c7e19c1c:	e1a01000 	mov	r1, r0
c7e19c20:	ebffff04 	bl	c7e19838 <DM9000_iow>
	/* TX Polling clear */
	DM9000_iow(DM9000_TCR, 0);
c7e19c24:	e3a00002 	mov	r0, #2	; 0x2
c7e19c28:	e3a01000 	mov	r1, #0	; 0x0
c7e19c2c:	ebffff01 	bl	c7e19838 <DM9000_iow>
	/* Less 3Kb, 200us */
	DM9000_iow(DM9000_BPTR, BPTR_BPHW(3) | BPTR_JPT_600US);
c7e19c30:	e3a00008 	mov	r0, #8	; 0x8
c7e19c34:	e3a0103f 	mov	r1, #63	; 0x3f
c7e19c38:	ebfffefe 	bl	c7e19838 <DM9000_iow>
	/* Flow Control : High/Low Water */
	DM9000_iow(DM9000_FCTR, FCTR_HWOT(3) | FCTR_LWOT(8));
c7e19c3c:	e3a00009 	mov	r0, #9	; 0x9
c7e19c40:	e3a01038 	mov	r1, #56	; 0x38
c7e19c44:	ebfffefb 	bl	c7e19838 <DM9000_iow>
	/* SH FIXME: This looks strange! Flow Control */
	DM9000_iow(DM9000_FCR, 0x0);
c7e19c48:	e3a0000a 	mov	r0, #10	; 0xa
c7e19c4c:	e3a01000 	mov	r1, #0	; 0x0
c7e19c50:	ebfffef8 	bl	c7e19838 <DM9000_iow>
	/* Special Mode */
	DM9000_iow(DM9000_SMCR, 0);
c7e19c54:	e3a0002f 	mov	r0, #47	; 0x2f
c7e19c58:	e3a01000 	mov	r1, #0	; 0x0
c7e19c5c:	ebfffef5 	bl	c7e19838 <DM9000_iow>
	/* clear TX status */
	DM9000_iow(DM9000_NSR, NSR_WAKEST | NSR_TX2END | NSR_TX1END);
c7e19c60:	e3a00001 	mov	r0, #1	; 0x1
c7e19c64:	e3a0102c 	mov	r1, #44	; 0x2c
c7e19c68:	ebfffef2 	bl	c7e19838 <DM9000_iow>
	/* Clear interrupt status */
	DM9000_iow(DM9000_ISR, ISR_ROOS | ISR_ROS | ISR_PTS | ISR_PRS);
c7e19c6c:	e3a000fe 	mov	r0, #254	; 0xfe
c7e19c70:	e3a0100f 	mov	r1, #15	; 0xf
c7e19c74:	ebfffeef 	bl	c7e19838 <DM9000_iow>

	printf("MAC: %pM\n", dev->enetaddr);
c7e19c78:	e59f0160 	ldr	r0, [pc, #352]	; c7e19de0 <dm9000_init+0x2e0>
c7e19c7c:	e28a1010 	add	r1, sl, #16	; 0x10
c7e19c80:	ebffbb74 	bl	c7e08a58 <printf>
c7e19c84:	e3a04010 	mov	r4, #16	; 0x10

	/* fill device MAC address registers */
	for (i = 0, oft = DM9000_PAR; i < 6; i++, oft++)
		DM9000_iow(oft, dev->enetaddr[i]);
c7e19c88:	e1a00004 	mov	r0, r4
c7e19c8c:	e7da1004 	ldrb	r1, [sl, r4]
	DM9000_iow(DM9000_ISR, ISR_ROOS | ISR_ROS | ISR_PTS | ISR_PRS);

	printf("MAC: %pM\n", dev->enetaddr);

	/* fill device MAC address registers */
	for (i = 0, oft = DM9000_PAR; i < 6; i++, oft++)
c7e19c90:	e2844001 	add	r4, r4, #1	; 0x1
		DM9000_iow(oft, dev->enetaddr[i]);
c7e19c94:	ebfffee7 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_ISR, ISR_ROOS | ISR_ROS | ISR_PTS | ISR_PRS);

	printf("MAC: %pM\n", dev->enetaddr);

	/* fill device MAC address registers */
	for (i = 0, oft = DM9000_PAR; i < 6; i++, oft++)
c7e19c98:	e3540016 	cmp	r4, #22	; 0x16
c7e19c9c:	1afffff9 	bne	c7e19c88 <dm9000_init+0x188>
		DM9000_iow(oft, dev->enetaddr[i]);
	for (i = 0, oft = 0x16; i < 8; i++, oft++)
		DM9000_iow(oft, 0xff);
c7e19ca0:	e1a00004 	mov	r0, r4
c7e19ca4:	e3a010ff 	mov	r1, #255	; 0xff
	printf("MAC: %pM\n", dev->enetaddr);

	/* fill device MAC address registers */
	for (i = 0, oft = DM9000_PAR; i < 6; i++, oft++)
		DM9000_iow(oft, dev->enetaddr[i]);
	for (i = 0, oft = 0x16; i < 8; i++, oft++)
c7e19ca8:	e2844001 	add	r4, r4, #1	; 0x1
		DM9000_iow(oft, 0xff);
c7e19cac:	ebfffee1 	bl	c7e19838 <DM9000_iow>
	printf("MAC: %pM\n", dev->enetaddr);

	/* fill device MAC address registers */
	for (i = 0, oft = DM9000_PAR; i < 6; i++, oft++)
		DM9000_iow(oft, dev->enetaddr[i]);
	for (i = 0, oft = 0x16; i < 8; i++, oft++)
c7e19cb0:	e354001e 	cmp	r4, #30	; 0x1e
c7e19cb4:	1afffff9 	bne	c7e19ca0 <dm9000_init+0x1a0>
		DM9000_DBG("%02x:", DM9000_ior(oft));
	DM9000_DBG("\n");

	/* Activate DM9000 */
	/* RX enable */
	DM9000_iow(DM9000_RCR, RCR_DIS_LONG | RCR_DIS_CRC | RCR_RXEN);
c7e19cb8:	e3a00005 	mov	r0, #5	; 0x5
c7e19cbc:	e3a01031 	mov	r1, #49	; 0x31
c7e19cc0:	ebfffedc 	bl	c7e19838 <DM9000_iow>
	/* Enable TX/RX interrupt mask */
	DM9000_iow(DM9000_IMR, IMR_PAR);
c7e19cc4:	e3a000ff 	mov	r0, #255	; 0xff
c7e19cc8:	e3a01080 	mov	r1, #128	; 0x80
c7e19ccc:	ebfffed9 	bl	c7e19838 <DM9000_iow>
c7e19cd0:	e3a04000 	mov	r4, #0	; 0x0
c7e19cd4:	ea000007 	b	c7e19cf8 <dm9000_init+0x1f8>

	i = 0;
	while (!(dm9000_phy_read(1) & 0x20)) {	/* autonegation complete bit */
		udelay(1000);
c7e19cd8:	eb00247a 	bl	c7e22ec8 <udelay>
		i++;
		if (i == 10000) {
c7e19cdc:	e59f3100 	ldr	r3, [pc, #256]	; c7e19de4 <dm9000_init+0x2e4>
c7e19ce0:	e1540003 	cmp	r4, r3
c7e19ce4:	1a000003 	bne	c7e19cf8 <dm9000_init+0x1f8>
			printf("could not establish link\n");
c7e19ce8:	e59f00f8 	ldr	r0, [pc, #248]	; c7e19de8 <dm9000_init+0x2e8>
c7e19cec:	ebffbb59 	bl	c7e08a58 <printf>
c7e19cf0:	e1a00005 	mov	r0, r5
c7e19cf4:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
	DM9000_iow(DM9000_RCR, RCR_DIS_LONG | RCR_DIS_CRC | RCR_RXEN);
	/* Enable TX/RX interrupt mask */
	DM9000_iow(DM9000_IMR, IMR_PAR);

	i = 0;
	while (!(dm9000_phy_read(1) & 0x20)) {	/* autonegation complete bit */
c7e19cf8:	e3a00001 	mov	r0, #1	; 0x1
c7e19cfc:	ebffff69 	bl	c7e19aa8 <dm9000_phy_read>
c7e19d00:	e2105020 	ands	r5, r0, #32	; 0x20
		udelay(1000);
		i++;
c7e19d04:	e2844001 	add	r4, r4, #1	; 0x1
	/* Enable TX/RX interrupt mask */
	DM9000_iow(DM9000_IMR, IMR_PAR);

	i = 0;
	while (!(dm9000_phy_read(1) & 0x20)) {	/* autonegation complete bit */
		udelay(1000);
c7e19d08:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	DM9000_iow(DM9000_RCR, RCR_DIS_LONG | RCR_DIS_CRC | RCR_RXEN);
	/* Enable TX/RX interrupt mask */
	DM9000_iow(DM9000_IMR, IMR_PAR);

	i = 0;
	while (!(dm9000_phy_read(1) & 0x20)) {	/* autonegation complete bit */
c7e19d0c:	0afffff1 	beq	c7e19cd8 <dm9000_init+0x1d8>
			return 0;
		}
	}

	/* see what we've got */
	lnk = dm9000_phy_read(17) >> 12;
c7e19d10:	e3a00011 	mov	r0, #17	; 0x11
c7e19d14:	ebffff63 	bl	c7e19aa8 <dm9000_phy_read>
c7e19d18:	e1a00200 	lsl	r0, r0, #4
c7e19d1c:	e1a04820 	lsr	r4, r0, #16
	printf("operating at ");
c7e19d20:	e59f00c4 	ldr	r0, [pc, #196]	; c7e19dec <dm9000_init+0x2ec>
c7e19d24:	ebffbb4b 	bl	c7e08a58 <printf>
	switch (lnk) {
c7e19d28:	e2443001 	sub	r3, r4, #1	; 0x1
c7e19d2c:	e3530007 	cmp	r3, #7	; 0x7
c7e19d30:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e19d34:	ea000010 	b	c7e19d7c <dm9000_init+0x27c>
c7e19d38:	c7e19d58 	.word	0xc7e19d58
c7e19d3c:	c7e19d60 	.word	0xc7e19d60
c7e19d40:	c7e19d7c 	.word	0xc7e19d7c
c7e19d44:	c7e19d6c 	.word	0xc7e19d6c
c7e19d48:	c7e19d7c 	.word	0xc7e19d7c
c7e19d4c:	c7e19d7c 	.word	0xc7e19d7c
c7e19d50:	c7e19d7c 	.word	0xc7e19d7c
c7e19d54:	c7e19d74 	.word	0xc7e19d74
	case 1:
		printf("10M half duplex ");
c7e19d58:	e59f0090 	ldr	r0, [pc, #144]	; c7e19df0 <dm9000_init+0x2f0>
c7e19d5c:	ea000000 	b	c7e19d64 <dm9000_init+0x264>
		break;
	case 2:
		printf("10M full duplex ");
c7e19d60:	e59f008c 	ldr	r0, [pc, #140]	; c7e19df4 <dm9000_init+0x2f4>
c7e19d64:	ebffbb3b 	bl	c7e08a58 <printf>
c7e19d68:	ea000006 	b	c7e19d88 <dm9000_init+0x288>
		break;
	case 4:
		printf("100M half duplex ");
c7e19d6c:	e59f0084 	ldr	r0, [pc, #132]	; c7e19df8 <dm9000_init+0x2f8>
c7e19d70:	eafffffb 	b	c7e19d64 <dm9000_init+0x264>
		break;
	case 8:
		printf("100M full duplex ");
c7e19d74:	e59f0080 	ldr	r0, [pc, #128]	; c7e19dfc <dm9000_init+0x2fc>
c7e19d78:	eafffff9 	b	c7e19d64 <dm9000_init+0x264>
		break;
	default:
		printf("unknown: %d ", lnk);
c7e19d7c:	e1a01004 	mov	r1, r4
c7e19d80:	e59f0078 	ldr	r0, [pc, #120]	; c7e19e00 <dm9000_init+0x300>
c7e19d84:	ebffbb33 	bl	c7e08a58 <printf>
		break;
	}
	printf("mode\n");
c7e19d88:	e59f0074 	ldr	r0, [pc, #116]	; c7e19e04 <dm9000_init+0x304>
c7e19d8c:	ebffbb31 	bl	c7e08a58 <printf>
c7e19d90:	e3a00000 	mov	r0, #0	; 0x0
	return 0;
}
c7e19d94:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e19d98:	90000a46 	.word	0x90000a46
c7e19d9c:	18000300 	.word	0x18000300
c7e19da0:	c7e33d20 	.word	0xc7e33d20
c7e19da4:	c7e42038 	.word	0xc7e42038
c7e19da8:	c7e19668 	.word	0xc7e19668
c7e19dac:	c7e196f8 	.word	0xc7e196f8
c7e19db0:	c7e197d8 	.word	0xc7e197d8
c7e19db4:	c7e33d3d 	.word	0xc7e33d3d
c7e19db8:	c7e33d64 	.word	0xc7e33d64
c7e19dbc:	c7e19690 	.word	0xc7e19690
c7e19dc0:	c7e197b4 	.word	0xc7e197b4
c7e19dc4:	c7e19724 	.word	0xc7e19724
c7e19dc8:	c7e33d84 	.word	0xc7e33d84
c7e19dcc:	c7e196c8 	.word	0xc7e196c8
c7e19dd0:	c7e1978c 	.word	0xc7e1978c
c7e19dd4:	c7e1975c 	.word	0xc7e1975c
c7e19dd8:	c7e33da4 	.word	0xc7e33da4
c7e19ddc:	c7e33dc3 	.word	0xc7e33dc3
c7e19de0:	c7e33de3 	.word	0xc7e33de3
c7e19de4:	00002710 	.word	0x00002710
c7e19de8:	c7e33ded 	.word	0xc7e33ded
c7e19dec:	c7e33e07 	.word	0xc7e33e07
c7e19df0:	c7e33e15 	.word	0xc7e33e15
c7e19df4:	c7e33e26 	.word	0xc7e33e26
c7e19df8:	c7e33e37 	.word	0xc7e33e37
c7e19dfc:	c7e33e49 	.word	0xc7e33e49
c7e19e00:	c7e33e5b 	.word	0xc7e33e5b
c7e19e04:	c7e33d9e 	.word	0xc7e33d9e

c7e19e08 <dm9000_write_srom_word>:
	to[1] = DM9000_ior(DM9000_EPDRH);
}

void dm9000_write_srom_word(int offset, u16 val)
{
	DM9000_iow(DM9000_EPAR, offset);
c7e19e08:	e20000ff 	and	r0, r0, #255	; 0xff
	to[0] = DM9000_ior(DM9000_EPDRL);
	to[1] = DM9000_ior(DM9000_EPDRH);
}

void dm9000_write_srom_word(int offset, u16 val)
{
c7e19e0c:	e92d4010 	push	{r4, lr}
c7e19e10:	e1a04001 	mov	r4, r1
	DM9000_iow(DM9000_EPAR, offset);
c7e19e14:	e1a01000 	mov	r1, r0
c7e19e18:	e3a0000c 	mov	r0, #12	; 0xc
c7e19e1c:	ebfffe85 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPDRH, ((val >> 8) & 0xff));
c7e19e20:	e1a01424 	lsr	r1, r4, #8
c7e19e24:	e3a0000e 	mov	r0, #14	; 0xe
	DM9000_iow(DM9000_EPDRL, (val & 0xff));
c7e19e28:	e20440ff 	and	r4, r4, #255	; 0xff
}

void dm9000_write_srom_word(int offset, u16 val)
{
	DM9000_iow(DM9000_EPAR, offset);
	DM9000_iow(DM9000_EPDRH, ((val >> 8) & 0xff));
c7e19e2c:	ebfffe81 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPDRL, (val & 0xff));
c7e19e30:	e1a01004 	mov	r1, r4
c7e19e34:	e3a0000d 	mov	r0, #13	; 0xd
c7e19e38:	ebfffe7e 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPCR, 0x12);
c7e19e3c:	e3a01012 	mov	r1, #18	; 0x12
c7e19e40:	e3a0000b 	mov	r0, #11	; 0xb
c7e19e44:	ebfffe7b 	bl	c7e19838 <DM9000_iow>
	udelay(8000);
c7e19e48:	e3a00d7d 	mov	r0, #8000	; 0x1f40
c7e19e4c:	eb00241d 	bl	c7e22ec8 <udelay>
	DM9000_iow(DM9000_EPCR, 0);
c7e19e50:	e3a0000b 	mov	r0, #11	; 0xb
c7e19e54:	e3a01000 	mov	r1, #0	; 0x0
}
c7e19e58:	e8bd4010 	pop	{r4, lr}
	DM9000_iow(DM9000_EPAR, offset);
	DM9000_iow(DM9000_EPDRH, ((val >> 8) & 0xff));
	DM9000_iow(DM9000_EPDRL, (val & 0xff));
	DM9000_iow(DM9000_EPCR, 0x12);
	udelay(8000);
	DM9000_iow(DM9000_EPCR, 0);
c7e19e5c:	eafffe75 	b	c7e19838 <DM9000_iow>

c7e19e60 <dm9000_read_srom_word>:
  Read a word data from SROM
*/
#if !defined(CONFIG_DM9000_NO_SROM)
void dm9000_read_srom_word(int offset, u8 *to)
{
	DM9000_iow(DM9000_EPAR, offset);
c7e19e60:	e20000ff 	and	r0, r0, #255	; 0xff
/*
  Read a word data from SROM
*/
#if !defined(CONFIG_DM9000_NO_SROM)
void dm9000_read_srom_word(int offset, u8 *to)
{
c7e19e64:	e92d4010 	push	{r4, lr}
c7e19e68:	e1a04001 	mov	r4, r1
	DM9000_iow(DM9000_EPAR, offset);
c7e19e6c:	e1a01000 	mov	r1, r0
c7e19e70:	e3a0000c 	mov	r0, #12	; 0xc
c7e19e74:	ebfffe6f 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_EPCR, 0x4);
c7e19e78:	e3a01004 	mov	r1, #4	; 0x4
c7e19e7c:	e3a0000b 	mov	r0, #11	; 0xb
c7e19e80:	ebfffe6c 	bl	c7e19838 <DM9000_iow>
	udelay(8000);
c7e19e84:	e3a00d7d 	mov	r0, #8000	; 0x1f40
c7e19e88:	eb00240e 	bl	c7e22ec8 <udelay>
	DM9000_iow(DM9000_EPCR, 0x0);
c7e19e8c:	e3a01000 	mov	r1, #0	; 0x0
c7e19e90:	e3a0000b 	mov	r0, #11	; 0xb
c7e19e94:	ebfffe67 	bl	c7e19838 <DM9000_iow>
	to[0] = DM9000_ior(DM9000_EPDRL);
c7e19e98:	e3a0000d 	mov	r0, #13	; 0xd
c7e19e9c:	ebfffe5e 	bl	c7e1981c <DM9000_ior>
c7e19ea0:	e5c40000 	strb	r0, [r4]
	to[1] = DM9000_ior(DM9000_EPDRH);
c7e19ea4:	e3a0000e 	mov	r0, #14	; 0xe
c7e19ea8:	ebfffe5b 	bl	c7e1981c <DM9000_ior>
c7e19eac:	e5c40001 	strb	r0, [r4, #1]
}
c7e19eb0:	e8bd8010 	pop	{r4, pc}

c7e19eb4 <dm9000_initialize>:
	DM9000_iow(DM9000_EPCR, 0x0);	/* Clear phyxcer write command */
	DM9000_DBG("dm9000_phy_write(reg:0x%x, value:0x%x)\n", reg, value);
}

int dm9000_initialize(bd_t *bis)
{
c7e19eb4:	e92d4070 	push	{r4, r5, r6, lr}
static void dm9000_get_enetaddr(struct eth_device *dev)
{
#if !defined(CONFIG_DM9000_NO_SROM)
	int i;
	for (i = 0; i < 3; i++)
		dm9000_read_srom_word(i, dev->enetaddr + (2 * i));
c7e19eb8:	e59f4060 	ldr	r4, [pc, #96]	; c7e19f20 <dm9000_initialize+0x6c>
c7e19ebc:	e3a00000 	mov	r0, #0	; 0x0
c7e19ec0:	e28410b8 	add	r1, r4, #184	; 0xb8
c7e19ec4:	ebffffe5 	bl	c7e19e60 <dm9000_read_srom_word>
c7e19ec8:	e28410ba 	add	r1, r4, #186	; 0xba
c7e19ecc:	e3a00001 	mov	r0, #1	; 0x1
c7e19ed0:	ebffffe2 	bl	c7e19e60 <dm9000_read_srom_word>
c7e19ed4:	e28410bc 	add	r1, r4, #188	; 0xbc
c7e19ed8:	e3a00002 	mov	r0, #2	; 0x2
c7e19edc:	ebffffdf 	bl	c7e19e60 <dm9000_read_srom_word>
	struct eth_device *dev = &(dm9000_info.netdev);

	/* Load MAC address from EEPROM */
	dm9000_get_enetaddr(dev);

	dev->init = dm9000_init;
c7e19ee0:	e59f303c 	ldr	r3, [pc, #60]	; c7e19f24 <dm9000_initialize+0x70>
	dev->halt = dm9000_halt;
	dev->send = dm9000_send;
	dev->recv = dm9000_rx;
	sprintf(dev->name, "dm9000");
c7e19ee4:	e28450a8 	add	r5, r4, #168	; 0xa8
	struct eth_device *dev = &(dm9000_info.netdev);

	/* Load MAC address from EEPROM */
	dm9000_get_enetaddr(dev);

	dev->init = dm9000_init;
c7e19ee8:	e58430c8 	str	r3, [r4, #200]
	dev->halt = dm9000_halt;
c7e19eec:	e59f3034 	ldr	r3, [pc, #52]	; c7e19f28 <dm9000_initialize+0x74>
	dev->send = dm9000_send;
	dev->recv = dm9000_rx;
	sprintf(dev->name, "dm9000");
c7e19ef0:	e59f1034 	ldr	r1, [pc, #52]	; c7e19f2c <dm9000_initialize+0x78>

	/* Load MAC address from EEPROM */
	dm9000_get_enetaddr(dev);

	dev->init = dm9000_init;
	dev->halt = dm9000_halt;
c7e19ef4:	e58430d4 	str	r3, [r4, #212]
	dev->send = dm9000_send;
c7e19ef8:	e59f3030 	ldr	r3, [pc, #48]	; c7e19f30 <dm9000_initialize+0x7c>
	dev->recv = dm9000_rx;
	sprintf(dev->name, "dm9000");
c7e19efc:	e1a00005 	mov	r0, r5
	/* Load MAC address from EEPROM */
	dm9000_get_enetaddr(dev);

	dev->init = dm9000_init;
	dev->halt = dm9000_halt;
	dev->send = dm9000_send;
c7e19f00:	e58430cc 	str	r3, [r4, #204]
	dev->recv = dm9000_rx;
c7e19f04:	e59f3028 	ldr	r3, [pc, #40]	; c7e19f34 <dm9000_initialize+0x80>
c7e19f08:	e58430d0 	str	r3, [r4, #208]
	sprintf(dev->name, "dm9000");
c7e19f0c:	eb0027c7 	bl	c7e23e30 <sprintf>

	eth_register(dev);
c7e19f10:	e1a00005 	mov	r0, r5
c7e19f14:	eb003538 	bl	c7e273fc <eth_register>

	return 0;
}
c7e19f18:	e3a00000 	mov	r0, #0	; 0x0
c7e19f1c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e19f20:	c7e42038 	.word	0xc7e42038
c7e19f24:	c7e19b00 	.word	0xc7e19b00
c7e19f28:	c7e19a38 	.word	0xc7e19a38
c7e19f2c:	c7e33e68 	.word	0xc7e33e68
c7e19f30:	c7e19f38 	.word	0xc7e19f38
c7e19f34:	c7e198f0 	.word	0xc7e198f0

c7e19f38 <dm9000_send>:
/*
  Hardware start transmission.
  Send a packet to media from the upper layer.
*/
static int dm9000_send(struct eth_device *netdev, void *packet, int length)
{
c7e19f38:	e92d4070 	push	{r4, r5, r6, lr}
	int tmo;
	struct board_info *db = &dm9000_info;

	DM9000_DMP_PACKET(__func__ , packet, length);

	DM9000_iow(DM9000_ISR, IMR_PTM); /* Clear Tx bit in ISR */
c7e19f3c:	e3a000fe 	mov	r0, #254	; 0xfe
/*
  Hardware start transmission.
  Send a packet to media from the upper layer.
*/
static int dm9000_send(struct eth_device *netdev, void *packet, int length)
{
c7e19f40:	e1a05001 	mov	r5, r1
	int tmo;
	struct board_info *db = &dm9000_info;

	DM9000_DMP_PACKET(__func__ , packet, length);

	DM9000_iow(DM9000_ISR, IMR_PTM); /* Clear Tx bit in ISR */
c7e19f44:	e3a01002 	mov	r1, #2	; 0x2
/*
  Hardware start transmission.
  Send a packet to media from the upper layer.
*/
static int dm9000_send(struct eth_device *netdev, void *packet, int length)
{
c7e19f48:	e1a04002 	mov	r4, r2
	int tmo;
	struct board_info *db = &dm9000_info;

	DM9000_DMP_PACKET(__func__ , packet, length);

	DM9000_iow(DM9000_ISR, IMR_PTM); /* Clear Tx bit in ISR */
c7e19f4c:	ebfffe39 	bl	c7e19838 <DM9000_iow>

	/* Move data to DM9000 TX RAM */
	DM9000_outb(DM9000_MWCMD, DM9000_IO); /* Prepare for TX-data */
c7e19f50:	e59f30a4 	ldr	r3, [pc, #164]	; c7e19ffc <dm9000_send+0xc4>
c7e19f54:	e3e02007 	mvn	r2, #7	; 0x7
c7e19f58:	e5c32000 	strb	r2, [r3]

	/* push the data to the TX-fifo */
	(db->outblk)(packet, length);
c7e19f5c:	e1a01004 	mov	r1, r4
c7e19f60:	e59f3098 	ldr	r3, [pc, #152]	; c7e1a000 <dm9000_send+0xc8>
c7e19f64:	e1a00005 	mov	r0, r5
c7e19f68:	e1a0e00f 	mov	lr, pc
c7e19f6c:	e593f09c 	ldr	pc, [r3, #156]

	/* Set TX length to DM9000 */
	DM9000_iow(DM9000_TXPLL, length & 0xff);
c7e19f70:	e20410ff 	and	r1, r4, #255	; 0xff
c7e19f74:	e3a000fc 	mov	r0, #252	; 0xfc
	DM9000_iow(DM9000_TXPLH, (length >> 8) & 0xff);
c7e19f78:	e1a04424 	lsr	r4, r4, #8

	/* push the data to the TX-fifo */
	(db->outblk)(packet, length);

	/* Set TX length to DM9000 */
	DM9000_iow(DM9000_TXPLL, length & 0xff);
c7e19f7c:	ebfffe2d 	bl	c7e19838 <DM9000_iow>
	DM9000_iow(DM9000_TXPLH, (length >> 8) & 0xff);
c7e19f80:	e20410ff 	and	r1, r4, #255	; 0xff
c7e19f84:	e3a000fd 	mov	r0, #253	; 0xfd
c7e19f88:	ebfffe2a 	bl	c7e19838 <DM9000_iow>

	/* Issue TX polling command */
	DM9000_iow(DM9000_TCR, TCR_TXREQ); /* Cleared after TX complete */
c7e19f8c:	e3a00002 	mov	r0, #2	; 0x2
c7e19f90:	e3a01001 	mov	r1, #1	; 0x1
c7e19f94:	ebfffe27 	bl	c7e19838 <DM9000_iow>

	/* wait for end of transmission */
	tmo = get_timer(0) + 5 * CONFIG_SYS_HZ;
c7e19f98:	e3a00000 	mov	r0, #0	; 0x0
c7e19f9c:	ebff9a97 	bl	c7e00a00 <get_timer>
c7e19fa0:	e2804d4e 	add	r4, r0, #4992	; 0x1380
c7e19fa4:	e2844008 	add	r4, r4, #8	; 0x8
c7e19fa8:	ea000006 	b	c7e19fc8 <dm9000_send+0x90>
	while ( !(DM9000_ior(DM9000_NSR) & (NSR_TX1END | NSR_TX2END)) ||
		!(DM9000_ior(DM9000_ISR) & IMR_PTM) ) {
		if (get_timer(0) >= tmo) {
c7e19fac:	e3a00000 	mov	r0, #0	; 0x0
c7e19fb0:	ebff9a92 	bl	c7e00a00 <get_timer>
c7e19fb4:	e1500004 	cmp	r0, r4
c7e19fb8:	3a000002 	bcc	c7e19fc8 <dm9000_send+0x90>
			printf("transmission timeout\n");
c7e19fbc:	e59f0040 	ldr	r0, [pc, #64]	; c7e1a004 <dm9000_send+0xcc>
c7e19fc0:	ebffbaa4 	bl	c7e08a58 <printf>
c7e19fc4:	ea000007 	b	c7e19fe8 <dm9000_send+0xb0>
	/* Issue TX polling command */
	DM9000_iow(DM9000_TCR, TCR_TXREQ); /* Cleared after TX complete */

	/* wait for end of transmission */
	tmo = get_timer(0) + 5 * CONFIG_SYS_HZ;
	while ( !(DM9000_ior(DM9000_NSR) & (NSR_TX1END | NSR_TX2END)) ||
c7e19fc8:	e3a00001 	mov	r0, #1	; 0x1
c7e19fcc:	ebfffe12 	bl	c7e1981c <DM9000_ior>
c7e19fd0:	e310000c 	tst	r0, #12	; 0xc
c7e19fd4:	e3a000fe 	mov	r0, #254	; 0xfe
c7e19fd8:	0afffff3 	beq	c7e19fac <dm9000_send+0x74>
c7e19fdc:	ebfffe0e 	bl	c7e1981c <DM9000_ior>
c7e19fe0:	e3100002 	tst	r0, #2	; 0x2
c7e19fe4:	0afffff0 	beq	c7e19fac <dm9000_send+0x74>
		if (get_timer(0) >= tmo) {
			printf("transmission timeout\n");
			break;
		}
	}
	DM9000_iow(DM9000_ISR, IMR_PTM); /* Clear Tx bit in ISR */
c7e19fe8:	e3a000fe 	mov	r0, #254	; 0xfe
c7e19fec:	e3a01002 	mov	r1, #2	; 0x2
c7e19ff0:	ebfffe10 	bl	c7e19838 <DM9000_iow>

	DM9000_DBG("transmit done\n\n");
	return 0;
}
c7e19ff4:	e3a00000 	mov	r0, #0	; 0x0
c7e19ff8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e19ffc:	18000300 	.word	0x18000300
c7e1a000:	c7e42038 	.word	0xc7e42038
c7e1a004:	c7e33e6f 	.word	0xc7e33e6f

c7e1a008 <s3c64xx_get_base_uart>:
#include "s3c64x0.h"
#include "mmc.h"
#include "fb.h"

static inline s3c64xx_uart *s3c64xx_get_base_uart(enum s3c64xx_uarts_nr nr)
{
c7e1a008:	e280097f 	add	r0, r0, #2080768	; 0x1fc000
c7e1a00c:	e2800014 	add	r0, r0, #20	; 0x14
	return (s3c64xx_uart *)(ELFIN_UART_BASE + (nr * 0x400));
}
c7e1a010:	e1a00500 	lsl	r0, r0, #10
c7e1a014:	e12fff1e 	bx	lr

c7e1a018 <serial_getc>:
 * Read a single byte from the serial port. Returns 1 on success, 0
 * otherwise. When the function is succesfull, the character read is
 * written into its argument c.
 */
int serial_getc(void)
{
c7e1a018:	e92d4010 	push	{r4, lr}
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);
c7e1a01c:	e3a00000 	mov	r0, #0	; 0x0
c7e1a020:	ebfffff8 	bl	c7e1a008 <s3c64xx_get_base_uart>

	/* wait for character to arrive */
	while (!(uart->UTRSTAT & 0x1));
c7e1a024:	e5903010 	ldr	r3, [r0, #16]
c7e1a028:	e3130001 	tst	r3, #1	; 0x1
c7e1a02c:	0afffffc 	beq	c7e1a024 <serial_getc+0xc>

	return uart->URXH & 0xff;
c7e1a030:	e5d00024 	ldrb	r0, [r0, #36]
}
c7e1a034:	e8bd8010 	pop	{r4, pc}

c7e1a038 <serial_putc>:

/*
 * Output a single byte to the serial port.
 */
void serial_putc(const char c)
{
c7e1a038:	e92d4010 	push	{r4, lr}
c7e1a03c:	e1a04000 	mov	r4, r0
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);
c7e1a040:	e3a00000 	mov	r0, #0	; 0x0
c7e1a044:	ebffffef 	bl	c7e1a008 <s3c64xx_get_base_uart>
	if (be_quiet)
		return;
#endif

	/* wait for room in the tx FIFO */
	while (!(uart->UTRSTAT & 0x2));
c7e1a048:	e5903010 	ldr	r3, [r0, #16]
c7e1a04c:	e3130002 	tst	r3, #2	; 0x2
c7e1a050:	0afffffc 	beq	c7e1a048 <serial_putc+0x10>

	uart->UTXH = c;

	/* If \n, also do \r */
	if (c == '\n')
c7e1a054:	e354000a 	cmp	r4, #10	; 0xa
#endif

	/* wait for room in the tx FIFO */
	while (!(uart->UTRSTAT & 0x2));

	uart->UTXH = c;
c7e1a058:	e5c04020 	strb	r4, [r0, #32]

	/* If \n, also do \r */
	if (c == '\n')
c7e1a05c:	e3a0400d 	mov	r4, #13	; 0xd
c7e1a060:	0afffff8 	beq	c7e1a048 <serial_putc+0x10>
		serial_putc('\r');
}
c7e1a064:	e8bd8010 	pop	{r4, pc}

c7e1a068 <serial_tstc>:

/*
 * Test whether a character is in the RX buffer
 */
int serial_tstc(void)
{
c7e1a068:	e92d4010 	push	{r4, lr}
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);
c7e1a06c:	e3a00000 	mov	r0, #0	; 0x0
c7e1a070:	ebffffe4 	bl	c7e1a008 <s3c64xx_get_base_uart>

	return uart->UTRSTAT & 0x1;
c7e1a074:	e5900010 	ldr	r0, [r0, #16]
}
c7e1a078:	e2000001 	and	r0, r0, #1	; 0x1
c7e1a07c:	e8bd8010 	pop	{r4, pc}

c7e1a080 <serial_puts>:

void serial_puts(const char *s)
{
c7e1a080:	e92d4070 	push	{r4, r5, r6, lr}
c7e1a084:	e1a05000 	mov	r5, r0
c7e1a088:	e3a04000 	mov	r4, #0	; 0x0
c7e1a08c:	ea000000 	b	c7e1a094 <serial_puts+0x14>
	while (*s)
		serial_putc(*s++);
c7e1a090:	ebffffe8 	bl	c7e1a038 <serial_putc>
	return uart->UTRSTAT & 0x1;
}

void serial_puts(const char *s)
{
	while (*s)
c7e1a094:	e7d53004 	ldrb	r3, [r5, r4]
c7e1a098:	e2844001 	add	r4, r4, #1	; 0x1
c7e1a09c:	e2530000 	subs	r0, r3, #0	; 0x0
c7e1a0a0:	1afffffa 	bne	c7e1a090 <serial_puts+0x10>
		serial_putc(*s++);
}
c7e1a0a4:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e1a0a8 <serial_setbrg>:
	0xdfdf,
	0xffdf,
};

void serial_setbrg(void)
{
c7e1a0a8:	e92d4010 	push	{r4, lr}
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);
c7e1a0ac:	e3a00000 	mov	r0, #0	; 0x0
c7e1a0b0:	ebffffd4 	bl	c7e1a008 <s3c64xx_get_base_uart>
c7e1a0b4:	e1a04000 	mov	r4, r0
	u32 pclk = get_PCLK();
c7e1a0b8:	ebff99a5 	bl	c7e00754 <get_PCLK>
	u32 baudrate = gd->baudrate;
c7e1a0bc:	e5981008 	ldr	r1, [r8, #8]
	int i;

	i = (pclk / baudrate) % 16;
c7e1a0c0:	eb004110 	bl	c7e2a508 <__udivsi3>

	uart->UBRDIV = pclk / baudrate / 16 - 1;
	uart->UDIVSLOT = udivslot[i];
c7e1a0c4:	e59f3030 	ldr	r3, [pc, #48]	; c7e1a0fc <serial_setbrg+0x54>
c7e1a0c8:	e200200f 	and	r2, r0, #15	; 0xf
c7e1a0cc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
	u32 baudrate = gd->baudrate;
	int i;

	i = (pclk / baudrate) % 16;

	uart->UBRDIV = pclk / baudrate / 16 - 1;
c7e1a0d0:	e1a00220 	lsr	r0, r0, #4
	uart->UDIVSLOT = udivslot[i];
c7e1a0d4:	e1a03803 	lsl	r3, r3, #16
c7e1a0d8:	e1a03823 	lsr	r3, r3, #16
	u32 baudrate = gd->baudrate;
	int i;

	i = (pclk / baudrate) % 16;

	uart->UBRDIV = pclk / baudrate / 16 - 1;
c7e1a0dc:	e2400001 	sub	r0, r0, #1	; 0x1
c7e1a0e0:	e5840028 	str	r0, [r4, #40]
	uart->UDIVSLOT = udivslot[i];
c7e1a0e4:	e1c432bc 	strh	r3, [r4, #44]
c7e1a0e8:	e3a03000 	mov	r3, #0	; 0x0

	for (i = 0; i < 100; i++)
c7e1a0ec:	e2833001 	add	r3, r3, #1	; 0x1
c7e1a0f0:	e3530064 	cmp	r3, #100	; 0x64
c7e1a0f4:	1afffffc 	bne	c7e1a0ec <serial_setbrg+0x44>
		barrier();
}
c7e1a0f8:	e8bd8010 	pop	{r4, pc}
c7e1a0fc:	c7e2c628 	.word	0xc7e2c628

c7e1a100 <serial_init>:
/*
 * Initialise the serial port with the given baudrate. The settings
 * are always 8 data bits, no parity, 1 stop bit, no start bits.
 */
int serial_init(void)
{
c7e1a100:	e92d4010 	push	{r4, lr}
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);
c7e1a104:	e3a00000 	mov	r0, #0	; 0x0

	/* reset and enable FIFOs, set triggers to the maximum */
	uart->UFCON = 0xff;
	uart->UMCON = 0;
c7e1a108:	e1a04000 	mov	r4, r0
 * Initialise the serial port with the given baudrate. The settings
 * are always 8 data bits, no parity, 1 stop bit, no start bits.
 */
int serial_init(void)
{
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);
c7e1a10c:	ebffffbd 	bl	c7e1a008 <s3c64xx_get_base_uart>

	/* reset and enable FIFOs, set triggers to the maximum */
	uart->UFCON = 0xff;
c7e1a110:	e3a030ff 	mov	r3, #255	; 0xff
c7e1a114:	e5803008 	str	r3, [r0, #8]
	uart->UMCON = 0;
	/* 8N1 */
	uart->ULCON = 3;
c7e1a118:	e3a03003 	mov	r3, #3	; 0x3
{
	s3c64xx_uart *const uart = s3c64xx_get_base_uart(UART_NR);

	/* reset and enable FIFOs, set triggers to the maximum */
	uart->UFCON = 0xff;
	uart->UMCON = 0;
c7e1a11c:	e580400c 	str	r4, [r0, #12]
	/* 8N1 */
	uart->ULCON = 3;
c7e1a120:	e5803000 	str	r3, [r0]
	/* No interrupts, no DMA, pure polling */
	uart->UCON = 5;
c7e1a124:	e2833002 	add	r3, r3, #2	; 0x2
c7e1a128:	e5803004 	str	r3, [r0, #4]

	serial_setbrg();
c7e1a12c:	ebffffdd 	bl	c7e1a0a8 <serial_setbrg>

	return 0;
}
c7e1a130:	e1a00004 	mov	r0, r4
c7e1a134:	e8bd8010 	pop	{r4, pc}

c7e1a138 <s3c_usb_core_soft_reset>:

void s3c_usb_core_soft_reset(void)
{
	u32 tmp;

	writel(CORE_SOFT_RESET, S3C_OTG_GRSTCTL);
c7e1a138:	e3a02001 	mov	r2, #1	; 0x1
c7e1a13c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a140:	e5832010 	str	r2, [r3, #16]

	do
	{
		tmp = readl(S3C_OTG_GRSTCTL);
c7e1a144:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a148:	e5933010 	ldr	r3, [r3, #16]
	}while(!(tmp & AHB_MASTER_IDLE));
c7e1a14c:	e3530000 	cmp	r3, #0	; 0x0
c7e1a150:	aafffffb 	bge	c7e1a144 <s3c_usb_core_soft_reset+0xc>

}
c7e1a154:	e12fff1e 	bx	lr

c7e1a158 <s3c_usb_init_core>:
	} while(1);
}

void s3c_usb_init_core(void)
{
	writel(PTXFE_HALF|NPTXFE_HALF|MODE_SLAVE|BURST_SINGLE|GBL_INT_UNMASK,
c7e1a158:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a15c:	e3a02001 	mov	r2, #1	; 0x1
c7e1a160:	e5832008 	str	r2, [r3, #8]
		S3C_OTG_GAHBCFG);

	writel(  0<<15		/* PHY Low Power Clock sel */
c7e1a164:	e59f2004 	ldr	r2, [pc, #4]	; c7e1a170 <s3c_usb_init_core+0x18>
c7e1a168:	e583200c 	str	r2, [r3, #12]
		|0<<6		/* 0: high speed utmi+, 1: full speed serial */
		|0<<4		/* 0: utmi+, 1:ulpi */
		|1<<3		/* phy i/f  0:8bit, 1:16bit */
		|0x7<<0,	/* HS/FS Timeout**/
		S3C_OTG_GUSBCFG );
}
c7e1a16c:	e12fff1e 	bx	lr
c7e1a170:	0000540f 	.word	0x0000540f

c7e1a174 <s3c_usb_check_current_mode>:

void s3c_usb_check_current_mode(u8 *pucMode)
{
	u32 tmp;

	tmp = readl(S3C_OTG_GINTSTS);
c7e1a174:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a178:	e5933014 	ldr	r3, [r3, #20]
	*pucMode = tmp & 0x1;
c7e1a17c:	e2033001 	and	r3, r3, #1	; 0x1
c7e1a180:	e5c03000 	strb	r3, [r0]
}
c7e1a184:	e12fff1e 	bx	lr

c7e1a188 <s3c_usb_set_soft_disconnect>:

void s3c_usb_set_soft_disconnect(void)
{
	u32 tmp;

	tmp = readl(S3C_OTG_DCTL);
c7e1a188:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a18c:	e5923804 	ldr	r3, [r2, #2052]
	tmp |= SOFT_DISCONNECT;
c7e1a190:	e3833002 	orr	r3, r3, #2	; 0x2
	writel(tmp, S3C_OTG_DCTL);
c7e1a194:	e5823804 	str	r3, [r2, #2052]
}
c7e1a198:	e12fff1e 	bx	lr

c7e1a19c <s3c_usb_clear_soft_disconnect>:

void s3c_usb_clear_soft_disconnect(void)
{
	u32 tmp;

	tmp = readl(S3C_OTG_DCTL);
c7e1a19c:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a1a0:	e5923804 	ldr	r3, [r2, #2052]
	tmp &= ~SOFT_DISCONNECT;
c7e1a1a4:	e3c33002 	bic	r3, r3, #2	; 0x2
	writel(tmp, S3C_OTG_DCTL);
c7e1a1a8:	e5823804 	str	r3, [r2, #2052]
}
c7e1a1ac:	e12fff1e 	bx	lr

c7e1a1b0 <s3c_usb_init_device>:

void s3c_usb_init_device(void)
{
	writel(1<<18|otg.speed<<0, S3C_OTG_DCFG); /* [][1: full speed(30Mhz) 0:high speed]*/
c7e1a1b0:	e59f2030 	ldr	r2, [pc, #48]	; c7e1a1e8 <s3c_usb_init_device+0x38>
c7e1a1b4:	e5d23054 	ldrb	r3, [r2, #84]
c7e1a1b8:	e5d21055 	ldrb	r1, [r2, #85]
c7e1a1bc:	e5d20056 	ldrb	r0, [r2, #86]
c7e1a1c0:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1a1c4:	e5d22057 	ldrb	r2, [r2, #87]
c7e1a1c8:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1a1cc:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1a1d0:	e3833701 	orr	r3, r3, #262144	; 0x40000
c7e1a1d4:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a1d8:	e5823800 	str	r3, [r2, #2048]

	writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
c7e1a1dc:	e59f3008 	ldr	r3, [pc, #8]	; c7e1a1ec <s3c_usb_init_device+0x3c>
c7e1a1e0:	e5823018 	str	r3, [r2, #24]
		INT_RESET|INT_SUSPEND|INT_RX_FIFO_NOT_EMPTY,
		S3C_OTG_GINTMSK);	/*gint unmask */
}
c7e1a1e4:	e12fff1e 	bx	lr
c7e1a1e8:	c7e42120 	.word	0xc7e42120
c7e1a1ec:	800c3810 	.word	0x800c3810

c7e1a1f0 <s3c_usbc_activate>:

int s3c_usbc_activate (void)
{
	/* dont used in usb high speed, but used in common file cmd_usbd.c  */
	return 0;
}
c7e1a1f0:	e3a00000 	mov	r0, #0	; 0x0
c7e1a1f4:	e12fff1e 	bx	lr

c7e1a1f8 <s3c_usb_stop>:

int s3c_usb_stop (void)
{
	/* dont used in usb high speed, but used in common file cmd_usbd.c  */
	return 0;
}
c7e1a1f8:	e3a00000 	mov	r0, #0	; 0x0
c7e1a1fc:	e12fff1e 	bx	lr

c7e1a200 <s3c_usb_set_inep_xfersize>:

}

void s3c_usb_set_inep_xfersize(EP_TYPE type, u32 pktcnt, u32 xfersize)
{
	if(type == EP_TYPE_CONTROL)
c7e1a200:	e3500000 	cmp	r0, #0	; 0x0
c7e1a204:	1a000003 	bne	c7e1a218 <s3c_usb_set_inep_xfersize+0x18>
	{
		writel((pktcnt<<19)|(xfersize<<0), S3C_OTG_DIEPTSIZ0);
c7e1a208:	e1822981 	orr	r2, r2, r1, lsl #19
c7e1a20c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a210:	e5832910 	str	r2, [r3, #2320]
c7e1a214:	e12fff1e 	bx	lr
	}
	else if(type == EP_TYPE_BULK)
c7e1a218:	e3500002 	cmp	r0, #2	; 0x2
c7e1a21c:	112fff1e 	bxne	lr
	{
		writel((1<<29)|(pktcnt<<19)|(xfersize<<0), S3C_OTG_DIEPTSIZ_IN);
c7e1a220:	e1823981 	orr	r3, r2, r1, lsl #19
c7e1a224:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
c7e1a228:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a22c:	e5823930 	str	r3, [r2, #2352]
c7e1a230:	e12fff1e 	bx	lr

c7e1a234 <s3c_usb_set_outep_xfersize>:
	}
}

void s3c_usb_set_outep_xfersize(EP_TYPE type, u32 pktcnt, u32 xfersize)
{
	if(type == EP_TYPE_CONTROL)
c7e1a234:	e3500000 	cmp	r0, #0	; 0x0
c7e1a238:	1a000004 	bne	c7e1a250 <s3c_usb_set_outep_xfersize+0x1c>
	{
		writel((1<<29)|(pktcnt<<19)|(xfersize<<0), S3C_OTG_DOEPTSIZ0);
c7e1a23c:	e1823981 	orr	r3, r2, r1, lsl #19
c7e1a240:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
c7e1a244:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a248:	e5823b10 	str	r3, [r2, #2832]
c7e1a24c:	e12fff1e 	bx	lr
	}
	else if(type == EP_TYPE_BULK)
c7e1a250:	e3500002 	cmp	r0, #2	; 0x2
c7e1a254:	112fff1e 	bxne	lr
	{
		writel((pktcnt<<19)|(xfersize<<0), S3C_OTG_DOEPTSIZ_OUT);
c7e1a258:	e1822981 	orr	r2, r2, r1, lsl #19
c7e1a25c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a260:	e5832b50 	str	r2, [r3, #2896]
c7e1a264:	e12fff1e 	bx	lr

c7e1a268 <s3c_usb_write_ep0_fifo>:
	}
}

void s3c_usb_write_ep0_fifo(u8 *buf, int num)
{
c7e1a268:	e92d4030 	push	{r4, r5, lr}
c7e1a26c:	e1a0c000 	mov	ip, r0
c7e1a270:	e1a04000 	mov	r4, r0
c7e1a274:	e1a05001 	mov	r5, r1
c7e1a278:	e3a00000 	mov	r0, #0	; 0x0
c7e1a27c:	ea00000b 	b	c7e1a2b0 <s3c_usb_write_ep0_fifo+0x48>

	DBG_SETUP1("[s3c_usb_write_ep0_fifo:");

	for(i=0;i<num;i+=4)
	{
		Wr_Data = ((*(buf+3))<<24)|((*(buf+2))<<16)|((*(buf+1))<<8)|*buf;
c7e1a280:	e5dc3002 	ldrb	r3, [ip, #2]
c7e1a284:	e5dc2003 	ldrb	r2, [ip, #3]
c7e1a288:	e7d41000 	ldrb	r1, [r4, r0]
c7e1a28c:	e1a03803 	lsl	r3, r3, #16
c7e1a290:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1a294:	e5dc2001 	ldrb	r2, [ip, #1]
c7e1a298:	e1833001 	orr	r3, r3, r1
c7e1a29c:	e1833402 	orr	r3, r3, r2, lsl #8
		DBG_SETUP2(" 0x%08x,", Wr_Data);
		writel(Wr_Data, S3C_OTG_EP0_FIFO);
c7e1a2a0:	e59f2014 	ldr	r2, [pc, #20]	; c7e1a2bc <s3c_usb_write_ep0_fifo+0x54>
		buf += 4;
c7e1a2a4:	e28cc004 	add	ip, ip, #4	; 0x4

	for(i=0;i<num;i+=4)
	{
		Wr_Data = ((*(buf+3))<<24)|((*(buf+2))<<16)|((*(buf+1))<<8)|*buf;
		DBG_SETUP2(" 0x%08x,", Wr_Data);
		writel(Wr_Data, S3C_OTG_EP0_FIFO);
c7e1a2a8:	e5823000 	str	r3, [r2]
	int i;
	u32 Wr_Data=0;

	DBG_SETUP1("[s3c_usb_write_ep0_fifo:");

	for(i=0;i<num;i+=4)
c7e1a2ac:	e2800004 	add	r0, r0, #4	; 0x4
c7e1a2b0:	e1500005 	cmp	r0, r5
c7e1a2b4:	bafffff1 	blt	c7e1a280 <s3c_usb_write_ep0_fifo+0x18>
		writel(Wr_Data, S3C_OTG_EP0_FIFO);
		buf += 4;
	}

	DBG_SETUP2("]\n");
}
c7e1a2b8:	e8bd8030 	pop	{r4, r5, pc}
c7e1a2bc:	7c001000 	.word	0x7c001000

c7e1a2c0 <s3c_usb_write_in_fifo>:


void s3c_usb_write_in_fifo(u8 *buf, int num)
{
c7e1a2c0:	e92d4030 	push	{r4, r5, lr}
c7e1a2c4:	e1a0c000 	mov	ip, r0
c7e1a2c8:	e1a04000 	mov	r4, r0
c7e1a2cc:	e1a05001 	mov	r5, r1
c7e1a2d0:	e3a00000 	mov	r0, #0	; 0x0
c7e1a2d4:	ea00000b 	b	c7e1a308 <s3c_usb_write_in_fifo+0x48>
	int i;
	u32 data=0;

	for(i=0;i<num;i+=4)
	{
		data=((*(buf+3))<<24)|((*(buf+2))<<16)|((*(buf+1))<<8)|*buf;
c7e1a2d8:	e5dc3002 	ldrb	r3, [ip, #2]
c7e1a2dc:	e5dc2003 	ldrb	r2, [ip, #3]
c7e1a2e0:	e7d41000 	ldrb	r1, [r4, r0]
c7e1a2e4:	e1a03803 	lsl	r3, r3, #16
c7e1a2e8:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1a2ec:	e5dc2001 	ldrb	r2, [ip, #1]
c7e1a2f0:	e1833001 	orr	r3, r3, r1
c7e1a2f4:	e1833402 	orr	r3, r3, r2, lsl #8
		writel(data, S3C_OTG_IN_FIFO);
c7e1a2f8:	e59f2014 	ldr	r2, [pc, #20]	; c7e1a314 <s3c_usb_write_in_fifo+0x54>
		buf += 4;
c7e1a2fc:	e28cc004 	add	ip, ip, #4	; 0x4
	u32 data=0;

	for(i=0;i<num;i+=4)
	{
		data=((*(buf+3))<<24)|((*(buf+2))<<16)|((*(buf+1))<<8)|*buf;
		writel(data, S3C_OTG_IN_FIFO);
c7e1a300:	e5823000 	str	r3, [r2]
void s3c_usb_write_in_fifo(u8 *buf, int num)
{
	int i;
	u32 data=0;

	for(i=0;i<num;i+=4)
c7e1a304:	e2800004 	add	r0, r0, #4	; 0x4
c7e1a308:	e1500005 	cmp	r0, r5
c7e1a30c:	bafffff1 	blt	c7e1a2d8 <s3c_usb_write_in_fifo+0x18>
	{
		data=((*(buf+3))<<24)|((*(buf+2))<<16)|((*(buf+1))<<8)|*buf;
		writel(data, S3C_OTG_IN_FIFO);
		buf += 4;
	}
}
c7e1a310:	e8bd8030 	pop	{r4, r5, pc}
c7e1a314:	7c002000 	.word	0x7c002000

c7e1a318 <s3c_usb_read_out_fifo>:

void s3c_usb_read_out_fifo(u8 *buf, int num)
{
c7e1a318:	e92d4070 	push	{r4, r5, r6, lr}
c7e1a31c:	e1a0c000 	mov	ip, r0
c7e1a320:	e1a05000 	mov	r5, r0
c7e1a324:	e1a06001 	mov	r6, r1
c7e1a328:	e3a04000 	mov	r4, #0	; 0x0
c7e1a32c:	ea000009 	b	c7e1a358 <s3c_usb_read_out_fifo+0x40>
	int i;
	u32 data;

	for (i=0;i<num;i+=4)
	{
		data = readl(S3C_OTG_OUT_FIFO);
c7e1a330:	e59f3030 	ldr	r3, [pc, #48]	; c7e1a368 <s3c_usb_read_out_fifo+0x50>
c7e1a334:	e5933000 	ldr	r3, [r3]

		buf[i] = (u8)data;
		buf[i+1] = (u8)(data>>8);
		buf[i+2] = (u8)(data>>16);
		buf[i+3] = (u8)(data>>24);
c7e1a338:	e1a00c23 	lsr	r0, r3, #24
	for (i=0;i<num;i+=4)
	{
		data = readl(S3C_OTG_OUT_FIFO);

		buf[i] = (u8)data;
		buf[i+1] = (u8)(data>>8);
c7e1a33c:	e1a02423 	lsr	r2, r3, #8
		buf[i+2] = (u8)(data>>16);
c7e1a340:	e1a01823 	lsr	r1, r3, #16

	for (i=0;i<num;i+=4)
	{
		data = readl(S3C_OTG_OUT_FIFO);

		buf[i] = (u8)data;
c7e1a344:	e7c53004 	strb	r3, [r5, r4]
		buf[i+1] = (u8)(data>>8);
c7e1a348:	e54c2003 	strb	r2, [ip, #-3]
		buf[i+2] = (u8)(data>>16);
c7e1a34c:	e54c1002 	strb	r1, [ip, #-2]
		buf[i+3] = (u8)(data>>24);
c7e1a350:	e54c0001 	strb	r0, [ip, #-1]
void s3c_usb_read_out_fifo(u8 *buf, int num)
{
	int i;
	u32 data;

	for (i=0;i<num;i+=4)
c7e1a354:	e2844004 	add	r4, r4, #4	; 0x4
c7e1a358:	e1540006 	cmp	r4, r6
c7e1a35c:	e28cc004 	add	ip, ip, #4	; 0x4
c7e1a360:	bafffff2 	blt	c7e1a330 <s3c_usb_read_out_fifo+0x18>
		buf[i] = (u8)data;
		buf[i+1] = (u8)(data>>8);
		buf[i+2] = (u8)(data>>16);
		buf[i+3] = (u8)(data>>24);
	}
}
c7e1a364:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1a368:	7c003000 	.word	0x7c003000

c7e1a36c <s3c_usb_get_desc>:

void s3c_usb_get_desc(void)
{
	switch (otg.dev_req.wValue_H) {
c7e1a36c:	e59f31c4 	ldr	r3, [pc, #452]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a370:	e5d33043 	ldrb	r3, [r3, #67]
c7e1a374:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1a378:	e3530006 	cmp	r3, #6	; 0x6
c7e1a37c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e1a380:	ea00006b 	b	c7e1a534 <s3c_usb_get_desc+0x1c8>
c7e1a384:	c7e1a3a0 	.word	0xc7e1a3a0
c7e1a388:	c7e1a3d4 	.word	0xc7e1a3d4
c7e1a38c:	c7e1a428 	.word	0xc7e1a428
c7e1a390:	c7e1a534 	.word	0xc7e1a534
c7e1a394:	c7e1a474 	.word	0xc7e1a474
c7e1a398:	c7e1a4b0 	.word	0xc7e1a4b0
c7e1a39c:	c7e1a4f4 	.word	0xc7e1a4f4
	case DEVICE_DESCRIPTOR:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a3a0:	e59f3190 	ldr	r3, [pc, #400]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a3a4:	e3a00000 	mov	r0, #0	; 0x0
c7e1a3a8:	e5d32047 	ldrb	r2, [r3, #71]
c7e1a3ac:	e5d31046 	ldrb	r1, [r3, #70]
			otg.dev_req.wLength_L);
		DBG_SETUP1("DEVICE_DESCRIPTOR = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_0;
c7e1a3b0:	e5c3004b 	strb	r0, [r3, #75]

void s3c_usb_get_desc(void)
{
	switch (otg.dev_req.wValue_H) {
	case DEVICE_DESCRIPTOR:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a3b4:	e1811402 	orr	r1, r1, r2, lsl #8
c7e1a3b8:	e1a02421 	lsr	r2, r1, #8
c7e1a3bc:	e1a0cc21 	lsr	ip, r1, #24
c7e1a3c0:	e5c32081 	strb	r2, [r3, #129]
c7e1a3c4:	e5c30082 	strb	r0, [r3, #130]
c7e1a3c8:	e5c3c083 	strb	ip, [r3, #131]
			otg.dev_req.wLength_L);
		DBG_SETUP1("DEVICE_DESCRIPTOR = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_0;
c7e1a3cc:	e280200b 	add	r2, r0, #11	; 0xb
c7e1a3d0:	ea000042 	b	c7e1a4e0 <s3c_usb_get_desc+0x174>
		break;

	case CONFIGURATION_DESCRIPTOR:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a3d4:	e59f015c 	ldr	r0, [pc, #348]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a3d8:	e3a03000 	mov	r3, #0	; 0x0
c7e1a3dc:	e5d01047 	ldrb	r1, [r0, #71]
c7e1a3e0:	e5d02046 	ldrb	r2, [r0, #70]
c7e1a3e4:	e5c03082 	strb	r3, [r0, #130]
c7e1a3e8:	e1822401 	orr	r2, r2, r1, lsl #8
			otg.dev_req.wLength_L);
		DBG_SETUP1("CONFIGURATION_DESCRIPTOR = 0x%x \n",otg.req_length);

		/* GET_DESCRIPTOR:CONFIGURATION+INTERFACE+ENDPOINT0+ENDPOINT1 */
		if (otg.req_length > CONFIG_DESC_SIZE){
c7e1a3ec:	e3520009 	cmp	r2, #9	; 0x9
		DBG_SETUP1("DEVICE_DESCRIPTOR = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_0;
		break;

	case CONFIGURATION_DESCRIPTOR:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a3f0:	e1a03422 	lsr	r3, r2, #8
c7e1a3f4:	e1a01c22 	lsr	r1, r2, #24
c7e1a3f8:	e5c03081 	strb	r3, [r0, #129]
c7e1a3fc:	e5c02080 	strb	r2, [r0, #128]
			otg.dev_req.wLength_L);
		DBG_SETUP1("CONFIGURATION_DESCRIPTOR = 0x%x \n",otg.req_length);

		/* GET_DESCRIPTOR:CONFIGURATION+INTERFACE+ENDPOINT0+ENDPOINT1 */
		if (otg.req_length > CONFIG_DESC_SIZE){
			otg.ep0_state = EP0_STATE_GD_CFG_0;
c7e1a400:	83a03015 	movhi	r3, #21	; 0x15
		DBG_SETUP1("DEVICE_DESCRIPTOR = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_0;
		break;

	case CONFIGURATION_DESCRIPTOR:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a404:	e3a02000 	mov	r2, #0	; 0x0

		/* GET_DESCRIPTOR:CONFIGURATION+INTERFACE+ENDPOINT0+ENDPOINT1 */
		if (otg.req_length > CONFIG_DESC_SIZE){
			otg.ep0_state = EP0_STATE_GD_CFG_0;
		} else
			otg.ep0_state = EP0_STATE_GD_CFG_ONLY_0;
c7e1a408:	93a03029 	movls	r3, #41	; 0x29
		DBG_SETUP1("DEVICE_DESCRIPTOR = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_0;
		break;

	case CONFIGURATION_DESCRIPTOR:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a40c:	e5c01083 	strb	r1, [r0, #131]
			otg.dev_req.wLength_L);
		DBG_SETUP1("CONFIGURATION_DESCRIPTOR = 0x%x \n",otg.req_length);

		/* GET_DESCRIPTOR:CONFIGURATION+INTERFACE+ENDPOINT0+ENDPOINT1 */
		if (otg.req_length > CONFIG_DESC_SIZE){
			otg.ep0_state = EP0_STATE_GD_CFG_0;
c7e1a410:	85c0204b 	strbhi	r2, [r0, #75]
		} else
			otg.ep0_state = EP0_STATE_GD_CFG_ONLY_0;
c7e1a414:	95c0204b 	strbls	r2, [r0, #75]
c7e1a418:	e5c03048 	strb	r3, [r0, #72]
c7e1a41c:	e5c02049 	strb	r2, [r0, #73]
c7e1a420:	e5c0204a 	strb	r2, [r0, #74]
c7e1a424:	e12fff1e 	bx	lr
		break;

	case STRING_DESCRIPTOR :
		DBG_SETUP1("STRING_DESCRIPTOR \n");

		switch(otg.dev_req.wValue_L) {
c7e1a428:	e59f1108 	ldr	r1, [pc, #264]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a42c:	e5d13042 	ldrb	r3, [r1, #66]
c7e1a430:	e3530001 	cmp	r3, #1	; 0x1
c7e1a434:	0a000006 	beq	c7e1a454 <s3c_usb_get_desc+0xe8>
		case 0:
			otg.ep0_state = EP0_STATE_GD_STR_I0;
c7e1a438:	33a02000 	movcc	r2, #0	; 0x0
c7e1a43c:	35c1204b 	strbcc	r2, [r1, #75]
c7e1a440:	33a0301e 	movcc	r3, #30	; 0x1e
		break;

	case STRING_DESCRIPTOR :
		DBG_SETUP1("STRING_DESCRIPTOR \n");

		switch(otg.dev_req.wValue_L) {
c7e1a444:	3a000015 	bcc	c7e1a4a0 <s3c_usb_get_desc+0x134>
c7e1a448:	e3530002 	cmp	r3, #2	; 0x2
c7e1a44c:	112fff1e 	bxne	lr
c7e1a450:	ea000003 	b	c7e1a464 <s3c_usb_get_desc+0xf8>
		case 0:
			otg.ep0_state = EP0_STATE_GD_STR_I0;
			break;
		case 1:
			otg.ep0_state = EP0_STATE_GD_STR_I1;
c7e1a454:	e3a02000 	mov	r2, #0	; 0x0
c7e1a458:	e5c1204b 	strb	r2, [r1, #75]
c7e1a45c:	e3a0301f 	mov	r3, #31	; 0x1f
c7e1a460:	ea00000e 	b	c7e1a4a0 <s3c_usb_get_desc+0x134>
			break;
		case 2:
			otg.ep0_state = EP0_STATE_GD_STR_I2;
c7e1a464:	e3a02000 	mov	r2, #0	; 0x0
c7e1a468:	e5c1204b 	strb	r2, [r1, #75]
c7e1a46c:	e3a03020 	mov	r3, #32	; 0x20
c7e1a470:	ea00000a 	b	c7e1a4a0 <s3c_usb_get_desc+0x134>
		}
		break;

	case ENDPOINT_DESCRIPTOR:
		DBG_SETUP1("ENDPOINT_DESCRIPTOR \n");
		switch(otg.dev_req.wValue_L&0xf) {
c7e1a474:	e59f10bc 	ldr	r1, [pc, #188]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a478:	e5d13042 	ldrb	r3, [r1, #66]
c7e1a47c:	e213200f 	ands	r2, r3, #15	; 0xf
		case 0:
			otg.ep0_state=EP0_STATE_GD_EP0_ONLY_0;
c7e1a480:	05c1204b 	strbeq	r2, [r1, #75]
c7e1a484:	03a0302e 	moveq	r3, #46	; 0x2e
		}
		break;

	case ENDPOINT_DESCRIPTOR:
		DBG_SETUP1("ENDPOINT_DESCRIPTOR \n");
		switch(otg.dev_req.wValue_L&0xf) {
c7e1a488:	0a000004 	beq	c7e1a4a0 <s3c_usb_get_desc+0x134>
c7e1a48c:	e3520001 	cmp	r2, #1	; 0x1
c7e1a490:	112fff1e 	bxne	lr
		case 0:
			otg.ep0_state=EP0_STATE_GD_EP0_ONLY_0;
			break;
		case 1:
			otg.ep0_state=EP0_STATE_GD_EP1_ONLY_0;
c7e1a494:	e3a02000 	mov	r2, #0	; 0x0
c7e1a498:	e5c1204b 	strb	r2, [r1, #75]
c7e1a49c:	e3a0302f 	mov	r3, #47	; 0x2f
c7e1a4a0:	e5c13048 	strb	r3, [r1, #72]
c7e1a4a4:	e5c12049 	strb	r2, [r1, #73]
c7e1a4a8:	e5c1204a 	strb	r2, [r1, #74]
c7e1a4ac:	e12fff1e 	bx	lr
			break;
		}
		break;

	case DEVICE_QUALIFIER:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a4b0:	e59f3080 	ldr	r3, [pc, #128]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a4b4:	e3a00000 	mov	r0, #0	; 0x0
c7e1a4b8:	e5d32047 	ldrb	r2, [r3, #71]
c7e1a4bc:	e5d31046 	ldrb	r1, [r3, #70]
			otg.dev_req.wLength_L);
		DBG_SETUP1("DEVICE_QUALIFIER = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_QUALIFIER;
c7e1a4c0:	e5c3004b 	strb	r0, [r3, #75]
			break;
		}
		break;

	case DEVICE_QUALIFIER:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a4c4:	e1811402 	orr	r1, r1, r2, lsl #8
c7e1a4c8:	e1a02421 	lsr	r2, r1, #8
c7e1a4cc:	e1a0cc21 	lsr	ip, r1, #24
c7e1a4d0:	e5c32081 	strb	r2, [r3, #129]
c7e1a4d4:	e5c30082 	strb	r0, [r3, #130]
c7e1a4d8:	e5c3c083 	strb	ip, [r3, #131]
			otg.dev_req.wLength_L);
		DBG_SETUP1("DEVICE_QUALIFIER = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_QUALIFIER;
c7e1a4dc:	e2802021 	add	r2, r0, #33	; 0x21
c7e1a4e0:	e5c32048 	strb	r2, [r3, #72]
			break;
		}
		break;

	case DEVICE_QUALIFIER:
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a4e4:	e5c31080 	strb	r1, [r3, #128]
			otg.dev_req.wLength_L);
		DBG_SETUP1("DEVICE_QUALIFIER = 0x%x \n",otg.req_length);
		otg.ep0_state = EP0_STATE_GD_DEV_QUALIFIER;
c7e1a4e8:	e5c30049 	strb	r0, [r3, #73]
c7e1a4ec:	e5c3004a 	strb	r0, [r3, #74]
c7e1a4f0:	e12fff1e 	bx	lr
		break;

	case OTHER_SPEED_CONFIGURATION :
		DBG_SETUP1("OTHER_SPEED_CONFIGURATION \n");
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a4f4:	e59f303c 	ldr	r3, [pc, #60]	; c7e1a538 <s3c_usb_get_desc+0x1cc>
c7e1a4f8:	e3a00000 	mov	r0, #0	; 0x0
c7e1a4fc:	e5d32047 	ldrb	r2, [r3, #71]
c7e1a500:	e5d31046 	ldrb	r1, [r3, #70]
			otg.dev_req.wLength_L);
		otg.ep0_state = EP0_STATE_GD_OTHER_SPEED;
c7e1a504:	e5c3004b 	strb	r0, [r3, #75]
		otg.ep0_state = EP0_STATE_GD_DEV_QUALIFIER;
		break;

	case OTHER_SPEED_CONFIGURATION :
		DBG_SETUP1("OTHER_SPEED_CONFIGURATION \n");
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a508:	e1811402 	orr	r1, r1, r2, lsl #8
c7e1a50c:	e1a02421 	lsr	r2, r1, #8
c7e1a510:	e1a0cc21 	lsr	ip, r1, #24
c7e1a514:	e5c32081 	strb	r2, [r3, #129]
			otg.dev_req.wLength_L);
		otg.ep0_state = EP0_STATE_GD_OTHER_SPEED;
c7e1a518:	e2802028 	add	r2, r0, #40	; 0x28
		otg.ep0_state = EP0_STATE_GD_DEV_QUALIFIER;
		break;

	case OTHER_SPEED_CONFIGURATION :
		DBG_SETUP1("OTHER_SPEED_CONFIGURATION \n");
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a51c:	e5c30082 	strb	r0, [r3, #130]
c7e1a520:	e5c3c083 	strb	ip, [r3, #131]
			otg.dev_req.wLength_L);
		otg.ep0_state = EP0_STATE_GD_OTHER_SPEED;
c7e1a524:	e5c32048 	strb	r2, [r3, #72]
		otg.ep0_state = EP0_STATE_GD_DEV_QUALIFIER;
		break;

	case OTHER_SPEED_CONFIGURATION :
		DBG_SETUP1("OTHER_SPEED_CONFIGURATION \n");
		otg.req_length = (u32)((otg.dev_req.wLength_H << 8) |
c7e1a528:	e5c31080 	strb	r1, [r3, #128]
			otg.dev_req.wLength_L);
		otg.ep0_state = EP0_STATE_GD_OTHER_SPEED;
c7e1a52c:	e5c30049 	strb	r0, [r3, #73]
c7e1a530:	e5c3004a 	strb	r0, [r3, #74]
c7e1a534:	e12fff1e 	bx	lr
c7e1a538:	c7e42120 	.word	0xc7e42120

c7e1a53c <s3c_usb_clear_feature>:
	}
}

void s3c_usb_clear_feature(void)
{
	switch (otg.dev_req.bmRequestType) {
c7e1a53c:	e59f1070 	ldr	r1, [pc, #112]	; c7e1a5b4 <s3c_usb_clear_feature+0x78>
c7e1a540:	e5d12040 	ldrb	r2, [r1, #64]
c7e1a544:	e3520000 	cmp	r2, #0	; 0x0
c7e1a548:	0a000002 	beq	c7e1a558 <s3c_usb_clear_feature+0x1c>
c7e1a54c:	e3520002 	cmp	r2, #2	; 0x2
c7e1a550:	1a000010 	bne	c7e1a598 <s3c_usb_clear_feature+0x5c>
c7e1a554:	ea000003 	b	c7e1a568 <s3c_usb_clear_feature+0x2c>
	case DEVICE_RECIPIENT:
		DBG_SETUP1("DEVICE_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 1)
c7e1a558:	e5d13042 	ldrb	r3, [r1, #66]
c7e1a55c:	e3530001 	cmp	r3, #1	; 0x1
			remode_wakeup = FALSE;
c7e1a560:	05812084 	streq	r2, [r1, #132]
c7e1a564:	ea00000b 	b	c7e1a598 <s3c_usb_clear_feature+0x5c>
		break;

	case ENDPOINT_RECIPIENT:
		DBG_SETUP1("ENDPOINT_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 0) {
c7e1a568:	e5d12042 	ldrb	r2, [r1, #66]
c7e1a56c:	e3520000 	cmp	r2, #0	; 0x0
c7e1a570:	1a000008 	bne	c7e1a598 <s3c_usb_clear_feature+0x5c>
			if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
c7e1a574:	e5d13044 	ldrb	r3, [r1, #68]
c7e1a578:	e213307f 	ands	r3, r3, #127	; 0x7f
				get_status.ep_ctrl= 0;
c7e1a57c:	05c1308a 	strbeq	r3, [r1, #138]
		break;

	case ENDPOINT_RECIPIENT:
		DBG_SETUP1("ENDPOINT_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 0) {
			if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
c7e1a580:	0a000004 	beq	c7e1a598 <s3c_usb_clear_feature+0x5c>
				get_status.ep_ctrl= 0;

			/* IN	Endpoint */
			if ((otg.dev_req.wIndex_L & 0x7f) == BULK_IN_EP)
c7e1a584:	e3530001 	cmp	r3, #1	; 0x1
				get_status.ep_in= 0;
c7e1a588:	05c1208b 	strbeq	r2, [r1, #139]
		if (otg.dev_req.wValue_L == 0) {
			if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
				get_status.ep_ctrl= 0;

			/* IN	Endpoint */
			if ((otg.dev_req.wIndex_L & 0x7f) == BULK_IN_EP)
c7e1a58c:	0a000001 	beq	c7e1a598 <s3c_usb_clear_feature+0x5c>
				get_status.ep_in= 0;

			/* OUT Endpoint */
			if ((otg.dev_req.wIndex_L & 0x7f) == BULK_OUT_EP)
c7e1a590:	e3530002 	cmp	r3, #2	; 0x2
				get_status.ep_out= 0;
c7e1a594:	05c1208c 	strbeq	r2, [r1, #140]

	default:
		DBG_SETUP1("\n");
		break;
	}
	otg.ep0_state = EP0_STATE_INIT;
c7e1a598:	e59f2014 	ldr	r2, [pc, #20]	; c7e1a5b4 <s3c_usb_clear_feature+0x78>
c7e1a59c:	e3a03000 	mov	r3, #0	; 0x0
c7e1a5a0:	e5c2304b 	strb	r3, [r2, #75]
c7e1a5a4:	e5c23048 	strb	r3, [r2, #72]
c7e1a5a8:	e5c23049 	strb	r3, [r2, #73]
c7e1a5ac:	e5c2304a 	strb	r3, [r2, #74]

}
c7e1a5b0:	e12fff1e 	bx	lr
c7e1a5b4:	c7e42120 	.word	0xc7e42120

c7e1a5b8 <s3c_usb_set_feature>:

void s3c_usb_set_feature(void)
{
c7e1a5b8:	e92d4010 	push	{r4, lr}
	u32 tmp;

	switch (otg.dev_req.bmRequestType) {
c7e1a5bc:	e59f214c 	ldr	r2, [pc, #332]	; c7e1a710 <s3c_usb_set_feature+0x158>
c7e1a5c0:	e5d21040 	ldrb	r1, [r2, #64]
c7e1a5c4:	e3510000 	cmp	r1, #0	; 0x0
c7e1a5c8:	0a000002 	beq	c7e1a5d8 <s3c_usb_set_feature+0x20>
c7e1a5cc:	e3510002 	cmp	r1, #2	; 0x2
c7e1a5d0:	1a000012 	bne	c7e1a620 <s3c_usb_set_feature+0x68>
c7e1a5d4:	ea000003 	b	c7e1a5e8 <s3c_usb_set_feature+0x30>
	case DEVICE_RECIPIENT:
		DBG_SETUP1("DEVICE_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 1)
c7e1a5d8:	e5d23042 	ldrb	r3, [r2, #66]
c7e1a5dc:	e3530001 	cmp	r3, #1	; 0x1
			remode_wakeup = TRUE;
c7e1a5e0:	05823084 	streq	r3, [r2, #132]
c7e1a5e4:	ea00000d 	b	c7e1a620 <s3c_usb_set_feature+0x68>
			break;

	case ENDPOINT_RECIPIENT:
		DBG_SETUP1("ENDPOINT_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 0) {
c7e1a5e8:	e5d23042 	ldrb	r3, [r2, #66]
c7e1a5ec:	e3530000 	cmp	r3, #0	; 0x0
c7e1a5f0:	1a00000a 	bne	c7e1a620 <s3c_usb_set_feature+0x68>
			if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
c7e1a5f4:	e5d23044 	ldrb	r3, [r2, #68]
c7e1a5f8:	e213307f 	ands	r3, r3, #127	; 0x7f
				get_status.ep_ctrl= 1;
c7e1a5fc:	03a03001 	moveq	r3, #1	; 0x1
c7e1a600:	05c2308a 	strbeq	r3, [r2, #138]
			break;

	case ENDPOINT_RECIPIENT:
		DBG_SETUP1("ENDPOINT_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 0) {
			if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
c7e1a604:	0a000005 	beq	c7e1a620 <s3c_usb_set_feature+0x68>
				get_status.ep_ctrl= 1;

			if ((otg.dev_req.wIndex_L & 0x7f) == BULK_IN_EP)
c7e1a608:	e3530001 	cmp	r3, #1	; 0x1
				get_status.ep_in= 1;
c7e1a60c:	05c2308b 	strbeq	r3, [r2, #139]
		DBG_SETUP1("ENDPOINT_RECIPIENT \n");
		if (otg.dev_req.wValue_L == 0) {
			if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
				get_status.ep_ctrl= 1;

			if ((otg.dev_req.wIndex_L & 0x7f) == BULK_IN_EP)
c7e1a610:	0a000002 	beq	c7e1a620 <s3c_usb_set_feature+0x68>
				get_status.ep_in= 1;

			if ((otg.dev_req.wIndex_L & 0x7f) == BULK_OUT_EP)
c7e1a614:	e3530002 	cmp	r3, #2	; 0x2
				get_status.ep_out= 1;
c7e1a618:	03a03001 	moveq	r3, #1	; 0x1
c7e1a61c:	05c2308c 	strbeq	r3, [r2, #140]
	default:
		DBG_SETUP1("\n");
		break;
	}

	switch (otg.dev_req.wValue_L) {
c7e1a620:	e59f00e8 	ldr	r0, [pc, #232]	; c7e1a710 <s3c_usb_set_feature+0x158>
c7e1a624:	e5d03042 	ldrb	r3, [r0, #66]
c7e1a628:	e3530002 	cmp	r3, #2	; 0x2
c7e1a62c:	1a000030 	bne	c7e1a6f4 <s3c_usb_set_feature+0x13c>
	case EP_STALL:
		/* TBD: additional processing if required */
		break;

	case TEST_MODE:
		if ((0 != otg.dev_req.wIndex_L ) ||(0 != otg.dev_req.bmRequestType))
c7e1a630:	e5d03044 	ldrb	r3, [r0, #68]
c7e1a634:	e3530000 	cmp	r3, #0	; 0x0
c7e1a638:	1a00002d 	bne	c7e1a6f4 <s3c_usb_set_feature+0x13c>
c7e1a63c:	e3510000 	cmp	r1, #0	; 0x0
c7e1a640:	1a00002b 	bne	c7e1a6f4 <s3c_usb_set_feature+0x13c>
			break;

		/* Set TEST MODE*/
		tmp = readl(S3C_OTG_DCTL);
c7e1a644:	e281131f 	add	r1, r1, #2080374784	; 0x7c000000
c7e1a648:	e5912804 	ldr	r2, [r1, #2052]
		tmp = (tmp & ~(TEST_CONTROL_FIELD)) | (TEST_FORCE_ENABLE_MODE);
c7e1a64c:	e3c22070 	bic	r2, r2, #112	; 0x70
c7e1a650:	e3822050 	orr	r2, r2, #80	; 0x50
		writel(tmp, S3C_OTG_DCTL);

		switch(otg.dev_req.wIndex_H) {
c7e1a654:	e5d03045 	ldrb	r3, [r0, #69]
			break;

		/* Set TEST MODE*/
		tmp = readl(S3C_OTG_DCTL);
		tmp = (tmp & ~(TEST_CONTROL_FIELD)) | (TEST_FORCE_ENABLE_MODE);
		writel(tmp, S3C_OTG_DCTL);
c7e1a658:	e5812804 	str	r2, [r1, #2052]

		switch(otg.dev_req.wIndex_H) {
c7e1a65c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1a660:	e3530003 	cmp	r3, #3	; 0x3
c7e1a664:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e1a668:	ea000021 	b	c7e1a6f4 <s3c_usb_set_feature+0x13c>
c7e1a66c:	c7e1a67c 	.word	0xc7e1a67c
c7e1a670:	c7e1a690 	.word	0xc7e1a690
c7e1a674:	c7e1a6a4 	.word	0xc7e1a6a4
c7e1a678:	c7e1a6bc 	.word	0xc7e1a6bc
		case TEST_J:
			/*Set Test J*/
			tmp = readl(S3C_OTG_DCTL);
c7e1a67c:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a680:	e5923804 	ldr	r3, [r2, #2052]
			tmp = (tmp & ~(TEST_CONTROL_FIELD)) | (TEST_J_MODE);
c7e1a684:	e3c33070 	bic	r3, r3, #112	; 0x70
c7e1a688:	e3833010 	orr	r3, r3, #16	; 0x10
			writel(tmp, S3C_OTG_DCTL);
c7e1a68c:	ea000008 	b	c7e1a6b4 <s3c_usb_set_feature+0xfc>
			break;

		case TEST_K:
			/*Set Test K*/
			tmp = readl(S3C_OTG_DCTL);
c7e1a690:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a694:	e5923804 	ldr	r3, [r2, #2052]
			tmp = (tmp & ~(TEST_CONTROL_FIELD)) | (TEST_K_MODE);
c7e1a698:	e3c33070 	bic	r3, r3, #112	; 0x70
c7e1a69c:	e3833020 	orr	r3, r3, #32	; 0x20
			writel(tmp, S3C_OTG_DCTL);
c7e1a6a0:	ea000003 	b	c7e1a6b4 <s3c_usb_set_feature+0xfc>
			break;

		case TEST_SE0_NAK:
			/*Set Test SE0NAK*/
			tmp = readl(S3C_OTG_DCTL);
c7e1a6a4:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a6a8:	e5923804 	ldr	r3, [r2, #2052]
			tmp = (tmp & ~(TEST_CONTROL_FIELD)) | (TEST_SE0_NAK_MODE);
c7e1a6ac:	e3c33070 	bic	r3, r3, #112	; 0x70
c7e1a6b0:	e3833030 	orr	r3, r3, #48	; 0x30
			writel(tmp, S3C_OTG_DCTL);
c7e1a6b4:	e5823804 	str	r3, [r2, #2052]
c7e1a6b8:	ea00000d 	b	c7e1a6f4 <s3c_usb_set_feature+0x13c>
			break;

		case TEST_PACKET:
			DBG_SETUP1 ("Test_packet\n");
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1a6bc:	e3a03321 	mov	r3, #-2080374784	; 0x84000000
c7e1a6c0:	e3a0431f 	mov	r4, #2080374784	; 0x7c000000
c7e1a6c4:	e5843900 	str	r3, [r4, #2304]
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, TEST_PKT_SIZE);
c7e1a6c8:	e3a02035 	mov	r2, #53	; 0x35
c7e1a6cc:	e3a00000 	mov	r0, #0	; 0x0
c7e1a6d0:	e3a01001 	mov	r1, #1	; 0x1
c7e1a6d4:	ebfffec9 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			s3c_usb_write_ep0_fifo(test_pkt, TEST_PKT_SIZE);
c7e1a6d8:	e59f0034 	ldr	r0, [pc, #52]	; c7e1a714 <s3c_usb_set_feature+0x15c>
c7e1a6dc:	e3a01035 	mov	r1, #53	; 0x35
c7e1a6e0:	ebfffee0 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
			tmp = readl(S3C_OTG_DCTL);
c7e1a6e4:	e5943804 	ldr	r3, [r4, #2052]
			tmp = (tmp & ~(TEST_CONTROL_FIELD)) | (TEST_PACKET_MODE);
c7e1a6e8:	e3c33070 	bic	r3, r3, #112	; 0x70
c7e1a6ec:	e3833040 	orr	r3, r3, #64	; 0x40
			writel(tmp, S3C_OTG_DCTL);
c7e1a6f0:	e5843804 	str	r3, [r4, #2052]
		break;

	default:
		break;
	}
	otg.ep0_state = EP0_STATE_INIT;
c7e1a6f4:	e59f2014 	ldr	r2, [pc, #20]	; c7e1a710 <s3c_usb_set_feature+0x158>
c7e1a6f8:	e3a03000 	mov	r3, #0	; 0x0
c7e1a6fc:	e5c2304b 	strb	r3, [r2, #75]
c7e1a700:	e5c23048 	strb	r3, [r2, #72]
c7e1a704:	e5c23049 	strb	r3, [r2, #73]
c7e1a708:	e5c2304a 	strb	r3, [r2, #74]

}
c7e1a70c:	e8bd8010 	pop	{r4, pc}
c7e1a710:	c7e42120 	.word	0xc7e42120
c7e1a714:	c7e3a1fc 	.word	0xc7e3a1fc

c7e1a718 <s3c_usb_get_status>:

void s3c_usb_get_status(void)
{
	switch(otg.dev_req.bmRequestType) {
c7e1a718:	e59f109c 	ldr	r1, [pc, #156]	; c7e1a7bc <s3c_usb_get_status+0xa4>
c7e1a71c:	e5d13040 	ldrb	r3, [r1, #64]
c7e1a720:	e3530081 	cmp	r3, #129	; 0x81
c7e1a724:	0a00000b 	beq	c7e1a758 <s3c_usb_get_status+0x40>
c7e1a728:	e3530082 	cmp	r3, #130	; 0x82
c7e1a72c:	0a00000f 	beq	c7e1a770 <s3c_usb_get_status+0x58>
c7e1a730:	e3530080 	cmp	r3, #128	; 0x80
c7e1a734:	112fff1e 	bxne	lr
	case  (0x80):	/*device */
		DBG_SETUP1("DEVICE\n");
		get_status.Device=((u8)remode_wakeup<<1)|0x1; /* SelfPowered */
c7e1a738:	e5d13084 	ldrb	r3, [r1, #132]
		otg.ep0_state = EP0_STATE_GET_STATUS0;
c7e1a73c:	e3a02000 	mov	r2, #0	; 0x0
void s3c_usb_get_status(void)
{
	switch(otg.dev_req.bmRequestType) {
	case  (0x80):	/*device */
		DBG_SETUP1("DEVICE\n");
		get_status.Device=((u8)remode_wakeup<<1)|0x1; /* SelfPowered */
c7e1a740:	e1a03083 	lsl	r3, r3, #1
c7e1a744:	e3833001 	orr	r3, r3, #1	; 0x1
c7e1a748:	e5c13088 	strb	r3, [r1, #136]
		otg.ep0_state = EP0_STATE_GET_STATUS0;
c7e1a74c:	e5c1204b 	strb	r2, [r1, #75]
c7e1a750:	e3a03023 	mov	r3, #35	; 0x23
c7e1a754:	ea000014 	b	c7e1a7ac <s3c_usb_get_status+0x94>
		break;

	case  (0x81):	/*interface */
		DBG_SETUP1("INTERFACE\n");
		get_status.Interface=0;
c7e1a758:	e3a02000 	mov	r2, #0	; 0x0
		otg.ep0_state = EP0_STATE_GET_STATUS1;
c7e1a75c:	e3a03024 	mov	r3, #36	; 0x24
c7e1a760:	e5c1204b 	strb	r2, [r1, #75]
c7e1a764:	e5c13048 	strb	r3, [r1, #72]
		otg.ep0_state = EP0_STATE_GET_STATUS0;
		break;

	case  (0x81):	/*interface */
		DBG_SETUP1("INTERFACE\n");
		get_status.Interface=0;
c7e1a768:	e5c12089 	strb	r2, [r1, #137]
c7e1a76c:	ea00000f 	b	c7e1a7b0 <s3c_usb_get_status+0x98>
		otg.ep0_state = EP0_STATE_GET_STATUS1;
		break;

	case  (0x82):	/*endpoint */
		DBG_SETUP1("ENDPOINT\n");
		if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
c7e1a770:	e5d13044 	ldrb	r3, [r1, #68]
c7e1a774:	e213207f 	ands	r2, r3, #127	; 0x7f
			otg.ep0_state = EP0_STATE_GET_STATUS2;
c7e1a778:	05c1204b 	strbeq	r2, [r1, #75]
c7e1a77c:	03a03025 	moveq	r3, #37	; 0x25
		otg.ep0_state = EP0_STATE_GET_STATUS1;
		break;

	case  (0x82):	/*endpoint */
		DBG_SETUP1("ENDPOINT\n");
		if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
c7e1a780:	0a000009 	beq	c7e1a7ac <s3c_usb_get_status+0x94>
			otg.ep0_state = EP0_STATE_GET_STATUS2;

		if ((otg.dev_req.wIndex_L & 0x7f) == BULK_IN_EP)
c7e1a784:	e3520001 	cmp	r2, #1	; 0x1
			otg.ep0_state = EP0_STATE_GET_STATUS3;
c7e1a788:	03a02000 	moveq	r2, #0	; 0x0
c7e1a78c:	05c1204b 	strbeq	r2, [r1, #75]
c7e1a790:	03a03026 	moveq	r3, #38	; 0x26
	case  (0x82):	/*endpoint */
		DBG_SETUP1("ENDPOINT\n");
		if ((otg.dev_req.wIndex_L & 0x7f) == CONTROL_EP)
			otg.ep0_state = EP0_STATE_GET_STATUS2;

		if ((otg.dev_req.wIndex_L & 0x7f) == BULK_IN_EP)
c7e1a794:	0a000004 	beq	c7e1a7ac <s3c_usb_get_status+0x94>
			otg.ep0_state = EP0_STATE_GET_STATUS3;

		if ((otg.dev_req.wIndex_L & 0x7f) == BULK_OUT_EP)
c7e1a798:	e3520002 	cmp	r2, #2	; 0x2
c7e1a79c:	112fff1e 	bxne	lr
			otg.ep0_state = EP0_STATE_GET_STATUS4;
c7e1a7a0:	e3a02000 	mov	r2, #0	; 0x0
c7e1a7a4:	e5c1204b 	strb	r2, [r1, #75]
c7e1a7a8:	e3a03027 	mov	r3, #39	; 0x27
c7e1a7ac:	e5c13048 	strb	r3, [r1, #72]
c7e1a7b0:	e5c12049 	strb	r2, [r1, #73]
c7e1a7b4:	e5c1204a 	strb	r2, [r1, #74]
c7e1a7b8:	e12fff1e 	bx	lr
c7e1a7bc:	c7e42120 	.word	0xc7e42120

c7e1a7c0 <s3c_usb_ep0_int_hndlr>:
	}

}

void s3c_usb_ep0_int_hndlr(void)
{
c7e1a7c0:	e92d4070 	push	{r4, r5, r6, lr}
	u32 buf[2]={0x0000, };
	u16 addr;

	DBG_SETUP0("Event EP0\n");

	if (otg.ep0_state == EP0_STATE_INIT) {
c7e1a7c4:	e59f520c 	ldr	r5, [pc, #524]	; c7e1a9d8 <s3c_usb_ep0_int_hndlr+0x218>
c7e1a7c8:	e5d52049 	ldrb	r2, [r5, #73]
c7e1a7cc:	e5d53048 	ldrb	r3, [r5, #72]
c7e1a7d0:	e5d5104a 	ldrb	r1, [r5, #74]
c7e1a7d4:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1a7d8:	e5d5204b 	ldrb	r2, [r5, #75]
c7e1a7dc:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1a7e0:	e1932c02 	orrs	r2, r3, r2, lsl #24
c7e1a7e4:	1a000062 	bne	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>

		for(i=0;i<2;i++)
			buf[i] = readl(S3C_OTG_EP0_FIFO);
c7e1a7e8:	e59f31ec 	ldr	r3, [pc, #492]	; c7e1a9dc <s3c_usb_ep0_int_hndlr+0x21c>
c7e1a7ec:	e5930000 	ldr	r0, [r3]
c7e1a7f0:	e593c000 	ldr	ip, [r3]

		otg.dev_req.bmRequestType = buf[0];
		otg.dev_req.bRequest	= buf[0]>>8;
		otg.dev_req.wValue_L	= buf[0]>>16;
c7e1a7f4:	e1a03820 	lsr	r3, r0, #16

		for(i=0;i<2;i++)
			buf[i] = readl(S3C_OTG_EP0_FIFO);

		otg.dev_req.bmRequestType = buf[0];
		otg.dev_req.bRequest	= buf[0]>>8;
c7e1a7f8:	e1a02420 	lsr	r2, r0, #8
		otg.dev_req.wValue_L	= buf[0]>>16;
c7e1a7fc:	e20360ff 	and	r6, r3, #255	; 0xff

		for(i=0;i<2;i++)
			buf[i] = readl(S3C_OTG_EP0_FIFO);

		otg.dev_req.bmRequestType = buf[0];
		otg.dev_req.bRequest	= buf[0]>>8;
c7e1a800:	e20220ff 	and	r2, r2, #255	; 0xff
		otg.dev_req.wValue_L	= buf[0]>>16;
		otg.dev_req.wValue_H	= buf[0]>>24;
c7e1a804:	e1a0ec20 	lsr	lr, r0, #24
		otg.dev_req.wIndex_L	= buf[1];
		otg.dev_req.wIndex_H	= buf[1]>>8;
		otg.dev_req.wLength_L	= buf[1]>>16;
		otg.dev_req.wLength_H	= buf[1]>>24;
c7e1a808:	e1a04c2c 	lsr	r4, ip, #24
		otg.dev_req.bmRequestType = buf[0];
		otg.dev_req.bRequest	= buf[0]>>8;
		otg.dev_req.wValue_L	= buf[0]>>16;
		otg.dev_req.wValue_H	= buf[0]>>24;
		otg.dev_req.wIndex_L	= buf[1];
		otg.dev_req.wIndex_H	= buf[1]>>8;
c7e1a80c:	e1a0342c 	lsr	r3, ip, #8
		otg.dev_req.wLength_L	= buf[1]>>16;
c7e1a810:	e1a0182c 	lsr	r1, ip, #16
			buf[i] = readl(S3C_OTG_EP0_FIFO);

		otg.dev_req.bmRequestType = buf[0];
		otg.dev_req.bRequest	= buf[0]>>8;
		otg.dev_req.wValue_L	= buf[0]>>16;
		otg.dev_req.wValue_H	= buf[0]>>24;
c7e1a814:	e5c5e043 	strb	lr, [r5, #67]
		otg.dev_req.wIndex_L	= buf[1];
		otg.dev_req.wIndex_H	= buf[1]>>8;
c7e1a818:	e5c53045 	strb	r3, [r5, #69]
		otg.dev_req.wLength_L	= buf[1]>>16;
c7e1a81c:	e5c51046 	strb	r1, [r5, #70]
		otg.dev_req.wLength_H	= buf[1]>>24;
c7e1a820:	e5c54047 	strb	r4, [r5, #71]
	if (otg.ep0_state == EP0_STATE_INIT) {

		for(i=0;i<2;i++)
			buf[i] = readl(S3C_OTG_EP0_FIFO);

		otg.dev_req.bmRequestType = buf[0];
c7e1a824:	e5c50040 	strb	r0, [r5, #64]
		otg.dev_req.bRequest	= buf[0]>>8;
c7e1a828:	e5c52041 	strb	r2, [r5, #65]
		otg.dev_req.wValue_L	= buf[0]>>16;
c7e1a82c:	e5c56042 	strb	r6, [r5, #66]
		otg.dev_req.wValue_H	= buf[0]>>24;
		otg.dev_req.wIndex_L	= buf[1];
c7e1a830:	e5c5c044 	strb	ip, [r5, #68]

#ifdef USB_OTG_DEBUG_SETUP
		s3c_usb_print_pkt((u8 *)&otg.dev_req, 8);
#endif

		switch (otg.dev_req.bRequest) {
c7e1a834:	e352000c 	cmp	r2, #12	; 0xc
c7e1a838:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
c7e1a83c:	ea00004c 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>
c7e1a840:	c7e1a92c 	.word	0xc7e1a92c
c7e1a844:	c7e1a91c 	.word	0xc7e1a91c
c7e1a848:	c7e1a974 	.word	0xc7e1a974
c7e1a84c:	c7e1a924 	.word	0xc7e1a924
c7e1a850:	c7e1a974 	.word	0xc7e1a974
c7e1a854:	c7e1a874 	.word	0xc7e1a874
c7e1a858:	c7e1a914 	.word	0xc7e1a914
c7e1a85c:	c7e1a974 	.word	0xc7e1a974
c7e1a860:	c7e1a8dc 	.word	0xc7e1a8dc
c7e1a864:	c7e1a8b8 	.word	0xc7e1a8b8
c7e1a868:	c7e1a934 	.word	0xc7e1a934
c7e1a86c:	c7e1a950 	.word	0xc7e1a950
c7e1a870:	c7e1a960 	.word	0xc7e1a960
		case STANDARD_SET_ADDRESS:
			/* Set Address Update bit */
			addr = (otg.dev_req.wValue_L);
			writel(1<<18|addr<<4|otg.speed<<0, S3C_OTG_DCFG);
c7e1a874:	e5d52055 	ldrb	r2, [r5, #85]
c7e1a878:	e5d53054 	ldrb	r3, [r5, #84]
c7e1a87c:	e5d51056 	ldrb	r1, [r5, #86]
c7e1a880:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1a884:	e5d52057 	ldrb	r2, [r5, #87]
c7e1a888:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1a88c:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1a890:	e3833701 	orr	r3, r3, #262144	; 0x40000
c7e1a894:	e1833206 	orr	r3, r3, r6, lsl #4
			DBG_SETUP1("S3C_OTG_DCFG : %x, STANDARD_SET_ADDRESS : %d\n",
					readl(S3C_OTG_DCFG), addr);
			otg.ep0_state = EP0_STATE_INIT;
c7e1a898:	e3a01000 	mov	r1, #0	; 0x0

		switch (otg.dev_req.bRequest) {
		case STANDARD_SET_ADDRESS:
			/* Set Address Update bit */
			addr = (otg.dev_req.wValue_L);
			writel(1<<18|addr<<4|otg.speed<<0, S3C_OTG_DCFG);
c7e1a89c:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1a8a0:	e5823800 	str	r3, [r2, #2048]
			DBG_SETUP1("S3C_OTG_DCFG : %x, STANDARD_SET_ADDRESS : %d\n",
					readl(S3C_OTG_DCFG), addr);
			otg.ep0_state = EP0_STATE_INIT;
c7e1a8a4:	e5c5104b 	strb	r1, [r5, #75]
c7e1a8a8:	e5c51048 	strb	r1, [r5, #72]
c7e1a8ac:	e5c51049 	strb	r1, [r5, #73]
c7e1a8b0:	e5c5104a 	strb	r1, [r5, #74]
c7e1a8b4:	ea00002e 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>

		case STANDARD_SET_CONFIGURATION:
			DBG_SETUP1("STANDARD_SET_CONFIGURATION \n");
			/* Configuration value in configuration descriptor */
			config_value = otg.dev_req.wValue_L;
			otg.set_config = 1;
c7e1a8b8:	e3a03000 	mov	r3, #0	; 0x0
c7e1a8bc:	e3a02001 	mov	r2, #1	; 0x1
			otg.ep0_state = EP0_STATE_INIT;
c7e1a8c0:	e5c5304b 	strb	r3, [r5, #75]
			break;

		case STANDARD_SET_CONFIGURATION:
			DBG_SETUP1("STANDARD_SET_CONFIGURATION \n");
			/* Configuration value in configuration descriptor */
			config_value = otg.dev_req.wValue_L;
c7e1a8c4:	e1c568be 	strh	r6, [r5, #142]
			otg.set_config = 1;
c7e1a8c8:	e5c5207c 	strb	r2, [r5, #124]
c7e1a8cc:	e5c5307d 	strb	r3, [r5, #125]
c7e1a8d0:	e5c5307e 	strb	r3, [r5, #126]
c7e1a8d4:	e5c5307f 	strb	r3, [r5, #127]
c7e1a8d8:	ea000022 	b	c7e1a968 <s3c_usb_ep0_int_hndlr+0x1a8>
			otg.ep0_state = EP0_STATE_INIT;
			break;

		case STANDARD_GET_CONFIGURATION:
			DBG_SETUP1("STANDARD_GET_CONFIGURATION \n");
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1a8dc:	e3a01001 	mov	r1, #1	; 0x1
c7e1a8e0:	e3a00000 	mov	r0, #0	; 0x0
c7e1a8e4:	e1a02001 	mov	r2, r1
c7e1a8e8:	ebfffe44 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>

			/*ep0 enable, clear nak, next ep0, 8byte */
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1a8ec:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1a8f0:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a8f4:	e5832900 	str	r2, [r3, #2304]
			writel(config_value, S3C_OTG_EP0_FIFO);
c7e1a8f8:	e1d518be 	ldrh	r1, [r5, #142]
			otg.ep0_state = EP0_STATE_INIT;
c7e1a8fc:	e3a02000 	mov	r2, #0	; 0x0
			DBG_SETUP1("STANDARD_GET_CONFIGURATION \n");
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);

			/*ep0 enable, clear nak, next ep0, 8byte */
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			writel(config_value, S3C_OTG_EP0_FIFO);
c7e1a900:	e2833a01 	add	r3, r3, #4096	; 0x1000
c7e1a904:	e5831000 	str	r1, [r3]
			otg.ep0_state = EP0_STATE_INIT;
c7e1a908:	e5c5204b 	strb	r2, [r5, #75]
c7e1a90c:	e5c52048 	strb	r2, [r5, #72]
c7e1a910:	ea00000b 	b	c7e1a944 <s3c_usb_ep0_int_hndlr+0x184>
			break;

		case STANDARD_GET_DESCRIPTOR:
			DBG_SETUP1("STANDARD_GET_DESCRIPTOR :");
			s3c_usb_get_desc();
c7e1a914:	ebfffe94 	bl	c7e1a36c <s3c_usb_get_desc>
c7e1a918:	ea000015 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>
			break;

		case STANDARD_CLEAR_FEATURE:
			DBG_SETUP1("STANDARD_CLEAR_FEATURE :");
			s3c_usb_clear_feature();
c7e1a91c:	ebffff06 	bl	c7e1a53c <s3c_usb_clear_feature>
c7e1a920:	ea000013 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>
			break;

		case STANDARD_SET_FEATURE:
			DBG_SETUP1("STANDARD_SET_FEATURE :");
			s3c_usb_set_feature();
c7e1a924:	ebffff23 	bl	c7e1a5b8 <s3c_usb_set_feature>
c7e1a928:	ea000011 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>
			break;

		case STANDARD_GET_STATUS:
			DBG_SETUP1("STANDARD_GET_STATUS :");
			s3c_usb_get_status();
c7e1a92c:	ebffff79 	bl	c7e1a718 <s3c_usb_get_status>
c7e1a930:	ea00000f 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>
			break;

		case STANDARD_GET_INTERFACE:
			DBG_SETUP1("STANDARD_GET_INTERFACE \n");
			otg.ep0_state = EP0_STATE_INTERFACE_GET;
c7e1a934:	e3a02000 	mov	r2, #0	; 0x0
c7e1a938:	e3a03022 	mov	r3, #34	; 0x22
c7e1a93c:	e5c5204b 	strb	r2, [r5, #75]
c7e1a940:	e5c53048 	strb	r3, [r5, #72]
c7e1a944:	e5c52049 	strb	r2, [r5, #73]
c7e1a948:	e5c5204a 	strb	r2, [r5, #74]
c7e1a94c:	ea000008 	b	c7e1a974 <s3c_usb_ep0_int_hndlr+0x1b4>
			break;

		case STANDARD_SET_INTERFACE:
			DBG_SETUP1("STANDARD_SET_INTERFACE \n");
			get_intf.AlternateSetting= otg.dev_req.wValue_L;
			otg.ep0_state = EP0_STATE_INIT;
c7e1a950:	e3a03000 	mov	r3, #0	; 0x0
c7e1a954:	e5c5304b 	strb	r3, [r5, #75]
			otg.ep0_state = EP0_STATE_INTERFACE_GET;
			break;

		case STANDARD_SET_INTERFACE:
			DBG_SETUP1("STANDARD_SET_INTERFACE \n");
			get_intf.AlternateSetting= otg.dev_req.wValue_L;
c7e1a958:	e5c56090 	strb	r6, [r5, #144]
c7e1a95c:	ea000001 	b	c7e1a968 <s3c_usb_ep0_int_hndlr+0x1a8>
			otg.ep0_state = EP0_STATE_INIT;
			break;

		case STANDARD_SYNCH_FRAME:
			DBG_SETUP1("STANDARD_SYNCH_FRAME \n");
			otg.ep0_state = EP0_STATE_INIT;
c7e1a960:	e3a03000 	mov	r3, #0	; 0x0
c7e1a964:	e5c5304b 	strb	r3, [r5, #75]
c7e1a968:	e5c53048 	strb	r3, [r5, #72]
c7e1a96c:	e5c53049 	strb	r3, [r5, #73]
c7e1a970:	e5c5304a 	strb	r3, [r5, #74]
		default:
			break;
		}
	}

	s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.ctrl_max_pktsize);
c7e1a974:	e59f405c 	ldr	r4, [pc, #92]	; c7e1a9d8 <s3c_usb_ep0_int_hndlr+0x218>
c7e1a978:	e3a00000 	mov	r0, #0	; 0x0
c7e1a97c:	e5d43059 	ldrb	r3, [r4, #89]
c7e1a980:	e5d42058 	ldrb	r2, [r4, #88]
c7e1a984:	e5d4105a 	ldrb	r1, [r4, #90]
c7e1a988:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1a98c:	e5d4305b 	ldrb	r3, [r4, #91]
c7e1a990:	e1822801 	orr	r2, r2, r1, lsl #16
c7e1a994:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e1a998:	e3a01001 	mov	r1, #1	; 0x1
c7e1a99c:	ebfffe17 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>

	if(otg.speed == USB_HIGH) {
c7e1a9a0:	e5d42055 	ldrb	r2, [r4, #85]
c7e1a9a4:	e5d43054 	ldrb	r3, [r4, #84]
c7e1a9a8:	e5d41056 	ldrb	r1, [r4, #86]
c7e1a9ac:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1a9b0:	e5d42057 	ldrb	r2, [r4, #87]
c7e1a9b4:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1a9b8:	e1932c02 	orrs	r2, r3, r2, lsl #24
c7e1a9bc:	1a000001 	bne	c7e1a9c8 <s3c_usb_ep0_int_hndlr+0x208>
		/*clear nak, next ep0, 64byte */
		writel(((1<<26)|(CONTROL_EP<<11)|(0<<0)), S3C_OTG_DIEPCTL0);
c7e1a9c0:	e3a02301 	mov	r2, #67108864	; 0x4000000
c7e1a9c4:	ea000000 	b	c7e1a9cc <s3c_usb_ep0_int_hndlr+0x20c>
	}
	else {
		/*clear nak, next ep0, 8byte */
		writel(((1<<26)|(CONTROL_EP<<11)|(3<<0)), S3C_OTG_DIEPCTL0);
c7e1a9c8:	e3a023c1 	mov	r2, #67108867	; 0x4000003
c7e1a9cc:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1a9d0:	e5832900 	str	r2, [r3, #2304]
c7e1a9d4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1a9d8:	c7e42120 	.word	0xc7e42120
c7e1a9dc:	7c001000 	.word	0x7c001000

c7e1a9e0 <s3c_usb_set_otherspeed_conf_desc>:
	}

}

void s3c_usb_set_otherspeed_conf_desc(u32 length)
{
c7e1a9e0:	e92d4010 	push	{r4, lr}
	/* Standard device descriptor */
	if (otg.speed == USB_HIGH)
c7e1a9e4:	e59f2100 	ldr	r2, [pc, #256]	; c7e1aaec <s3c_usb_set_otherspeed_conf_desc+0x10c>
	}

}

void s3c_usb_set_otherspeed_conf_desc(u32 length)
{
c7e1a9e8:	e1a04000 	mov	r4, r0
	/* Standard device descriptor */
	if (otg.speed == USB_HIGH)
c7e1a9ec:	e5d23054 	ldrb	r3, [r2, #84]
c7e1a9f0:	e5d21055 	ldrb	r1, [r2, #85]
c7e1a9f4:	e5d20056 	ldrb	r0, [r2, #86]
c7e1a9f8:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1a9fc:	e5d22057 	ldrb	r2, [r2, #87]
c7e1aa00:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1aa04:	e1930c02 	orrs	r0, r3, r2, lsl #24
c7e1aa08:	1a000019 	bne	c7e1aa74 <s3c_usb_set_otherspeed_conf_desc+0x94>
	{
	    if (length ==9)
c7e1aa0c:	e3540009 	cmp	r4, #9	; 0x9
c7e1aa10:	1a000005 	bne	c7e1aa2c <s3c_usb_set_otherspeed_conf_desc+0x4c>
	    {
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 9);
c7e1aa14:	e3a01001 	mov	r1, #1	; 0x1
c7e1aa18:	e1a02004 	mov	r2, r4
c7e1aa1c:	ebfffdf7 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo(((u8 *)&config_full)+0, 9);
c7e1aa20:	e59f00c8 	ldr	r0, [pc, #200]	; c7e1aaf0 <s3c_usb_set_otherspeed_conf_desc+0x110>
c7e1aa24:	e1a01004 	mov	r1, r4
c7e1aa28:	ea000006 	b	c7e1aa48 <s3c_usb_set_otherspeed_conf_desc+0x68>
		}
	    else if(length ==32)
c7e1aa2c:	e3540020 	cmp	r4, #32	; 0x20
c7e1aa30:	1a000008 	bne	c7e1aa58 <s3c_usb_set_otherspeed_conf_desc+0x78>
		{
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 32);
c7e1aa34:	e3a01001 	mov	r1, #1	; 0x1
c7e1aa38:	e1a02004 	mov	r2, r4
c7e1aa3c:	ebfffdef 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo(((u8 *)&config_full_total)+0, 32);
c7e1aa40:	e59f00ac 	ldr	r0, [pc, #172]	; c7e1aaf4 <s3c_usb_set_otherspeed_conf_desc+0x114>
c7e1aa44:	e1a01004 	mov	r1, r4
			s3c_usb_write_ep0_fifo(((u8 *)&config_full)+0, 9);
		}
	    else if(length ==32)
		{
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 32);
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1aa48:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1aa4c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1aa50:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo(((u8 *)&config_full_total)+0, 32);
c7e1aa54:	ebfffe03 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>

	    }
		otg.ep0_state = EP0_STATE_INIT;
c7e1aa58:	e59f208c 	ldr	r2, [pc, #140]	; c7e1aaec <s3c_usb_set_otherspeed_conf_desc+0x10c>
c7e1aa5c:	e3a03000 	mov	r3, #0	; 0x0
c7e1aa60:	e5c2304b 	strb	r3, [r2, #75]
c7e1aa64:	e5c23048 	strb	r3, [r2, #72]
c7e1aa68:	e5c23049 	strb	r3, [r2, #73]
c7e1aa6c:	e5c2304a 	strb	r3, [r2, #74]
c7e1aa70:	e8bd8010 	pop	{r4, pc}
	}
	else
	{
	    if (length ==9)
c7e1aa74:	e3540009 	cmp	r4, #9	; 0x9
c7e1aa78:	1a000007 	bne	c7e1aa9c <s3c_usb_set_otherspeed_conf_desc+0xbc>
	    {
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
c7e1aa7c:	e3a00000 	mov	r0, #0	; 0x0
c7e1aa80:	e3a01001 	mov	r1, #1	; 0x1
c7e1aa84:	e3a02008 	mov	r2, #8	; 0x8
c7e1aa88:	ebfffddc 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo(((u8 *)&config_high)+0, 8);
c7e1aa8c:	e59f0064 	ldr	r0, [pc, #100]	; c7e1aaf8 <s3c_usb_set_otherspeed_conf_desc+0x118>
c7e1aa90:	e3a01008 	mov	r1, #8	; 0x8
	else
	{
	    if (length ==9)
	    {
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1aa94:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1aa98:	ea000008 	b	c7e1aac0 <s3c_usb_set_otherspeed_conf_desc+0xe0>
			s3c_usb_write_ep0_fifo(((u8 *)&config_high)+0, 8);
		}
	    else if(length ==32)
c7e1aa9c:	e3540020 	cmp	r4, #32	; 0x20
c7e1aaa0:	1a000009 	bne	c7e1aacc <s3c_usb_set_otherspeed_conf_desc+0xec>
		{
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
c7e1aaa4:	e3a00000 	mov	r0, #0	; 0x0
c7e1aaa8:	e3a01001 	mov	r1, #1	; 0x1
c7e1aaac:	e3a02008 	mov	r2, #8	; 0x8
c7e1aab0:	ebfffdd2 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo(((u8 *)&config_high_total)+0, 8);
c7e1aab4:	e59f0040 	ldr	r0, [pc, #64]	; c7e1aafc <s3c_usb_set_otherspeed_conf_desc+0x11c>
c7e1aab8:	e3a01008 	mov	r1, #8	; 0x8
			s3c_usb_write_ep0_fifo(((u8 *)&config_high)+0, 8);
		}
	    else if(length ==32)
		{
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1aabc:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1aac0:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1aac4:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo(((u8 *)&config_high_total)+0, 8);
c7e1aac8:	ebfffde6 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
	    }
		otg.ep0_state = EP0_STATE_GD_OTHER_SPEED_HIGH_1;
c7e1aacc:	e59f3018 	ldr	r3, [pc, #24]	; c7e1aaec <s3c_usb_set_otherspeed_conf_desc+0x10c>
c7e1aad0:	e3a01000 	mov	r1, #0	; 0x0
c7e1aad4:	e3a02033 	mov	r2, #51	; 0x33
c7e1aad8:	e5c3104b 	strb	r1, [r3, #75]
c7e1aadc:	e5c32048 	strb	r2, [r3, #72]
c7e1aae0:	e5c31049 	strb	r1, [r3, #73]
c7e1aae4:	e5c3104a 	strb	r1, [r3, #74]
c7e1aae8:	e8bd8010 	pop	{r4, pc}
c7e1aaec:	c7e42120 	.word	0xc7e42120
c7e1aaf0:	c7e2dc9b 	.word	0xc7e2dc9b
c7e1aaf4:	c7e2dca4 	.word	0xc7e2dca4
c7e1aaf8:	c7e2dcc4 	.word	0xc7e2dcc4
c7e1aafc:	c7e2dccd 	.word	0xc7e2dccd

c7e1ab00 <s3c_usb_transfer_ep0>:
	}
}

void s3c_usb_transfer_ep0(void)
{
c7e1ab00:	e92d4070 	push	{r4, r5, r6, lr}

	DBG_SETUP0("otg.ep0_state = %d\n", otg.ep0_state);

	switch (otg.ep0_state) {
c7e1ab04:	e59f2dd8 	ldr	r2, [pc, #3544]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1ab08:	e5d23048 	ldrb	r3, [r2, #72]
c7e1ab0c:	e5d21049 	ldrb	r1, [r2, #73]
c7e1ab10:	e5d2004a 	ldrb	r0, [r2, #74]
c7e1ab14:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1ab18:	e5d2204b 	ldrb	r2, [r2, #75]
c7e1ab1c:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1ab20:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1ab24:	e3530035 	cmp	r3, #53	; 0x35
c7e1ab28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e1ab2c:	ea00036b 	b	c7e1b8e0 <s3c_usb_transfer_ep0+0xde0>
c7e1ab30:	c7e1ac08 	.word	0xc7e1ac08
c7e1ab34:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab38:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab3c:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab40:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab44:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab48:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab4c:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab50:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab54:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab58:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab5c:	c7e1ac28 	.word	0xc7e1ac28
c7e1ab60:	c7e1ad54 	.word	0xc7e1ad54
c7e1ab64:	c7e1adac 	.word	0xc7e1adac
c7e1ab68:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab6c:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab70:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab74:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab78:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab7c:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab80:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab84:	c7e1adf0 	.word	0xc7e1adf0
c7e1ab88:	c7e1af18 	.word	0xc7e1af18
c7e1ab8c:	c7e1af70 	.word	0xc7e1af70
c7e1ab90:	c7e1afc8 	.word	0xc7e1afc8
c7e1ab94:	c7e1b47c 	.word	0xc7e1b47c
c7e1ab98:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1ab9c:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1aba0:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1aba4:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1aba8:	c7e1b454 	.word	0xc7e1b454
c7e1abac:	c7e1b498 	.word	0xc7e1b498
c7e1abb0:	c7e1b620 	.word	0xc7e1b620
c7e1abb4:	c7e1b020 	.word	0xc7e1b020
c7e1abb8:	c7e1b7ec 	.word	0xc7e1b7ec
c7e1abbc:	c7e1b808 	.word	0xc7e1b808
c7e1abc0:	c7e1b824 	.word	0xc7e1b824
c7e1abc4:	c7e1b840 	.word	0xc7e1b840
c7e1abc8:	c7e1b85c 	.word	0xc7e1b85c
c7e1abcc:	c7e1b8a0 	.word	0xc7e1b8a0
c7e1abd0:	c7e1b0a4 	.word	0xc7e1b0a4
c7e1abd4:	c7e1b1a8 	.word	0xc7e1b1a8
c7e1abd8:	c7e1b2c4 	.word	0xc7e1b2c4
c7e1abdc:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1abe0:	c7e1b2d0 	.word	0xc7e1b2d0
c7e1abe4:	c7e1b3fc 	.word	0xc7e1b3fc
c7e1abe8:	c7e1b408 	.word	0xc7e1b408
c7e1abec:	c7e1b434 	.word	0xc7e1b434
c7e1abf0:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1abf4:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1abf8:	c7e1b8e0 	.word	0xc7e1b8e0
c7e1abfc:	c7e1b0cc 	.word	0xc7e1b0cc
c7e1ac00:	c7e1b144 	.word	0xc7e1b144
c7e1ac04:	c7e1b18c 	.word	0xc7e1b18c
	case EP0_STATE_INIT:
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 0);
c7e1ac08:	e3a00000 	mov	r0, #0	; 0x0
c7e1ac0c:	e3a01001 	mov	r1, #1	; 0x1
c7e1ac10:	e1a02000 	mov	r2, r0
c7e1ac14:	ebfffd79 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>

		/*ep0 enable, clear nak, next ep0, 8byte */
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1ac18:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1ac1c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1ac20:	e5832900 	str	r2, [r3, #2304]
c7e1ac24:	e8bd8070 	pop	{r4, r5, r6, pc}
		break;

	/* GET_DESCRIPTOR:DEVICE */
	case EP0_STATE_GD_DEV_0:
		DBG_SETUP1("EP0_STATE_GD_DEV_0 :");
		if (otg.speed == USB_HIGH) {
c7e1ac28:	e59f4cb4 	ldr	r4, [pc, #3252]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1ac2c:	e5d42055 	ldrb	r2, [r4, #85]
c7e1ac30:	e5d43054 	ldrb	r3, [r4, #84]
c7e1ac34:	e5d41056 	ldrb	r1, [r4, #86]
c7e1ac38:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ac3c:	e5d42057 	ldrb	r2, [r4, #87]
c7e1ac40:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ac44:	e1930c02 	orrs	r0, r3, r2, lsl #24
c7e1ac48:	1a00001d 	bne	c7e1acc4 <s3c_usb_transfer_ep0+0x1c4>
			DBG_SETUP1("High Speed\n");

			/*ep0 enable, clear nak, next ep0, max 64byte */
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			if (otg.req_length < DEVICE_DESC_SIZE) {
c7e1ac4c:	e5d42081 	ldrb	r2, [r4, #129]
c7e1ac50:	e5d43080 	ldrb	r3, [r4, #128]
c7e1ac54:	e5d41082 	ldrb	r1, [r4, #130]
c7e1ac58:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ac5c:	e5d42083 	ldrb	r2, [r4, #131]
c7e1ac60:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ac64:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1ac68:	e3510011 	cmp	r1, #17	; 0x11
		DBG_SETUP1("EP0_STATE_GD_DEV_0 :");
		if (otg.speed == USB_HIGH) {
			DBG_SETUP1("High Speed\n");

			/*ep0 enable, clear nak, next ep0, max 64byte */
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1ac6c:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1ac70:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1ac74:	e5832900 	str	r2, [r3, #2304]
			if (otg.req_length < DEVICE_DESC_SIZE) {
c7e1ac78:	8a00000b 	bhi	c7e1acac <s3c_usb_transfer_ep0+0x1ac>
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1ac7c:	e1a02001 	mov	r2, r1
c7e1ac80:	e3a01001 	mov	r1, #1	; 0x1
c7e1ac84:	ebfffd5d 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, otg.req_length);
c7e1ac88:	e5d43081 	ldrb	r3, [r4, #129]
c7e1ac8c:	e5d41080 	ldrb	r1, [r4, #128]
c7e1ac90:	e5d42082 	ldrb	r2, [r4, #130]
c7e1ac94:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1ac98:	e5d43083 	ldrb	r3, [r4, #131]
c7e1ac9c:	e1811802 	orr	r1, r1, r2, lsl #16
c7e1aca0:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1aca4:	e1a00004 	mov	r0, r4
c7e1aca8:	ea0001f2 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, DEVICE_DESC_SIZE);
c7e1acac:	e3a01001 	mov	r1, #1	; 0x1
c7e1acb0:	e3a02012 	mov	r2, #18	; 0x12
c7e1acb4:	ebfffd51 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, DEVICE_DESC_SIZE);
c7e1acb8:	e1a00004 	mov	r0, r4
c7e1acbc:	e3a01012 	mov	r1, #18	; 0x12
c7e1acc0:	ea0001ec 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
			}
			otg.ep0_state = EP0_STATE_INIT;
		} else {
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<DEVICE_DESC_SIZE) {
c7e1acc4:	e5d42081 	ldrb	r2, [r4, #129]
c7e1acc8:	e5d43080 	ldrb	r3, [r4, #128]
c7e1accc:	e5d41082 	ldrb	r1, [r4, #130]
c7e1acd0:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1acd4:	e5d42083 	ldrb	r2, [r4, #131]
c7e1acd8:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1acdc:	e1830c02 	orr	r0, r3, r2, lsl #24
c7e1ace0:	e3500011 	cmp	r0, #17	; 0x11
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, DEVICE_DESC_SIZE);
			}
			otg.ep0_state = EP0_STATE_INIT;
		} else {
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1ace4:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, DEVICE_DESC_SIZE);
			}

			if(otg.req_length<FS_CTRL_PKT_SIZE) {
c7e1ace8:	e59f4bf4 	ldr	r4, [pc, #3060]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, DEVICE_DESC_SIZE);
			}
			otg.ep0_state = EP0_STATE_INIT;
		} else {
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1acec:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1acf0:	e5832900 	str	r2, [r3, #2304]
			if(otg.req_length<DEVICE_DESC_SIZE) {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1acf4:	93a01001 	movls	r1, #1	; 0x1
c7e1acf8:	91a02000 	movls	r2, r0
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, DEVICE_DESC_SIZE);
c7e1acfc:	83a00000 	movhi	r0, #0	; 0x0
			otg.ep0_state = EP0_STATE_INIT;
		} else {
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<DEVICE_DESC_SIZE) {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1ad00:	93a00000 	movls	r0, #0	; 0x0
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, DEVICE_DESC_SIZE);
c7e1ad04:	83a01001 	movhi	r1, #1	; 0x1
c7e1ad08:	83a02012 	movhi	r2, #18	; 0x12
c7e1ad0c:	ebfffd3b 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			}

			if(otg.req_length<FS_CTRL_PKT_SIZE) {
c7e1ad10:	e5d42081 	ldrb	r2, [r4, #129]
c7e1ad14:	e5d43080 	ldrb	r3, [r4, #128]
c7e1ad18:	e5d41082 	ldrb	r1, [r4, #130]
c7e1ad1c:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ad20:	e5d42083 	ldrb	r2, [r4, #131]
c7e1ad24:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ad28:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1ad2c:	e3510007 	cmp	r1, #7	; 0x7
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, otg.req_length);
c7e1ad30:	91a00004 	movls	r0, r4
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, DEVICE_DESC_SIZE);
			}

			if(otg.req_length<FS_CTRL_PKT_SIZE) {
c7e1ad34:	9a0002d2 	bls	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, otg.req_length);
				otg.ep0_state = EP0_STATE_INIT;
			} else {
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+0, FS_CTRL_PKT_SIZE);
c7e1ad38:	e1a00004 	mov	r0, r4
c7e1ad3c:	e3a01008 	mov	r1, #8	; 0x8
c7e1ad40:	ebfffd48 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
				otg.ep0_state = EP0_STATE_GD_DEV_1;
c7e1ad44:	e3a02000 	mov	r2, #0	; 0x0
c7e1ad48:	e5c4204b 	strb	r2, [r4, #75]
c7e1ad4c:	e3a0300c 	mov	r3, #12	; 0xc
c7e1ad50:	ea0001a5 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_DEV_1:
		DBG_SETUP1("EP0_STATE_GD_DEV_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(2*FS_CTRL_PKT_SIZE)) {
c7e1ad54:	e59f4b88 	ldr	r4, [pc, #2952]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1ad58:	e5d42081 	ldrb	r2, [r4, #129]
c7e1ad5c:	e5d43080 	ldrb	r3, [r4, #128]
c7e1ad60:	e5d41082 	ldrb	r1, [r4, #130]
c7e1ad64:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ad68:	e5d42083 	ldrb	r2, [r4, #131]
c7e1ad6c:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ad70:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1ad74:	e351000f 	cmp	r1, #15	; 0xf
		}
		break;

	case EP0_STATE_GD_DEV_1:
		DBG_SETUP1("EP0_STATE_GD_DEV_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1ad78:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1ad7c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1ad80:	e5832900 	str	r2, [r3, #2304]
		if(otg.req_length<(2*FS_CTRL_PKT_SIZE)) {
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+FS_CTRL_PKT_SIZE,
c7e1ad84:	92411008 	subls	r1, r1, #8	; 0x8
c7e1ad88:	92840008 	addls	r0, r4, #8	; 0x8
		break;

	case EP0_STATE_GD_DEV_1:
		DBG_SETUP1("EP0_STATE_GD_DEV_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(2*FS_CTRL_PKT_SIZE)) {
c7e1ad8c:	9a0002bc 	bls	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+FS_CTRL_PKT_SIZE,
						(otg.req_length-FS_CTRL_PKT_SIZE));
			otg.ep0_state = EP0_STATE_INIT;
		} else {
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+FS_CTRL_PKT_SIZE,
c7e1ad90:	e2840008 	add	r0, r4, #8	; 0x8
c7e1ad94:	e3a01008 	mov	r1, #8	; 0x8
c7e1ad98:	ebfffd32 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						FS_CTRL_PKT_SIZE);
			otg.ep0_state = EP0_STATE_GD_DEV_2;
c7e1ad9c:	e3a02000 	mov	r2, #0	; 0x0
c7e1ada0:	e5c4204b 	strb	r2, [r4, #75]
c7e1ada4:	e3a0300d 	mov	r3, #13	; 0xd
c7e1ada8:	ea00018f 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_DEV_2:
		DBG_SETUP1("EP0_STATE_GD_DEV_2\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<DEVICE_DESC_SIZE) {
c7e1adac:	e59f0b30 	ldr	r0, [pc, #2864]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1adb0:	e5d02081 	ldrb	r2, [r0, #129]
c7e1adb4:	e5d03080 	ldrb	r3, [r0, #128]
c7e1adb8:	e5d01082 	ldrb	r1, [r0, #130]
c7e1adbc:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1adc0:	e5d02083 	ldrb	r2, [r0, #131]
c7e1adc4:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1adc8:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1adcc:	e3510011 	cmp	r1, #17	; 0x11
		}
		break;

	case EP0_STATE_GD_DEV_2:
		DBG_SETUP1("EP0_STATE_GD_DEV_2\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1add0:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1add4:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1add8:	e5832900 	str	r2, [r3, #2304]
		if(otg.req_length<DEVICE_DESC_SIZE) {
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+(2*FS_CTRL_PKT_SIZE),
c7e1addc:	92800010 	addls	r0, r0, #16	; 0x10
c7e1ade0:	92411010 	subls	r1, r1, #16	; 0x10
						(otg.req_length-2*FS_CTRL_PKT_SIZE));
		} else {
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.dev))+(2*FS_CTRL_PKT_SIZE),
c7e1ade4:	82800010 	addhi	r0, r0, #16	; 0x10
c7e1ade8:	83a01002 	movhi	r1, #2	; 0x2
c7e1adec:	ea0001a1 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
		break;

	/* GET_DESCRIPTOR:CONFIGURATION+INTERFACE+ENDPOINT0+ENDPOINT1 */
	case EP0_STATE_GD_CFG_0:
		DBG_SETUP1("EP0_STATE_GD_CFG_0 :");
		if (otg.speed == USB_HIGH)
c7e1adf0:	e59f4aec 	ldr	r4, [pc, #2796]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1adf4:	e5d42055 	ldrb	r2, [r4, #85]
c7e1adf8:	e5d43054 	ldrb	r3, [r4, #84]
c7e1adfc:	e5d41056 	ldrb	r1, [r4, #86]
c7e1ae00:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ae04:	e5d42057 	ldrb	r2, [r4, #87]
c7e1ae08:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ae0c:	e1930c02 	orrs	r0, r3, r2, lsl #24
c7e1ae10:	1a00001d 	bne	c7e1ae8c <s3c_usb_transfer_ep0+0x38c>
		{
			DBG_SETUP1("High Speed\n");
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			if(otg.req_length<CONFIG_DESC_TOTAL_SIZE)
c7e1ae14:	e5d42081 	ldrb	r2, [r4, #129]
c7e1ae18:	e5d43080 	ldrb	r3, [r4, #128]
c7e1ae1c:	e5d41082 	ldrb	r1, [r4, #130]
c7e1ae20:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ae24:	e5d42083 	ldrb	r2, [r4, #131]
c7e1ae28:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ae2c:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1ae30:	e351001f 	cmp	r1, #31	; 0x1f
	case EP0_STATE_GD_CFG_0:
		DBG_SETUP1("EP0_STATE_GD_CFG_0 :");
		if (otg.speed == USB_HIGH)
		{
			DBG_SETUP1("High Speed\n");
			writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1ae34:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1ae38:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1ae3c:	e5832900 	str	r2, [r3, #2304]
			if(otg.req_length<CONFIG_DESC_TOTAL_SIZE)
c7e1ae40:	8a00000b 	bhi	c7e1ae74 <s3c_usb_transfer_ep0+0x374>
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1ae44:	e1a02001 	mov	r2, r1
c7e1ae48:	e3a01001 	mov	r1, #1	; 0x1
c7e1ae4c:	ebfffceb 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, otg.req_length);
c7e1ae50:	e5d43081 	ldrb	r3, [r4, #129]
c7e1ae54:	e5d41080 	ldrb	r1, [r4, #128]
c7e1ae58:	e5d42082 	ldrb	r2, [r4, #130]
c7e1ae5c:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1ae60:	e5d43083 	ldrb	r3, [r4, #131]
c7e1ae64:	e1811802 	orr	r1, r1, r2, lsl #16
c7e1ae68:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1ae6c:	e2840012 	add	r0, r4, #18	; 0x12
c7e1ae70:	ea000180 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_TOTAL_SIZE);
c7e1ae74:	e3a01001 	mov	r1, #1	; 0x1
c7e1ae78:	e3a02020 	mov	r2, #32	; 0x20
c7e1ae7c:	ebfffcdf 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, CONFIG_DESC_TOTAL_SIZE);
c7e1ae80:	e2840012 	add	r0, r4, #18	; 0x12
c7e1ae84:	e3a01020 	mov	r1, #32	; 0x20
c7e1ae88:	ea00017a 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<CONFIG_DESC_TOTAL_SIZE)
c7e1ae8c:	e5d42081 	ldrb	r2, [r4, #129]
c7e1ae90:	e5d43080 	ldrb	r3, [r4, #128]
c7e1ae94:	e5d41082 	ldrb	r1, [r4, #130]
c7e1ae98:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ae9c:	e5d42083 	ldrb	r2, [r4, #131]
c7e1aea0:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1aea4:	e1830c02 	orr	r0, r3, r2, lsl #24
c7e1aea8:	e350001f 	cmp	r0, #31	; 0x1f
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1aeac:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_TOTAL_SIZE);
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1aeb0:	e59f4a2c 	ldr	r4, [pc, #2604]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1aeb4:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1aeb8:	e5832900 	str	r2, [r3, #2304]
			if(otg.req_length<CONFIG_DESC_TOTAL_SIZE)
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1aebc:	93a01001 	movls	r1, #1	; 0x1
c7e1aec0:	91a02000 	movls	r2, r0
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_TOTAL_SIZE);
c7e1aec4:	83a01001 	movhi	r1, #1	; 0x1
c7e1aec8:	83a02020 	movhi	r2, #32	; 0x20
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<CONFIG_DESC_TOTAL_SIZE)
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1aecc:	93a00000 	movls	r0, #0	; 0x0
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_TOTAL_SIZE);
c7e1aed0:	83a00000 	movhi	r0, #0	; 0x0
c7e1aed4:	ebfffcc9 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1aed8:	e5d42081 	ldrb	r2, [r4, #129]
c7e1aedc:	e5d43080 	ldrb	r3, [r4, #128]
c7e1aee0:	e5d41082 	ldrb	r1, [r4, #130]
c7e1aee4:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1aee8:	e5d42083 	ldrb	r2, [r4, #131]
c7e1aeec:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1aef0:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1aef4:	e3510007 	cmp	r1, #7	; 0x7
c7e1aef8:	9a0000e8 	bls	c7e1b2a0 <s3c_usb_transfer_ep0+0x7a0>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, otg.req_length);
				otg.ep0_state = EP0_STATE_INIT;
			}
			else
			{
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, FS_CTRL_PKT_SIZE);
c7e1aefc:	e2840012 	add	r0, r4, #18	; 0x12
c7e1af00:	e3a01008 	mov	r1, #8	; 0x8
c7e1af04:	ebfffcd7 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
				otg.ep0_state = EP0_STATE_GD_CFG_1;
c7e1af08:	e3a02000 	mov	r2, #0	; 0x0
c7e1af0c:	e5c4204b 	strb	r2, [r4, #75]
c7e1af10:	e3a03016 	mov	r3, #22	; 0x16
c7e1af14:	ea000134 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_CFG_1:
		DBG_SETUP1("EP0_STATE_GD_CFG_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(2*FS_CTRL_PKT_SIZE))
c7e1af18:	e59f49c4 	ldr	r4, [pc, #2500]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1af1c:	e5d42081 	ldrb	r2, [r4, #129]
c7e1af20:	e5d43080 	ldrb	r3, [r4, #128]
c7e1af24:	e5d41082 	ldrb	r1, [r4, #130]
c7e1af28:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1af2c:	e5d42083 	ldrb	r2, [r4, #131]
c7e1af30:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1af34:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1af38:	e351000f 	cmp	r1, #15	; 0xf
		}
		break;

	case EP0_STATE_GD_CFG_1:
		DBG_SETUP1("EP0_STATE_GD_CFG_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1af3c:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1af40:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1af44:	e5832900 	str	r2, [r3, #2304]
		if(otg.req_length<(2*FS_CTRL_PKT_SIZE))
		{
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+FS_CTRL_PKT_SIZE,
c7e1af48:	92411008 	subls	r1, r1, #8	; 0x8
c7e1af4c:	9284001a 	addls	r0, r4, #26	; 0x1a
		break;

	case EP0_STATE_GD_CFG_1:
		DBG_SETUP1("EP0_STATE_GD_CFG_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(2*FS_CTRL_PKT_SIZE))
c7e1af50:	9a00024b 	bls	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
						(otg.req_length-FS_CTRL_PKT_SIZE));
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+FS_CTRL_PKT_SIZE,
c7e1af54:	e284001a 	add	r0, r4, #26	; 0x1a
c7e1af58:	e3a01008 	mov	r1, #8	; 0x8
c7e1af5c:	ebfffcc1 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						FS_CTRL_PKT_SIZE);
			otg.ep0_state = EP0_STATE_GD_CFG_2;
c7e1af60:	e3a02000 	mov	r2, #0	; 0x0
c7e1af64:	e5c4204b 	strb	r2, [r4, #75]
c7e1af68:	e3a03017 	mov	r3, #23	; 0x17
c7e1af6c:	ea00011e 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_CFG_2:
		DBG_SETUP1("EP0_STATE_GD_CFG_2\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(3*FS_CTRL_PKT_SIZE))
c7e1af70:	e59f496c 	ldr	r4, [pc, #2412]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1af74:	e5d42081 	ldrb	r2, [r4, #129]
c7e1af78:	e5d43080 	ldrb	r3, [r4, #128]
c7e1af7c:	e5d41082 	ldrb	r1, [r4, #130]
c7e1af80:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1af84:	e5d42083 	ldrb	r2, [r4, #131]
c7e1af88:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1af8c:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1af90:	e3510017 	cmp	r1, #23	; 0x17
		}
		break;

	case EP0_STATE_GD_CFG_2:
		DBG_SETUP1("EP0_STATE_GD_CFG_2\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1af94:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1af98:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1af9c:	e5832900 	str	r2, [r3, #2304]
		if(otg.req_length<(3*FS_CTRL_PKT_SIZE))
		{
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+(2*FS_CTRL_PKT_SIZE),
c7e1afa0:	92411010 	subls	r1, r1, #16	; 0x10
c7e1afa4:	92840022 	addls	r0, r4, #34	; 0x22
		break;

	case EP0_STATE_GD_CFG_2:
		DBG_SETUP1("EP0_STATE_GD_CFG_2\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(3*FS_CTRL_PKT_SIZE))
c7e1afa8:	9a000235 	bls	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
						(otg.req_length-2*FS_CTRL_PKT_SIZE));
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+(2*FS_CTRL_PKT_SIZE),
c7e1afac:	e2840022 	add	r0, r4, #34	; 0x22
c7e1afb0:	e3a01008 	mov	r1, #8	; 0x8
c7e1afb4:	ebfffcab 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						FS_CTRL_PKT_SIZE);
			otg.ep0_state = EP0_STATE_GD_CFG_3;
c7e1afb8:	e3a02000 	mov	r2, #0	; 0x0
c7e1afbc:	e5c4204b 	strb	r2, [r4, #75]
c7e1afc0:	e3a03018 	mov	r3, #24	; 0x18
c7e1afc4:	ea000108 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_CFG_3:
		DBG_SETUP1("EP0_STATE_GD_CFG_3\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(4*FS_CTRL_PKT_SIZE))
c7e1afc8:	e59f4914 	ldr	r4, [pc, #2324]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1afcc:	e5d42081 	ldrb	r2, [r4, #129]
c7e1afd0:	e5d43080 	ldrb	r3, [r4, #128]
c7e1afd4:	e5d41082 	ldrb	r1, [r4, #130]
c7e1afd8:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1afdc:	e5d42083 	ldrb	r2, [r4, #131]
c7e1afe0:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1afe4:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1afe8:	e351001f 	cmp	r1, #31	; 0x1f
		}
		break;

	case EP0_STATE_GD_CFG_3:
		DBG_SETUP1("EP0_STATE_GD_CFG_3\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1afec:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1aff0:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1aff4:	e5832900 	str	r2, [r3, #2304]
		if(otg.req_length<(4*FS_CTRL_PKT_SIZE))
		{
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+(3*FS_CTRL_PKT_SIZE),
c7e1aff8:	92411018 	subls	r1, r1, #24	; 0x18
c7e1affc:	9284002a 	addls	r0, r4, #42	; 0x2a
		break;

	case EP0_STATE_GD_CFG_3:
		DBG_SETUP1("EP0_STATE_GD_CFG_3\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		if(otg.req_length<(4*FS_CTRL_PKT_SIZE))
c7e1b000:	9a00021f 	bls	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
						(otg.req_length-3*FS_CTRL_PKT_SIZE));
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+(3*FS_CTRL_PKT_SIZE),
c7e1b004:	e284002a 	add	r0, r4, #42	; 0x2a
c7e1b008:	e3a01008 	mov	r1, #8	; 0x8
c7e1b00c:	ebfffc95 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						FS_CTRL_PKT_SIZE);
			otg.ep0_state = EP0_STATE_GD_CFG_4;
c7e1b010:	e3a02000 	mov	r2, #0	; 0x0
c7e1b014:	e5c4204b 	strb	r2, [r4, #75]
c7e1b018:	e3a03019 	mov	r3, #25	; 0x19
c7e1b01c:	ea0000f2 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_DEV_QUALIFIER:	/*only supported in USB 2.0*/
		DBG_SETUP1("EP0_STATE_GD_DEV_QUALIFIER\n");
		writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
		if(otg.req_length<10)
c7e1b020:	e59f48bc 	ldr	r4, [pc, #2236]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b024:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b028:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b02c:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b030:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b034:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b038:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b03c:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1b040:	e3510009 	cmp	r1, #9	; 0x9
		otg.ep0_state = EP0_STATE_INIT;
		break;

	case EP0_STATE_GD_DEV_QUALIFIER:	/*only supported in USB 2.0*/
		DBG_SETUP1("EP0_STATE_GD_DEV_QUALIFIER\n");
		writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1b044:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1b048:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b04c:	e5832900 	str	r2, [r3, #2304]
		if(otg.req_length<10)
c7e1b050:	8a00000c 	bhi	c7e1b088 <s3c_usb_transfer_ep0+0x588>
		{
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b054:	e1a02001 	mov	r2, r1
c7e1b058:	e3a00000 	mov	r0, #0	; 0x0
c7e1b05c:	e3a01001 	mov	r1, #1	; 0x1
c7e1b060:	ebfffc66 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			s3c_usb_write_ep0_fifo((u8 *)qualifier_desc+0, otg.req_length);
c7e1b064:	e5d43081 	ldrb	r3, [r4, #129]
c7e1b068:	e5d41080 	ldrb	r1, [r4, #128]
c7e1b06c:	e5d42082 	ldrb	r2, [r4, #130]
c7e1b070:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1b074:	e5d43083 	ldrb	r3, [r4, #131]
c7e1b078:	e1811802 	orr	r1, r1, r2, lsl #16
c7e1b07c:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1b080:	e59f0860 	ldr	r0, [pc, #2144]	; c7e1b8e8 <s3c_usb_transfer_ep0+0xde8>
c7e1b084:	ea0000fb 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
		}
		else
		{
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 10);
c7e1b088:	e3a00000 	mov	r0, #0	; 0x0
c7e1b08c:	e3a01001 	mov	r1, #1	; 0x1
c7e1b090:	e3a0200a 	mov	r2, #10	; 0xa
c7e1b094:	ebfffc59 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			s3c_usb_write_ep0_fifo((u8 *)qualifier_desc+0, 10);
c7e1b098:	e59f0848 	ldr	r0, [pc, #2120]	; c7e1b8e8 <s3c_usb_transfer_ep0+0xde8>
c7e1b09c:	e3a0100a 	mov	r1, #10	; 0xa
c7e1b0a0:	ea0000f4 	b	c7e1b478 <s3c_usb_transfer_ep0+0x978>
		otg.ep0_state = EP0_STATE_INIT;
		break;

	case EP0_STATE_GD_OTHER_SPEED:
			DBG_SETUP1("EP0_STATE_GD_OTHER_SPEED\n");
			s3c_usb_set_otherspeed_conf_desc(otg.req_length);
c7e1b0a4:	e59f3838 	ldr	r3, [pc, #2104]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b0a8:	e5d30080 	ldrb	r0, [r3, #128]
c7e1b0ac:	e5d32081 	ldrb	r2, [r3, #129]
c7e1b0b0:	e5d31082 	ldrb	r1, [r3, #130]
c7e1b0b4:	e1800402 	orr	r0, r0, r2, lsl #8
c7e1b0b8:	e5d33083 	ldrb	r3, [r3, #131]
c7e1b0bc:	e1800801 	orr	r0, r0, r1, lsl #16
c7e1b0c0:	e1800c03 	orr	r0, r0, r3, lsl #24
		break;

	default:
		break;
	}
}
c7e1b0c4:	e8bd4070 	pop	{r4, r5, r6, lr}
		otg.ep0_state = EP0_STATE_INIT;
		break;

	case EP0_STATE_GD_OTHER_SPEED:
			DBG_SETUP1("EP0_STATE_GD_OTHER_SPEED\n");
			s3c_usb_set_otherspeed_conf_desc(otg.req_length);
c7e1b0c8:	eafffe44 	b	c7e1a9e0 <s3c_usb_set_otherspeed_conf_desc>
			break;

	case EP0_STATE_GD_OTHER_SPEED_HIGH_1:
		DBG_SETUP1("EP0_STATE_GD_OTHER_SPEED_HIGH_1\n");
		if(otg.req_length==9)
c7e1b0cc:	e59f4810 	ldr	r4, [pc, #2064]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b0d0:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b0d4:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b0d8:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b0dc:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b0e0:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b0e4:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b0e8:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1b0ec:	e3530009 	cmp	r3, #9	; 0x9
c7e1b0f0:	1a000005 	bne	c7e1b10c <s3c_usb_transfer_ep0+0x60c>
		{
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b0f4:	e3a01001 	mov	r1, #1	; 0x1
c7e1b0f8:	e3a00000 	mov	r0, #0	; 0x0
c7e1b0fc:	e1a02001 	mov	r2, r1
c7e1b100:	ebfffc3e 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
				s3c_usb_write_ep0_fifo(((u8 *)&config_high)+8, 1);
c7e1b104:	e59f07e0 	ldr	r0, [pc, #2016]	; c7e1b8ec <s3c_usb_transfer_ep0+0xdec>
c7e1b108:	ea0001d9 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>
				otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
c7e1b10c:	e3a00000 	mov	r0, #0	; 0x0
c7e1b110:	e3a01001 	mov	r1, #1	; 0x1
c7e1b114:	e3a02008 	mov	r2, #8	; 0x8
c7e1b118:	ebfffc38 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b11c:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1b120:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b124:	e5832900 	str	r2, [r3, #2304]
				s3c_usb_write_ep0_fifo(((u8 *)&config_high)+8, 8);
c7e1b128:	e59f07bc 	ldr	r0, [pc, #1980]	; c7e1b8ec <s3c_usb_transfer_ep0+0xdec>
c7e1b12c:	e3a01008 	mov	r1, #8	; 0x8
c7e1b130:	ebfffc4c 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
				otg.ep0_state = EP0_STATE_GD_OTHER_SPEED_HIGH_2;
c7e1b134:	e3a02000 	mov	r2, #0	; 0x0
c7e1b138:	e5c4204b 	strb	r2, [r4, #75]
c7e1b13c:	e3a03034 	mov	r3, #52	; 0x34
c7e1b140:	ea0000a9 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		}
			break;

	case EP0_STATE_GD_OTHER_SPEED_HIGH_2:
		DBG_SETUP1("EP0_STATE_GD_OTHER_SPEED_HIGH_2\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
c7e1b144:	e3a00000 	mov	r0, #0	; 0x0
c7e1b148:	e3a01001 	mov	r1, #1	; 0x1
c7e1b14c:	e3a02008 	mov	r2, #8	; 0x8
c7e1b150:	ebfffc2a 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b154:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1b158:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b15c:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo(((u8 *)&config_high)+16, 8);
c7e1b160:	e3a01008 	mov	r1, #8	; 0x8
c7e1b164:	e59f0784 	ldr	r0, [pc, #1924]	; c7e1b8f0 <s3c_usb_transfer_ep0+0xdf0>
c7e1b168:	ebfffc3e 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
			otg.ep0_state = EP0_STATE_GD_OTHER_SPEED_HIGH_3;
c7e1b16c:	e59f2770 	ldr	r2, [pc, #1904]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b170:	e3a01000 	mov	r1, #0	; 0x0
c7e1b174:	e3a03035 	mov	r3, #53	; 0x35
c7e1b178:	e5c2104b 	strb	r1, [r2, #75]
c7e1b17c:	e5c23048 	strb	r3, [r2, #72]
c7e1b180:	e5c21049 	strb	r1, [r2, #73]
c7e1b184:	e5c2104a 	strb	r1, [r2, #74]
c7e1b188:	e8bd8070 	pop	{r4, r5, r6, pc}
			break;

	case EP0_STATE_GD_OTHER_SPEED_HIGH_3:
		DBG_SETUP1("EP0_STATE_GD_OTHER_SPEED_HIGH_3\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 8);
c7e1b18c:	e3a00000 	mov	r0, #0	; 0x0
c7e1b190:	e3a01001 	mov	r1, #1	; 0x1
c7e1b194:	e3a02008 	mov	r2, #8	; 0x8
c7e1b198:	ebfffc18 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo(((u8 *)&config_high)+24, 8);
c7e1b19c:	e59f0750 	ldr	r0, [pc, #1872]	; c7e1b8f4 <s3c_usb_transfer_ep0+0xdf4>
c7e1b1a0:	e3a01008 	mov	r1, #8	; 0x8
c7e1b1a4:	ea0000b0 	b	c7e1b46c <s3c_usb_transfer_ep0+0x96c>
			break;

	/* GET_DESCRIPTOR:CONFIGURATION ONLY*/
	case EP0_STATE_GD_CFG_ONLY_0:
		DBG_SETUP1("EP0_STATE_GD_CFG_ONLY_0:");
		if (otg.speed == USB_HIGH)
c7e1b1a8:	e59f4734 	ldr	r4, [pc, #1844]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b1ac:	e5d42055 	ldrb	r2, [r4, #85]
c7e1b1b0:	e5d43054 	ldrb	r3, [r4, #84]
c7e1b1b4:	e5d41056 	ldrb	r1, [r4, #86]
c7e1b1b8:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b1bc:	e5d42057 	ldrb	r2, [r4, #87]
c7e1b1c0:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b1c4:	e1930c02 	orrs	r0, r3, r2, lsl #24
c7e1b1c8:	1a000018 	bne	c7e1b230 <s3c_usb_transfer_ep0+0x730>
		{
			DBG_SETUP1("High Speed\n");
			if(otg.req_length<CONFIG_DESC_SIZE)
c7e1b1cc:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b1d0:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b1d4:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b1d8:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b1dc:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b1e0:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b1e4:	e1832c02 	orr	r2, r3, r2, lsl #24
c7e1b1e8:	e3520008 	cmp	r2, #8	; 0x8
c7e1b1ec:	8a00000a 	bhi	c7e1b21c <s3c_usb_transfer_ep0+0x71c>
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b1f0:	e3a01001 	mov	r1, #1	; 0x1
c7e1b1f4:	ebfffc01 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, otg.req_length);
c7e1b1f8:	e5d43081 	ldrb	r3, [r4, #129]
c7e1b1fc:	e5d41080 	ldrb	r1, [r4, #128]
c7e1b200:	e5d42082 	ldrb	r2, [r4, #130]
c7e1b204:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1b208:	e5d43083 	ldrb	r3, [r4, #131]
c7e1b20c:	e1811802 	orr	r1, r1, r2, lsl #16
c7e1b210:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1b214:	e2840012 	add	r0, r4, #18	; 0x12
c7e1b218:	ea00004e 	b	c7e1b358 <s3c_usb_transfer_ep0+0x858>
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_SIZE);
c7e1b21c:	e3a01001 	mov	r1, #1	; 0x1
c7e1b220:	e3a02009 	mov	r2, #9	; 0x9
c7e1b224:	ebfffbf5 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0,
c7e1b228:	e2840012 	add	r0, r4, #18	; 0x12
c7e1b22c:	ea000048 	b	c7e1b354 <s3c_usb_transfer_ep0+0x854>
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<CONFIG_DESC_SIZE)
c7e1b230:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b234:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b238:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b23c:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b240:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b244:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b248:	e1830c02 	orr	r0, r3, r2, lsl #24
c7e1b24c:	e3500008 	cmp	r0, #8	; 0x8
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b250:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_SIZE);
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1b254:	e59f4688 	ldr	r4, [pc, #1672]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b258:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b25c:	e5832900 	str	r2, [r3, #2304]
			if(otg.req_length<CONFIG_DESC_SIZE)
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b260:	93a01001 	movls	r1, #1	; 0x1
c7e1b264:	91a02000 	movls	r2, r0
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_SIZE);
c7e1b268:	83a01001 	movhi	r1, #1	; 0x1
c7e1b26c:	83a02009 	movhi	r2, #9	; 0x9
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<CONFIG_DESC_SIZE)
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b270:	93a00000 	movls	r0, #0	; 0x0
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, CONFIG_DESC_SIZE);
c7e1b274:	83a00000 	movhi	r0, #0	; 0x0
c7e1b278:	ebfffbe0 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1b27c:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b280:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b284:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b288:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b28c:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b290:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b294:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1b298:	e3510007 	cmp	r1, #7	; 0x7
c7e1b29c:	8a000001 	bhi	c7e1b2a8 <s3c_usb_transfer_ep0+0x7a8>
			{
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, otg.req_length);
c7e1b2a0:	e2840012 	add	r0, r4, #18	; 0x12
c7e1b2a4:	ea000176 	b	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
				otg.ep0_state = EP0_STATE_INIT;
			}
			else
			{
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+0, FS_CTRL_PKT_SIZE);
c7e1b2a8:	e2840012 	add	r0, r4, #18	; 0x12
c7e1b2ac:	e3a01008 	mov	r1, #8	; 0x8
c7e1b2b0:	ebfffbec 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
				otg.ep0_state = EP0_STATE_GD_CFG_ONLY_1;
c7e1b2b4:	e3a02000 	mov	r2, #0	; 0x0
c7e1b2b8:	e5c4204b 	strb	r2, [r4, #75]
c7e1b2bc:	e3a0302a 	mov	r3, #42	; 0x2a
c7e1b2c0:	ea000049 	b	c7e1b3ec <s3c_usb_transfer_ep0+0x8ec>
		break;

	case EP0_STATE_GD_CFG_ONLY_1:
		DBG_SETUP1("EP0_STATE_GD_CFG_ONLY_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.config))+FS_CTRL_PKT_SIZE,
c7e1b2c4:	e59f4618 	ldr	r4, [pc, #1560]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b2c8:	e284001a 	add	r0, r4, #26	; 0x1a
c7e1b2cc:	ea000168 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>

	/* GET_DESCRIPTOR:INTERFACE ONLY */

	case EP0_STATE_GD_IF_ONLY_0:
		DBG_SETUP1("EP0_STATE_GD_IF_ONLY_0 :");
		if (otg.speed == USB_HIGH)
c7e1b2d0:	e59f460c 	ldr	r4, [pc, #1548]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b2d4:	e5d42055 	ldrb	r2, [r4, #85]
c7e1b2d8:	e5d43054 	ldrb	r3, [r4, #84]
c7e1b2dc:	e5d41056 	ldrb	r1, [r4, #86]
c7e1b2e0:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b2e4:	e5d42057 	ldrb	r2, [r4, #87]
c7e1b2e8:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b2ec:	e1930c02 	orrs	r0, r3, r2, lsl #24
c7e1b2f0:	1a00001a 	bne	c7e1b360 <s3c_usb_transfer_ep0+0x860>
		{
			DBG_SETUP1("High Speed\n");
			if(otg.req_length<INTERFACE_DESC_SIZE)
c7e1b2f4:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b2f8:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b2fc:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b300:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b304:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b308:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b30c:	e1832c02 	orr	r2, r3, r2, lsl #24
c7e1b310:	e3520008 	cmp	r2, #8	; 0x8
c7e1b314:	8a00000a 	bhi	c7e1b344 <s3c_usb_transfer_ep0+0x844>
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b318:	e3a01001 	mov	r1, #1	; 0x1
c7e1b31c:	ebfffbb7 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+0, otg.req_length);
c7e1b320:	e5d43081 	ldrb	r3, [r4, #129]
c7e1b324:	e5d41080 	ldrb	r1, [r4, #128]
c7e1b328:	e5d42082 	ldrb	r2, [r4, #130]
c7e1b32c:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1b330:	e5d43083 	ldrb	r3, [r4, #131]
c7e1b334:	e1811802 	orr	r1, r1, r2, lsl #16
c7e1b338:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1b33c:	e284001b 	add	r0, r4, #27	; 0x1b
c7e1b340:	ea000004 	b	c7e1b358 <s3c_usb_transfer_ep0+0x858>
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, INTERFACE_DESC_SIZE);
c7e1b344:	e3a01001 	mov	r1, #1	; 0x1
c7e1b348:	e3a02009 	mov	r2, #9	; 0x9
c7e1b34c:	ebfffbab 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+0, INTERFACE_DESC_SIZE);
c7e1b350:	e284001b 	add	r0, r4, #27	; 0x1b
c7e1b354:	e3a01009 	mov	r1, #9	; 0x9
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+0, otg.req_length);
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, INTERFACE_DESC_SIZE);
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1b358:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1b35c:	ea000043 	b	c7e1b470 <s3c_usb_transfer_ep0+0x970>
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<INTERFACE_DESC_SIZE)
c7e1b360:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b364:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b368:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b36c:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b370:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b374:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b378:	e1830c02 	orr	r0, r3, r2, lsl #24
c7e1b37c:	e3500008 	cmp	r0, #8	; 0x8
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b380:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, INTERFACE_DESC_SIZE);
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1b384:	e59f4558 	ldr	r4, [pc, #1368]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			otg.ep0_state = EP0_STATE_INIT;
		}
		else
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b388:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b38c:	e5832900 	str	r2, [r3, #2304]
			if(otg.req_length<INTERFACE_DESC_SIZE)
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b390:	93a01001 	movls	r1, #1	; 0x1
c7e1b394:	91a02000 	movls	r2, r0
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, INTERFACE_DESC_SIZE);
c7e1b398:	83a00000 	movhi	r0, #0	; 0x0
		{
			DBG_SETUP1("Full Speed\n");
			writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			if(otg.req_length<INTERFACE_DESC_SIZE)
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, otg.req_length);
c7e1b39c:	93a00000 	movls	r0, #0	; 0x0
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, INTERFACE_DESC_SIZE);
c7e1b3a0:	83a01001 	movhi	r1, #1	; 0x1
c7e1b3a4:	83a02009 	movhi	r2, #9	; 0x9
c7e1b3a8:	ebfffb94 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1b3ac:	e5d42081 	ldrb	r2, [r4, #129]
c7e1b3b0:	e5d43080 	ldrb	r3, [r4, #128]
c7e1b3b4:	e5d41082 	ldrb	r1, [r4, #130]
c7e1b3b8:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1b3bc:	e5d42083 	ldrb	r2, [r4, #131]
c7e1b3c0:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b3c4:	e1831c02 	orr	r1, r3, r2, lsl #24
c7e1b3c8:	e3510007 	cmp	r1, #7	; 0x7
			{
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+0, otg.req_length);
c7e1b3cc:	9284001b 	addls	r0, r4, #27	; 0x1b
			}
			else
			{
				s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, INTERFACE_DESC_SIZE);
			}
			if(otg.req_length<FS_CTRL_PKT_SIZE)
c7e1b3d0:	9a00012b 	bls	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+0, otg.req_length);
				otg.ep0_state = EP0_STATE_INIT;
			}
			else
			{
				s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+0, FS_CTRL_PKT_SIZE);
c7e1b3d4:	e284001b 	add	r0, r4, #27	; 0x1b
c7e1b3d8:	e3a01008 	mov	r1, #8	; 0x8
c7e1b3dc:	ebfffba1 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
				otg.ep0_state = EP0_STATE_GD_IF_ONLY_1;
c7e1b3e0:	e3a02000 	mov	r2, #0	; 0x0
c7e1b3e4:	e5c4204b 	strb	r2, [r4, #75]
c7e1b3e8:	e3a0302d 	mov	r3, #45	; 0x2d
c7e1b3ec:	e5c43048 	strb	r3, [r4, #72]
c7e1b3f0:	e5c42049 	strb	r2, [r4, #73]
c7e1b3f4:	e5c4204a 	strb	r2, [r4, #74]
c7e1b3f8:	e8bd8070 	pop	{r4, r5, r6, pc}
		break;

	case EP0_STATE_GD_IF_ONLY_1:
		DBG_SETUP1("EP0_STATE_GD_IF_ONLY_1\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.intf))+FS_CTRL_PKT_SIZE,
c7e1b3fc:	e59f44e0 	ldr	r4, [pc, #1248]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b400:	e2840023 	add	r0, r4, #35	; 0x23
c7e1b404:	ea00011a 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>


	/* GET_DESCRIPTOR:ENDPOINT 1 ONLY */
	case EP0_STATE_GD_EP0_ONLY_0:
		DBG_SETUP1("EP0_STATE_GD_EP0_ONLY_0\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b408:	e3a0c3e1 	mov	ip, #-2080374781	; 0x84000003
c7e1b40c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, ENDPOINT_DESC_SIZE);
		s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.ep1))+0, ENDPOINT_DESC_SIZE);
c7e1b410:	e59f44cc 	ldr	r4, [pc, #1228]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>

	/* GET_DESCRIPTOR:ENDPOINT 1 ONLY */
	case EP0_STATE_GD_EP0_ONLY_0:
		DBG_SETUP1("EP0_STATE_GD_EP0_ONLY_0\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, ENDPOINT_DESC_SIZE);
c7e1b414:	e3a00000 	mov	r0, #0	; 0x0
c7e1b418:	e3a01001 	mov	r1, #1	; 0x1
c7e1b41c:	e3a02007 	mov	r2, #7	; 0x7


	/* GET_DESCRIPTOR:ENDPOINT 1 ONLY */
	case EP0_STATE_GD_EP0_ONLY_0:
		DBG_SETUP1("EP0_STATE_GD_EP0_ONLY_0\n");
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b420:	e583c900 	str	ip, [r3, #2304]
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, ENDPOINT_DESC_SIZE);
c7e1b424:	ebfffb75 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.ep1))+0, ENDPOINT_DESC_SIZE);
c7e1b428:	e2840024 	add	r0, r4, #36	; 0x24
c7e1b42c:	e3a01007 	mov	r1, #7	; 0x7
c7e1b430:	ea000113 	b	c7e1b884 <s3c_usb_transfer_ep0+0xd84>
		break;

	/* GET_DESCRIPTOR:ENDPOINT 2 ONLY */
	case EP0_STATE_GD_EP1_ONLY_0:
		DBG_SETUP1("EP0_STATE_GD_EP1_ONLY_0\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, ENDPOINT_DESC_SIZE);
c7e1b434:	e3a00000 	mov	r0, #0	; 0x0
c7e1b438:	e3a01001 	mov	r1, #1	; 0x1
c7e1b43c:	e3a02007 	mov	r2, #7	; 0x7
c7e1b440:	ebfffb6e 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo(((u8 *)&(otg.desc.ep2))+0, ENDPOINT_DESC_SIZE);
c7e1b444:	e59f4498 	ldr	r4, [pc, #1176]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b448:	e3a01007 	mov	r1, #7	; 0x7
c7e1b44c:	e284002b 	add	r0, r4, #43	; 0x2b
c7e1b450:	ea000108 	b	c7e1b878 <s3c_usb_transfer_ep0+0xd78>
		break;

	/* GET_DESCRIPTOR:STRING  */
	case EP0_STATE_GD_STR_I0:
		DBG_SETUP1("EP0_STATE_GD_STR_I0\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, STRING_DESC0_SIZE);
c7e1b454:	e3a00000 	mov	r0, #0	; 0x0
c7e1b458:	e3a01001 	mov	r1, #1	; 0x1
c7e1b45c:	e3a02004 	mov	r2, #4	; 0x4
c7e1b460:	ebfffb66 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)string_desc0, STRING_DESC0_SIZE);
c7e1b464:	e59f048c 	ldr	r0, [pc, #1164]	; c7e1b8f8 <s3c_usb_transfer_ep0+0xdf8>
c7e1b468:	e3a01004 	mov	r1, #4	; 0x4

	/* GET_DESCRIPTOR:STRING  */
	case EP0_STATE_GD_STR_I0:
		DBG_SETUP1("EP0_STATE_GD_STR_I0\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, STRING_DESC0_SIZE);
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b46c:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1b470:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b474:	e5832900 	str	r2, [r3, #2304]
		s3c_usb_write_ep0_fifo((u8 *)string_desc0, STRING_DESC0_SIZE);
c7e1b478:	ebfffb7a 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
		otg.ep0_state = EP0_STATE_INIT;
c7e1b47c:	e59f2460 	ldr	r2, [pc, #1120]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b480:	e3a03000 	mov	r3, #0	; 0x0
c7e1b484:	e5c2304b 	strb	r3, [r2, #75]
c7e1b488:	e5c23048 	strb	r3, [r2, #72]
c7e1b48c:	e5c23049 	strb	r3, [r2, #73]
c7e1b490:	e5c2304a 	strb	r3, [r2, #74]
c7e1b494:	e8bd8070 	pop	{r4, r5, r6, pc}
		break;

	case EP0_STATE_GD_STR_I1:
		DBG_SETUP1("EP0_STATE_GD_STR_I1 %d\n", otg.ep0_substate);
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, sizeof(string_desc1));
c7e1b498:	e3a00000 	mov	r0, #0	; 0x0
c7e1b49c:	e3a01001 	mov	r1, #1	; 0x1
c7e1b4a0:	e3a02016 	mov	r2, #22	; 0x16
c7e1b4a4:	ebfffb55 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		if ((otg.ep0_substate*otg.ctrl_max_pktsize+otg.ctrl_max_pktsize)
c7e1b4a8:	e59f1434 	ldr	r1, [pc, #1076]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b4ac:	e5d1004d 	ldrb	r0, [r1, #77]
c7e1b4b0:	e5d1304c 	ldrb	r3, [r1, #76]
c7e1b4b4:	e5d1604e 	ldrb	r6, [r1, #78]
c7e1b4b8:	e5d12058 	ldrb	r2, [r1, #88]
c7e1b4bc:	e5d1c059 	ldrb	ip, [r1, #89]
c7e1b4c0:	e1833400 	orr	r3, r3, r0, lsl #8
c7e1b4c4:	e5d1404f 	ldrb	r4, [r1, #79]
c7e1b4c8:	e5d1505a 	ldrb	r5, [r1, #90]
c7e1b4cc:	e5d1005b 	ldrb	r0, [r1, #91]
c7e1b4d0:	e1833806 	orr	r3, r3, r6, lsl #16
c7e1b4d4:	e182240c 	orr	r2, r2, ip, lsl #8
c7e1b4d8:	e1833c04 	orr	r3, r3, r4, lsl #24
c7e1b4dc:	e1822805 	orr	r2, r2, r5, lsl #16
c7e1b4e0:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1b4e4:	e2833001 	add	r3, r3, #1	; 0x1
c7e1b4e8:	e0030392 	mul	r3, r2, r3
c7e1b4ec:	e3530015 	cmp	r3, #21	; 0x15
c7e1b4f0:	e5d10057 	ldrb	r0, [r1, #87]
c7e1b4f4:	e5d12054 	ldrb	r2, [r1, #84]
c7e1b4f8:	e5d13055 	ldrb	r3, [r1, #85]
c7e1b4fc:	e5d11056 	ldrb	r1, [r1, #86]
c7e1b500:	8a000029 	bhi	c7e1b5ac <s3c_usb_transfer_ep0+0xaac>
			< sizeof(string_desc1)) {

			if (otg.speed == USB_HIGH)
c7e1b504:	e1823403 	orr	r3, r2, r3, lsl #8
c7e1b508:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b50c:	e1930c00 	orrs	r0, r3, r0, lsl #24
c7e1b510:	1a000001 	bne	c7e1b51c <s3c_usb_transfer_ep0+0xa1c>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1b514:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1b518:	ea000000 	b	c7e1b520 <s3c_usb_transfer_ep0+0xa20>
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b51c:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			s3c_usb_write_ep0_fifo((u8 *)string_desc1+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b520:	e59f43bc 	ldr	r4, [pc, #956]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			< sizeof(string_desc1)) {

			if (otg.speed == USB_HIGH)
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b524:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b528:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo((u8 *)string_desc1+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b52c:	e5d40059 	ldrb	r0, [r4, #89]
c7e1b530:	e5d4304d 	ldrb	r3, [r4, #77]
c7e1b534:	e5d41058 	ldrb	r1, [r4, #88]
c7e1b538:	e5d4204c 	ldrb	r2, [r4, #76]
c7e1b53c:	e5d4c05a 	ldrb	ip, [r4, #90]
c7e1b540:	e5d4e04e 	ldrb	lr, [r4, #78]
c7e1b544:	e1811400 	orr	r1, r1, r0, lsl #8
c7e1b548:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1b54c:	e5d4305b 	ldrb	r3, [r4, #91]
c7e1b550:	e5d4004f 	ldrb	r0, [r4, #79]
c7e1b554:	e181180c 	orr	r1, r1, ip, lsl #16
c7e1b558:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1b55c:	e182280e 	orr	r2, r2, lr, lsl #16
c7e1b560:	e59f3394 	ldr	r3, [pc, #916]	; c7e1b8fc <s3c_usb_transfer_ep0+0xdfc>
c7e1b564:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1b568:	e0203192 	mla	r0, r2, r1, r3
c7e1b56c:	ebfffb3d 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I1;
			otg.ep0_substate++;
c7e1b570:	e5d4304d 	ldrb	r3, [r4, #77]
c7e1b574:	e5d4204c 	ldrb	r2, [r4, #76]
c7e1b578:	e5d4104e 	ldrb	r1, [r4, #78]
c7e1b57c:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1b580:	e5d4304f 	ldrb	r3, [r4, #79]
c7e1b584:	e1822801 	orr	r2, r2, r1, lsl #16
c7e1b588:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e1b58c:	e2822001 	add	r2, r2, #1	; 0x1
c7e1b590:	e1a03c22 	lsr	r3, r2, #24
c7e1b594:	e5c4304f 	strb	r3, [r4, #79]
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo((u8 *)string_desc1+(otg.ep0_substate*otg.ctrl_max_pktsize),
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I1;
c7e1b598:	e3a01000 	mov	r1, #0	; 0x0
			otg.ep0_substate++;
c7e1b59c:	e1a00422 	lsr	r0, r2, #8
c7e1b5a0:	e1a0c822 	lsr	ip, r2, #16
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo((u8 *)string_desc1+(otg.ep0_substate*otg.ctrl_max_pktsize),
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I1;
c7e1b5a4:	e3a0301f 	mov	r3, #31	; 0x1f
c7e1b5a8:	ea000060 	b	c7e1b730 <s3c_usb_transfer_ep0+0xc30>
			otg.ep0_substate++;
		} else {
			if (otg.speed == USB_HIGH)
c7e1b5ac:	e1823403 	orr	r3, r2, r3, lsl #8
c7e1b5b0:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b5b4:	e1930c00 	orrs	r0, r3, r0, lsl #24
c7e1b5b8:	1a000001 	bne	c7e1b5c4 <s3c_usb_transfer_ep0+0xac4>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1b5bc:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1b5c0:	ea000000 	b	c7e1b5c8 <s3c_usb_transfer_ep0+0xac8>
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b5c4:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			s3c_usb_write_ep0_fifo((u8 *)string_desc1+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b5c8:	e59f4314 	ldr	r4, [pc, #788]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			otg.ep0_substate++;
		} else {
			if (otg.speed == USB_HIGH)
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b5cc:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b5d0:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo((u8 *)string_desc1+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b5d4:	e5d40059 	ldrb	r0, [r4, #89]
c7e1b5d8:	e5d4104d 	ldrb	r1, [r4, #77]
c7e1b5dc:	e5d42058 	ldrb	r2, [r4, #88]
c7e1b5e0:	e5d4304c 	ldrb	r3, [r4, #76]
c7e1b5e4:	e5d4c05a 	ldrb	ip, [r4, #90]
c7e1b5e8:	e5d4e04e 	ldrb	lr, [r4, #78]
c7e1b5ec:	e1822400 	orr	r2, r2, r0, lsl #8
c7e1b5f0:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1b5f4:	e5d4004f 	ldrb	r0, [r4, #79]
c7e1b5f8:	e5d4105b 	ldrb	r1, [r4, #91]
c7e1b5fc:	e182280c 	orr	r2, r2, ip, lsl #16
c7e1b600:	e183380e 	orr	r3, r3, lr, lsl #16
c7e1b604:	e1833c00 	orr	r3, r3, r0, lsl #24
c7e1b608:	e1822c01 	orr	r2, r2, r1, lsl #24
c7e1b60c:	e0010293 	mul	r1, r3, r2
c7e1b610:	e59f02e4 	ldr	r0, [pc, #740]	; c7e1b8fc <s3c_usb_transfer_ep0+0xdfc>
c7e1b614:	e0800001 	add	r0, r0, r1
c7e1b618:	e2611016 	rsb	r1, r1, #22	; 0x16
c7e1b61c:	ea000067 	b	c7e1b7c0 <s3c_usb_transfer_ep0+0xcc0>
			otg.ep0_substate = 0;
		}
		break;

	case EP0_STATE_GD_STR_I2:
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, sizeof(string_desc2));
c7e1b620:	e3a00000 	mov	r0, #0	; 0x0
c7e1b624:	e3a01001 	mov	r1, #1	; 0x1
c7e1b628:	e3a0202c 	mov	r2, #44	; 0x2c
c7e1b62c:	ebfffaf3 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		if ((otg.ep0_substate*otg.ctrl_max_pktsize+otg.ctrl_max_pktsize)
c7e1b630:	e59f12ac 	ldr	r1, [pc, #684]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b634:	e5d1004d 	ldrb	r0, [r1, #77]
c7e1b638:	e5d1304c 	ldrb	r3, [r1, #76]
c7e1b63c:	e5d1604e 	ldrb	r6, [r1, #78]
c7e1b640:	e5d12058 	ldrb	r2, [r1, #88]
c7e1b644:	e5d1c059 	ldrb	ip, [r1, #89]
c7e1b648:	e1833400 	orr	r3, r3, r0, lsl #8
c7e1b64c:	e5d1404f 	ldrb	r4, [r1, #79]
c7e1b650:	e5d1505a 	ldrb	r5, [r1, #90]
c7e1b654:	e5d1005b 	ldrb	r0, [r1, #91]
c7e1b658:	e1833806 	orr	r3, r3, r6, lsl #16
c7e1b65c:	e182240c 	orr	r2, r2, ip, lsl #8
c7e1b660:	e1833c04 	orr	r3, r3, r4, lsl #24
c7e1b664:	e1822805 	orr	r2, r2, r5, lsl #16
c7e1b668:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1b66c:	e2833001 	add	r3, r3, #1	; 0x1
c7e1b670:	e0030392 	mul	r3, r2, r3
c7e1b674:	e353002b 	cmp	r3, #43	; 0x2b
c7e1b678:	e5d10057 	ldrb	r0, [r1, #87]
c7e1b67c:	e5d12054 	ldrb	r2, [r1, #84]
c7e1b680:	e5d13055 	ldrb	r3, [r1, #85]
c7e1b684:	e5d11056 	ldrb	r1, [r1, #86]
c7e1b688:	8a000030 	bhi	c7e1b750 <s3c_usb_transfer_ep0+0xc50>
			< sizeof(string_desc2)) {

			if (otg.speed == USB_HIGH)
c7e1b68c:	e1823403 	orr	r3, r2, r3, lsl #8
c7e1b690:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b694:	e1930c00 	orrs	r0, r3, r0, lsl #24
c7e1b698:	1a000001 	bne	c7e1b6a4 <s3c_usb_transfer_ep0+0xba4>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1b69c:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1b6a0:	ea000000 	b	c7e1b6a8 <s3c_usb_transfer_ep0+0xba8>
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b6a4:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b6a8:	e59f4234 	ldr	r4, [pc, #564]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			< sizeof(string_desc2)) {

			if (otg.speed == USB_HIGH)
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b6ac:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b6b0:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b6b4:	e5d40059 	ldrb	r0, [r4, #89]
c7e1b6b8:	e5d4304d 	ldrb	r3, [r4, #77]
c7e1b6bc:	e5d41058 	ldrb	r1, [r4, #88]
c7e1b6c0:	e5d4204c 	ldrb	r2, [r4, #76]
c7e1b6c4:	e5d4c05a 	ldrb	ip, [r4, #90]
c7e1b6c8:	e5d4e04e 	ldrb	lr, [r4, #78]
c7e1b6cc:	e1811400 	orr	r1, r1, r0, lsl #8
c7e1b6d0:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1b6d4:	e5d4305b 	ldrb	r3, [r4, #91]
c7e1b6d8:	e5d4004f 	ldrb	r0, [r4, #79]
c7e1b6dc:	e181180c 	orr	r1, r1, ip, lsl #16
c7e1b6e0:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1b6e4:	e182280e 	orr	r2, r2, lr, lsl #16
c7e1b6e8:	e59f3210 	ldr	r3, [pc, #528]	; c7e1b900 <s3c_usb_transfer_ep0+0xe00>
c7e1b6ec:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1b6f0:	e0203192 	mla	r0, r2, r1, r3
c7e1b6f4:	ebfffadb 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I2;
			otg.ep0_substate++;
c7e1b6f8:	e5d4304d 	ldrb	r3, [r4, #77]
c7e1b6fc:	e5d4204c 	ldrb	r2, [r4, #76]
c7e1b700:	e5d4104e 	ldrb	r1, [r4, #78]
c7e1b704:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1b708:	e5d4304f 	ldrb	r3, [r4, #79]
c7e1b70c:	e1822801 	orr	r2, r2, r1, lsl #16
c7e1b710:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e1b714:	e2822001 	add	r2, r2, #1	; 0x1
c7e1b718:	e1a03c22 	lsr	r3, r2, #24
c7e1b71c:	e5c4304f 	strb	r3, [r4, #79]
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I2;
c7e1b720:	e3a01000 	mov	r1, #0	; 0x0
			otg.ep0_substate++;
c7e1b724:	e1a00422 	lsr	r0, r2, #8
c7e1b728:	e1a0c822 	lsr	ip, r2, #16
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I2;
c7e1b72c:	e3a03020 	mov	r3, #32	; 0x20
c7e1b730:	e5c43048 	strb	r3, [r4, #72]
c7e1b734:	e5c4104b 	strb	r1, [r4, #75]
			otg.ep0_substate++;
c7e1b738:	e5c4004d 	strb	r0, [r4, #77]
c7e1b73c:	e5c4c04e 	strb	ip, [r4, #78]
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
						otg.ctrl_max_pktsize);
			otg.ep0_state = EP0_STATE_GD_STR_I2;
c7e1b740:	e5c41049 	strb	r1, [r4, #73]
c7e1b744:	e5c4104a 	strb	r1, [r4, #74]
			otg.ep0_substate++;
c7e1b748:	e5c4204c 	strb	r2, [r4, #76]
c7e1b74c:	e8bd8070 	pop	{r4, r5, r6, pc}
		} else {
			if (otg.speed == USB_HIGH)
c7e1b750:	e1823403 	orr	r3, r2, r3, lsl #8
c7e1b754:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1b758:	e1930c00 	orrs	r0, r3, r0, lsl #24
c7e1b75c:	1a000001 	bne	c7e1b768 <s3c_usb_transfer_ep0+0xc68>
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
c7e1b760:	e3a02321 	mov	r2, #-2080374784	; 0x84000000
c7e1b764:	ea000000 	b	c7e1b76c <s3c_usb_transfer_ep0+0xc6c>
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b768:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b76c:	e59f4170 	ldr	r4, [pc, #368]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
			otg.ep0_substate++;
		} else {
			if (otg.speed == USB_HIGH)
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b770:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b774:	e5832900 	str	r2, [r3, #2304]
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
c7e1b778:	e5d40059 	ldrb	r0, [r4, #89]
c7e1b77c:	e5d4104d 	ldrb	r1, [r4, #77]
c7e1b780:	e5d42058 	ldrb	r2, [r4, #88]
c7e1b784:	e5d4304c 	ldrb	r3, [r4, #76]
c7e1b788:	e5d4c05a 	ldrb	ip, [r4, #90]
c7e1b78c:	e5d4e04e 	ldrb	lr, [r4, #78]
c7e1b790:	e1822400 	orr	r2, r2, r0, lsl #8
c7e1b794:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1b798:	e5d4004f 	ldrb	r0, [r4, #79]
c7e1b79c:	e5d4105b 	ldrb	r1, [r4, #91]
c7e1b7a0:	e182280c 	orr	r2, r2, ip, lsl #16
c7e1b7a4:	e183380e 	orr	r3, r3, lr, lsl #16
c7e1b7a8:	e1833c00 	orr	r3, r3, r0, lsl #24
c7e1b7ac:	e1822c01 	orr	r2, r2, r1, lsl #24
c7e1b7b0:	e0010293 	mul	r1, r3, r2
c7e1b7b4:	e59f0144 	ldr	r0, [pc, #324]	; c7e1b900 <s3c_usb_transfer_ep0+0xe00>
c7e1b7b8:	e0800001 	add	r0, r0, r1
c7e1b7bc:	e261102c 	rsb	r1, r1, #44	; 0x2c
c7e1b7c0:	ebfffaa8 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
						sizeof(string_desc2)-(otg.ep0_substate*otg.ctrl_max_pktsize));
			otg.ep0_state = EP0_STATE_INIT;
c7e1b7c4:	e3a03000 	mov	r3, #0	; 0x0
			otg.ep0_substate = 0;
c7e1b7c8:	e5c4304f 	strb	r3, [r4, #79]
				writel(EPEN_CNAK_EP0_64, S3C_OTG_DIEPCTL0);
			else
				writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
			s3c_usb_write_ep0_fifo((u8 *)string_desc2+(otg.ep0_substate*otg.ctrl_max_pktsize),
						sizeof(string_desc2)-(otg.ep0_substate*otg.ctrl_max_pktsize));
			otg.ep0_state = EP0_STATE_INIT;
c7e1b7cc:	e5c43048 	strb	r3, [r4, #72]
c7e1b7d0:	e5c43049 	strb	r3, [r4, #73]
c7e1b7d4:	e5c4304a 	strb	r3, [r4, #74]
c7e1b7d8:	e5c4304b 	strb	r3, [r4, #75]
			otg.ep0_substate = 0;
c7e1b7dc:	e5c4304c 	strb	r3, [r4, #76]
c7e1b7e0:	e5c4304d 	strb	r3, [r4, #77]
c7e1b7e4:	e5c4304e 	strb	r3, [r4, #78]
c7e1b7e8:	e8bd8070 	pop	{r4, r5, r6, pc}
		DBG_SETUP1("EP0_STATE_GD_STR_I2 %d", otg.ep0_substate);
		break;

	case EP0_STATE_INTERFACE_GET:
		DBG_SETUP1("EP0_STATE_INTERFACE_GET\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b7ec:	e3a01001 	mov	r1, #1	; 0x1
c7e1b7f0:	e3a00000 	mov	r0, #0	; 0x0
c7e1b7f4:	e1a02001 	mov	r2, r1
c7e1b7f8:	ebfffa80 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)&get_intf+0, 1);
c7e1b7fc:	e59f40e0 	ldr	r4, [pc, #224]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b800:	e2840090 	add	r0, r4, #144	; 0x90
c7e1b804:	ea00001a 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>
		break;


	case EP0_STATE_GET_STATUS0:
		DBG_SETUP1("EP0_STATE_GET_STATUS0\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b808:	e3a01001 	mov	r1, #1	; 0x1
c7e1b80c:	e3a00000 	mov	r0, #0	; 0x0
c7e1b810:	e1a02001 	mov	r2, r1
c7e1b814:	ebfffa79 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)&get_status+0, 1);
c7e1b818:	e59f40c4 	ldr	r4, [pc, #196]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b81c:	e2840088 	add	r0, r4, #136	; 0x88
c7e1b820:	ea000013 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>
		otg.ep0_state = EP0_STATE_INIT;
		break;

	case EP0_STATE_GET_STATUS1:
		DBG_SETUP1("EP0_STATE_GET_STATUS1\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b824:	e3a01001 	mov	r1, #1	; 0x1
c7e1b828:	e3a00000 	mov	r0, #0	; 0x0
c7e1b82c:	e1a02001 	mov	r2, r1
c7e1b830:	ebfffa72 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)&get_status+1, 1);
c7e1b834:	e59f40a8 	ldr	r4, [pc, #168]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b838:	e2840089 	add	r0, r4, #137	; 0x89
c7e1b83c:	ea00000c 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>
		otg.ep0_state = EP0_STATE_INIT;
		break;

	case EP0_STATE_GET_STATUS2:
		DBG_SETUP1("EP0_STATE_GET_STATUS2\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b840:	e3a01001 	mov	r1, #1	; 0x1
c7e1b844:	e3a00000 	mov	r0, #0	; 0x0
c7e1b848:	e1a02001 	mov	r2, r1
c7e1b84c:	ebfffa6b 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)&get_status+2, 1);
c7e1b850:	e59f408c 	ldr	r4, [pc, #140]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b854:	e284008a 	add	r0, r4, #138	; 0x8a
c7e1b858:	ea000005 	b	c7e1b874 <s3c_usb_transfer_ep0+0xd74>
		otg.ep0_state = EP0_STATE_INIT;
		break;

	case EP0_STATE_GET_STATUS3:
		DBG_SETUP1("EP0_STATE_GET_STATUS3\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b85c:	e3a01001 	mov	r1, #1	; 0x1
c7e1b860:	e3a00000 	mov	r0, #0	; 0x0
c7e1b864:	e1a02001 	mov	r2, r1
c7e1b868:	ebfffa64 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)&get_status+3, 1);
c7e1b86c:	e59f4070 	ldr	r4, [pc, #112]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
c7e1b870:	e284008b 	add	r0, r4, #139	; 0x8b
c7e1b874:	e3a01001 	mov	r1, #1	; 0x1
		break;

	case EP0_STATE_GET_STATUS3:
		DBG_SETUP1("EP0_STATE_GET_STATUS3\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b878:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1b87c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b880:	e5832900 	str	r2, [r3, #2304]
		s3c_usb_write_ep0_fifo((u8 *)&get_status+3, 1);
c7e1b884:	ebfffa77 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
		otg.ep0_state = EP0_STATE_INIT;
c7e1b888:	e3a03000 	mov	r3, #0	; 0x0
c7e1b88c:	e5c4304b 	strb	r3, [r4, #75]
c7e1b890:	e5c43048 	strb	r3, [r4, #72]
c7e1b894:	e5c43049 	strb	r3, [r4, #73]
c7e1b898:	e5c4304a 	strb	r3, [r4, #74]
c7e1b89c:	e8bd8070 	pop	{r4, r5, r6, pc}
		break;

	case EP0_STATE_GET_STATUS4:
		DBG_SETUP1("EP0_STATE_GET_STATUS4\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
c7e1b8a0:	e3a01001 	mov	r1, #1	; 0x1
c7e1b8a4:	e3a00000 	mov	r0, #0	; 0x0
c7e1b8a8:	e1a02001 	mov	r2, r1
c7e1b8ac:	ebfffa53 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
		s3c_usb_write_ep0_fifo((u8 *)&get_status+4, 1);
c7e1b8b0:	e59f402c 	ldr	r4, [pc, #44]	; c7e1b8e4 <s3c_usb_transfer_ep0+0xde4>
		break;

	case EP0_STATE_GET_STATUS4:
		DBG_SETUP1("EP0_STATE_GET_STATUS4\n");
		s3c_usb_set_inep_xfersize(EP_TYPE_CONTROL, 1, 1);
		writel(EPEN_CNAK_EP0_8, S3C_OTG_DIEPCTL0);
c7e1b8b4:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b8b8:	e3a023e1 	mov	r2, #-2080374781	; 0x84000003
c7e1b8bc:	e5832900 	str	r2, [r3, #2304]
		s3c_usb_write_ep0_fifo((u8 *)&get_status+4, 1);
c7e1b8c0:	e284008c 	add	r0, r4, #140	; 0x8c
c7e1b8c4:	e3a01001 	mov	r1, #1	; 0x1
c7e1b8c8:	ebfffa66 	bl	c7e1a268 <s3c_usb_write_ep0_fifo>
		otg.ep0_state = EP0_STATE_INIT;
c7e1b8cc:	e3a03000 	mov	r3, #0	; 0x0
c7e1b8d0:	e5c4304b 	strb	r3, [r4, #75]
c7e1b8d4:	e5c43048 	strb	r3, [r4, #72]
c7e1b8d8:	e5c43049 	strb	r3, [r4, #73]
c7e1b8dc:	e5c4304a 	strb	r3, [r4, #74]
c7e1b8e0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1b8e4:	c7e42120 	.word	0xc7e42120
c7e1b8e8:	c7e2dced 	.word	0xc7e2dced
c7e1b8ec:	c7e2dccc 	.word	0xc7e2dccc
c7e1b8f0:	c7e2dcd4 	.word	0xc7e2dcd4
c7e1b8f4:	c7e2dcdc 	.word	0xc7e2dcdc
c7e1b8f8:	c7e2dcf7 	.word	0xc7e2dcf7
c7e1b8fc:	c7e2dcfb 	.word	0xc7e2dcfb
c7e1b900:	c7e2dd11 	.word	0xc7e2dd11

c7e1b904 <s3c_usb_int_bulkin>:
	}
}


void s3c_usb_int_bulkin(void)
{
c7e1b904:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b908:	e59fb1d4 	ldr	fp, [pc, #468]	; c7e1bae4 <s3c_usb_int_bulkin+0x1e0>
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b90c:	e5dbc06d 	ldrb	ip, [fp, #109]
c7e1b910:	e5db1071 	ldrb	r1, [fp, #113]
c7e1b914:	e5db306c 	ldrb	r3, [fp, #108]
c7e1b918:	e5db2070 	ldrb	r2, [fp, #112]
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b91c:	e5db4079 	ldrb	r4, [fp, #121]
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b920:	e5db506e 	ldrb	r5, [fp, #110]
c7e1b924:	e5db6072 	ldrb	r6, [fp, #114]
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b928:	e5db0078 	ldrb	r0, [fp, #120]
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b92c:	e183340c 	orr	r3, r3, ip, lsl #8
c7e1b930:	e1822401 	orr	r2, r2, r1, lsl #8
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b934:	e5dbc05d 	ldrb	ip, [fp, #93]
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b938:	e5db707a 	ldrb	r7, [fp, #122]
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b93c:	e5dba06f 	ldrb	sl, [fp, #111]
c7e1b940:	e5db9073 	ldrb	r9, [fp, #115]
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b944:	e5db105c 	ldrb	r1, [fp, #92]
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b948:	e1800404 	orr	r0, r0, r4, lsl #8
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b94c:	e1833805 	orr	r3, r3, r5, lsl #16
c7e1b950:	e1822806 	orr	r2, r2, r6, lsl #16
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b954:	e5db407b 	ldrb	r4, [fp, #123]
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b958:	e5db505e 	ldrb	r5, [fp, #94]
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b95c:	e1822c09 	orr	r2, r2, r9, lsl #24
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b960:	e181140c 	orr	r1, r1, ip, lsl #8
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b964:	e1800807 	orr	r0, r0, r7, lsl #16
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b968:	e1833c0a 	orr	r3, r3, sl, lsl #24
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b96c:	e5dbc05f 	ldrb	ip, [fp, #95]
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b970:	e0833002 	add	r3, r3, r2
	u8* bulkin_buf;
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
c7e1b974:	e1806c04 	orr	r6, r0, r4, lsl #24
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b978:	e1811805 	orr	r1, r1, r5, lsl #16
c7e1b97c:	e1812c0c 	orr	r2, r1, ip, lsl #24
	u32 remain_cnt;

	DBG_BULK0("Bulk In Function\n");

	bulkin_buf = (u8*)otg.up_ptr;
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1b980:	e0664003 	rsb	r4, r6, r3
	DBG_BULK1("bulkin_buf = 0x%x,remain_cnt = 0x%x \n", bulkin_buf, remain_cnt);

	if (remain_cnt > otg.bulkin_max_pktsize) {
c7e1b984:	e1540002 	cmp	r4, r2
c7e1b988:	9a00002d 	bls	c7e1ba44 <s3c_usb_int_bulkin+0x140>
		s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1, otg.bulkin_max_pktsize);
c7e1b98c:	e3a00002 	mov	r0, #2	; 0x2
c7e1b990:	e3a01001 	mov	r1, #1	; 0x1
c7e1b994:	ebfffa19 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkin_max_pktsize<<0,
c7e1b998:	e5db305d 	ldrb	r3, [fp, #93]
c7e1b99c:	e5db205c 	ldrb	r2, [fp, #92]
c7e1b9a0:	e5db105e 	ldrb	r1, [fp, #94]
c7e1b9a4:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1b9a8:	e5db305f 	ldrb	r3, [fp, #95]
c7e1b9ac:	e1822801 	orr	r2, r2, r1, lsl #16
c7e1b9b0:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e1b9b4:	e3822321 	orr	r2, r2, #-2080374784	; 0x84000000
c7e1b9b8:	e3822922 	orr	r2, r2, #557056	; 0x88000
			S3C_OTG_DIEPCTL_IN);

		s3c_usb_write_in_fifo(bulkin_buf, otg.bulkin_max_pktsize);
c7e1b9bc:	e5db305d 	ldrb	r3, [fp, #93]
c7e1b9c0:	e5db105c 	ldrb	r1, [fp, #92]
c7e1b9c4:	e5db005e 	ldrb	r0, [fp, #94]
c7e1b9c8:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1b9cc:	e5db305f 	ldrb	r3, [fp, #95]
c7e1b9d0:	e1811800 	orr	r1, r1, r0, lsl #16
c7e1b9d4:	e1811c03 	orr	r1, r1, r3, lsl #24

	if (remain_cnt > otg.bulkin_max_pktsize) {
		s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1, otg.bulkin_max_pktsize);

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkin_max_pktsize<<0,
c7e1b9d8:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1b9dc:	e5832920 	str	r2, [r3, #2336]
			S3C_OTG_DIEPCTL_IN);

		s3c_usb_write_in_fifo(bulkin_buf, otg.bulkin_max_pktsize);
c7e1b9e0:	e1a00006 	mov	r0, r6
c7e1b9e4:	ebfffa35 	bl	c7e1a2c0 <s3c_usb_write_in_fifo>

		otg.up_ptr += otg.bulkin_max_pktsize;
c7e1b9e8:	e5db0079 	ldrb	r0, [fp, #121]
c7e1b9ec:	e5db2078 	ldrb	r2, [fp, #120]
c7e1b9f0:	e5db105d 	ldrb	r1, [fp, #93]
c7e1b9f4:	e5db305c 	ldrb	r3, [fp, #92]
c7e1b9f8:	e5dbc07a 	ldrb	ip, [fp, #122]
c7e1b9fc:	e5db405e 	ldrb	r4, [fp, #94]
c7e1ba00:	e1822400 	orr	r2, r2, r0, lsl #8
c7e1ba04:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1ba08:	e5db005f 	ldrb	r0, [fp, #95]
c7e1ba0c:	e5db107b 	ldrb	r1, [fp, #123]
c7e1ba10:	e182280c 	orr	r2, r2, ip, lsl #16
c7e1ba14:	e1833804 	orr	r3, r3, r4, lsl #16
c7e1ba18:	e1833c00 	orr	r3, r3, r0, lsl #24
c7e1ba1c:	e1822c01 	orr	r2, r2, r1, lsl #24
c7e1ba20:	e0822003 	add	r2, r2, r3
c7e1ba24:	e1a03c22 	lsr	r3, r2, #24
c7e1ba28:	e1a01422 	lsr	r1, r2, #8
c7e1ba2c:	e1a00822 	lsr	r0, r2, #16
c7e1ba30:	e5cb307b 	strb	r3, [fp, #123]
c7e1ba34:	e5cb1079 	strb	r1, [fp, #121]
c7e1ba38:	e5cb007a 	strb	r0, [fp, #122]
c7e1ba3c:	e5cb2078 	strb	r2, [fp, #120]
c7e1ba40:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

	} else if(remain_cnt > 0) {
c7e1ba44:	e3540000 	cmp	r4, #0	; 0x0
c7e1ba48:	0a000021 	beq	c7e1bad4 <s3c_usb_int_bulkin+0x1d0>
		s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1, remain_cnt);
c7e1ba4c:	e1a02004 	mov	r2, r4
c7e1ba50:	e3a00002 	mov	r0, #2	; 0x2
c7e1ba54:	e3a01001 	mov	r1, #1	; 0x1
c7e1ba58:	ebfff9e8 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkin_max_pktsize<<0,
c7e1ba5c:	e5db205d 	ldrb	r2, [fp, #93]
c7e1ba60:	e5db305c 	ldrb	r3, [fp, #92]
c7e1ba64:	e5db105e 	ldrb	r1, [fp, #94]
c7e1ba68:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1ba6c:	e5db205f 	ldrb	r2, [fp, #95]
c7e1ba70:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1ba74:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1ba78:	e3833321 	orr	r3, r3, #-2080374784	; 0x84000000
c7e1ba7c:	e3833922 	orr	r3, r3, #557056	; 0x88000
c7e1ba80:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1ba84:	e5823920 	str	r3, [r2, #2336]
			S3C_OTG_DIEPCTL_IN);

		s3c_usb_write_in_fifo(bulkin_buf, remain_cnt);
c7e1ba88:	e1a00006 	mov	r0, r6
c7e1ba8c:	e1a01004 	mov	r1, r4
c7e1ba90:	ebfffa0a 	bl	c7e1a2c0 <s3c_usb_write_in_fifo>

		otg.up_ptr += remain_cnt;
c7e1ba94:	e5db2079 	ldrb	r2, [fp, #121]
c7e1ba98:	e5db3078 	ldrb	r3, [fp, #120]
c7e1ba9c:	e5db107a 	ldrb	r1, [fp, #122]
c7e1baa0:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1baa4:	e5db207b 	ldrb	r2, [fp, #123]
c7e1baa8:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1baac:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1bab0:	e0833004 	add	r3, r3, r4
c7e1bab4:	e1a02c23 	lsr	r2, r3, #24
c7e1bab8:	e1a01423 	lsr	r1, r3, #8
c7e1babc:	e1a00823 	lsr	r0, r3, #16
c7e1bac0:	e5cb207b 	strb	r2, [fp, #123]
c7e1bac4:	e5cb1079 	strb	r1, [fp, #121]
c7e1bac8:	e5cb007a 	strb	r0, [fp, #122]
c7e1bacc:	e5cb3078 	strb	r3, [fp, #120]
c7e1bad0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

	} else { /*remain_cnt = 0*/
		writel((DEPCTL_SNAK|DEPCTL_BULK_TYPE), S3C_OTG_DIEPCTL_IN);
c7e1bad4:	e59f200c 	ldr	r2, [pc, #12]	; c7e1bae8 <s3c_usb_int_bulkin+0x1e4>
c7e1bad8:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1badc:	e5832920 	str	r2, [r3, #2336]
c7e1bae0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1bae4:	c7e42120 	.word	0xc7e42120
c7e1bae8:	08080000 	.word	0x08080000

c7e1baec <s3c_usb_upload_start>:
	}
}

void s3c_usb_upload_start(void)
{
c7e1baec:	e92d44ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, sl, lr}
	u8 tmp_buf[12];
	u32 check;

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
c7e1baf0:	e3a0100a 	mov	r1, #10	; 0xa
c7e1baf4:	e28d0004 	add	r0, sp, #4	; 0x4
c7e1baf8:	ebfffa06 	bl	c7e1a318 <s3c_usb_read_out_fifo>
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
c7e1bafc:	e5dd200d 	ldrb	r2, [sp, #13]
c7e1bb00:	e5dd300c 	ldrb	r3, [sp, #12]
c7e1bb04:	e083a402 	add	sl, r3, r2, lsl #8
c7e1bb08:	e35a0001 	cmp	sl, #1	; 0x1
c7e1bb0c:	1a000082 	bne	c7e1bd1c <s3c_usb_upload_start+0x230>
		otg.up_addr =
c7e1bb10:	e5dd3006 	ldrb	r3, [sp, #6]
c7e1bb14:	e59f721c 	ldr	r7, [pc, #540]	; c7e1bd38 <s3c_usb_upload_start+0x24c>
c7e1bb18:	e5dd1005 	ldrb	r1, [sp, #5]
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb1c:	e5dd200a 	ldrb	r2, [sp, #10]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb20:	e5ddc004 	ldrb	ip, [sp, #4]
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb24:	e5dd4009 	ldrb	r4, [sp, #9]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb28:	e1a03803 	lsl	r3, r3, #16
c7e1bb2c:	e5dd5007 	ldrb	r5, [sp, #7]
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb30:	e5dd6008 	ldrb	r6, [sp, #8]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb34:	e0833401 	add	r3, r3, r1, lsl #8

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bb38:	e5d70051 	ldrb	r0, [r7, #81]
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb3c:	e1a02802 	lsl	r2, r2, #16

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bb40:	e5d71050 	ldrb	r1, [r7, #80]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb44:	e083300c 	add	r3, r3, ip
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb48:	e0822404 	add	r2, r2, r4, lsl #8
c7e1bb4c:	e5ddc00b 	ldrb	ip, [sp, #11]

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bb50:	e5d74052 	ldrb	r4, [r7, #82]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb54:	e0833c05 	add	r3, r3, r5, lsl #24
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb58:	e0822006 	add	r2, r2, r6

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bb5c:	e1811400 	orr	r1, r1, r0, lsl #8
c7e1bb60:	e5d70053 	ldrb	r0, [r7, #83]
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb64:	e082ec0c 	add	lr, r2, ip, lsl #24

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bb68:	e1811804 	orr	r1, r1, r4, lsl #16

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb6c:	e1a0c423 	lsr	ip, r3, #8
c7e1bb70:	e1a04823 	lsr	r4, r3, #16
c7e1bb74:	e1a05c23 	lsr	r5, r3, #24

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bb78:	e1916c00 	orrs	r6, r1, r0, lsl #24

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bb7c:	e20cc0ff 	and	ip, ip, #255	; 0xff
c7e1bb80:	e20440ff 	and	r4, r4, #255	; 0xff
c7e1bb84:	e20330ff 	and	r3, r3, #255	; 0xff
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bb88:	e1a0242e 	lsr	r2, lr, #8
c7e1bb8c:	e1a0182e 	lsr	r1, lr, #16
c7e1bb90:	e1a00c2e 	lsr	r0, lr, #24
c7e1bb94:	e5c72071 	strb	r2, [r7, #113]
c7e1bb98:	e5c71072 	strb	r1, [r7, #114]
c7e1bb9c:	e5c70073 	strb	r0, [r7, #115]
			*((u8 *)(tmp_buf+4))+
			(*((u8 *)(tmp_buf+5))<<8)+
			(*((u8 *)(tmp_buf+6))<<16)+
			(*((u8 *)(tmp_buf+7))<<24);

		otg.up_ptr=(u8 *)otg.up_addr;
c7e1bba0:	e5c73078 	strb	r3, [r7, #120]
c7e1bba4:	e5c7c079 	strb	ip, [r7, #121]
c7e1bba8:	e5c7407a 	strb	r4, [r7, #122]
c7e1bbac:	e5c7507b 	strb	r5, [r7, #123]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 10);
	check = *((u8 *)(tmp_buf+8)) + (*((u8 *)(tmp_buf+9))<<8);

	if (check==0x1) {
		otg.up_addr =
c7e1bbb0:	e5c7306c 	strb	r3, [r7, #108]
c7e1bbb4:	e5c7c06d 	strb	ip, [r7, #109]
c7e1bbb8:	e5c7406e 	strb	r4, [r7, #110]
c7e1bbbc:	e5c7506f 	strb	r5, [r7, #111]
			*((u8 *)(tmp_buf+0))+
			(*((u8 *)(tmp_buf+1))<<8)+
			(*((u8 *)(tmp_buf+2))<<16)+
			(*((u8 *)(tmp_buf+3))<<24);

		otg.up_size =
c7e1bbc0:	e5c7e070 	strb	lr, [r7, #112]

		otg.up_ptr=(u8 *)otg.up_addr;
		DBG_BULK1("UploadAddress : 0x%x, UploadSize: %d\n",
			otg.up_addr, otg.up_size);

		if (otg.op_mode == USB_CPU) {
c7e1bbc4:	1a000019 	bne	c7e1bc30 <s3c_usb_upload_start+0x144>
			if (otg.up_size > otg.bulkin_max_pktsize) {
c7e1bbc8:	e5d7205d 	ldrb	r2, [r7, #93]
c7e1bbcc:	e5d7305c 	ldrb	r3, [r7, #92]
c7e1bbd0:	e5d7105e 	ldrb	r1, [r7, #94]
c7e1bbd4:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1bbd8:	e5d7205f 	ldrb	r2, [r7, #95]
c7e1bbdc:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1bbe0:	e1832c02 	orr	r2, r3, r2, lsl #24
c7e1bbe4:	e15e0002 	cmp	lr, r2
				s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1,
c7e1bbe8:	81a0100a 	movhi	r1, sl
					otg.bulkin_max_pktsize);
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1,
c7e1bbec:	91a0100a 	movls	r1, sl
c7e1bbf0:	91a0200e 	movls	r2, lr
c7e1bbf4:	e3a00002 	mov	r0, #2	; 0x2
c7e1bbf8:	ebfff980 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
					otg.up_size);
			}

			/*ep1 enable, clear nak, bulk, usb active, max pkt 64*/
			writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkin_max_pktsize<<0,
c7e1bbfc:	e59f2134 	ldr	r2, [pc, #308]	; c7e1bd38 <s3c_usb_upload_start+0x24c>
c7e1bc00:	e5d2305c 	ldrb	r3, [r2, #92]
c7e1bc04:	e5d2105d 	ldrb	r1, [r2, #93]
c7e1bc08:	e5d2005e 	ldrb	r0, [r2, #94]
c7e1bc0c:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1bc10:	e5d2205f 	ldrb	r2, [r2, #95]
c7e1bc14:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1bc18:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1bc1c:	e3833321 	orr	r3, r3, #-2080374784	; 0x84000000
c7e1bc20:	e3833922 	orr	r3, r3, #557056	; 0x88000
c7e1bc24:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1bc28:	e5823920 	str	r3, [r2, #2336]
c7e1bc2c:	ea00003a 	b	c7e1bd1c <s3c_usb_upload_start+0x230>
				S3C_OTG_DIEPCTL_IN);
		} else if ((otg.op_mode == USB_DMA) && (otg.up_size > 0)) {
c7e1bc30:	e3560001 	cmp	r6, #1	; 0x1
c7e1bc34:	1a000038 	bne	c7e1bd1c <s3c_usb_upload_start+0x230>
c7e1bc38:	e35e0000 	cmp	lr, #0	; 0x0
c7e1bc3c:	0a000036 	beq	c7e1bd1c <s3c_usb_upload_start+0x230>
			u32 pktcnt, remainder;

			DBG_BULK1("Dma Start for IN PKT \n");

			writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
c7e1bc40:	e3a0531f 	mov	r5, #2080374784	; 0x7c000000
c7e1bc44:	e3a03027 	mov	r3, #39	; 0x27
c7e1bc48:	e5853008 	str	r3, [r5, #8]
				S3C_OTG_GAHBCFG);
			writel(INT_RESUME|INT_OUT_EP|INT_IN_EP| INT_ENUMDONE|
				INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK);

			writel((u32)otg.up_ptr, S3C_OTG_DIEPDMA_IN);
c7e1bc4c:	e5d73079 	ldrb	r3, [r7, #121]
c7e1bc50:	e5d7c078 	ldrb	ip, [r7, #120]
c7e1bc54:	e5d7207a 	ldrb	r2, [r7, #122]
c7e1bc58:	e5d7107b 	ldrb	r1, [r7, #123]
c7e1bc5c:	e18cc403 	orr	ip, ip, r3, lsl #8

			DBG_BULK1("Dma Start for IN PKT \n");

			writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
				S3C_OTG_GAHBCFG);
			writel(INT_RESUME|INT_OUT_EP|INT_IN_EP| INT_ENUMDONE|
c7e1bc60:	e59f30d4 	ldr	r3, [pc, #212]	; c7e1bd3c <s3c_usb_upload_start+0x250>
				INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK);

			writel((u32)otg.up_ptr, S3C_OTG_DIEPDMA_IN);
c7e1bc64:	e18cc802 	orr	ip, ip, r2, lsl #16

			DBG_BULK1("Dma Start for IN PKT \n");

			writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
				S3C_OTG_GAHBCFG);
			writel(INT_RESUME|INT_OUT_EP|INT_IN_EP| INT_ENUMDONE|
c7e1bc68:	e5853018 	str	r3, [r5, #24]
				INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK);

			writel((u32)otg.up_ptr, S3C_OTG_DIEPDMA_IN);
c7e1bc6c:	e18ccc01 	orr	ip, ip, r1, lsl #24

			pktcnt = (u32)(otg.up_size/otg.bulkin_max_pktsize);
c7e1bc70:	e5d70071 	ldrb	r0, [r7, #113]
c7e1bc74:	e5d7105d 	ldrb	r1, [r7, #93]
c7e1bc78:	e5d72070 	ldrb	r2, [r7, #112]
c7e1bc7c:	e5d7305c 	ldrb	r3, [r7, #92]
c7e1bc80:	e5d7e072 	ldrb	lr, [r7, #114]
c7e1bc84:	e5d7405e 	ldrb	r4, [r7, #94]
c7e1bc88:	e1822400 	orr	r2, r2, r0, lsl #8
c7e1bc8c:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1bc90:	e5d7005f 	ldrb	r0, [r7, #95]
c7e1bc94:	e5d71073 	ldrb	r1, [r7, #115]
c7e1bc98:	e182280e 	orr	r2, r2, lr, lsl #16
c7e1bc9c:	e1833804 	orr	r3, r3, r4, lsl #16
c7e1bca0:	e1827c01 	orr	r7, r2, r1, lsl #24
c7e1bca4:	e1836c00 	orr	r6, r3, r0, lsl #24
			writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
				S3C_OTG_GAHBCFG);
			writel(INT_RESUME|INT_OUT_EP|INT_IN_EP| INT_ENUMDONE|
				INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK);

			writel((u32)otg.up_ptr, S3C_OTG_DIEPDMA_IN);
c7e1bca8:	e585c934 	str	ip, [r5, #2356]

			pktcnt = (u32)(otg.up_size/otg.bulkin_max_pktsize);
c7e1bcac:	e1a01006 	mov	r1, r6
c7e1bcb0:	e1a00007 	mov	r0, r7
c7e1bcb4:	eb003a13 	bl	c7e2a508 <__udivsi3>
			remainder = (u32)(otg.up_size%otg.bulkin_max_pktsize);
			if(remainder != 0) {
c7e1bcb8:	e1a01006 	mov	r1, r6
			writel(INT_RESUME|INT_OUT_EP|INT_IN_EP| INT_ENUMDONE|
				INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK);

			writel((u32)otg.up_ptr, S3C_OTG_DIEPDMA_IN);

			pktcnt = (u32)(otg.up_size/otg.bulkin_max_pktsize);
c7e1bcbc:	e1a04000 	mov	r4, r0
			remainder = (u32)(otg.up_size%otg.bulkin_max_pktsize);
			if(remainder != 0) {
c7e1bcc0:	e1a00007 	mov	r0, r7
c7e1bcc4:	eb003a4c 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1bcc8:	e3510000 	cmp	r1, #0	; 0x0
				pktcnt += 1;
			}

			if (pktcnt > 1023) {
c7e1bccc:	e59f106c 	ldr	r1, [pc, #108]	; c7e1bd40 <s3c_usb_upload_start+0x254>
			writel((u32)otg.up_ptr, S3C_OTG_DIEPDMA_IN);

			pktcnt = (u32)(otg.up_size/otg.bulkin_max_pktsize);
			remainder = (u32)(otg.up_size%otg.bulkin_max_pktsize);
			if(remainder != 0) {
				pktcnt += 1;
c7e1bcd0:	12844001 	addne	r4, r4, #1	; 0x1
			}

			if (pktcnt > 1023) {
c7e1bcd4:	e1540001 	cmp	r4, r1
				s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1023,
c7e1bcd8:	80662506 	rsbhi	r2, r6, r6, lsl #10
					(otg.bulkin_max_pktsize*1023));
			} else {
				s3c_usb_set_inep_xfersize(EP_TYPE_BULK, pktcnt,
c7e1bcdc:	91a01004 	movls	r1, r4
c7e1bce0:	91a02007 	movls	r2, r7
c7e1bce4:	e3a00002 	mov	r0, #2	; 0x2
c7e1bce8:	ebfff944 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
					otg.up_size);
			}

			/*ep1 enable, clear nak, bulk, usb active, next ep1, max pkt */
			writel(1u<<31|1<<26|2<<18|1<<15|BULK_IN_EP<<11|
c7e1bcec:	e59f2044 	ldr	r2, [pc, #68]	; c7e1bd38 <s3c_usb_upload_start+0x24c>
c7e1bcf0:	e59f004c 	ldr	r0, [pc, #76]	; c7e1bd44 <s3c_usb_upload_start+0x258>
c7e1bcf4:	e5d2305c 	ldrb	r3, [r2, #92]
c7e1bcf8:	e5d2105d 	ldrb	r1, [r2, #93]
c7e1bcfc:	e5d2c05e 	ldrb	ip, [r2, #94]
c7e1bd00:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1bd04:	e5d2205f 	ldrb	r2, [r2, #95]
c7e1bd08:	e183380c 	orr	r3, r3, ip, lsl #16
c7e1bd0c:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1bd10:	e1830000 	orr	r0, r3, r0
c7e1bd14:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1bd18:	e5830920 	str	r0, [r3, #2336]
				otg.bulkin_max_pktsize<<0,
				S3C_OTG_DIEPCTL_IN);
		}
	}
	otg.dn_filesize=0;
c7e1bd1c:	e59f2014 	ldr	r2, [pc, #20]	; c7e1bd38 <s3c_usb_upload_start+0x24c>
c7e1bd20:	e3a03000 	mov	r3, #0	; 0x0
c7e1bd24:	e5c2306b 	strb	r3, [r2, #107]
c7e1bd28:	e5c23068 	strb	r3, [r2, #104]
c7e1bd2c:	e5c23069 	strb	r3, [r2, #105]
c7e1bd30:	e5c2306a 	strb	r3, [r2, #106]
}
c7e1bd34:	e8bd84ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, sl, pc}
c7e1bd38:	c7e42120 	.word	0xc7e42120
c7e1bd3c:	800c3800 	.word	0x800c3800
c7e1bd40:	000003ff 	.word	0x000003ff
c7e1bd44:	84088800 	.word	0x84088800

c7e1bd48 <s3c_usb_download_start>:

void s3c_usb_download_start(u32 fifo_cnt_byte)
{
c7e1bd48:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e1bd4c:	e1a09000 	mov	r9, r0
	u8 tmp_buf[8];

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
c7e1bd50:	e3a01008 	mov	r1, #8	; 0x8
c7e1bd54:	e1a0000d 	mov	r0, sp
c7e1bd58:	ebfff96e 	bl	c7e1a318 <s3c_usb_read_out_fifo>
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
	otg.dn_filesize=
c7e1bd5c:	e5dd3006 	ldrb	r3, [sp, #6]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bd60:	e59fb240 	ldr	fp, [pc, #576]	; c7e1bfa8 <s3c_usb_download_start+0x260>
	otg.dn_filesize=
c7e1bd64:	e5dd2005 	ldrb	r2, [sp, #5]
c7e1bd68:	e5dd0004 	ldrb	r0, [sp, #4]
c7e1bd6c:	e1a03803 	lsl	r3, r3, #16
c7e1bd70:	e5dd1007 	ldrb	r1, [sp, #7]
c7e1bd74:	e0833402 	add	r3, r3, r2, lsl #8

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bd78:	e59b2094 	ldr	r2, [fp, #148]
	otg.dn_filesize=
c7e1bd7c:	e0833000 	add	r3, r3, r0
c7e1bd80:	e0833c01 	add	r3, r3, r1, lsl #24

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bd84:	e1a05422 	lsr	r5, r2, #8
c7e1bd88:	e1a06822 	lsr	r6, r2, #16
	otg.dn_filesize=
c7e1bd8c:	e1a0c423 	lsr	ip, r3, #8
c7e1bd90:	e1a04823 	lsr	r4, r3, #16
c7e1bd94:	e1a0ac23 	lsr	sl, r3, #24
	otg.dn_ptr=(u8 *)otg.dn_addr;
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
c7e1bd98:	e1a00002 	mov	r0, r2

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bd9c:	e20270ff 	and	r7, r2, #255	; 0xff
	otg.dn_ptr=(u8 *)otg.dn_addr;
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
c7e1bda0:	e2499008 	sub	r9, r9, #8	; 0x8

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bda4:	e1a02c22 	lsr	r2, r2, #24
c7e1bda8:	e20550ff 	and	r5, r5, #255	; 0xff
c7e1bdac:	e20660ff 	and	r6, r6, #255	; 0xff
	otg.dn_ptr=(u8 *)otg.dn_addr;
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
c7e1bdb0:	e1a01009 	mov	r1, r9
	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
	otg.dn_filesize=
c7e1bdb4:	e5cbc069 	strb	ip, [fp, #105]
c7e1bdb8:	e5cb406a 	strb	r4, [fp, #106]
		*((u8 *)(tmp_buf+4))+
		(*((u8 *)(tmp_buf+5))<<8)+
		(*((u8 *)(tmp_buf+6))<<16)+
		(*((u8 *)(tmp_buf+7))<<24);

	otg.dn_ptr=(u8 *)otg.dn_addr;
c7e1bdbc:	e5cb2077 	strb	r2, [fp, #119]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bdc0:	e5cb2067 	strb	r2, [fp, #103]
	otg.dn_filesize=
c7e1bdc4:	e5cb3068 	strb	r3, [fp, #104]
c7e1bdc8:	e5cba06b 	strb	sl, [fp, #107]
		*((u8 *)(tmp_buf+4))+
		(*((u8 *)(tmp_buf+5))<<8)+
		(*((u8 *)(tmp_buf+6))<<16)+
		(*((u8 *)(tmp_buf+7))<<24);

	otg.dn_ptr=(u8 *)otg.dn_addr;
c7e1bdcc:	e5cb7074 	strb	r7, [fp, #116]
c7e1bdd0:	e5cb5075 	strb	r5, [fp, #117]
c7e1bdd4:	e5cb6076 	strb	r6, [fp, #118]

	s3c_usb_read_out_fifo((u8 *)tmp_buf, 8);
	DBG_BULK1("downloadFileSize==0, 1'st BYTE_READ_CNT_REG : %x\n",
		fifo_cnt_byte);

	otg.dn_addr=s3c_usbd_dn_addr;
c7e1bdd8:	e5cb7064 	strb	r7, [fp, #100]
c7e1bddc:	e5cb5065 	strb	r5, [fp, #101]
c7e1bde0:	e5cb6066 	strb	r6, [fp, #102]
	otg.dn_ptr=(u8 *)otg.dn_addr;
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
c7e1bde4:	ebfff94b 	bl	c7e1a318 <s3c_usb_read_out_fifo>
	otg.dn_ptr += fifo_cnt_byte-8;
c7e1bde8:	e5db2075 	ldrb	r2, [fp, #117]
c7e1bdec:	e5db3074 	ldrb	r3, [fp, #116]
c7e1bdf0:	e5db0076 	ldrb	r0, [fp, #118]
c7e1bdf4:	e5dbc077 	ldrb	ip, [fp, #119]
c7e1bdf8:	e1833402 	orr	r3, r3, r2, lsl #8

	if (otg.op_mode == USB_CPU) {
c7e1bdfc:	e5db1051 	ldrb	r1, [fp, #81]
c7e1be00:	e5db2050 	ldrb	r2, [fp, #80]
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
	otg.dn_ptr += fifo_cnt_byte-8;
c7e1be04:	e1833800 	orr	r3, r3, r0, lsl #16

	if (otg.op_mode == USB_CPU) {
c7e1be08:	e5db0052 	ldrb	r0, [fp, #82]
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
	otg.dn_ptr += fifo_cnt_byte-8;
c7e1be0c:	e1833c0c 	orr	r3, r3, ip, lsl #24

	if (otg.op_mode == USB_CPU) {
c7e1be10:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1be14:	e5db1053 	ldrb	r1, [fp, #83]
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
	otg.dn_ptr += fifo_cnt_byte-8;
c7e1be18:	e0833009 	add	r3, r3, r9

	if (otg.op_mode == USB_CPU) {
c7e1be1c:	e1822800 	orr	r2, r2, r0, lsl #16
c7e1be20:	e1921c01 	orrs	r1, r2, r1, lsl #24
	DBG_BULK1("downloadAddress : 0x%x, downloadFileSize: %x\n",
		otg.dn_addr, otg.dn_filesize);

	/* The first 8-bytes are deleted.*/
	s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte-8);
	otg.dn_ptr += fifo_cnt_byte-8;
c7e1be24:	e1a00c23 	lsr	r0, r3, #24
c7e1be28:	e1a01823 	lsr	r1, r3, #16
c7e1be2c:	e1a02423 	lsr	r2, r3, #8
c7e1be30:	e5cb1076 	strb	r1, [fp, #118]
c7e1be34:	e5cb2075 	strb	r2, [fp, #117]
c7e1be38:	e5cb0077 	strb	r0, [fp, #119]
c7e1be3c:	e5cb3074 	strb	r3, [fp, #116]
c7e1be40:	e5dbc060 	ldrb	ip, [fp, #96]
c7e1be44:	e5db1061 	ldrb	r1, [fp, #97]
c7e1be48:	e5dbe062 	ldrb	lr, [fp, #98]
c7e1be4c:	e5db4063 	ldrb	r4, [fp, #99]

	if (otg.op_mode == USB_CPU) {
c7e1be50:	1a00000f 	bne	c7e1be94 <s3c_usb_download_start+0x14c>
		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1,
c7e1be54:	e18c2401 	orr	r2, ip, r1, lsl #8
c7e1be58:	e182280e 	orr	r2, r2, lr, lsl #16
c7e1be5c:	e1822c04 	orr	r2, r2, r4, lsl #24
c7e1be60:	e3a00002 	mov	r0, #2	; 0x2
c7e1be64:	e3a01001 	mov	r1, #1	; 0x1
c7e1be68:	ebfff8f1 	bl	c7e1a234 <s3c_usb_set_outep_xfersize>
			otg.bulkout_max_pktsize);

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1be6c:	e5db2061 	ldrb	r2, [fp, #97]
c7e1be70:	e5db3060 	ldrb	r3, [fp, #96]
c7e1be74:	e5db1062 	ldrb	r1, [fp, #98]
c7e1be78:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1be7c:	e5db2063 	ldrb	r2, [fp, #99]
c7e1be80:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1be84:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1be88:	e3833321 	orr	r3, r3, #-2080374784	; 0x84000000
c7e1be8c:	e3833922 	orr	r3, r3, #557056	; 0x88000
c7e1be90:	ea000041 	b	c7e1bf9c <s3c_usb_download_start+0x254>
		S3C_OTG_DOEPCTL_OUT);
	} else if (otg.dn_filesize>otg.bulkout_max_pktsize) {
c7e1be94:	e5db2069 	ldrb	r2, [fp, #105]
c7e1be98:	e5db3068 	ldrb	r3, [fp, #104]
c7e1be9c:	e5db006a 	ldrb	r0, [fp, #106]
c7e1bea0:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1bea4:	e18c2401 	orr	r2, ip, r1, lsl #8
c7e1bea8:	e5db106b 	ldrb	r1, [fp, #107]
c7e1beac:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1beb0:	e182280e 	orr	r2, r2, lr, lsl #16
c7e1beb4:	e1833c01 	orr	r3, r3, r1, lsl #24
c7e1beb8:	e1822c04 	orr	r2, r2, r4, lsl #24
c7e1bebc:	e1530002 	cmp	r3, r2
c7e1bec0:	9a000037 	bls	c7e1bfa4 <s3c_usb_download_start+0x25c>
		u32 pkt_cnt, remain_cnt;

		DBG_BULK1("downloadFileSize!=0, Dma Start for 2nd OUT PKT \n");
		writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
c7e1bec4:	e59f30e0 	ldr	r3, [pc, #224]	; c7e1bfac <s3c_usb_download_start+0x264>
c7e1bec8:	e3a0531f 	mov	r5, #2080374784	; 0x7c000000
c7e1becc:	e5853018 	str	r3, [r5, #24]
			INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK); /*gint unmask */
		writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
			S3C_OTG_GAHBCFG);
		writel((u32)otg.dn_ptr, S3C_OTG_DOEPDMA_OUT);
c7e1bed0:	e5db3075 	ldrb	r3, [fp, #117]
c7e1bed4:	e5dbc074 	ldrb	ip, [fp, #116]
c7e1bed8:	e5db2076 	ldrb	r2, [fp, #118]
c7e1bedc:	e5db1077 	ldrb	r1, [fp, #119]
c7e1bee0:	e18cc403 	orr	ip, ip, r3, lsl #8
c7e1bee4:	e18cc802 	orr	ip, ip, r2, lsl #16
		u32 pkt_cnt, remain_cnt;

		DBG_BULK1("downloadFileSize!=0, Dma Start for 2nd OUT PKT \n");
		writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
			INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK); /*gint unmask */
		writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
c7e1bee8:	e3a03027 	mov	r3, #39	; 0x27
c7e1beec:	e5853008 	str	r3, [r5, #8]
			S3C_OTG_GAHBCFG);
		writel((u32)otg.dn_ptr, S3C_OTG_DOEPDMA_OUT);
c7e1bef0:	e18ccc01 	orr	ip, ip, r1, lsl #24
		pkt_cnt = (u32)(otg.dn_filesize-otg.bulkout_max_pktsize)/otg.bulkout_max_pktsize;
c7e1bef4:	e5db0061 	ldrb	r0, [fp, #97]
c7e1bef8:	e5db1069 	ldrb	r1, [fp, #105]
c7e1befc:	e5db2060 	ldrb	r2, [fp, #96]
c7e1bf00:	e5db3068 	ldrb	r3, [fp, #104]
c7e1bf04:	e5dbe062 	ldrb	lr, [fp, #98]
c7e1bf08:	e5db406a 	ldrb	r4, [fp, #106]
c7e1bf0c:	e1822400 	orr	r2, r2, r0, lsl #8
c7e1bf10:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1bf14:	e5db006b 	ldrb	r0, [fp, #107]
c7e1bf18:	e5db1063 	ldrb	r1, [fp, #99]
c7e1bf1c:	e182280e 	orr	r2, r2, lr, lsl #16
c7e1bf20:	e1833804 	orr	r3, r3, r4, lsl #16
c7e1bf24:	e1826c01 	orr	r6, r2, r1, lsl #24
c7e1bf28:	e1833c00 	orr	r3, r3, r0, lsl #24
c7e1bf2c:	e0667003 	rsb	r7, r6, r3
		DBG_BULK1("downloadFileSize!=0, Dma Start for 2nd OUT PKT \n");
		writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
			INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK); /*gint unmask */
		writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
			S3C_OTG_GAHBCFG);
		writel((u32)otg.dn_ptr, S3C_OTG_DOEPDMA_OUT);
c7e1bf30:	e585cb54 	str	ip, [r5, #2900]
		pkt_cnt = (u32)(otg.dn_filesize-otg.bulkout_max_pktsize)/otg.bulkout_max_pktsize;
c7e1bf34:	e1a01006 	mov	r1, r6
c7e1bf38:	e1a00007 	mov	r0, r7
c7e1bf3c:	eb003971 	bl	c7e2a508 <__udivsi3>
		remain_cnt = (u32)((otg.dn_filesize-otg.bulkout_max_pktsize)%otg.bulkout_max_pktsize);
		if(remain_cnt != 0) {
c7e1bf40:	e1a01006 	mov	r1, r6
		writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
			INT_RESET|INT_SUSPEND, S3C_OTG_GINTMSK); /*gint unmask */
		writel(MODE_DMA|BURST_INCR4|GBL_INT_UNMASK,
			S3C_OTG_GAHBCFG);
		writel((u32)otg.dn_ptr, S3C_OTG_DOEPDMA_OUT);
		pkt_cnt = (u32)(otg.dn_filesize-otg.bulkout_max_pktsize)/otg.bulkout_max_pktsize;
c7e1bf44:	e1a04000 	mov	r4, r0
		remain_cnt = (u32)((otg.dn_filesize-otg.bulkout_max_pktsize)%otg.bulkout_max_pktsize);
		if(remain_cnt != 0) {
c7e1bf48:	e1a00007 	mov	r0, r7
c7e1bf4c:	eb0039aa 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1bf50:	e3510000 	cmp	r1, #0	; 0x0
			pkt_cnt += 1;
		}

		if (pkt_cnt > 1023) {
c7e1bf54:	e59f1054 	ldr	r1, [pc, #84]	; c7e1bfb0 <s3c_usb_download_start+0x268>
			S3C_OTG_GAHBCFG);
		writel((u32)otg.dn_ptr, S3C_OTG_DOEPDMA_OUT);
		pkt_cnt = (u32)(otg.dn_filesize-otg.bulkout_max_pktsize)/otg.bulkout_max_pktsize;
		remain_cnt = (u32)((otg.dn_filesize-otg.bulkout_max_pktsize)%otg.bulkout_max_pktsize);
		if(remain_cnt != 0) {
			pkt_cnt += 1;
c7e1bf58:	12844001 	addne	r4, r4, #1	; 0x1
		}

		if (pkt_cnt > 1023) {
c7e1bf5c:	e1540001 	cmp	r4, r1
			s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1023,
c7e1bf60:	80662506 	rsbhi	r2, r6, r6, lsl #10
				(otg.bulkout_max_pktsize*1023));
		} else {
			s3c_usb_set_outep_xfersize(EP_TYPE_BULK, pkt_cnt,
c7e1bf64:	91a01004 	movls	r1, r4
c7e1bf68:	91a02007 	movls	r2, r7
c7e1bf6c:	e3a00002 	mov	r0, #2	; 0x2
c7e1bf70:	ebfff8af 	bl	c7e1a234 <s3c_usb_set_outep_xfersize>
				(otg.dn_filesize-otg.bulkout_max_pktsize));
		}

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1bf74:	e59f202c 	ldr	r2, [pc, #44]	; c7e1bfa8 <s3c_usb_download_start+0x260>
c7e1bf78:	e5d23060 	ldrb	r3, [r2, #96]
c7e1bf7c:	e5d21061 	ldrb	r1, [r2, #97]
c7e1bf80:	e5d20062 	ldrb	r0, [r2, #98]
c7e1bf84:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1bf88:	e5d22063 	ldrb	r2, [r2, #99]
c7e1bf8c:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1bf90:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1bf94:	e3833321 	orr	r3, r3, #-2080374784	; 0x84000000
c7e1bf98:	e3833922 	orr	r3, r3, #557056	; 0x88000
c7e1bf9c:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1bfa0:	e5823b40 	str	r3, [r2, #2880]
			S3C_OTG_DOEPCTL_OUT);
	}
}
c7e1bfa4:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e1bfa8:	c7e42120 	.word	0xc7e42120
c7e1bfac:	800c3800 	.word	0x800c3800
c7e1bfb0:	000003ff 	.word	0x000003ff

c7e1bfb4 <s3c_usb_dma_in_done>:
{
	s32 remain_cnt;

	DBG_BULK0("DMA IN : Transfer Done\n");

	otg.up_ptr = (u8 *)readl(S3C_OTG_DIEPDMA_IN);
c7e1bfb4:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
		s3c_usb_download_continue(fifo_cnt_byte);
	}
}

void s3c_usb_dma_in_done(void)
{
c7e1bfb8:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	s32 remain_cnt;

	DBG_BULK0("DMA IN : Transfer Done\n");

	otg.up_ptr = (u8 *)readl(S3C_OTG_DIEPDMA_IN);
c7e1bfbc:	e593c934 	ldr	ip, [r3, #2356]
c7e1bfc0:	e59f70f0 	ldr	r7, [pc, #240]	; c7e1c0b8 <s3c_usb_dma_in_done+0x104>
c7e1bfc4:	e1a0642c 	lsr	r6, ip, #8
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);
c7e1bfc8:	e5d7006d 	ldrb	r0, [r7, #109]
c7e1bfcc:	e5d71071 	ldrb	r1, [r7, #113]
c7e1bfd0:	e5d7306c 	ldrb	r3, [r7, #108]
c7e1bfd4:	e5d72070 	ldrb	r2, [r7, #112]
c7e1bfd8:	e5d7406e 	ldrb	r4, [r7, #110]
c7e1bfdc:	e5d75072 	ldrb	r5, [r7, #114]
c7e1bfe0:	e1833400 	orr	r3, r3, r0, lsl #8
c7e1bfe4:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1bfe8:	e5d70073 	ldrb	r0, [r7, #115]
c7e1bfec:	e5d7106f 	ldrb	r1, [r7, #111]
c7e1bff0:	e1833804 	orr	r3, r3, r4, lsl #16
c7e1bff4:	e1822805 	orr	r2, r2, r5, lsl #16
c7e1bff8:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1bffc:	e1833c01 	orr	r3, r3, r1, lsl #24
c7e1c000:	e0833002 	add	r3, r3, r2
c7e1c004:	e06ca003 	rsb	sl, ip, r3
{
	s32 remain_cnt;

	DBG_BULK0("DMA IN : Transfer Done\n");

	otg.up_ptr = (u8 *)readl(S3C_OTG_DIEPDMA_IN);
c7e1c008:	e1a02c2c 	lsr	r2, ip, #24
c7e1c00c:	e1a0382c 	lsr	r3, ip, #16
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);

	if (remain_cnt>0) {
c7e1c010:	e35a0000 	cmp	sl, #0	; 0x0
{
	s32 remain_cnt;

	DBG_BULK0("DMA IN : Transfer Done\n");

	otg.up_ptr = (u8 *)readl(S3C_OTG_DIEPDMA_IN);
c7e1c014:	e5c76079 	strb	r6, [r7, #121]
c7e1c018:	e5c7307a 	strb	r3, [r7, #122]
c7e1c01c:	e5c7207b 	strb	r2, [r7, #123]
c7e1c020:	e5c7c078 	strb	ip, [r7, #120]
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);

	if (remain_cnt>0) {
c7e1c024:	d8bd84f0 	pople	{r4, r5, r6, r7, sl, pc}
		u32 pktcnt, remainder;
		pktcnt = (u32)(remain_cnt/otg.bulkin_max_pktsize);
c7e1c028:	e5d7205d 	ldrb	r2, [r7, #93]
c7e1c02c:	e5d7305c 	ldrb	r3, [r7, #92]
c7e1c030:	e5d7105e 	ldrb	r1, [r7, #94]
c7e1c034:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1c038:	e5d7205f 	ldrb	r2, [r7, #95]
c7e1c03c:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1c040:	e1835c02 	orr	r5, r3, r2, lsl #24
c7e1c044:	e1a01005 	mov	r1, r5
c7e1c048:	e1a0000a 	mov	r0, sl
c7e1c04c:	eb00392d 	bl	c7e2a508 <__udivsi3>
		remainder = (u32)(remain_cnt%otg.bulkin_max_pktsize);
		if(remainder != 0) {
c7e1c050:	e1a01005 	mov	r1, r5
	otg.up_ptr = (u8 *)readl(S3C_OTG_DIEPDMA_IN);
	remain_cnt = otg.up_size- ((u32)otg.up_ptr - otg.up_addr);

	if (remain_cnt>0) {
		u32 pktcnt, remainder;
		pktcnt = (u32)(remain_cnt/otg.bulkin_max_pktsize);
c7e1c054:	e1a04000 	mov	r4, r0
		remainder = (u32)(remain_cnt%otg.bulkin_max_pktsize);
		if(remainder != 0) {
c7e1c058:	e1a0000a 	mov	r0, sl
c7e1c05c:	eb003966 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1c060:	e3510000 	cmp	r1, #0	; 0x0
			pktcnt += 1;
		}
		DBG_SETUP1("remain_cnt : %d \n", remain_cnt);
		if (pktcnt> 1023) {
c7e1c064:	e59f1050 	ldr	r1, [pc, #80]	; c7e1c0bc <s3c_usb_dma_in_done+0x108>
	if (remain_cnt>0) {
		u32 pktcnt, remainder;
		pktcnt = (u32)(remain_cnt/otg.bulkin_max_pktsize);
		remainder = (u32)(remain_cnt%otg.bulkin_max_pktsize);
		if(remainder != 0) {
			pktcnt += 1;
c7e1c068:	12844001 	addne	r4, r4, #1	; 0x1
		}
		DBG_SETUP1("remain_cnt : %d \n", remain_cnt);
		if (pktcnt> 1023) {
c7e1c06c:	e1540001 	cmp	r4, r1
			s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1023,
c7e1c070:	80652505 	rsbhi	r2, r5, r5, lsl #10
				(otg.bulkin_max_pktsize*1023));
		} else {
			s3c_usb_set_inep_xfersize(EP_TYPE_BULK, pktcnt,
c7e1c074:	91a01004 	movls	r1, r4
c7e1c078:	91a0200a 	movls	r2, sl
c7e1c07c:	e3a00002 	mov	r0, #2	; 0x2
c7e1c080:	ebfff85e 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>
				remain_cnt);
		}

		/*ep1 enable, clear nak, bulk, usb active, next ep1, max pkt */
		writel(1u<<31|1<<26|2<<18|1<<15|BULK_IN_EP<<11|otg.bulkin_max_pktsize<<0,
c7e1c084:	e59f202c 	ldr	r2, [pc, #44]	; c7e1c0b8 <s3c_usb_dma_in_done+0x104>
c7e1c088:	e59f0030 	ldr	r0, [pc, #48]	; c7e1c0c0 <s3c_usb_dma_in_done+0x10c>
c7e1c08c:	e5d2305c 	ldrb	r3, [r2, #92]
c7e1c090:	e5d2105d 	ldrb	r1, [r2, #93]
c7e1c094:	e5d2c05e 	ldrb	ip, [r2, #94]
c7e1c098:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1c09c:	e5d2205f 	ldrb	r2, [r2, #95]
c7e1c0a0:	e183380c 	orr	r3, r3, ip, lsl #16
c7e1c0a4:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1c0a8:	e1830000 	orr	r0, r3, r0
c7e1c0ac:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1c0b0:	e5830920 	str	r0, [r3, #2336]
c7e1c0b4:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e1c0b8:	c7e42120 	.word	0xc7e42120
c7e1c0bc:	000003ff 	.word	0x000003ff
c7e1c0c0:	84088800 	.word	0x84088800

c7e1c0c4 <s3c_usb_set_all_outep_nak>:
		udelay(500);		/*for FPGA ???*/
	}
}

void s3c_usb_set_all_outep_nak(void)
{
c7e1c0c4:	e59f2018 	ldr	r2, [pc, #24]	; c7e1c0e4 <s3c_usb_set_all_outep_nak+0x20>
	u8 i;
	u32 tmp;

	for(i=0;i<16;i++)
	{
		tmp = readl(S3C_OTG_DOEPCTL0+0x20*i);
c7e1c0c8:	e5923000 	ldr	r3, [r2]
		tmp |= DEPCTL_SNAK;
c7e1c0cc:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
		writel(tmp, S3C_OTG_DOEPCTL0+0x20*i);
c7e1c0d0:	e4823020 	str	r3, [r2], #32
void s3c_usb_set_all_outep_nak(void)
{
	u8 i;
	u32 tmp;

	for(i=0;i<16;i++)
c7e1c0d4:	e59f300c 	ldr	r3, [pc, #12]	; c7e1c0e8 <s3c_usb_set_all_outep_nak+0x24>
c7e1c0d8:	e1520003 	cmp	r2, r3
c7e1c0dc:	1afffff9 	bne	c7e1c0c8 <s3c_usb_set_all_outep_nak+0x4>
	{
		tmp = readl(S3C_OTG_DOEPCTL0+0x20*i);
		tmp |= DEPCTL_SNAK;
		writel(tmp, S3C_OTG_DOEPCTL0+0x20*i);
	}
}
c7e1c0e0:	e12fff1e 	bx	lr
c7e1c0e4:	7c000b00 	.word	0x7c000b00
c7e1c0e8:	7c000d00 	.word	0x7c000d00

c7e1c0ec <s3c_usb_clear_all_outep_nak>:

void s3c_usb_clear_all_outep_nak(void)
{
c7e1c0ec:	e59f2018 	ldr	r2, [pc, #24]	; c7e1c10c <s3c_usb_clear_all_outep_nak+0x20>
	u8 i;
	u32 tmp;

	for(i=0;i<16;i++)
	{
		tmp = readl(S3C_OTG_DOEPCTL0+0x20*i);
c7e1c0f0:	e5923000 	ldr	r3, [r2]
		tmp |= (DEPCTL_EPENA|DEPCTL_CNAK);
c7e1c0f4:	e3833321 	orr	r3, r3, #-2080374784	; 0x84000000
		writel(tmp, S3C_OTG_DOEPCTL0+0x20*i);
c7e1c0f8:	e4823020 	str	r3, [r2], #32
void s3c_usb_clear_all_outep_nak(void)
{
	u8 i;
	u32 tmp;

	for(i=0;i<16;i++)
c7e1c0fc:	e59f300c 	ldr	r3, [pc, #12]	; c7e1c110 <s3c_usb_clear_all_outep_nak+0x24>
c7e1c100:	e1520003 	cmp	r2, r3
c7e1c104:	1afffff9 	bne	c7e1c0f0 <s3c_usb_clear_all_outep_nak+0x4>
	{
		tmp = readl(S3C_OTG_DOEPCTL0+0x20*i);
		tmp |= (DEPCTL_EPENA|DEPCTL_CNAK);
		writel(tmp, S3C_OTG_DOEPCTL0+0x20*i);
	}
}
c7e1c108:	e12fff1e 	bx	lr
c7e1c10c:	7c000b00 	.word	0x7c000b00
c7e1c110:	7c000d00 	.word	0x7c000d00

c7e1c114 <s3c_usb_set_max_pktsize>:

void s3c_usb_set_max_pktsize(USB_SPEED speed)
{
	if (speed == USB_HIGH)
c7e1c114:	e3500000 	cmp	r0, #0	; 0x0
c7e1c118:	e59fc0a0 	ldr	ip, [pc, #160]	; c7e1c1c0 <s3c_usb_set_max_pktsize+0xac>
c7e1c11c:	1a000012 	bne	c7e1c16c <s3c_usb_set_max_pktsize+0x58>
	{
		otg.speed = USB_HIGH;
		otg.ctrl_max_pktsize = HS_CTRL_PKT_SIZE;
		otg.bulkin_max_pktsize = HS_BULK_PKT_SIZE;
c7e1c120:	e3a02002 	mov	r2, #2	; 0x2
void s3c_usb_set_max_pktsize(USB_SPEED speed)
{
	if (speed == USB_HIGH)
	{
		otg.speed = USB_HIGH;
		otg.ctrl_max_pktsize = HS_CTRL_PKT_SIZE;
c7e1c124:	e3a03040 	mov	r3, #64	; 0x40
		otg.bulkin_max_pktsize = HS_BULK_PKT_SIZE;
		otg.bulkout_max_pktsize = HS_BULK_PKT_SIZE;
c7e1c128:	e5cc0063 	strb	r0, [ip, #99]
void s3c_usb_set_max_pktsize(USB_SPEED speed)
{
	if (speed == USB_HIGH)
	{
		otg.speed = USB_HIGH;
		otg.ctrl_max_pktsize = HS_CTRL_PKT_SIZE;
c7e1c12c:	e5cc3058 	strb	r3, [ip, #88]
		otg.bulkin_max_pktsize = HS_BULK_PKT_SIZE;
		otg.bulkout_max_pktsize = HS_BULK_PKT_SIZE;
c7e1c130:	e5cc2061 	strb	r2, [ip, #97]

void s3c_usb_set_max_pktsize(USB_SPEED speed)
{
	if (speed == USB_HIGH)
	{
		otg.speed = USB_HIGH;
c7e1c134:	e5cc0054 	strb	r0, [ip, #84]
c7e1c138:	e5cc0055 	strb	r0, [ip, #85]
c7e1c13c:	e5cc0056 	strb	r0, [ip, #86]
c7e1c140:	e5cc0057 	strb	r0, [ip, #87]
		otg.ctrl_max_pktsize = HS_CTRL_PKT_SIZE;
c7e1c144:	e5cc0059 	strb	r0, [ip, #89]
c7e1c148:	e5cc005a 	strb	r0, [ip, #90]
c7e1c14c:	e5cc005b 	strb	r0, [ip, #91]
		otg.bulkin_max_pktsize = HS_BULK_PKT_SIZE;
c7e1c150:	e5cc005c 	strb	r0, [ip, #92]
c7e1c154:	e5cc205d 	strb	r2, [ip, #93]
c7e1c158:	e5cc005e 	strb	r0, [ip, #94]
c7e1c15c:	e5cc005f 	strb	r0, [ip, #95]
		otg.bulkout_max_pktsize = HS_BULK_PKT_SIZE;
c7e1c160:	e5cc0060 	strb	r0, [ip, #96]
c7e1c164:	e5cc0062 	strb	r0, [ip, #98]
c7e1c168:	e12fff1e 	bx	lr
	}
	else
	{
		otg.speed = USB_FULL;
c7e1c16c:	e3a02001 	mov	r2, #1	; 0x1
c7e1c170:	e3a03000 	mov	r3, #0	; 0x0
		otg.ctrl_max_pktsize = FS_CTRL_PKT_SIZE;
		otg.bulkin_max_pktsize = FS_BULK_PKT_SIZE;
c7e1c174:	e3a01040 	mov	r1, #64	; 0x40
		otg.bulkin_max_pktsize = HS_BULK_PKT_SIZE;
		otg.bulkout_max_pktsize = HS_BULK_PKT_SIZE;
	}
	else
	{
		otg.speed = USB_FULL;
c7e1c178:	e5cc2054 	strb	r2, [ip, #84]
		otg.ctrl_max_pktsize = FS_CTRL_PKT_SIZE;
c7e1c17c:	e2822007 	add	r2, r2, #7	; 0x7
		otg.bulkin_max_pktsize = FS_BULK_PKT_SIZE;
		otg.bulkout_max_pktsize = FS_BULK_PKT_SIZE;
c7e1c180:	e5cc3063 	strb	r3, [ip, #99]
		otg.bulkout_max_pktsize = HS_BULK_PKT_SIZE;
	}
	else
	{
		otg.speed = USB_FULL;
		otg.ctrl_max_pktsize = FS_CTRL_PKT_SIZE;
c7e1c184:	e5cc2058 	strb	r2, [ip, #88]
		otg.bulkin_max_pktsize = FS_BULK_PKT_SIZE;
		otg.bulkout_max_pktsize = FS_BULK_PKT_SIZE;
c7e1c188:	e5cc1060 	strb	r1, [ip, #96]
		otg.bulkin_max_pktsize = HS_BULK_PKT_SIZE;
		otg.bulkout_max_pktsize = HS_BULK_PKT_SIZE;
	}
	else
	{
		otg.speed = USB_FULL;
c7e1c18c:	e5cc3055 	strb	r3, [ip, #85]
c7e1c190:	e5cc3056 	strb	r3, [ip, #86]
c7e1c194:	e5cc3057 	strb	r3, [ip, #87]
		otg.ctrl_max_pktsize = FS_CTRL_PKT_SIZE;
c7e1c198:	e5cc3059 	strb	r3, [ip, #89]
c7e1c19c:	e5cc305a 	strb	r3, [ip, #90]
c7e1c1a0:	e5cc305b 	strb	r3, [ip, #91]
		otg.bulkin_max_pktsize = FS_BULK_PKT_SIZE;
c7e1c1a4:	e5cc105c 	strb	r1, [ip, #92]
c7e1c1a8:	e5cc305d 	strb	r3, [ip, #93]
c7e1c1ac:	e5cc305e 	strb	r3, [ip, #94]
c7e1c1b0:	e5cc305f 	strb	r3, [ip, #95]
		otg.bulkout_max_pktsize = FS_BULK_PKT_SIZE;
c7e1c1b4:	e5cc3061 	strb	r3, [ip, #97]
c7e1c1b8:	e5cc3062 	strb	r3, [ip, #98]
c7e1c1bc:	e12fff1e 	bx	lr
c7e1c1c0:	c7e42120 	.word	0xc7e42120

c7e1c1c4 <s3c_usb_set_endpoint>:
}

void s3c_usb_set_endpoint(void)
{
	/* Unmask S3C_OTG_DAINT source */
	writel(0xff, S3C_OTG_DIEPINT0);
c7e1c1c4:	e3a0c31f 	mov	ip, #2080374784	; 0x7c000000
c7e1c1c8:	e3a030ff 	mov	r3, #255	; 0xff
c7e1c1cc:	e58c3908 	str	r3, [ip, #2312]
	writel(0xff, S3C_OTG_DOEPINT0);
c7e1c1d0:	e58c3b08 	str	r3, [ip, #2824]
	writel(0xff, S3C_OTG_DIEPINT_IN);
c7e1c1d4:	e58c3928 	str	r3, [ip, #2344]
	writel(0xff, S3C_OTG_DOEPINT_OUT);

	/* Init For Ep0*/
	if(otg.speed == USB_HIGH)
c7e1c1d8:	e59f2040 	ldr	r2, [pc, #64]	; c7e1c220 <s3c_usb_set_endpoint+0x5c>
{
	/* Unmask S3C_OTG_DAINT source */
	writel(0xff, S3C_OTG_DIEPINT0);
	writel(0xff, S3C_OTG_DOEPINT0);
	writel(0xff, S3C_OTG_DIEPINT_IN);
	writel(0xff, S3C_OTG_DOEPINT_OUT);
c7e1c1dc:	e58c3b48 	str	r3, [ip, #2888]

	/* Init For Ep0*/
	if(otg.speed == USB_HIGH)
c7e1c1e0:	e5d23054 	ldrb	r3, [r2, #84]
c7e1c1e4:	e5d21055 	ldrb	r1, [r2, #85]
c7e1c1e8:	e5d20056 	ldrb	r0, [r2, #86]
c7e1c1ec:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1c1f0:	e5d22057 	ldrb	r2, [r2, #87]
c7e1c1f4:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1c1f8:	e1932c02 	orrs	r2, r3, r2, lsl #24
c7e1c1fc:	1a000002 	bne	c7e1c20c <s3c_usb_set_endpoint+0x48>
	{
		/*MPS:64bytes */
		writel(((1<<26)|(CONTROL_EP<<11)|(0<<0)), S3C_OTG_DIEPCTL0);
c7e1c200:	e3a03301 	mov	r3, #67108864	; 0x4000000
c7e1c204:	e58c3900 	str	r3, [ip, #2304]
		/*ep0 enable, clear nak */
		writel((1u<<31)|(1<<26)|(0<<0), S3C_OTG_DOEPCTL0);
c7e1c208:	ea000001 	b	c7e1c214 <s3c_usb_set_endpoint+0x50>
	}
	else
	{
		/*MPS:8bytes */
		writel(((1<<26)|(CONTROL_EP<<11)|(3<<0)), S3C_OTG_DIEPCTL0);
c7e1c20c:	e3a033c1 	mov	r3, #67108867	; 0x4000003
c7e1c210:	e58c3900 	str	r3, [ip, #2304]
		/*ep0 enable, clear nak */
		writel((1u<<31)|(1<<26)|(3<<0), S3C_OTG_DOEPCTL0);
c7e1c214:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
c7e1c218:	e58c3b00 	str	r3, [ip, #2816]
c7e1c21c:	e12fff1e 	bx	lr
c7e1c220:	c7e42120 	.word	0xc7e42120

c7e1c224 <s3c_usb_set_descriptors>:
	}
}

void s3c_usb_set_descriptors(void)
{
c7e1c224:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	/* Standard device descriptor */
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
c7e1c228:	e59fc18c 	ldr	ip, [pc, #396]	; c7e1c3bc <s3c_usb_set_descriptors+0x198>
	otg.desc.dev.bDescriptorType=DEVICE_DESCRIPTOR;
c7e1c22c:	e3a00001 	mov	r0, #1	; 0x1
	otg.desc.dev.bcdDeviceH=0x01;
	otg.desc.dev.iManufacturer=0x1; /* index of string descriptor */
	otg.desc.dev.iProduct=0x2;	/* index of string descriptor */
	otg.desc.dev.iSerialNumber=0x0;
	otg.desc.dev.bNumConfigurations=0x1;
	if (otg.speed == USB_FULL) {
c7e1c230:	e5dc2055 	ldrb	r2, [ip, #85]
c7e1c234:	e5dc3054 	ldrb	r3, [ip, #84]
c7e1c238:	e5dc1056 	ldrb	r1, [ip, #86]
c7e1c23c:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1c240:	e5dc2057 	ldrb	r2, [ip, #87]
c7e1c244:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1c248:	e1835c02 	orr	r5, r3, r2, lsl #24
void s3c_usb_set_descriptors(void)
{
	/* Standard device descriptor */
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
	otg.desc.dev.bDescriptorType=DEVICE_DESCRIPTOR;
	otg.desc.dev.bDeviceClass=0xFF; /* 0x0*/
c7e1c24c:	e3e03000 	mvn	r3, #0	; 0x0
c7e1c250:	e5cc3004 	strb	r3, [ip, #4]
	otg.desc.dev.bDeviceSubClass=0x0;
	otg.desc.dev.bDeviceProtocol=0x0;
	otg.desc.dev.bMaxPacketSize0=otg.ctrl_max_pktsize;
	otg.desc.dev.idVendorL=0xE8;	/*0x45;*/
c7e1c254:	e3e03017 	mvn	r3, #23	; 0x17
c7e1c258:	e5cc3008 	strb	r3, [ip, #8]
	otg.desc.dev.idVendorH=0x04;	/*0x53;*/
c7e1c25c:	e283301c 	add	r3, r3, #28	; 0x1c
c7e1c260:	e5cc3009 	strb	r3, [ip, #9]
	otg.desc.dev.bcdDeviceH=0x01;
	otg.desc.dev.iManufacturer=0x1; /* index of string descriptor */
	otg.desc.dev.iProduct=0x2;	/* index of string descriptor */
	otg.desc.dev.iSerialNumber=0x0;
	otg.desc.dev.bNumConfigurations=0x1;
	if (otg.speed == USB_FULL) {
c7e1c264:	e1550000 	cmp	r5, r0
	otg.desc.dev.bDeviceSubClass=0x0;
	otg.desc.dev.bDeviceProtocol=0x0;
	otg.desc.dev.bMaxPacketSize0=otg.ctrl_max_pktsize;
	otg.desc.dev.idVendorL=0xE8;	/*0x45;*/
	otg.desc.dev.idVendorH=0x04;	/*0x53;*/
	otg.desc.dev.idProductL=0x34; /*0x00*/
c7e1c268:	e2833030 	add	r3, r3, #48	; 0x30
c7e1c26c:	e5cc300a 	strb	r3, [ip, #10]
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
	otg.desc.dev.bDescriptorType=DEVICE_DESCRIPTOR;
	otg.desc.dev.bDeviceClass=0xFF; /* 0x0*/
	otg.desc.dev.bDeviceSubClass=0x0;
	otg.desc.dev.bDeviceProtocol=0x0;
	otg.desc.dev.bMaxPacketSize0=otg.ctrl_max_pktsize;
c7e1c270:	e5dc2058 	ldrb	r2, [ip, #88]
	otg.desc.dev.iManufacturer=0x1; /* index of string descriptor */
	otg.desc.dev.iProduct=0x2;	/* index of string descriptor */
	otg.desc.dev.iSerialNumber=0x0;
	otg.desc.dev.bNumConfigurations=0x1;
	if (otg.speed == USB_FULL) {
		otg.desc.dev.bcdUSBL=0x10;
c7e1c274:	03a03010 	moveq	r3, #16	; 0x10
c7e1c278:	05cc3002 	strbeq	r3, [ip, #2]
{
	/* Standard device descriptor */
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
	otg.desc.dev.bDescriptorType=DEVICE_DESCRIPTOR;
	otg.desc.dev.bDeviceClass=0xFF; /* 0x0*/
	otg.desc.dev.bDeviceSubClass=0x0;
c7e1c27c:	e3a04000 	mov	r4, #0	; 0x0
		otg.desc.dev.bcdUSBL=0x00;
		otg.desc.dev.bcdUSBH=0x02;	/* Ver 2.0*/
	}

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
c7e1c280:	e59f3134 	ldr	r3, [pc, #308]	; c7e1c3bc <s3c_usb_set_descriptors+0x198>
}

void s3c_usb_set_descriptors(void)
{
	/* Standard device descriptor */
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
c7e1c284:	e3a01012 	mov	r1, #18	; 0x12
	otg.desc.dev.idProductL=0x34; /*0x00*/
	otg.desc.dev.idProductH=0x12; /*0x64*/
	otg.desc.dev.bcdDeviceL=0x00;
	otg.desc.dev.bcdDeviceH=0x01;
	otg.desc.dev.iManufacturer=0x1; /* index of string descriptor */
	otg.desc.dev.iProduct=0x2;	/* index of string descriptor */
c7e1c288:	e3a06002 	mov	r6, #2	; 0x2
	otg.desc.dev.bDeviceProtocol=0x0;
	otg.desc.dev.bMaxPacketSize0=otg.ctrl_max_pktsize;
	otg.desc.dev.idVendorL=0xE8;	/*0x45;*/
	otg.desc.dev.idVendorH=0x04;	/*0x53;*/
	otg.desc.dev.idProductL=0x34; /*0x00*/
	otg.desc.dev.idProductH=0x12; /*0x64*/
c7e1c28c:	e5cc100b 	strb	r1, [ip, #11]
}

void s3c_usb_set_descriptors(void)
{
	/* Standard device descriptor */
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
c7e1c290:	e5cc1000 	strb	r1, [ip]
	otg.desc.dev.bDescriptorType=DEVICE_DESCRIPTOR;
	otg.desc.dev.bDeviceClass=0xFF; /* 0x0*/
	otg.desc.dev.bDeviceSubClass=0x0;
	otg.desc.dev.bDeviceProtocol=0x0;
	otg.desc.dev.bMaxPacketSize0=otg.ctrl_max_pktsize;
c7e1c294:	e5cc2007 	strb	r2, [ip, #7]
	otg.desc.dev.bcdDeviceL=0x00;
	otg.desc.dev.bcdDeviceH=0x01;
	otg.desc.dev.iManufacturer=0x1; /* index of string descriptor */
	otg.desc.dev.iProduct=0x2;	/* index of string descriptor */
	otg.desc.dev.iSerialNumber=0x0;
	otg.desc.dev.bNumConfigurations=0x1;
c7e1c298:	e5cc0011 	strb	r0, [ip, #17]

void s3c_usb_set_descriptors(void)
{
	/* Standard device descriptor */
	otg.desc.dev.bLength=DEVICE_DESC_SIZE;	/*0x12*/
	otg.desc.dev.bDescriptorType=DEVICE_DESCRIPTOR;
c7e1c29c:	e5cc0001 	strb	r0, [ip, #1]
	otg.desc.dev.bDeviceClass=0xFF; /* 0x0*/
	otg.desc.dev.bDeviceSubClass=0x0;
c7e1c2a0:	e5cc4005 	strb	r4, [ip, #5]
	otg.desc.dev.bDeviceProtocol=0x0;
c7e1c2a4:	e5cc4006 	strb	r4, [ip, #6]
	otg.desc.dev.bMaxPacketSize0=otg.ctrl_max_pktsize;
	otg.desc.dev.idVendorL=0xE8;	/*0x45;*/
	otg.desc.dev.idVendorH=0x04;	/*0x53;*/
	otg.desc.dev.idProductL=0x34; /*0x00*/
	otg.desc.dev.idProductH=0x12; /*0x64*/
	otg.desc.dev.bcdDeviceL=0x00;
c7e1c2a8:	e5cc400c 	strb	r4, [ip, #12]
	otg.desc.dev.bcdDeviceH=0x01;
c7e1c2ac:	e5cc000d 	strb	r0, [ip, #13]
	otg.desc.dev.iManufacturer=0x1; /* index of string descriptor */
c7e1c2b0:	e5cc000e 	strb	r0, [ip, #14]
	otg.desc.dev.iProduct=0x2;	/* index of string descriptor */
c7e1c2b4:	e5cc600f 	strb	r6, [ip, #15]
	otg.desc.dev.iSerialNumber=0x0;
c7e1c2b8:	e5cc4010 	strb	r4, [ip, #16]
	otg.desc.dev.bNumConfigurations=0x1;
	if (otg.speed == USB_FULL) {
		otg.desc.dev.bcdUSBL=0x10;
		otg.desc.dev.bcdUSBH=0x01;	/* Ver 1.10*/
c7e1c2bc:	05cc5003 	strbeq	r5, [ip, #3]
	}
	else {
		otg.desc.dev.bcdUSBL=0x00;
		otg.desc.dev.bcdUSBH=0x02;	/* Ver 2.0*/
c7e1c2c0:	15cc6003 	strbne	r6, [ip, #3]
	if (otg.speed == USB_FULL) {
		otg.desc.dev.bcdUSBL=0x10;
		otg.desc.dev.bcdUSBH=0x01;	/* Ver 1.10*/
	}
	else {
		otg.desc.dev.bcdUSBL=0x00;
c7e1c2c4:	15cc4002 	strbne	r4, [ip, #2]
	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
c7e1c2c8:	e5d3405d 	ldrb	r4, [r3, #93]
	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c2cc:	e5d32061 	ldrb	r2, [r3, #97]
	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
c7e1c2d0:	e5d3005c 	ldrb	r0, [r3, #92]
	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c2d4:	e5d3c060 	ldrb	ip, [r3, #96]
	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
c7e1c2d8:	e5d3505e 	ldrb	r5, [r3, #94]
c7e1c2dc:	e1800404 	orr	r0, r0, r4, lsl #8
	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c2e0:	e18cc402 	orr	ip, ip, r2, lsl #8
	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
c7e1c2e4:	e5d3205f 	ldrb	r2, [r3, #95]
c7e1c2e8:	e1800805 	orr	r0, r0, r5, lsl #16
c7e1c2ec:	e1800c02 	orr	r0, r0, r2, lsl #24
	}

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
	otg.desc.config.wTotalLengthL=CONFIG_DESC_TOTAL_SIZE;
c7e1c2f0:	e3a02020 	mov	r2, #32	; 0x20
	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c2f4:	e5d36062 	ldrb	r6, [r3, #98]
c7e1c2f8:	e5d34063 	ldrb	r4, [r3, #99]
	}

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
	otg.desc.config.wTotalLengthL=CONFIG_DESC_TOTAL_SIZE;
c7e1c2fc:	e5c32014 	strb	r2, [r3, #20]
	otg.desc.config.wTotalLengthH=0;
	otg.desc.config.bNumInterfaces=1;
/* dbg	  descConf.bConfigurationValue=2; // why 2? There's no reason.*/
	otg.desc.config.bConfigurationValue=1;
	otg.desc.config.iConfiguration=0;
	otg.desc.config.bmAttributes=CONF_ATTR_DEFAULT|CONF_ATTR_SELFPOWERED; /* bus powered only.*/
c7e1c300:	e3e0203f 	mvn	r2, #63	; 0x3f
c7e1c304:	e5c32019 	strb	r2, [r3, #25]
	otg.desc.config.maxPower=25; /* draws 50mA current from the USB bus.*/
c7e1c308:	e2822059 	add	r2, r2, #89	; 0x59
	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c30c:	e18cc806 	orr	ip, ip, r6, lsl #16
	otg.desc.config.bNumInterfaces=1;
/* dbg	  descConf.bConfigurationValue=2; // why 2? There's no reason.*/
	otg.desc.config.bConfigurationValue=1;
	otg.desc.config.iConfiguration=0;
	otg.desc.config.bmAttributes=CONF_ATTR_DEFAULT|CONF_ATTR_SELFPOWERED; /* bus powered only.*/
	otg.desc.config.maxPower=25; /* draws 50mA current from the USB bus.*/
c7e1c310:	e5c3201a 	strb	r2, [r3, #26]

	/* Standard interface descriptor */
	otg.desc.intf.bLength=INTERFACE_DESC_SIZE; /* 9*/
	otg.desc.intf.bDescriptorType=INTERFACE_DESCRIPTOR;
c7e1c314:	e3a02004 	mov	r2, #4	; 0x4
	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c318:	e18ccc04 	orr	ip, ip, r4, lsl #24
	otg.desc.config.bmAttributes=CONF_ATTR_DEFAULT|CONF_ATTR_SELFPOWERED; /* bus powered only.*/
	otg.desc.config.maxPower=25; /* draws 50mA current from the USB bus.*/

	/* Standard interface descriptor */
	otg.desc.intf.bLength=INTERFACE_DESC_SIZE; /* 9*/
	otg.desc.intf.bDescriptorType=INTERFACE_DESCRIPTOR;
c7e1c31c:	e5c3201c 	strb	r2, [r3, #28]
	otg.desc.intf.bInterfaceNumber=0x0;
	otg.desc.intf.bAlternateSetting=0x0; /* ?*/
	otg.desc.intf.bNumEndpoints = 2;	/* # of endpoints except EP0*/
	otg.desc.intf.bInterfaceClass=0xff; /* 0x0 ?*/
c7e1c320:	e3e02000 	mvn	r2, #0	; 0x0

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
	otg.desc.config.wTotalLengthL=CONFIG_DESC_TOTAL_SIZE;
	otg.desc.config.wTotalLengthH=0;
c7e1c324:	e3a01000 	mov	r1, #0	; 0x0
		otg.desc.dev.bcdUSBH=0x02;	/* Ver 2.0*/
	}

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
c7e1c328:	e3a04002 	mov	r4, #2	; 0x2
		otg.desc.dev.bcdUSBL=0x00;
		otg.desc.dev.bcdUSBH=0x02;	/* Ver 2.0*/
	}

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
c7e1c32c:	e3a05009 	mov	r5, #9	; 0x9
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
	otg.desc.config.wTotalLengthL=CONFIG_DESC_TOTAL_SIZE;
	otg.desc.config.wTotalLengthH=0;
	otg.desc.config.bNumInterfaces=1;
c7e1c330:	e3a06001 	mov	r6, #1	; 0x1
	otg.desc.intf.bInterfaceSubClass=0x0;
	otg.desc.intf.bInterfaceProtocol=0x0;
	otg.desc.intf.iInterface=0x0;

	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
c7e1c334:	e3a07007 	mov	r7, #7	; 0x7
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
c7e1c338:	e3a0a005 	mov	sl, #5	; 0x5
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
	otg.desc.ep1.wMaxPacketSizeH=(u8)(otg.bulkin_max_pktsize>>8);
c7e1c33c:	e1a09420 	lsr	r9, r0, #8
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
	otg.desc.ep2.wMaxPacketSizeH=(u8)(otg.bulkout_max_pktsize>>8);
c7e1c340:	e1a0b42c 	lsr	fp, ip, #8
	otg.desc.intf.bLength=INTERFACE_DESC_SIZE; /* 9*/
	otg.desc.intf.bDescriptorType=INTERFACE_DESCRIPTOR;
	otg.desc.intf.bInterfaceNumber=0x0;
	otg.desc.intf.bAlternateSetting=0x0; /* ?*/
	otg.desc.intf.bNumEndpoints = 2;	/* # of endpoints except EP0*/
	otg.desc.intf.bInterfaceClass=0xff; /* 0x0 ?*/
c7e1c344:	e5c32020 	strb	r2, [r3, #32]
	otg.desc.intf.iInterface=0x0;

	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
c7e1c348:	e3e0207e 	mvn	r2, #126	; 0x7e
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
	otg.desc.config.wTotalLengthL=CONFIG_DESC_TOTAL_SIZE;
	otg.desc.config.wTotalLengthH=0;
	otg.desc.config.bNumInterfaces=1;
/* dbg	  descConf.bConfigurationValue=2; // why 2? There's no reason.*/
	otg.desc.config.bConfigurationValue=1;
c7e1c34c:	e5c36017 	strb	r6, [r3, #23]
	otg.desc.config.iConfiguration=0;
	otg.desc.config.bmAttributes=CONF_ATTR_DEFAULT|CONF_ATTR_SELFPOWERED; /* bus powered only.*/
	otg.desc.config.maxPower=25; /* draws 50mA current from the USB bus.*/

	/* Standard interface descriptor */
	otg.desc.intf.bLength=INTERFACE_DESC_SIZE; /* 9*/
c7e1c350:	e5c3501b 	strb	r5, [r3, #27]
	otg.desc.intf.iInterface=0x0;

	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
c7e1c354:	e5c32026 	strb	r2, [r3, #38]
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
	otg.desc.ep1.wMaxPacketSizeH=(u8)(otg.bulkin_max_pktsize>>8);
c7e1c358:	e5c39029 	strb	r9, [r3, #41]
	otg.desc.ep1.bInterval=0x0; /* not used */

	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
c7e1c35c:	e5c3702b 	strb	r7, [r3, #43]
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
c7e1c360:	e5c3a02c 	strb	sl, [r3, #44]
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
c7e1c364:	e5c3402e 	strb	r4, [r3, #46]
		otg.desc.dev.bcdUSBL=0x00;
		otg.desc.dev.bcdUSBH=0x02;	/* Ver 2.0*/
	}

	/* Standard configuration descriptor */
	otg.desc.config.bLength=CONFIG_DESC_SIZE; /* 0x9 bytes */
c7e1c368:	e5c35012 	strb	r5, [r3, #18]
	otg.desc.config.bDescriptorType=CONFIGURATION_DESCRIPTOR;
c7e1c36c:	e5c34013 	strb	r4, [r3, #19]
	otg.desc.config.wTotalLengthL=CONFIG_DESC_TOTAL_SIZE;
	otg.desc.config.wTotalLengthH=0;
c7e1c370:	e5c31015 	strb	r1, [r3, #21]
	otg.desc.config.bNumInterfaces=1;
c7e1c374:	e5c36016 	strb	r6, [r3, #22]
/* dbg	  descConf.bConfigurationValue=2; // why 2? There's no reason.*/
	otg.desc.config.bConfigurationValue=1;
	otg.desc.config.iConfiguration=0;
c7e1c378:	e5c31018 	strb	r1, [r3, #24]
	otg.desc.config.maxPower=25; /* draws 50mA current from the USB bus.*/

	/* Standard interface descriptor */
	otg.desc.intf.bLength=INTERFACE_DESC_SIZE; /* 9*/
	otg.desc.intf.bDescriptorType=INTERFACE_DESCRIPTOR;
	otg.desc.intf.bInterfaceNumber=0x0;
c7e1c37c:	e5c3101d 	strb	r1, [r3, #29]
	otg.desc.intf.bAlternateSetting=0x0; /* ?*/
c7e1c380:	e5c3101e 	strb	r1, [r3, #30]
	otg.desc.intf.bNumEndpoints = 2;	/* # of endpoints except EP0*/
c7e1c384:	e5c3401f 	strb	r4, [r3, #31]
	otg.desc.intf.bInterfaceClass=0xff; /* 0x0 ?*/
	otg.desc.intf.bInterfaceSubClass=0x0;
c7e1c388:	e5c31021 	strb	r1, [r3, #33]
	otg.desc.intf.bInterfaceProtocol=0x0;
c7e1c38c:	e5c31022 	strb	r1, [r3, #34]
	otg.desc.intf.iInterface=0x0;
c7e1c390:	e5c31023 	strb	r1, [r3, #35]

	/* Standard endpoint0 descriptor */
	otg.desc.ep1.bLength=ENDPOINT_DESC_SIZE;
c7e1c394:	e5c37024 	strb	r7, [r3, #36]
	otg.desc.ep1.bDescriptorType=ENDPOINT_DESCRIPTOR;
c7e1c398:	e5c3a025 	strb	sl, [r3, #37]
	otg.desc.ep1.bEndpointAddress=BULK_IN_EP|EP_ADDR_IN;
	otg.desc.ep1.bmAttributes=EP_ATTR_BULK;
c7e1c39c:	e5c34027 	strb	r4, [r3, #39]
	otg.desc.ep1.wMaxPacketSizeL=(u8)otg.bulkin_max_pktsize; /* 64*/
c7e1c3a0:	e5c30028 	strb	r0, [r3, #40]
	otg.desc.ep1.wMaxPacketSizeH=(u8)(otg.bulkin_max_pktsize>>8);
	otg.desc.ep1.bInterval=0x0; /* not used */
c7e1c3a4:	e5c3102a 	strb	r1, [r3, #42]

	/* Standard endpoint1 descriptor */
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
c7e1c3a8:	e5c3402d 	strb	r4, [r3, #45]
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
c7e1c3ac:	e5c3c02f 	strb	ip, [r3, #47]
	otg.desc.ep2.wMaxPacketSizeH=(u8)(otg.bulkout_max_pktsize>>8);
	otg.desc.ep2.bInterval=0x0; /* not used */
c7e1c3b0:	e5c31031 	strb	r1, [r3, #49]
	otg.desc.ep2.bLength=ENDPOINT_DESC_SIZE;
	otg.desc.ep2.bDescriptorType=ENDPOINT_DESCRIPTOR;
	otg.desc.ep2.bEndpointAddress=BULK_OUT_EP|EP_ADDR_OUT;
	otg.desc.ep2.bmAttributes=EP_ATTR_BULK;
	otg.desc.ep2.wMaxPacketSizeL=(u8)otg.bulkout_max_pktsize; /* 64*/
	otg.desc.ep2.wMaxPacketSizeH=(u8)(otg.bulkout_max_pktsize>>8);
c7e1c3b4:	e5c3b030 	strb	fp, [r3, #48]
	otg.desc.ep2.bInterval=0x0; /* not used */
}
c7e1c3b8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1c3bc:	c7e42120 	.word	0xc7e42120

c7e1c3c0 <s3c_usb_check_speed>:

void s3c_usb_check_speed(USB_SPEED *speed)
{
	u32 status;

	status = readl(S3C_OTG_DSTS); /* System status read */
c7e1c3c0:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1c3c4:	e5933808 	ldr	r3, [r3, #2056]

	*speed = (USB_SPEED)((status&0x6) >>1);
c7e1c3c8:	e2033006 	and	r3, r3, #6	; 0x6
c7e1c3cc:	e1a030a3 	lsr	r3, r3, #1
c7e1c3d0:	e5803000 	str	r3, [r0]
}
c7e1c3d4:	e12fff1e 	bx	lr

c7e1c3d8 <s3c_usb_clear_dnfile_info>:

void s3c_usb_clear_dnfile_info(void)
{
	otg.dn_addr = 0;
c7e1c3d8:	e59f2034 	ldr	r2, [pc, #52]	; c7e1c414 <s3c_usb_clear_dnfile_info+0x3c>
c7e1c3dc:	e3a03000 	mov	r3, #0	; 0x0
	otg.dn_filesize = 0;
	otg.dn_ptr = 0;
c7e1c3e0:	e5c23077 	strb	r3, [r2, #119]
	*speed = (USB_SPEED)((status&0x6) >>1);
}

void s3c_usb_clear_dnfile_info(void)
{
	otg.dn_addr = 0;
c7e1c3e4:	e5c23064 	strb	r3, [r2, #100]
c7e1c3e8:	e5c23065 	strb	r3, [r2, #101]
c7e1c3ec:	e5c23066 	strb	r3, [r2, #102]
c7e1c3f0:	e5c23067 	strb	r3, [r2, #103]
	otg.dn_filesize = 0;
c7e1c3f4:	e5c23068 	strb	r3, [r2, #104]
c7e1c3f8:	e5c23069 	strb	r3, [r2, #105]
c7e1c3fc:	e5c2306a 	strb	r3, [r2, #106]
c7e1c400:	e5c2306b 	strb	r3, [r2, #107]
	otg.dn_ptr = 0;
c7e1c404:	e5c23074 	strb	r3, [r2, #116]
c7e1c408:	e5c23075 	strb	r3, [r2, #117]
c7e1c40c:	e5c23076 	strb	r3, [r2, #118]
}
c7e1c410:	e12fff1e 	bx	lr
c7e1c414:	c7e42120 	.word	0xc7e42120

c7e1c418 <s3c_usb_clear_upfile_info>:

void s3c_usb_clear_upfile_info(void)
{
	otg.up_addr= 0;
c7e1c418:	e59f2034 	ldr	r2, [pc, #52]	; c7e1c454 <s3c_usb_clear_upfile_info+0x3c>
c7e1c41c:	e3a03000 	mov	r3, #0	; 0x0
	otg.up_size= 0;
	otg.up_ptr = 0;
c7e1c420:	e5c2307b 	strb	r3, [r2, #123]
	otg.dn_ptr = 0;
}

void s3c_usb_clear_upfile_info(void)
{
	otg.up_addr= 0;
c7e1c424:	e5c2306c 	strb	r3, [r2, #108]
c7e1c428:	e5c2306d 	strb	r3, [r2, #109]
c7e1c42c:	e5c2306e 	strb	r3, [r2, #110]
c7e1c430:	e5c2306f 	strb	r3, [r2, #111]
	otg.up_size= 0;
c7e1c434:	e5c23070 	strb	r3, [r2, #112]
c7e1c438:	e5c23071 	strb	r3, [r2, #113]
c7e1c43c:	e5c23072 	strb	r3, [r2, #114]
c7e1c440:	e5c23073 	strb	r3, [r2, #115]
	otg.up_ptr = 0;
c7e1c444:	e5c23078 	strb	r3, [r2, #120]
c7e1c448:	e5c23079 	strb	r3, [r2, #121]
c7e1c44c:	e5c2307a 	strb	r3, [r2, #122]
}
c7e1c450:	e12fff1e 	bx	lr
c7e1c454:	c7e42120 	.word	0xc7e42120

c7e1c458 <s3c_usb_check_setconf>:


int s3c_usb_check_setconf(void)
{
c7e1c458:	e59f3024 	ldr	r3, [pc, #36]	; c7e1c484 <s3c_usb_check_setconf+0x2c>
c7e1c45c:	e5d3207c 	ldrb	r2, [r3, #124]
c7e1c460:	e5d3107d 	ldrb	r1, [r3, #125]
c7e1c464:	e5d3007e 	ldrb	r0, [r3, #126]
c7e1c468:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1c46c:	e5d3307f 	ldrb	r3, [r3, #127]
c7e1c470:	e1822800 	orr	r2, r2, r0, lsl #16
c7e1c474:	e1923c03 	orrs	r3, r2, r3, lsl #24
	if (otg.set_config == 0)
		return FALSE;
	else
		return TRUE;
}
c7e1c478:	03a00000 	moveq	r0, #0	; 0x0
c7e1c47c:	13a00001 	movne	r0, #1	; 0x1
c7e1c480:	e12fff1e 	bx	lr
c7e1c484:	c7e42120 	.word	0xc7e42120

c7e1c488 <s3c_usb_set_opmode>:

void s3c_usb_set_opmode(USB_OPMODE mode)
{
c7e1c488:	e92d4070 	push	{r4, r5, r6, lr}
	otg.op_mode = mode;
c7e1c48c:	e59f40b8 	ldr	r4, [pc, #184]	; c7e1c54c <s3c_usb_set_opmode+0xc4>
c7e1c490:	e1a01c20 	lsr	r1, r0, #24
c7e1c494:	e1a03420 	lsr	r3, r0, #8
c7e1c498:	e1a02820 	lsr	r2, r0, #16
c7e1c49c:	e5c43051 	strb	r3, [r4, #81]
c7e1c4a0:	e5c42052 	strb	r2, [r4, #82]
c7e1c4a4:	e5c41053 	strb	r1, [r4, #83]
c7e1c4a8:	e5c40050 	strb	r0, [r4, #80]

	writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
c7e1c4ac:	e59f309c 	ldr	r3, [pc, #156]	; c7e1c550 <s3c_usb_set_opmode+0xc8>
c7e1c4b0:	e3a0631f 	mov	r6, #2080374784	; 0x7c000000
c7e1c4b4:	e5863018 	str	r3, [r6, #24]
		INT_RESET|INT_SUSPEND|INT_RX_FIFO_NOT_EMPTY,
		S3C_OTG_GINTMSK); /*gint unmask */

	writel(MODE_SLAVE|BURST_SINGLE|GBL_INT_UNMASK, S3C_OTG_GAHBCFG);

	s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c4b8:	e5d43061 	ldrb	r3, [r4, #97]
c7e1c4bc:	e5d42060 	ldrb	r2, [r4, #96]
c7e1c4c0:	e5d41062 	ldrb	r1, [r4, #98]
c7e1c4c4:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1c4c8:	e5d43063 	ldrb	r3, [r4, #99]

	writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
		INT_RESET|INT_SUSPEND|INT_RX_FIFO_NOT_EMPTY,
		S3C_OTG_GINTMSK); /*gint unmask */

	writel(MODE_SLAVE|BURST_SINGLE|GBL_INT_UNMASK, S3C_OTG_GAHBCFG);
c7e1c4cc:	e3a05001 	mov	r5, #1	; 0x1

	s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c4d0:	e1822801 	orr	r2, r2, r1, lsl #16
c7e1c4d4:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e1c4d8:	e1a01005 	mov	r1, r5
c7e1c4dc:	e3a00002 	mov	r0, #2	; 0x2

	writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
		INT_RESET|INT_SUSPEND|INT_RX_FIFO_NOT_EMPTY,
		S3C_OTG_GINTMSK); /*gint unmask */

	writel(MODE_SLAVE|BURST_SINGLE|GBL_INT_UNMASK, S3C_OTG_GAHBCFG);
c7e1c4e0:	e5865008 	str	r5, [r6, #8]

	s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c4e4:	ebfff752 	bl	c7e1a234 <s3c_usb_set_outep_xfersize>
	s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1, 0);
c7e1c4e8:	e1a01005 	mov	r1, r5
c7e1c4ec:	e3a02000 	mov	r2, #0	; 0x0
c7e1c4f0:	e3a00002 	mov	r0, #2	; 0x2
c7e1c4f4:	ebfff741 	bl	c7e1a200 <s3c_usb_set_inep_xfersize>

	/*bulk out ep enable, clear nak, bulk, usb active, next ep3, max pkt */
	writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1c4f8:	e5d43061 	ldrb	r3, [r4, #97]
c7e1c4fc:	e5d42060 	ldrb	r2, [r4, #96]
c7e1c500:	e5d41062 	ldrb	r1, [r4, #98]
c7e1c504:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1c508:	e5d43063 	ldrb	r3, [r4, #99]
c7e1c50c:	e1822801 	orr	r2, r2, r1, lsl #16
c7e1c510:	e1822c03 	orr	r2, r2, r3, lsl #24
c7e1c514:	e3822321 	orr	r2, r2, #-2080374784	; 0x84000000
c7e1c518:	e3822922 	orr	r2, r2, #557056	; 0x88000
		S3C_OTG_DOEPCTL_OUT);

	/*bulk in ep enable, clear nak, bulk, usb active, next ep1, max pkt */
	writel(0u<<31|1<<26|2<<18|1<<15|otg.bulkin_max_pktsize<<0,
c7e1c51c:	e5d4105d 	ldrb	r1, [r4, #93]
c7e1c520:	e5d4305c 	ldrb	r3, [r4, #92]
c7e1c524:	e5d4005e 	ldrb	r0, [r4, #94]
c7e1c528:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1c52c:	e5d4105f 	ldrb	r1, [r4, #95]
c7e1c530:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1c534:	e1833c01 	orr	r3, r3, r1, lsl #24
c7e1c538:	e3833301 	orr	r3, r3, #67108864	; 0x4000000

	s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
	s3c_usb_set_inep_xfersize(EP_TYPE_BULK, 1, 0);

	/*bulk out ep enable, clear nak, bulk, usb active, next ep3, max pkt */
	writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1c53c:	e5862b40 	str	r2, [r6, #2880]
		S3C_OTG_DOEPCTL_OUT);

	/*bulk in ep enable, clear nak, bulk, usb active, next ep1, max pkt */
	writel(0u<<31|1<<26|2<<18|1<<15|otg.bulkin_max_pktsize<<0,
c7e1c540:	e3833922 	orr	r3, r3, #557056	; 0x88000
c7e1c544:	e5863920 	str	r3, [r6, #2336]
		S3C_OTG_DIEPCTL_IN);
}
c7e1c548:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1c54c:	c7e42120 	.word	0xc7e42120
c7e1c550:	800c3810 	.word	0x800c3810

c7e1c554 <s3c_usb_reset>:

void s3c_usb_reset(void)
{
c7e1c554:	e92d4010 	push	{r4, lr}
	s3c_usb_set_all_outep_nak();
c7e1c558:	ebfffed9 	bl	c7e1c0c4 <s3c_usb_set_all_outep_nak>

	otg.ep0_state = EP0_STATE_INIT;
c7e1c55c:	e59f2050 	ldr	r2, [pc, #80]	; c7e1c5b4 <s3c_usb_reset+0x60>
c7e1c560:	e3a03000 	mov	r3, #0	; 0x0
c7e1c564:	e5c2304b 	strb	r3, [r2, #75]
c7e1c568:	e5c23048 	strb	r3, [r2, #72]
c7e1c56c:	e5c23049 	strb	r3, [r2, #73]
c7e1c570:	e5c2304a 	strb	r3, [r2, #74]
	writel(((1<<BULK_OUT_EP)|(1<<CONTROL_EP))<<16|((1<<BULK_IN_EP)|(1<<CONTROL_EP)),
c7e1c574:	e59f303c 	ldr	r3, [pc, #60]	; c7e1c5b8 <s3c_usb_reset+0x64>
c7e1c578:	e3a0431f 	mov	r4, #2080374784	; 0x7c000000
c7e1c57c:	e584381c 	str	r3, [r4, #2076]
		S3C_OTG_DAINTMSK);
	writel(CTRL_OUT_EP_SETUP_PHASE_DONE|AHB_ERROR|TRANSFER_DONE,
c7e1c580:	e3a0300d 	mov	r3, #13	; 0xd
c7e1c584:	e5843814 	str	r3, [r4, #2068]
		S3C_OTG_DOEPMSK);
	writel(INTKN_TXFEMP|NON_ISO_IN_EP_TIMEOUT|AHB_ERROR|TRANSFER_DONE,
c7e1c588:	e2833010 	add	r3, r3, #16	; 0x10
c7e1c58c:	e5843810 	str	r3, [r4, #2064]
		S3C_OTG_DIEPMSK);

	/* Rx FIFO Size */
	writel(RX_FIFO_SIZE, S3C_OTG_GRXFSIZ);
c7e1c590:	e3a03c02 	mov	r3, #512	; 0x200
c7e1c594:	e5843024 	str	r3, [r4, #36]

	/* Non Periodic Tx FIFO Size */
	writel(NPTX_FIFO_SIZE<<16| NPTX_FIFO_START_ADDR<<0, S3C_OTG_GNPTXFSIZ);
c7e1c598:	e2833402 	add	r3, r3, #33554432	; 0x2000000
c7e1c59c:	e5843028 	str	r3, [r4, #40]

	s3c_usb_clear_all_outep_nak();
c7e1c5a0:	ebfffed1 	bl	c7e1c0ec <s3c_usb_clear_all_outep_nak>

	/*clear device address */
	writel(readl(S3C_OTG_DCFG)&~(0x7f<<4), S3C_OTG_DCFG);
c7e1c5a4:	e5943800 	ldr	r3, [r4, #2048]
c7e1c5a8:	e3c33e7f 	bic	r3, r3, #2032	; 0x7f0
c7e1c5ac:	e5843800 	str	r3, [r4, #2048]

	if(SUSPEND_RESUME_ON) {
		writel(readl(S3C_OTG_PCGCCTRL)&~(1<<0), S3C_OTG_PCGCCTRL);
	}
}
c7e1c5b0:	e8bd8010 	pop	{r4, pc}
c7e1c5b4:	c7e42120 	.word	0xc7e42120
c7e1c5b8:	00050003 	.word	0x00050003

c7e1c5bc <s3c_usb_set_init>:
int s3c_usb_set_init(void)
{
	u32 status;

	status = readl(S3C_OTG_DSTS); /* System status read */
c7e1c5bc:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
	if(SUSPEND_RESUME_ON) {
		writel(readl(S3C_OTG_PCGCCTRL)&~(1<<0), S3C_OTG_PCGCCTRL);
	}
}
int s3c_usb_set_init(void)
{
c7e1c5c0:	e92d4010 	push	{r4, lr}
	u32 status;

	status = readl(S3C_OTG_DSTS); /* System status read */
c7e1c5c4:	e5933808 	ldr	r3, [r3, #2056]

	/* Set if Device is High speed or Full speed */
	if (((status&0x6) >>1) == USB_HIGH) {
c7e1c5c8:	e2033006 	and	r3, r3, #6	; 0x6
c7e1c5cc:	e1b000a3 	lsrs	r0, r3, #1
c7e1c5d0:	0a000001 	beq	c7e1c5dc <s3c_usb_set_init+0x20>
		DBG_SETUP1("High Speed Detection\n");
		s3c_usb_set_max_pktsize(USB_HIGH);
	}
	else if(((status&0x6) >>1) == USB_FULL) {
c7e1c5d4:	e3500001 	cmp	r0, #1	; 0x1
c7e1c5d8:	1a000008 	bne	c7e1c600 <s3c_usb_set_init+0x44>
		DBG_SETUP1("Full Speed Detec tion\n");
		s3c_usb_set_max_pktsize(USB_FULL);
c7e1c5dc:	ebfffecc 	bl	c7e1c114 <s3c_usb_set_max_pktsize>
	else {
		printf("**** Error:Neither High_Speed nor Full_Speed\n");
		return FALSE;
	}

	s3c_usb_set_endpoint();
c7e1c5e0:	ebfffef7 	bl	c7e1c1c4 <s3c_usb_set_endpoint>
	s3c_usb_set_descriptors();
c7e1c5e4:	ebffff0e 	bl	c7e1c224 <s3c_usb_set_descriptors>
	s3c_usb_clear_dnfile_info();
c7e1c5e8:	ebffff7a 	bl	c7e1c3d8 <s3c_usb_clear_dnfile_info>
	s3c_usb_set_opmode(op_mode);
c7e1c5ec:	e59f301c 	ldr	r3, [pc, #28]	; c7e1c610 <s3c_usb_set_init+0x54>
c7e1c5f0:	e5930098 	ldr	r0, [r3, #152]
c7e1c5f4:	ebffffa3 	bl	c7e1c488 <s3c_usb_set_opmode>
c7e1c5f8:	e3a00001 	mov	r0, #1	; 0x1

	return TRUE;
}
c7e1c5fc:	e8bd8010 	pop	{r4, pc}
	else if(((status&0x6) >>1) == USB_FULL) {
		DBG_SETUP1("Full Speed Detec tion\n");
		s3c_usb_set_max_pktsize(USB_FULL);
	}
	else {
		printf("**** Error:Neither High_Speed nor Full_Speed\n");
c7e1c600:	e59f000c 	ldr	r0, [pc, #12]	; c7e1c614 <s3c_usb_set_init+0x58>
c7e1c604:	ebffb113 	bl	c7e08a58 <printf>
c7e1c608:	e3a00000 	mov	r0, #0	; 0x0
c7e1c60c:	e8bd8010 	pop	{r4, pc}
c7e1c610:	c7e42120 	.word	0xc7e42120
c7e1c614:	c7e33e85 	.word	0xc7e33e85

c7e1c618 <s3c_usb_verify_checksum>:

	printf("]\n");
}

void s3c_usb_verify_checksum(void)
{
c7e1c618:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	u8 *cs_start, *cs_end;
	u16 dnCS;
	u16 checkSum;

	printf("Checksum is being calculated.");
c7e1c61c:	e59f00a4 	ldr	r0, [pc, #164]	; c7e1c6c8 <s3c_usb_verify_checksum+0xb0>
c7e1c620:	ebffb10c 	bl	c7e08a58 <printf>

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
c7e1c624:	e59f30a0 	ldr	r3, [pc, #160]	; c7e1c6cc <s3c_usb_verify_checksum+0xb4>
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
c7e1c628:	e3a06000 	mov	r6, #0	; 0x0
c7e1c62c:	e5d30069 	ldrb	r0, [r3, #105]
	u16 checkSum;

	printf("Checksum is being calculated.");

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
c7e1c630:	e5d31064 	ldrb	r1, [r3, #100]
c7e1c634:	e5d3c065 	ldrb	ip, [r3, #101]
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
c7e1c638:	e5d32068 	ldrb	r2, [r3, #104]
	u16 checkSum;

	printf("Checksum is being calculated.");

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
c7e1c63c:	e5d34066 	ldrb	r4, [r3, #102]
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
c7e1c640:	e5d3506a 	ldrb	r5, [r3, #106]
c7e1c644:	e1822400 	orr	r2, r2, r0, lsl #8
	u16 checkSum;

	printf("Checksum is being calculated.");

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
c7e1c648:	e181140c 	orr	r1, r1, ip, lsl #8
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
c7e1c64c:	e5d3006b 	ldrb	r0, [r3, #107]
	u16 checkSum;

	printf("Checksum is being calculated.");

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
c7e1c650:	e5d33067 	ldrb	r3, [r3, #103]
c7e1c654:	e1811804 	orr	r1, r1, r4, lsl #16
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
c7e1c658:	e1822805 	orr	r2, r2, r5, lsl #16
	u16 checkSum;

	printf("Checksum is being calculated.");

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
c7e1c65c:	e1814c03 	orr	r4, r1, r3, lsl #24
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
c7e1c660:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1c664:	e0847002 	add	r7, r4, r2
c7e1c668:	e247a00a 	sub	sl, r7, #10	; 0xa
c7e1c66c:	ea000009 	b	c7e1c698 <s3c_usb_verify_checksum+0x80>
	checkSum = 0;
	while(cs_start < cs_end) {
		checkSum += *cs_start++;
c7e1c670:	e4d45001 	ldrb	r5, [r4], #1
		if(((u32)cs_start&0xfffff)==0) printf(".");
c7e1c674:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
c7e1c678:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
c7e1c67c:	e3530000 	cmp	r3, #0	; 0x0
c7e1c680:	1a000001 	bne	c7e1c68c <s3c_usb_verify_checksum+0x74>
c7e1c684:	e59f0044 	ldr	r0, [pc, #68]	; c7e1c6d0 <s3c_usb_verify_checksum+0xb8>
c7e1c688:	ebffb0f2 	bl	c7e08a58 <printf>
	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
	checkSum = 0;
	while(cs_start < cs_end) {
		checkSum += *cs_start++;
c7e1c68c:	e0863005 	add	r3, r6, r5
c7e1c690:	e1a03803 	lsl	r3, r3, #16
c7e1c694:	e1a06823 	lsr	r6, r3, #16

	/* checksum calculation */
	cs_start = (u8*)otg.dn_addr;
	cs_end = (u8*)(otg.dn_addr+otg.dn_filesize-10);
	checkSum = 0;
	while(cs_start < cs_end) {
c7e1c698:	e154000a 	cmp	r4, sl
c7e1c69c:	3afffff3 	bcc	c7e1c670 <s3c_usb_verify_checksum+0x58>
		checkSum += *cs_start++;
		if(((u32)cs_start&0xfffff)==0) printf(".");
	}

	dnCS = *(u16 *)cs_end;
c7e1c6a0:	e15720ba 	ldrh	r2, [r7, #-10]

	if (checkSum == dnCS)
c7e1c6a4:	e1560002 	cmp	r6, r2
	{
		printf("\nChecksum O.K.\n");
c7e1c6a8:	059f0024 	ldreq	r0, [pc, #36]	; c7e1c6d4 <s3c_usb_verify_checksum+0xbc>
		if(((u32)cs_start&0xfffff)==0) printf(".");
	}

	dnCS = *(u16 *)cs_end;

	if (checkSum == dnCS)
c7e1c6ac:	0a000003 	beq	c7e1c6c0 <s3c_usb_verify_checksum+0xa8>
	{
		printf("\nChecksum O.K.\n");
	}
	else
	{
		printf("\nChecksum Value => MEM:%x DNW:%x\n",checkSum,dnCS);
c7e1c6b0:	e1a01006 	mov	r1, r6
c7e1c6b4:	e59f001c 	ldr	r0, [pc, #28]	; c7e1c6d8 <s3c_usb_verify_checksum+0xc0>
c7e1c6b8:	ebffb0e6 	bl	c7e08a58 <printf>
		printf("Checksum failed.\n\n");
c7e1c6bc:	e59f0018 	ldr	r0, [pc, #24]	; c7e1c6dc <s3c_usb_verify_checksum+0xc4>
	}

}
c7e1c6c0:	e8bd44f0 	pop	{r4, r5, r6, r7, sl, lr}
		printf("\nChecksum O.K.\n");
	}
	else
	{
		printf("\nChecksum Value => MEM:%x DNW:%x\n",checkSum,dnCS);
		printf("Checksum failed.\n\n");
c7e1c6c4:	eaffb0e3 	b	c7e08a58 <printf>
c7e1c6c8:	c7e33eb3 	.word	0xc7e33eb3
c7e1c6cc:	c7e42120 	.word	0xc7e42120
c7e1c6d0:	c7e35099 	.word	0xc7e35099
c7e1c6d4:	c7e33ed1 	.word	0xc7e33ed1
c7e1c6d8:	c7e33ee1 	.word	0xc7e33ee1
c7e1c6dc:	c7e33f03 	.word	0xc7e33f03

c7e1c6e0 <s3c_usb_download_continue>:
			S3C_OTG_DOEPCTL_OUT);
	}
}

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
c7e1c6e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if (otg.op_mode == USB_CPU) {
c7e1c6e4:	e59f9158 	ldr	r9, [pc, #344]	; c7e1c844 <s3c_usb_download_continue+0x164>
			S3C_OTG_DOEPCTL_OUT);
	}
}

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
c7e1c6e8:	e1a04000 	mov	r4, r0
	if (otg.op_mode == USB_CPU) {
c7e1c6ec:	e5d92051 	ldrb	r2, [r9, #81]
c7e1c6f0:	e5d93050 	ldrb	r3, [r9, #80]
c7e1c6f4:	e5d91052 	ldrb	r1, [r9, #82]
c7e1c6f8:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1c6fc:	e5d92053 	ldrb	r2, [r9, #83]
c7e1c700:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1c704:	e1932c02 	orrs	r2, r3, r2, lsl #24
c7e1c708:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
c7e1c70c:	e5d93075 	ldrb	r3, [r9, #117]
c7e1c710:	e5d90074 	ldrb	r0, [r9, #116]
c7e1c714:	e5d92076 	ldrb	r2, [r9, #118]
c7e1c718:	e1800403 	orr	r0, r0, r3, lsl #8
c7e1c71c:	e5d93077 	ldrb	r3, [r9, #119]
c7e1c720:	e1800802 	orr	r0, r0, r2, lsl #16
c7e1c724:	e1800c03 	orr	r0, r0, r3, lsl #24
c7e1c728:	e1a01004 	mov	r1, r4
c7e1c72c:	ebfff6f9 	bl	c7e1a318 <s3c_usb_read_out_fifo>
		otg.dn_ptr += fifo_cnt_byte;
c7e1c730:	e5d92075 	ldrb	r2, [r9, #117]
c7e1c734:	e5d93074 	ldrb	r3, [r9, #116]
c7e1c738:	e5d90076 	ldrb	r0, [r9, #118]
c7e1c73c:	e5d9c077 	ldrb	ip, [r9, #119]
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c740:	e5d91061 	ldrb	r1, [r9, #97]

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
	if (otg.op_mode == USB_CPU) {
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
		otg.dn_ptr += fifo_cnt_byte;
c7e1c744:	e1833402 	orr	r3, r3, r2, lsl #8
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c748:	e5d92060 	ldrb	r2, [r9, #96]

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
	if (otg.op_mode == USB_CPU) {
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
		otg.dn_ptr += fifo_cnt_byte;
c7e1c74c:	e1833800 	orr	r3, r3, r0, lsl #16
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c750:	e5d90062 	ldrb	r0, [r9, #98]

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
	if (otg.op_mode == USB_CPU) {
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
		otg.dn_ptr += fifo_cnt_byte;
c7e1c754:	e1833c0c 	orr	r3, r3, ip, lsl #24
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c758:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1c75c:	e5d91063 	ldrb	r1, [r9, #99]

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
	if (otg.op_mode == USB_CPU) {
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
		otg.dn_ptr += fifo_cnt_byte;
c7e1c760:	e0833004 	add	r3, r3, r4
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c764:	e1822800 	orr	r2, r2, r0, lsl #16

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
	if (otg.op_mode == USB_CPU) {
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
		otg.dn_ptr += fifo_cnt_byte;
c7e1c768:	e1a05c23 	lsr	r5, r3, #24
c7e1c76c:	e1a0c423 	lsr	ip, r3, #8
c7e1c770:	e1a04823 	lsr	r4, r3, #16
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c774:	e1822c01 	orr	r2, r2, r1, lsl #24
c7e1c778:	e3a00002 	mov	r0, #2	; 0x2
c7e1c77c:	e3a01001 	mov	r1, #1	; 0x1

void s3c_usb_download_continue(u32 fifo_cnt_byte)
{
	if (otg.op_mode == USB_CPU) {
		s3c_usb_read_out_fifo((u8 *)otg.dn_ptr, fifo_cnt_byte);
		otg.dn_ptr += fifo_cnt_byte;
c7e1c780:	e5c93074 	strb	r3, [r9, #116]
c7e1c784:	e5c9c075 	strb	ip, [r9, #117]
c7e1c788:	e5c94076 	strb	r4, [r9, #118]
c7e1c78c:	e5c95077 	strb	r5, [r9, #119]
		DBG_BULK1("downloadFileSize!=0, 2nd BYTE_READ_CNT_REG = 0x%x, m_pDownPt = 0x%x\n",
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);
c7e1c790:	ebfff6a7 	bl	c7e1a234 <s3c_usb_set_outep_xfersize>

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1c794:	e5d93061 	ldrb	r3, [r9, #97]
c7e1c798:	e5d91060 	ldrb	r1, [r9, #96]
c7e1c79c:	e5d92062 	ldrb	r2, [r9, #98]
c7e1c7a0:	e1811403 	orr	r1, r1, r3, lsl #8
c7e1c7a4:	e5d93063 	ldrb	r3, [r9, #99]
c7e1c7a8:	e1811802 	orr	r1, r1, r2, lsl #16
c7e1c7ac:	e1811c03 	orr	r1, r1, r3, lsl #24
c7e1c7b0:	e3811321 	orr	r1, r1, #-2080374784	; 0x84000000
c7e1c7b4:	e3811922 	orr	r1, r1, #557056	; 0x88000
			S3C_OTG_DOEPCTL_OUT);

		/* USB format : addr(4)+size(4)+data(n)+cs(2) */
		if (((u32)otg.dn_ptr - otg.dn_addr) >= (otg.dn_filesize - 8)) {
c7e1c7b8:	e5d95065 	ldrb	r5, [r9, #101]
c7e1c7bc:	e5d94069 	ldrb	r4, [r9, #105]
c7e1c7c0:	e5d9c075 	ldrb	ip, [r9, #117]
c7e1c7c4:	e5d90064 	ldrb	r0, [r9, #100]
c7e1c7c8:	e5d93068 	ldrb	r3, [r9, #104]
c7e1c7cc:	e5d92074 	ldrb	r2, [r9, #116]
c7e1c7d0:	e5d96066 	ldrb	r6, [r9, #102]
c7e1c7d4:	e5d9706a 	ldrb	r7, [r9, #106]
c7e1c7d8:	e5d9a076 	ldrb	sl, [r9, #118]
c7e1c7dc:	e1800405 	orr	r0, r0, r5, lsl #8
c7e1c7e0:	e1833404 	orr	r3, r3, r4, lsl #8
c7e1c7e4:	e182240c 	orr	r2, r2, ip, lsl #8
c7e1c7e8:	e5d9406b 	ldrb	r4, [r9, #107]
c7e1c7ec:	e5d9c067 	ldrb	ip, [r9, #103]
c7e1c7f0:	e5d95077 	ldrb	r5, [r9, #119]
c7e1c7f4:	e1833807 	orr	r3, r3, r7, lsl #16
c7e1c7f8:	e1800806 	orr	r0, r0, r6, lsl #16
c7e1c7fc:	e182280a 	orr	r2, r2, sl, lsl #16
c7e1c800:	e1800c0c 	orr	r0, r0, ip, lsl #24
c7e1c804:	e1822c05 	orr	r2, r2, r5, lsl #24
c7e1c808:	e183cc04 	orr	ip, r3, r4, lsl #24
c7e1c80c:	e24c3008 	sub	r3, ip, #8	; 0x8
c7e1c810:	e0602002 	rsb	r2, r0, r2
c7e1c814:	e1520003 	cmp	r2, r3
				fifo_cnt_byte, otg.dn_ptr);

		s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1, otg.bulkout_max_pktsize);

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1c818:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1c81c:	e5831b40 	str	r1, [r3, #2880]
			S3C_OTG_DOEPCTL_OUT);

		/* USB format : addr(4)+size(4)+data(n)+cs(2) */
		if (((u32)otg.dn_ptr - otg.dn_addr) >= (otg.dn_filesize - 8)) {
c7e1c820:	38bd87f0 	popcc	{r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Download Done!! Download Address: 0x%x, Download Filesize:0x%x\n",
c7e1c824:	e1a01000 	mov	r1, r0
c7e1c828:	e24c200a 	sub	r2, ip, #10	; 0xa
c7e1c82c:	e59f0014 	ldr	r0, [pc, #20]	; c7e1c848 <s3c_usb_download_continue+0x168>
c7e1c830:	ebffb088 	bl	c7e08a58 <printf>
				otg.dn_addr, (otg.dn_filesize-10));

#ifdef USB_CHECKSUM_EN
			s3c_usb_verify_checksum();
c7e1c834:	ebffff77 	bl	c7e1c618 <s3c_usb_verify_checksum>
#endif
			s3c_receive_done = 1;
c7e1c838:	e3a03001 	mov	r3, #1	; 0x1
c7e1c83c:	e589309c 	str	r3, [r9, #156]
c7e1c840:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e1c844:	c7e42120 	.word	0xc7e42120
c7e1c848:	c7e33f16 	.word	0xc7e33f16

c7e1c84c <s3c_usb_int_bulkout>:

	}\
}

void s3c_usb_int_bulkout(u32 fifo_cnt_byte)
{
c7e1c84c:	e92d4010 	push	{r4, lr}
	DBG_BULK0("Bulk Out Function : otg.dn_filesize=0x%x\n", otg.dn_filesize);
	if (otg.dn_filesize==0) {
c7e1c850:	e59f2040 	ldr	r2, [pc, #64]	; c7e1c898 <s3c_usb_int_bulkout+0x4c>

	}\
}

void s3c_usb_int_bulkout(u32 fifo_cnt_byte)
{
c7e1c854:	e1a04000 	mov	r4, r0
	DBG_BULK0("Bulk Out Function : otg.dn_filesize=0x%x\n", otg.dn_filesize);
	if (otg.dn_filesize==0) {
c7e1c858:	e5d23068 	ldrb	r3, [r2, #104]
c7e1c85c:	e5d21069 	ldrb	r1, [r2, #105]
c7e1c860:	e5d2c06a 	ldrb	ip, [r2, #106]
c7e1c864:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1c868:	e5d2206b 	ldrb	r2, [r2, #107]
c7e1c86c:	e183380c 	orr	r3, r3, ip, lsl #16
c7e1c870:	e1932c02 	orrs	r2, r3, r2, lsl #24
c7e1c874:	1a000005 	bne	c7e1c890 <s3c_usb_int_bulkout+0x44>
		if (fifo_cnt_byte == 10) {
c7e1c878:	e350000a 	cmp	r0, #10	; 0xa
c7e1c87c:	1a000001 	bne	c7e1c888 <s3c_usb_int_bulkout+0x3c>
			s3c_usb_download_start(fifo_cnt_byte);
		}
	} else {
		s3c_usb_download_continue(fifo_cnt_byte);
	}
}
c7e1c880:	e8bd4010 	pop	{r4, lr}
void s3c_usb_int_bulkout(u32 fifo_cnt_byte)
{
	DBG_BULK0("Bulk Out Function : otg.dn_filesize=0x%x\n", otg.dn_filesize);
	if (otg.dn_filesize==0) {
		if (fifo_cnt_byte == 10) {
			s3c_usb_upload_start();
c7e1c884:	eafffc98 	b	c7e1baec <s3c_usb_upload_start>
			s3c_usb_download_start(fifo_cnt_byte);
		}
	} else {
		s3c_usb_download_continue(fifo_cnt_byte);
	}
}
c7e1c888:	e8bd4010 	pop	{r4, lr}
	DBG_BULK0("Bulk Out Function : otg.dn_filesize=0x%x\n", otg.dn_filesize);
	if (otg.dn_filesize==0) {
		if (fifo_cnt_byte == 10) {
			s3c_usb_upload_start();
		} else {
			s3c_usb_download_start(fifo_cnt_byte);
c7e1c88c:	eafffd2d 	b	c7e1bd48 <s3c_usb_download_start>
		}
	} else {
		s3c_usb_download_continue(fifo_cnt_byte);
	}
}
c7e1c890:	e8bd4010 	pop	{r4, lr}
			s3c_usb_upload_start();
		} else {
			s3c_usb_download_start(fifo_cnt_byte);
		}
	} else {
		s3c_usb_download_continue(fifo_cnt_byte);
c7e1c894:	eaffff91 	b	c7e1c6e0 <s3c_usb_download_continue>
c7e1c898:	c7e42120 	.word	0xc7e42120

c7e1c89c <s3c_usb_pkt_receive>:

	return TRUE;
}

void s3c_usb_pkt_receive(void)
{
c7e1c89c:	e92d4010 	push	{r4, lr}
	u32 rx_status;
	u32 fifo_cnt_byte;

	rx_status = readl(S3C_OTG_GRXSTSP);
c7e1c8a0:	e3a0431f 	mov	r4, #2080374784	; 0x7c000000
c7e1c8a4:	e5941020 	ldr	r1, [r4, #32]
	DBG_SETUP0("S3C_OTG_GRXSTSP = 0x%x\n", rx_status);

	if ((rx_status & (0xf<<17)) == SETUP_PKT_RECEIVED) {
c7e1c8a8:	e201381e 	and	r3, r1, #1966080	; 0x1e0000
c7e1c8ac:	e3530703 	cmp	r3, #786432	; 0xc0000
c7e1c8b0:	1a000001 	bne	c7e1c8bc <s3c_usb_pkt_receive+0x20>
		DBG_SETUP1("SETUP_TRANSACTION_COMPLETED\n");

	} else {
		DBG_SETUP1("Reserved\n");
	}
}
c7e1c8b4:	e8bd4010 	pop	{r4, lr}
	rx_status = readl(S3C_OTG_GRXSTSP);
	DBG_SETUP0("S3C_OTG_GRXSTSP = 0x%x\n", rx_status);

	if ((rx_status & (0xf<<17)) == SETUP_PKT_RECEIVED) {
		DBG_SETUP1("SETUP_PKT_RECEIVED\n");
		s3c_usb_ep0_int_hndlr();
c7e1c8b8:	eafff7c0 	b	c7e1a7c0 <s3c_usb_ep0_int_hndlr>

	} else if ((rx_status & (0xf<<17)) == OUT_PKT_RECEIVED) {
c7e1c8bc:	e3530701 	cmp	r3, #262144	; 0x40000
c7e1c8c0:	18bd8010 	popne	{r4, pc}
		fifo_cnt_byte = (rx_status & 0x7ff0)>>4;
c7e1c8c4:	e59f3048 	ldr	r3, [pc, #72]	; c7e1c914 <s3c_usb_pkt_receive+0x78>
c7e1c8c8:	e0013003 	and	r3, r1, r3
		DBG_SETUP1("OUT_PKT_RECEIVED\n");

		if((rx_status & BULK_OUT_EP)&&(fifo_cnt_byte)) {
c7e1c8cc:	e2532000 	subs	r2, r3, #0	; 0x0
c7e1c8d0:	13a02001 	movne	r2, #1	; 0x1
c7e1c8d4:	e01220a1 	ands	r2, r2, r1, lsr #1
c7e1c8d8:	e1a00223 	lsr	r0, r3, #4
c7e1c8dc:	08bd8010 	popeq	{r4, pc}
			s3c_usb_int_bulkout(fifo_cnt_byte);
c7e1c8e0:	ebffffd9 	bl	c7e1c84c <s3c_usb_int_bulkout>
			if( otg.op_mode == USB_CPU )
c7e1c8e4:	e59f302c 	ldr	r3, [pc, #44]	; c7e1c918 <s3c_usb_pkt_receive+0x7c>
c7e1c8e8:	e5d32050 	ldrb	r2, [r3, #80]
c7e1c8ec:	e5d31051 	ldrb	r1, [r3, #81]
c7e1c8f0:	e5d30052 	ldrb	r0, [r3, #82]
c7e1c8f4:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1c8f8:	e5d33053 	ldrb	r3, [r3, #83]
c7e1c8fc:	e1822800 	orr	r2, r2, r0, lsl #16
c7e1c900:	e1923c03 	orrs	r3, r2, r3, lsl #24
c7e1c904:	18bd8010 	popne	{r4, pc}
				writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|
c7e1c908:	e59f300c 	ldr	r3, [pc, #12]	; c7e1c91c <s3c_usb_pkt_receive+0x80>
c7e1c90c:	e5843018 	str	r3, [r4, #24]
c7e1c910:	e8bd8010 	pop	{r4, pc}
c7e1c914:	00007ff0 	.word	0x00007ff0
c7e1c918:	c7e42120 	.word	0xc7e42120
c7e1c91c:	800c3810 	.word	0x800c3810

c7e1c920 <s3c_usb_print_pkt>:
	/* dont used in usb high speed, but used in common file cmd_usbd.c  */
	return 0;
}

void s3c_usb_print_pkt(u8 *pt, u8 count)
{
c7e1c920:	e92d4070 	push	{r4, r5, r6, lr}
c7e1c924:	e1a06000 	mov	r6, r0
	int i;
	printf("[s3c_usb_print_pkt:");
c7e1c928:	e59f0030 	ldr	r0, [pc, #48]	; c7e1c960 <s3c_usb_print_pkt+0x40>
	/* dont used in usb high speed, but used in common file cmd_usbd.c  */
	return 0;
}

void s3c_usb_print_pkt(u8 *pt, u8 count)
{
c7e1c92c:	e1a05001 	mov	r5, r1
	int i;
	printf("[s3c_usb_print_pkt:");
c7e1c930:	e3a04000 	mov	r4, #0	; 0x0
c7e1c934:	ebffb047 	bl	c7e08a58 <printf>
c7e1c938:	ea000002 	b	c7e1c948 <s3c_usb_print_pkt+0x28>

	for(i=0;i<count;i++)
		printf("%x,", pt[i]);
c7e1c93c:	e7d61004 	ldrb	r1, [r6, r4]
c7e1c940:	ebffb044 	bl	c7e08a58 <printf>
void s3c_usb_print_pkt(u8 *pt, u8 count)
{
	int i;
	printf("[s3c_usb_print_pkt:");

	for(i=0;i<count;i++)
c7e1c944:	e2844001 	add	r4, r4, #1	; 0x1
c7e1c948:	e1540005 	cmp	r4, r5
		printf("%x,", pt[i]);
c7e1c94c:	e59f0010 	ldr	r0, [pc, #16]	; c7e1c964 <s3c_usb_print_pkt+0x44>
void s3c_usb_print_pkt(u8 *pt, u8 count)
{
	int i;
	printf("[s3c_usb_print_pkt:");

	for(i=0;i<count;i++)
c7e1c950:	bafffff9 	blt	c7e1c93c <s3c_usb_print_pkt+0x1c>
		printf("%x,", pt[i]);

	printf("]\n");
c7e1c954:	e59f000c 	ldr	r0, [pc, #12]	; c7e1c968 <s3c_usb_print_pkt+0x48>
}
c7e1c958:	e8bd4070 	pop	{r4, r5, r6, lr}
	printf("[s3c_usb_print_pkt:");

	for(i=0;i<count;i++)
		printf("%x,", pt[i]);

	printf("]\n");
c7e1c95c:	eaffb03d 	b	c7e08a58 <printf>
c7e1c960:	c7e33f56 	.word	0xc7e33f56
c7e1c964:	c7e33f6a 	.word	0xc7e33f6a
c7e1c968:	c7e31627 	.word	0xc7e31627

c7e1c96c <s3c_usb_dma_out_done>:
void s3c_usb_dma_out_done(void)
{
	s32 remain_cnt;

	DBG_BULK1("DMA OUT : Transfer Done\n");
	otg.dn_ptr = (u8 *)readl(S3C_OTG_DOEPDMA_OUT);
c7e1c96c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
	} else
		DBG_SETUP1("DMA IN : Transfer Complete\n");
}

void s3c_usb_dma_out_done(void)
{
c7e1c970:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	s32 remain_cnt;

	DBG_BULK1("DMA OUT : Transfer Done\n");
	otg.dn_ptr = (u8 *)readl(S3C_OTG_DOEPDMA_OUT);
c7e1c974:	e593cb54 	ldr	ip, [r3, #2900]
c7e1c978:	e59f7100 	ldr	r7, [pc, #256]	; c7e1ca80 <s3c_usb_dma_out_done+0x114>
c7e1c97c:	e1a0642c 	lsr	r6, ip, #8

	remain_cnt = otg.dn_filesize - ((u32)otg.dn_ptr - otg.dn_addr + 8);
c7e1c980:	e5d70069 	ldrb	r0, [r7, #105]
c7e1c984:	e5d71065 	ldrb	r1, [r7, #101]
c7e1c988:	e5d73068 	ldrb	r3, [r7, #104]
c7e1c98c:	e5d72064 	ldrb	r2, [r7, #100]
c7e1c990:	e5d7406a 	ldrb	r4, [r7, #106]
c7e1c994:	e5d75066 	ldrb	r5, [r7, #102]
c7e1c998:	e1833400 	orr	r3, r3, r0, lsl #8
c7e1c99c:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1c9a0:	e5d70067 	ldrb	r0, [r7, #103]
c7e1c9a4:	e5d7106b 	ldrb	r1, [r7, #107]
c7e1c9a8:	e1833804 	orr	r3, r3, r4, lsl #16
c7e1c9ac:	e1822805 	orr	r2, r2, r5, lsl #16
c7e1c9b0:	e1822c00 	orr	r2, r2, r0, lsl #24
c7e1c9b4:	e1833c01 	orr	r3, r3, r1, lsl #24
c7e1c9b8:	e0833002 	add	r3, r3, r2
c7e1c9bc:	e2433008 	sub	r3, r3, #8	; 0x8
c7e1c9c0:	e06ca003 	rsb	sl, ip, r3
void s3c_usb_dma_out_done(void)
{
	s32 remain_cnt;

	DBG_BULK1("DMA OUT : Transfer Done\n");
	otg.dn_ptr = (u8 *)readl(S3C_OTG_DOEPDMA_OUT);
c7e1c9c4:	e1a02c2c 	lsr	r2, ip, #24
c7e1c9c8:	e1a0382c 	lsr	r3, ip, #16

	remain_cnt = otg.dn_filesize - ((u32)otg.dn_ptr - otg.dn_addr + 8);

	if (remain_cnt>0) {
c7e1c9cc:	e35a0000 	cmp	sl, #0	; 0x0
void s3c_usb_dma_out_done(void)
{
	s32 remain_cnt;

	DBG_BULK1("DMA OUT : Transfer Done\n");
	otg.dn_ptr = (u8 *)readl(S3C_OTG_DOEPDMA_OUT);
c7e1c9d0:	e5c76075 	strb	r6, [r7, #117]
c7e1c9d4:	e5c73076 	strb	r3, [r7, #118]
c7e1c9d8:	e5c72077 	strb	r2, [r7, #119]
c7e1c9dc:	e5c7c074 	strb	ip, [r7, #116]

	remain_cnt = otg.dn_filesize - ((u32)otg.dn_ptr - otg.dn_addr + 8);

	if (remain_cnt>0) {
c7e1c9e0:	da000023 	ble	c7e1ca74 <s3c_usb_dma_out_done+0x108>
		u32 pktcnt, remainder;
		pktcnt = (u32)(remain_cnt/otg.bulkout_max_pktsize);
c7e1c9e4:	e5d72061 	ldrb	r2, [r7, #97]
c7e1c9e8:	e5d73060 	ldrb	r3, [r7, #96]
c7e1c9ec:	e5d71062 	ldrb	r1, [r7, #98]
c7e1c9f0:	e1833402 	orr	r3, r3, r2, lsl #8
c7e1c9f4:	e5d72063 	ldrb	r2, [r7, #99]
c7e1c9f8:	e1833801 	orr	r3, r3, r1, lsl #16
c7e1c9fc:	e1835c02 	orr	r5, r3, r2, lsl #24
c7e1ca00:	e1a01005 	mov	r1, r5
c7e1ca04:	e1a0000a 	mov	r0, sl
c7e1ca08:	eb0036be 	bl	c7e2a508 <__udivsi3>
		remainder = (u32)(remain_cnt%otg.bulkout_max_pktsize);
		if(remainder != 0) {
c7e1ca0c:	e1a01005 	mov	r1, r5

	remain_cnt = otg.dn_filesize - ((u32)otg.dn_ptr - otg.dn_addr + 8);

	if (remain_cnt>0) {
		u32 pktcnt, remainder;
		pktcnt = (u32)(remain_cnt/otg.bulkout_max_pktsize);
c7e1ca10:	e1a04000 	mov	r4, r0
		remainder = (u32)(remain_cnt%otg.bulkout_max_pktsize);
		if(remainder != 0) {
c7e1ca14:	e1a0000a 	mov	r0, sl
c7e1ca18:	eb0036f7 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1ca1c:	e3510000 	cmp	r1, #0	; 0x0
			pktcnt += 1;
		}
		DBG_BULK1("remain_cnt : %d \n", remain_cnt);
		if (pktcnt> 1023) {
c7e1ca20:	e59f105c 	ldr	r1, [pc, #92]	; c7e1ca84 <s3c_usb_dma_out_done+0x118>
	if (remain_cnt>0) {
		u32 pktcnt, remainder;
		pktcnt = (u32)(remain_cnt/otg.bulkout_max_pktsize);
		remainder = (u32)(remain_cnt%otg.bulkout_max_pktsize);
		if(remainder != 0) {
			pktcnt += 1;
c7e1ca24:	12844001 	addne	r4, r4, #1	; 0x1
		}
		DBG_BULK1("remain_cnt : %d \n", remain_cnt);
		if (pktcnt> 1023) {
c7e1ca28:	e1540001 	cmp	r4, r1
			s3c_usb_set_outep_xfersize(EP_TYPE_BULK, 1023,
c7e1ca2c:	80652505 	rsbhi	r2, r5, r5, lsl #10
				(otg.bulkout_max_pktsize*1023));
		} else {
			s3c_usb_set_outep_xfersize(EP_TYPE_BULK, pktcnt,
c7e1ca30:	91a01004 	movls	r1, r4
c7e1ca34:	91a0200a 	movls	r2, sl
c7e1ca38:	e3a00002 	mov	r0, #2	; 0x2
c7e1ca3c:	ebfff5fc 	bl	c7e1a234 <s3c_usb_set_outep_xfersize>
				remain_cnt);
		}

		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
c7e1ca40:	e59f2038 	ldr	r2, [pc, #56]	; c7e1ca80 <s3c_usb_dma_out_done+0x114>
c7e1ca44:	e5d23060 	ldrb	r3, [r2, #96]
c7e1ca48:	e5d21061 	ldrb	r1, [r2, #97]
c7e1ca4c:	e5d20062 	ldrb	r0, [r2, #98]
c7e1ca50:	e1833401 	orr	r3, r3, r1, lsl #8
c7e1ca54:	e5d22063 	ldrb	r2, [r2, #99]
c7e1ca58:	e1833800 	orr	r3, r3, r0, lsl #16
c7e1ca5c:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1ca60:	e3833321 	orr	r3, r3, #-2080374784	; 0x84000000
c7e1ca64:	e3833922 	orr	r3, r3, #557056	; 0x88000
c7e1ca68:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
c7e1ca6c:	e5823b40 	str	r3, [r2, #2880]
			S3C_OTG_DOEPCTL_OUT);
	} else {
		DBG_BULK1("DMA OUT : Transfer Complete\n");
		udelay(500);		/*for FPGA ???*/
	}
}
c7e1ca70:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
			S3C_OTG_DOEPCTL_OUT);
	} else {
		DBG_BULK1("DMA OUT : Transfer Complete\n");
		udelay(500);		/*for FPGA ???*/
c7e1ca74:	e3a00f7d 	mov	r0, #500	; 0x1f4
	}
}
c7e1ca78:	e8bd44f0 	pop	{r4, r5, r6, r7, sl, lr}
		/*ep3 enable, clear nak, bulk, usb active, next ep3, max pkt 64*/
		writel(1u<<31|1<<26|2<<18|1<<15|otg.bulkout_max_pktsize<<0,
			S3C_OTG_DOEPCTL_OUT);
	} else {
		DBG_BULK1("DMA OUT : Transfer Complete\n");
		udelay(500);		/*for FPGA ???*/
c7e1ca7c:	ea001911 	b	c7e22ec8 <udelay>
c7e1ca80:	c7e42120 	.word	0xc7e42120
c7e1ca84:	000003ff 	.word	0x000003ff

c7e1ca88 <s3c_usb_transfer>:
{
	u32 ep_int;
	u32 check_dma;
	u32 ep_int_status;

	ep_int = readl(S3C_OTG_DAINT);
c7e1ca88:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
		DBG_SETUP1("Reserved\n");
	}
}

void s3c_usb_transfer(void)
{
c7e1ca8c:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ep_int;
	u32 check_dma;
	u32 ep_int_status;

	ep_int = readl(S3C_OTG_DAINT);
c7e1ca90:	e5936818 	ldr	r6, [r3, #2072]
	DBG_SETUP0("S3C_OTG_DAINT = 0x%x", ep_int);

	if (ep_int & (1<<CONTROL_EP)) {
c7e1ca94:	e3160001 	tst	r6, #1	; 0x1
c7e1ca98:	0a000013 	beq	c7e1caec <s3c_usb_transfer+0x64>
		ep_int_status = readl(S3C_OTG_DIEPINT0);
c7e1ca9c:	e5934908 	ldr	r4, [r3, #2312]
		DBG_SETUP1("S3C_OTG_DIEPINT0 : %x \n", ep_int_status);

		if (ep_int_status & INTKN_TXFEMP) {
c7e1caa0:	e3140010 	tst	r4, #16	; 0x10
c7e1caa4:	0a00000e 	beq	c7e1cae4 <s3c_usb_transfer+0x5c>
			u32 uNTxFifoSpace;
			do {
				uNTxFifoSpace=readl(S3C_OTG_GNPTXSTS)&0xffff;
c7e1caa8:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1caac:	e593102c 	ldr	r1, [r3, #44]
			}while(uNTxFifoSpace<otg.ctrl_max_pktsize);
c7e1cab0:	e59f20f0 	ldr	r2, [pc, #240]	; c7e1cba8 <s3c_usb_transfer+0x120>
c7e1cab4:	e1a01801 	lsl	r1, r1, #16
c7e1cab8:	e5d23058 	ldrb	r3, [r2, #88]
c7e1cabc:	e5d20059 	ldrb	r0, [r2, #89]
c7e1cac0:	e5d2c05a 	ldrb	ip, [r2, #90]
c7e1cac4:	e1833400 	orr	r3, r3, r0, lsl #8
c7e1cac8:	e5d2205b 	ldrb	r2, [r2, #91]
c7e1cacc:	e183380c 	orr	r3, r3, ip, lsl #16
c7e1cad0:	e1833c02 	orr	r3, r3, r2, lsl #24
c7e1cad4:	e1a01821 	lsr	r1, r1, #16
c7e1cad8:	e1510003 	cmp	r1, r3
c7e1cadc:	3afffff1 	bcc	c7e1caa8 <s3c_usb_transfer+0x20>

			s3c_usb_transfer_ep0();
c7e1cae0:	ebfff806 	bl	c7e1ab00 <s3c_usb_transfer_ep0>
		}

		writel(ep_int_status, S3C_OTG_DIEPINT0); /* Interrupt Clear */
c7e1cae4:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cae8:	e5834908 	str	r4, [r3, #2312]
	}

	if (ep_int & ((1<<CONTROL_EP)<<16)) {
c7e1caec:	e3160801 	tst	r6, #65536	; 0x10000
c7e1caf0:	0a000008 	beq	c7e1cb18 <s3c_usb_transfer+0x90>
		ep_int_status = readl(S3C_OTG_DOEPINT0);
c7e1caf4:	e3a0431f 	mov	r4, #2080374784	; 0x7c000000
c7e1caf8:	e5945b08 	ldr	r5, [r4, #2824]
		DBG_SETUP1("S3C_OTG_DOEPINT0 : %x \n", ep_int_status);

		s3c_usb_set_outep_xfersize(EP_TYPE_CONTROL, 1, 8);
c7e1cafc:	e3a00000 	mov	r0, #0	; 0x0
c7e1cb00:	e3a01001 	mov	r1, #1	; 0x1
c7e1cb04:	e3a02008 	mov	r2, #8	; 0x8
c7e1cb08:	ebfff5c9 	bl	c7e1a234 <s3c_usb_set_outep_xfersize>
		writel(1u<<31|1<<26, S3C_OTG_DOEPCTL0); /*ep0 enable, clear nak */
c7e1cb0c:	e3a03321 	mov	r3, #-2080374784	; 0x84000000
c7e1cb10:	e5843b00 	str	r3, [r4, #2816]

		writel(ep_int_status, S3C_OTG_DOEPINT0); /* Interrupt Clear */
c7e1cb14:	e5845b08 	str	r5, [r4, #2824]
	}

	if(ep_int & (1<<BULK_IN_EP)) {
c7e1cb18:	e3160002 	tst	r6, #2	; 0x2
c7e1cb1c:	0a000015 	beq	c7e1cb78 <s3c_usb_transfer+0xf0>
		ep_int_status = readl(S3C_OTG_DIEPINT_IN);
c7e1cb20:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cb24:	e5934928 	ldr	r4, [r3, #2344]
		DBG_BULK1("S3C_OTG_DIEPINT_IN : %x \n", ep_int_status);
		writel(ep_int_status, S3C_OTG_DIEPINT_IN); /* Interrupt Clear */

		if ( (ep_int_status&INTKN_TXFEMP) && otg.op_mode == USB_CPU)
c7e1cb28:	e3140010 	tst	r4, #16	; 0x10
	}

	if(ep_int & (1<<BULK_IN_EP)) {
		ep_int_status = readl(S3C_OTG_DIEPINT_IN);
		DBG_BULK1("S3C_OTG_DIEPINT_IN : %x \n", ep_int_status);
		writel(ep_int_status, S3C_OTG_DIEPINT_IN); /* Interrupt Clear */
c7e1cb2c:	e5834928 	str	r4, [r3, #2344]

		if ( (ep_int_status&INTKN_TXFEMP) && otg.op_mode == USB_CPU)
c7e1cb30:	0a000009 	beq	c7e1cb5c <s3c_usb_transfer+0xd4>
c7e1cb34:	e59f306c 	ldr	r3, [pc, #108]	; c7e1cba8 <s3c_usb_transfer+0x120>
c7e1cb38:	e5d32050 	ldrb	r2, [r3, #80]
c7e1cb3c:	e5d31051 	ldrb	r1, [r3, #81]
c7e1cb40:	e5d30052 	ldrb	r0, [r3, #82]
c7e1cb44:	e1822401 	orr	r2, r2, r1, lsl #8
c7e1cb48:	e5d33053 	ldrb	r3, [r3, #83]
c7e1cb4c:	e1822800 	orr	r2, r2, r0, lsl #16
c7e1cb50:	e1923c03 	orrs	r3, r2, r3, lsl #24
c7e1cb54:	1a000000 	bne	c7e1cb5c <s3c_usb_transfer+0xd4>
			s3c_usb_int_bulkin();
c7e1cb58:	ebfffb69 	bl	c7e1b904 <s3c_usb_int_bulkin>

		check_dma = readl(S3C_OTG_GAHBCFG);
c7e1cb5c:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cb60:	e5933008 	ldr	r3, [r3, #8]
		if ((check_dma&MODE_DMA)&&(ep_int_status&TRANSFER_DONE))
c7e1cb64:	e3130020 	tst	r3, #32	; 0x20
c7e1cb68:	0a000002 	beq	c7e1cb78 <s3c_usb_transfer+0xf0>
c7e1cb6c:	e3140001 	tst	r4, #1	; 0x1
c7e1cb70:	0a000000 	beq	c7e1cb78 <s3c_usb_transfer+0xf0>
			s3c_usb_dma_in_done();
c7e1cb74:	ebfffd0e 	bl	c7e1bfb4 <s3c_usb_dma_in_done>
	}

	if (ep_int & ((1<<BULK_OUT_EP)<<16)) {
c7e1cb78:	e3160701 	tst	r6, #262144	; 0x40000
c7e1cb7c:	08bd8070 	popeq	{r4, r5, r6, pc}
		ep_int_status = readl(S3C_OTG_DOEPINT_OUT);
c7e1cb80:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cb84:	e5932b48 	ldr	r2, [r3, #2888]
		DBG_BULK1("S3C_OTG_DOEPINT_OUT : 0x%x\n", ep_int_status);
		writel(ep_int_status, S3C_OTG_DOEPINT_OUT); /* Interrupt Clear */
c7e1cb88:	e5832b48 	str	r2, [r3, #2888]

		check_dma = readl(S3C_OTG_GAHBCFG);
c7e1cb8c:	e5933008 	ldr	r3, [r3, #8]
		if ((check_dma&MODE_DMA)&&(ep_int_status&TRANSFER_DONE)) {
c7e1cb90:	e3130020 	tst	r3, #32	; 0x20
c7e1cb94:	08bd8070 	popeq	{r4, r5, r6, pc}
c7e1cb98:	e3120001 	tst	r2, #1	; 0x1
c7e1cb9c:	08bd8070 	popeq	{r4, r5, r6, pc}
			s3c_usb_dma_out_done();
		}
	}
}
c7e1cba0:	e8bd4070 	pop	{r4, r5, r6, lr}
		DBG_BULK1("S3C_OTG_DOEPINT_OUT : 0x%x\n", ep_int_status);
		writel(ep_int_status, S3C_OTG_DOEPINT_OUT); /* Interrupt Clear */

		check_dma = readl(S3C_OTG_GAHBCFG);
		if ((check_dma&MODE_DMA)&&(ep_int_status&TRANSFER_DONE)) {
			s3c_usb_dma_out_done();
c7e1cba4:	eaffff70 	b	c7e1c96c <s3c_usb_dma_out_done>
c7e1cba8:	c7e42120 	.word	0xc7e42120

c7e1cbac <s3c_udc_int_hndlr>:
void s3c_udc_int_hndlr(void)
{
	u32 int_status;
	int tmp;

	int_status = readl(S3C_OTG_GINTSTS); /* Core Interrupt Register */
c7e1cbac:	e3a0231f 	mov	r2, #2080374784	; 0x7c000000
		}
	}
}

void s3c_udc_int_hndlr(void)
{
c7e1cbb0:	e92d4070 	push	{r4, r5, r6, lr}
	u32 int_status;
	int tmp;

	int_status = readl(S3C_OTG_GINTSTS); /* Core Interrupt Register */
c7e1cbb4:	e5925014 	ldr	r5, [r2, #20]
	writel(int_status, S3C_OTG_GINTSTS); /* Interrupt Clear */
	DBG_SETUP0("*** USB OTG Interrupt(S3C_OTG_GINTSTS: 0x%08x) ****\n",
		int_status);

	if (int_status & INT_RESET) {
c7e1cbb8:	e3150a01 	tst	r5, #4096	; 0x1000
{
	u32 int_status;
	int tmp;

	int_status = readl(S3C_OTG_GINTSTS); /* Core Interrupt Register */
	writel(int_status, S3C_OTG_GINTSTS); /* Interrupt Clear */
c7e1cbbc:	e5825014 	str	r5, [r2, #20]
	DBG_SETUP0("*** USB OTG Interrupt(S3C_OTG_GINTSTS: 0x%08x) ****\n",
		int_status);

	if (int_status & INT_RESET) {
c7e1cbc0:	0a000002 	beq	c7e1cbd0 <s3c_udc_int_hndlr+0x24>
		DBG_SETUP1("INT_RESET\n");
		writel(INT_RESET, S3C_OTG_GINTSTS); /* Interrupt Clear */
c7e1cbc4:	e3a03a01 	mov	r3, #4096	; 0x1000
c7e1cbc8:	e5823014 	str	r3, [r2, #20]

		s3c_usb_reset();
c7e1cbcc:	ebfffe60 	bl	c7e1c554 <s3c_usb_reset>
	}

	if (int_status & INT_ENUMDONE) {
c7e1cbd0:	e3150a02 	tst	r5, #8192	; 0x2000
c7e1cbd4:	0a000005 	beq	c7e1cbf0 <s3c_udc_int_hndlr+0x44>
		DBG_SETUP1("INT_ENUMDONE :");
		writel(INT_ENUMDONE, S3C_OTG_GINTSTS); /* Interrupt Clear */
c7e1cbd8:	e3a02a02 	mov	r2, #8192	; 0x2000
c7e1cbdc:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cbe0:	e5832014 	str	r2, [r3, #20]

		tmp = s3c_usb_set_init();
c7e1cbe4:	ebfffe74 	bl	c7e1c5bc <s3c_usb_set_init>
		if (tmp == FALSE)
c7e1cbe8:	e3500000 	cmp	r0, #0	; 0x0
c7e1cbec:	08bd8070 	popeq	{r4, r5, r6, pc}
			return;

	}

	if (int_status & INT_RESUME) {
c7e1cbf0:	e3550000 	cmp	r5, #0	; 0x0
c7e1cbf4:	aa000002 	bge	c7e1cc04 <s3c_udc_int_hndlr+0x58>
		DBG_SETUP1("INT_RESUME\n");
		writel(INT_RESUME, S3C_OTG_GINTSTS); /* Interrupt Clear */
c7e1cbf8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
c7e1cbfc:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cc00:	e5832014 	str	r2, [r3, #20]
			writel(readl(S3C_OTG_PCGCCTRL)&~(1<<0), S3C_OTG_PCGCCTRL);
			DBG_SETUP1("INT_RESUME\n");
		}
	}

	if (int_status & INT_SUSPEND) {
c7e1cc04:	e3150b02 	tst	r5, #2048	; 0x800
c7e1cc08:	0a000002 	beq	c7e1cc18 <s3c_udc_int_hndlr+0x6c>
		DBG_SETUP1("INT_SUSPEND\n");
		writel(INT_SUSPEND, S3C_OTG_GINTSTS); /* Interrupt Clear */
c7e1cc0c:	e3a02b02 	mov	r2, #2048	; 0x800
c7e1cc10:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cc14:	e5832014 	str	r2, [r3, #20]
		if(SUSPEND_RESUME_ON) {
			writel(readl(S3C_OTG_PCGCCTRL)|(1<<0), S3C_OTG_PCGCCTRL);
		}
	}

	if(int_status & INT_RX_FIFO_NOT_EMPTY) {
c7e1cc18:	e3150010 	tst	r5, #16	; 0x10
c7e1cc1c:	0a000005 	beq	c7e1cc38 <s3c_udc_int_hndlr+0x8c>
		DBG_SETUP1("INT_RX_FIFO_NOT_EMPTY\n");
		/* Read only register field */

		writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|
c7e1cc20:	e59f3020 	ldr	r3, [pc, #32]	; c7e1cc48 <s3c_udc_int_hndlr+0x9c>
c7e1cc24:	e3a0431f 	mov	r4, #2080374784	; 0x7c000000
c7e1cc28:	e5843018 	str	r3, [r4, #24]
			INT_ENUMDONE|INT_RESET|INT_SUSPEND,
			S3C_OTG_GINTMSK);
		s3c_usb_pkt_receive();
c7e1cc2c:	ebffff1a 	bl	c7e1c89c <s3c_usb_pkt_receive>
		writel(INT_RESUME|INT_OUT_EP|INT_IN_EP|INT_ENUMDONE|
c7e1cc30:	e59f3014 	ldr	r3, [pc, #20]	; c7e1cc4c <s3c_udc_int_hndlr+0xa0>
c7e1cc34:	e5843018 	str	r3, [r4, #24]
			INT_RESET |INT_SUSPEND|INT_RX_FIFO_NOT_EMPTY,
			S3C_OTG_GINTMSK); /*gint unmask */
	}

	if ((int_status & INT_IN_EP) || (int_status & INT_OUT_EP)) {
c7e1cc38:	e3150703 	tst	r5, #786432	; 0xc0000
c7e1cc3c:	08bd8070 	popeq	{r4, r5, r6, pc}
		DBG_SETUP1("INT_IN or OUT_EP\n");
		/* Read only register field */

		s3c_usb_transfer();
	}
}
c7e1cc40:	e8bd4070 	pop	{r4, r5, r6, lr}

	if ((int_status & INT_IN_EP) || (int_status & INT_OUT_EP)) {
		DBG_SETUP1("INT_IN or OUT_EP\n");
		/* Read only register field */

		s3c_usb_transfer();
c7e1cc44:	eaffff8f 	b	c7e1ca88 <s3c_usb_transfer>
c7e1cc48:	800c3800 	.word	0x800c3800
c7e1cc4c:	800c3810 	.word	0x800c3810

c7e1cc50 <s3c_usb_wait_cable_insert>:
	}while(!(tmp & AHB_MASTER_IDLE));

}

void s3c_usb_wait_cable_insert(void)
{
c7e1cc50:	e92d4010 	push	{r4, lr}
c7e1cc54:	e3a04001 	mov	r4, #1	; 0x1
	u32 tmp;
	int ucFirst=1;

	do {
		udelay(50);
c7e1cc58:	e3a00032 	mov	r0, #50	; 0x32
c7e1cc5c:	eb001899 	bl	c7e22ec8 <udelay>

		tmp = readl(S3C_OTG_GOTGCTL);
c7e1cc60:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
c7e1cc64:	e5933000 	ldr	r3, [r3]

		if (tmp & (B_SESSION_VALID|A_SESSION_VALID)) {
c7e1cc68:	e2133703 	ands	r3, r3, #786432	; 0xc0000
c7e1cc6c:	0a000002 	beq	c7e1cc7c <s3c_usb_wait_cable_insert+0x2c>
			printf("OTG cable Connected!\n");
c7e1cc70:	e59f001c 	ldr	r0, [pc, #28]	; c7e1cc94 <s3c_usb_wait_cable_insert+0x44>
		} else if(ucFirst == 1) {
			printf("Insert a OTG cable into the connector!\n");
			ucFirst = 0;
		}
	} while(1);
}
c7e1cc74:	e8bd4010 	pop	{r4, lr}
		udelay(50);

		tmp = readl(S3C_OTG_GOTGCTL);

		if (tmp & (B_SESSION_VALID|A_SESSION_VALID)) {
			printf("OTG cable Connected!\n");
c7e1cc78:	eaffaf76 	b	c7e08a58 <printf>
			break;
		} else if(ucFirst == 1) {
c7e1cc7c:	e3540001 	cmp	r4, #1	; 0x1
c7e1cc80:	1afffff4 	bne	c7e1cc58 <s3c_usb_wait_cable_insert+0x8>
			printf("Insert a OTG cable into the connector!\n");
c7e1cc84:	e59f000c 	ldr	r0, [pc, #12]	; c7e1cc98 <s3c_usb_wait_cable_insert+0x48>
c7e1cc88:	e1a04003 	mov	r4, r3
c7e1cc8c:	ebffaf71 	bl	c7e08a58 <printf>
c7e1cc90:	eafffff0 	b	c7e1cc58 <s3c_usb_wait_cable_insert+0x8>
c7e1cc94:	c7e33f6e 	.word	0xc7e33f6e
c7e1cc98:	c7e33f84 	.word	0xc7e33f84

c7e1cc9c <s3c_usb_init_phy>:
	0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,		/*'1' + JJJJJJJK x 8*/
	0xFC,0x7E,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0x7E	/*{JKKKKKKK x 10},JK*/
};

void s3c_usb_init_phy(void)
{
c7e1cc9c:	e92d4070 	push	{r4, r5, r6, lr}
	writel(0x0, S3C_OTG_PHYPWR);
c7e1cca0:	e59f4028 	ldr	r4, [pc, #40]	; c7e1ccd0 <s3c_usb_init_phy+0x34>
c7e1cca4:	e3a05000 	mov	r5, #0	; 0x0
c7e1cca8:	e5845000 	str	r5, [r4]
	writel(0x00, S3C_OTG_PHYCTRL);
c7e1ccac:	e5845004 	str	r5, [r4, #4]
	writel(0x1, S3C_OTG_RSTCON);
c7e1ccb0:	e3a03001 	mov	r3, #1	; 0x1
	udelay(10);
c7e1ccb4:	e3a0000a 	mov	r0, #10	; 0xa

void s3c_usb_init_phy(void)
{
	writel(0x0, S3C_OTG_PHYPWR);
	writel(0x00, S3C_OTG_PHYCTRL);
	writel(0x1, S3C_OTG_RSTCON);
c7e1ccb8:	e5843008 	str	r3, [r4, #8]
	udelay(10);
c7e1ccbc:	eb001881 	bl	c7e22ec8 <udelay>
	writel(0x0, S3C_OTG_RSTCON);
	udelay(10);
c7e1ccc0:	e3a0000a 	mov	r0, #10	; 0xa
{
	writel(0x0, S3C_OTG_PHYPWR);
	writel(0x00, S3C_OTG_PHYCTRL);
	writel(0x1, S3C_OTG_RSTCON);
	udelay(10);
	writel(0x0, S3C_OTG_RSTCON);
c7e1ccc4:	e5845008 	str	r5, [r4, #8]
	udelay(10);
}
c7e1ccc8:	e8bd4070 	pop	{r4, r5, r6, lr}
	writel(0x0, S3C_OTG_PHYPWR);
	writel(0x00, S3C_OTG_PHYCTRL);
	writel(0x1, S3C_OTG_RSTCON);
	udelay(10);
	writel(0x0, S3C_OTG_RSTCON);
	udelay(10);
c7e1cccc:	ea00187d 	b	c7e22ec8 <udelay>
c7e1ccd0:	7c100000 	.word	0x7c100000

c7e1ccd4 <s3c_usbctl_init>:
		INT_RESET|INT_SUSPEND|INT_RX_FIFO_NOT_EMPTY,
		S3C_OTG_GINTMSK);	/*gint unmask */
}

int s3c_usbctl_init(void)
{
c7e1ccd4:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
	u8 ucMode;

	DBG_SETUP0("USB Control Init\n");
	OTHERS_REG |= (1<<16);	/*unmask usb signal */
c7e1ccd8:	e59f00ac 	ldr	r0, [pc, #172]	; c7e1cd8c <s3c_usbctl_init+0xb8>

	otg.speed = speed;
c7e1ccdc:	e59f30ac 	ldr	r3, [pc, #172]	; c7e1cd90 <s3c_usbctl_init+0xbc>
int s3c_usbctl_init(void)
{
	u8 ucMode;

	DBG_SETUP0("USB Control Init\n");
	OTHERS_REG |= (1<<16);	/*unmask usb signal */
c7e1cce0:	e5901900 	ldr	r1, [r0, #2304]

	otg.speed = speed;
c7e1cce4:	e5d3c0a0 	ldrb	ip, [r3, #160]
c7e1cce8:	e5d3e0a1 	ldrb	lr, [r3, #161]
c7e1ccec:	e5d340a2 	ldrb	r4, [r3, #162]
c7e1ccf0:	e5d350a3 	ldrb	r5, [r3, #163]
c7e1ccf4:	e3a02000 	mov	r2, #0	; 0x0
int s3c_usbctl_init(void)
{
	u8 ucMode;

	DBG_SETUP0("USB Control Init\n");
	OTHERS_REG |= (1<<16);	/*unmask usb signal */
c7e1ccf8:	e3811801 	orr	r1, r1, #65536	; 0x10000
c7e1ccfc:	e5801900 	str	r1, [r0, #2304]

	otg.speed = speed;
	otg.set_config = 0;
	otg.ep0_state = EP0_STATE_INIT;
	otg.ep0_substate = 0;
c7e1cd00:	e5c3204f 	strb	r2, [r3, #79]
	u8 ucMode;

	DBG_SETUP0("USB Control Init\n");
	OTHERS_REG |= (1<<16);	/*unmask usb signal */

	otg.speed = speed;
c7e1cd04:	e5c3c054 	strb	ip, [r3, #84]
c7e1cd08:	e5c3e055 	strb	lr, [r3, #85]
c7e1cd0c:	e5c34056 	strb	r4, [r3, #86]
c7e1cd10:	e5c35057 	strb	r5, [r3, #87]
	otg.set_config = 0;
c7e1cd14:	e5c3207c 	strb	r2, [r3, #124]
c7e1cd18:	e5c3207d 	strb	r2, [r3, #125]
c7e1cd1c:	e5c3207e 	strb	r2, [r3, #126]
c7e1cd20:	e5c3207f 	strb	r2, [r3, #127]
	otg.ep0_state = EP0_STATE_INIT;
c7e1cd24:	e5c32048 	strb	r2, [r3, #72]
c7e1cd28:	e5c32049 	strb	r2, [r3, #73]
c7e1cd2c:	e5c3204a 	strb	r2, [r3, #74]
c7e1cd30:	e5c3204b 	strb	r2, [r3, #75]
	otg.ep0_substate = 0;
c7e1cd34:	e5c3204c 	strb	r2, [r3, #76]
c7e1cd38:	e5c3204d 	strb	r2, [r3, #77]
c7e1cd3c:	e5c3204e 	strb	r2, [r3, #78]
	s3c_usb_init_phy();
c7e1cd40:	ebffffd5 	bl	c7e1cc9c <s3c_usb_init_phy>
	s3c_usb_core_soft_reset();
c7e1cd44:	ebfff4fb 	bl	c7e1a138 <s3c_usb_core_soft_reset>
	s3c_usb_wait_cable_insert();
c7e1cd48:	ebffffc0 	bl	c7e1cc50 <s3c_usb_wait_cable_insert>
	s3c_usb_init_core();
c7e1cd4c:	ebfff501 	bl	c7e1a158 <s3c_usb_init_core>
	s3c_usb_check_current_mode(&ucMode);
c7e1cd50:	e28d0007 	add	r0, sp, #7	; 0x7
c7e1cd54:	ebfff506 	bl	c7e1a174 <s3c_usb_check_current_mode>

	if (ucMode == INT_DEV_MODE) {
c7e1cd58:	e5dd3007 	ldrb	r3, [sp, #7]
c7e1cd5c:	e3530000 	cmp	r3, #0	; 0x0
c7e1cd60:	1a000005 	bne	c7e1cd7c <s3c_usbctl_init+0xa8>
		s3c_usb_set_soft_disconnect();
c7e1cd64:	ebfff507 	bl	c7e1a188 <s3c_usb_set_soft_disconnect>
		udelay(10);
c7e1cd68:	e3a0000a 	mov	r0, #10	; 0xa
c7e1cd6c:	eb001855 	bl	c7e22ec8 <udelay>
		s3c_usb_clear_soft_disconnect();
c7e1cd70:	ebfff509 	bl	c7e1a19c <s3c_usb_clear_soft_disconnect>
		s3c_usb_init_device();
c7e1cd74:	ebfff50d 	bl	c7e1a1b0 <s3c_usb_init_device>
c7e1cd78:	ea000001 	b	c7e1cd84 <s3c_usbctl_init+0xb0>
		return 0;
	} else {
		printf("Error : Current Mode is Host\n");
c7e1cd7c:	e59f0010 	ldr	r0, [pc, #16]	; c7e1cd94 <s3c_usbctl_init+0xc0>
c7e1cd80:	ebffaf34 	bl	c7e08a58 <printf>
		return 0;
	}
}
c7e1cd84:	e3a00000 	mov	r0, #0	; 0x0
c7e1cd88:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e1cd8c:	7e00f000 	.word	0x7e00f000
c7e1cd90:	c7e42120 	.word	0xc7e42120
c7e1cd94:	c7e33fac 	.word	0xc7e33fac

c7e1cd98 <mipi_dsi_init>:
	
	setenv("lcdinfo", "lcd_mipi_dsi_nt35590");
}

void mipi_dsi_init(void)
{
c7e1cd98:	e92d4010 	push	{r4, lr}
		.mipi_dsi_loosely_packed_pixel_format	= 0,
	
		.mipi_dsi_delay_after_exit_sleep_mode_ms = 100,
		.mipi_dsi_delay_after_set_display_on_ms	= 100,
		.lcd_lp_init	= nt35590_panel_init,
	};
c7e1cd9c:	e59f3080 	ldr	r3, [pc, #128]	; c7e1ce24 <mipi_dsi_init+0x8c>
	
	setenv("lcdinfo", "lcd_mipi_dsi_nt35590");
}

void mipi_dsi_init(void)
{
c7e1cda0:	e24dd070 	sub	sp, sp, #112	; 0x70
		.mipi_dsi_loosely_packed_pixel_format	= 0,
	
		.mipi_dsi_delay_after_exit_sleep_mode_ms = 100,
		.mipi_dsi_delay_after_set_display_on_ms	= 100,
		.lcd_lp_init	= nt35590_panel_init,
	};
c7e1cda4:	e28dc03c 	add	ip, sp, #60	; 0x3c
c7e1cda8:	e1a0e003 	mov	lr, r3
c7e1cdac:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
c7e1cdb0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
c7e1cdb4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
c7e1cdb8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
c7e1cdbc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
c7e1cdc0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
	}
}

static void convert_to_fb_videomode(struct fb_videomode *mode1,vidinfo_t *mode2)
{
	mode1->xres = mode2->vl_width;
c7e1cdc4:	e59f305c 	ldr	r3, [pc, #92]	; c7e1ce28 <mipi_dsi_init+0x90>
		.mipi_dsi_loosely_packed_pixel_format	= 0,
	
		.mipi_dsi_delay_after_exit_sleep_mode_ms = 100,
		.mipi_dsi_delay_after_set_display_on_ms	= 100,
		.lcd_lp_init	= nt35590_panel_init,
	};
c7e1cdc8:	e59e2000 	ldr	r2, [lr]
	}
}

static void convert_to_fb_videomode(struct fb_videomode *mode1,vidinfo_t *mode2)
{
	mode1->xres = mode2->vl_width;
c7e1cdcc:	e1d310b4 	ldrh	r1, [r3, #4]
	mode1->yres = mode2->vl_height;
c7e1cdd0:	e1d300b6 	ldrh	r0, [r3, #6]
	mode1->upper_margin = mode2->vl_vfpd;
c7e1cdd4:	e5d3e013 	ldrb	lr, [r3, #19]
	mode1->lower_margin = mode2->vl_vbpd;
c7e1cdd8:	e5d34014 	ldrb	r4, [r3, #20]
		.mipi_dsi_loosely_packed_pixel_format	= 0,
	
		.mipi_dsi_delay_after_exit_sleep_mode_ms = 100,
		.mipi_dsi_delay_after_set_display_on_ms	= 100,
		.lcd_lp_init	= nt35590_panel_init,
	};
c7e1cddc:	e58c2000 	str	r2, [ip]
	}
}

static void convert_to_fb_videomode(struct fb_videomode *mode1,vidinfo_t *mode2)
{
	mode1->xres = mode2->vl_width;
c7e1cde0:	e58d100c 	str	r1, [sp, #12]
	mode1->yres = mode2->vl_height;
c7e1cde4:	e58d0010 	str	r0, [sp, #16]
	mode1->upper_margin = mode2->vl_vfpd;
c7e1cde8:	e58de020 	str	lr, [sp, #32]
	mode1->lower_margin = mode2->vl_vbpd;
	mode1->left_margin = mode2->vl_hfpd;
	mode1->right_margin = mode2->vl_hbpd;
	mode1->vsync_len = mode2->vl_vspw;
	mode1->hsync_len = mode2->vl_hspw;
c7e1cdec:	e5d3e00f 	ldrb	lr, [r3, #15]
{
	mode1->xres = mode2->vl_width;
	mode1->yres = mode2->vl_height;
	mode1->upper_margin = mode2->vl_vfpd;
	mode1->lower_margin = mode2->vl_vbpd;
	mode1->left_margin = mode2->vl_hfpd;
c7e1cdf0:	e5d32010 	ldrb	r2, [r3, #16]
	mode1->right_margin = mode2->vl_hbpd;
c7e1cdf4:	e5d3c011 	ldrb	ip, [r3, #17]
	mode1->vsync_len = mode2->vl_vspw;
c7e1cdf8:	e5d33012 	ldrb	r3, [r3, #18]
		.mipi_dsi_delay_after_exit_sleep_mode_ms = 100,
		.mipi_dsi_delay_after_set_display_on_ms	= 100,
		.lcd_lp_init	= nt35590_panel_init,
	};
	convert_to_fb_videomode(&lcd_dev, &panel_info);
	ssd2828_init(&cfg, &lcd_dev);
c7e1cdfc:	e28d003c 	add	r0, sp, #60	; 0x3c
c7e1ce00:	e28d1004 	add	r1, sp, #4	; 0x4
static void convert_to_fb_videomode(struct fb_videomode *mode1,vidinfo_t *mode2)
{
	mode1->xres = mode2->vl_width;
	mode1->yres = mode2->vl_height;
	mode1->upper_margin = mode2->vl_vfpd;
	mode1->lower_margin = mode2->vl_vbpd;
c7e1ce04:	e58d4024 	str	r4, [sp, #36]
	mode1->left_margin = mode2->vl_hfpd;
c7e1ce08:	e58d2018 	str	r2, [sp, #24]
	mode1->right_margin = mode2->vl_hbpd;
c7e1ce0c:	e58dc01c 	str	ip, [sp, #28]
	mode1->vsync_len = mode2->vl_vspw;
c7e1ce10:	e58d302c 	str	r3, [sp, #44]
	mode1->hsync_len = mode2->vl_hspw;
c7e1ce14:	e58de028 	str	lr, [sp, #40]
		.mipi_dsi_delay_after_exit_sleep_mode_ms = 100,
		.mipi_dsi_delay_after_set_display_on_ms	= 100,
		.lcd_lp_init	= nt35590_panel_init,
	};
	convert_to_fb_videomode(&lcd_dev, &panel_info);
	ssd2828_init(&cfg, &lcd_dev);
c7e1ce18:	eb00023b 	bl	c7e1d70c <ssd2828_init>
}
c7e1ce1c:	e28dd070 	add	sp, sp, #112	; 0x70
c7e1ce20:	e8bd8010 	pop	{r4, pc}
c7e1ce24:	c7e2c668 	.word	0xc7e2c668
c7e1ce28:	c7e3a234 	.word	0xc7e3a234

c7e1ce2c <nt35590_panel_init>:
	.interface_mode = FIMD_RGB_INTERFACE,
	.mipi_enabled	= 1,
};

static void nt35590_panel_init(const struct ssd2828_config *cfg)
{
c7e1ce2c:	e92d4070 	push	{r4, r5, r6, lr}
c7e1ce30:	e1a05000 	mov	r5, r0
c7e1ce34:	e3a04000 	mov	r4, #0	; 0x0
	unsigned int i,data;
	
	for(i = 0;i < ARRAY_SIZE(data_to_send);i++) {
		data = data_to_send[i].cmd|(data_to_send[i].par << 8);
		send_mipi_dcs_command(cfg, data, 2);
c7e1ce38:	e59f3028 	ldr	r3, [pc, #40]	; c7e1ce68 <nt35590_panel_init+0x3c>
c7e1ce3c:	e1a00005 	mov	r0, r5
c7e1ce40:	e0832004 	add	r2, r3, r4
c7e1ce44:	e5d21001 	ldrb	r1, [r2, #1]
c7e1ce48:	e7d33004 	ldrb	r3, [r3, r4]
c7e1ce4c:	e3a02002 	mov	r2, #2	; 0x2
c7e1ce50:	e2844002 	add	r4, r4, #2	; 0x2
c7e1ce54:	e1831401 	orr	r1, r3, r1, lsl #8
c7e1ce58:	eb00020b 	bl	c7e1d68c <send_mipi_dcs_command>

static void nt35590_panel_init(const struct ssd2828_config *cfg)
{
	unsigned int i,data;
	
	for(i = 0;i < ARRAY_SIZE(data_to_send);i++) {
c7e1ce5c:	e3540e39 	cmp	r4, #912	; 0x390
c7e1ce60:	1afffff4 	bne	c7e1ce38 <nt35590_panel_init+0xc>
		data = data_to_send[i].cmd|(data_to_send[i].par << 8);
		send_mipi_dcs_command(cfg, data, 2);
	}
}
c7e1ce64:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1ce68:	c7e2c69c 	.word	0xc7e2c69c

c7e1ce6c <init_panel_info>:
}

void init_panel_info(vidinfo_t *vid)
{
	
	vid->logo_on	= 0;
c7e1ce6c:	e3a03000 	mov	r3, #0	; 0x0
	vid->rgb_mode	= MODE_RGB_P;
c7e1ce70:	e5803074 	str	r3, [r0, #116]
}

void init_panel_info(vidinfo_t *vid)
{
	
	vid->logo_on	= 0;
c7e1ce74:	e5803064 	str	r3, [r0, #100]
	vid->rgb_mode	= MODE_RGB_P;
	
	setenv("lcdinfo", "lcd_mipi_dsi_nt35590");
c7e1ce78:	e59f1004 	ldr	r1, [pc, #4]	; c7e1ce84 <init_panel_info+0x18>
c7e1ce7c:	e59f0004 	ldr	r0, [pc, #4]	; c7e1ce88 <init_panel_info+0x1c>
c7e1ce80:	eaffa9f2 	b	c7e07650 <setenv>
c7e1ce84:	c7e33fd2 	.word	0xc7e33fd2
c7e1ce88:	c7e33fca 	.word	0xc7e33fca

c7e1ce8c <set_system_display_ctrl>:
	/*
	 * MIFPCON[3] system register path set
	 * 0: NORMAL
	 * 1: FIMD Bypass
	 */
	cfg = readl(0x7410800c);
c7e1ce8c:	e59f1038 	ldr	r1, [pc, #56]	; c7e1cecc <set_system_display_ctrl+0x40>
c7e1ce90:	e591300c 	ldr	r3, [r1, #12]
	cfg &= ~(1 << 3);
c7e1ce94:	e3c33008 	bic	r3, r3, #8	; 0x8
	 * 00: Host I/F
	 * 01: RGB I/F
	 * 10: 601/656
	 * 11: reserved
	 */
	cfg = readl(0x7f0081a0);
c7e1ce98:	e59f2030 	ldr	r2, [pc, #48]	; c7e1ced0 <set_system_display_ctrl+0x44>
	 * 0: NORMAL
	 * 1: FIMD Bypass
	 */
	cfg = readl(0x7410800c);
	cfg &= ~(1 << 3);
	writel(cfg, 0x7410800c);
c7e1ce9c:	e581300c 	str	r3, [r1, #12]
	 * 00: Host I/F
	 * 01: RGB I/F
	 * 10: 601/656
	 * 11: reserved
	 */
	cfg = readl(0x7f0081a0);
c7e1cea0:	e59231a0 	ldr	r3, [r2, #416]
	cfg &= ~(3 << 0);
c7e1cea4:	e3c33003 	bic	r3, r3, #3	; 0x3
	cfg |= 1;
c7e1cea8:	e3833001 	orr	r3, r3, #1	; 0x1
	writel(cfg, 0x7f0081a0);
	/* set GPIO lcd function */
	GPICON_REG = 0xaaaaaaaa;
c7e1ceac:	e59f1020 	ldr	r1, [pc, #32]	; c7e1ced4 <set_system_display_ctrl+0x48>
	GPIPUD_REG = 0;
c7e1ceb0:	e3a00000 	mov	r0, #0	; 0x0
	 * 11: reserved
	 */
	cfg = readl(0x7f0081a0);
	cfg &= ~(3 << 0);
	cfg |= 1;
	writel(cfg, 0x7f0081a0);
c7e1ceb4:	e58231a0 	str	r3, [r2, #416]
	/* set GPIO lcd function */
	GPICON_REG = 0xaaaaaaaa;
c7e1ceb8:	e5821100 	str	r1, [r2, #256]
	GPIPUD_REG = 0;
c7e1cebc:	e5820108 	str	r0, [r2, #264]
	GPJCON_REG = 0xaaaaaaaa;
c7e1cec0:	e5821120 	str	r1, [r2, #288]
	GPJPUD_REG = 0;
c7e1cec4:	e5820128 	str	r0, [r2, #296]
}
c7e1cec8:	e12fff1e 	bx	lr
c7e1cecc:	74108000 	.word	0x74108000
c7e1ced0:	7f008000 	.word	0x7f008000
c7e1ced4:	aaaaaaaa 	.word	0xaaaaaaaa

c7e1ced8 <lcd_setcolreg>:

/* dummy function */
void lcd_setcolreg(ushort regno, ushort red, ushort green, ushort blue)
{
	return;
}
c7e1ced8:	e12fff1e 	bx	lr

c7e1cedc <lcd_enable>:

	s3c6410_lcd_init(&panel_info);
}

void lcd_enable(void)
{
c7e1cedc:	e92d4070 	push	{r4, r5, r6, lr}
	if (panel_info.logo_on) {
c7e1cee0:	e59f5124 	ldr	r5, [pc, #292]	; c7e1d00c <lcd_enable+0x130>
c7e1cee4:	e5953064 	ldr	r3, [r5, #100]
c7e1cee8:	e3530000 	cmp	r3, #0	; 0x0
c7e1ceec:	0a000015 	beq	c7e1cf48 <lcd_enable+0x6c>
		memset(lcd_base, 0, panel_width * panel_height *
c7e1cef0:	e5d5300e 	ldrb	r3, [r5, #14]
c7e1cef4:	e3a02001 	mov	r2, #1	; 0x1
c7e1cef8:	e1a02312 	lsl	r2, r2, r3
c7e1cefc:	e59f410c 	ldr	r4, [pc, #268]	; c7e1d010 <lcd_enable+0x134>
c7e1cf00:	e1a021c2 	asr	r2, r2, #3
c7e1cf04:	e9940009 	ldmib	r4, {r0, r3}
c7e1cf08:	e3a01000 	mov	r1, #0	; 0x0
c7e1cf0c:	e0030390 	mul	r3, r0, r3
c7e1cf10:	e5940000 	ldr	r0, [r4]
c7e1cf14:	e0020293 	mul	r2, r3, r2
c7e1cf18:	eb00171d 	bl	c7e22b94 <memset>

	x = ((panel_width - panel_info.logo_width) >> 1);
	y = ((panel_height - panel_info.logo_height) >> 1) - 4;

	addr = panel_info.logo_addr;
	bmp_display(addr, x, y);
c7e1cf1c:	e595006c 	ldr	r0, [r5, #108]
c7e1cf20:	e5942004 	ldr	r2, [r4, #4]
c7e1cf24:	e5941008 	ldr	r1, [r4, #8]
c7e1cf28:	e5953068 	ldr	r3, [r5, #104]
c7e1cf2c:	e0602002 	rsb	r2, r0, r2
c7e1cf30:	e0631001 	rsb	r1, r3, r1
c7e1cf34:	e1a020a2 	lsr	r2, r2, #1
c7e1cf38:	e5950070 	ldr	r0, [r5, #112]
c7e1cf3c:	e1a010a1 	lsr	r1, r1, #1
c7e1cf40:	e2422004 	sub	r2, r2, #4	; 0x4
c7e1cf44:	ebff921a 	bl	c7e017b4 <bmp_display>
}

static void lcd_panel_on(vidinfo_t *vid)
{
	udelay(vid->init_delay);
c7e1cf48:	e59f40bc 	ldr	r4, [pc, #188]	; c7e1d00c <lcd_enable+0x130>
c7e1cf4c:	e594003c 	ldr	r0, [r4, #60]
c7e1cf50:	eb0017dc 	bl	c7e22ec8 <udelay>

	if (vid->backlight_reset)
c7e1cf54:	e5943034 	ldr	r3, [r4, #52]
c7e1cf58:	e3530000 	cmp	r3, #0	; 0x0
c7e1cf5c:	0a000000 	beq	c7e1cf64 <lcd_enable+0x88>
		vid->backlight_reset();
c7e1cf60:	e12fff33 	blx	r3

	if (vid->cfg_gpio)
c7e1cf64:	e59f30a0 	ldr	r3, [pc, #160]	; c7e1d00c <lcd_enable+0x130>
c7e1cf68:	e5933018 	ldr	r3, [r3, #24]
c7e1cf6c:	e3530000 	cmp	r3, #0	; 0x0
c7e1cf70:	0a000000 	beq	c7e1cf78 <lcd_enable+0x9c>
		vid->cfg_gpio();
c7e1cf74:	e12fff33 	blx	r3

	if (vid->lcd_power_on)
c7e1cf78:	e59f308c 	ldr	r3, [pc, #140]	; c7e1d00c <lcd_enable+0x130>
c7e1cf7c:	e5933024 	ldr	r3, [r3, #36]
c7e1cf80:	e3530000 	cmp	r3, #0	; 0x0
c7e1cf84:	0a000000 	beq	c7e1cf8c <lcd_enable+0xb0>
		vid->lcd_power_on();
c7e1cf88:	e12fff33 	blx	r3

	udelay(vid->power_on_delay);
c7e1cf8c:	e59f4078 	ldr	r4, [pc, #120]	; c7e1d00c <lcd_enable+0x130>
c7e1cf90:	e5940040 	ldr	r0, [r4, #64]
c7e1cf94:	eb0017cb 	bl	c7e22ec8 <udelay>

	if (vid->reset_lcd) {
c7e1cf98:	e5943020 	ldr	r3, [r4, #32]
c7e1cf9c:	e3530000 	cmp	r3, #0	; 0x0
c7e1cfa0:	0a000002 	beq	c7e1cfb0 <lcd_enable+0xd4>
		vid->reset_lcd();
c7e1cfa4:	e12fff33 	blx	r3
		udelay(vid->reset_delay);
c7e1cfa8:	e5940044 	ldr	r0, [r4, #68]
c7e1cfac:	eb0017c5 	bl	c7e22ec8 <udelay>
	}

	if (vid->backlight_on)
c7e1cfb0:	e59f3054 	ldr	r3, [pc, #84]	; c7e1d00c <lcd_enable+0x130>
c7e1cfb4:	e593301c 	ldr	r3, [r3, #28]
c7e1cfb8:	e3530000 	cmp	r3, #0	; 0x0
c7e1cfbc:	0a000001 	beq	c7e1cfc8 <lcd_enable+0xec>
		vid->backlight_on(1);
c7e1cfc0:	e3a00001 	mov	r0, #1	; 0x1
c7e1cfc4:	e12fff33 	blx	r3

	if (vid->cfg_ldo)
c7e1cfc8:	e59f303c 	ldr	r3, [pc, #60]	; c7e1d00c <lcd_enable+0x130>
c7e1cfcc:	e5933028 	ldr	r3, [r3, #40]
c7e1cfd0:	e3530000 	cmp	r3, #0	; 0x0
c7e1cfd4:	0a000000 	beq	c7e1cfdc <lcd_enable+0x100>
		vid->cfg_ldo();
c7e1cfd8:	e12fff33 	blx	r3

	if (vid->enable_ldo)
c7e1cfdc:	e59f3028 	ldr	r3, [pc, #40]	; c7e1d00c <lcd_enable+0x130>
c7e1cfe0:	e593302c 	ldr	r3, [r3, #44]
c7e1cfe4:	e3530000 	cmp	r3, #0	; 0x0
c7e1cfe8:	0a000001 	beq	c7e1cff4 <lcd_enable+0x118>
		vid->enable_ldo(1);
c7e1cfec:	e3a00001 	mov	r0, #1	; 0x1
c7e1cff0:	e12fff33 	blx	r3

	if (vid->mipi_enabled)
c7e1cff4:	e59f3010 	ldr	r3, [pc, #16]	; c7e1d00c <lcd_enable+0x130>
c7e1cff8:	e593304c 	ldr	r3, [r3, #76]
c7e1cffc:	e3530000 	cmp	r3, #0	; 0x0
c7e1d000:	08bd8070 	popeq	{r4, r5, r6, pc}
				(NBITS(panel_info.vl_bpix) >> 3));
		draw_logo();
	}

	lcd_panel_on(&panel_info);
}
c7e1d004:	e8bd4070 	pop	{r4, r5, r6, lr}

	if (vid->enable_ldo)
		vid->enable_ldo(1);

	if (vid->mipi_enabled)
		mipi_dsi_init();
c7e1d008:	eaffff62 	b	c7e1cd98 <mipi_dsi_init>
c7e1d00c:	c7e3a234 	.word	0xc7e3a234
c7e1d010:	c7e421cc 	.word	0xc7e421cc

c7e1d014 <lcd_ctrl_init>:
	GPJCON_REG = 0xaaaaaaaa;
	GPJPUD_REG = 0;
}

void lcd_ctrl_init(void *lcdbase)
{
c7e1d014:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	set_system_display_ctrl();

	/* initialize parameters which is specific to panel. */
	init_panel_info(&panel_info);
c7e1d018:	e59f4064 	ldr	r4, [pc, #100]	; c7e1d084 <lcd_ctrl_init+0x70>
	GPJCON_REG = 0xaaaaaaaa;
	GPJPUD_REG = 0;
}

void lcd_ctrl_init(void *lcdbase)
{
c7e1d01c:	e1a07000 	mov	r7, r0
	set_system_display_ctrl();
c7e1d020:	ebffff99 	bl	c7e1ce8c <set_system_display_ctrl>

	/* initialize parameters which is specific to panel. */
	init_panel_info(&panel_info);
c7e1d024:	e1a00004 	mov	r0, r4
c7e1d028:	ebffff8f 	bl	c7e1ce6c <init_panel_info>
static void s3c6410_lcd_init_mem(void *lcdbase, vidinfo_t *vid)
{
	unsigned long palette_size;
	unsigned int fb_size;

	fb_size = vid->vl_row * vid->vl_col * (NBITS(vid->vl_bpix) >> 3);
c7e1d02c:	e5d4300e 	ldrb	r3, [r4, #14]
c7e1d030:	e3a02001 	mov	r2, #1	; 0x1
c7e1d034:	e1a02312 	lsl	r2, r2, r3
c7e1d038:	e1d410b2 	ldrh	r1, [r4, #2]
c7e1d03c:	e1d430b0 	ldrh	r3, [r4]
	set_system_display_ctrl();

	/* initialize parameters which is specific to panel. */
	init_panel_info(&panel_info);

	panel_width = panel_info.vl_width;
c7e1d040:	e59fc040 	ldr	ip, [pc, #64]	; c7e1d088 <lcd_ctrl_init+0x74>

	lcd_base = lcdbase;

	palette_size = NBITS(vid->vl_bpix) == 8 ? 256 : 16;

	s3c6410_fimd_lcd_init_mem((unsigned long)lcd_base,
c7e1d044:	e0010193 	mul	r1, r3, r1
c7e1d048:	e3520008 	cmp	r2, #8	; 0x8
c7e1d04c:	e1a031c2 	asr	r3, r2, #3
	set_system_display_ctrl();

	/* initialize parameters which is specific to panel. */
	init_panel_info(&panel_info);

	panel_width = panel_info.vl_width;
c7e1d050:	e1d450b4 	ldrh	r5, [r4, #4]
	panel_height = panel_info.vl_height;
c7e1d054:	e1d460b6 	ldrh	r6, [r4, #6]

	lcd_base = lcdbase;

	palette_size = NBITS(vid->vl_bpix) == 8 ? 256 : 16;

	s3c6410_fimd_lcd_init_mem((unsigned long)lcd_base,
c7e1d058:	e1a00007 	mov	r0, r7
c7e1d05c:	e0010193 	mul	r1, r3, r1
c7e1d060:	13a02010 	movne	r2, #16	; 0x10
c7e1d064:	03a02c01 	moveq	r2, #256	; 0x100
	set_system_display_ctrl();

	/* initialize parameters which is specific to panel. */
	init_panel_info(&panel_info);

	panel_width = panel_info.vl_width;
c7e1d068:	e58c5008 	str	r5, [ip, #8]
	panel_height = panel_info.vl_height;
c7e1d06c:	e58c6004 	str	r6, [ip, #4]
	unsigned long palette_size;
	unsigned int fb_size;

	fb_size = vid->vl_row * vid->vl_col * (NBITS(vid->vl_bpix) >> 3);

	lcd_base = lcdbase;
c7e1d070:	e58c7000 	str	r7, [ip]

	palette_size = NBITS(vid->vl_bpix) == 8 ? 256 : 16;

	s3c6410_fimd_lcd_init_mem((unsigned long)lcd_base,
c7e1d074:	eb000004 	bl	c7e1d08c <s3c6410_fimd_lcd_init_mem>
			(unsigned long)fb_size, palette_size);
}

static void s3c6410_lcd_init(vidinfo_t *vid)
{
	s3c6410_fimd_lcd_init(vid);
c7e1d078:	e1a00004 	mov	r0, r4
	panel_height = panel_info.vl_height;

	s3c6410_lcd_init_mem(lcdbase, &panel_info);

	s3c6410_lcd_init(&panel_info);
}
c7e1d07c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
			(unsigned long)fb_size, palette_size);
}

static void s3c6410_lcd_init(vidinfo_t *vid)
{
	s3c6410_fimd_lcd_init(vid);
c7e1d080:	ea00002c 	b	c7e1d138 <s3c6410_fimd_lcd_init>
c7e1d084:	c7e3a234 	.word	0xc7e3a234
c7e1d088:	c7e421cc 	.word	0xc7e421cc

c7e1d08c <s3c6410_fimd_lcd_init_mem>:
static vidinfo_t *pvid;

void s3c6410_fimd_lcd_init_mem(u_long screen_base, u_long fb_size,
		u_long palette_size)
{
	lcd_base_addr = (unsigned long *)screen_base;
c7e1d08c:	e59f3004 	ldr	r3, [pc, #4]	; c7e1d098 <s3c6410_fimd_lcd_init_mem+0xc>
c7e1d090:	e5830000 	str	r0, [r3]
}
c7e1d094:	e12fff1e 	bx	lr
c7e1d098:	c7e421ec 	.word	0xc7e421ec

c7e1d09c <s3c6410_set_trigger>:
{
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	cfg = readl(&fimd_ctrl->trigcon);
c7e1d09c:	e59f200c 	ldr	r2, [pc, #12]	; c7e1d0b0 <s3c6410_set_trigger+0x14>
c7e1d0a0:	e5923000 	ldr	r3, [r2]

	cfg |= (S3C6410_I80SOFT_TRIG_EN | S3C6410_I80START_TRIG);
c7e1d0a4:	e3833003 	orr	r3, r3, #3	; 0x3

	writel(cfg, &fimd_ctrl->trigcon);
c7e1d0a8:	e5823000 	str	r3, [r2]
}
c7e1d0ac:	e12fff1e 	bx	lr
c7e1d0b0:	77100194 	.word	0x77100194

c7e1d0b4 <s3c6410_is_i80_frame_done>:
	unsigned int cfg = 0;
	int status;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	cfg = readl(&fimd_ctrl->trigcon);
c7e1d0b4:	e59f300c 	ldr	r3, [pc, #12]	; c7e1d0c8 <s3c6410_is_i80_frame_done+0x14>
c7e1d0b8:	e5930000 	ldr	r0, [r3]
c7e1d0bc:	e1a00120 	lsr	r0, r0, #2
	/* frame done func is valid only when TRIMODE[0] is set to 1. */
	status = (cfg & S3C6410_I80STATUS_TRIG_DONE) ==
			S3C6410_I80STATUS_TRIG_DONE;

	return status;
}
c7e1d0c0:	e2000001 	and	r0, r0, #1	; 0x1
c7e1d0c4:	e12fff1e 	bx	lr
c7e1d0c8:	77100194 	.word	0x77100194

c7e1d0cc <s3c6410_fimd_lcd_off>:
{
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	cfg = readl(&fimd_ctrl->vidcon0);
c7e1d0cc:	e59f200c 	ldr	r2, [pc, #12]	; c7e1d0e0 <s3c6410_fimd_lcd_off+0x14>
c7e1d0d0:	e5923000 	ldr	r3, [r2]
	cfg &= (S3C6410_VIDCON0_ENVID_DISABLE | S3C6410_VIDCON0_ENVID_F_DISABLE);
	writel(cfg, &fimd_ctrl->vidcon0);
c7e1d0d4:	e3a03000 	mov	r3, #0	; 0x0
c7e1d0d8:	e5823000 	str	r3, [r2]
}
c7e1d0dc:	e12fff1e 	bx	lr
c7e1d0e0:	77100000 	.word	0x77100000

c7e1d0e4 <s3c6410_fimd_window_off>:
{
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	cfg = readl((unsigned int)&fimd_ctrl->wincon0 +
c7e1d0e4:	e59f200c 	ldr	r2, [pc, #12]	; c7e1d0f8 <s3c6410_fimd_window_off+0x14>
c7e1d0e8:	e7923100 	ldr	r3, [r2, r0, lsl #2]
			S3C6410_WINCON(win_id));
	cfg &= S3C6410_WINCON_ENWIN_DISABLE;
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
c7e1d0ec:	e3a03000 	mov	r3, #0	; 0x0
c7e1d0f0:	e7823100 	str	r3, [r2, r0, lsl #2]
			S3C6410_WINCON(win_id));
}
c7e1d0f4:	e12fff1e 	bx	lr
c7e1d0f8:	77100020 	.word	0x77100020

c7e1d0fc <s3c6410_fimd_calc_fbsize>:
	s3c6410_fimd_window_on(pvid->win_id);
}

unsigned long s3c6410_fimd_calc_fbsize(void)
{
	return pvid->vl_col * pvid->vl_row * (NBITS(pvid->vl_bpix) / 8);
c7e1d0fc:	e59f3030 	ldr	r3, [pc, #48]	; c7e1d134 <s3c6410_fimd_calc_fbsize+0x38>
c7e1d100:	e5932004 	ldr	r2, [r3, #4]
c7e1d104:	e3a03001 	mov	r3, #1	; 0x1
c7e1d108:	e5d2100e 	ldrb	r1, [r2, #14]
c7e1d10c:	e1d200b2 	ldrh	r0, [r2, #2]
c7e1d110:	e1a03113 	lsl	r3, r3, r1
c7e1d114:	e1d220b0 	ldrh	r2, [r2]
c7e1d118:	e2831007 	add	r1, r3, #7	; 0x7
c7e1d11c:	e0020290 	mul	r2, r0, r2
c7e1d120:	e3530000 	cmp	r3, #0	; 0x0
c7e1d124:	b1a03001 	movlt	r3, r1
c7e1d128:	e1a031c3 	asr	r3, r3, #3
}
c7e1d12c:	e0000293 	mul	r0, r3, r2
c7e1d130:	e12fff1e 	bx	lr
c7e1d134:	c7e421ec 	.word	0xc7e421ec

c7e1d138 <s3c6410_fimd_lcd_init>:
	/* store panel info to global variable */
	pvid = vid;

	rgb_mode = vid->rgb_mode;

	if (vid->interface_mode == FIMD_RGB_INTERFACE) {
c7e1d138:	e5903048 	ldr	r3, [r0, #72]
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	offset = 0;

	/* store panel info to global variable */
	pvid = vid;
c7e1d13c:	e59fc380 	ldr	ip, [pc, #896]	; c7e1d4c4 <s3c6410_fimd_lcd_init+0x38c>

	rgb_mode = vid->rgb_mode;

	if (vid->interface_mode == FIMD_RGB_INTERFACE) {
c7e1d140:	e3530001 	cmp	r3, #1	; 0x1
			S3C6410_WINCON(win_id));
}


void s3c6410_fimd_lcd_init(vidinfo_t *vid)
{
c7e1d144:	e92d44f3 	push	{r0, r1, r4, r5, r6, r7, sl, lr}
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	offset = 0;

	/* store panel info to global variable */
	pvid = vid;
c7e1d148:	e58c0004 	str	r0, [ip, #4]

	rgb_mode = vid->rgb_mode;
c7e1d14c:	e590e074 	ldr	lr, [r0, #116]

	if (vid->interface_mode == FIMD_RGB_INTERFACE) {
c7e1d150:	1a000043 	bne	c7e1d264 <s3c6410_fimd_lcd_init+0x12c>
		cfg |= S3C6410_VIDCON0_VIDOUT_RGB;
		writel(cfg, &fimd_ctrl->vidcon0);
c7e1d154:	e59f336c 	ldr	r3, [pc, #876]	; c7e1d4c8 <s3c6410_fimd_lcd_init+0x390>

		cfg = readl(&fimd_ctrl->vidcon2);
c7e1d158:	e59f136c 	ldr	r1, [pc, #876]	; c7e1d4cc <s3c6410_fimd_lcd_init+0x394>

	rgb_mode = vid->rgb_mode;

	if (vid->interface_mode == FIMD_RGB_INTERFACE) {
		cfg |= S3C6410_VIDCON0_VIDOUT_RGB;
		writel(cfg, &fimd_ctrl->vidcon0);
c7e1d15c:	e3a02000 	mov	r2, #0	; 0x0
c7e1d160:	e5832000 	str	r2, [r3]

		cfg = readl(&fimd_ctrl->vidcon2);
c7e1d164:	e5913000 	ldr	r3, [r1]
		cfg &= ~(S3C6410_VIDCON2_WB_MASK |
c7e1d168:	e3c33a0f 	bic	r3, r3, #61440	; 0xf000
		cfg |= S3C6410_VIDCON2_WB_DISABLE;
		writel(cfg, &fimd_ctrl->vidcon2);

		/* set polarity */
		cfg = 0;
		if (!pvid->vl_clkp)
c7e1d16c:	e59c0004 	ldr	r0, [ip, #4]
		cfg = readl(&fimd_ctrl->vidcon2);
		cfg &= ~(S3C6410_VIDCON2_WB_MASK |
			S3C6410_VIDCON2_TVFORMATSEL_MASK |
			S3C6410_VIDCON2_TVFORMATSEL_YUV_MASK);
		cfg |= S3C6410_VIDCON2_WB_DISABLE;
		writel(cfg, &fimd_ctrl->vidcon2);
c7e1d170:	e5813000 	str	r3, [r1]

		/* set polarity */
		cfg = 0;
		if (!pvid->vl_clkp)
c7e1d174:	e5d03009 	ldrb	r3, [r0, #9]
			cfg |= S3C6410_VIDCON1_IVCLK_RISING_EDGE;
		if (!pvid->vl_hsp)
c7e1d178:	e5d0200b 	ldrb	r2, [r0, #11]
		cfg |= S3C6410_VIDCON2_WB_DISABLE;
		writel(cfg, &fimd_ctrl->vidcon2);

		/* set polarity */
		cfg = 0;
		if (!pvid->vl_clkp)
c7e1d17c:	e3530000 	cmp	r3, #0	; 0x0
			cfg |= S3C6410_VIDCON1_IVCLK_RISING_EDGE;
		if (!pvid->vl_hsp)
			cfg |= S3C6410_VIDCON1_IHSYNC_INVERT;
		if (!pvid->vl_vsp)
c7e1d180:	e5d0300c 	ldrb	r3, [r0, #12]
		cfg |= S3C6410_VIDCON2_WB_DISABLE;
		writel(cfg, &fimd_ctrl->vidcon2);

		/* set polarity */
		cfg = 0;
		if (!pvid->vl_clkp)
c7e1d184:	03a01080 	moveq	r1, #128	; 0x80
c7e1d188:	13a01000 	movne	r1, #0	; 0x0
			cfg |= S3C6410_VIDCON1_IVCLK_RISING_EDGE;
		if (!pvid->vl_hsp)
c7e1d18c:	e3520000 	cmp	r2, #0	; 0x0
			cfg |= S3C6410_VIDCON1_IHSYNC_INVERT;
c7e1d190:	03811040 	orreq	r1, r1, #64	; 0x40
		if (!pvid->vl_vsp)
c7e1d194:	e3530000 	cmp	r3, #0	; 0x0
			cfg |= S3C6410_VIDCON1_IVSYNC_INVERT;
		if (!pvid->vl_dp)
c7e1d198:	e5d0300d 	ldrb	r3, [r0, #13]
		if (!pvid->vl_clkp)
			cfg |= S3C6410_VIDCON1_IVCLK_RISING_EDGE;
		if (!pvid->vl_hsp)
			cfg |= S3C6410_VIDCON1_IHSYNC_INVERT;
		if (!pvid->vl_vsp)
			cfg |= S3C6410_VIDCON1_IVSYNC_INVERT;
c7e1d19c:	03811020 	orreq	r1, r1, #32	; 0x20
		if (!pvid->vl_dp)
c7e1d1a0:	e3530000 	cmp	r3, #0	; 0x0
			cfg |= S3C6410_VIDCON1_IVDEN_INVERT;
c7e1d1a4:	03811010 	orreq	r1, r1, #16	; 0x10

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
c7e1d1a8:	e59fc314 	ldr	ip, [pc, #788]	; c7e1d4c4 <s3c6410_fimd_lcd_init+0x38c>
		if (!pvid->vl_vsp)
			cfg |= S3C6410_VIDCON1_IVSYNC_INVERT;
		if (!pvid->vl_dp)
			cfg |= S3C6410_VIDCON1_IVDEN_INVERT;

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);
c7e1d1ac:	e59f331c 	ldr	r3, [pc, #796]	; c7e1d4d0 <s3c6410_fimd_lcd_init+0x398>

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
c7e1d1b0:	e59c2004 	ldr	r2, [ip, #4]
		if (!pvid->vl_vsp)
			cfg |= S3C6410_VIDCON1_IVSYNC_INVERT;
		if (!pvid->vl_dp)
			cfg |= S3C6410_VIDCON1_IVDEN_INVERT;

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);
c7e1d1b4:	e5831000 	str	r1, [r3]

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
c7e1d1b8:	e5d23013 	ldrb	r3, [r2, #19]
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
c7e1d1bc:	e5d21014 	ldrb	r1, [r2, #20]
			cfg |= S3C6410_VIDCON1_IVDEN_INVERT;

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
c7e1d1c0:	e2433001 	sub	r3, r3, #1	; 0x1
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
c7e1d1c4:	e5d22012 	ldrb	r2, [r2, #18]
			cfg |= S3C6410_VIDCON1_IVDEN_INVERT;

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
c7e1d1c8:	e1a03403 	lsl	r3, r3, #8
c7e1d1cc:	e1a03803 	lsl	r3, r3, #16
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
c7e1d1d0:	e2411001 	sub	r1, r1, #1	; 0x1
c7e1d1d4:	e20110ff 	and	r1, r1, #255	; 0xff
			cfg |= S3C6410_VIDCON1_IVDEN_INVERT;

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
c7e1d1d8:	e1a03823 	lsr	r3, r3, #16
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
c7e1d1dc:	e2422001 	sub	r2, r2, #1	; 0x1

		writel(cfg, (unsigned int)&fimd_ctrl->vidcon1 + offset);

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
c7e1d1e0:	e1833801 	orr	r3, r3, r1, lsl #16
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
c7e1d1e4:	e20220ff 	and	r2, r2, #255	; 0xff
c7e1d1e8:	e1833002 	orr	r3, r3, r2
		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon0 + offset);
c7e1d1ec:	e59f22e0 	ldr	r2, [pc, #736]	; c7e1d4d4 <s3c6410_fimd_lcd_init+0x39c>

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
c7e1d1f0:	e59c1004 	ldr	r1, [ip, #4]

		/* set timing */
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon0 + offset);
c7e1d1f4:	e5823000 	str	r3, [r2]

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
c7e1d1f8:	e5d10010 	ldrb	r0, [r1, #16]
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
c7e1d1fc:	e5d12011 	ldrb	r2, [r1, #17]
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon0 + offset);

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
c7e1d200:	e2400001 	sub	r0, r0, #1	; 0x1
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
		cfg |= S3C6410_VIDTCON1_HSPW(pvid->vl_hspw - 1);
c7e1d204:	e5d1300f 	ldrb	r3, [r1, #15]
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon0 + offset);

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
c7e1d208:	e1a00400 	lsl	r0, r0, #8
c7e1d20c:	e1a00800 	lsl	r0, r0, #16
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
c7e1d210:	e2422001 	sub	r2, r2, #1	; 0x1
c7e1d214:	e20220ff 	and	r2, r2, #255	; 0xff
		cfg = S3C6410_VIDTCON0_VFPD(pvid->vl_vfpd - 1);
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon0 + offset);

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
c7e1d218:	e1a00820 	lsr	r0, r0, #16
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
		cfg |= S3C6410_VIDTCON1_HSPW(pvid->vl_hspw - 1);
c7e1d21c:	e2433001 	sub	r3, r3, #1	; 0x1
		cfg |= S3C6410_VIDTCON0_VBPD(pvid->vl_vbpd - 1);
		cfg |= S3C6410_VIDTCON0_VSPW(pvid->vl_vspw - 1);
		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon0 + offset);

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
c7e1d220:	e1800802 	orr	r0, r0, r2, lsl #16
		cfg |= S3C6410_VIDTCON1_HSPW(pvid->vl_hspw - 1);
c7e1d224:	e20330ff 	and	r3, r3, #255	; 0xff
c7e1d228:	e1800003 	orr	r0, r0, r3

		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon1 + offset);

		/* set lcd size */
		cfg = S3C6410_VIDTCON2_HOZVAL(pvid->vl_col - 1) |
c7e1d22c:	e59c3004 	ldr	r3, [ip, #4]

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
		cfg |= S3C6410_VIDTCON1_HSPW(pvid->vl_hspw - 1);

		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon1 + offset);
c7e1d230:	e59f12a0 	ldr	r1, [pc, #672]	; c7e1d4d8 <s3c6410_fimd_lcd_init+0x3a0>

		/* set lcd size */
		cfg = S3C6410_VIDTCON2_HOZVAL(pvid->vl_col - 1) |
c7e1d234:	e1d320b0 	ldrh	r2, [r3]
c7e1d238:	e1d330b2 	ldrh	r3, [r3, #2]
c7e1d23c:	e2422001 	sub	r2, r2, #1	; 0x1
c7e1d240:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1d244:	e1a03a83 	lsl	r3, r3, #21
c7e1d248:	e1a02a82 	lsl	r2, r2, #21
c7e1d24c:	e1a03aa3 	lsr	r3, r3, #21
c7e1d250:	e1a02aa2 	lsr	r2, r2, #21

		cfg = S3C6410_VIDTCON1_HFPD(pvid->vl_hfpd - 1);
		cfg |= S3C6410_VIDTCON1_HBPD(pvid->vl_hbpd - 1);
		cfg |= S3C6410_VIDTCON1_HSPW(pvid->vl_hspw - 1);

		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon1 + offset);
c7e1d254:	e5810000 	str	r0, [r1]

		/* set lcd size */
		cfg = S3C6410_VIDTCON2_HOZVAL(pvid->vl_col - 1) |
c7e1d258:	e1822583 	orr	r2, r2, r3, lsl #11
			S3C6410_VIDTCON2_LINEVAL(pvid->vl_row - 1);

		writel(cfg, (unsigned int)&fimd_ctrl->vidtcon2 + offset);
c7e1d25c:	e59f3278 	ldr	r3, [pc, #632]	; c7e1d4dc <s3c6410_fimd_lcd_init+0x3a4>
c7e1d260:	e5832000 	str	r2, [r3]
	}

	/* set display mode */
	cfg = readl(&fimd_ctrl->vidcon0);
c7e1d264:	e59fa25c 	ldr	sl, [pc, #604]	; c7e1d4c8 <s3c6410_fimd_lcd_init+0x390>
c7e1d268:	e59a3000 	ldr	r3, [sl]
	cfg &= ~S3C6410_VIDCON0_PNRMODE_MASK;
c7e1d26c:	e3c33806 	bic	r3, r3, #393216	; 0x60000
	cfg |= (rgb_mode << S3C6410_VIDCON0_PNRMODE_SHIFT);
c7e1d270:	e183388e 	orr	r3, r3, lr, lsl #17
	writel(cfg, &fimd_ctrl->vidcon0);

	/* set par */
	s3c6410_fimd_set_par(pvid->win_id);
c7e1d274:	e59fe248 	ldr	lr, [pc, #584]	; c7e1d4c4 <s3c6410_fimd_lcd_init+0x38c>

	/* set display mode */
	cfg = readl(&fimd_ctrl->vidcon0);
	cfg &= ~S3C6410_VIDCON0_PNRMODE_MASK;
	cfg |= (rgb_mode << S3C6410_VIDCON0_PNRMODE_SHIFT);
	writel(cfg, &fimd_ctrl->vidcon0);
c7e1d278:	e58a3000 	str	r3, [sl]

	/* set par */
	s3c6410_fimd_set_par(pvid->win_id);
c7e1d27c:	e59e3004 	ldr	r3, [lr, #4]
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	/* set window control */
	cfg = readl((unsigned int)&fimd_ctrl->wincon0 +
c7e1d280:	e59f2258 	ldr	r2, [pc, #600]	; c7e1d4e0 <s3c6410_fimd_lcd_init+0x3a8>
	cfg &= ~S3C6410_VIDCON0_PNRMODE_MASK;
	cfg |= (rgb_mode << S3C6410_VIDCON0_PNRMODE_SHIFT);
	writel(cfg, &fimd_ctrl->vidcon0);

	/* set par */
	s3c6410_fimd_set_par(pvid->win_id);
c7e1d284:	e593c038 	ldr	ip, [r3, #56]
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	/* set window control */
	cfg = readl((unsigned int)&fimd_ctrl->wincon0 +
c7e1d288:	e1a0310c 	lsl	r3, ip, #2
c7e1d28c:	e0832002 	add	r2, r3, r2
c7e1d290:	e5921000 	ldr	r1, [r2]
			S3C6410_WINCON(win_id));

	cfg &= ~(S3C6410_WINCON_BITSWP_ENABLE | S3C6410_WINCON_BYTESWP_ENABLE |
c7e1d294:	e59f3248 	ldr	r3, [pc, #584]	; c7e1d4e4 <s3c6410_fimd_lcd_init+0x3ac>
c7e1d298:	e0013003 	and	r3, r1, r3

	/* dma burst is 16 */
	cfg |= S3C6410_WINCON_BURSTLEN_16WORD;

	/* pixel format is unpacked RGB888 */
	cfg |= S3C6410_WINCON_BPPMODE_24BPP_888;
c7e1d29c:	e383302c 	orr	r3, r3, #44	; 0x2c

	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
c7e1d2a0:	e5823000 	str	r3, [r2]
	/* set window position to x=0, y=0*/
	cfg = S3C6410_VIDOSD_LEFT_X(0) | S3C6410_VIDOSD_TOP_Y(0);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0a +
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
c7e1d2a4:	e59e3004 	ldr	r3, [lr, #4]
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
			S3C6410_WINCON(win_id));

	/* set window position to x=0, y=0*/
	cfg = S3C6410_VIDOSD_LEFT_X(0) | S3C6410_VIDOSD_TOP_Y(0);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0a +
c7e1d2a8:	e59f0238 	ldr	r0, [pc, #568]	; c7e1d4e8 <s3c6410_fimd_lcd_init+0x3b0>
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
c7e1d2ac:	e1d310b2 	ldrh	r1, [r3, #2]
c7e1d2b0:	e1d330b0 	ldrh	r3, [r3]
c7e1d2b4:	e2411001 	sub	r1, r1, #1	; 0x1
c7e1d2b8:	e2433001 	sub	r3, r3, #1	; 0x1
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
			S3C6410_WINCON(win_id));

	/* set window position to x=0, y=0*/
	cfg = S3C6410_VIDOSD_LEFT_X(0) | S3C6410_VIDOSD_TOP_Y(0);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0a +
c7e1d2bc:	e1a0c20c 	lsl	ip, ip, #4
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
c7e1d2c0:	e1a03a83 	lsl	r3, r3, #21
c7e1d2c4:	e1a01a81 	lsl	r1, r1, #21
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
			S3C6410_WINCON(win_id));

	/* set window position to x=0, y=0*/
	cfg = S3C6410_VIDOSD_LEFT_X(0) | S3C6410_VIDOSD_TOP_Y(0);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0a +
c7e1d2c8:	e08c0000 	add	r0, ip, r0
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
c7e1d2cc:	e1a03aa3 	lsr	r3, r3, #21
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
			S3C6410_WINCON(win_id));

	/* set window position to x=0, y=0*/
	cfg = S3C6410_VIDOSD_LEFT_X(0) | S3C6410_VIDOSD_TOP_Y(0);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0a +
c7e1d2d0:	e3a02000 	mov	r2, #0	; 0x0
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
c7e1d2d4:	e1a01aa1 	lsr	r1, r1, #21
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
			S3C6410_WINCON(win_id));

	/* set window position to x=0, y=0*/
	cfg = S3C6410_VIDOSD_LEFT_X(0) | S3C6410_VIDOSD_TOP_Y(0);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0a +
c7e1d2d8:	e5802000 	str	r2, [r0]
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
c7e1d2dc:	e1811583 	orr	r1, r1, r3, lsl #11

	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0b +
			S3C6410_VIDOSD(win_id));

	/* set window size for window0*/
	cfg = S3C6410_VIDOSD_SIZE(pvid->vl_col * pvid->vl_row);
c7e1d2e0:	e59e2004 	ldr	r2, [lr, #4]
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
		S3C6410_VIDOSD_BOTTOM_Y(pvid->vl_row - 1);

	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0b +
c7e1d2e4:	e59f3200 	ldr	r3, [pc, #512]	; c7e1d4ec <s3c6410_fimd_lcd_init+0x3b4>
			S3C6410_VIDOSD(win_id));

	/* set window size for window0*/
	cfg = S3C6410_VIDOSD_SIZE(pvid->vl_col * pvid->vl_row);
c7e1d2e8:	e1d200b0 	ldrh	r0, [r2]
c7e1d2ec:	e1d220b2 	ldrh	r2, [r2, #2]
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
		S3C6410_VIDOSD_BOTTOM_Y(pvid->vl_row - 1);

	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0b +
c7e1d2f0:	e08c3003 	add	r3, ip, r3
			S3C6410_VIDOSD(win_id));

	/* set window size for window0*/
	cfg = S3C6410_VIDOSD_SIZE(pvid->vl_col * pvid->vl_row);
c7e1d2f4:	e0020290 	mul	r2, r0, r2
			S3C6410_VIDOSD(win_id));

	cfg = S3C6410_VIDOSD_RIGHT_X(pvid->vl_col - 1) |
		S3C6410_VIDOSD_BOTTOM_Y(pvid->vl_row - 1);

	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0b +
c7e1d2f8:	e5831000 	str	r1, [r3]
			S3C6410_VIDOSD(win_id));

	/* set window size for window0*/
	cfg = S3C6410_VIDOSD_SIZE(pvid->vl_col * pvid->vl_row);
c7e1d2fc:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0c +
c7e1d300:	e59f31e8 	ldr	r3, [pc, #488]	; c7e1d4f0 <s3c6410_fimd_lcd_init+0x3b8>

	/* set par */
	s3c6410_fimd_set_par(pvid->win_id);

	/* set memory address */
	s3c6410_fimd_set_buffer_address(pvid->win_id);
c7e1d304:	e59e0004 	ldr	r0, [lr, #4]
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0b +
			S3C6410_VIDOSD(win_id));

	/* set window size for window0*/
	cfg = S3C6410_VIDOSD_SIZE(pvid->vl_col * pvid->vl_row);
	writel(cfg, (unsigned int)&fimd_ctrl->vidosd0c +
c7e1d308:	e08c3003 	add	r3, ip, r3
c7e1d30c:	e5832000 	str	r2, [r3]
	unsigned long start_addr, end_addr;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	start_addr = (unsigned long)lcd_base_addr;
	end_addr = start_addr + ((pvid->vl_col * (NBITS(pvid->vl_bpix) / 8)) *
c7e1d310:	e5d0200e 	ldrb	r2, [r0, #14]
c7e1d314:	e3a03001 	mov	r3, #1	; 0x1
c7e1d318:	e1a03213 	lsl	r3, r3, r2
c7e1d31c:	e1d0c0b2 	ldrh	ip, [r0, #2]
c7e1d320:	e1d020b0 	ldrh	r2, [r0]
c7e1d324:	e2831007 	add	r1, r3, #7	; 0x7
c7e1d328:	e002029c 	mul	r2, ip, r2
c7e1d32c:	e3530000 	cmp	r3, #0	; 0x0
c7e1d330:	b1a03001 	movlt	r3, r1
{
	unsigned long start_addr, end_addr;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	start_addr = (unsigned long)lcd_base_addr;
c7e1d334:	e59e1000 	ldr	r1, [lr]
	end_addr = start_addr + ((pvid->vl_col * (NBITS(pvid->vl_bpix) / 8)) *
c7e1d338:	e1a031c3 	asr	r3, r3, #3
c7e1d33c:	e02c1293 	mla	ip, r3, r2, r1

	/* set par */
	s3c6410_fimd_set_par(pvid->win_id);

	/* set memory address */
	s3c6410_fimd_set_buffer_address(pvid->win_id);
c7e1d340:	e5902038 	ldr	r2, [r0, #56]

	start_addr = (unsigned long)lcd_base_addr;
	end_addr = start_addr + ((pvid->vl_col * (NBITS(pvid->vl_bpix) / 8)) *
				pvid->vl_row);

	writel(start_addr, (unsigned int)&fimd_ctrl->vidw00add0b0 +
c7e1d344:	e59f31a8 	ldr	r3, [pc, #424]	; c7e1d4f4 <s3c6410_fimd_lcd_init+0x3bc>
c7e1d348:	e1a02182 	lsl	r2, r2, #3
c7e1d34c:	e0823003 	add	r3, r2, r3
c7e1d350:	e5831000 	str	r1, [r3]
			S3C6410_BUFFER_OFFSET(win_id));
	writel(end_addr, (unsigned int)&fimd_ctrl->vidw00add1b0 +
c7e1d354:	e59f319c 	ldr	r3, [pc, #412]	; c7e1d4f8 <s3c6410_fimd_lcd_init+0x3c0>

	/* set memory address */
	s3c6410_fimd_set_buffer_address(pvid->win_id);

	/* set buffer size */
	cfg = S3C6410_VIDADDR_PAGEWIDTH(pvid->vl_col * NBITS(pvid->vl_bpix) / 8) |
c7e1d358:	e59e1004 	ldr	r1, [lr, #4]
	end_addr = start_addr + ((pvid->vl_col * (NBITS(pvid->vl_bpix) / 8)) *
				pvid->vl_row);

	writel(start_addr, (unsigned int)&fimd_ctrl->vidw00add0b0 +
			S3C6410_BUFFER_OFFSET(win_id));
	writel(end_addr, (unsigned int)&fimd_ctrl->vidw00add1b0 +
c7e1d35c:	e0823003 	add	r3, r2, r3
c7e1d360:	e583c000 	str	ip, [r3]

	/* set memory address */
	s3c6410_fimd_set_buffer_address(pvid->win_id);

	/* set buffer size */
	cfg = S3C6410_VIDADDR_PAGEWIDTH(pvid->vl_col * NBITS(pvid->vl_bpix) / 8) |
c7e1d364:	e5d1300e 	ldrb	r3, [r1, #14]
c7e1d368:	e1d120b0 	ldrh	r2, [r1]
c7e1d36c:	e1a02312 	lsl	r2, r2, r3
c7e1d370:	e2823007 	add	r3, r2, #7	; 0x7
c7e1d374:	e3520000 	cmp	r2, #0	; 0x0
c7e1d378:	b1a02003 	movlt	r2, r3
c7e1d37c:	e1a021c2 	asr	r2, r2, #3
c7e1d380:	e1a02982 	lsl	r2, r2, #19
c7e1d384:	e1a029a2 	lsr	r2, r2, #19
		S3C6410_VIDADDR_OFFSIZE(0);

	writel(cfg, (unsigned int)&fimd_ctrl->vidw00add2 +
c7e1d388:	e59e4004 	ldr	r4, [lr, #4]
c7e1d38c:	e59f1168 	ldr	r1, [pc, #360]	; c7e1d4fc <s3c6410_fimd_lcd_init+0x3c4>
c7e1d390:	e5943038 	ldr	r3, [r4, #56]
c7e1d394:	e1a03103 	lsl	r3, r3, #2
c7e1d398:	e0831001 	add	r1, r3, r1
c7e1d39c:	e5812000 	str	r2, [r1]
	unsigned long pixel_clock;
	unsigned long long src_clock;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	if (pvid->interface_mode == FIMD_CPU_INTERFACE) {
c7e1d3a0:	e5943048 	ldr	r3, [r4, #72]
c7e1d3a4:	e5d46008 	ldrb	r6, [r4, #8]
c7e1d3a8:	e3530002 	cmp	r3, #2	; 0x2
c7e1d3ac:	1a00000d 	bne	c7e1d3e8 <s3c6410_fimd_lcd_init+0x2b0>
		pixel_clock = pvid->vl_freq *
c7e1d3b0:	e1d430b4 	ldrh	r3, [r4, #4]
c7e1d3b4:	e5942058 	ldr	r2, [r4, #88]
c7e1d3b8:	e0010396 	mul	r1, r6, r3
c7e1d3bc:	e1d400b6 	ldrh	r0, [r4, #6]
c7e1d3c0:	e5943054 	ldr	r3, [r4, #84]
c7e1d3c4:	e0000091 	mul	r0, r1, r0
c7e1d3c8:	e0833002 	add	r3, r3, r2
c7e1d3cc:	e594105c 	ldr	r1, [r4, #92]
c7e1d3d0:	e2833001 	add	r3, r3, #1	; 0x1
c7e1d3d4:	e5942060 	ldr	r2, [r4, #96]
c7e1d3d8:	e0833001 	add	r3, r3, r1
c7e1d3dc:	e0833002 	add	r3, r3, r2
c7e1d3e0:	e0050390 	mul	r5, r0, r3
c7e1d3e4:	ea00000f 	b	c7e1d428 <s3c6410_fimd_lcd_init+0x2f0>
				pvid->vl_width * pvid->vl_height *
				(pvid->cs_setup + pvid->wr_setup +
				 pvid->wr_act + pvid->wr_hold + 1);
	} else {
		pixel_clock = pvid->vl_freq *
c7e1d3e8:	e5d4000f 	ldrb	r0, [r4, #15]
c7e1d3ec:	e5d41012 	ldrb	r1, [r4, #18]
c7e1d3f0:	e5d42010 	ldrb	r2, [r4, #16]
c7e1d3f4:	e5d43013 	ldrb	r3, [r4, #19]
c7e1d3f8:	e5d4c011 	ldrb	ip, [r4, #17]
c7e1d3fc:	e5d4e014 	ldrb	lr, [r4, #20]
c7e1d400:	e0822000 	add	r2, r2, r0
c7e1d404:	e0833001 	add	r3, r3, r1
c7e1d408:	e1d400b2 	ldrh	r0, [r4, #2]
c7e1d40c:	e1d410b0 	ldrh	r1, [r4]
c7e1d410:	e082200c 	add	r2, r2, ip
c7e1d414:	e083300e 	add	r3, r3, lr
c7e1d418:	e0822001 	add	r2, r2, r1
c7e1d41c:	e0833000 	add	r3, r3, r0
c7e1d420:	e0030392 	mul	r3, r2, r3
c7e1d424:	e0050396 	mul	r5, r6, r3
				 pvid->vl_hbpd + pvid->vl_col) *
				(pvid->vl_vspw + pvid->vl_vfpd +
				 pvid->vl_vbpd + pvid->vl_row);
	}

	cfg = readl(&fimd_ctrl->vidcon0);
c7e1d428:	e59a7000 	ldr	r7, [sl]
		S3C6410_VIDCON0_CLKVAL_F(0xFF) | S3C6410_VIDCON0_VCLKEN_MASK |
		S3C6410_VIDCON0_CLKDIR_MASK);
	cfg |= (S3C6410_VIDCON0_CLKSEL_HCLK | S3C6410_VIDCON0_CLKVALUP_ALWAYS |
		S3C6410_VIDCON0_VCLKEN_NORMAL | S3C6410_VIDCON0_CLKDIR_DIVIDED);

	src_clock = (unsigned long long) get_HCLK();
c7e1d42c:	ebff8cdd 	bl	c7e007a8 <get_HCLK>

	/* get quotient and remainder. */
	remainder = do_div(src_clock, pixel_clock);
c7e1d430:	e1a01005 	mov	r1, r5
		S3C6410_VIDCON0_CLKVAL_F(0xFF) | S3C6410_VIDCON0_VCLKEN_MASK |
		S3C6410_VIDCON0_CLKDIR_MASK);
	cfg |= (S3C6410_VIDCON0_CLKSEL_HCLK | S3C6410_VIDCON0_CLKVALUP_ALWAYS |
		S3C6410_VIDCON0_VCLKEN_NORMAL | S3C6410_VIDCON0_CLKDIR_DIVIDED);

	src_clock = (unsigned long long) get_HCLK();
c7e1d434:	e1a04000 	mov	r4, r0

	/* get quotient and remainder. */
	remainder = do_div(src_clock, pixel_clock);
c7e1d438:	eb003432 	bl	c7e2a508 <__udivsi3>

	remainder *= 10;
	remainder_div = remainder / pixel_clock;

	/* round about one places of decimals. */
	if (remainder_div >= 5)
c7e1d43c:	e1a01005 	mov	r1, r5
		S3C6410_VIDCON0_VCLKEN_NORMAL | S3C6410_VIDCON0_CLKDIR_DIVIDED);

	src_clock = (unsigned long long) get_HCLK();

	/* get quotient and remainder. */
	remainder = do_div(src_clock, pixel_clock);
c7e1d440:	e1a06000 	mov	r6, r0

	remainder *= 10;
	remainder_div = remainder / pixel_clock;

	/* round about one places of decimals. */
	if (remainder_div >= 5)
c7e1d444:	e1a00004 	mov	r0, r4
c7e1d448:	eb00346b 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1d44c:	e3a0300a 	mov	r3, #10	; 0xa
c7e1d450:	e0000193 	mul	r0, r3, r1
c7e1d454:	e1a01005 	mov	r1, r5
c7e1d458:	eb00342a 	bl	c7e2a508 <__udivsi3>
c7e1d45c:	e3500004 	cmp	r0, #4	; 0x4

	src_clock = (unsigned long long) get_HCLK();

	/* get quotient and remainder. */
	remainder = do_div(src_clock, pixel_clock);
	div = src_clock;
c7e1d460:	e1a03006 	mov	r3, r6
				(pvid->vl_vspw + pvid->vl_vfpd +
				 pvid->vl_vbpd + pvid->vl_row);
	}

	cfg = readl(&fimd_ctrl->vidcon0);
	cfg &= ~(S3C6410_VIDCON0_CLKSEL_MASK | S3C6410_VIDCON0_CLKVALUP_MASK |
c7e1d464:	e3c72b4f 	bic	r2, r7, #80896	; 0x13c00
	remainder *= 10;
	remainder_div = remainder / pixel_clock;

	/* round about one places of decimals. */
	if (remainder_div >= 5)
		div++;
c7e1d468:	82863001 	addhi	r3, r6, #1	; 0x1
				(pvid->vl_vspw + pvid->vl_vfpd +
				 pvid->vl_vbpd + pvid->vl_row);
	}

	cfg = readl(&fimd_ctrl->vidcon0);
	cfg &= ~(S3C6410_VIDCON0_CLKSEL_MASK | S3C6410_VIDCON0_CLKVALUP_MASK |
c7e1d46c:	e3c22fff 	bic	r2, r2, #1020	; 0x3fc

	/* round about one places of decimals. */
	if (remainder_div >= 5)
		div++;

	cfg |= S3C6410_VIDCON0_CLKVAL_F(div - 1);
c7e1d470:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1d474:	e20330ff 	and	r3, r3, #255	; 0xff

	cfg = readl(&fimd_ctrl->vidcon0);
	cfg &= ~(S3C6410_VIDCON0_CLKSEL_MASK | S3C6410_VIDCON0_CLKVALUP_MASK |
		S3C6410_VIDCON0_CLKVAL_F(0xFF) | S3C6410_VIDCON0_VCLKEN_MASK |
		S3C6410_VIDCON0_CLKDIR_MASK);
	cfg |= (S3C6410_VIDCON0_CLKSEL_HCLK | S3C6410_VIDCON0_CLKVALUP_ALWAYS |
c7e1d478:	e3822010 	orr	r2, r2, #16	; 0x10

	/* round about one places of decimals. */
	if (remainder_div >= 5)
		div++;

	cfg |= S3C6410_VIDCON0_CLKVAL_F(div - 1);
c7e1d47c:	e1822303 	orr	r2, r2, r3, lsl #6
		S3C6410_VIDCON0_VCLKEN_NORMAL | S3C6410_VIDCON0_CLKDIR_DIVIDED);

	src_clock = (unsigned long long) get_HCLK();

	/* get quotient and remainder. */
	remainder = do_div(src_clock, pixel_clock);
c7e1d480:	e3a03000 	mov	r3, #0	; 0x0
c7e1d484:	e58d6000 	str	r6, [sp]
c7e1d488:	e58d3004 	str	r3, [sp, #4]
	/* round about one places of decimals. */
	if (remainder_div >= 5)
		div++;

	cfg |= S3C6410_VIDCON0_CLKVAL_F(div - 1);
	writel(cfg, &fimd_ctrl->vidcon0);
c7e1d48c:	e58a2000 	str	r2, [sl]
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	/* display on */
	cfg = readl(&fimd_ctrl->vidcon0);
c7e1d490:	e59a3000 	ldr	r3, [sl]
	cfg |= (S3C6410_VIDCON0_ENVID_ENABLE | S3C6410_VIDCON0_ENVID_F_ENABLE);
c7e1d494:	e3833003 	orr	r3, r3, #3	; 0x3
	writel(cfg, &fimd_ctrl->vidcon0);
c7e1d498:	e58a3000 	str	r3, [sl]
	unsigned int cfg = 0;
	struct s3c6410_fb *fimd_ctrl =
		(struct s3c6410_fb *)s3c6410_get_base_fimd();

	/* enable window */
	cfg = readl((unsigned int)&fimd_ctrl->wincon0 +
c7e1d49c:	e59f3020 	ldr	r3, [pc, #32]	; c7e1d4c4 <s3c6410_fimd_lcd_init+0x38c>
c7e1d4a0:	e59f2038 	ldr	r2, [pc, #56]	; c7e1d4e0 <s3c6410_fimd_lcd_init+0x3a8>
c7e1d4a4:	e5933004 	ldr	r3, [r3, #4]
c7e1d4a8:	e5933038 	ldr	r3, [r3, #56]
c7e1d4ac:	e1a03103 	lsl	r3, r3, #2
c7e1d4b0:	e0832002 	add	r2, r3, r2
c7e1d4b4:	e5923000 	ldr	r3, [r2]
			S3C6410_WINCON(win_id));
	cfg |= S3C6410_WINCON_ENWIN_ENABLE;
c7e1d4b8:	e3833001 	orr	r3, r3, #1	; 0x1
	writel(cfg, (unsigned int)&fimd_ctrl->wincon0 +
c7e1d4bc:	e5823000 	str	r3, [r2]
	/* display on */
	s3c6410_fimd_lcd_on();

	/* window on */
	s3c6410_fimd_window_on(pvid->win_id);
}
c7e1d4c0:	e8bd84fc 	pop	{r2, r3, r4, r5, r6, r7, sl, pc}
c7e1d4c4:	c7e421ec 	.word	0xc7e421ec
c7e1d4c8:	77100000 	.word	0x77100000
c7e1d4cc:	77100008 	.word	0x77100008
c7e1d4d0:	77100004 	.word	0x77100004
c7e1d4d4:	77100010 	.word	0x77100010
c7e1d4d8:	77100014 	.word	0x77100014
c7e1d4dc:	77100018 	.word	0x77100018
c7e1d4e0:	77100020 	.word	0x77100020
c7e1d4e4:	ffb8d9c3 	.word	0xffb8d9c3
c7e1d4e8:	77100040 	.word	0x77100040
c7e1d4ec:	77100044 	.word	0x77100044
c7e1d4f0:	77100048 	.word	0x77100048
c7e1d4f4:	771000a0 	.word	0x771000a0
c7e1d4f8:	771000d0 	.word	0x771000d0
c7e1d4fc:	77100100 	.word	0x77100100

c7e1d500 <ssd2828_free_gpio>:

	return 0;
}

static int ssd2828_free_gpio(const struct ssd2828_config *cfg)
{
c7e1d500:	e92d4010 	push	{r4, lr}
c7e1d504:	e1a04000 	mov	r4, r0
	gpio_free(cfg->csx_pin);
c7e1d508:	e5900000 	ldr	r0, [r0]
c7e1d50c:	ebffcb79 	bl	c7e102f8 <gpio_free>
	gpio_free(cfg->sck_pin);
c7e1d510:	e5940004 	ldr	r0, [r4, #4]
c7e1d514:	ebffcb77 	bl	c7e102f8 <gpio_free>
	gpio_free(cfg->sdi_pin);
c7e1d518:	e5940008 	ldr	r0, [r4, #8]
c7e1d51c:	ebffcb75 	bl	c7e102f8 <gpio_free>
	gpio_free(cfg->reset_pin);
c7e1d520:	e5940010 	ldr	r0, [r4, #16]
c7e1d524:	ebffcb73 	bl	c7e102f8 <gpio_free>
	if (cfg->sdo_pin != -1)
c7e1d528:	e594000c 	ldr	r0, [r4, #12]
c7e1d52c:	e3700001 	cmn	r0, #1	; 0x1
c7e1d530:	0a000000 	beq	c7e1d538 <ssd2828_free_gpio+0x38>
		gpio_free(cfg->sdo_pin);
c7e1d534:	ebffcb6f 	bl	c7e102f8 <gpio_free>
	return 1;
}
c7e1d538:	e3a00001 	mov	r0, #1	; 0x1
c7e1d53c:	e8bd8010 	pop	{r4, pc}

c7e1d540 <soft_spi_xfer_24bit_3wire>:
 * the SSD2828 documentation). The 'dout' input parameter specifies 24-bits
 * of data to be written to SSD2828. Returns the lowest 16-bits of data,
 * that is received back.
 */
static u32 soft_spi_xfer_24bit_3wire(const struct ssd2828_config *drv, u32 dout)
{
c7e1d540:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e1d544:	e1a04000 	mov	r4, r0
c7e1d548:	e1a0a001 	mov	sl, r1
	 * the worst case).
	 */
	const int spi_delay_us = 0;
	const int spi_cs_delay_us = 0;

	gpio_set_value(drv->csx_pin, 0);
c7e1d54c:	e5900000 	ldr	r0, [r0]
c7e1d550:	e3a01000 	mov	r1, #0	; 0x0
c7e1d554:	ebffcb2c 	bl	c7e1020c <gpio_set_value>
	udelay(spi_cs_delay_us);
c7e1d558:	e3a00000 	mov	r0, #0	; 0x0
c7e1d55c:	eb001659 	bl	c7e22ec8 <udelay>
c7e1d560:	e3a05017 	mov	r5, #23	; 0x17
c7e1d564:	e3a07000 	mov	r7, #0	; 0x0
	for (j = bitlen - 1; j >= 0; j--) {
		gpio_set_value(drv->sck_pin, 0);
c7e1d568:	e3a01000 	mov	r1, #0	; 0x0
c7e1d56c:	e5940004 	ldr	r0, [r4, #4]
c7e1d570:	ebffcb25 	bl	c7e1020c <gpio_set_value>
		gpio_set_value(drv->sdi_pin, (dout & (1 << j)) != 0);
c7e1d574:	e3a03001 	mov	r3, #1	; 0x1
c7e1d578:	e01a3513 	ands	r3, sl, r3, lsl r5
c7e1d57c:	e5940008 	ldr	r0, [r4, #8]
c7e1d580:	03a01000 	moveq	r1, #0	; 0x0
c7e1d584:	13a01001 	movne	r1, #1	; 0x1
c7e1d588:	ebffcb1f 	bl	c7e1020c <gpio_set_value>
		udelay(spi_delay_us);
c7e1d58c:	e3a00000 	mov	r0, #0	; 0x0
c7e1d590:	eb00164c 	bl	c7e22ec8 <udelay>
		if (drv->sdo_pin != -1)
c7e1d594:	e594300c 	ldr	r3, [r4, #12]
	const int spi_delay_us = 0;
	const int spi_cs_delay_us = 0;

	gpio_set_value(drv->csx_pin, 0);
	udelay(spi_cs_delay_us);
	for (j = bitlen - 1; j >= 0; j--) {
c7e1d598:	e2455001 	sub	r5, r5, #1	; 0x1
		gpio_set_value(drv->sck_pin, 0);
		gpio_set_value(drv->sdi_pin, (dout & (1 << j)) != 0);
		udelay(spi_delay_us);
		if (drv->sdo_pin != -1)
c7e1d59c:	e3730001 	cmn	r3, #1	; 0x1
			tmpdin = (tmpdin << 1) | gpio_get_value(drv->sdo_pin);
c7e1d5a0:	e1a06087 	lsl	r6, r7, #1
c7e1d5a4:	e1a00003 	mov	r0, r3
	udelay(spi_cs_delay_us);
	for (j = bitlen - 1; j >= 0; j--) {
		gpio_set_value(drv->sck_pin, 0);
		gpio_set_value(drv->sdi_pin, (dout & (1 << j)) != 0);
		udelay(spi_delay_us);
		if (drv->sdo_pin != -1)
c7e1d5a8:	0a000001 	beq	c7e1d5b4 <soft_spi_xfer_24bit_3wire+0x74>
			tmpdin = (tmpdin << 1) | gpio_get_value(drv->sdo_pin);
c7e1d5ac:	ebffcb37 	bl	c7e10290 <gpio_get_value>
c7e1d5b0:	e1807006 	orr	r7, r0, r6
		gpio_set_value(drv->sck_pin, 1);
c7e1d5b4:	e3a01001 	mov	r1, #1	; 0x1
c7e1d5b8:	e5940004 	ldr	r0, [r4, #4]
c7e1d5bc:	ebffcb12 	bl	c7e1020c <gpio_set_value>
		udelay(spi_delay_us);
c7e1d5c0:	e3a00000 	mov	r0, #0	; 0x0
c7e1d5c4:	eb00163f 	bl	c7e22ec8 <udelay>
	const int spi_delay_us = 0;
	const int spi_cs_delay_us = 0;

	gpio_set_value(drv->csx_pin, 0);
	udelay(spi_cs_delay_us);
	for (j = bitlen - 1; j >= 0; j--) {
c7e1d5c8:	e3750001 	cmn	r5, #1	; 0x1
c7e1d5cc:	1affffe5 	bne	c7e1d568 <soft_spi_xfer_24bit_3wire+0x28>
		if (drv->sdo_pin != -1)
			tmpdin = (tmpdin << 1) | gpio_get_value(drv->sdo_pin);
		gpio_set_value(drv->sck_pin, 1);
		udelay(spi_delay_us);
	}
	udelay(spi_cs_delay_us);
c7e1d5d0:	e3a00000 	mov	r0, #0	; 0x0
c7e1d5d4:	eb00163b 	bl	c7e22ec8 <udelay>
	gpio_set_value(drv->csx_pin, 1);
c7e1d5d8:	e3a01001 	mov	r1, #1	; 0x1
c7e1d5dc:	e5940000 	ldr	r0, [r4]
c7e1d5e0:	ebffcb09 	bl	c7e1020c <gpio_set_value>
	udelay(spi_cs_delay_us);
c7e1d5e4:	e3a00000 	mov	r0, #0	; 0x0
c7e1d5e8:	eb001636 	bl	c7e22ec8 <udelay>
c7e1d5ec:	e1a00807 	lsl	r0, r7, #16
c7e1d5f0:	e1a00820 	lsr	r0, r0, #16
	return tmpdin & 0xFFFF;
}
c7e1d5f4:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

c7e1d5f8 <read_hw_register>:

/*
 * Read from a SSD2828 hardware register (regnum >= 0xB0)
 */
static u32 read_hw_register(const struct ssd2828_config *cfg, u8 regnum)
{
c7e1d5f8:	e92d4010 	push	{r4, lr}
	soft_spi_xfer_24bit_3wire(cfg, 0x700000 | regnum);
c7e1d5fc:	e3811607 	orr	r1, r1, #7340032	; 0x700000

/*
 * Read from a SSD2828 hardware register (regnum >= 0xB0)
 */
static u32 read_hw_register(const struct ssd2828_config *cfg, u8 regnum)
{
c7e1d600:	e1a04000 	mov	r4, r0
	soft_spi_xfer_24bit_3wire(cfg, 0x700000 | regnum);
c7e1d604:	ebffffcd 	bl	c7e1d540 <soft_spi_xfer_24bit_3wire>
	return soft_spi_xfer_24bit_3wire(cfg, 0x730000);
c7e1d608:	e1a00004 	mov	r0, r4
c7e1d60c:	e3a01873 	mov	r1, #7536640	; 0x730000
}
c7e1d610:	e8bd4010 	pop	{r4, lr}
 * Read from a SSD2828 hardware register (regnum >= 0xB0)
 */
static u32 read_hw_register(const struct ssd2828_config *cfg, u8 regnum)
{
	soft_spi_xfer_24bit_3wire(cfg, 0x700000 | regnum);
	return soft_spi_xfer_24bit_3wire(cfg, 0x730000);
c7e1d614:	eaffffc9 	b	c7e1d540 <soft_spi_xfer_24bit_3wire>

c7e1d618 <write_hw_register>:
/*
 * Write to a SSD2828 hardware register (regnum >= 0xB0)
 */
static void write_hw_register(const struct ssd2828_config *cfg, u8 regnum,
			      u16 val)
{
c7e1d618:	e92d4070 	push	{r4, r5, r6, lr}
	soft_spi_xfer_24bit_3wire(cfg, 0x700000 | regnum);
c7e1d61c:	e3811607 	orr	r1, r1, #7340032	; 0x700000
/*
 * Write to a SSD2828 hardware register (regnum >= 0xB0)
 */
static void write_hw_register(const struct ssd2828_config *cfg, u8 regnum,
			      u16 val)
{
c7e1d620:	e1a05002 	mov	r5, r2
c7e1d624:	e1a04000 	mov	r4, r0
	soft_spi_xfer_24bit_3wire(cfg, 0x700000 | regnum);
c7e1d628:	ebffffc4 	bl	c7e1d540 <soft_spi_xfer_24bit_3wire>
	soft_spi_xfer_24bit_3wire(cfg, 0x720000 | val);
c7e1d62c:	e1a00004 	mov	r0, r4
c7e1d630:	e3851872 	orr	r1, r5, #7471104	; 0x720000
/*	debug("id=%x reg=%x val=%x\n",read_hw_register(cfg, SSD2828_DIR),
		regnum,val);
*/
}
c7e1d634:	e8bd4070 	pop	{r4, r5, r6, lr}
 */
static void write_hw_register(const struct ssd2828_config *cfg, u8 regnum,
			      u16 val)
{
	soft_spi_xfer_24bit_3wire(cfg, 0x700000 | regnum);
	soft_spi_xfer_24bit_3wire(cfg, 0x720000 | val);
c7e1d638:	eaffffc0 	b	c7e1d540 <soft_spi_xfer_24bit_3wire>

c7e1d63c <read_mipi_dcs_command>:
			write_hw_register(cfg, SSD2828_PDR, *pd);
	}
}

u32 read_mipi_dcs_command(const struct ssd2828_config *cfg, u32 cmdnum)
{
c7e1d63c:	e92d4070 	push	{r4, r5, r6, lr}
c7e1d640:	e1a04001 	mov	r4, r1
	/* Set packet size */ 
	write_hw_register(cfg, SSD2828_PSCR1, 1);
c7e1d644:	e3a02001 	mov	r2, #1	; 0x1
c7e1d648:	e3a010bc 	mov	r1, #188	; 0xbc
			write_hw_register(cfg, SSD2828_PDR, *pd);
	}
}

u32 read_mipi_dcs_command(const struct ssd2828_config *cfg, u32 cmdnum)
{
c7e1d64c:	e1a05000 	mov	r5, r0
	/* Set packet size */ 
	write_hw_register(cfg, SSD2828_PSCR1, 1);
	/* Send the command */
	write_hw_register(cfg, SSD2828_PDR, cmdnum);
c7e1d650:	e1a04804 	lsl	r4, r4, #16
}

u32 read_mipi_dcs_command(const struct ssd2828_config *cfg, u32 cmdnum)
{
	/* Set packet size */ 
	write_hw_register(cfg, SSD2828_PSCR1, 1);
c7e1d654:	ebffffef 	bl	c7e1d618 <write_hw_register>
	/* Send the command */
	write_hw_register(cfg, SSD2828_PDR, cmdnum);
c7e1d658:	e1a02824 	lsr	r2, r4, #16
c7e1d65c:	e1a00005 	mov	r0, r5
c7e1d660:	e3a010bf 	mov	r1, #191	; 0xbf
c7e1d664:	ebffffeb 	bl	c7e1d618 <write_hw_register>
	while(!(read_hw_register(cfg, SSD2828_ISR) & 0x01));
c7e1d668:	e1a00005 	mov	r0, r5
c7e1d66c:	e3a010c6 	mov	r1, #198	; 0xc6
c7e1d670:	ebffffe0 	bl	c7e1d5f8 <read_hw_register>
c7e1d674:	e3100001 	tst	r0, #1	; 0x1
c7e1d678:	0afffffa 	beq	c7e1d668 <read_mipi_dcs_command+0x2c>
	return read_hw_register(cfg, SSD2828_RR);
c7e1d67c:	e1a00005 	mov	r0, r5
c7e1d680:	e3a010ff 	mov	r1, #255	; 0xff
}
c7e1d684:	e8bd4070 	pop	{r4, r5, r6, lr}
	/* Set packet size */ 
	write_hw_register(cfg, SSD2828_PSCR1, 1);
	/* Send the command */
	write_hw_register(cfg, SSD2828_PDR, cmdnum);
	while(!(read_hw_register(cfg, SSD2828_ISR) & 0x01));
	return read_hw_register(cfg, SSD2828_RR);
c7e1d688:	eaffffda 	b	c7e1d5f8 <read_hw_register>

c7e1d68c <send_mipi_dcs_command>:
/*
 * Send MIPI command to the LCD panel (cmdnum < 0xB0)
 */
void send_mipi_dcs_command(const struct ssd2828_config *cfg, u32 cmdnum,
			u16 packetsize)
{
c7e1d68c:	e92d4070 	push	{r4, r5, r6, lr}
c7e1d690:	e1a04002 	mov	r4, r2
c7e1d694:	e1a05001 	mov	r5, r1
	u8 *pd;
	/* Set packet size */ 
	write_hw_register(cfg, SSD2828_PSCR1, packetsize);
c7e1d698:	e3a010bc 	mov	r1, #188	; 0xbc
/*
 * Send MIPI command to the LCD panel (cmdnum < 0xB0)
 */
void send_mipi_dcs_command(const struct ssd2828_config *cfg, u32 cmdnum,
			u16 packetsize)
{
c7e1d69c:	e1a06000 	mov	r6, r0
	u8 *pd;
	/* Set packet size */ 
	write_hw_register(cfg, SSD2828_PSCR1, packetsize);
c7e1d6a0:	ebffffdc 	bl	c7e1d618 <write_hw_register>
	/* Send the command */
	if(packetsize <= 2) {
c7e1d6a4:	e3540002 	cmp	r4, #2	; 0x2
c7e1d6a8:	8a00000c 	bhi	c7e1d6e0 <send_mipi_dcs_command+0x54>
		/* a command with no or 1 parameters */
		write_hw_register(cfg, SSD2828_PDR, cmdnum);
c7e1d6ac:	e1a02805 	lsl	r2, r5, #16
c7e1d6b0:	e1a00006 	mov	r0, r6
c7e1d6b4:	e1a02822 	lsr	r2, r2, #16
c7e1d6b8:	e3a010bf 	mov	r1, #191	; 0xbf
c7e1d6bc:	ea000010 	b	c7e1d704 <send_mipi_dcs_command+0x78>
	} else {
		pd = (u8 *) cmdnum;
		for(; (packetsize - 2) > 0; packetsize -= 2, pd += 2) {
			write_hw_register(cfg, SSD2828_PDR, (*pd + (*pd << 8)));
c7e1d6c0:	e5552002 	ldrb	r2, [r5, #-2]
c7e1d6c4:	e0822402 	add	r2, r2, r2, lsl #8
c7e1d6c8:	e1a02802 	lsl	r2, r2, #16
c7e1d6cc:	e1a02822 	lsr	r2, r2, #16
c7e1d6d0:	ebffffd0 	bl	c7e1d618 <write_hw_register>
	if(packetsize <= 2) {
		/* a command with no or 1 parameters */
		write_hw_register(cfg, SSD2828_PDR, cmdnum);
	} else {
		pd = (u8 *) cmdnum;
		for(; (packetsize - 2) > 0; packetsize -= 2, pd += 2) {
c7e1d6d4:	e2443002 	sub	r3, r4, #2	; 0x2
c7e1d6d8:	e1a03803 	lsl	r3, r3, #16
c7e1d6dc:	e1a04823 	lsr	r4, r3, #16
c7e1d6e0:	e3540002 	cmp	r4, #2	; 0x2
c7e1d6e4:	e1a03005 	mov	r3, r5
			write_hw_register(cfg, SSD2828_PDR, (*pd + (*pd << 8)));
c7e1d6e8:	e1a00006 	mov	r0, r6
c7e1d6ec:	e3a010bf 	mov	r1, #191	; 0xbf
	if(packetsize <= 2) {
		/* a command with no or 1 parameters */
		write_hw_register(cfg, SSD2828_PDR, cmdnum);
	} else {
		pd = (u8 *) cmdnum;
		for(; (packetsize - 2) > 0; packetsize -= 2, pd += 2) {
c7e1d6f0:	e2855002 	add	r5, r5, #2	; 0x2
c7e1d6f4:	cafffff1 	bgt	c7e1d6c0 <send_mipi_dcs_command+0x34>
			write_hw_register(cfg, SSD2828_PDR, (*pd + (*pd << 8)));
		}
		if(packetsize)
c7e1d6f8:	e3540000 	cmp	r4, #0	; 0x0
c7e1d6fc:	08bd8070 	popeq	{r4, r5, r6, pc}
			write_hw_register(cfg, SSD2828_PDR, *pd);
c7e1d700:	e5d32000 	ldrb	r2, [r3]
	}
}
c7e1d704:	e8bd4070 	pop	{r4, r5, r6, lr}
		pd = (u8 *) cmdnum;
		for(; (packetsize - 2) > 0; packetsize -= 2, pd += 2) {
			write_hw_register(cfg, SSD2828_PDR, (*pd + (*pd << 8)));
		}
		if(packetsize)
			write_hw_register(cfg, SSD2828_PDR, *pd);
c7e1d708:	eaffffc2 	b	c7e1d618 <write_hw_register>

c7e1d70c <ssd2828_init>:
	return 0;
}

int ssd2828_init(const struct ssd2828_config *cfg,
		 const struct fb_videomode *mode)
{
c7e1d70c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e1d710:	e1a06000 	mov	r6, r0
c7e1d714:	e1a04001 	mov	r4, r1
	mdelay(10);
}

static int ssd2828_enable_gpio(const struct ssd2828_config *cfg)
{
	if (gpio_request(cfg->csx_pin, "ssd2828_csx")) {
c7e1d718:	e5900000 	ldr	r0, [r0]
c7e1d71c:	e59f1434 	ldr	r1, [pc, #1076]	; c7e1db58 <ssd2828_init+0x44c>
c7e1d720:	ebffcaf2 	bl	c7e102f0 <gpio_request>
c7e1d724:	e3500000 	cmp	r0, #0	; 0x0
		printf("SSD2828: request for 'ssd2828_csx' pin failed\n");
c7e1d728:	159f042c 	ldrne	r0, [pc, #1068]	; c7e1db5c <ssd2828_init+0x450>
	mdelay(10);
}

static int ssd2828_enable_gpio(const struct ssd2828_config *cfg)
{
	if (gpio_request(cfg->csx_pin, "ssd2828_csx")) {
c7e1d72c:	1a000030 	bne	c7e1d7f4 <ssd2828_init+0xe8>
		printf("SSD2828: request for 'ssd2828_csx' pin failed\n");
		return 1;
	}
	if (gpio_request(cfg->sck_pin, "ssd2828_sck")) {
c7e1d730:	e5960004 	ldr	r0, [r6, #4]
c7e1d734:	e59f1424 	ldr	r1, [pc, #1060]	; c7e1db60 <ssd2828_init+0x454>
c7e1d738:	ebffcaec 	bl	c7e102f0 <gpio_request>
c7e1d73c:	e3500000 	cmp	r0, #0	; 0x0
c7e1d740:	0a000003 	beq	c7e1d754 <ssd2828_init+0x48>
		gpio_free(cfg->csx_pin);
c7e1d744:	e5960000 	ldr	r0, [r6]
c7e1d748:	ebffcaea 	bl	c7e102f8 <gpio_free>
		printf("SSD2828: request for 'ssd2828_sck' pin failed\n");
c7e1d74c:	e59f0410 	ldr	r0, [pc, #1040]	; c7e1db64 <ssd2828_init+0x458>
c7e1d750:	ea000027 	b	c7e1d7f4 <ssd2828_init+0xe8>
		return 1;
	}
	if (gpio_request(cfg->sdi_pin, "ssd2828_sdi")) {
c7e1d754:	e5960008 	ldr	r0, [r6, #8]
c7e1d758:	e59f1408 	ldr	r1, [pc, #1032]	; c7e1db68 <ssd2828_init+0x45c>
c7e1d75c:	ebffcae3 	bl	c7e102f0 <gpio_request>
c7e1d760:	e3500000 	cmp	r0, #0	; 0x0
c7e1d764:	0a000005 	beq	c7e1d780 <ssd2828_init+0x74>
		gpio_free(cfg->csx_pin);
c7e1d768:	e5960000 	ldr	r0, [r6]
c7e1d76c:	ebffcae1 	bl	c7e102f8 <gpio_free>
		gpio_free(cfg->sck_pin);
c7e1d770:	e5960004 	ldr	r0, [r6, #4]
c7e1d774:	ebffcadf 	bl	c7e102f8 <gpio_free>
		printf("SSD2828: request for 'ssd2828_sdi' pin failed\n");
c7e1d778:	e59f03ec 	ldr	r0, [pc, #1004]	; c7e1db6c <ssd2828_init+0x460>
c7e1d77c:	ea00001c 	b	c7e1d7f4 <ssd2828_init+0xe8>
		return 1;
	}
	if (gpio_request(cfg->reset_pin, "ssd2828_reset")) {
c7e1d780:	e5960010 	ldr	r0, [r6, #16]
c7e1d784:	e59f13e4 	ldr	r1, [pc, #996]	; c7e1db70 <ssd2828_init+0x464>
c7e1d788:	ebffcad8 	bl	c7e102f0 <gpio_request>
c7e1d78c:	e3500000 	cmp	r0, #0	; 0x0
c7e1d790:	0a000007 	beq	c7e1d7b4 <ssd2828_init+0xa8>
		gpio_free(cfg->csx_pin);
c7e1d794:	e5960000 	ldr	r0, [r6]
c7e1d798:	ebffcad6 	bl	c7e102f8 <gpio_free>
		gpio_free(cfg->sck_pin);
c7e1d79c:	e5960004 	ldr	r0, [r6, #4]
c7e1d7a0:	ebffcad4 	bl	c7e102f8 <gpio_free>
		gpio_free(cfg->sdi_pin);
c7e1d7a4:	e5960008 	ldr	r0, [r6, #8]
c7e1d7a8:	ebffcad2 	bl	c7e102f8 <gpio_free>
		printf("SSD2828: request for 'ssd2828_reset' pin failed\n");
c7e1d7ac:	e59f03c0 	ldr	r0, [pc, #960]	; c7e1db74 <ssd2828_init+0x468>
c7e1d7b0:	ea00000f 	b	c7e1d7f4 <ssd2828_init+0xe8>
		return 1;
	}
	if (cfg->sdo_pin != -1 && gpio_request(cfg->sdo_pin, "ssd2828_sdo")) {
c7e1d7b4:	e596000c 	ldr	r0, [r6, #12]
c7e1d7b8:	e3700001 	cmn	r0, #1	; 0x1
c7e1d7bc:	0a00000e 	beq	c7e1d7fc <ssd2828_init+0xf0>
c7e1d7c0:	e59f13b0 	ldr	r1, [pc, #944]	; c7e1db78 <ssd2828_init+0x46c>
c7e1d7c4:	ebffcac9 	bl	c7e102f0 <gpio_request>
c7e1d7c8:	e3500000 	cmp	r0, #0	; 0x0
c7e1d7cc:	0a00000a 	beq	c7e1d7fc <ssd2828_init+0xf0>
		gpio_free(cfg->csx_pin);
c7e1d7d0:	e5960000 	ldr	r0, [r6]
c7e1d7d4:	ebffcac7 	bl	c7e102f8 <gpio_free>
		gpio_free(cfg->sck_pin);
c7e1d7d8:	e5960004 	ldr	r0, [r6, #4]
c7e1d7dc:	ebffcac5 	bl	c7e102f8 <gpio_free>
		gpio_free(cfg->sdi_pin);
c7e1d7e0:	e5960008 	ldr	r0, [r6, #8]
c7e1d7e4:	ebffcac3 	bl	c7e102f8 <gpio_free>
		gpio_free(cfg->reset_pin);
c7e1d7e8:	e5960010 	ldr	r0, [r6, #16]
c7e1d7ec:	ebffcac1 	bl	c7e102f8 <gpio_free>
		printf("SSD2828: request for 'ssd2828_sdo' pin failed\n");
c7e1d7f0:	e59f0384 	ldr	r0, [pc, #900]	; c7e1db7c <ssd2828_init+0x470>
c7e1d7f4:	ebffac97 	bl	c7e08a58 <printf>
c7e1d7f8:	ea00005a 	b	c7e1d968 <ssd2828_init+0x25c>
		return 1;
	}
	gpio_direction_output(cfg->reset_pin, 0);
c7e1d7fc:	e3a01000 	mov	r1, #0	; 0x0
c7e1d800:	e5960010 	ldr	r0, [r6, #16]
c7e1d804:	ebffcaeb 	bl	c7e103b8 <gpio_direction_output>
	gpio_direction_output(cfg->csx_pin, 1);
c7e1d808:	e3a01001 	mov	r1, #1	; 0x1
c7e1d80c:	e5960000 	ldr	r0, [r6]
c7e1d810:	ebffcae8 	bl	c7e103b8 <gpio_direction_output>
	gpio_direction_output(cfg->sck_pin, 1);
c7e1d814:	e3a01001 	mov	r1, #1	; 0x1
c7e1d818:	e5960004 	ldr	r0, [r6, #4]
c7e1d81c:	ebffcae5 	bl	c7e103b8 <gpio_direction_output>
	gpio_direction_output(cfg->sdi_pin, 1);
c7e1d820:	e5960008 	ldr	r0, [r6, #8]
c7e1d824:	e3a01001 	mov	r1, #1	; 0x1
c7e1d828:	ebffcae2 	bl	c7e103b8 <gpio_direction_output>
	if (cfg->sdo_pin != -1)
c7e1d82c:	e596000c 	ldr	r0, [r6, #12]
c7e1d830:	e3700001 	cmn	r0, #1	; 0x1
c7e1d834:	0a0000b9 	beq	c7e1db20 <ssd2828_init+0x414>
		gpio_direction_input(cfg->sdo_pin);
c7e1d838:	ebffcadc 	bl	c7e103b0 <gpio_direction_input>
c7e1d83c:	ea0000b7 	b	c7e1db20 <ssd2828_init+0x414>
	 * If there is a pin to read data back from SPI, then we are lucky. Try
	 * to check if SPI is configured correctly and SSD2828 is actually able
	 * to talk back.
	 */
	if (cfg->sdo_pin != -1) {
		if (read_hw_register(cfg, SSD2828_DIR) != 0x2828 ||
c7e1d840:	e1a00006 	mov	r0, r6
c7e1d844:	e3a010b0 	mov	r1, #176	; 0xb0
c7e1d848:	ebffff6a 	bl	c7e1d5f8 <read_hw_register>
c7e1d84c:	e59f332c 	ldr	r3, [pc, #812]	; c7e1db80 <ssd2828_init+0x474>
c7e1d850:	e1500003 	cmp	r0, r3
c7e1d854:	1a000005 	bne	c7e1d870 <ssd2828_init+0x164>
c7e1d858:	e1a00006 	mov	r0, r6
c7e1d85c:	e3a010b7 	mov	r1, #183	; 0xb7
c7e1d860:	ebffff64 	bl	c7e1d5f8 <read_hw_register>
c7e1d864:	e59f3318 	ldr	r3, [pc, #792]	; c7e1db84 <ssd2828_init+0x478>
c7e1d868:	e1500003 	cmp	r0, r3
c7e1d86c:	0a000001 	beq	c7e1d878 <ssd2828_init+0x16c>
		    read_hw_register(cfg, SSD2828_CFGR) != cfgr_reg) {
			printf("SSD2828: SPI communication failed.\n");
c7e1d870:	e59f0310 	ldr	r0, [pc, #784]	; c7e1db88 <ssd2828_init+0x47c>
c7e1d874:	ea000038 	b	c7e1d95c <ssd2828_init+0x250>
					     const struct fb_videomode *mode)
{
	u32 val;

	/* RGB Interface Control Register 1 */
	write_hw_register(cfg, SSD2828_VICR1, (mode->vsync_len << 8) |
c7e1d878:	e5943028 	ldr	r3, [r4, #40]
c7e1d87c:	e5942024 	ldr	r2, [r4, #36]
	 * clock speed, then everything is good. If not, then we can fallback
	 * to 'pclk' (pixel clock from the parallel LCD interface). In the
	 * case of using this fallback, it is necessary to have parallel LCD
	 * already initialized and running at this point.
	 */
	reference_freq_khz = cfg->ssd2828_tx_clk_khz;
c7e1d880:	e5967014 	ldr	r7, [r6, #20]
					     const struct fb_videomode *mode)
{
	u32 val;

	/* RGB Interface Control Register 1 */
	write_hw_register(cfg, SSD2828_VICR1, (mode->vsync_len << 8) |
c7e1d884:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1d888:	e1a02802 	lsl	r2, r2, #16
	 * to 'pclk' (pixel clock from the parallel LCD interface). In the
	 * case of using this fallback, it is necessary to have parallel LCD
	 * already initialized and running at this point.
	 */
	reference_freq_khz = cfg->ssd2828_tx_clk_khz;
	if (reference_freq_khz  == 0) {
c7e1d88c:	e3570000 	cmp	r7, #0	; 0x0
					     const struct fb_videomode *mode)
{
	u32 val;

	/* RGB Interface Control Register 1 */
	write_hw_register(cfg, SSD2828_VICR1, (mode->vsync_len << 8) |
c7e1d890:	e1a00006 	mov	r0, r6
c7e1d894:	e1a02822 	lsr	r2, r2, #16
c7e1d898:	e3a010b1 	mov	r1, #177	; 0xb1
	 * to 'pclk' (pixel clock from the parallel LCD interface). In the
	 * case of using this fallback, it is necessary to have parallel LCD
	 * already initialized and running at this point.
	 */
	reference_freq_khz = cfg->ssd2828_tx_clk_khz;
	if (reference_freq_khz  == 0) {
c7e1d89c:	159f52e0 	ldrne	r5, [pc, #736]	; c7e1db84 <ssd2828_init+0x478>
		reference_freq_khz = mode->pixclock;
c7e1d8a0:	05947010 	ldreq	r7, [r4, #16]
c7e1d8a4:	059f52e0 	ldreq	r5, [pc, #736]	; c7e1db8c <ssd2828_init+0x480>
					     const struct fb_videomode *mode)
{
	u32 val;

	/* RGB Interface Control Register 1 */
	write_hw_register(cfg, SSD2828_VICR1, (mode->vsync_len << 8) |
c7e1d8a8:	ebffff5a 	bl	c7e1d618 <write_hw_register>
					      (mode->hsync_len));

	/* RGB Interface Control Register 2 */
	u32 vbp = mode->vsync_len + mode->upper_margin;
	u32 hbp = mode->hsync_len + mode->left_margin;
	write_hw_register(cfg, SSD2828_VICR2, (vbp << 8) | hbp);
c7e1d8ac:	e5940028 	ldr	r0, [r4, #40]
c7e1d8b0:	e5941024 	ldr	r1, [r4, #36]
c7e1d8b4:	e594301c 	ldr	r3, [r4, #28]
c7e1d8b8:	e5942014 	ldr	r2, [r4, #20]
c7e1d8bc:	e0833000 	add	r3, r3, r0
c7e1d8c0:	e0822001 	add	r2, r2, r1
c7e1d8c4:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1d8c8:	e1a02802 	lsl	r2, r2, #16
c7e1d8cc:	e1a02822 	lsr	r2, r2, #16
c7e1d8d0:	e1a00006 	mov	r0, r6
c7e1d8d4:	e3a010b2 	mov	r1, #178	; 0xb2
c7e1d8d8:	ebffff4e 	bl	c7e1d618 <write_hw_register>

	/* RGB Interface Control Register 3 */
	write_hw_register(cfg, SSD2828_VICR3, (mode->lower_margin << 8) |
c7e1d8dc:	e5943020 	ldr	r3, [r4, #32]
c7e1d8e0:	e5942018 	ldr	r2, [r4, #24]
c7e1d8e4:	e3a010b3 	mov	r1, #179	; 0xb3
c7e1d8e8:	e1822403 	orr	r2, r2, r3, lsl #8
c7e1d8ec:	e1a02802 	lsl	r2, r2, #16
c7e1d8f0:	e1a02822 	lsr	r2, r2, #16
c7e1d8f4:	e1a00006 	mov	r0, r6
c7e1d8f8:	ebffff46 	bl	c7e1d618 <write_hw_register>
					      (mode->right_margin));

	/* RGB Interface Control Register 4 */
	write_hw_register(cfg, SSD2828_VICR4, mode->xres);
c7e1d8fc:	e1a00006 	mov	r0, r6
c7e1d900:	e3a010b4 	mov	r1, #180	; 0xb4
c7e1d904:	e1d420b8 	ldrh	r2, [r4, #8]
c7e1d908:	ebffff42 	bl	c7e1d618 <write_hw_register>

	/* RGB Interface Control Register 5 */
	write_hw_register(cfg, SSD2828_VICR5, mode->yres);
c7e1d90c:	e1a00006 	mov	r0, r6
c7e1d910:	e1d420bc 	ldrh	r2, [r4, #12]
c7e1d914:	e3a010b5 	mov	r1, #181	; 0xb5
c7e1d918:	ebffff3e 	bl	c7e1d618 <write_hw_register>

	/* RGB Interface Control Register 6 */
	val = SSD2828_VIDEO_MODE_BURST;
	switch (cfg->ssd2828_color_depth) {
c7e1d91c:	e5963018 	ldr	r3, [r6, #24]
c7e1d920:	e3530012 	cmp	r3, #18	; 0x12
c7e1d924:	0a000007 	beq	c7e1d948 <ssd2828_init+0x23c>
c7e1d928:	e3530018 	cmp	r3, #24	; 0x18
c7e1d92c:	0a000003 	beq	c7e1d940 <ssd2828_init+0x234>
c7e1d930:	e3530010 	cmp	r3, #16	; 0x10
		break;
	case 24:
		val |= SSD2828_VIDEO_PIXEL_FORMAT_24BPP;
		break;
	default:
		printf("SSD2828: unsupported color depth\n");
c7e1d934:	159f0254 	ldrne	r0, [pc, #596]	; c7e1db90 <ssd2828_init+0x484>
	/* RGB Interface Control Register 5 */
	write_hw_register(cfg, SSD2828_VICR5, mode->yres);

	/* RGB Interface Control Register 6 */
	val = SSD2828_VIDEO_MODE_BURST;
	switch (cfg->ssd2828_color_depth) {
c7e1d938:	1a000007 	bne	c7e1d95c <ssd2828_init+0x250>
c7e1d93c:	ea00000b 	b	c7e1d970 <ssd2828_init+0x264>
c7e1d940:	e3a0200b 	mov	r2, #11	; 0xb
c7e1d944:	ea00000a 	b	c7e1d974 <ssd2828_init+0x268>
	case 16:
		val |= SSD2828_VIDEO_PIXEL_FORMAT_16BPP;
		break;
	case 18:
		val |= cfg->mipi_dsi_loosely_packed_pixel_format ?
c7e1d948:	e5963024 	ldr	r3, [r6, #36]
c7e1d94c:	e3530000 	cmp	r3, #0	; 0x0
c7e1d950:	13a0200a 	movne	r2, #10	; 0xa
c7e1d954:	03a02009 	moveq	r2, #9	; 0x9
c7e1d958:	ea000005 	b	c7e1d974 <ssd2828_init+0x268>
		break;
	case 24:
		val |= SSD2828_VIDEO_PIXEL_FORMAT_24BPP;
		break;
	default:
		printf("SSD2828: unsupported color depth\n");
c7e1d95c:	ebffac3d 	bl	c7e08a58 <printf>

	/*
	 * Setup the parallel LCD timings in the appropriate registers.
	 */
	if (ssd2828_configure_video_interface(cfg, mode) != 0) {
		ssd2828_free_gpio(cfg);
c7e1d960:	e1a00006 	mov	r0, r6
c7e1d964:	ebfffee5 	bl	c7e1d500 <ssd2828_free_gpio>
c7e1d968:	e3a00001 	mov	r0, #1	; 0x1
c7e1d96c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		return 1;
c7e1d970:	e3a02008 	mov	r2, #8	; 0x8
		break;
	default:
		printf("SSD2828: unsupported color depth\n");
		return 1;
	}
	write_hw_register(cfg, SSD2828_VICR6, val);
c7e1d974:	e1a00006 	mov	r0, r6
c7e1d978:	e3a010b6 	mov	r1, #182	; 0xb6
c7e1d97c:	ebffff25 	bl	c7e1d618 <write_hw_register>

	/* Lane Configuration Register */
	write_hw_register(cfg, SSD2828_LCFR,
c7e1d980:	e596201c 	ldr	r2, [r6, #28]
c7e1d984:	e1a00006 	mov	r0, r6
c7e1d988:	e2422001 	sub	r2, r2, #1	; 0x1
c7e1d98c:	e1a02802 	lsl	r2, r2, #16
c7e1d990:	e1a02822 	lsr	r2, r2, #16
c7e1d994:	e3a010de 	mov	r1, #222	; 0xde
c7e1d998:	ebffff1e 	bl	c7e1d618 <write_hw_register>
		ssd2828_free_gpio(cfg);
		return 1;
	}

	/* Configuration Register */
	cfgr_reg &= ~SSD2828_CFGR_HS;  /* Data lanes are in LP mode */
c7e1d99c:	e3c53001 	bic	r3, r5, #1	; 0x1
	cfgr_reg |= SSD2828_CFGR_CKE;  /* Clock lane is in HS mode */
	cfgr_reg |= SSD2828_CFGR_DCS;  /* Only use DCS packets */
c7e1d9a0:	e3839042 	orr	r9, r3, #66	; 0x42
	write_hw_register(cfg, SSD2828_CFGR, cfgr_reg);
c7e1d9a4:	e1a00006 	mov	r0, r6
c7e1d9a8:	e3a010b7 	mov	r1, #183	; 0xb7
c7e1d9ac:	e1a02009 	mov	r2, r9
c7e1d9b0:	ebffff18 	bl	c7e1d618 <write_hw_register>

	/* PLL Configuration Register */
	pll_config = construct_pll_config(
c7e1d9b4:	e596a020 	ldr	sl, [r6, #32]
c7e1d9b8:	e3a04001 	mov	r4, #1	; 0x1
{
	u32 div_factor = 1, mul_factor, fr = 0;
	u32 output_freq_kbps;

	/* The intermediate clock after division can't be less than 5MHz */
	while (reference_freq_khz / (div_factor + 1) >= 5000)
c7e1d9bc:	e2845001 	add	r5, r4, #1	; 0x1
c7e1d9c0:	e1a00007 	mov	r0, r7
c7e1d9c4:	e1a01005 	mov	r1, r5
c7e1d9c8:	eb0032ce 	bl	c7e2a508 <__udivsi3>
c7e1d9cc:	e59f31c0 	ldr	r3, [pc, #448]	; c7e1db94 <ssd2828_init+0x488>
c7e1d9d0:	e1500003 	cmp	r0, r3
c7e1d9d4:	81a04005 	movhi	r4, r5
c7e1d9d8:	8afffff7 	bhi	c7e1d9bc <ssd2828_init+0x2b0>
		div_factor++;
	if (div_factor > 31)
		div_factor = 31;

	mul_factor = DIV_ROUND_UP(desired_pll_freq_kbps * div_factor,
c7e1d9dc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
c7e1d9e0:	e0020a93 	mul	r2, r3, sl
	u32 output_freq_kbps;

	/* The intermediate clock after division can't be less than 5MHz */
	while (reference_freq_khz / (div_factor + 1) >= 5000)
		div_factor++;
	if (div_factor > 31)
c7e1d9e4:	e354001f 	cmp	r4, #31	; 0x1f
c7e1d9e8:	23a0401f 	movcs	r4, #31	; 0x1f
		div_factor = 31;

	mul_factor = DIV_ROUND_UP(desired_pll_freq_kbps * div_factor,
c7e1d9ec:	e2473001 	sub	r3, r7, #1	; 0x1
c7e1d9f0:	e0203492 	mla	r0, r2, r4, r3
c7e1d9f4:	e1a01007 	mov	r1, r7
c7e1d9f8:	eb0032c2 	bl	c7e2a508 <__udivsi3>
c7e1d9fc:	e1a05000 	mov	r5, r0
				  reference_freq_khz);

	output_freq_kbps = reference_freq_khz * mul_factor / div_factor;
c7e1da00:	e0000597 	mul	r0, r7, r5
c7e1da04:	e1a01004 	mov	r1, r4
c7e1da08:	eb0032be 	bl	c7e2a508 <__udivsi3>
	debug("ssd2828 pll out freq=%dkhz\n",output_freq_kbps);	

	if (output_freq_kbps >= 501000)
c7e1da0c:	e59f3184 	ldr	r3, [pc, #388]	; c7e1db98 <ssd2828_init+0x48c>
c7e1da10:	e1500003 	cmp	r0, r3
c7e1da14:	83a00003 	movhi	r0, #3	; 0x3
c7e1da18:	8a000007 	bhi	c7e1da3c <ssd2828_init+0x330>
		fr = 3;
	else if (output_freq_kbps >= 251000)
c7e1da1c:	e59f3178 	ldr	r3, [pc, #376]	; c7e1db9c <ssd2828_init+0x490>
c7e1da20:	e1500003 	cmp	r0, r3
c7e1da24:	83a00002 	movhi	r0, #2	; 0x2
c7e1da28:	8a000003 	bhi	c7e1da3c <ssd2828_init+0x330>
c7e1da2c:	e59f316c 	ldr	r3, [pc, #364]	; c7e1dba0 <ssd2828_init+0x494>
c7e1da30:	e1500003 	cmp	r0, r3
c7e1da34:	93a00000 	movls	r0, #0	; 0x0
c7e1da38:	83a00001 	movhi	r0, #1	; 0x1
		fr = 2;
	else if (output_freq_kbps >= 126000)
		fr = 1;

	return (fr << 14) | (div_factor << 8) | mul_factor;
c7e1da3c:	e1854404 	orr	r4, r5, r4, lsl #8
c7e1da40:	e1844700 	orr	r4, r4, r0, lsl #14

	/* PLL Configuration Register */
	pll_config = construct_pll_config(
				cfg->mipi_dsi_bitrate_per_data_lane_mbps * 1000,
				reference_freq_khz);
	write_hw_register(cfg, SSD2828_PLCR, pll_config);
c7e1da44:	e1a02804 	lsl	r2, r4, #16
c7e1da48:	e1a02822 	lsr	r2, r2, #16
c7e1da4c:	e1a00006 	mov	r0, r6
c7e1da50:	e3a010ba 	mov	r1, #186	; 0xba
c7e1da54:	ebfffeef 	bl	c7e1d618 <write_hw_register>

static u32 decode_pll_config(u32 pll_config, u32 reference_freq_khz)
{
	u32 mul_factor = pll_config & 0xFF;
	u32 div_factor = (pll_config >> 8) & 0x1F;
	if (mul_factor == 0)
c7e1da58:	e21450ff 	ands	r5, r4, #255	; 0xff
}

static u32 decode_pll_config(u32 pll_config, u32 reference_freq_khz)
{
	u32 mul_factor = pll_config & 0xFF;
	u32 div_factor = (pll_config >> 8) & 0x1F;
c7e1da5c:	e1a04424 	lsr	r4, r4, #8
	if (mul_factor == 0)
c7e1da60:	03a05001 	moveq	r5, #1	; 0x1
		mul_factor = 1;
	if (div_factor == 0)
c7e1da64:	e214401f 	ands	r4, r4, #31	; 0x1f
c7e1da68:	03a04001 	moveq	r4, #1	; 0x1
	pll_freq_kbps = decode_pll_config(pll_config, reference_freq_khz);
	lp_div = DIV_ROUND_UP(pll_freq_kbps, mipi_dsi_low_power_clk_khz * 8);

	debug("ssd2828 lp freq=%dkhz\n", pll_freq_kbps/lp_div/8);
	/* VC Control Register */
	write_hw_register(cfg, SSD2828_VCR, 0);
c7e1da6c:	e3a02000 	mov	r2, #0	; 0x0
c7e1da70:	e1a00006 	mov	r0, r6
c7e1da74:	e3a010b8 	mov	r1, #184	; 0xb8
c7e1da78:	ebfffee6 	bl	c7e1d618 <write_hw_register>

	/* Clock Control Register */
	write_hw_register(cfg, SSD2828_CCR, SSD2828_LP_CLOCK_DIVIDER(lp_div));
c7e1da7c:	e1a01004 	mov	r1, r4
c7e1da80:	e0000597 	mul	r0, r7, r5
c7e1da84:	eb00329f 	bl	c7e2a508 <__udivsi3>
c7e1da88:	e2800b4e 	add	r0, r0, #79872	; 0x13800
c7e1da8c:	e59f1110 	ldr	r1, [pc, #272]	; c7e1dba4 <ssd2828_init+0x498>
c7e1da90:	e280007f 	add	r0, r0, #127	; 0x7f
c7e1da94:	eb00329b 	bl	c7e2a508 <__udivsi3>
c7e1da98:	e2402001 	sub	r2, r0, #1	; 0x1
c7e1da9c:	e202203f 	and	r2, r2, #63	; 0x3f
c7e1daa0:	e3a010bb 	mov	r1, #187	; 0xbb
c7e1daa4:	e1a00006 	mov	r0, r6
c7e1daa8:	ebfffeda 	bl	c7e1d618 <write_hw_register>

	/* PLL Control Register */
	write_hw_register(cfg, SSD2828_PCR, 1); /* Enable PLL */
c7e1daac:	e1a00006 	mov	r0, r6
c7e1dab0:	e3a010b9 	mov	r1, #185	; 0xb9
c7e1dab4:	e3a02001 	mov	r2, #1	; 0x1
c7e1dab8:	ebfffed6 	bl	c7e1d618 <write_hw_register>

	/* Wait for PLL lock */
	udelay(500);
c7e1dabc:	e3a00f7d 	mov	r0, #500	; 0x1f4
c7e1dac0:	eb001500 	bl	c7e22ec8 <udelay>

	if(cfg->lcd_lp_init)
c7e1dac4:	e5963030 	ldr	r3, [r6, #48]
c7e1dac8:	e3530000 	cmp	r3, #0	; 0x0
c7e1dacc:	0a000001 	beq	c7e1dad8 <ssd2828_init+0x3cc>
		cfg->lcd_lp_init(cfg);
c7e1dad0:	e1a00006 	mov	r0, r6
c7e1dad4:	e12fff33 	blx	r3

	send_mipi_dcs_command(cfg, MIPI_DCS_EXIT_SLEEP_MODE, 1);
c7e1dad8:	e3a01011 	mov	r1, #17	; 0x11
c7e1dadc:	e3a02001 	mov	r2, #1	; 0x1
c7e1dae0:	e1a00006 	mov	r0, r6
c7e1dae4:	ebfffee8 	bl	c7e1d68c <send_mipi_dcs_command>
	mdelay(cfg->mipi_dsi_delay_after_exit_sleep_mode_ms);
c7e1dae8:	e5960028 	ldr	r0, [r6, #40]
c7e1daec:	eb001500 	bl	c7e22ef4 <mdelay>

	send_mipi_dcs_command(cfg, MIPI_DCS_SET_DISPLAY_ON, 1);
c7e1daf0:	e1a00006 	mov	r0, r6
c7e1daf4:	e3a01029 	mov	r1, #41	; 0x29
c7e1daf8:	e3a02001 	mov	r2, #1	; 0x1
c7e1dafc:	ebfffee2 	bl	c7e1d68c <send_mipi_dcs_command>
	mdelay(cfg->mipi_dsi_delay_after_set_display_on_ms);
c7e1db00:	e596002c 	ldr	r0, [r6, #44]
c7e1db04:	eb0014fa 	bl	c7e22ef4 <mdelay>

	cfgr_reg |= SSD2828_CFGR_HS;    /* Enable HS mode for data lanes */
	cfgr_reg |= SSD2828_CFGR_VEN;   /* Enable video pipeline */
	write_hw_register(cfg, SSD2828_CFGR, cfgr_reg);
c7e1db08:	e1a00006 	mov	r0, r6
c7e1db0c:	e3892009 	orr	r2, r9, #9	; 0x9
c7e1db10:	e3a010b7 	mov	r1, #183	; 0xb7
c7e1db14:	ebfffebf 	bl	c7e1d618 <write_hw_register>
c7e1db18:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e1db1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 * Reset SSD2828
 */
static void ssd2828_reset(const struct ssd2828_config *cfg)
{
	/* RESET needs 10 milliseconds according to the datasheet */
	gpio_set_value(cfg->reset_pin, 0);
c7e1db20:	e3a01000 	mov	r1, #0	; 0x0
c7e1db24:	e5960010 	ldr	r0, [r6, #16]
c7e1db28:	ebffc9b7 	bl	c7e1020c <gpio_set_value>
	mdelay(10);
c7e1db2c:	e3a0000a 	mov	r0, #10	; 0xa
c7e1db30:	eb0014ef 	bl	c7e22ef4 <mdelay>
	gpio_set_value(cfg->reset_pin, 1);
c7e1db34:	e3a01001 	mov	r1, #1	; 0x1
c7e1db38:	e5960010 	ldr	r0, [r6, #16]
c7e1db3c:	ebffc9b2 	bl	c7e1020c <gpio_set_value>
	mdelay(10);
c7e1db40:	e3a0000a 	mov	r0, #10	; 0xa
c7e1db44:	eb0014ea 	bl	c7e22ef4 <mdelay>
	/*
	 * If there is a pin to read data back from SPI, then we are lucky. Try
	 * to check if SPI is configured correctly and SSD2828 is actually able
	 * to talk back.
	 */
	if (cfg->sdo_pin != -1) {
c7e1db48:	e596300c 	ldr	r3, [r6, #12]
c7e1db4c:	e3730001 	cmn	r3, #1	; 0x1
c7e1db50:	1affff3a 	bne	c7e1d840 <ssd2828_init+0x134>
c7e1db54:	eaffff47 	b	c7e1d878 <ssd2828_init+0x16c>
c7e1db58:	c7e33fe7 	.word	0xc7e33fe7
c7e1db5c:	c7e33ff3 	.word	0xc7e33ff3
c7e1db60:	c7e34022 	.word	0xc7e34022
c7e1db64:	c7e3402e 	.word	0xc7e3402e
c7e1db68:	c7e3405d 	.word	0xc7e3405d
c7e1db6c:	c7e34069 	.word	0xc7e34069
c7e1db70:	c7e34098 	.word	0xc7e34098
c7e1db74:	c7e340a6 	.word	0xc7e340a6
c7e1db78:	c7e340d7 	.word	0xc7e340d7
c7e1db7c:	c7e340e3 	.word	0xc7e340e3
c7e1db80:	00002828 	.word	0x00002828
c7e1db84:	00000301 	.word	0x00000301
c7e1db88:	c7e34112 	.word	0xc7e34112
c7e1db8c:	00000321 	.word	0x00000321
c7e1db90:	c7e34136 	.word	0xc7e34136
c7e1db94:	00001387 	.word	0x00001387
c7e1db98:	0007a507 	.word	0x0007a507
c7e1db9c:	0003d477 	.word	0x0003d477
c7e1dba0:	0001ec2f 	.word	0x0001ec2f
c7e1dba4:	00013880 	.word	0x00013880

c7e1dba8 <get_fs>:
struct ext_filesystem ext_fs;

struct ext_filesystem *get_fs(void)
{
	return &ext_fs;
}
c7e1dba8:	e59f0000 	ldr	r0, [pc, #0]	; c7e1dbb0 <get_fs+0x8>
c7e1dbac:	e12fff1e 	bx	lr
c7e1dbb0:	c7e421f8 	.word	0xc7e421f8

c7e1dbb4 <ext4fs_read_file>:
 * Optimized read file API : collects and defers contiguous sector
 * reads into one potentially more efficient larger sequential read action
 */
int ext4fs_read_file(struct ext2fs_node *node, int pos,
		unsigned int len, char *buf)
{
c7e1dbb4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e1dbb8:	e1a04000 	mov	r4, r0
	int i;
	int blockcnt;
	int log2blocksize = LOG2_EXT2_BLOCK_SIZE(node->data);
c7e1dbbc:	e5900000 	ldr	r0, [r0]
	int blocksize = 1 << (log2blocksize + DISK_SECTOR_BITS);
c7e1dbc0:	e594e008 	ldr	lr, [r4, #8]
int ext4fs_read_file(struct ext2fs_node *node, int pos,
		unsigned int len, char *buf)
{
	int i;
	int blockcnt;
	int log2blocksize = LOG2_EXT2_BLOCK_SIZE(node->data);
c7e1dbc4:	e5905018 	ldr	r5, [r0, #24]
	int blocksize = 1 << (log2blocksize + DISK_SECTOR_BITS);
c7e1dbc8:	e3a00001 	mov	r0, #1	; 0x1
c7e1dbcc:	e285c00a 	add	ip, r5, #10	; 0xa
c7e1dbd0:	e1a09c10 	lsl	r9, r0, ip
 * Optimized read file API : collects and defers contiguous sector
 * reads into one potentially more efficient larger sequential read action
 */
int ext4fs_read_file(struct ext2fs_node *node, int pos,
		unsigned int len, char *buf)
{
c7e1dbd4:	e24dd030 	sub	sp, sp, #48	; 0x30
	int i;
	int blockcnt;
	int log2blocksize = LOG2_EXT2_BLOCK_SIZE(node->data);
	int blocksize = 1 << (log2blocksize + DISK_SECTOR_BITS);
c7e1dbd8:	e152000e 	cmp	r2, lr
c7e1dbdc:	21a0200e 	movcs	r2, lr
 * Optimized read file API : collects and defers contiguous sector
 * reads into one potentially more efficient larger sequential read action
 */
int ext4fs_read_file(struct ext2fs_node *node, int pos,
		unsigned int len, char *buf)
{
c7e1dbe0:	e58d1004 	str	r1, [sp, #4]

	/* Adjust len so it we can't read past the end of the file. */
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;
c7e1dbe4:	e2490001 	sub	r0, r9, #1	; 0x1
c7e1dbe8:	e0821001 	add	r1, r2, r1
c7e1dbec:	e58d1008 	str	r1, [sp, #8]
c7e1dbf0:	e0800001 	add	r0, r0, r1
int ext4fs_read_file(struct ext2fs_node *node, int pos,
		unsigned int len, char *buf)
{
	int i;
	int blockcnt;
	int log2blocksize = LOG2_EXT2_BLOCK_SIZE(node->data);
c7e1dbf4:	e2855001 	add	r5, r5, #1	; 0x1

	/* Adjust len so it we can't read past the end of the file. */
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;
c7e1dbf8:	e1a01009 	mov	r1, r9
		unsigned int len, char *buf)
{
	int i;
	int blockcnt;
	int log2blocksize = LOG2_EXT2_BLOCK_SIZE(node->data);
	int blocksize = 1 << (log2blocksize + DISK_SECTOR_BITS);
c7e1dbfc:	e58d202c 	str	r2, [sp, #44]
 * Optimized read file API : collects and defers contiguous sector
 * reads into one potentially more efficient larger sequential read action
 */
int ext4fs_read_file(struct ext2fs_node *node, int pos,
		unsigned int len, char *buf)
{
c7e1dc00:	e58d3000 	str	r3, [sp]
	int i;
	int blockcnt;
	int log2blocksize = LOG2_EXT2_BLOCK_SIZE(node->data);
c7e1dc04:	e58d5018 	str	r5, [sp, #24]

	/* Adjust len so it we can't read past the end of the file. */
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;
c7e1dc08:	eb00323e 	bl	c7e2a508 <__udivsi3>

	for (i = pos / blocksize; i < blockcnt; i++) {
c7e1dc0c:	e1a01009 	mov	r1, r9

	/* Adjust len so it we can't read past the end of the file. */
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;
c7e1dc10:	e58d0014 	str	r0, [sp, #20]

	for (i = pos / blocksize; i < blockcnt; i++) {
c7e1dc14:	e59d0004 	ldr	r0, [sp, #4]
c7e1dc18:	eb00327f 	bl	c7e2a61c <__divsi3>
		int blknr;
		int blockoff = pos % blocksize;
		int blockend = blocksize;
		int skipfirst = 0;
		blknr = read_allocated_block(&(node->inode), i);
c7e1dc1c:	e3a06000 	mov	r6, #0	; 0x0
c7e1dc20:	e2844004 	add	r4, r4, #4	; 0x4
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;

	for (i = pos / blocksize; i < blockcnt; i++) {
c7e1dc24:	e58d0028 	str	r0, [sp, #40]
		int blknr;
		int blockoff = pos % blocksize;
		int blockend = blocksize;
		int skipfirst = 0;
		blknr = read_allocated_block(&(node->inode), i);
c7e1dc28:	e58d400c 	str	r4, [sp, #12]
c7e1dc2c:	e58d0010 	str	r0, [sp, #16]
c7e1dc30:	e3e05000 	mvn	r5, #0	; 0x0
c7e1dc34:	e1a0a006 	mov	sl, r6
c7e1dc38:	e58d601c 	str	r6, [sp, #28]
c7e1dc3c:	e58d6020 	str	r6, [sp, #32]
c7e1dc40:	e58d6024 	str	r6, [sp, #36]
c7e1dc44:	ea000053 	b	c7e1dd98 <ext4fs_read_file+0x1e4>
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;

	for (i = pos / blocksize; i < blockcnt; i++) {
c7e1dc48:	e59d000c 	ldr	r0, [sp, #12]
c7e1dc4c:	e59d1010 	ldr	r1, [sp, #16]
c7e1dc50:	eb000115 	bl	c7e1e0ac <read_allocated_block>
		int blknr;
		int blockoff = pos % blocksize;
		int blockend = blocksize;
		int skipfirst = 0;
		blknr = read_allocated_block(&(node->inode), i);
		if (blknr < 0)
c7e1dc54:	e3500000 	cmp	r0, #0	; 0x0
c7e1dc58:	ba00005d 	blt	c7e1ddd4 <ext4fs_read_file+0x220>
			return -1;

		blknr = blknr << log2blocksize;

		/* Last block.  */
		if (i == blockcnt - 1) {
c7e1dc5c:	e59d2014 	ldr	r2, [sp, #20]
c7e1dc60:	e59d1010 	ldr	r1, [sp, #16]
c7e1dc64:	e2423001 	sub	r3, r2, #1	; 0x1
		int skipfirst = 0;
		blknr = read_allocated_block(&(node->inode), i);
		if (blknr < 0)
			return -1;

		blknr = blknr << log2blocksize;
c7e1dc68:	e59d2018 	ldr	r2, [sp, #24]

		/* Last block.  */
		if (i == blockcnt - 1) {
c7e1dc6c:	e1510003 	cmp	r1, r3
		int skipfirst = 0;
		blknr = read_allocated_block(&(node->inode), i);
		if (blknr < 0)
			return -1;

		blknr = blknr << log2blocksize;
c7e1dc70:	e1a07210 	lsl	r7, r0, r2

		/* Last block.  */
		if (i == blockcnt - 1) {
c7e1dc74:	1a000004 	bne	c7e1dc8c <ext4fs_read_file+0xd8>
			blockend = (len + pos) % blocksize;
c7e1dc78:	e59d0008 	ldr	r0, [sp, #8]
c7e1dc7c:	e1a01009 	mov	r1, r9
c7e1dc80:	eb00325d 	bl	c7e2a5fc <__aeabi_uidivmod>

			/* The last portion is exactly blocksize. */
			if (!blockend)
c7e1dc84:	e2514000 	subs	r4, r1, #0	; 0x0
c7e1dc88:	1a000000 	bne	c7e1dc90 <ext4fs_read_file+0xdc>
c7e1dc8c:	e1a04009 	mov	r4, r9
				blockend = blocksize;
		}

		/* First block. */
		if (i == pos / blocksize) {
c7e1dc90:	e59d3010 	ldr	r3, [sp, #16]
c7e1dc94:	e59d1028 	ldr	r1, [sp, #40]
c7e1dc98:	e1530001 	cmp	r3, r1
c7e1dc9c:	13a0b000 	movne	fp, #0	; 0x0
c7e1dca0:	1a000004 	bne	c7e1dcb8 <ext4fs_read_file+0x104>

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;

	for (i = pos / blocksize; i < blockcnt; i++) {
		int blknr;
		int blockoff = pos % blocksize;
c7e1dca4:	e59d0004 	ldr	r0, [sp, #4]
c7e1dca8:	e1a01009 	mov	r1, r9
c7e1dcac:	eb0032a4 	bl	c7e2a744 <__aeabi_idivmod>
		}

		/* First block. */
		if (i == pos / blocksize) {
			skipfirst = blockoff;
			blockend -= skipfirst;
c7e1dcb0:	e0614004 	rsb	r4, r1, r4
c7e1dcb4:	e1a0b001 	mov	fp, r1
		}
		if (blknr) {
c7e1dcb8:	e3570000 	cmp	r7, #0	; 0x0
c7e1dcbc:	0a000020 	beq	c7e1dd44 <ext4fs_read_file+0x190>
			int status;

			if (previous_block_number != -1) {
c7e1dcc0:	e3750001 	cmn	r5, #1	; 0x1
c7e1dcc4:	0a000015 	beq	c7e1dd20 <ext4fs_read_file+0x16c>
				if (delayed_next == blknr) {
c7e1dcc8:	e59d2020 	ldr	r2, [sp, #32]
c7e1dccc:	e1520007 	cmp	r2, r7
					delayed_extent += blockend;
					delayed_next += blockend >> SECTOR_BITS;
c7e1dcd0:	008224c4 	addeq	r2, r2, r4, asr #9
c7e1dcd4:	058d2020 	streq	r2, [sp, #32]
		if (blknr) {
			int status;

			if (previous_block_number != -1) {
				if (delayed_next == blknr) {
					delayed_extent += blockend;
c7e1dcd8:	008aa004 	addeq	sl, sl, r4
		}
		if (blknr) {
			int status;

			if (previous_block_number != -1) {
				if (delayed_next == blknr) {
c7e1dcdc:	0a000026 	beq	c7e1dd7c <ext4fs_read_file+0x1c8>
					delayed_extent += blockend;
					delayed_next += blockend >> SECTOR_BITS;
				} else {	/* spill */
					status = ext4fs_devread(delayed_start,
c7e1dce0:	e1a00006 	mov	r0, r6
c7e1dce4:	e59d101c 	ldr	r1, [sp, #28]
c7e1dce8:	e1a0200a 	mov	r2, sl
c7e1dcec:	e59d3024 	ldr	r3, [sp, #36]
c7e1dcf0:	eb00049c 	bl	c7e1ef68 <ext4fs_devread>
							delayed_skipfirst,
							delayed_extent,
							delayed_buf);
					if (status == 0)
c7e1dcf4:	e3500000 	cmp	r0, #0	; 0x0
c7e1dcf8:	0a000035 	beq	c7e1ddd4 <ext4fs_read_file+0x220>
					previous_block_number = blknr;
					delayed_start = blknr;
					delayed_extent = blockend;
					delayed_skipfirst = skipfirst;
					delayed_buf = buf;
					delayed_next = blknr +
c7e1dcfc:	e59d3000 	ldr	r3, [sp]
c7e1dd00:	e1a0a004 	mov	sl, r4
c7e1dd04:	e08744c4 	add	r4, r7, r4, asr #9
c7e1dd08:	e1a05007 	mov	r5, r7
c7e1dd0c:	e58d4020 	str	r4, [sp, #32]
c7e1dd10:	e1a06007 	mov	r6, r7
c7e1dd14:	e58db01c 	str	fp, [sp, #28]
c7e1dd18:	e58d3024 	str	r3, [sp, #36]
c7e1dd1c:	ea000016 	b	c7e1dd7c <ext4fs_read_file+0x1c8>
				previous_block_number = blknr;
				delayed_start = blknr;
				delayed_extent = blockend;
				delayed_skipfirst = skipfirst;
				delayed_buf = buf;
				delayed_next = blknr +
c7e1dd20:	e59d1000 	ldr	r1, [sp]
c7e1dd24:	e1a0a004 	mov	sl, r4
c7e1dd28:	e08744c4 	add	r4, r7, r4, asr #9
c7e1dd2c:	e1a05007 	mov	r5, r7
c7e1dd30:	e58d4020 	str	r4, [sp, #32]
c7e1dd34:	e1a06007 	mov	r6, r7
c7e1dd38:	e58db01c 	str	fp, [sp, #28]
c7e1dd3c:	e58d1024 	str	r1, [sp, #36]
c7e1dd40:	ea00000d 	b	c7e1dd7c <ext4fs_read_file+0x1c8>
					(blockend >> SECTOR_BITS);
			}
		} else {
			if (previous_block_number != -1) {
c7e1dd44:	e3750001 	cmn	r5, #1	; 0x1
c7e1dd48:	0a000007 	beq	c7e1dd6c <ext4fs_read_file+0x1b8>
				/* spill */
				status = ext4fs_devread(delayed_start,
c7e1dd4c:	e1a00006 	mov	r0, r6
c7e1dd50:	e59d101c 	ldr	r1, [sp, #28]
c7e1dd54:	e1a0200a 	mov	r2, sl
c7e1dd58:	e59d3024 	ldr	r3, [sp, #36]
c7e1dd5c:	eb000481 	bl	c7e1ef68 <ext4fs_devread>
							delayed_skipfirst,
							delayed_extent,
							delayed_buf);
				if (status == 0)
c7e1dd60:	e1b00800 	lsls	r0, r0, #16
c7e1dd64:	0a00001a 	beq	c7e1ddd4 <ext4fs_read_file+0x220>
c7e1dd68:	e3e05000 	mvn	r5, #0	; 0x0
					return -1;
				previous_block_number = -1;
			}
			memset(buf, 0, blocksize - skipfirst);
c7e1dd6c:	e59d0000 	ldr	r0, [sp]
c7e1dd70:	e3a01000 	mov	r1, #0	; 0x0
c7e1dd74:	e06b2009 	rsb	r2, fp, r9
c7e1dd78:	eb001385 	bl	c7e22b94 <memset>
		}
		buf += blocksize - skipfirst;
c7e1dd7c:	e59d2000 	ldr	r2, [sp]
c7e1dd80:	e06b3009 	rsb	r3, fp, r9
c7e1dd84:	e0822003 	add	r2, r2, r3
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;

	for (i = pos / blocksize; i < blockcnt; i++) {
c7e1dd88:	e59d3010 	ldr	r3, [sp, #16]
					return -1;
				previous_block_number = -1;
			}
			memset(buf, 0, blocksize - skipfirst);
		}
		buf += blocksize - skipfirst;
c7e1dd8c:	e58d2000 	str	r2, [sp]
	if (len > filesize)
		len = filesize;

	blockcnt = ((len + pos) + blocksize - 1) / blocksize;

	for (i = pos / blocksize; i < blockcnt; i++) {
c7e1dd90:	e2833001 	add	r3, r3, #1	; 0x1
c7e1dd94:	e58d3010 	str	r3, [sp, #16]
c7e1dd98:	e59d1010 	ldr	r1, [sp, #16]
c7e1dd9c:	e59d2014 	ldr	r2, [sp, #20]
c7e1dda0:	e1510002 	cmp	r1, r2
c7e1dda4:	baffffa7 	blt	c7e1dc48 <ext4fs_read_file+0x94>
			}
			memset(buf, 0, blocksize - skipfirst);
		}
		buf += blocksize - skipfirst;
	}
	if (previous_block_number != -1) {
c7e1dda8:	e3750001 	cmn	r5, #1	; 0x1
c7e1ddac:	0a000006 	beq	c7e1ddcc <ext4fs_read_file+0x218>
		/* spill */
		status = ext4fs_devread(delayed_start,
c7e1ddb0:	e1a00006 	mov	r0, r6
c7e1ddb4:	e59d101c 	ldr	r1, [sp, #28]
c7e1ddb8:	e1a0200a 	mov	r2, sl
c7e1ddbc:	e59d3024 	ldr	r3, [sp, #36]
c7e1ddc0:	eb000468 	bl	c7e1ef68 <ext4fs_devread>
					delayed_skipfirst, delayed_extent,
					delayed_buf);
		if (status == 0)
c7e1ddc4:	e1b00800 	lsls	r0, r0, #16
c7e1ddc8:	0a000001 	beq	c7e1ddd4 <ext4fs_read_file+0x220>
			return -1;
		previous_block_number = -1;
	}

	return len;
c7e1ddcc:	e59d002c 	ldr	r0, [sp, #44]
c7e1ddd0:	ea000000 	b	c7e1ddd8 <ext4fs_read_file+0x224>
c7e1ddd4:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e1ddd8:	e28dd030 	add	sp, sp, #48	; 0x30
c7e1dddc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e1dde0 <ext4fs_read>:
	return 0;
}

int ext4fs_read(char *buf, unsigned len)
{
	if (ext4fs_root == NULL || ext4fs_file == NULL)
c7e1dde0:	e59f3034 	ldr	r3, [pc, #52]	; c7e1de1c <ext4fs_read+0x3c>

	return 0;
}

int ext4fs_read(char *buf, unsigned len)
{
c7e1dde4:	e1a0c000 	mov	ip, r0
	if (ext4fs_root == NULL || ext4fs_file == NULL)
c7e1dde8:	e5933000 	ldr	r3, [r3]
c7e1ddec:	e3530000 	cmp	r3, #0	; 0x0
c7e1ddf0:	0a000007 	beq	c7e1de14 <ext4fs_read+0x34>
c7e1ddf4:	e59f3024 	ldr	r3, [pc, #36]	; c7e1de20 <ext4fs_read+0x40>
c7e1ddf8:	e5930000 	ldr	r0, [r3]
c7e1ddfc:	e3500000 	cmp	r0, #0	; 0x0
c7e1de00:	0a000003 	beq	c7e1de14 <ext4fs_read+0x34>
		return 0;

	return ext4fs_read_file(ext4fs_file, 0, len, buf);
c7e1de04:	e1a02001 	mov	r2, r1
c7e1de08:	e1a0300c 	mov	r3, ip
c7e1de0c:	e3a01000 	mov	r1, #0	; 0x0
c7e1de10:	eaffff67 	b	c7e1dbb4 <ext4fs_read_file>
}
c7e1de14:	e3a00000 	mov	r0, #0	; 0x0
c7e1de18:	e12fff1e 	bx	lr
c7e1de1c:	c7e42248 	.word	0xc7e42248
c7e1de20:	c7e42264 	.word	0xc7e42264

c7e1de24 <ext4fs_free_node>:
	return &ext_fs;
}

void ext4fs_free_node(struct ext2fs_node *node, struct ext2fs_node *currroot)
{
	if ((node != &ext4fs_root->diropen) && (node != currroot))
c7e1de24:	e59f3014 	ldr	r3, [pc, #20]	; c7e1de40 <ext4fs_free_node+0x1c>
c7e1de28:	e5933000 	ldr	r3, [r3]
c7e1de2c:	e28330d0 	add	r3, r3, #208	; 0xd0
c7e1de30:	e1530000 	cmp	r3, r0
c7e1de34:	11500001 	cmpne	r0, r1
c7e1de38:	012fff1e 	bxeq	lr
		free(node);
c7e1de3c:	eaffac47 	b	c7e08f60 <free>
c7e1de40:	c7e42248 	.word	0xc7e42248

c7e1de44 <ext4fs_ls>:
int ext4fs_ls(const char *dirname)
{
	struct ext2fs_node *dirnode;
	int status;

	if (dirname == NULL)
c7e1de44:	e2503000 	subs	r3, r0, #0	; 0x0

	return len;
}

int ext4fs_ls(const char *dirname)
{
c7e1de48:	e92d4013 	push	{r0, r1, r4, lr}
	struct ext2fs_node *dirnode;
	int status;

	if (dirname == NULL)
c7e1de4c:	01a00003 	moveq	r0, r3
c7e1de50:	0a000015 	beq	c7e1deac <ext4fs_ls+0x68>
		return 0;

	status = ext4fs_find_file(dirname, &ext4fs_root->diropen, &dirnode,
c7e1de54:	e59f4054 	ldr	r4, [pc, #84]	; c7e1deb0 <ext4fs_ls+0x6c>
c7e1de58:	e28d2004 	add	r2, sp, #4	; 0x4
c7e1de5c:	e5941000 	ldr	r1, [r4]
c7e1de60:	e3a03002 	mov	r3, #2	; 0x2
c7e1de64:	e28110d0 	add	r1, r1, #208	; 0xd0
c7e1de68:	eb0003fa 	bl	c7e1ee58 <ext4fs_find_file>
				  FILETYPE_DIRECTORY);
	if (status != 1) {
c7e1de6c:	e3500001 	cmp	r0, #1	; 0x1
c7e1de70:	0a000003 	beq	c7e1de84 <ext4fs_ls+0x40>
		printf("** Can not find directory. **\n");
c7e1de74:	e59f0038 	ldr	r0, [pc, #56]	; c7e1deb4 <ext4fs_ls+0x70>
c7e1de78:	ebffaaf6 	bl	c7e08a58 <printf>
c7e1de7c:	e3a00001 	mov	r0, #1	; 0x1
c7e1de80:	ea000009 	b	c7e1deac <ext4fs_ls+0x68>
		return 1;
	}

	ext4fs_iterate_dir(dirnode, NULL, NULL, NULL);
c7e1de84:	e3a01000 	mov	r1, #0	; 0x0
c7e1de88:	e1a02001 	mov	r2, r1
c7e1de8c:	e1a03001 	mov	r3, r1
c7e1de90:	e59d0004 	ldr	r0, [sp, #4]
c7e1de94:	eb0002ad 	bl	c7e1e950 <ext4fs_iterate_dir>
	ext4fs_free_node(dirnode, &ext4fs_root->diropen);
c7e1de98:	e5941000 	ldr	r1, [r4]
c7e1de9c:	e59d0004 	ldr	r0, [sp, #4]
c7e1dea0:	e28110d0 	add	r1, r1, #208	; 0xd0
c7e1dea4:	ebffffde 	bl	c7e1de24 <ext4fs_free_node>
c7e1dea8:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e1deac:	e8bd801c 	pop	{r2, r3, r4, pc}
c7e1deb0:	c7e42248 	.word	0xc7e42248
c7e1deb4:	c7e34158 	.word	0xc7e34158

c7e1deb8 <ext4fs_read_inode>:
			      blkoff, sizeof(struct ext2_block_group),
			      (char *)blkgrp);
}

int ext4fs_read_inode(struct ext2_data *data, int ino, struct ext2_inode *inode)
{
c7e1deb8:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e1debc:	e24dd028 	sub	sp, sp, #40	; 0x28
c7e1dec0:	e58d2004 	str	r2, [sp, #4]
c7e1dec4:	e1a0a000 	mov	sl, r0
	int inodes_per_block, status;
	long int blkno;
	unsigned int blkoff;

	/* It is easier to calculate if the first inode is 0. */
	ino--;
c7e1dec8:	e2419001 	sub	r9, r1, #1	; 0x1

int ext4fs_read_inode(struct ext2_data *data, int ino, struct ext2_inode *inode)
{
	struct ext2_block_group blkgrp;
	struct ext2_sblock *sblock = &data->sblock;
	struct ext_filesystem *fs = get_fs();
c7e1decc:	ebffff35 	bl	c7e1dba8 <get_fs>
	long int blkno;
	unsigned int blkoff;

	/* It is easier to calculate if the first inode is 0. */
	ino--;
	status = ext4fs_blockgroup(data, ino / __le32_to_cpu
c7e1ded0:	e59a1028 	ldr	r1, [sl, #40]

int ext4fs_read_inode(struct ext2_data *data, int ino, struct ext2_inode *inode)
{
	struct ext2_block_group blkgrp;
	struct ext2_sblock *sblock = &data->sblock;
	struct ext_filesystem *fs = get_fs();
c7e1ded4:	e1a0b000 	mov	fp, r0
	long int blkno;
	unsigned int blkoff;

	/* It is easier to calculate if the first inode is 0. */
	ino--;
	status = ext4fs_blockgroup(data, ino / __le32_to_cpu
c7e1ded8:	e1a00009 	mov	r0, r9
c7e1dedc:	eb003189 	bl	c7e2a508 <__udivsi3>
	(struct ext2_data *data, int group, struct ext2_block_group *blkgrp)
{
	long int blkno;
	unsigned int blkoff, desc_per_blk;

	desc_per_blk = EXT2_BLOCK_SIZE(data) / sizeof(struct ext2_block_group);
c7e1dee0:	e59a6018 	ldr	r6, [sl, #24]
c7e1dee4:	e3a03001 	mov	r3, #1	; 0x1
c7e1dee8:	e286500a 	add	r5, r6, #10	; 0xa
c7e1deec:	e1a05513 	lsl	r5, r3, r5
	blkoff = (group % desc_per_blk) * sizeof(struct ext2_block_group);

	debug("ext4fs read %d group descriptor (blkno %ld blkoff %u)\n",
	      group, blkno, blkoff);

	return ext4fs_devread(blkno << LOG2_EXT2_BLOCK_SIZE(data),
c7e1def0:	e59a4014 	ldr	r4, [sl, #20]
	(struct ext2_data *data, int group, struct ext2_block_group *blkgrp)
{
	long int blkno;
	unsigned int blkoff, desc_per_blk;

	desc_per_blk = EXT2_BLOCK_SIZE(data) / sizeof(struct ext2_block_group);
c7e1def4:	e1a052a5 	lsr	r5, r5, #5
	blkoff = (group % desc_per_blk) * sizeof(struct ext2_block_group);

	debug("ext4fs read %d group descriptor (blkno %ld blkoff %u)\n",
	      group, blkno, blkoff);

	return ext4fs_devread(blkno << LOG2_EXT2_BLOCK_SIZE(data),
c7e1def8:	e1a01005 	mov	r1, r5
c7e1defc:	e0844003 	add	r4, r4, r3
	long int blkno;
	unsigned int blkoff;

	/* It is easier to calculate if the first inode is 0. */
	ino--;
	status = ext4fs_blockgroup(data, ino / __le32_to_cpu
c7e1df00:	e1a07000 	mov	r7, r0
	blkoff = (group % desc_per_blk) * sizeof(struct ext2_block_group);

	debug("ext4fs read %d group descriptor (blkno %ld blkoff %u)\n",
	      group, blkno, blkoff);

	return ext4fs_devread(blkno << LOG2_EXT2_BLOCK_SIZE(data),
c7e1df04:	eb00317f 	bl	c7e2a508 <__udivsi3>
c7e1df08:	e2866001 	add	r6, r6, #1	; 0x1
c7e1df0c:	e0844000 	add	r4, r4, r0
c7e1df10:	e1a01005 	mov	r1, r5
c7e1df14:	e1a00007 	mov	r0, r7
c7e1df18:	eb0031b7 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1df1c:	e1a04614 	lsl	r4, r4, r6
c7e1df20:	e1a01281 	lsl	r1, r1, #5
c7e1df24:	e1a00004 	mov	r0, r4
c7e1df28:	e3a02020 	mov	r2, #32	; 0x20
c7e1df2c:	e28d3008 	add	r3, sp, #8	; 0x8
c7e1df30:	eb00040c 	bl	c7e1ef68 <ext4fs_devread>

	/* It is easier to calculate if the first inode is 0. */
	ino--;
	status = ext4fs_blockgroup(data, ino / __le32_to_cpu
				   (sblock->inodes_per_group), &blkgrp);
	if (status == 0)
c7e1df34:	e3500000 	cmp	r0, #0	; 0x0
c7e1df38:	0a00001b 	beq	c7e1dfac <ext4fs_read_inode+0xf4>
		return 0;

	inodes_per_block = EXT2_BLOCK_SIZE(data) / fs->inodesz;
c7e1df3c:	e59a5018 	ldr	r5, [sl, #24]
c7e1df40:	e59b700c 	ldr	r7, [fp, #12]
c7e1df44:	e3a03001 	mov	r3, #1	; 0x1
c7e1df48:	e285000a 	add	r0, r5, #10	; 0xa
c7e1df4c:	e1a00013 	lsl	r0, r3, r0
c7e1df50:	e1a01007 	mov	r1, r7
c7e1df54:	eb00316b 	bl	c7e2a508 <__udivsi3>
	blkno = __le32_to_cpu(blkgrp.inode_table_id) +
	    (ino % __le32_to_cpu(sblock->inodes_per_group)) / inodes_per_block;
	blkoff = (ino % inodes_per_block) * fs->inodesz;
	/* Read the inode. */
	status = ext4fs_devread(blkno << LOG2_EXT2_BLOCK_SIZE(data), blkoff,
c7e1df58:	e59a1028 	ldr	r1, [sl, #40]
	status = ext4fs_blockgroup(data, ino / __le32_to_cpu
				   (sblock->inodes_per_group), &blkgrp);
	if (status == 0)
		return 0;

	inodes_per_block = EXT2_BLOCK_SIZE(data) / fs->inodesz;
c7e1df5c:	e1a06000 	mov	r6, r0
	blkno = __le32_to_cpu(blkgrp.inode_table_id) +
	    (ino % __le32_to_cpu(sblock->inodes_per_group)) / inodes_per_block;
	blkoff = (ino % inodes_per_block) * fs->inodesz;
	/* Read the inode. */
	status = ext4fs_devread(blkno << LOG2_EXT2_BLOCK_SIZE(data), blkoff,
c7e1df60:	e1a00009 	mov	r0, r9
c7e1df64:	eb0031a4 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e1df68:	e1a00001 	mov	r0, r1
c7e1df6c:	e1a01006 	mov	r1, r6
c7e1df70:	eb003164 	bl	c7e2a508 <__udivsi3>
c7e1df74:	e59d3010 	ldr	r3, [sp, #16]
c7e1df78:	e2855001 	add	r5, r5, #1	; 0x1
c7e1df7c:	e0804003 	add	r4, r0, r3
c7e1df80:	e1a01006 	mov	r1, r6
c7e1df84:	e1a00009 	mov	r0, r9
c7e1df88:	eb0031ed 	bl	c7e2a744 <__aeabi_idivmod>
c7e1df8c:	e1a04514 	lsl	r4, r4, r5
c7e1df90:	e0010197 	mul	r1, r7, r1
c7e1df94:	e1a00004 	mov	r0, r4
c7e1df98:	e59d3004 	ldr	r3, [sp, #4]
c7e1df9c:	e3a02080 	mov	r2, #128	; 0x80
c7e1dfa0:	eb0003f0 	bl	c7e1ef68 <ext4fs_devread>
c7e1dfa4:	e2500000 	subs	r0, r0, #0	; 0x0
c7e1dfa8:	13a00001 	movne	r0, #1	; 0x1
				sizeof(struct ext2_inode), (char *)inode);
	if (status == 0)
		return 0;

	return 1;
}
c7e1dfac:	e28dd028 	add	sp, sp, #40	; 0x28
c7e1dfb0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e1dfb4 <zalloc>:
#define SUPERBLOCK_SECTOR	2
#define SUPERBLOCK_SIZE	1024
#define F_FILE			1

static inline void *zalloc(size_t size)
{
c7e1dfb4:	e92d4070 	push	{r4, r5, r6, lr}
	void *p = memalign(ARCH_DMA_MINALIGN, size);
c7e1dfb8:	e1a01000 	mov	r1, r0
#define SUPERBLOCK_SECTOR	2
#define SUPERBLOCK_SIZE	1024
#define F_FILE			1

static inline void *zalloc(size_t size)
{
c7e1dfbc:	e1a04000 	mov	r4, r0
	void *p = memalign(ARCH_DMA_MINALIGN, size);
c7e1dfc0:	e3a00040 	mov	r0, #64	; 0x40
c7e1dfc4:	ebffae01 	bl	c7e097d0 <memalign>
	memset(p, 0, size);
c7e1dfc8:	e1a02004 	mov	r2, r4
#define SUPERBLOCK_SIZE	1024
#define F_FILE			1

static inline void *zalloc(size_t size)
{
	void *p = memalign(ARCH_DMA_MINALIGN, size);
c7e1dfcc:	e1a05000 	mov	r5, r0
	memset(p, 0, size);
c7e1dfd0:	e3a01000 	mov	r1, #0	; 0x0
c7e1dfd4:	eb0012ee 	bl	c7e22b94 <memset>
	return p;
}
c7e1dfd8:	e1a00005 	mov	r0, r5
c7e1dfdc:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e1dfe0 <ext4fs_mount>:

	return -1;
}

int ext4fs_mount(unsigned part_length)
{
c7e1dfe0:	e92d4070 	push	{r4, r5, r6, lr}
	struct ext2_data *data;
	int status;
	struct ext_filesystem *fs = get_fs();
c7e1dfe4:	ebfffeef 	bl	c7e1dba8 <get_fs>
c7e1dfe8:	e1a05000 	mov	r5, r0
	data = zalloc(sizeof(struct ext2_data));
c7e1dfec:	e3a00f57 	mov	r0, #348	; 0x15c
c7e1dff0:	ebffffef 	bl	c7e1dfb4 <zalloc>
	if (!data)
c7e1dff4:	e2504000 	subs	r4, r0, #0	; 0x0
c7e1dff8:	01a00004 	moveq	r0, r4
c7e1dffc:	08bd8070 	popeq	{r4, r5, r6, pc}
		return 0;

	/* Read the superblock. */
	status = ext4fs_devread(1 * 2, 0, sizeof(struct ext2_sblock),
c7e1e000:	e3a00002 	mov	r0, #2	; 0x2
c7e1e004:	e3a01000 	mov	r1, #0	; 0x0
c7e1e008:	e3a020cc 	mov	r2, #204	; 0xcc
c7e1e00c:	e1a03004 	mov	r3, r4
c7e1e010:	eb0003d4 	bl	c7e1ef68 <ext4fs_devread>
				(char *)&data->sblock);

	if (status == 0)
c7e1e014:	e3500000 	cmp	r0, #0	; 0x0
c7e1e018:	0a000017 	beq	c7e1e07c <ext4fs_mount+0x9c>
		goto fail;

	/* Make sure this is an ext2 filesystem. */
	if (__le16_to_cpu(data->sblock.magic) != EXT2_MAGIC)
c7e1e01c:	e1d423b8 	ldrh	r2, [r4, #56]
c7e1e020:	e59f3078 	ldr	r3, [pc, #120]	; c7e1e0a0 <ext4fs_mount+0xc0>
c7e1e024:	e1520003 	cmp	r2, r3
c7e1e028:	1a000013 	bne	c7e1e07c <ext4fs_mount+0x9c>
		goto fail;

	if (__le32_to_cpu(data->sblock.revision_level == 0))
c7e1e02c:	e594304c 	ldr	r3, [r4, #76]

	debug("EXT2 rev %d, inode_size %d\n",
	       __le32_to_cpu(data->sblock.revision_level), fs->inodesz);

	data->diropen.data = data;
	data->diropen.ino = 2;
c7e1e030:	e3a01002 	mov	r1, #2	; 0x2

	/* Make sure this is an ext2 filesystem. */
	if (__le16_to_cpu(data->sblock.magic) != EXT2_MAGIC)
		goto fail;

	if (__le32_to_cpu(data->sblock.revision_level == 0))
c7e1e034:	e3530000 	cmp	r3, #0	; 0x0
		fs->inodesz = 128;
	else
		fs->inodesz = __le16_to_cpu(data->sblock.inode_size);
c7e1e038:	11d435b8 	ldrhne	r3, [r4, #88]
	/* Make sure this is an ext2 filesystem. */
	if (__le16_to_cpu(data->sblock.magic) != EXT2_MAGIC)
		goto fail;

	if (__le32_to_cpu(data->sblock.revision_level == 0))
		fs->inodesz = 128;
c7e1e03c:	02833080 	addeq	r3, r3, #128	; 0x80
	else
		fs->inodesz = __le16_to_cpu(data->sblock.inode_size);
c7e1e040:	e585300c 	str	r3, [r5, #12]
	       __le32_to_cpu(data->sblock.revision_level), fs->inodesz);

	data->diropen.data = data;
	data->diropen.ino = 2;
	data->diropen.inode_read = 1;
	data->inode = &data->diropen.inode;
c7e1e044:	e28420d4 	add	r2, r4, #212	; 0xd4
	debug("EXT2 rev %d, inode_size %d\n",
	       __le32_to_cpu(data->sblock.revision_level), fs->inodesz);

	data->diropen.data = data;
	data->diropen.ino = 2;
	data->diropen.inode_read = 1;
c7e1e048:	e3a05001 	mov	r5, #1	; 0x1
		fs->inodesz = __le16_to_cpu(data->sblock.inode_size);

	debug("EXT2 rev %d, inode_size %d\n",
	       __le32_to_cpu(data->sblock.revision_level), fs->inodesz);

	data->diropen.data = data;
c7e1e04c:	e58440d0 	str	r4, [r4, #208]
	data->diropen.ino = 2;
c7e1e050:	e5841154 	str	r1, [r4, #340]
	data->diropen.inode_read = 1;
c7e1e054:	e5845158 	str	r5, [r4, #344]
	data->inode = &data->diropen.inode;
c7e1e058:	e58420cc 	str	r2, [r4, #204]

	status = ext4fs_read_inode(data, 2, data->inode);
c7e1e05c:	e1a00004 	mov	r0, r4
c7e1e060:	ebffff94 	bl	c7e1deb8 <ext4fs_read_inode>
	if (status == 0)
c7e1e064:	e3500000 	cmp	r0, #0	; 0x0
c7e1e068:	0a000003 	beq	c7e1e07c <ext4fs_mount+0x9c>
		goto fail;

	ext4fs_root = data;
c7e1e06c:	e59f3030 	ldr	r3, [pc, #48]	; c7e1e0a4 <ext4fs_mount+0xc4>
c7e1e070:	e1a00005 	mov	r0, r5
c7e1e074:	e5834000 	str	r4, [r3]
c7e1e078:	e8bd8070 	pop	{r4, r5, r6, pc}

	return 1;
fail:
	printf("Failed to mount ext2 filesystem...\n");
c7e1e07c:	e59f0024 	ldr	r0, [pc, #36]	; c7e1e0a8 <ext4fs_mount+0xc8>
c7e1e080:	ebffaa74 	bl	c7e08a58 <printf>
	free(data);
c7e1e084:	e1a00004 	mov	r0, r4
c7e1e088:	ebffabb4 	bl	c7e08f60 <free>
	ext4fs_root = NULL;
c7e1e08c:	e59f3010 	ldr	r3, [pc, #16]	; c7e1e0a4 <ext4fs_mount+0xc4>
c7e1e090:	e3a02000 	mov	r2, #0	; 0x0
c7e1e094:	e5832000 	str	r2, [r3]
c7e1e098:	e1a00002 	mov	r0, r2

	return 0;
}
c7e1e09c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1e0a0:	0000ef53 	.word	0x0000ef53
c7e1e0a4:	c7e42248 	.word	0xc7e42248
c7e1e0a8:	c7e34177 	.word	0xc7e34177

c7e1e0ac <read_allocated_block>:

	return 1;
}

long int read_allocated_block(struct ext2_inode *inode, int fileblock)
{
c7e1e0ac:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	long int rblock;
	long int perblock_parent;
	long int perblock_child;
	unsigned long long start;
	/* get the blocksize of the filesystem */
	blksz = EXT2_BLOCK_SIZE(ext4fs_root);
c7e1e0b0:	e59f577c 	ldr	r5, [pc, #1916]	; c7e1e834 <read_allocated_block+0x788>
	log2_blksz = LOG2_EXT2_BLOCK_SIZE(ext4fs_root);
	if (le32_to_cpu(inode->flags) & EXT4_EXTENTS_FL) {
c7e1e0b4:	e5902020 	ldr	r2, [r0, #32]
	long int rblock;
	long int perblock_parent;
	long int perblock_child;
	unsigned long long start;
	/* get the blocksize of the filesystem */
	blksz = EXT2_BLOCK_SIZE(ext4fs_root);
c7e1e0b8:	e5953000 	ldr	r3, [r5]

	return 1;
}

long int read_allocated_block(struct ext2_inode *inode, int fileblock)
{
c7e1e0bc:	e1a06000 	mov	r6, r0
	long int rblock;
	long int perblock_parent;
	long int perblock_child;
	unsigned long long start;
	/* get the blocksize of the filesystem */
	blksz = EXT2_BLOCK_SIZE(ext4fs_root);
c7e1e0c0:	e5930018 	ldr	r0, [r3, #24]
	log2_blksz = LOG2_EXT2_BLOCK_SIZE(ext4fs_root);
	if (le32_to_cpu(inode->flags) & EXT4_EXTENTS_FL) {
c7e1e0c4:	e3120702 	tst	r2, #524288	; 0x80000
	long int rblock;
	long int perblock_parent;
	long int perblock_child;
	unsigned long long start;
	/* get the blocksize of the filesystem */
	blksz = EXT2_BLOCK_SIZE(ext4fs_root);
c7e1e0c8:	e3a03001 	mov	r3, #1	; 0x1
c7e1e0cc:	e280200a 	add	r2, r0, #10	; 0xa
c7e1e0d0:	e1a04213 	lsl	r4, r3, r2

	return 1;
}

long int read_allocated_block(struct ext2_inode *inode, int fileblock)
{
c7e1e0d4:	e1a0b001 	mov	fp, r1
	long int perblock_parent;
	long int perblock_child;
	unsigned long long start;
	/* get the blocksize of the filesystem */
	blksz = EXT2_BLOCK_SIZE(ext4fs_root);
	log2_blksz = LOG2_EXT2_BLOCK_SIZE(ext4fs_root);
c7e1e0d8:	e0809003 	add	r9, r0, r3
	if (le32_to_cpu(inode->flags) & EXT4_EXTENTS_FL) {
c7e1e0dc:	0a000053 	beq	c7e1e230 <read_allocated_block+0x184>
		char *buf = zalloc(blksz);
c7e1e0e0:	e1a00004 	mov	r0, r4
c7e1e0e4:	ebffffb2 	bl	c7e1dfb4 <zalloc>
		if (!buf)
c7e1e0e8:	e2507000 	subs	r7, r0, #0	; 0x0
c7e1e0ec:	03e0000b 	mvneq	r0, #11	; 0xb
c7e1e0f0:	08bd8ef0 	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
		struct ext4_extent_header *ext_block,
		uint32_t fileblock, int log2_blksz)
{
	struct ext4_extent_idx *index;
	unsigned long long block;
	struct ext_filesystem *fs = get_fs();
c7e1e0f4:	ebfffeab 	bl	c7e1dba8 <get_fs>
		if (!buf)
			return -ENOMEM;
		struct ext4_extent_header *ext_block;
		struct ext4_extent *extent;
		int i = -1;
		ext_block = ext4fs_get_extent_block(ext4fs_root, buf,
c7e1e0f8:	e2864028 	add	r4, r6, #40	; 0x28
		struct ext4_extent_header *ext_block,
		uint32_t fileblock, int log2_blksz)
{
	struct ext4_extent_idx *index;
	unsigned long long block;
	struct ext_filesystem *fs = get_fs();
c7e1e0fc:	e1a06000 	mov	r6, r0
	int i;

	while (1) {
		index = (struct ext4_extent_idx *)(ext_block + 1);

		if (le32_to_cpu(ext_block->eh_magic) != EXT4_EXT_MAGIC)
c7e1e100:	e1d420b0 	ldrh	r2, [r4]
c7e1e104:	e59f372c 	ldr	r3, [pc, #1836]	; c7e1e838 <read_allocated_block+0x78c>
	unsigned long long block;
	struct ext_filesystem *fs = get_fs();
	int i;

	while (1) {
		index = (struct ext4_extent_idx *)(ext_block + 1);
c7e1e108:	e284c00c 	add	ip, r4, #12	; 0xc

		if (le32_to_cpu(ext_block->eh_magic) != EXT4_EXT_MAGIC)
c7e1e10c:	e1520003 	cmp	r2, r3
c7e1e110:	1a0001c1 	bne	c7e1e81c <read_allocated_block+0x770>
			return 0;

		if (ext_block->eh_depth == 0)
c7e1e114:	e1d430b6 	ldrh	r3, [r4, #6]
c7e1e118:	e1d4e0b2 	ldrh	lr, [r4, #2]
c7e1e11c:	e3530000 	cmp	r3, #0	; 0x0
c7e1e120:	0a00001b 	beq	c7e1e194 <read_allocated_block+0xe8>
			return ext_block;
		i = -1;
		do {
			i++;
			if (i >= le32_to_cpu(ext_block->eh_entries))
c7e1e124:	e1a00004 	mov	r0, r4
c7e1e128:	e3e02000 	mvn	r2, #0	; 0x0

		if (ext_block->eh_depth == 0)
			return ext_block;
		i = -1;
		do {
			i++;
c7e1e12c:	e2821001 	add	r1, r2, #1	; 0x1
			if (i >= le32_to_cpu(ext_block->eh_entries))
c7e1e130:	e151000e 	cmp	r1, lr
c7e1e134:	2a000003 	bcs	c7e1e148 <read_allocated_block+0x9c>
				break;
		} while (fileblock > le32_to_cpu(index[i].ei_block));
c7e1e138:	e5b0300c 	ldr	r3, [r0, #12]!
c7e1e13c:	e15b0003 	cmp	fp, r3
c7e1e140:	81a02001 	movhi	r2, r1
c7e1e144:	8afffff8 	bhi	c7e1e12c <read_allocated_block+0x80>

		if (--i < 0)
c7e1e148:	e3720001 	cmn	r2, #1	; 0x1
c7e1e14c:	0a0001b2 	beq	c7e1e81c <read_allocated_block+0x770>
			return 0;

		block = le32_to_cpu(index[i].ei_leaf_hi);
c7e1e150:	e3a0300c 	mov	r3, #12	; 0xc
c7e1e154:	e023c392 	mla	r3, r2, r3, ip
		block = (block << 32) + le32_to_cpu(index[i].ei_leaf_lo);
c7e1e158:	e1d350b8 	ldrh	r5, [r3, #8]

		if (ext4fs_devread(block << log2_blksz, 0, fs->blksz, buf))
c7e1e15c:	e5933004 	ldr	r3, [r3, #4]

		if (--i < 0)
			return 0;

		block = le32_to_cpu(index[i].ei_leaf_hi);
		block = (block << 32) + le32_to_cpu(index[i].ei_leaf_lo);
c7e1e160:	e3a04000 	mov	r4, #0	; 0x0

		if (ext4fs_devread(block << log2_blksz, 0, fs->blksz, buf))
c7e1e164:	e0940003 	adds	r0, r4, r3
c7e1e168:	e2a51000 	adc	r1, r5, #0	; 0x0
c7e1e16c:	e1a02009 	mov	r2, r9
c7e1e170:	eb003189 	bl	c7e2a79c <__ashldi3>
c7e1e174:	e1a01004 	mov	r1, r4
c7e1e178:	e5962008 	ldr	r2, [r6, #8]
c7e1e17c:	e1a03007 	mov	r3, r7
c7e1e180:	eb000378 	bl	c7e1ef68 <ext4fs_devread>
c7e1e184:	e1500004 	cmp	r0, r4
c7e1e188:	0a0001a3 	beq	c7e1e81c <read_allocated_block+0x770>
			ext_block = (struct ext4_extent_header *)buf;
c7e1e18c:	e1a04007 	mov	r4, r7
c7e1e190:	eaffffda 	b	c7e1e100 <read_allocated_block+0x54>

		extent = (struct ext4_extent *)(ext_block + 1);

		do {
			i++;
			if (i >= le32_to_cpu(ext_block->eh_entries))
c7e1e194:	e1a00004 	mov	r0, r4
c7e1e198:	e3e04000 	mvn	r4, #0	; 0x0
		}

		extent = (struct ext4_extent *)(ext_block + 1);

		do {
			i++;
c7e1e19c:	e2842001 	add	r2, r4, #1	; 0x1
			if (i >= le32_to_cpu(ext_block->eh_entries))
c7e1e1a0:	e152000e 	cmp	r2, lr
c7e1e1a4:	2a000003 	bcs	c7e1e1b8 <read_allocated_block+0x10c>
				break;
		} while (fileblock >= le32_to_cpu(extent[i].ee_block));
c7e1e1a8:	e5b0300c 	ldr	r3, [r0, #12]!
c7e1e1ac:	e15b0003 	cmp	fp, r3
c7e1e1b0:	21a04002 	movcs	r4, r2
c7e1e1b4:	2afffff8 	bcs	c7e1e19c <read_allocated_block+0xf0>
		if (--i >= 0) {
c7e1e1b8:	e3740001 	cmn	r4, #1	; 0x1
c7e1e1bc:	0a000016 	beq	c7e1e21c <read_allocated_block+0x170>
			fileblock -= le32_to_cpu(extent[i].ee_block);
c7e1e1c0:	e3a0300c 	mov	r3, #12	; 0xc
c7e1e1c4:	e0030394 	mul	r3, r4, r3
c7e1e1c8:	e79c2003 	ldr	r2, [ip, r3]
c7e1e1cc:	e08c1003 	add	r1, ip, r3
			if (fileblock >= le32_to_cpu(extent[i].ee_len)) {
c7e1e1d0:	e1d130b4 	ldrh	r3, [r1, #4]
			i++;
			if (i >= le32_to_cpu(ext_block->eh_entries))
				break;
		} while (fileblock >= le32_to_cpu(extent[i].ee_block));
		if (--i >= 0) {
			fileblock -= le32_to_cpu(extent[i].ee_block);
c7e1e1d4:	e062600b 	rsb	r6, r2, fp
			if (fileblock >= le32_to_cpu(extent[i].ee_len)) {
c7e1e1d8:	e1560003 	cmp	r6, r3
c7e1e1dc:	3a000003 	bcc	c7e1e1f0 <read_allocated_block+0x144>
				free(buf);
c7e1e1e0:	e1a00007 	mov	r0, r7
c7e1e1e4:	ebffab5d 	bl	c7e08f60 <free>
c7e1e1e8:	e3a00000 	mov	r0, #0	; 0x0
c7e1e1ec:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
				return 0;
			}

			start = le32_to_cpu(extent[i].ee_start_hi);
			start = (start << 32) +
c7e1e1f0:	e5912008 	ldr	r2, [r1, #8]
c7e1e1f4:	e1d140b6 	ldrh	r4, [r1, #6]
c7e1e1f8:	e3a03000 	mov	r3, #0	; 0x0
c7e1e1fc:	e0930002 	adds	r0, r3, r2
c7e1e200:	e2a41000 	adc	r1, r4, #0	; 0x0
c7e1e204:	e1a04000 	mov	r4, r0
					le32_to_cpu(extent[i].ee_start_lo);
			free(buf);
c7e1e208:	e1a00007 	mov	r0, r7
				free(buf);
				return 0;
			}

			start = le32_to_cpu(extent[i].ee_start_hi);
			start = (start << 32) +
c7e1e20c:	e1a05001 	mov	r5, r1
					le32_to_cpu(extent[i].ee_start_lo);
			free(buf);
c7e1e210:	ebffab52 	bl	c7e08f60 <free>
			return fileblock + start;
c7e1e214:	e0860004 	add	r0, r6, r4
c7e1e218:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
		}

		printf("Extent Error\n");
c7e1e21c:	e59f0618 	ldr	r0, [pc, #1560]	; c7e1e83c <read_allocated_block+0x790>
c7e1e220:	ebffaa0c 	bl	c7e08a58 <printf>
		free(buf);
c7e1e224:	e1a00007 	mov	r0, r7
c7e1e228:	ebffab4c 	bl	c7e08f60 <free>
c7e1e22c:	ea00003c 	b	c7e1e324 <read_allocated_block+0x278>
		return -1;
	}

	/* Direct blocks. */
	if (fileblock < INDIRECT_BLOCKS)
c7e1e230:	e351000b 	cmp	r1, #11	; 0xb
		blknr = __le32_to_cpu(inode->b.blocks.dir_blocks[fileblock]);
c7e1e234:	d281300a 	addle	r3, r1, #10	; 0xa
c7e1e238:	d7960103 	ldrle	r0, [r6, r3, lsl #2]
		free(buf);
		return -1;
	}

	/* Direct blocks. */
	if (fileblock < INDIRECT_BLOCKS)
c7e1e23c:	d8bd8ef0 	pople	{r4, r5, r6, r7, r9, sl, fp, pc}
		blknr = __le32_to_cpu(inode->b.blocks.dir_blocks[fileblock]);

	/* Indirect. */
	else if (fileblock < (INDIRECT_BLOCKS + (blksz / 4))) {
c7e1e240:	e3540000 	cmp	r4, #0	; 0x0
c7e1e244:	e2843003 	add	r3, r4, #3	; 0x3
c7e1e248:	a1a03004 	movge	r3, r4
c7e1e24c:	e1a0a143 	asr	sl, r3, #2
c7e1e250:	e28a300b 	add	r3, sl, #11	; 0xb
c7e1e254:	e1530001 	cmp	r3, r1
c7e1e258:	ba000038 	blt	c7e1e340 <read_allocated_block+0x294>
		if (ext4fs_indir1_block == NULL) {
c7e1e25c:	e5953004 	ldr	r3, [r5, #4]
c7e1e260:	e3530000 	cmp	r3, #0	; 0x0
c7e1e264:	1a000009 	bne	c7e1e290 <read_allocated_block+0x1e4>
			ext4fs_indir1_block = zalloc(blksz);
c7e1e268:	e1a00004 	mov	r0, r4
c7e1e26c:	ebffff50 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir1_block == NULL) {
c7e1e270:	e3500000 	cmp	r0, #0	; 0x0
		blknr = __le32_to_cpu(inode->b.blocks.dir_blocks[fileblock]);

	/* Indirect. */
	else if (fileblock < (INDIRECT_BLOCKS + (blksz / 4))) {
		if (ext4fs_indir1_block == NULL) {
			ext4fs_indir1_block = zalloc(blksz);
c7e1e274:	e5850004 	str	r0, [r5, #4]
			if (ext4fs_indir1_block == NULL) {
				printf("** SI ext2fs read block (indir 1)"
c7e1e278:	059f05c0 	ldreq	r0, [pc, #1472]	; c7e1e840 <read_allocated_block+0x794>

	/* Indirect. */
	else if (fileblock < (INDIRECT_BLOCKS + (blksz / 4))) {
		if (ext4fs_indir1_block == NULL) {
			ext4fs_indir1_block = zalloc(blksz);
			if (ext4fs_indir1_block == NULL) {
c7e1e27c:	0a000157 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** SI ext2fs read block (indir 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
c7e1e280:	e59f35bc 	ldr	r3, [pc, #1468]	; c7e1e844 <read_allocated_block+0x798>
c7e1e284:	e3e02000 	mvn	r2, #0	; 0x0
c7e1e288:	e5832000 	str	r2, [r3]
			if (ext4fs_indir1_block == NULL) {
				printf("** SI ext2fs read block (indir 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
c7e1e28c:	e5854008 	str	r4, [r5, #8]
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
c7e1e290:	e59f559c 	ldr	r5, [pc, #1436]	; c7e1e834 <read_allocated_block+0x788>
c7e1e294:	e5953008 	ldr	r3, [r5, #8]
c7e1e298:	e1540003 	cmp	r4, r3
c7e1e29c:	0a00000e 	beq	c7e1e2dc <read_allocated_block+0x230>
			free(ext4fs_indir1_block);
c7e1e2a0:	e5950004 	ldr	r0, [r5, #4]
c7e1e2a4:	ebffab2d 	bl	c7e08f60 <free>
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
c7e1e2a8:	e59f2594 	ldr	r2, [pc, #1428]	; c7e1e844 <read_allocated_block+0x798>
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
c7e1e2ac:	e3a03000 	mov	r3, #0	; 0x0
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
c7e1e2b0:	e3e07000 	mvn	r7, #0	; 0x0
			ext4fs_indir1_block = zalloc(blksz);
c7e1e2b4:	e1a00004 	mov	r0, r4
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
c7e1e2b8:	e5853008 	str	r3, [r5, #8]
			ext4fs_indir1_blkno = -1;
c7e1e2bc:	e5827000 	str	r7, [r2]
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
c7e1e2c0:	e5853004 	str	r3, [r5, #4]
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
c7e1e2c4:	ebffff3a 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir1_block == NULL) {
c7e1e2c8:	e3500000 	cmp	r0, #0	; 0x0
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
c7e1e2cc:	e5850004 	str	r0, [r5, #4]
			if (ext4fs_indir1_block == NULL) {
				printf("** SI ext2fs read block (indir 1):"
c7e1e2d0:	059f0570 	ldreq	r0, [pc, #1392]	; c7e1e848 <read_allocated_block+0x79c>
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
			if (ext4fs_indir1_block == NULL) {
c7e1e2d4:	0a0000b3 	beq	c7e1e5a8 <read_allocated_block+0x4fc>
				printf("** SI ext2fs read block (indir 1):"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
c7e1e2d8:	e5854008 	str	r4, [r5, #8]
		}
		if ((__le32_to_cpu(inode->b.blocks.indir_block) <<
c7e1e2dc:	e5963058 	ldr	r3, [r6, #88]
c7e1e2e0:	e59f555c 	ldr	r5, [pc, #1372]	; c7e1e844 <read_allocated_block+0x798>
c7e1e2e4:	e1a00913 	lsl	r0, r3, r9
c7e1e2e8:	e5953000 	ldr	r3, [r5]
c7e1e2ec:	e1500003 	cmp	r0, r3
c7e1e2f0:	0a00000d 	beq	c7e1e32c <read_allocated_block+0x280>
		     log2_blksz) != ext4fs_indir1_blkno) {
			status =
c7e1e2f4:	e59f3538 	ldr	r3, [pc, #1336]	; c7e1e834 <read_allocated_block+0x788>
c7e1e2f8:	e1a02004 	mov	r2, r4
c7e1e2fc:	e5933004 	ldr	r3, [r3, #4]
c7e1e300:	e3a01000 	mov	r1, #0	; 0x0
c7e1e304:	eb000317 	bl	c7e1ef68 <ext4fs_devread>
			    ext4fs_devread(__le32_to_cpu
					   (inode->b.blocks.
					    indir_block) << log2_blksz, 0,
					   blksz, (char *)ext4fs_indir1_block);
			if (status == 0) {
c7e1e308:	e2504000 	subs	r4, r0, #0	; 0x0
				printf("** SI ext2fs read block (indir 1)"
					"failed. **\n");
				return 0;
			}
			ext4fs_indir1_blkno =
c7e1e30c:	15963058 	ldrne	r3, [r6, #88]
c7e1e310:	11a03913 	lslne	r3, r3, r9
c7e1e314:	15853000 	strne	r3, [r5]
			status =
			    ext4fs_devread(__le32_to_cpu
					   (inode->b.blocks.
					    indir_block) << log2_blksz, 0,
					   blksz, (char *)ext4fs_indir1_block);
			if (status == 0) {
c7e1e318:	1a000003 	bne	c7e1e32c <read_allocated_block+0x280>
				printf("** SI ext2fs read block (indir 1)"
c7e1e31c:	e59f0528 	ldr	r0, [pc, #1320]	; c7e1e84c <read_allocated_block+0x7a0>
c7e1e320:	ebffa9cc 	bl	c7e08a58 <printf>
c7e1e324:	e1a00004 	mov	r0, r4
c7e1e328:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
			}
			ext4fs_indir1_blkno =
				__le32_to_cpu(inode->b.blocks.
					       indir_block) << log2_blksz;
		}
		blknr = __le32_to_cpu(ext4fs_indir1_block
c7e1e32c:	e59f2500 	ldr	r2, [pc, #1280]	; c7e1e834 <read_allocated_block+0x788>
c7e1e330:	e24b300c 	sub	r3, fp, #12	; 0xc
c7e1e334:	e5922004 	ldr	r2, [r2, #4]
c7e1e338:	e7920103 	ldr	r0, [r2, r3, lsl #2]
c7e1e33c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
				      [fileblock - INDIRECT_BLOCKS]);
	}
	/* Double indirect. */
	else if (fileblock < (INDIRECT_BLOCKS + (blksz / 4 *
c7e1e340:	e28a3001 	add	r3, sl, #1	; 0x1
c7e1e344:	e003039a 	mul	r3, sl, r3
c7e1e348:	e283300b 	add	r3, r3, #11	; 0xb
c7e1e34c:	e1530001 	cmp	r3, r1
c7e1e350:	ba000074 	blt	c7e1e528 <read_allocated_block+0x47c>
					(blksz / 4 + 1)))) {

		long int perblock = blksz / 4;
		long int rblock = fileblock - (INDIRECT_BLOCKS + blksz / 4);

		if (ext4fs_indir1_block == NULL) {
c7e1e354:	e5953004 	ldr	r3, [r5, #4]
c7e1e358:	e3530000 	cmp	r3, #0	; 0x0
c7e1e35c:	1a000009 	bne	c7e1e388 <read_allocated_block+0x2dc>
			ext4fs_indir1_block = zalloc(blksz);
c7e1e360:	e1a00004 	mov	r0, r4
c7e1e364:	ebffff12 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir1_block == NULL) {
c7e1e368:	e3500000 	cmp	r0, #0	; 0x0

		long int perblock = blksz / 4;
		long int rblock = fileblock - (INDIRECT_BLOCKS + blksz / 4);

		if (ext4fs_indir1_block == NULL) {
			ext4fs_indir1_block = zalloc(blksz);
c7e1e36c:	e5850004 	str	r0, [r5, #4]
			if (ext4fs_indir1_block == NULL) {
				printf("** DI ext2fs read block (indir 2 1)"
c7e1e370:	059f04d8 	ldreq	r0, [pc, #1240]	; c7e1e850 <read_allocated_block+0x7a4>
		long int perblock = blksz / 4;
		long int rblock = fileblock - (INDIRECT_BLOCKS + blksz / 4);

		if (ext4fs_indir1_block == NULL) {
			ext4fs_indir1_block = zalloc(blksz);
			if (ext4fs_indir1_block == NULL) {
c7e1e374:	0a000119 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** DI ext2fs read block (indir 2 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
c7e1e378:	e59f34c4 	ldr	r3, [pc, #1220]	; c7e1e844 <read_allocated_block+0x798>
c7e1e37c:	e3e02000 	mvn	r2, #0	; 0x0
c7e1e380:	e5832000 	str	r2, [r3]
			if (ext4fs_indir1_block == NULL) {
				printf("** DI ext2fs read block (indir 2 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
c7e1e384:	e5854008 	str	r4, [r5, #8]
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
c7e1e388:	e59f54a4 	ldr	r5, [pc, #1188]	; c7e1e834 <read_allocated_block+0x788>
c7e1e38c:	e5953008 	ldr	r3, [r5, #8]
c7e1e390:	e1540003 	cmp	r4, r3
c7e1e394:	0a00000e 	beq	c7e1e3d4 <read_allocated_block+0x328>
			free(ext4fs_indir1_block);
c7e1e398:	e5950004 	ldr	r0, [r5, #4]
c7e1e39c:	ebffaaef 	bl	c7e08f60 <free>
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
c7e1e3a0:	e59f249c 	ldr	r2, [pc, #1180]	; c7e1e844 <read_allocated_block+0x798>
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
c7e1e3a4:	e3a03000 	mov	r3, #0	; 0x0
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
c7e1e3a8:	e3e07000 	mvn	r7, #0	; 0x0
			ext4fs_indir1_block = zalloc(blksz);
c7e1e3ac:	e1a00004 	mov	r0, r4
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
c7e1e3b0:	e5853008 	str	r3, [r5, #8]
			ext4fs_indir1_blkno = -1;
c7e1e3b4:	e5827000 	str	r7, [r2]
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
c7e1e3b8:	e5853004 	str	r3, [r5, #4]
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
c7e1e3bc:	ebfffefc 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir1_block == NULL) {
c7e1e3c0:	e3500000 	cmp	r0, #0	; 0x0
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
c7e1e3c4:	e5850004 	str	r0, [r5, #4]
			if (ext4fs_indir1_block == NULL) {
				printf("** DI ext2fs read block (indir 2 1)"
c7e1e3c8:	059f0480 	ldreq	r0, [pc, #1152]	; c7e1e850 <read_allocated_block+0x7a4>
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
			if (ext4fs_indir1_block == NULL) {
c7e1e3cc:	0a000075 	beq	c7e1e5a8 <read_allocated_block+0x4fc>
				printf("** DI ext2fs read block (indir 2 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
c7e1e3d0:	e5854008 	str	r4, [r5, #8]
		}
		if ((__le32_to_cpu(inode->b.blocks.double_indir_block) <<
c7e1e3d4:	e596305c 	ldr	r3, [r6, #92]
c7e1e3d8:	e59f5464 	ldr	r5, [pc, #1124]	; c7e1e844 <read_allocated_block+0x798>
c7e1e3dc:	e1a00913 	lsl	r0, r3, r9
c7e1e3e0:	e5953000 	ldr	r3, [r5]
c7e1e3e4:	e1500003 	cmp	r0, r3
c7e1e3e8:	0a00000a 	beq	c7e1e418 <read_allocated_block+0x36c>
		     log2_blksz) != ext4fs_indir1_blkno) {
			status =
c7e1e3ec:	e59f3440 	ldr	r3, [pc, #1088]	; c7e1e834 <read_allocated_block+0x788>
c7e1e3f0:	e3a01000 	mov	r1, #0	; 0x0
c7e1e3f4:	e5933004 	ldr	r3, [r3, #4]
c7e1e3f8:	e1a02004 	mov	r2, r4
c7e1e3fc:	eb0002d9 	bl	c7e1ef68 <ext4fs_devread>
			    ext4fs_devread(__le32_to_cpu
					   (inode->b.blocks.
					    double_indir_block) << log2_blksz,
					   0, blksz,
					   (char *)ext4fs_indir1_block);
			if (status == 0) {
c7e1e400:	e3500000 	cmp	r0, #0	; 0x0
				printf("** DI ext2fs read block (indir 2 1)"
c7e1e404:	059f0448 	ldreq	r0, [pc, #1096]	; c7e1e854 <read_allocated_block+0x7a8>
			    ext4fs_devread(__le32_to_cpu
					   (inode->b.blocks.
					    double_indir_block) << log2_blksz,
					   0, blksz,
					   (char *)ext4fs_indir1_block);
			if (status == 0) {
c7e1e408:	0a0000f4 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** DI ext2fs read block (indir 2 1)"
					"failed. **\n");
				return -1;
			}
			ext4fs_indir1_blkno =
c7e1e40c:	e596305c 	ldr	r3, [r6, #92]
c7e1e410:	e1a03913 	lsl	r3, r3, r9
c7e1e414:	e5853000 	str	r3, [r5]
			    __le32_to_cpu(inode->b.blocks.double_indir_block) <<
			    log2_blksz;
		}

		if (ext4fs_indir2_block == NULL) {
c7e1e418:	e59f5414 	ldr	r5, [pc, #1044]	; c7e1e834 <read_allocated_block+0x788>
c7e1e41c:	e595300c 	ldr	r3, [r5, #12]
c7e1e420:	e3530000 	cmp	r3, #0	; 0x0
c7e1e424:	1a000009 	bne	c7e1e450 <read_allocated_block+0x3a4>
			ext4fs_indir2_block = zalloc(blksz);
c7e1e428:	e1a00004 	mov	r0, r4
c7e1e42c:	ebfffee0 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir2_block == NULL) {
c7e1e430:	e3500000 	cmp	r0, #0	; 0x0
			    __le32_to_cpu(inode->b.blocks.double_indir_block) <<
			    log2_blksz;
		}

		if (ext4fs_indir2_block == NULL) {
			ext4fs_indir2_block = zalloc(blksz);
c7e1e434:	e585000c 	str	r0, [r5, #12]
			if (ext4fs_indir2_block == NULL) {
				printf("** DI ext2fs read block (indir 2 2)"
c7e1e438:	059f0418 	ldreq	r0, [pc, #1048]	; c7e1e858 <read_allocated_block+0x7ac>
			    log2_blksz;
		}

		if (ext4fs_indir2_block == NULL) {
			ext4fs_indir2_block = zalloc(blksz);
			if (ext4fs_indir2_block == NULL) {
c7e1e43c:	0a0000e7 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** DI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
			ext4fs_indir2_blkno = -1;
c7e1e440:	e59f33fc 	ldr	r3, [pc, #1020]	; c7e1e844 <read_allocated_block+0x798>
c7e1e444:	e3e02000 	mvn	r2, #0	; 0x0
c7e1e448:	e5832004 	str	r2, [r3, #4]
			if (ext4fs_indir2_block == NULL) {
				printf("** DI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
c7e1e44c:	e5854010 	str	r4, [r5, #16]
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
c7e1e450:	e59f53dc 	ldr	r5, [pc, #988]	; c7e1e834 <read_allocated_block+0x788>
c7e1e454:	e5953010 	ldr	r3, [r5, #16]
c7e1e458:	e1540003 	cmp	r4, r3
c7e1e45c:	0a00000e 	beq	c7e1e49c <read_allocated_block+0x3f0>
			free(ext4fs_indir2_block);
c7e1e460:	e595000c 	ldr	r0, [r5, #12]
c7e1e464:	ebffaabd 	bl	c7e08f60 <free>
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
c7e1e468:	e59f23d4 	ldr	r2, [pc, #980]	; c7e1e844 <read_allocated_block+0x798>
			ext4fs_indir2_size = blksz;
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
c7e1e46c:	e3a03000 	mov	r3, #0	; 0x0
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
c7e1e470:	e3e06000 	mvn	r6, #0	; 0x0
			ext4fs_indir2_block = zalloc(blksz);
c7e1e474:	e1a00004 	mov	r0, r4
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
c7e1e478:	e5853010 	str	r3, [r5, #16]
			ext4fs_indir2_blkno = -1;
c7e1e47c:	e5826004 	str	r6, [r2, #4]
			ext4fs_indir2_size = blksz;
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
c7e1e480:	e585300c 	str	r3, [r5, #12]
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
			ext4fs_indir2_block = zalloc(blksz);
c7e1e484:	ebfffeca 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir2_block == NULL) {
c7e1e488:	e3500000 	cmp	r0, #0	; 0x0
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
			ext4fs_indir2_block = zalloc(blksz);
c7e1e48c:	e585000c 	str	r0, [r5, #12]
			if (ext4fs_indir2_block == NULL) {
				printf("** DI ext2fs read block (indir 2 2)"
c7e1e490:	059f03c0 	ldreq	r0, [pc, #960]	; c7e1e858 <read_allocated_block+0x7ac>
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
			ext4fs_indir2_block = zalloc(blksz);
			if (ext4fs_indir2_block == NULL) {
c7e1e494:	0a0000b8 	beq	c7e1e77c <read_allocated_block+0x6d0>
				printf("** DI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
c7e1e498:	e5854010 	str	r4, [r5, #16]
	/* Double indirect. */
	else if (fileblock < (INDIRECT_BLOCKS + (blksz / 4 *
					(blksz / 4 + 1)))) {

		long int perblock = blksz / 4;
		long int rblock = fileblock - (INDIRECT_BLOCKS + blksz / 4);
c7e1e49c:	e3540000 	cmp	r4, #0	; 0x0
c7e1e4a0:	e2843003 	add	r3, r4, #3	; 0x3
c7e1e4a4:	e24b200c 	sub	r2, fp, #12	; 0xc
c7e1e4a8:	a1a03004 	movge	r3, r4
c7e1e4ac:	e0427143 	sub	r7, r2, r3, asr #2
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
		}
		if ((__le32_to_cpu(ext4fs_indir1_block[rblock / perblock]) <<
c7e1e4b0:	e1a00007 	mov	r0, r7
c7e1e4b4:	e1a0100a 	mov	r1, sl
c7e1e4b8:	eb003057 	bl	c7e2a61c <__divsi3>
c7e1e4bc:	e59f5370 	ldr	r5, [pc, #880]	; c7e1e834 <read_allocated_block+0x788>
c7e1e4c0:	e1a06000 	mov	r6, r0
c7e1e4c4:	e5953004 	ldr	r3, [r5, #4]
c7e1e4c8:	e59fb374 	ldr	fp, [pc, #884]	; c7e1e844 <read_allocated_block+0x798>
c7e1e4cc:	e7933100 	ldr	r3, [r3, r0, lsl #2]
c7e1e4d0:	e59b2004 	ldr	r2, [fp, #4]
c7e1e4d4:	e1a00913 	lsl	r0, r3, r9
c7e1e4d8:	e1500002 	cmp	r0, r2
c7e1e4dc:	0a00000a 	beq	c7e1e50c <read_allocated_block+0x460>
		     log2_blksz) != ext4fs_indir2_blkno) {
			status = ext4fs_devread(__le32_to_cpu
c7e1e4e0:	e1a02004 	mov	r2, r4
c7e1e4e4:	e3a01000 	mov	r1, #0	; 0x0
c7e1e4e8:	e595300c 	ldr	r3, [r5, #12]
c7e1e4ec:	eb00029d 	bl	c7e1ef68 <ext4fs_devread>
						(ext4fs_indir1_block
						 [rblock /
						  perblock]) << log2_blksz, 0,
						blksz,
						(char *)ext4fs_indir2_block);
			if (status == 0) {
c7e1e4f0:	e3500000 	cmp	r0, #0	; 0x0
				printf("** DI ext2fs read block (indir 2 2)"
c7e1e4f4:	059f0360 	ldreq	r0, [pc, #864]	; c7e1e85c <read_allocated_block+0x7b0>
						(ext4fs_indir1_block
						 [rblock /
						  perblock]) << log2_blksz, 0,
						blksz,
						(char *)ext4fs_indir2_block);
			if (status == 0) {
c7e1e4f8:	0a0000b8 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** DI ext2fs read block (indir 2 2)"
					"failed. **\n");
				return -1;
			}
			ext4fs_indir2_blkno =
c7e1e4fc:	e5953004 	ldr	r3, [r5, #4]
c7e1e500:	e7933106 	ldr	r3, [r3, r6, lsl #2]
c7e1e504:	e1a03913 	lsl	r3, r3, r9
c7e1e508:	e58b3004 	str	r3, [fp, #4]
			    __le32_to_cpu(ext4fs_indir1_block[rblock
							      /
							      perblock]) <<
			    log2_blksz;
		}
		blknr = __le32_to_cpu(ext4fs_indir2_block[rblock % perblock]);
c7e1e50c:	e1a00007 	mov	r0, r7
c7e1e510:	e1a0100a 	mov	r1, sl
c7e1e514:	eb00308a 	bl	c7e2a744 <__aeabi_idivmod>
c7e1e518:	e59f3314 	ldr	r3, [pc, #788]	; c7e1e834 <read_allocated_block+0x788>
c7e1e51c:	e593300c 	ldr	r3, [r3, #12]
c7e1e520:	e7930101 	ldr	r0, [r3, r1, lsl #2]
c7e1e524:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
		rblock = fileblock - (INDIRECT_BLOCKS + blksz / 4 +
				      (blksz / 4 * blksz / 4));
		perblock_child = blksz / 4;
		perblock_parent = ((blksz / 4) * (blksz / 4));

		if (ext4fs_indir1_block == NULL) {
c7e1e528:	e5953004 	ldr	r3, [r5, #4]
c7e1e52c:	e3530000 	cmp	r3, #0	; 0x0
c7e1e530:	1a000009 	bne	c7e1e55c <read_allocated_block+0x4b0>
			ext4fs_indir1_block = zalloc(blksz);
c7e1e534:	e1a00004 	mov	r0, r4
c7e1e538:	ebfffe9d 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir1_block == NULL) {
c7e1e53c:	e3500000 	cmp	r0, #0	; 0x0
				      (blksz / 4 * blksz / 4));
		perblock_child = blksz / 4;
		perblock_parent = ((blksz / 4) * (blksz / 4));

		if (ext4fs_indir1_block == NULL) {
			ext4fs_indir1_block = zalloc(blksz);
c7e1e540:	e5850004 	str	r0, [r5, #4]
			if (ext4fs_indir1_block == NULL) {
				printf("** TI ext2fs read block (indir 2 1)"
c7e1e544:	059f0314 	ldreq	r0, [pc, #788]	; c7e1e860 <read_allocated_block+0x7b4>
		perblock_child = blksz / 4;
		perblock_parent = ((blksz / 4) * (blksz / 4));

		if (ext4fs_indir1_block == NULL) {
			ext4fs_indir1_block = zalloc(blksz);
			if (ext4fs_indir1_block == NULL) {
c7e1e548:	0a0000a4 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** TI ext2fs read block (indir 2 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
c7e1e54c:	e59f32f0 	ldr	r3, [pc, #752]	; c7e1e844 <read_allocated_block+0x798>
c7e1e550:	e3e02000 	mvn	r2, #0	; 0x0
c7e1e554:	e5832000 	str	r2, [r3]
			if (ext4fs_indir1_block == NULL) {
				printf("** TI ext2fs read block (indir 2 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
c7e1e558:	e5854008 	str	r4, [r5, #8]
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
c7e1e55c:	e59f52d0 	ldr	r5, [pc, #720]	; c7e1e834 <read_allocated_block+0x788>
c7e1e560:	e5953008 	ldr	r3, [r5, #8]
c7e1e564:	e1540003 	cmp	r4, r3
c7e1e568:	0a000011 	beq	c7e1e5b4 <read_allocated_block+0x508>
			free(ext4fs_indir1_block);
c7e1e56c:	e5950004 	ldr	r0, [r5, #4]
c7e1e570:	ebffaa7a 	bl	c7e08f60 <free>
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
c7e1e574:	e59f22c8 	ldr	r2, [pc, #712]	; c7e1e844 <read_allocated_block+0x798>
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
c7e1e578:	e3a03000 	mov	r3, #0	; 0x0
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
c7e1e57c:	e3e07000 	mvn	r7, #0	; 0x0
			ext4fs_indir1_block = zalloc(blksz);
c7e1e580:	e1a00004 	mov	r0, r4
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
c7e1e584:	e5853008 	str	r3, [r5, #8]
			ext4fs_indir1_blkno = -1;
c7e1e588:	e5827000 	str	r7, [r2]
			ext4fs_indir1_size = blksz;
			ext4fs_indir1_blkno = -1;
		}
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
c7e1e58c:	e5853004 	str	r3, [r5, #4]
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
c7e1e590:	ebfffe87 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir1_block == NULL) {
c7e1e594:	e3500000 	cmp	r0, #0	; 0x0
		if (blksz != ext4fs_indir1_size) {
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
c7e1e598:	e5850004 	str	r0, [r5, #4]
			if (ext4fs_indir1_block == NULL) {
				printf("** TI ext2fs read block (indir 2 1)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
c7e1e59c:	15854008 	strne	r4, [r5, #8]
			free(ext4fs_indir1_block);
			ext4fs_indir1_block = NULL;
			ext4fs_indir1_size = 0;
			ext4fs_indir1_blkno = -1;
			ext4fs_indir1_block = zalloc(blksz);
			if (ext4fs_indir1_block == NULL) {
c7e1e5a0:	1a000003 	bne	c7e1e5b4 <read_allocated_block+0x508>
				printf("** TI ext2fs read block (indir 2 1)"
c7e1e5a4:	e59f02b4 	ldr	r0, [pc, #692]	; c7e1e860 <read_allocated_block+0x7b4>
c7e1e5a8:	ebffa92a 	bl	c7e08a58 <printf>
c7e1e5ac:	e1a00007 	mov	r0, r7
c7e1e5b0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir1_size = blksz;
		}
		if ((__le32_to_cpu(inode->b.blocks.triple_indir_block) <<
c7e1e5b4:	e5963060 	ldr	r3, [r6, #96]
c7e1e5b8:	e59f5284 	ldr	r5, [pc, #644]	; c7e1e844 <read_allocated_block+0x798>
c7e1e5bc:	e1a00913 	lsl	r0, r3, r9
c7e1e5c0:	e5953000 	ldr	r3, [r5]
c7e1e5c4:	e1500003 	cmp	r0, r3
c7e1e5c8:	0a00000a 	beq	c7e1e5f8 <read_allocated_block+0x54c>
		     log2_blksz) != ext4fs_indir1_blkno) {
			status = ext4fs_devread
c7e1e5cc:	e59f3260 	ldr	r3, [pc, #608]	; c7e1e834 <read_allocated_block+0x788>
c7e1e5d0:	e3a01000 	mov	r1, #0	; 0x0
c7e1e5d4:	e5933004 	ldr	r3, [r3, #4]
c7e1e5d8:	e1a02004 	mov	r2, r4
c7e1e5dc:	eb000261 	bl	c7e1ef68 <ext4fs_devread>
			    (__le32_to_cpu(inode->b.blocks.triple_indir_block)
			     << log2_blksz, 0, blksz,
			     (char *)ext4fs_indir1_block);
			if (status == 0) {
c7e1e5e0:	e3500000 	cmp	r0, #0	; 0x0
				printf("** TI ext2fs read block (indir 2 1)"
c7e1e5e4:	059f0278 	ldreq	r0, [pc, #632]	; c7e1e864 <read_allocated_block+0x7b8>
		     log2_blksz) != ext4fs_indir1_blkno) {
			status = ext4fs_devread
			    (__le32_to_cpu(inode->b.blocks.triple_indir_block)
			     << log2_blksz, 0, blksz,
			     (char *)ext4fs_indir1_block);
			if (status == 0) {
c7e1e5e8:	0a00007c 	beq	c7e1e7e0 <read_allocated_block+0x734>
				printf("** TI ext2fs read block (indir 2 1)"
					"failed. **\n");
				return -1;
			}
			ext4fs_indir1_blkno =
c7e1e5ec:	e5963060 	ldr	r3, [r6, #96]
c7e1e5f0:	e1a03913 	lsl	r3, r3, r9
c7e1e5f4:	e5853000 	str	r3, [r5]
			    __le32_to_cpu(inode->b.blocks.triple_indir_block) <<
			    log2_blksz;
		}

		if (ext4fs_indir2_block == NULL) {
c7e1e5f8:	e59f5234 	ldr	r5, [pc, #564]	; c7e1e834 <read_allocated_block+0x788>
c7e1e5fc:	e595300c 	ldr	r3, [r5, #12]
c7e1e600:	e3530000 	cmp	r3, #0	; 0x0
c7e1e604:	1a000008 	bne	c7e1e62c <read_allocated_block+0x580>
			ext4fs_indir2_block = zalloc(blksz);
c7e1e608:	e1a00004 	mov	r0, r4
c7e1e60c:	ebfffe68 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir2_block == NULL) {
c7e1e610:	e3500000 	cmp	r0, #0	; 0x0
			    __le32_to_cpu(inode->b.blocks.triple_indir_block) <<
			    log2_blksz;
		}

		if (ext4fs_indir2_block == NULL) {
			ext4fs_indir2_block = zalloc(blksz);
c7e1e614:	e585000c 	str	r0, [r5, #12]
			if (ext4fs_indir2_block == NULL) {
c7e1e618:	0a00003e 	beq	c7e1e718 <read_allocated_block+0x66c>
				printf("** TI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
			ext4fs_indir2_blkno = -1;
c7e1e61c:	e59f3220 	ldr	r3, [pc, #544]	; c7e1e844 <read_allocated_block+0x798>
c7e1e620:	e3e02000 	mvn	r2, #0	; 0x0
c7e1e624:	e5832004 	str	r2, [r3, #4]
			if (ext4fs_indir2_block == NULL) {
				printf("** TI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
c7e1e628:	e5854010 	str	r4, [r5, #16]
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
c7e1e62c:	e59f5200 	ldr	r5, [pc, #512]	; c7e1e834 <read_allocated_block+0x788>
c7e1e630:	e5953010 	ldr	r3, [r5, #16]
c7e1e634:	e1540003 	cmp	r4, r3
c7e1e638:	0a00000d 	beq	c7e1e674 <read_allocated_block+0x5c8>
			free(ext4fs_indir2_block);
c7e1e63c:	e595000c 	ldr	r0, [r5, #12]
c7e1e640:	ebffaa46 	bl	c7e08f60 <free>
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
c7e1e644:	e59f21f8 	ldr	r2, [pc, #504]	; c7e1e844 <read_allocated_block+0x798>
			ext4fs_indir2_size = blksz;
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
c7e1e648:	e3a03000 	mov	r3, #0	; 0x0
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
c7e1e64c:	e3e06000 	mvn	r6, #0	; 0x0
			ext4fs_indir2_block = zalloc(blksz);
c7e1e650:	e1a00004 	mov	r0, r4
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
c7e1e654:	e5853010 	str	r3, [r5, #16]
			ext4fs_indir2_blkno = -1;
c7e1e658:	e5826004 	str	r6, [r2, #4]
			ext4fs_indir2_size = blksz;
			ext4fs_indir2_blkno = -1;
		}
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
c7e1e65c:	e585300c 	str	r3, [r5, #12]
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
			ext4fs_indir2_block = zalloc(blksz);
c7e1e660:	ebfffe53 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir2_block == NULL) {
c7e1e664:	e3500000 	cmp	r0, #0	; 0x0
		if (blksz != ext4fs_indir2_size) {
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
			ext4fs_indir2_block = zalloc(blksz);
c7e1e668:	e585000c 	str	r0, [r5, #12]
			if (ext4fs_indir2_block == NULL) {
				printf("** TI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
c7e1e66c:	15854010 	strne	r4, [r5, #16]
			free(ext4fs_indir2_block);
			ext4fs_indir2_block = NULL;
			ext4fs_indir2_size = 0;
			ext4fs_indir2_blkno = -1;
			ext4fs_indir2_block = zalloc(blksz);
			if (ext4fs_indir2_block == NULL) {
c7e1e670:	0a000040 	beq	c7e1e778 <read_allocated_block+0x6cc>
		}
		blknr = __le32_to_cpu(ext4fs_indir2_block[rblock % perblock]);
	}
	/* Tripple indirect. */
	else {
		rblock = fileblock - (INDIRECT_BLOCKS + blksz / 4 +
c7e1e674:	e0010a94 	mul	r1, r4, sl
c7e1e678:	e3540000 	cmp	r4, #0	; 0x0
c7e1e67c:	e2812003 	add	r2, r1, #3	; 0x3
c7e1e680:	e2840003 	add	r0, r4, #3	; 0x3
c7e1e684:	e24b300c 	sub	r3, fp, #12	; 0xc
c7e1e688:	a1a00004 	movge	r0, r4
c7e1e68c:	e3510000 	cmp	r1, #0	; 0x0
c7e1e690:	b1a01002 	movlt	r1, r2
c7e1e694:	e0433140 	sub	r3, r3, r0, asr #2
c7e1e698:	e043b141 	sub	fp, r3, r1, asr #2
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir2_size = blksz;
		}
		if ((__le32_to_cpu(ext4fs_indir1_block[rblock /
c7e1e69c:	e1a0000b 	mov	r0, fp
c7e1e6a0:	e0010a9a 	mul	r1, sl, sl
c7e1e6a4:	eb002fdc 	bl	c7e2a61c <__divsi3>
c7e1e6a8:	e59f5184 	ldr	r5, [pc, #388]	; c7e1e834 <read_allocated_block+0x788>
c7e1e6ac:	e1a06000 	mov	r6, r0
c7e1e6b0:	e5953004 	ldr	r3, [r5, #4]
c7e1e6b4:	e59f7188 	ldr	r7, [pc, #392]	; c7e1e844 <read_allocated_block+0x798>
c7e1e6b8:	e7933100 	ldr	r3, [r3, r0, lsl #2]
c7e1e6bc:	e5972004 	ldr	r2, [r7, #4]
c7e1e6c0:	e1a00913 	lsl	r0, r3, r9
c7e1e6c4:	e1500002 	cmp	r0, r2
c7e1e6c8:	0a000009 	beq	c7e1e6f4 <read_allocated_block+0x648>
						       perblock_parent]) <<
		     log2_blksz)
		    != ext4fs_indir2_blkno) {
			status = ext4fs_devread(__le32_to_cpu
c7e1e6cc:	e3a01000 	mov	r1, #0	; 0x0
c7e1e6d0:	e1a02004 	mov	r2, r4
c7e1e6d4:	e595300c 	ldr	r3, [r5, #12]
c7e1e6d8:	eb000222 	bl	c7e1ef68 <ext4fs_devread>
						(ext4fs_indir1_block
						 [rblock /
						  perblock_parent]) <<
						log2_blksz, 0, blksz,
						(char *)ext4fs_indir2_block);
			if (status == 0) {
c7e1e6dc:	e3500000 	cmp	r0, #0	; 0x0
c7e1e6e0:	0a00003d 	beq	c7e1e7dc <read_allocated_block+0x730>
				printf("** TI ext2fs read block (indir 2 2)"
					"failed. **\n");
				return -1;
			}
			ext4fs_indir2_blkno =
c7e1e6e4:	e5953004 	ldr	r3, [r5, #4]
c7e1e6e8:	e7933106 	ldr	r3, [r3, r6, lsl #2]
c7e1e6ec:	e1a03913 	lsl	r3, r3, r9
c7e1e6f0:	e5873004 	str	r3, [r7, #4]
			    __le32_to_cpu(ext4fs_indir1_block[rblock /
							      perblock_parent])
			    << log2_blksz;
		}

		if (ext4fs_indir3_block == NULL) {
c7e1e6f4:	e59f5138 	ldr	r5, [pc, #312]	; c7e1e834 <read_allocated_block+0x788>
c7e1e6f8:	e5953014 	ldr	r3, [r5, #20]
c7e1e6fc:	e3530000 	cmp	r3, #0	; 0x0
c7e1e700:	1a00000a 	bne	c7e1e730 <read_allocated_block+0x684>
			ext4fs_indir3_block = zalloc(blksz);
c7e1e704:	e1a00004 	mov	r0, r4
c7e1e708:	ebfffe29 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir3_block == NULL) {
c7e1e70c:	e3500000 	cmp	r0, #0	; 0x0
							      perblock_parent])
			    << log2_blksz;
		}

		if (ext4fs_indir3_block == NULL) {
			ext4fs_indir3_block = zalloc(blksz);
c7e1e710:	e5850014 	str	r0, [r5, #20]
			if (ext4fs_indir3_block == NULL) {
c7e1e714:	1a000001 	bne	c7e1e720 <read_allocated_block+0x674>
				printf("** TI ext2fs read block (indir 2 2)"
c7e1e718:	e59f0148 	ldr	r0, [pc, #328]	; c7e1e868 <read_allocated_block+0x7bc>
c7e1e71c:	ea00002f 	b	c7e1e7e0 <read_allocated_block+0x734>
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir3_size = blksz;
			ext4fs_indir3_blkno = -1;
c7e1e720:	e59f311c 	ldr	r3, [pc, #284]	; c7e1e844 <read_allocated_block+0x798>
c7e1e724:	e3e02000 	mvn	r2, #0	; 0x0
c7e1e728:	e5832008 	str	r2, [r3, #8]
			if (ext4fs_indir3_block == NULL) {
				printf("** TI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir3_size = blksz;
c7e1e72c:	e5854018 	str	r4, [r5, #24]
			ext4fs_indir3_blkno = -1;
		}
		if (blksz != ext4fs_indir3_size) {
c7e1e730:	e59f50fc 	ldr	r5, [pc, #252]	; c7e1e834 <read_allocated_block+0x788>
c7e1e734:	e5953018 	ldr	r3, [r5, #24]
c7e1e738:	e1540003 	cmp	r4, r3
c7e1e73c:	0a000011 	beq	c7e1e788 <read_allocated_block+0x6dc>
			free(ext4fs_indir3_block);
c7e1e740:	e5950014 	ldr	r0, [r5, #20]
c7e1e744:	ebffaa05 	bl	c7e08f60 <free>
			ext4fs_indir3_block = NULL;
			ext4fs_indir3_size = 0;
			ext4fs_indir3_blkno = -1;
c7e1e748:	e59f20f4 	ldr	r2, [pc, #244]	; c7e1e844 <read_allocated_block+0x798>
			ext4fs_indir3_size = blksz;
			ext4fs_indir3_blkno = -1;
		}
		if (blksz != ext4fs_indir3_size) {
			free(ext4fs_indir3_block);
			ext4fs_indir3_block = NULL;
c7e1e74c:	e3a03000 	mov	r3, #0	; 0x0
			ext4fs_indir3_size = 0;
			ext4fs_indir3_blkno = -1;
c7e1e750:	e3e06000 	mvn	r6, #0	; 0x0
			ext4fs_indir3_block = zalloc(blksz);
c7e1e754:	e1a00004 	mov	r0, r4
			ext4fs_indir3_blkno = -1;
		}
		if (blksz != ext4fs_indir3_size) {
			free(ext4fs_indir3_block);
			ext4fs_indir3_block = NULL;
			ext4fs_indir3_size = 0;
c7e1e758:	e5853018 	str	r3, [r5, #24]
			ext4fs_indir3_blkno = -1;
c7e1e75c:	e5826008 	str	r6, [r2, #8]
			ext4fs_indir3_size = blksz;
			ext4fs_indir3_blkno = -1;
		}
		if (blksz != ext4fs_indir3_size) {
			free(ext4fs_indir3_block);
			ext4fs_indir3_block = NULL;
c7e1e760:	e5853014 	str	r3, [r5, #20]
			ext4fs_indir3_size = 0;
			ext4fs_indir3_blkno = -1;
			ext4fs_indir3_block = zalloc(blksz);
c7e1e764:	ebfffe12 	bl	c7e1dfb4 <zalloc>
			if (ext4fs_indir3_block == NULL) {
c7e1e768:	e3500000 	cmp	r0, #0	; 0x0
		if (blksz != ext4fs_indir3_size) {
			free(ext4fs_indir3_block);
			ext4fs_indir3_block = NULL;
			ext4fs_indir3_size = 0;
			ext4fs_indir3_blkno = -1;
			ext4fs_indir3_block = zalloc(blksz);
c7e1e76c:	e5850014 	str	r0, [r5, #20]
			if (ext4fs_indir3_block == NULL) {
				printf("** TI ext2fs read block (indir 2 2)"
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir3_size = blksz;
c7e1e770:	15854018 	strne	r4, [r5, #24]
			free(ext4fs_indir3_block);
			ext4fs_indir3_block = NULL;
			ext4fs_indir3_size = 0;
			ext4fs_indir3_blkno = -1;
			ext4fs_indir3_block = zalloc(blksz);
			if (ext4fs_indir3_block == NULL) {
c7e1e774:	1a000003 	bne	c7e1e788 <read_allocated_block+0x6dc>
				printf("** TI ext2fs read block (indir 2 2)"
c7e1e778:	e59f00e8 	ldr	r0, [pc, #232]	; c7e1e868 <read_allocated_block+0x7bc>
c7e1e77c:	ebffa8b5 	bl	c7e08a58 <printf>
c7e1e780:	e1a00006 	mov	r0, r6
c7e1e784:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
					"malloc failed. **\n");
				return -1;
			}
			ext4fs_indir3_size = blksz;
		}
		if ((__le32_to_cpu(ext4fs_indir2_block[rblock
c7e1e788:	e1a0100a 	mov	r1, sl
c7e1e78c:	e1a0000b 	mov	r0, fp
c7e1e790:	eb002fa1 	bl	c7e2a61c <__divsi3>
c7e1e794:	e59f7098 	ldr	r7, [pc, #152]	; c7e1e834 <read_allocated_block+0x788>
c7e1e798:	e59f10a4 	ldr	r1, [pc, #164]	; c7e1e844 <read_allocated_block+0x798>
c7e1e79c:	e597600c 	ldr	r6, [r7, #12]
c7e1e7a0:	e5913008 	ldr	r3, [r1, #8]
c7e1e7a4:	e7962100 	ldr	r2, [r6, r0, lsl #2]
c7e1e7a8:	e1530912 	cmp	r3, r2, lsl r9
c7e1e7ac:	0a000013 	beq	c7e1e800 <read_allocated_block+0x754>
						       /
						       perblock_child]) <<
		     log2_blksz) != ext4fs_indir3_blkno) {
			status =
c7e1e7b0:	e1a0100a 	mov	r1, sl
c7e1e7b4:	eb002fe2 	bl	c7e2a744 <__aeabi_idivmod>
c7e1e7b8:	e7960101 	ldr	r0, [r6, r1, lsl #2]
c7e1e7bc:	e1a05001 	mov	r5, r1
c7e1e7c0:	e1a02004 	mov	r2, r4
c7e1e7c4:	e1a00910 	lsl	r0, r0, r9
c7e1e7c8:	e3a01000 	mov	r1, #0	; 0x0
c7e1e7cc:	e5973014 	ldr	r3, [r7, #20]
c7e1e7d0:	eb0001e4 	bl	c7e1ef68 <ext4fs_devread>
			    ext4fs_devread(__le32_to_cpu
					   (ext4fs_indir2_block
					    [(rblock / perblock_child)
					     % (blksz / 4)]) << log2_blksz, 0,
					   blksz, (char *)ext4fs_indir3_block);
			if (status == 0) {
c7e1e7d4:	e3500000 	cmp	r0, #0	; 0x0
c7e1e7d8:	1a000003 	bne	c7e1e7ec <read_allocated_block+0x740>
				printf("** TI ext2fs read block (indir 2 2)"
c7e1e7dc:	e59f0088 	ldr	r0, [pc, #136]	; c7e1e86c <read_allocated_block+0x7c0>
c7e1e7e0:	ebffa89c 	bl	c7e08a58 <printf>
c7e1e7e4:	e3e00000 	mvn	r0, #0	; 0x0
c7e1e7e8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
				       "failed. **\n");
				return -1;
			}
			ext4fs_indir3_blkno =
c7e1e7ec:	e597300c 	ldr	r3, [r7, #12]
c7e1e7f0:	e59f204c 	ldr	r2, [pc, #76]	; c7e1e844 <read_allocated_block+0x798>
c7e1e7f4:	e7933105 	ldr	r3, [r3, r5, lsl #2]
c7e1e7f8:	e1a03913 	lsl	r3, r3, r9
c7e1e7fc:	e5823008 	str	r3, [r2, #8]
							      (blksz /
							       4)]) <<
			    log2_blksz;
		}

		blknr = __le32_to_cpu(ext4fs_indir3_block
c7e1e800:	e1a0000b 	mov	r0, fp
c7e1e804:	e1a0100a 	mov	r1, sl
c7e1e808:	eb002fcd 	bl	c7e2a744 <__aeabi_idivmod>
c7e1e80c:	e59f3020 	ldr	r3, [pc, #32]	; c7e1e834 <read_allocated_block+0x788>
c7e1e810:	e5933014 	ldr	r3, [r3, #20]
c7e1e814:	e7930101 	ldr	r0, [r3, r1, lsl #2]
				      [rblock % perblock_child]);
	}
	debug("ext4fs_read_block %ld\n", blknr);

	return blknr;
}
c7e1e818:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
						    (struct ext4_extent_header
						     *)inode->b.
						    blocks.dir_blocks,
						    fileblock, log2_blksz);
		if (!ext_block) {
			printf("invalid extent block\n");
c7e1e81c:	e59f004c 	ldr	r0, [pc, #76]	; c7e1e870 <read_allocated_block+0x7c4>
c7e1e820:	ebffa88c 	bl	c7e08a58 <printf>
			free(buf);
c7e1e824:	e1a00007 	mov	r0, r7
c7e1e828:	ebffa9cc 	bl	c7e08f60 <free>
c7e1e82c:	e3e00015 	mvn	r0, #21	; 0x15
c7e1e830:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1e834:	c7e42248 	.word	0xc7e42248
c7e1e838:	0000f30a 	.word	0x0000f30a
c7e1e83c:	c7e3419b 	.word	0xc7e3419b
c7e1e840:	c7e341a9 	.word	0xc7e341a9
c7e1e844:	c7e3a2bc 	.word	0xc7e3a2bc
c7e1e848:	c7e341dd 	.word	0xc7e341dd
c7e1e84c:	c7e34212 	.word	0xc7e34212
c7e1e850:	c7e3423f 	.word	0xc7e3423f
c7e1e854:	c7e34275 	.word	0xc7e34275
c7e1e858:	c7e342a4 	.word	0xc7e342a4
c7e1e85c:	c7e342da 	.word	0xc7e342da
c7e1e860:	c7e34309 	.word	0xc7e34309
c7e1e864:	c7e3433f 	.word	0xc7e3433f
c7e1e868:	c7e3436e 	.word	0xc7e3436e
c7e1e86c:	c7e343a4 	.word	0xc7e343a4
c7e1e870:	c7e343d3 	.word	0xc7e343d3

c7e1e874 <ext4fs_close>:

	return blknr;
}

void ext4fs_close(void)
{
c7e1e874:	e92d4010 	push	{r4, lr}
	if ((ext4fs_file != NULL) && (ext4fs_root != NULL)) {
c7e1e878:	e59f40c8 	ldr	r4, [pc, #200]	; c7e1e948 <ext4fs_close+0xd4>
c7e1e87c:	e594001c 	ldr	r0, [r4, #28]
c7e1e880:	e3500000 	cmp	r0, #0	; 0x0
c7e1e884:	0a000006 	beq	c7e1e8a4 <ext4fs_close+0x30>
c7e1e888:	e5941000 	ldr	r1, [r4]
c7e1e88c:	e3510000 	cmp	r1, #0	; 0x0
c7e1e890:	0a000003 	beq	c7e1e8a4 <ext4fs_close+0x30>
		ext4fs_free_node(ext4fs_file, &ext4fs_root->diropen);
c7e1e894:	e28110d0 	add	r1, r1, #208	; 0xd0
c7e1e898:	ebfffd61 	bl	c7e1de24 <ext4fs_free_node>
		ext4fs_file = NULL;
c7e1e89c:	e3a03000 	mov	r3, #0	; 0x0
c7e1e8a0:	e584301c 	str	r3, [r4, #28]
	}
	if (ext4fs_root != NULL) {
c7e1e8a4:	e59f409c 	ldr	r4, [pc, #156]	; c7e1e948 <ext4fs_close+0xd4>
c7e1e8a8:	e5940000 	ldr	r0, [r4]
c7e1e8ac:	e3500000 	cmp	r0, #0	; 0x0
c7e1e8b0:	0a000002 	beq	c7e1e8c0 <ext4fs_close+0x4c>
		free(ext4fs_root);
c7e1e8b4:	ebffa9a9 	bl	c7e08f60 <free>
		ext4fs_root = NULL;
c7e1e8b8:	e3a03000 	mov	r3, #0	; 0x0
c7e1e8bc:	e5843000 	str	r3, [r4]
	}
	if (ext4fs_indir1_block != NULL) {
c7e1e8c0:	e59f4080 	ldr	r4, [pc, #128]	; c7e1e948 <ext4fs_close+0xd4>
c7e1e8c4:	e5940004 	ldr	r0, [r4, #4]
c7e1e8c8:	e3500000 	cmp	r0, #0	; 0x0
c7e1e8cc:	0a000006 	beq	c7e1e8ec <ext4fs_close+0x78>
		free(ext4fs_indir1_block);
c7e1e8d0:	ebffa9a2 	bl	c7e08f60 <free>
		ext4fs_indir1_block = NULL;
		ext4fs_indir1_size = 0;
		ext4fs_indir1_blkno = -1;
c7e1e8d4:	e59f3070 	ldr	r3, [pc, #112]	; c7e1e94c <ext4fs_close+0xd8>
		free(ext4fs_root);
		ext4fs_root = NULL;
	}
	if (ext4fs_indir1_block != NULL) {
		free(ext4fs_indir1_block);
		ext4fs_indir1_block = NULL;
c7e1e8d8:	e3a01000 	mov	r1, #0	; 0x0
		ext4fs_indir1_size = 0;
		ext4fs_indir1_blkno = -1;
c7e1e8dc:	e3e02000 	mvn	r2, #0	; 0x0
		ext4fs_root = NULL;
	}
	if (ext4fs_indir1_block != NULL) {
		free(ext4fs_indir1_block);
		ext4fs_indir1_block = NULL;
		ext4fs_indir1_size = 0;
c7e1e8e0:	e5841008 	str	r1, [r4, #8]
		ext4fs_indir1_blkno = -1;
c7e1e8e4:	e5832000 	str	r2, [r3]
		free(ext4fs_root);
		ext4fs_root = NULL;
	}
	if (ext4fs_indir1_block != NULL) {
		free(ext4fs_indir1_block);
		ext4fs_indir1_block = NULL;
c7e1e8e8:	e5841004 	str	r1, [r4, #4]
		ext4fs_indir1_size = 0;
		ext4fs_indir1_blkno = -1;
	}
	if (ext4fs_indir2_block != NULL) {
c7e1e8ec:	e59f4054 	ldr	r4, [pc, #84]	; c7e1e948 <ext4fs_close+0xd4>
c7e1e8f0:	e594000c 	ldr	r0, [r4, #12]
c7e1e8f4:	e3500000 	cmp	r0, #0	; 0x0
c7e1e8f8:	0a000006 	beq	c7e1e918 <ext4fs_close+0xa4>
		free(ext4fs_indir2_block);
c7e1e8fc:	ebffa997 	bl	c7e08f60 <free>
		ext4fs_indir2_block = NULL;
		ext4fs_indir2_size = 0;
		ext4fs_indir2_blkno = -1;
c7e1e900:	e59f3044 	ldr	r3, [pc, #68]	; c7e1e94c <ext4fs_close+0xd8>
		ext4fs_indir1_size = 0;
		ext4fs_indir1_blkno = -1;
	}
	if (ext4fs_indir2_block != NULL) {
		free(ext4fs_indir2_block);
		ext4fs_indir2_block = NULL;
c7e1e904:	e3a01000 	mov	r1, #0	; 0x0
		ext4fs_indir2_size = 0;
		ext4fs_indir2_blkno = -1;
c7e1e908:	e3e02000 	mvn	r2, #0	; 0x0
		ext4fs_indir1_blkno = -1;
	}
	if (ext4fs_indir2_block != NULL) {
		free(ext4fs_indir2_block);
		ext4fs_indir2_block = NULL;
		ext4fs_indir2_size = 0;
c7e1e90c:	e5841010 	str	r1, [r4, #16]
		ext4fs_indir2_blkno = -1;
c7e1e910:	e5832004 	str	r2, [r3, #4]
		ext4fs_indir1_size = 0;
		ext4fs_indir1_blkno = -1;
	}
	if (ext4fs_indir2_block != NULL) {
		free(ext4fs_indir2_block);
		ext4fs_indir2_block = NULL;
c7e1e914:	e584100c 	str	r1, [r4, #12]
		ext4fs_indir2_size = 0;
		ext4fs_indir2_blkno = -1;
	}
	if (ext4fs_indir3_block != NULL) {
c7e1e918:	e59f4028 	ldr	r4, [pc, #40]	; c7e1e948 <ext4fs_close+0xd4>
c7e1e91c:	e5940014 	ldr	r0, [r4, #20]
c7e1e920:	e3500000 	cmp	r0, #0	; 0x0
c7e1e924:	08bd8010 	popeq	{r4, pc}
		free(ext4fs_indir3_block);
c7e1e928:	ebffa98c 	bl	c7e08f60 <free>
		ext4fs_indir3_block = NULL;
		ext4fs_indir3_size = 0;
		ext4fs_indir3_blkno = -1;
c7e1e92c:	e59f3018 	ldr	r3, [pc, #24]	; c7e1e94c <ext4fs_close+0xd8>
		ext4fs_indir2_size = 0;
		ext4fs_indir2_blkno = -1;
	}
	if (ext4fs_indir3_block != NULL) {
		free(ext4fs_indir3_block);
		ext4fs_indir3_block = NULL;
c7e1e930:	e3a01000 	mov	r1, #0	; 0x0
		ext4fs_indir3_size = 0;
		ext4fs_indir3_blkno = -1;
c7e1e934:	e3e02000 	mvn	r2, #0	; 0x0
		ext4fs_indir2_blkno = -1;
	}
	if (ext4fs_indir3_block != NULL) {
		free(ext4fs_indir3_block);
		ext4fs_indir3_block = NULL;
		ext4fs_indir3_size = 0;
c7e1e938:	e5841018 	str	r1, [r4, #24]
		ext4fs_indir3_blkno = -1;
c7e1e93c:	e5832008 	str	r2, [r3, #8]
		ext4fs_indir2_size = 0;
		ext4fs_indir2_blkno = -1;
	}
	if (ext4fs_indir3_block != NULL) {
		free(ext4fs_indir3_block);
		ext4fs_indir3_block = NULL;
c7e1e940:	e5841014 	str	r1, [r4, #20]
c7e1e944:	e8bd8010 	pop	{r4, pc}
c7e1e948:	c7e42248 	.word	0xc7e42248
c7e1e94c:	c7e3a2bc 	.word	0xc7e3a2bc

c7e1e950 <ext4fs_iterate_dir>:
	}
}

int ext4fs_iterate_dir(struct ext2fs_node *dir, char *name,
				struct ext2fs_node **fnode, int *ftype)
{
c7e1e950:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e1e954:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e1e958:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e1e95c:	e1a07000 	mov	r7, r0

#ifdef DEBUG
	if (name != NULL)
		printf("Iterate dir %s\n", name);
#endif /* of DEBUG */
	if (!diro->inode_read) {
c7e1e960:	e5900088 	ldr	r0, [r0, #136]
	}
}

int ext4fs_iterate_dir(struct ext2fs_node *dir, char *name,
				struct ext2fs_node **fnode, int *ftype)
{
c7e1e964:	e50b102c 	str	r1, [fp, #-44]

#ifdef DEBUG
	if (name != NULL)
		printf("Iterate dir %s\n", name);
#endif /* of DEBUG */
	if (!diro->inode_read) {
c7e1e968:	e3500000 	cmp	r0, #0	; 0x0
	}
}

int ext4fs_iterate_dir(struct ext2fs_node *dir, char *name,
				struct ext2fs_node **fnode, int *ftype)
{
c7e1e96c:	e50b2030 	str	r2, [fp, #-48]
c7e1e970:	e50b3034 	str	r3, [fp, #-52]

#ifdef DEBUG
	if (name != NULL)
		printf("Iterate dir %s\n", name);
#endif /* of DEBUG */
	if (!diro->inode_read) {
c7e1e974:	0a000001 	beq	c7e1e980 <ext4fs_iterate_dir+0x30>
c7e1e978:	e3a0a000 	mov	sl, #0	; 0x0
c7e1e97c:	ea000085 	b	c7e1eb98 <ext4fs_iterate_dir+0x248>
		status = ext4fs_read_inode(diro->data, diro->ino, &diro->inode);
c7e1e980:	e5970000 	ldr	r0, [r7]
c7e1e984:	e5971084 	ldr	r1, [r7, #132]
c7e1e988:	e2872004 	add	r2, r7, #4	; 0x4
c7e1e98c:	ebfffd49 	bl	c7e1deb8 <ext4fs_read_inode>
		if (status == 0)
c7e1e990:	e3500000 	cmp	r0, #0	; 0x0
c7e1e994:	1afffff7 	bne	c7e1e978 <ext4fs_iterate_dir+0x28>
c7e1e998:	ea000081 	b	c7e1eba4 <ext4fs_iterate_dir+0x254>
	}
	/* Search the file.  */
	while (fpos < __le32_to_cpu(diro->inode.size)) {
		struct ext2_dirent dirent;

		status = ext4fs_read_file(diro, fpos,
c7e1e99c:	e1a00007 	mov	r0, r7
c7e1e9a0:	e1a0100a 	mov	r1, sl
c7e1e9a4:	e3a02008 	mov	r2, #8	; 0x8
c7e1e9a8:	e24b3024 	sub	r3, fp, #36	; 0x24
c7e1e9ac:	ebfffc80 	bl	c7e1dbb4 <ext4fs_read_file>
					   sizeof(struct ext2_dirent),
					   (char *) &dirent);
		if (status < 1)
c7e1e9b0:	e3500000 	cmp	r0, #0	; 0x0
c7e1e9b4:	da00007a 	ble	c7e1eba4 <ext4fs_iterate_dir+0x254>
			return 0;

		if (dirent.namelen != 0) {
c7e1e9b8:	e55b201e 	ldrb	r2, [fp, #-30]
c7e1e9bc:	e3520000 	cmp	r2, #0	; 0x0
c7e1e9c0:	0a000072 	beq	c7e1eb90 <ext4fs_iterate_dir+0x240>
			char filename[dirent.namelen + 1];
c7e1e9c4:	e282300f 	add	r3, r2, #15	; 0xf
c7e1e9c8:	e2033f7e 	and	r3, r3, #504	; 0x1f8
					   sizeof(struct ext2_dirent),
					   (char *) &dirent);
		if (status < 1)
			return 0;

		if (dirent.namelen != 0) {
c7e1e9cc:	e50bd028 	str	sp, [fp, #-40]
			char filename[dirent.namelen + 1];
c7e1e9d0:	e04dd003 	sub	sp, sp, r3
c7e1e9d4:	e1a0300d 	mov	r3, sp
c7e1e9d8:	e1a041a3 	lsr	r4, r3, #3
c7e1e9dc:	e1a09184 	lsl	r9, r4, #3
			struct ext2fs_node *fdiro;
			int type = FILETYPE_UNKNOWN;

			status = ext4fs_read_file(diro,
c7e1e9e0:	e1a00007 	mov	r0, r7
c7e1e9e4:	e28a1008 	add	r1, sl, #8	; 0x8
c7e1e9e8:	e1a03009 	mov	r3, r9
c7e1e9ec:	ebfffc70 	bl	c7e1dbb4 <ext4fs_read_file>
						  fpos +
						  sizeof(struct ext2_dirent),
						  dirent.namelen, filename);
			if (status < 1)
c7e1e9f0:	e3500000 	cmp	r0, #0	; 0x0
c7e1e9f4:	da000062 	ble	c7e1eb84 <ext4fs_iterate_dir+0x234>
				return 0;

			fdiro = zalloc(sizeof(struct ext2fs_node));
c7e1e9f8:	e3a0008c 	mov	r0, #140	; 0x8c
c7e1e9fc:	ebfffd6c 	bl	c7e1dfb4 <zalloc>
			if (!fdiro)
c7e1ea00:	e2505000 	subs	r5, r0, #0	; 0x0
c7e1ea04:	0a00005e 	beq	c7e1eb84 <ext4fs_iterate_dir+0x234>
				return 0;

			fdiro->data = diro->data;
c7e1ea08:	e5973000 	ldr	r3, [r7]
			fdiro->ino = __le32_to_cpu(dirent.inode);
c7e1ea0c:	e51b1024 	ldr	r1, [fp, #-36]

			fdiro = zalloc(sizeof(struct ext2fs_node));
			if (!fdiro)
				return 0;

			fdiro->data = diro->data;
c7e1ea10:	e5853000 	str	r3, [r5]
			fdiro->ino = __le32_to_cpu(dirent.inode);
c7e1ea14:	e5851084 	str	r1, [r5, #132]

			filename[dirent.namelen] = '\0';
c7e1ea18:	e55b301e 	ldrb	r3, [fp, #-30]
c7e1ea1c:	e3a02000 	mov	r2, #0	; 0x0
c7e1ea20:	e7c32184 	strb	r2, [r3, r4, lsl #3]

			if (dirent.filetype != FILETYPE_UNKNOWN) {
c7e1ea24:	e55b301d 	ldrb	r3, [fp, #-29]
c7e1ea28:	e1530002 	cmp	r3, r2
c7e1ea2c:	0a000006 	beq	c7e1ea4c <ext4fs_iterate_dir+0xfc>
				fdiro->inode_read = 0;

				if (dirent.filetype == FILETYPE_DIRECTORY)
c7e1ea30:	e3530002 	cmp	r3, #2	; 0x2
			fdiro->ino = __le32_to_cpu(dirent.inode);

			filename[dirent.namelen] = '\0';

			if (dirent.filetype != FILETYPE_UNKNOWN) {
				fdiro->inode_read = 0;
c7e1ea34:	e5852088 	str	r2, [r5, #136]

				if (dirent.filetype == FILETYPE_DIRECTORY)
c7e1ea38:	0a00001a 	beq	c7e1eaa8 <ext4fs_iterate_dir+0x158>
					type = FILETYPE_DIRECTORY;
				else if (dirent.filetype == FILETYPE_SYMLINK)
c7e1ea3c:	e3530007 	cmp	r3, #7	; 0x7
c7e1ea40:	0a000016 	beq	c7e1eaa0 <ext4fs_iterate_dir+0x150>
					type = FILETYPE_SYMLINK;
				else if (dirent.filetype == FILETYPE_REG)
c7e1ea44:	e3530001 	cmp	r3, #1	; 0x1
c7e1ea48:	ea000011 	b	c7e1ea94 <ext4fs_iterate_dir+0x144>
					type = FILETYPE_REG;
			} else {
				status = ext4fs_read_inode(diro->data,
c7e1ea4c:	e5970000 	ldr	r0, [r7]
c7e1ea50:	e2852004 	add	r2, r5, #4	; 0x4
c7e1ea54:	ebfffd17 	bl	c7e1deb8 <ext4fs_read_inode>
							   __le32_to_cpu
							   (dirent.inode),
							   &fdiro->inode);
				if (status == 0) {
c7e1ea58:	e2504000 	subs	r4, r0, #0	; 0x0
c7e1ea5c:	1a000003 	bne	c7e1ea70 <ext4fs_iterate_dir+0x120>
					free(fdiro);
c7e1ea60:	e1a00005 	mov	r0, r5
c7e1ea64:	ebffa93d 	bl	c7e08f60 <free>
c7e1ea68:	e1a00004 	mov	r0, r4
c7e1ea6c:	ea000045 	b	c7e1eb88 <ext4fs_iterate_dir+0x238>
					return 0;
				}
				fdiro->inode_read = 1;

				if ((__le16_to_cpu(fdiro->inode.mode) &
c7e1ea70:	e1d530b4 	ldrh	r3, [r5, #4]
c7e1ea74:	e2032a0f 	and	r2, r3, #61440	; 0xf000
c7e1ea78:	e3520901 	cmp	r2, #16384	; 0x4000
							   &fdiro->inode);
				if (status == 0) {
					free(fdiro);
					return 0;
				}
				fdiro->inode_read = 1;
c7e1ea7c:	e3a03001 	mov	r3, #1	; 0x1
c7e1ea80:	e5853088 	str	r3, [r5, #136]

				if ((__le16_to_cpu(fdiro->inode.mode) &
c7e1ea84:	0a000007 	beq	c7e1eaa8 <ext4fs_iterate_dir+0x158>
				     FILETYPE_INO_MASK) ==
				    FILETYPE_INO_DIRECTORY) {
					type = FILETYPE_DIRECTORY;
				} else if ((__le16_to_cpu(fdiro->inode.mode)
c7e1ea88:	e3520a0a 	cmp	r2, #40960	; 0xa000
c7e1ea8c:	0a000003 	beq	c7e1eaa0 <ext4fs_iterate_dir+0x150>
					    & FILETYPE_INO_MASK) ==
					   FILETYPE_INO_SYMLINK) {
					type = FILETYPE_SYMLINK;
				} else if ((__le16_to_cpu(fdiro->inode.mode)
c7e1ea90:	e3520902 	cmp	r2, #32768	; 0x8000
c7e1ea94:	13a04000 	movne	r4, #0	; 0x0
c7e1ea98:	1a000005 	bne	c7e1eab4 <ext4fs_iterate_dir+0x164>
c7e1ea9c:	ea000003 	b	c7e1eab0 <ext4fs_iterate_dir+0x160>
c7e1eaa0:	e3a04007 	mov	r4, #7	; 0x7
c7e1eaa4:	ea000002 	b	c7e1eab4 <ext4fs_iterate_dir+0x164>
c7e1eaa8:	e3a04002 	mov	r4, #2	; 0x2
c7e1eaac:	ea000000 	b	c7e1eab4 <ext4fs_iterate_dir+0x164>
c7e1eab0:	e3a04001 	mov	r4, #1	; 0x1
				}
			}
#ifdef DEBUG
			printf("iterate >%s<\n", filename);
#endif /* of DEBUG */
			if ((name != NULL) && (fnode != NULL)
c7e1eab4:	e51b202c 	ldr	r2, [fp, #-44]
c7e1eab8:	e51b3030 	ldr	r3, [fp, #-48]
c7e1eabc:	e3520000 	cmp	r2, #0	; 0x0
c7e1eac0:	13530000 	cmpne	r3, #0	; 0x0
c7e1eac4:	0a00000d 	beq	c7e1eb00 <ext4fs_iterate_dir+0x1b0>
c7e1eac8:	e51b2034 	ldr	r2, [fp, #-52]
c7e1eacc:	e3520000 	cmp	r2, #0	; 0x0
c7e1ead0:	0a00000a 	beq	c7e1eb00 <ext4fs_iterate_dir+0x1b0>
			    && (ftype != NULL)) {
				if (strcmp(filename, name) == 0) {
c7e1ead4:	e1a00009 	mov	r0, r9
c7e1ead8:	e51b102c 	ldr	r1, [fp, #-44]
c7e1eadc:	eb000f5f 	bl	c7e22860 <strcmp>
c7e1eae0:	e3500000 	cmp	r0, #0	; 0x0
c7e1eae4:	1a000022 	bne	c7e1eb74 <ext4fs_iterate_dir+0x224>
					*ftype = type;
c7e1eae8:	e51b3034 	ldr	r3, [fp, #-52]
					*fnode = fdiro;
c7e1eaec:	e51b2030 	ldr	r2, [fp, #-48]
			printf("iterate >%s<\n", filename);
#endif /* of DEBUG */
			if ((name != NULL) && (fnode != NULL)
			    && (ftype != NULL)) {
				if (strcmp(filename, name) == 0) {
					*ftype = type;
c7e1eaf0:	e5834000 	str	r4, [r3]
					*fnode = fdiro;
c7e1eaf4:	e5825000 	str	r5, [r2]
c7e1eaf8:	e2800001 	add	r0, r0, #1	; 0x1
c7e1eafc:	ea000021 	b	c7e1eb88 <ext4fs_iterate_dir+0x238>
					return 1;
				}
			} else {
				if (fdiro->inode_read == 0) {
c7e1eb00:	e5953088 	ldr	r3, [r5, #136]
c7e1eb04:	e3530000 	cmp	r3, #0	; 0x0
c7e1eb08:	1a00000b 	bne	c7e1eb3c <ext4fs_iterate_dir+0x1ec>
					status = ext4fs_read_inode(diro->data,
c7e1eb0c:	e5970000 	ldr	r0, [r7]
c7e1eb10:	e51b1024 	ldr	r1, [fp, #-36]
c7e1eb14:	e2852004 	add	r2, r5, #4	; 0x4
c7e1eb18:	ebfffce6 	bl	c7e1deb8 <ext4fs_read_inode>
								 __le32_to_cpu(
								 dirent.inode),
								 &fdiro->inode);
					if (status == 0) {
c7e1eb1c:	e2506000 	subs	r6, r0, #0	; 0x0
c7e1eb20:	1a000003 	bne	c7e1eb34 <ext4fs_iterate_dir+0x1e4>
						free(fdiro);
c7e1eb24:	e1a00005 	mov	r0, r5
c7e1eb28:	ebffa90c 	bl	c7e08f60 <free>
c7e1eb2c:	e1a00006 	mov	r0, r6
c7e1eb30:	ea000014 	b	c7e1eb88 <ext4fs_iterate_dir+0x238>
						return 0;
					}
					fdiro->inode_read = 1;
c7e1eb34:	e3a03001 	mov	r3, #1	; 0x1
c7e1eb38:	e5853088 	str	r3, [r5, #136]
				}
				switch (type) {
c7e1eb3c:	e3540002 	cmp	r4, #2	; 0x2
				case FILETYPE_DIRECTORY:
					printf("<DIR> ");
c7e1eb40:	059f0068 	ldreq	r0, [pc, #104]	; c7e1ebb0 <ext4fs_iterate_dir+0x260>
						free(fdiro);
						return 0;
					}
					fdiro->inode_read = 1;
				}
				switch (type) {
c7e1eb44:	0a000005 	beq	c7e1eb60 <ext4fs_iterate_dir+0x210>
c7e1eb48:	e3540007 	cmp	r4, #7	; 0x7
				case FILETYPE_DIRECTORY:
					printf("<DIR> ");
					break;
				case FILETYPE_SYMLINK:
					printf("<SYM> ");
c7e1eb4c:	059f0060 	ldreq	r0, [pc, #96]	; c7e1ebb4 <ext4fs_iterate_dir+0x264>
						free(fdiro);
						return 0;
					}
					fdiro->inode_read = 1;
				}
				switch (type) {
c7e1eb50:	0a000002 	beq	c7e1eb60 <ext4fs_iterate_dir+0x210>
c7e1eb54:	e3540001 	cmp	r4, #1	; 0x1
					break;
				case FILETYPE_REG:
					printf("      ");
					break;
				default:
					printf("< ? > ");
c7e1eb58:	159f0058 	ldrne	r0, [pc, #88]	; c7e1ebb8 <ext4fs_iterate_dir+0x268>
					break;
				case FILETYPE_SYMLINK:
					printf("<SYM> ");
					break;
				case FILETYPE_REG:
					printf("      ");
c7e1eb5c:	059f0058 	ldreq	r0, [pc, #88]	; c7e1ebbc <ext4fs_iterate_dir+0x26c>
					break;
				default:
					printf("< ? > ");
c7e1eb60:	ebffa7bc 	bl	c7e08a58 <printf>
					break;
				}
				printf("%10d %s\n",
c7e1eb64:	e1a02009 	mov	r2, r9
c7e1eb68:	e59f0050 	ldr	r0, [pc, #80]	; c7e1ebc0 <ext4fs_iterate_dir+0x270>
c7e1eb6c:	e5951008 	ldr	r1, [r5, #8]
c7e1eb70:	ebffa7b8 	bl	c7e08a58 <printf>
					__le32_to_cpu(fdiro->inode.size),
					filename);
			}
			free(fdiro);
c7e1eb74:	e1a00005 	mov	r0, r5
c7e1eb78:	ebffa8f8 	bl	c7e08f60 <free>
c7e1eb7c:	e51bd028 	ldr	sp, [fp, #-40]
c7e1eb80:	ea000002 	b	c7e1eb90 <ext4fs_iterate_dir+0x240>
c7e1eb84:	e3a00000 	mov	r0, #0	; 0x0
c7e1eb88:	e51bd028 	ldr	sp, [fp, #-40]
c7e1eb8c:	ea000005 	b	c7e1eba8 <ext4fs_iterate_dir+0x258>
		}
		fpos += __le16_to_cpu(dirent.direntlen);
c7e1eb90:	e15b32b0 	ldrh	r3, [fp, #-32]
c7e1eb94:	e08aa003 	add	sl, sl, r3
		status = ext4fs_read_inode(diro->data, diro->ino, &diro->inode);
		if (status == 0)
			return 0;
	}
	/* Search the file.  */
	while (fpos < __le32_to_cpu(diro->inode.size)) {
c7e1eb98:	e5973008 	ldr	r3, [r7, #8]
c7e1eb9c:	e15a0003 	cmp	sl, r3
c7e1eba0:	3affff7d 	bcc	c7e1e99c <ext4fs_iterate_dir+0x4c>
c7e1eba4:	e3a00000 	mov	r0, #0	; 0x0
			free(fdiro);
		}
		fpos += __le16_to_cpu(dirent.direntlen);
	}
	return 0;
}
c7e1eba8:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e1ebac:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1ebb0:	c7e343e9 	.word	0xc7e343e9
c7e1ebb4:	c7e343f0 	.word	0xc7e343f0
c7e1ebb8:	c7e343fe 	.word	0xc7e343fe
c7e1ebbc:	c7e343f7 	.word	0xc7e343f7
c7e1ebc0:	c7e34405 	.word	0xc7e34405

c7e1ebc4 <ext4fs_find_file1>:
}

static int ext4fs_find_file1(const char *currpath,
			     struct ext2fs_node *currroot,
			     struct ext2fs_node **currfound, int *foundtype)
{
c7e1ebc4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e1ebc8:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e1ebcc:	e24dd010 	sub	sp, sp, #16	; 0x10
c7e1ebd0:	e1a0a001 	mov	sl, r1
c7e1ebd4:	e50b2028 	str	r2, [fp, #-40]
c7e1ebd8:	e1a04000 	mov	r4, r0
c7e1ebdc:	e50b302c 	str	r3, [fp, #-44]
	char fpath[strlen(currpath) + 1];
c7e1ebe0:	eb000f54 	bl	c7e22938 <strlen>
c7e1ebe4:	e280000f 	add	r0, r0, #15	; 0xf
c7e1ebe8:	e3c00007 	bic	r0, r0, #7	; 0x7
c7e1ebec:	e04dd000 	sub	sp, sp, r0
	char *name = fpath;
	char *next;
	int status;
	int type = FILETYPE_DIRECTORY;
c7e1ebf0:	e3a03002 	mov	r3, #2	; 0x2
	struct ext2fs_node *currnode = currroot;
	struct ext2fs_node *oldnode = currroot;

	strncpy(fpath, currpath, strlen(currpath) + 1);
c7e1ebf4:	e1a00004 	mov	r0, r4
{
	char fpath[strlen(currpath) + 1];
	char *name = fpath;
	char *next;
	int status;
	int type = FILETYPE_DIRECTORY;
c7e1ebf8:	e50b3020 	str	r3, [fp, #-32]
	struct ext2fs_node *currnode = currroot;
c7e1ebfc:	e50ba024 	str	sl, [fp, #-36]
	struct ext2fs_node *oldnode = currroot;

	strncpy(fpath, currpath, strlen(currpath) + 1);
c7e1ec00:	eb000f4c 	bl	c7e22938 <strlen>
c7e1ec04:	e1a01004 	mov	r1, r4
c7e1ec08:	e2802001 	add	r2, r0, #1	; 0x1
c7e1ec0c:	e1a0000d 	mov	r0, sp

static int ext4fs_find_file1(const char *currpath,
			     struct ext2fs_node *currroot,
			     struct ext2fs_node **currfound, int *foundtype)
{
	char fpath[strlen(currpath) + 1];
c7e1ec10:	e1a0500d 	mov	r5, sp
	int status;
	int type = FILETYPE_DIRECTORY;
	struct ext2fs_node *currnode = currroot;
	struct ext2fs_node *oldnode = currroot;

	strncpy(fpath, currpath, strlen(currpath) + 1);
c7e1ec14:	eb000ee1 	bl	c7e227a0 <strncpy>
c7e1ec18:	ea000000 	b	c7e1ec20 <ext4fs_find_file1+0x5c>

	/* Remove all leading slashes. */
	while (*name == '/')
		name++;
c7e1ec1c:	e2855001 	add	r5, r5, #1	; 0x1
	struct ext2fs_node *oldnode = currroot;

	strncpy(fpath, currpath, strlen(currpath) + 1);

	/* Remove all leading slashes. */
	while (*name == '/')
c7e1ec20:	e5d53000 	ldrb	r3, [r5]
c7e1ec24:	e353002f 	cmp	r3, #47	; 0x2f
c7e1ec28:	0afffffb 	beq	c7e1ec1c <ext4fs_find_file1+0x58>
		name++;

	if (!*name) {
c7e1ec2c:	e3530000 	cmp	r3, #0	; 0x0
		*currfound = currnode;
c7e1ec30:	051b3024 	ldreq	r3, [fp, #-36]
c7e1ec34:	051b2028 	ldreq	r2, [fp, #-40]
c7e1ec38:	03a00001 	moveq	r0, #1	; 0x1
c7e1ec3c:	05823000 	streq	r3, [r2]
c7e1ec40:	0a000081 	beq	c7e1ee4c <ext4fs_find_file1+0x288>

	for (;;) {
		int found;

		/* Extract the actual part from the pathname. */
		next = strchr(name, '/');
c7e1ec44:	e1a00005 	mov	r0, r5
c7e1ec48:	e3a0102f 	mov	r1, #47	; 0x2f
c7e1ec4c:	eb000f25 	bl	c7e228e8 <strchr>
		if (next) {
c7e1ec50:	e2509000 	subs	r9, r0, #0	; 0x0
c7e1ec54:	11a02009 	movne	r2, r9
c7e1ec58:	1a000002 	bne	c7e1ec68 <ext4fs_find_file1+0xa4>
c7e1ec5c:	ea000005 	b	c7e1ec78 <ext4fs_find_file1+0xb4>
			/* Remove all leading slashes. */
			while (*next == '/')
				*(next++) = '\0';
c7e1ec60:	e3a03000 	mov	r3, #0	; 0x0
c7e1ec64:	e5423001 	strb	r3, [r2, #-1]
c7e1ec68:	e1a09002 	mov	r9, r2

		/* Extract the actual part from the pathname. */
		next = strchr(name, '/');
		if (next) {
			/* Remove all leading slashes. */
			while (*next == '/')
c7e1ec6c:	e4d23001 	ldrb	r3, [r2], #1
c7e1ec70:	e353002f 	cmp	r3, #47	; 0x2f
c7e1ec74:	0afffff9 	beq	c7e1ec60 <ext4fs_find_file1+0x9c>
				*(next++) = '\0';
		}

		if (type != FILETYPE_DIRECTORY) {
c7e1ec78:	e51b3020 	ldr	r3, [fp, #-32]
c7e1ec7c:	e3530002 	cmp	r3, #2	; 0x2
			ext4fs_free_node(currnode, currroot);
c7e1ec80:	11a0100a 	movne	r1, sl
c7e1ec84:	151b0024 	ldrne	r0, [fp, #-36]
c7e1ec88:	1a000017 	bne	c7e1ecec <ext4fs_find_file1+0x128>
			return 0;
		}

		oldnode = currnode;
c7e1ec8c:	e24b201c 	sub	r2, fp, #28	; 0x1c
c7e1ec90:	e5327008 	ldr	r7, [r2, #-8]!

		/* Iterate over the directory. */
		found = ext4fs_iterate_dir(currnode, name, &currnode, &type);
c7e1ec94:	e1a01005 	mov	r1, r5
c7e1ec98:	e1a00007 	mov	r0, r7
c7e1ec9c:	e24b3020 	sub	r3, fp, #32	; 0x20
c7e1eca0:	ebffff2a 	bl	c7e1e950 <ext4fs_iterate_dir>
		if (found == 0)
c7e1eca4:	e3500000 	cmp	r0, #0	; 0x0
c7e1eca8:	0a000067 	beq	c7e1ee4c <ext4fs_find_file1+0x288>
			return 0;

		if (found == -1)
c7e1ecac:	e3700001 	cmn	r0, #1	; 0x1
c7e1ecb0:	0a000065 	beq	c7e1ee4c <ext4fs_find_file1+0x288>
			break;

		/* Read in the symlink and follow it. */
		if (type == FILETYPE_SYMLINK) {
c7e1ecb4:	e51b3020 	ldr	r3, [fp, #-32]
c7e1ecb8:	e3530007 	cmp	r3, #7	; 0x7
c7e1ecbc:	1a000052 	bne	c7e1ee0c <ext4fs_find_file1+0x248>
			char *symlink;

			/* Test if the symlink does not loop. */
			if (++symlinknest == 8) {
c7e1ecc0:	e59f218c 	ldr	r2, [pc, #396]	; c7e1ee54 <ext4fs_find_file1+0x290>
c7e1ecc4:	e5923020 	ldr	r3, [r2, #32]
c7e1ecc8:	e2833001 	add	r3, r3, #1	; 0x1
c7e1eccc:	e3530008 	cmp	r3, #8	; 0x8
c7e1ecd0:	e5823020 	str	r3, [r2, #32]
c7e1ecd4:	1a000007 	bne	c7e1ecf8 <ext4fs_find_file1+0x134>
				ext4fs_free_node(currnode, currroot);
c7e1ecd8:	e51b0024 	ldr	r0, [fp, #-36]
c7e1ecdc:	e1a0100a 	mov	r1, sl
c7e1ece0:	ebfffc4f 	bl	c7e1de24 <ext4fs_free_node>
				ext4fs_free_node(oldnode, currroot);
c7e1ece4:	e1a00007 	mov	r0, r7
c7e1ece8:	e1a0100a 	mov	r1, sl
c7e1ecec:	ebfffc4c 	bl	c7e1de24 <ext4fs_free_node>
c7e1ecf0:	e3a00000 	mov	r0, #0	; 0x0
c7e1ecf4:	ea000054 	b	c7e1ee4c <ext4fs_find_file1+0x288>
				return 0;
			}

			symlink = ext4fs_read_symlink(currnode);
c7e1ecf8:	e51b4024 	ldr	r4, [fp, #-36]
{
	char *symlink;
	struct ext2fs_node *diro = node;
	int status;

	if (!diro->inode_read) {
c7e1ecfc:	e5943088 	ldr	r3, [r4, #136]
c7e1ed00:	e3530000 	cmp	r3, #0	; 0x0
c7e1ed04:	1a000006 	bne	c7e1ed24 <ext4fs_find_file1+0x160>
		status = ext4fs_read_inode(diro->data, diro->ino, &diro->inode);
c7e1ed08:	e5940000 	ldr	r0, [r4]
c7e1ed0c:	e5941084 	ldr	r1, [r4, #132]
c7e1ed10:	e2842004 	add	r2, r4, #4	; 0x4
c7e1ed14:	ebfffc67 	bl	c7e1deb8 <ext4fs_read_inode>
		if (status == 0)
c7e1ed18:	e3500000 	cmp	r0, #0	; 0x0
c7e1ed1c:	01a05000 	moveq	r5, r0
c7e1ed20:	0a000017 	beq	c7e1ed84 <ext4fs_find_file1+0x1c0>
			return 0;
	}
	symlink = zalloc(__le32_to_cpu(diro->inode.size) + 1);
c7e1ed24:	e5940008 	ldr	r0, [r4, #8]
c7e1ed28:	e2800001 	add	r0, r0, #1	; 0x1
c7e1ed2c:	ebfffca0 	bl	c7e1dfb4 <zalloc>
	if (!symlink)
c7e1ed30:	e2505000 	subs	r5, r0, #0	; 0x0
c7e1ed34:	0a000012 	beq	c7e1ed84 <ext4fs_find_file1+0x1c0>
		return 0;

	if (__le32_to_cpu(diro->inode.size) <= 60) {
c7e1ed38:	e5942008 	ldr	r2, [r4, #8]
c7e1ed3c:	e352003c 	cmp	r2, #60	; 0x3c
c7e1ed40:	8a000002 	bhi	c7e1ed50 <ext4fs_find_file1+0x18c>
		strncpy(symlink, diro->inode.b.symlink,
c7e1ed44:	e284102c 	add	r1, r4, #44	; 0x2c
c7e1ed48:	eb000e94 	bl	c7e227a0 <strncpy>
c7e1ed4c:	ea000009 	b	c7e1ed78 <ext4fs_find_file1+0x1b4>
			 __le32_to_cpu(diro->inode.size));
	} else {
		status = ext4fs_read_file(diro, 0,
c7e1ed50:	e1a00004 	mov	r0, r4
c7e1ed54:	e3a01000 	mov	r1, #0	; 0x0
c7e1ed58:	e1a03005 	mov	r3, r5
c7e1ed5c:	ebfffb94 	bl	c7e1dbb4 <ext4fs_read_file>
					   __le32_to_cpu(diro->inode.size),
					   symlink);
		if (status == 0) {
c7e1ed60:	e2506000 	subs	r6, r0, #0	; 0x0
c7e1ed64:	1a000003 	bne	c7e1ed78 <ext4fs_find_file1+0x1b4>
			free(symlink);
c7e1ed68:	e1a00005 	mov	r0, r5
c7e1ed6c:	ebffa87b 	bl	c7e08f60 <free>
c7e1ed70:	e1a05006 	mov	r5, r6
c7e1ed74:	ea000002 	b	c7e1ed84 <ext4fs_find_file1+0x1c0>
			return 0;
		}
	}
	symlink[__le32_to_cpu(diro->inode.size)] = '\0';
c7e1ed78:	e5942008 	ldr	r2, [r4, #8]
c7e1ed7c:	e3a03000 	mov	r3, #0	; 0x0
c7e1ed80:	e7c53002 	strb	r3, [r5, r2]
				ext4fs_free_node(oldnode, currroot);
				return 0;
			}

			symlink = ext4fs_read_symlink(currnode);
			ext4fs_free_node(currnode, currroot);
c7e1ed84:	e51b0024 	ldr	r0, [fp, #-36]
c7e1ed88:	e1a0100a 	mov	r1, sl
c7e1ed8c:	ebfffc24 	bl	c7e1de24 <ext4fs_free_node>

			if (!symlink) {
c7e1ed90:	e3550000 	cmp	r5, #0	; 0x0
c7e1ed94:	1a000004 	bne	c7e1edac <ext4fs_find_file1+0x1e8>
				ext4fs_free_node(oldnode, currroot);
c7e1ed98:	e1a00007 	mov	r0, r7
c7e1ed9c:	e1a0100a 	mov	r1, sl
c7e1eda0:	ebfffc1f 	bl	c7e1de24 <ext4fs_free_node>
c7e1eda4:	e1a00005 	mov	r0, r5
c7e1eda8:	ea000027 	b	c7e1ee4c <ext4fs_find_file1+0x288>
				return 0;
			}

			debug("Got symlink >%s<\n", symlink);

			if (symlink[0] == '/') {
c7e1edac:	e5d53000 	ldrb	r3, [r5]
c7e1edb0:	e353002f 	cmp	r3, #47	; 0x2f
c7e1edb4:	1a000005 	bne	c7e1edd0 <ext4fs_find_file1+0x20c>
				ext4fs_free_node(oldnode, currroot);
c7e1edb8:	e1a00007 	mov	r0, r7
c7e1edbc:	e1a0100a 	mov	r1, sl
c7e1edc0:	ebfffc17 	bl	c7e1de24 <ext4fs_free_node>
				oldnode = &ext4fs_root->diropen;
c7e1edc4:	e59f3088 	ldr	r3, [pc, #136]	; c7e1ee54 <ext4fs_find_file1+0x290>
c7e1edc8:	e5933000 	ldr	r3, [r3]
c7e1edcc:	e28370d0 	add	r7, r3, #208	; 0xd0
			}

			/* Lookup the node the symlink points to. */
			status = ext4fs_find_file1(symlink, oldnode,
c7e1edd0:	e1a01007 	mov	r1, r7
c7e1edd4:	e24b2024 	sub	r2, fp, #36	; 0x24
c7e1edd8:	e24b3020 	sub	r3, fp, #32	; 0x20
c7e1eddc:	e1a00005 	mov	r0, r5
c7e1ede0:	ebffff77 	bl	c7e1ebc4 <ext4fs_find_file1>
c7e1ede4:	e1a04000 	mov	r4, r0
						    &currnode, &type);

			free(symlink);
c7e1ede8:	e1a00005 	mov	r0, r5
c7e1edec:	ebffa85b 	bl	c7e08f60 <free>

			if (status == 0) {
c7e1edf0:	e3540000 	cmp	r4, #0	; 0x0
c7e1edf4:	1a000004 	bne	c7e1ee0c <ext4fs_find_file1+0x248>
				ext4fs_free_node(oldnode, currroot);
c7e1edf8:	e1a00007 	mov	r0, r7
c7e1edfc:	e1a0100a 	mov	r1, sl
c7e1ee00:	ebfffc07 	bl	c7e1de24 <ext4fs_free_node>
c7e1ee04:	e1a00004 	mov	r0, r4
c7e1ee08:	ea00000f 	b	c7e1ee4c <ext4fs_find_file1+0x288>
				return 0;
			}
		}

		ext4fs_free_node(oldnode, currroot);
c7e1ee0c:	e1a00007 	mov	r0, r7
c7e1ee10:	e1a0100a 	mov	r1, sl
c7e1ee14:	ebfffc02 	bl	c7e1de24 <ext4fs_free_node>

		/* Found the node! */
		if (!next || *next == '\0') {
c7e1ee18:	e3590000 	cmp	r9, #0	; 0x0
c7e1ee1c:	0a000003 	beq	c7e1ee30 <ext4fs_find_file1+0x26c>
c7e1ee20:	e5d93000 	ldrb	r3, [r9]
c7e1ee24:	e1a05009 	mov	r5, r9
c7e1ee28:	e3530000 	cmp	r3, #0	; 0x0
c7e1ee2c:	1affff84 	bne	c7e1ec44 <ext4fs_find_file1+0x80>
			*currfound = currnode;
c7e1ee30:	e51b3024 	ldr	r3, [fp, #-36]
c7e1ee34:	e51b2028 	ldr	r2, [fp, #-40]
			*foundtype = type;
c7e1ee38:	e3a00001 	mov	r0, #1	; 0x1

		ext4fs_free_node(oldnode, currroot);

		/* Found the node! */
		if (!next || *next == '\0') {
			*currfound = currnode;
c7e1ee3c:	e5823000 	str	r3, [r2]
			*foundtype = type;
c7e1ee40:	e51b3020 	ldr	r3, [fp, #-32]
c7e1ee44:	e51b202c 	ldr	r2, [fp, #-44]
c7e1ee48:	e5823000 	str	r3, [r2]
			return 1;
		}
		name = next;
	}
	return -1;
}
c7e1ee4c:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e1ee50:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1ee54:	c7e42248 	.word	0xc7e42248

c7e1ee58 <ext4fs_find_file>:
	struct ext2fs_node **foundnode, int expecttype)
{
	int status;
	int foundtype = FILETYPE_DIRECTORY;

	symlinknest = 0;
c7e1ee58:	e59fc070 	ldr	ip, [pc, #112]	; c7e1eed0 <ext4fs_find_file+0x78>
	return -1;
}

int ext4fs_find_file(const char *path, struct ext2fs_node *rootnode,
	struct ext2fs_node **foundnode, int expecttype)
{
c7e1ee5c:	e92d4013 	push	{r0, r1, r4, lr}
	int status;
	int foundtype = FILETYPE_DIRECTORY;

	symlinknest = 0;
	if (!path)
c7e1ee60:	e3500000 	cmp	r0, #0	; 0x0
	struct ext2fs_node **foundnode, int expecttype)
{
	int status;
	int foundtype = FILETYPE_DIRECTORY;

	symlinknest = 0;
c7e1ee64:	e3a04000 	mov	r4, #0	; 0x0
c7e1ee68:	e58c4020 	str	r4, [ip, #32]
	return -1;
}

int ext4fs_find_file(const char *path, struct ext2fs_node *rootnode,
	struct ext2fs_node **foundnode, int expecttype)
{
c7e1ee6c:	e1a04003 	mov	r4, r3
	int status;
	int foundtype = FILETYPE_DIRECTORY;

	symlinknest = 0;
	if (!path)
c7e1ee70:	0a000014 	beq	c7e1eec8 <ext4fs_find_file+0x70>

int ext4fs_find_file(const char *path, struct ext2fs_node *rootnode,
	struct ext2fs_node **foundnode, int expecttype)
{
	int status;
	int foundtype = FILETYPE_DIRECTORY;
c7e1ee74:	e28d3008 	add	r3, sp, #8	; 0x8
c7e1ee78:	e3a0c002 	mov	ip, #2	; 0x2
c7e1ee7c:	e523c004 	str	ip, [r3, #-4]!

	symlinknest = 0;
	if (!path)
		return 0;

	status = ext4fs_find_file1(path, rootnode, foundnode, &foundtype);
c7e1ee80:	ebffff4f 	bl	c7e1ebc4 <ext4fs_find_file1>
	if (status == 0)
c7e1ee84:	e3500000 	cmp	r0, #0	; 0x0
c7e1ee88:	0a00000e 	beq	c7e1eec8 <ext4fs_find_file+0x70>
		return 0;

	/* Check if the node that was found was of the expected type. */
	if ((expecttype == FILETYPE_REG) && (foundtype != expecttype))
c7e1ee8c:	e3540001 	cmp	r4, #1	; 0x1
c7e1ee90:	1a000004 	bne	c7e1eea8 <ext4fs_find_file+0x50>
c7e1ee94:	e59d3004 	ldr	r3, [sp, #4]
c7e1ee98:	e3530001 	cmp	r3, #1	; 0x1
c7e1ee9c:	13a00000 	movne	r0, #0	; 0x0
c7e1eea0:	03a00001 	moveq	r0, #1	; 0x1
c7e1eea4:	ea000008 	b	c7e1eecc <ext4fs_find_file+0x74>
		return 0;
	else if ((expecttype == FILETYPE_DIRECTORY)
c7e1eea8:	e3540002 	cmp	r4, #2	; 0x2
c7e1eeac:	13a00001 	movne	r0, #1	; 0x1
c7e1eeb0:	1a000005 	bne	c7e1eecc <ext4fs_find_file+0x74>
c7e1eeb4:	e59d3004 	ldr	r3, [sp, #4]
c7e1eeb8:	e3530002 	cmp	r3, #2	; 0x2
c7e1eebc:	13a00000 	movne	r0, #0	; 0x0
c7e1eec0:	03a00001 	moveq	r0, #1	; 0x1
c7e1eec4:	ea000000 	b	c7e1eecc <ext4fs_find_file+0x74>
c7e1eec8:	e3a00000 	mov	r0, #0	; 0x0
		   && (foundtype != expecttype))
		return 0;

	return 1;
}
c7e1eecc:	e8bd801c 	pop	{r2, r3, r4, pc}
c7e1eed0:	c7e42248 	.word	0xc7e42248

c7e1eed4 <ext4fs_open>:

int ext4fs_open(const char *filename)
{
c7e1eed4:	e92d4013 	push	{r0, r1, r4, lr}
	struct ext2fs_node *fdiro = NULL;
	int status;
	int len;

	if (ext4fs_root == NULL)
c7e1eed8:	e59f4084 	ldr	r4, [pc, #132]	; c7e1ef64 <ext4fs_open+0x90>
c7e1eedc:	e5941000 	ldr	r1, [r4]
c7e1eee0:	e3510000 	cmp	r1, #0	; 0x0
c7e1eee4:	0a00001c 	beq	c7e1ef5c <ext4fs_open+0x88>
		return -1;

	ext4fs_file = NULL;
c7e1eee8:	e3a0c000 	mov	ip, #0	; 0x0
	return 1;
}

int ext4fs_open(const char *filename)
{
	struct ext2fs_node *fdiro = NULL;
c7e1eeec:	e28d2008 	add	r2, sp, #8	; 0x8
c7e1eef0:	e522c004 	str	ip, [r2, #-4]!

	if (ext4fs_root == NULL)
		return -1;

	ext4fs_file = NULL;
	status = ext4fs_find_file(filename, &ext4fs_root->diropen, &fdiro,
c7e1eef4:	e28110d0 	add	r1, r1, #208	; 0xd0
c7e1eef8:	e3a03001 	mov	r3, #1	; 0x1
	int len;

	if (ext4fs_root == NULL)
		return -1;

	ext4fs_file = NULL;
c7e1eefc:	e584c01c 	str	ip, [r4, #28]
	status = ext4fs_find_file(filename, &ext4fs_root->diropen, &fdiro,
c7e1ef00:	ebffffd4 	bl	c7e1ee58 <ext4fs_find_file>
				  FILETYPE_REG);
	if (status == 0)
c7e1ef04:	e3500000 	cmp	r0, #0	; 0x0
c7e1ef08:	0a00000e 	beq	c7e1ef48 <ext4fs_open+0x74>
		goto fail;

	if (!fdiro->inode_read) {
c7e1ef0c:	e59d1004 	ldr	r1, [sp, #4]
c7e1ef10:	e5913088 	ldr	r3, [r1, #136]
c7e1ef14:	e3530000 	cmp	r3, #0	; 0x0
c7e1ef18:	1a000005 	bne	c7e1ef34 <ext4fs_open+0x60>
		status = ext4fs_read_inode(fdiro->data, fdiro->ino,
c7e1ef1c:	e2812004 	add	r2, r1, #4	; 0x4
c7e1ef20:	e5910000 	ldr	r0, [r1]
c7e1ef24:	e5911084 	ldr	r1, [r1, #132]
c7e1ef28:	ebfffbe2 	bl	c7e1deb8 <ext4fs_read_inode>
				&fdiro->inode);
		if (status == 0)
c7e1ef2c:	e3500000 	cmp	r0, #0	; 0x0
c7e1ef30:	0a000004 	beq	c7e1ef48 <ext4fs_open+0x74>
			goto fail;
	}
	len = __le32_to_cpu(fdiro->inode.size);
c7e1ef34:	e59d2004 	ldr	r2, [sp, #4]
	ext4fs_file = fdiro;
c7e1ef38:	e59f3024 	ldr	r3, [pc, #36]	; c7e1ef64 <ext4fs_open+0x90>
		status = ext4fs_read_inode(fdiro->data, fdiro->ino,
				&fdiro->inode);
		if (status == 0)
			goto fail;
	}
	len = __le32_to_cpu(fdiro->inode.size);
c7e1ef3c:	e5920008 	ldr	r0, [r2, #8]
	ext4fs_file = fdiro;
c7e1ef40:	e583201c 	str	r2, [r3, #28]
c7e1ef44:	ea000005 	b	c7e1ef60 <ext4fs_open+0x8c>

	return len;
fail:
	ext4fs_free_node(fdiro, &ext4fs_root->diropen);
c7e1ef48:	e59f3014 	ldr	r3, [pc, #20]	; c7e1ef64 <ext4fs_open+0x90>
c7e1ef4c:	e59d0004 	ldr	r0, [sp, #4]
c7e1ef50:	e5931000 	ldr	r1, [r3]
c7e1ef54:	e28110d0 	add	r1, r1, #208	; 0xd0
c7e1ef58:	ebfffbb1 	bl	c7e1de24 <ext4fs_free_node>
c7e1ef5c:	e3e00000 	mvn	r0, #0	; 0x0

	return -1;
}
c7e1ef60:	e8bd801c 	pop	{r2, r3, r4, pc}
c7e1ef64:	c7e42248 	.word	0xc7e42248

c7e1ef68 <ext4fs_devread>:
	part_offset = info->start;
	get_fs()->total_sect = (info->size * info->blksz) / SECTOR_SIZE;
}

int ext4fs_devread(int sector, int byte_offset, int byte_len, char *buf)
{
c7e1ef68:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	ALLOC_CACHE_ALIGN_BUFFER(char, sec_buf, SECTOR_SIZE);
	unsigned block_len;

	/* Check partition boundaries */
	if ((sector < 0)
c7e1ef6c:	e3500000 	cmp	r0, #0	; 0x0
	part_offset = info->start;
	get_fs()->total_sect = (info->size * info->blksz) / SECTOR_SIZE;
}

int ext4fs_devread(int sector, int byte_offset, int byte_len, char *buf)
{
c7e1ef70:	e24ddd12 	sub	sp, sp, #1152	; 0x480
c7e1ef74:	e1a06002 	mov	r6, r2
c7e1ef78:	e1a0b003 	mov	fp, r3
	ALLOC_CACHE_ALIGN_BUFFER(char, sec_buf, SECTOR_SIZE);
	unsigned block_len;

	/* Check partition boundaries */
	if ((sector < 0)
c7e1ef7c:	ba000007 	blt	c7e1efa0 <ext4fs_devread+0x38>
c7e1ef80:	e59f41bc 	ldr	r4, [pc, #444]	; c7e1f144 <ext4fs_devread+0x1dc>
c7e1ef84:	e2413001 	sub	r3, r1, #1	; 0x1
c7e1ef88:	e594c000 	ldr	ip, [r4]
c7e1ef8c:	e0833002 	add	r3, r3, r2
c7e1ef90:	e59c2004 	ldr	r2, [ip, #4]
c7e1ef94:	e08034c3 	add	r3, r0, r3, asr #9
c7e1ef98:	e1530002 	cmp	r3, r2
c7e1ef9c:	3a000004 	bcc	c7e1efb4 <ext4fs_devread+0x4c>
	    || ((sector + ((byte_offset + byte_len - 1) >> SECTOR_BITS)) >=
		part_info->size)) {
		printf("%s read outside partition %d\n", __func__, sector);
c7e1efa0:	e1a02000 	mov	r2, r0
c7e1efa4:	e59f119c 	ldr	r1, [pc, #412]	; c7e1f148 <ext4fs_devread+0x1e0>
c7e1efa8:	e59f019c 	ldr	r0, [pc, #412]	; c7e1f14c <ext4fs_devread+0x1e4>
c7e1efac:	ebffa6a9 	bl	c7e08a58 <printf>
c7e1efb0:	ea000058 	b	c7e1f118 <ext4fs_devread+0x1b0>
	sector += byte_offset >> SECTOR_BITS;
	byte_offset &= SECTOR_SIZE - 1;

	debug(" <%d, %d, %d>\n", sector, byte_offset, byte_len);

	if (ext4fs_block_dev_desc == NULL) {
c7e1efb4:	e5944004 	ldr	r4, [r4, #4]
c7e1efb8:	e3540000 	cmp	r4, #0	; 0x0
c7e1efbc:	1a000002 	bne	c7e1efcc <ext4fs_devread+0x64>
		printf("** Invalid Block Device Descriptor (NULL)\n");
c7e1efc0:	e59f0188 	ldr	r0, [pc, #392]	; c7e1f150 <ext4fs_devread+0x1e8>
c7e1efc4:	ebffa6a3 	bl	c7e08a58 <printf>
c7e1efc8:	ea000058 	b	c7e1f130 <ext4fs_devread+0x1c8>
		return 0;
	}

	/* Get the read to the beginning of a partition */
	sector += byte_offset >> SECTOR_BITS;
	byte_offset &= SECTOR_SIZE - 1;
c7e1efcc:	e1a05b81 	lsl	r5, r1, #23
c7e1efd0:	e1a05ba5 	lsr	r5, r5, #23
	get_fs()->total_sect = (info->size * info->blksz) / SECTOR_SIZE;
}

int ext4fs_devread(int sector, int byte_offset, int byte_len, char *buf)
{
	ALLOC_CACHE_ALIGN_BUFFER(char, sec_buf, SECTOR_SIZE);
c7e1efd4:	e28d3d0a 	add	r3, sp, #640	; 0x280
	if (ext4fs_block_dev_desc == NULL) {
		printf("** Invalid Block Device Descriptor (NULL)\n");
		return 0;
	}

	if (byte_offset != 0) {
c7e1efd8:	e3550000 	cmp	r5, #0	; 0x0
	get_fs()->total_sect = (info->size * info->blksz) / SECTOR_SIZE;
}

int ext4fs_devread(int sector, int byte_offset, int byte_len, char *buf)
{
	ALLOC_CACHE_ALIGN_BUFFER(char, sec_buf, SECTOR_SIZE);
c7e1efdc:	e3c3903f 	bic	r9, r3, #63	; 0x3f
		printf("%s read outside partition %d\n", __func__, sector);
		return 0;
	}

	/* Get the read to the beginning of a partition */
	sector += byte_offset >> SECTOR_BITS;
c7e1efe0:	e080a4c1 	add	sl, r0, r1, asr #9
	if (ext4fs_block_dev_desc == NULL) {
		printf("** Invalid Block Device Descriptor (NULL)\n");
		return 0;
	}

	if (byte_offset != 0) {
c7e1efe4:	0a000015 	beq	c7e1f040 <ext4fs_devread+0xd8>
		/* read first part which isn't aligned with start of sector */
		if (ext4fs_block_dev_desc->
c7e1efe8:	e59c1000 	ldr	r1, [ip]
c7e1efec:	e5940004 	ldr	r0, [r4, #4]
c7e1eff0:	e08a1001 	add	r1, sl, r1
c7e1eff4:	e3a02001 	mov	r2, #1	; 0x1
c7e1eff8:	e1a03009 	mov	r3, r9
c7e1effc:	e1a0e00f 	mov	lr, pc
c7e1f000:	e594f060 	ldr	pc, [r4, #96]
c7e1f004:	e3500001 	cmp	r0, #1	; 0x1
c7e1f008:	0a000002 	beq	c7e1f018 <ext4fs_devread+0xb0>
		    block_read(ext4fs_block_dev_desc->dev,
				part_info->start + sector, 1,
				(unsigned long *) sec_buf) != 1) {
			printf(" ** ext2fs_devread() read error **\n");
c7e1f00c:	e59f0140 	ldr	r0, [pc, #320]	; c7e1f154 <ext4fs_devread+0x1ec>
c7e1f010:	ebffa690 	bl	c7e08a58 <printf>
c7e1f014:	ea00003f 	b	c7e1f118 <ext4fs_devread+0x1b0>
			return 0;
		}
		memcpy(buf, sec_buf + byte_offset,
			min(SECTOR_SIZE - byte_offset, byte_len));
c7e1f018:	e2654c02 	rsb	r4, r5, #512	; 0x200
c7e1f01c:	e1540006 	cmp	r4, r6
c7e1f020:	a1a04006 	movge	r4, r6
				part_info->start + sector, 1,
				(unsigned long *) sec_buf) != 1) {
			printf(" ** ext2fs_devread() read error **\n");
			return 0;
		}
		memcpy(buf, sec_buf + byte_offset,
c7e1f024:	e1a0000b 	mov	r0, fp
c7e1f028:	e0891005 	add	r1, r9, r5
c7e1f02c:	e1a02004 	mov	r2, r4
c7e1f030:	eb000f01 	bl	c7e22c3c <memcpy>
			min(SECTOR_SIZE - byte_offset, byte_len));
		buf += min(SECTOR_SIZE - byte_offset, byte_len);
		byte_len -= min(SECTOR_SIZE - byte_offset, byte_len);
c7e1f034:	e0646006 	rsb	r6, r4, r6
			printf(" ** ext2fs_devread() read error **\n");
			return 0;
		}
		memcpy(buf, sec_buf + byte_offset,
			min(SECTOR_SIZE - byte_offset, byte_len));
		buf += min(SECTOR_SIZE - byte_offset, byte_len);
c7e1f038:	e08bb004 	add	fp, fp, r4
		byte_len -= min(SECTOR_SIZE - byte_offset, byte_len);
		sector++;
c7e1f03c:	e28aa001 	add	sl, sl, #1	; 0x1
	}

	if (byte_len == 0)
c7e1f040:	e3560000 	cmp	r6, #0	; 0x0
c7e1f044:	0a00003b 	beq	c7e1f138 <ext4fs_devread+0x1d0>
		return 1;

	/* read sector aligned part */
	block_len = byte_len & ~(SECTOR_SIZE - 1);
c7e1f048:	e3c65f7f 	bic	r5, r6, #508	; 0x1fc
c7e1f04c:	e3c55003 	bic	r5, r5, #3	; 0x3

	if (block_len == 0) {
c7e1f050:	e3550000 	cmp	r5, #0	; 0x0
c7e1f054:	e59f70e8 	ldr	r7, [pc, #232]	; c7e1f144 <ext4fs_devread+0x1dc>
c7e1f058:	1a000010 	bne	c7e1f0a0 <ext4fs_devread+0x138>
		ALLOC_CACHE_ALIGN_BUFFER(u8, p, SECTOR_SIZE);

		block_len = SECTOR_SIZE;
		ext4fs_block_dev_desc->block_read(ext4fs_block_dev_desc->dev,
c7e1f05c:	e5973000 	ldr	r3, [r7]

	/* read sector aligned part */
	block_len = byte_len & ~(SECTOR_SIZE - 1);

	if (block_len == 0) {
		ALLOC_CACHE_ALIGN_BUFFER(u8, p, SECTOR_SIZE);
c7e1f060:	e28d4050 	add	r4, sp, #80	; 0x50

		block_len = SECTOR_SIZE;
		ext4fs_block_dev_desc->block_read(ext4fs_block_dev_desc->dev,
c7e1f064:	e5931000 	ldr	r1, [r3]
c7e1f068:	e597c004 	ldr	ip, [r7, #4]

	/* read sector aligned part */
	block_len = byte_len & ~(SECTOR_SIZE - 1);

	if (block_len == 0) {
		ALLOC_CACHE_ALIGN_BUFFER(u8, p, SECTOR_SIZE);
c7e1f06c:	e244400f 	sub	r4, r4, #15	; 0xf
c7e1f070:	e3c4403f 	bic	r4, r4, #63	; 0x3f

		block_len = SECTOR_SIZE;
		ext4fs_block_dev_desc->block_read(ext4fs_block_dev_desc->dev,
c7e1f074:	e08a1001 	add	r1, sl, r1
c7e1f078:	e1a03004 	mov	r3, r4
c7e1f07c:	e59c0004 	ldr	r0, [ip, #4]
c7e1f080:	e3a02001 	mov	r2, #1	; 0x1
c7e1f084:	e1a0e00f 	mov	lr, pc
c7e1f088:	e59cf060 	ldr	pc, [ip, #96]
						  part_info->start + sector,
						  1, (unsigned long *)p);
		memcpy(buf, p, byte_len);
c7e1f08c:	e1a0000b 	mov	r0, fp
c7e1f090:	e1a01004 	mov	r1, r4
c7e1f094:	e1a02006 	mov	r2, r6
c7e1f098:	eb000ee7 	bl	c7e22c3c <memcpy>
c7e1f09c:	ea000025 	b	c7e1f138 <ext4fs_devread+0x1d0>
		return 1;
	}

	if (ext4fs_block_dev_desc->block_read(ext4fs_block_dev_desc->dev,
c7e1f0a0:	e8971008 	ldm	r7, {r3, ip}
c7e1f0a4:	e5931000 	ldr	r1, [r3]
c7e1f0a8:	e1a044a5 	lsr	r4, r5, #9
c7e1f0ac:	e1a02004 	mov	r2, r4
c7e1f0b0:	e08a1001 	add	r1, sl, r1
c7e1f0b4:	e59c0004 	ldr	r0, [ip, #4]
c7e1f0b8:	e1a0300b 	mov	r3, fp
c7e1f0bc:	e1a0e00f 	mov	lr, pc
c7e1f0c0:	e59cf060 	ldr	pc, [ip, #96]
c7e1f0c4:	e1500004 	cmp	r0, r4
c7e1f0c8:	e1a02000 	mov	r2, r0
					       part_info->start + sector,
					       block_len / SECTOR_SIZE,
					       (unsigned long *) buf) !=
					       block_len / SECTOR_SIZE) {
		printf(" ** %s read error - block\n", __func__);
c7e1f0cc:	159f0084 	ldrne	r0, [pc, #132]	; c7e1f158 <ext4fs_devread+0x1f0>
						  1, (unsigned long *)p);
		memcpy(buf, p, byte_len);
		return 1;
	}

	if (ext4fs_block_dev_desc->block_read(ext4fs_block_dev_desc->dev,
c7e1f0d0:	1a00000e 	bne	c7e1f110 <ext4fs_devread+0x1a8>
	block_len = byte_len & ~(SECTOR_SIZE - 1);
	buf += block_len;
	byte_len -= block_len;
	sector += block_len / SECTOR_SIZE;

	if (byte_len != 0) {
c7e1f0d4:	e0566005 	subs	r6, r6, r5
c7e1f0d8:	0a000016 	beq	c7e1f138 <ext4fs_devread+0x1d0>
		/* read rest of data which are not in whole sector */
		if (ext4fs_block_dev_desc->
c7e1f0dc:	e8971008 	ldm	r7, {r3, ip}
c7e1f0e0:	e5931000 	ldr	r1, [r3]
c7e1f0e4:	e59c0004 	ldr	r0, [ip, #4]
c7e1f0e8:	e08a1001 	add	r1, sl, r1
c7e1f0ec:	e0811002 	add	r1, r1, r2
c7e1f0f0:	e1a03009 	mov	r3, r9
c7e1f0f4:	e3a02001 	mov	r2, #1	; 0x1
c7e1f0f8:	e1a0e00f 	mov	lr, pc
c7e1f0fc:	e59cf060 	ldr	pc, [ip, #96]
c7e1f100:	e3500001 	cmp	r0, #1	; 0x1
c7e1f104:	e1a04000 	mov	r4, r0
c7e1f108:	0a000004 	beq	c7e1f120 <ext4fs_devread+0x1b8>
		    block_read(ext4fs_block_dev_desc->dev,
				part_info->start + sector, 1,
				(unsigned long *) sec_buf) != 1) {
			printf("* %s read error - last part\n", __func__);
c7e1f10c:	e59f0048 	ldr	r0, [pc, #72]	; c7e1f15c <ext4fs_devread+0x1f4>
c7e1f110:	e59f1030 	ldr	r1, [pc, #48]	; c7e1f148 <ext4fs_devread+0x1e0>
c7e1f114:	ebffa64f 	bl	c7e08a58 <printf>
c7e1f118:	e3a00000 	mov	r0, #0	; 0x0
c7e1f11c:	ea000006 	b	c7e1f13c <ext4fs_devread+0x1d4>
			return 0;
		}
		memcpy(buf, sec_buf, byte_len);
c7e1f120:	e08b0005 	add	r0, fp, r5
c7e1f124:	e1a01009 	mov	r1, r9
c7e1f128:	e1a02006 	mov	r2, r6
c7e1f12c:	eb000ec2 	bl	c7e22c3c <memcpy>
c7e1f130:	e1a00004 	mov	r0, r4
c7e1f134:	ea000000 	b	c7e1f13c <ext4fs_devread+0x1d4>
c7e1f138:	e3a00001 	mov	r0, #1	; 0x1
	}
	return 1;
}
c7e1f13c:	e28ddd12 	add	sp, sp, #1152	; 0x480
c7e1f140:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1f144:	c7e42270 	.word	0xc7e42270
c7e1f148:	c7e2dd3d 	.word	0xc7e2dd3d
c7e1f14c:	c7e3440e 	.word	0xc7e3440e
c7e1f150:	c7e3442c 	.word	0xc7e3442c
c7e1f154:	c7e34457 	.word	0xc7e34457
c7e1f158:	c7e3447b 	.word	0xc7e3447b
c7e1f15c:	c7e34496 	.word	0xc7e34496

c7e1f160 <ext4fs_set_blk_dev>:
static block_dev_desc_t *ext4fs_block_dev_desc;
static disk_partition_t *part_info;

void ext4fs_set_blk_dev(block_dev_desc_t *rbdd, disk_partition_t *info)
{
	ext4fs_block_dev_desc = rbdd;
c7e1f160:	e59f3030 	ldr	r3, [pc, #48]	; c7e1f198 <ext4fs_set_blk_dev+0x38>
	part_info = info;
	part_offset = info->start;
c7e1f164:	e5912000 	ldr	r2, [r1]

static block_dev_desc_t *ext4fs_block_dev_desc;
static disk_partition_t *part_info;

void ext4fs_set_blk_dev(block_dev_desc_t *rbdd, disk_partition_t *info)
{
c7e1f168:	e92d4010 	push	{r4, lr}
	ext4fs_block_dev_desc = rbdd;
	part_info = info;
	part_offset = info->start;
c7e1f16c:	e9830005 	stmib	r3, {r0, r2}
static disk_partition_t *part_info;

void ext4fs_set_blk_dev(block_dev_desc_t *rbdd, disk_partition_t *info)
{
	ext4fs_block_dev_desc = rbdd;
	part_info = info;
c7e1f170:	e5831000 	str	r1, [r3]

static block_dev_desc_t *ext4fs_block_dev_desc;
static disk_partition_t *part_info;

void ext4fs_set_blk_dev(block_dev_desc_t *rbdd, disk_partition_t *info)
{
c7e1f174:	e1a04001 	mov	r4, r1
	ext4fs_block_dev_desc = rbdd;
	part_info = info;
	part_offset = info->start;
	get_fs()->total_sect = (info->size * info->blksz) / SECTOR_SIZE;
c7e1f178:	ebfffa8a 	bl	c7e1dba8 <get_fs>
c7e1f17c:	e994000c 	ldmib	r4, {r2, r3}
c7e1f180:	e0030392 	mul	r3, r2, r3
c7e1f184:	e3a02000 	mov	r2, #0	; 0x0
c7e1f188:	e1a034a3 	lsr	r3, r3, #9
c7e1f18c:	e5802004 	str	r2, [r0, #4]
c7e1f190:	e5803000 	str	r3, [r0]
}
c7e1f194:	e8bd8010 	pop	{r4, pc}
c7e1f198:	c7e42270 	.word	0xc7e42270

c7e1f19c <downcase>:

/*
 * Convert a string to lowercase.
 */
static void downcase(char *str)
{
c7e1f19c:	e3a02000 	mov	r2, #0	; 0x0
c7e1f1a0:	ea000002 	b	c7e1f1b0 <downcase+0x14>
	while (*str != '\0') {
		TOLOWER(*str);
c7e1f1a4:	e3510019 	cmp	r1, #25	; 0x19
c7e1f1a8:	97c03002 	strbls	r3, [r0, r2]
c7e1f1ac:	e2822001 	add	r2, r2, #1	; 0x1
/*
 * Convert a string to lowercase.
 */
static void downcase(char *str)
{
	while (*str != '\0') {
c7e1f1b0:	e7d03002 	ldrb	r3, [r0, r2]
c7e1f1b4:	e3530000 	cmp	r3, #0	; 0x0
		TOLOWER(*str);
c7e1f1b8:	e2431041 	sub	r1, r3, #65	; 0x41
c7e1f1bc:	e2833020 	add	r3, r3, #32	; 0x20
/*
 * Convert a string to lowercase.
 */
static void downcase(char *str)
{
	while (*str != '\0') {
c7e1f1c0:	1afffff7 	bne	c7e1f1a4 <downcase+0x8>
		TOLOWER(*str);
		str++;
	}
}
c7e1f1c4:	e12fff1e 	bx	lr

c7e1f1c8 <disk_read>:
#define DOS_BOOT_MAGIC_OFFSET	0x1fe
#define DOS_FS_TYPE_OFFSET	0x36
#define DOS_FS32_TYPE_OFFSET	0x52

static int disk_read(__u32 block, __u32 nr_blocks, void *buf)
{
c7e1f1c8:	e92d4070 	push	{r4, r5, r6, lr}
	if (!cur_dev || !cur_dev->block_read)
c7e1f1cc:	e59f6040 	ldr	r6, [pc, #64]	; c7e1f214 <disk_read+0x4c>
#define DOS_BOOT_MAGIC_OFFSET	0x1fe
#define DOS_FS_TYPE_OFFSET	0x36
#define DOS_FS32_TYPE_OFFSET	0x52

static int disk_read(__u32 block, __u32 nr_blocks, void *buf)
{
c7e1f1d0:	e1a05000 	mov	r5, r0
	if (!cur_dev || !cur_dev->block_read)
c7e1f1d4:	e5960000 	ldr	r0, [r6]
#define DOS_BOOT_MAGIC_OFFSET	0x1fe
#define DOS_FS_TYPE_OFFSET	0x36
#define DOS_FS32_TYPE_OFFSET	0x52

static int disk_read(__u32 block, __u32 nr_blocks, void *buf)
{
c7e1f1d8:	e1a04001 	mov	r4, r1
	if (!cur_dev || !cur_dev->block_read)
c7e1f1dc:	e3500000 	cmp	r0, #0	; 0x0
#define DOS_BOOT_MAGIC_OFFSET	0x1fe
#define DOS_FS_TYPE_OFFSET	0x36
#define DOS_FS32_TYPE_OFFSET	0x52

static int disk_read(__u32 block, __u32 nr_blocks, void *buf)
{
c7e1f1e0:	e1a03002 	mov	r3, r2
	if (!cur_dev || !cur_dev->block_read)
c7e1f1e4:	0a000008 	beq	c7e1f20c <disk_read+0x44>
c7e1f1e8:	e590c060 	ldr	ip, [r0, #96]
c7e1f1ec:	e35c0000 	cmp	ip, #0	; 0x0
c7e1f1f0:	0a000005 	beq	c7e1f20c <disk_read+0x44>
		return -1;

	return cur_dev->block_read(cur_dev->dev,
c7e1f1f4:	e5961004 	ldr	r1, [r6, #4]
c7e1f1f8:	e1a02004 	mov	r2, r4
c7e1f1fc:	e0851001 	add	r1, r5, r1
c7e1f200:	e5900004 	ldr	r0, [r0, #4]
c7e1f204:	e12fff3c 	blx	ip
c7e1f208:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1f20c:	e3e00000 	mvn	r0, #0	; 0x0
			cur_part_info.start + block, nr_blocks, buf);
}
c7e1f210:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e1f214:	c7e42280 	.word	0xc7e42280

c7e1f218 <dirdelim>:
/*
 * Get the first occurence of a directory delimiter ('/' or '\') in a string.
 * Return index into string if found, -1 otherwise.
 */
static int dirdelim(char *str)
{
c7e1f218:	e1a02000 	mov	r2, r0
c7e1f21c:	ea000005 	b	c7e1f238 <dirdelim+0x20>
	char *start = str;

	while (*str != '\0') {
		if (ISDIRDELIM(*str))
c7e1f220:	e353005c 	cmp	r3, #92	; 0x5c
c7e1f224:	1353002f 	cmpne	r3, #47	; 0x2f
c7e1f228:	1a000001 	bne	c7e1f234 <dirdelim+0x1c>
			return str - start;
c7e1f22c:	e0620000 	rsb	r0, r2, r0
c7e1f230:	e12fff1e 	bx	lr
		str++;
c7e1f234:	e2800001 	add	r0, r0, #1	; 0x1
 */
static int dirdelim(char *str)
{
	char *start = str;

	while (*str != '\0') {
c7e1f238:	e5d03000 	ldrb	r3, [r0]
c7e1f23c:	e3530000 	cmp	r3, #0	; 0x0
c7e1f240:	1afffff6 	bne	c7e1f220 <dirdelim+0x8>
c7e1f244:	e3e00000 	mvn	r0, #0	; 0x0
		if (ISDIRDELIM(*str))
			return str - start;
		str++;
	}
	return -1;
}
c7e1f248:	e12fff1e 	bx	lr

c7e1f24c <get_fatent>:
	__u32 bufnum;
	__u32 off16, offset;
	__u32 ret = 0x00;
	__u16 val1, val2;

	switch (mydata->fatsize) {
c7e1f24c:	e5903004 	ldr	r3, [r0, #4]
/*
 * Get the entry at index 'entry' in a FAT (12/16/32) table.
 * On failure 0x00 is returned.
 */
static __u32 get_fatent(fsdata *mydata, __u32 entry)
{
c7e1f250:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	__u32 bufnum;
	__u32 off16, offset;
	__u32 ret = 0x00;
	__u16 val1, val2;

	switch (mydata->fatsize) {
c7e1f254:	e3530010 	cmp	r3, #16	; 0x10
/*
 * Get the entry at index 'entry' in a FAT (12/16/32) table.
 * On failure 0x00 is returned.
 */
static __u32 get_fatent(fsdata *mydata, __u32 entry)
{
c7e1f258:	e1a05000 	mov	r5, r0
c7e1f25c:	e1a07001 	mov	r7, r1
	__u32 bufnum;
	__u32 off16, offset;
	__u32 ret = 0x00;
	__u16 val1, val2;

	switch (mydata->fatsize) {
c7e1f260:	0a000009 	beq	c7e1f28c <get_fatent+0x40>
c7e1f264:	e3530020 	cmp	r3, #32	; 0x20
c7e1f268:	0a000002 	beq	c7e1f278 <get_fatent+0x2c>
c7e1f26c:	e353000c 	cmp	r3, #12	; 0xc
c7e1f270:	1a000056 	bne	c7e1f3d0 <get_fatent+0x184>
c7e1f274:	ea000009 	b	c7e1f2a0 <get_fatent+0x54>
	case 32:
		bufnum = entry / FAT32BUFSIZE;
c7e1f278:	e1d021b4 	ldrh	r2, [r0, #20]
c7e1f27c:	e3a03006 	mov	r3, #6	; 0x6
c7e1f280:	e0040293 	mul	r4, r3, r2
c7e1f284:	e1a04144 	asr	r4, r4, #2
c7e1f288:	ea000002 	b	c7e1f298 <get_fatent+0x4c>
		offset = entry - bufnum * FAT32BUFSIZE;
		break;
	case 16:
		bufnum = entry / FAT16BUFSIZE;
c7e1f28c:	e1d021b4 	ldrh	r2, [r0, #20]
c7e1f290:	e3a03003 	mov	r3, #3	; 0x3
c7e1f294:	e0040293 	mul	r4, r3, r2
c7e1f298:	e1a00007 	mov	r0, r7
c7e1f29c:	ea000002 	b	c7e1f2ac <get_fatent+0x60>
		offset = entry - bufnum * FAT16BUFSIZE;
		break;
	case 12:
		bufnum = entry / FAT12BUFSIZE;
c7e1f2a0:	e1d041b4 	ldrh	r4, [r0, #20]
c7e1f2a4:	e1a00001 	mov	r0, r1
c7e1f2a8:	e1a04104 	lsl	r4, r4, #2
c7e1f2ac:	e1a01004 	mov	r1, r4
c7e1f2b0:	eb002c94 	bl	c7e2a508 <__udivsi3>
		offset = entry - bufnum * FAT12BUFSIZE;
c7e1f2b4:	e0030490 	mul	r3, r0, r4
c7e1f2b8:	e0634007 	rsb	r4, r3, r7

	debug("FAT%d: entry: 0x%04x = %d, offset: 0x%04x = %d\n",
	       mydata->fatsize, entry, entry, offset, offset);

	/* Read a new block of FAT entries into the cache. */
	if (bufnum != mydata->fatbufnum) {
c7e1f2bc:	e595301c 	ldr	r3, [r5, #28]
	case 16:
		bufnum = entry / FAT16BUFSIZE;
		offset = entry - bufnum * FAT16BUFSIZE;
		break;
	case 12:
		bufnum = entry / FAT12BUFSIZE;
c7e1f2c0:	e1a06000 	mov	r6, r0

	debug("FAT%d: entry: 0x%04x = %d, offset: 0x%04x = %d\n",
	       mydata->fatsize, entry, entry, offset, offset);

	/* Read a new block of FAT entries into the cache. */
	if (bufnum != mydata->fatbufnum) {
c7e1f2c4:	e1500003 	cmp	r0, r3
c7e1f2c8:	0a00000d 	beq	c7e1f304 <get_fatent+0xb8>
		__u32 getsize = FATBUFBLOCKS;
		__u8 *bufptr = mydata->fatbuf;
		__u32 fatlength = mydata->fatlength;
		__u32 startblock = bufnum * FATBUFBLOCKS;
c7e1f2cc:	e3a00006 	mov	r0, #6	; 0x6
c7e1f2d0:	e00c0690 	mul	ip, r0, r6

	/* Read a new block of FAT entries into the cache. */
	if (bufnum != mydata->fatbufnum) {
		__u32 getsize = FATBUFBLOCKS;
		__u8 *bufptr = mydata->fatbuf;
		__u32 fatlength = mydata->fatlength;
c7e1f2d4:	e5951008 	ldr	r1, [r5, #8]
		__u32 startblock = bufnum * FATBUFBLOCKS;

		if (startblock + getsize > fatlength)
c7e1f2d8:	e08c3000 	add	r3, ip, r0
c7e1f2dc:	e1530001 	cmp	r3, r1
c7e1f2e0:	91a01000 	movls	r1, r0
			getsize = fatlength - startblock;

		startblock += mydata->fat_sect;	/* Offset from start of disk */

		if (disk_read(startblock, getsize, bufptr) < 0) {
c7e1f2e4:	e1d500bc 	ldrh	r0, [r5, #12]
		__u8 *bufptr = mydata->fatbuf;
		__u32 fatlength = mydata->fatlength;
		__u32 startblock = bufnum * FATBUFBLOCKS;

		if (startblock + getsize > fatlength)
			getsize = fatlength - startblock;
c7e1f2e8:	806c1001 	rsbhi	r1, ip, r1
	       mydata->fatsize, entry, entry, offset, offset);

	/* Read a new block of FAT entries into the cache. */
	if (bufnum != mydata->fatbufnum) {
		__u32 getsize = FATBUFBLOCKS;
		__u8 *bufptr = mydata->fatbuf;
c7e1f2ec:	e5952000 	ldr	r2, [r5]
		if (startblock + getsize > fatlength)
			getsize = fatlength - startblock;

		startblock += mydata->fat_sect;	/* Offset from start of disk */

		if (disk_read(startblock, getsize, bufptr) < 0) {
c7e1f2f0:	e08c0000 	add	r0, ip, r0
c7e1f2f4:	ebffffb3 	bl	c7e1f1c8 <disk_read>
c7e1f2f8:	e3500000 	cmp	r0, #0	; 0x0
c7e1f2fc:	ba000033 	blt	c7e1f3d0 <get_fatent+0x184>
			debug("Error reading FAT blocks\n");
			return ret;
		}
		mydata->fatbufnum = bufnum;
c7e1f300:	e585601c 	str	r6, [r5, #28]
	}

	/* Get the actual entry from the table */
	switch (mydata->fatsize) {
c7e1f304:	e5953004 	ldr	r3, [r5, #4]
c7e1f308:	e3530010 	cmp	r3, #16	; 0x10
	case 32:
		ret = FAT2CPU32(((__u32 *) mydata->fatbuf)[offset]);
		break;
	case 16:
		ret = FAT2CPU16(((__u16 *) mydata->fatbuf)[offset]);
c7e1f30c:	05952000 	ldreq	r2, [r5]
c7e1f310:	01a03084 	lsleq	r3, r4, #1
c7e1f314:	019200b3 	ldrheq	r0, [r2, r3]
		}
		mydata->fatbufnum = bufnum;
	}

	/* Get the actual entry from the table */
	switch (mydata->fatsize) {
c7e1f318:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
c7e1f31c:	e3530020 	cmp	r3, #32	; 0x20
	case 32:
		ret = FAT2CPU32(((__u32 *) mydata->fatbuf)[offset]);
c7e1f320:	05953000 	ldreq	r3, [r5]
c7e1f324:	07930104 	ldreq	r0, [r3, r4, lsl #2]
		}
		mydata->fatbufnum = bufnum;
	}

	/* Get the actual entry from the table */
	switch (mydata->fatsize) {
c7e1f328:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
c7e1f32c:	e353000c 	cmp	r3, #12	; 0xc
c7e1f330:	1a000026 	bne	c7e1f3d0 <get_fatent+0x184>
		break;
	case 16:
		ret = FAT2CPU16(((__u16 *) mydata->fatbuf)[offset]);
		break;
	case 12:
		off16 = (offset * 3) / 4;
c7e1f334:	e3a03003 	mov	r3, #3	; 0x3
c7e1f338:	e0020493 	mul	r2, r3, r4

		switch (offset & 0x3) {
c7e1f33c:	e0043003 	and	r3, r4, r3
		break;
	case 16:
		ret = FAT2CPU16(((__u16 *) mydata->fatbuf)[offset]);
		break;
	case 12:
		off16 = (offset * 3) / 4;
c7e1f340:	e1a0c122 	lsr	ip, r2, #2

		switch (offset & 0x3) {
c7e1f344:	e3530003 	cmp	r3, #3	; 0x3
c7e1f348:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e1f34c:	ea00001f 	b	c7e1f3d0 <get_fatent+0x184>
c7e1f350:	c7e1f360 	.word	0xc7e1f360
c7e1f354:	c7e1f378 	.word	0xc7e1f378
c7e1f358:	c7e1f398 	.word	0xc7e1f398
c7e1f35c:	c7e1f3bc 	.word	0xc7e1f3bc
		case 0:
			ret = FAT2CPU16(((__u16 *) mydata->fatbuf)[off16]);
c7e1f360:	e5953000 	ldr	r3, [r5]
c7e1f364:	e1a0208c 	lsl	r2, ip, #1
c7e1f368:	e19330b2 	ldrh	r3, [r3, r2]
			ret &= 0xfff;
c7e1f36c:	e1a00a03 	lsl	r0, r3, #20
c7e1f370:	e1a00a20 	lsr	r0, r0, #20
c7e1f374:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			break;
		case 1:
			val1 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16]);
c7e1f378:	e5953000 	ldr	r3, [r5]
c7e1f37c:	e1a0208c 	lsl	r2, ip, #1
			val1 &= 0xf000;
			val2 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16 + 1]);
c7e1f380:	e083108c 	add	r1, r3, ip, lsl #1
		case 0:
			ret = FAT2CPU16(((__u16 *) mydata->fatbuf)[off16]);
			ret &= 0xfff;
			break;
		case 1:
			val1 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16]);
c7e1f384:	e19330b2 	ldrh	r3, [r3, r2]
			val1 &= 0xf000;
			val2 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16 + 1]);
			val2 &= 0x00ff;
			ret = (val2 << 4) | (val1 >> 12);
c7e1f388:	e5d12002 	ldrb	r2, [r1, #2]
c7e1f38c:	e1a03623 	lsr	r3, r3, #12
c7e1f390:	e1830202 	orr	r0, r3, r2, lsl #4
c7e1f394:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			break;
		case 2:
			val1 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16]);
c7e1f398:	e5953000 	ldr	r3, [r5]
c7e1f39c:	e1a0208c 	lsl	r2, ip, #1
			val1 &= 0xff00;
			val2 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16 + 1]);
c7e1f3a0:	e083108c 	add	r1, r3, ip, lsl #1
			val2 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16 + 1]);
			val2 &= 0x00ff;
			ret = (val2 << 4) | (val1 >> 12);
			break;
		case 2:
			val1 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16]);
c7e1f3a4:	e19320b2 	ldrh	r2, [r3, r2]
			val1 &= 0xff00;
			val2 = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16 + 1]);
c7e1f3a8:	e1d130b2 	ldrh	r3, [r1, #2]
			val2 &= 0x000f;
			ret = (val2 << 8) | (val1 >> 8);
c7e1f3ac:	e1a02422 	lsr	r2, r2, #8
c7e1f3b0:	e203300f 	and	r3, r3, #15	; 0xf
c7e1f3b4:	e1820403 	orr	r0, r2, r3, lsl #8
c7e1f3b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			break;
		case 3:
			ret = FAT2CPU16(((__u16 *)mydata->fatbuf)[off16]);
			ret = (ret & 0xfff0) >> 4;
c7e1f3bc:	e5953000 	ldr	r3, [r5]
c7e1f3c0:	e1a0208c 	lsl	r2, ip, #1
c7e1f3c4:	e19330b2 	ldrh	r3, [r3, r2]
c7e1f3c8:	e1a00223 	lsr	r0, r3, #4
c7e1f3cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e1f3d0:	e3a00000 	mov	r0, #0	; 0x0
	}
	debug("FAT%d: ret: %08x, offset: %04x\n",
	       mydata->fatsize, ret, offset);

	return ret;
}
c7e1f3d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e1f3d8 <slot2str>:
 * Extract the file name information from 'slotptr' into 'l_name',
 * starting at l_name[*idx].
 * Return 1 if terminator (zero byte) is found, 0 otherwise.
 */
static int slot2str(dir_slot *slotptr, char *l_name, int *idx)
{
c7e1f3d8:	e92d4030 	push	{r4, r5, lr}
c7e1f3dc:	e1a0c002 	mov	ip, r2
c7e1f3e0:	e1a05000 	mov	r5, r0
c7e1f3e4:	e1a00001 	mov	r0, r1
c7e1f3e8:	e3a01000 	mov	r1, #0	; 0x0
	int j;

	for (j = 0; j <= 8; j += 2) {
		l_name[*idx] = slotptr->name0_4[j];
c7e1f3ec:	e0853001 	add	r3, r5, r1
c7e1f3f0:	e5d32001 	ldrb	r2, [r3, #1]
c7e1f3f4:	e59c3000 	ldr	r3, [ip]
 */
static int slot2str(dir_slot *slotptr, char *l_name, int *idx)
{
	int j;

	for (j = 0; j <= 8; j += 2) {
c7e1f3f8:	e2811002 	add	r1, r1, #2	; 0x2
		l_name[*idx] = slotptr->name0_4[j];
c7e1f3fc:	e7c02003 	strb	r2, [r0, r3]
		if (l_name[*idx] == 0x00)
c7e1f400:	e59c3000 	ldr	r3, [ip]
			return 1;
		(*idx)++;
c7e1f404:	e2832001 	add	r2, r3, #1	; 0x1
{
	int j;

	for (j = 0; j <= 8; j += 2) {
		l_name[*idx] = slotptr->name0_4[j];
		if (l_name[*idx] == 0x00)
c7e1f408:	e7d03003 	ldrb	r3, [r0, r3]
c7e1f40c:	e3530000 	cmp	r3, #0	; 0x0
c7e1f410:	0a000022 	beq	c7e1f4a0 <slot2str+0xc8>
 */
static int slot2str(dir_slot *slotptr, char *l_name, int *idx)
{
	int j;

	for (j = 0; j <= 8; j += 2) {
c7e1f414:	e351000a 	cmp	r1, #10	; 0xa
		l_name[*idx] = slotptr->name0_4[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
c7e1f418:	e58c2000 	str	r2, [ip]
 */
static int slot2str(dir_slot *slotptr, char *l_name, int *idx)
{
	int j;

	for (j = 0; j <= 8; j += 2) {
c7e1f41c:	1afffff2 	bne	c7e1f3ec <slot2str+0x14>
c7e1f420:	e1a04005 	mov	r4, r5
c7e1f424:	e3a01000 	mov	r1, #0	; 0x0
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 10; j += 2) {
		l_name[*idx] = slotptr->name5_10[j];
c7e1f428:	e5d4200e 	ldrb	r2, [r4, #14]
c7e1f42c:	e59c3000 	ldr	r3, [ip]
		l_name[*idx] = slotptr->name0_4[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 10; j += 2) {
c7e1f430:	e2811002 	add	r1, r1, #2	; 0x2
		l_name[*idx] = slotptr->name5_10[j];
c7e1f434:	e7c02003 	strb	r2, [r0, r3]
		if (l_name[*idx] == 0x00)
c7e1f438:	e59c3000 	ldr	r3, [ip]
		l_name[*idx] = slotptr->name0_4[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 10; j += 2) {
c7e1f43c:	e2844002 	add	r4, r4, #2	; 0x2
		l_name[*idx] = slotptr->name5_10[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
c7e1f440:	e2832001 	add	r2, r3, #1	; 0x1
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 10; j += 2) {
		l_name[*idx] = slotptr->name5_10[j];
		if (l_name[*idx] == 0x00)
c7e1f444:	e7d03003 	ldrb	r3, [r0, r3]
c7e1f448:	e3530000 	cmp	r3, #0	; 0x0
c7e1f44c:	0a000013 	beq	c7e1f4a0 <slot2str+0xc8>
		l_name[*idx] = slotptr->name0_4[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 10; j += 2) {
c7e1f450:	e351000c 	cmp	r1, #12	; 0xc
		l_name[*idx] = slotptr->name5_10[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
c7e1f454:	e58c2000 	str	r2, [ip]
		l_name[*idx] = slotptr->name0_4[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 10; j += 2) {
c7e1f458:	1afffff2 	bne	c7e1f428 <slot2str+0x50>
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 2; j += 2) {
		l_name[*idx] = slotptr->name11_12[j];
c7e1f45c:	e5d5301c 	ldrb	r3, [r5, #28]
c7e1f460:	e7c03002 	strb	r3, [r0, r2]
		if (l_name[*idx] == 0x00)
c7e1f464:	e59c2000 	ldr	r2, [ip]
c7e1f468:	e7d03002 	ldrb	r3, [r0, r2]
c7e1f46c:	e3530000 	cmp	r3, #0	; 0x0
c7e1f470:	0a00000a 	beq	c7e1f4a0 <slot2str+0xc8>
			return 1;
		(*idx)++;
c7e1f474:	e2823001 	add	r3, r2, #1	; 0x1
c7e1f478:	e58c3000 	str	r3, [ip]
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 2; j += 2) {
		l_name[*idx] = slotptr->name11_12[j];
c7e1f47c:	e5d5201e 	ldrb	r2, [r5, #30]
c7e1f480:	e7c02003 	strb	r2, [r0, r3]
		if (l_name[*idx] == 0x00)
c7e1f484:	e59c2000 	ldr	r2, [ip]
c7e1f488:	e7d03002 	ldrb	r3, [r0, r2]
c7e1f48c:	e3530000 	cmp	r3, #0	; 0x0
			return 1;
		(*idx)++;
c7e1f490:	12823001 	addne	r3, r2, #1	; 0x1
c7e1f494:	158c3000 	strne	r3, [ip]
c7e1f498:	13a00000 	movne	r0, #0	; 0x0
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 2; j += 2) {
		l_name[*idx] = slotptr->name11_12[j];
		if (l_name[*idx] == 0x00)
c7e1f49c:	18bd8030 	popne	{r4, r5, pc}
		l_name[*idx] = slotptr->name5_10[j];
		if (l_name[*idx] == 0x00)
			return 1;
		(*idx)++;
	}
	for (j = 0; j <= 2; j += 2) {
c7e1f4a0:	e3a00001 	mov	r0, #1	; 0x1
			return 1;
		(*idx)++;
	}

	return 0;
}
c7e1f4a4:	e8bd8030 	pop	{r4, r5, pc}

c7e1f4a8 <mkcksum>:
	return 0;
}

/* Calculate short name checksum */
static __u8 mkcksum(const char *str)
{
c7e1f4a8:	e3a01000 	mov	r1, #0	; 0x0
c7e1f4ac:	e1a0c000 	mov	ip, r0
c7e1f4b0:	e1a00001 	mov	r0, r1
	int i;

	__u8 ret = 0;

	for (i = 0; i < 11; i++) {
		ret = (((ret & 1) << 7) | ((ret & 0xfe) >> 1)) + str[i];
c7e1f4b4:	e1a030a0 	lsr	r3, r0, #1
c7e1f4b8:	e7dc2001 	ldrb	r2, [ip, r1]
c7e1f4bc:	e1833380 	orr	r3, r3, r0, lsl #7
{
	int i;

	__u8 ret = 0;

	for (i = 0; i < 11; i++) {
c7e1f4c0:	e2811001 	add	r1, r1, #1	; 0x1
		ret = (((ret & 1) << 7) | ((ret & 0xfe) >> 1)) + str[i];
c7e1f4c4:	e0833002 	add	r3, r3, r2
{
	int i;

	__u8 ret = 0;

	for (i = 0; i < 11; i++) {
c7e1f4c8:	e351000b 	cmp	r1, #11	; 0xb
		ret = (((ret & 1) << 7) | ((ret & 0xfe) >> 1)) + str[i];
c7e1f4cc:	e20300ff 	and	r0, r3, #255	; 0xff
{
	int i;

	__u8 ret = 0;

	for (i = 0; i < 11; i++) {
c7e1f4d0:	1afffff7 	bne	c7e1f4b4 <mkcksum+0xc>
		ret = (((ret & 1) << 7) | ((ret & 0xfe) >> 1)) + str[i];
	}

	return ret;
}
c7e1f4d4:	e12fff1e 	bx	lr

c7e1f4d8 <get_name>:

/*
 * Extract zero terminated short name from a directory entry.
 */
static void get_name(dir_entry *dirent, char *s_name)
{
c7e1f4d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e1f4dc:	e1a05001 	mov	r5, r1
c7e1f4e0:	e1a06000 	mov	r6, r0
	char *ptr;

	memcpy(s_name, dirent->name, 8);
c7e1f4e4:	e1a01000 	mov	r1, r0
c7e1f4e8:	e3a02008 	mov	r2, #8	; 0x8
c7e1f4ec:	e1a00005 	mov	r0, r5
c7e1f4f0:	eb000dd1 	bl	c7e22c3c <memcpy>
	s_name[8] = '\0';
c7e1f4f4:	e3a03000 	mov	r3, #0	; 0x0
c7e1f4f8:	e5c53008 	strb	r3, [r5, #8]
c7e1f4fc:	e1a04005 	mov	r4, r5
c7e1f500:	ea000000 	b	c7e1f508 <get_name+0x30>
	ptr = s_name;
	while (*ptr && *ptr != ' ')
		ptr++;
c7e1f504:	e2844001 	add	r4, r4, #1	; 0x1
	char *ptr;

	memcpy(s_name, dirent->name, 8);
	s_name[8] = '\0';
	ptr = s_name;
	while (*ptr && *ptr != ' ')
c7e1f508:	e5d43000 	ldrb	r3, [r4]
c7e1f50c:	e3530000 	cmp	r3, #0	; 0x0
c7e1f510:	13530020 	cmpne	r3, #32	; 0x20
c7e1f514:	03a07000 	moveq	r7, #0	; 0x0
c7e1f518:	13a07001 	movne	r7, #1	; 0x1
c7e1f51c:	1afffff8 	bne	c7e1f504 <get_name+0x2c>
		ptr++;
	if (dirent->ext[0] && dirent->ext[0] != ' ') {
c7e1f520:	e5d63008 	ldrb	r3, [r6, #8]
c7e1f524:	e3530000 	cmp	r3, #0	; 0x0
c7e1f528:	13530020 	cmpne	r3, #32	; 0x20
c7e1f52c:	0a00000c 	beq	c7e1f564 <get_name+0x8c>
		*ptr = '.';
c7e1f530:	e3a0302e 	mov	r3, #46	; 0x2e
c7e1f534:	e4c43001 	strb	r3, [r4], #1
		ptr++;
		memcpy(ptr, dirent->ext, 3);
c7e1f538:	e2861008 	add	r1, r6, #8	; 0x8
c7e1f53c:	e1a00004 	mov	r0, r4
c7e1f540:	e3a02003 	mov	r2, #3	; 0x3
c7e1f544:	eb000dbc 	bl	c7e22c3c <memcpy>
		ptr[3] = '\0';
c7e1f548:	e5c47003 	strb	r7, [r4, #3]
c7e1f54c:	ea000000 	b	c7e1f554 <get_name+0x7c>
		while (*ptr && *ptr != ' ')
			ptr++;
c7e1f550:	e2844001 	add	r4, r4, #1	; 0x1
	if (dirent->ext[0] && dirent->ext[0] != ' ') {
		*ptr = '.';
		ptr++;
		memcpy(ptr, dirent->ext, 3);
		ptr[3] = '\0';
		while (*ptr && *ptr != ' ')
c7e1f554:	e5d43000 	ldrb	r3, [r4]
c7e1f558:	e3530000 	cmp	r3, #0	; 0x0
c7e1f55c:	13530020 	cmpne	r3, #32	; 0x20
c7e1f560:	1afffffa 	bne	c7e1f550 <get_name+0x78>
			ptr++;
	}
	*ptr = '\0';
c7e1f564:	e3a02000 	mov	r2, #0	; 0x0
c7e1f568:	e5c42000 	strb	r2, [r4]
	if (*s_name == DELETED_FLAG)
c7e1f56c:	e5d53000 	ldrb	r3, [r5]
c7e1f570:	e35300e5 	cmp	r3, #229	; 0xe5
		*s_name = '\0';
c7e1f574:	05c52000 	strbeq	r2, [r5]
		ptr[3] = '\0';
		while (*ptr && *ptr != ' ')
			ptr++;
	}
	*ptr = '\0';
	if (*s_name == DELETED_FLAG)
c7e1f578:	0a000002 	beq	c7e1f588 <get_name+0xb0>
		*s_name = '\0';
	else if (*s_name == aRING)
c7e1f57c:	e3530005 	cmp	r3, #5	; 0x5
		*s_name = DELETED_FLAG;
c7e1f580:	03e0301a 	mvneq	r3, #26	; 0x1a
c7e1f584:	05c53000 	strbeq	r3, [r5]
	downcase(s_name);
c7e1f588:	e1a00005 	mov	r0, r5
}
c7e1f58c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	*ptr = '\0';
	if (*s_name == DELETED_FLAG)
		*s_name = '\0';
	else if (*s_name == aRING)
		*s_name = DELETED_FLAG;
	downcase(s_name);
c7e1f590:	eaffff01 	b	c7e1f19c <downcase>

c7e1f594 <read_bootsectandvi>:
{
	__u8 *block;
	volume_info *vistart;
	int ret = 0;

	if (cur_dev == NULL) {
c7e1f594:	e59f3114 	ldr	r3, [pc, #276]	; c7e1f6b0 <read_bootsectandvi+0x11c>
/*
 * Read boot sector and volume info from a FAT filesystem
 */
static int
read_bootsectandvi(boot_sector *bs, volume_info *volinfo, int *fatsize)
{
c7e1f598:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	__u8 *block;
	volume_info *vistart;
	int ret = 0;

	if (cur_dev == NULL) {
c7e1f59c:	e5933000 	ldr	r3, [r3]
/*
 * Read boot sector and volume info from a FAT filesystem
 */
static int
read_bootsectandvi(boot_sector *bs, volume_info *volinfo, int *fatsize)
{
c7e1f5a0:	e1a04000 	mov	r4, r0
	__u8 *block;
	volume_info *vistart;
	int ret = 0;

	if (cur_dev == NULL) {
c7e1f5a4:	e3530000 	cmp	r3, #0	; 0x0
/*
 * Read boot sector and volume info from a FAT filesystem
 */
static int
read_bootsectandvi(boot_sector *bs, volume_info *volinfo, int *fatsize)
{
c7e1f5a8:	e1a07001 	mov	r7, r1
c7e1f5ac:	e1a05002 	mov	r5, r2
	__u8 *block;
	volume_info *vistart;
	int ret = 0;

	if (cur_dev == NULL) {
c7e1f5b0:	0a00003b 	beq	c7e1f6a4 <read_bootsectandvi+0x110>
		debug("Error: no device selected\n");
		return -1;
	}

	block = memalign(ARCH_DMA_MINALIGN, cur_dev->blksz);
c7e1f5b4:	e5931014 	ldr	r1, [r3, #20]
c7e1f5b8:	e3a00040 	mov	r0, #64	; 0x40
c7e1f5bc:	ebffa883 	bl	c7e097d0 <memalign>
	if (block == NULL) {
c7e1f5c0:	e2506000 	subs	r6, r0, #0	; 0x0
c7e1f5c4:	0a000036 	beq	c7e1f6a4 <read_bootsectandvi+0x110>
		debug("Error: allocating block\n");
		return -1;
	}

	if (disk_read(0, 1, block) < 0) {
c7e1f5c8:	e3a00000 	mov	r0, #0	; 0x0
c7e1f5cc:	e3a01001 	mov	r1, #1	; 0x1
c7e1f5d0:	e1a02006 	mov	r2, r6
c7e1f5d4:	ebfffefb 	bl	c7e1f1c8 <disk_read>
c7e1f5d8:	e3500000 	cmp	r0, #0	; 0x0
c7e1f5dc:	ba00002c 	blt	c7e1f694 <read_bootsectandvi+0x100>
		debug("Error: reading block\n");
		goto fail;
	}

	memcpy(bs, block, sizeof(boot_sector));
c7e1f5e0:	e1a00004 	mov	r0, r4
c7e1f5e4:	e1a01006 	mov	r1, r6
c7e1f5e8:	e3a02040 	mov	r2, #64	; 0x40
c7e1f5ec:	eb000d92 	bl	c7e22c3c <memcpy>
	bs->reserved = FAT2CPU16(bs->reserved);
	bs->fat_length = FAT2CPU16(bs->fat_length);
c7e1f5f0:	e1d431b6 	ldrh	r3, [r4, #22]
		*fatsize = 32;
	} else {
		vistart = (volume_info *)&(bs->fat32_length);
		*fatsize = 0;
	}
	memcpy(volinfo, vistart, sizeof(volume_info));
c7e1f5f4:	e1a00007 	mov	r0, r7
	bs->secs_track = FAT2CPU16(bs->secs_track);
	bs->heads = FAT2CPU16(bs->heads);
	bs->total_sect = FAT2CPU32(bs->total_sect);

	/* FAT32 entries */
	if (bs->fat_length == 0) {
c7e1f5f8:	e3530000 	cmp	r3, #0	; 0x0
		goto fail;
	}

	memcpy(bs, block, sizeof(boot_sector));
	bs->reserved = FAT2CPU16(bs->reserved);
	bs->fat_length = FAT2CPU16(bs->fat_length);
c7e1f5fc:	e1c431b6 	strh	r3, [r4, #22]
		bs->flags = FAT2CPU16(bs->flags);
		bs->root_cluster = FAT2CPU32(bs->root_cluster);
		bs->info_sector = FAT2CPU16(bs->info_sector);
		bs->backup_boot = FAT2CPU16(bs->backup_boot);
		vistart = (volume_info *)(block + sizeof(boot_sector));
		*fatsize = 32;
c7e1f600:	02833020 	addeq	r3, r3, #32	; 0x20
		bs->fat32_length = FAT2CPU32(bs->fat32_length);
		bs->flags = FAT2CPU16(bs->flags);
		bs->root_cluster = FAT2CPU32(bs->root_cluster);
		bs->info_sector = FAT2CPU16(bs->info_sector);
		bs->backup_boot = FAT2CPU16(bs->backup_boot);
		vistart = (volume_info *)(block + sizeof(boot_sector));
c7e1f604:	02864040 	addeq	r4, r6, #64	; 0x40
		*fatsize = 32;
	} else {
		vistart = (volume_info *)&(bs->fat32_length);
		*fatsize = 0;
c7e1f608:	13a03000 	movne	r3, #0	; 0x0
		bs->info_sector = FAT2CPU16(bs->info_sector);
		bs->backup_boot = FAT2CPU16(bs->backup_boot);
		vistart = (volume_info *)(block + sizeof(boot_sector));
		*fatsize = 32;
	} else {
		vistart = (volume_info *)&(bs->fat32_length);
c7e1f60c:	12844024 	addne	r4, r4, #36	; 0x24
		bs->flags = FAT2CPU16(bs->flags);
		bs->root_cluster = FAT2CPU32(bs->root_cluster);
		bs->info_sector = FAT2CPU16(bs->info_sector);
		bs->backup_boot = FAT2CPU16(bs->backup_boot);
		vistart = (volume_info *)(block + sizeof(boot_sector));
		*fatsize = 32;
c7e1f610:	05853000 	streq	r3, [r5]
	} else {
		vistart = (volume_info *)&(bs->fat32_length);
		*fatsize = 0;
c7e1f614:	15853000 	strne	r3, [r5]
	}
	memcpy(volinfo, vistart, sizeof(volume_info));
c7e1f618:	e1a01004 	mov	r1, r4
c7e1f61c:	e3a0201a 	mov	r2, #26	; 0x1a
c7e1f620:	eb000d85 	bl	c7e22c3c <memcpy>

	if (*fatsize == 32) {
c7e1f624:	e5953000 	ldr	r3, [r5]
c7e1f628:	e2844012 	add	r4, r4, #18	; 0x12
c7e1f62c:	e3530020 	cmp	r3, #32	; 0x20
c7e1f630:	1a000006 	bne	c7e1f650 <read_bootsectandvi+0xbc>
		if (strncmp(FAT32_SIGN, vistart->fs_type, SIGNLEN) == 0)
c7e1f634:	e1a01004 	mov	r1, r4
c7e1f638:	e59f0074 	ldr	r0, [pc, #116]	; c7e1f6b4 <read_bootsectandvi+0x120>
c7e1f63c:	e3a02008 	mov	r2, #8	; 0x8
c7e1f640:	eb000c94 	bl	c7e22898 <strncmp>
c7e1f644:	e3500000 	cmp	r0, #0	; 0x0
c7e1f648:	1a000011 	bne	c7e1f694 <read_bootsectandvi+0x100>
c7e1f64c:	ea00000e 	b	c7e1f68c <read_bootsectandvi+0xf8>
			goto exit;
	} else {
		if (strncmp(FAT12_SIGN, vistart->fs_type, SIGNLEN) == 0) {
c7e1f650:	e59f0060 	ldr	r0, [pc, #96]	; c7e1f6b8 <read_bootsectandvi+0x124>
c7e1f654:	e1a01004 	mov	r1, r4
c7e1f658:	e3a02008 	mov	r2, #8	; 0x8
c7e1f65c:	eb000c8d 	bl	c7e22898 <strncmp>
c7e1f660:	e3500000 	cmp	r0, #0	; 0x0
			*fatsize = 12;
c7e1f664:	03a0300c 	moveq	r3, #12	; 0xc

	if (*fatsize == 32) {
		if (strncmp(FAT32_SIGN, vistart->fs_type, SIGNLEN) == 0)
			goto exit;
	} else {
		if (strncmp(FAT12_SIGN, vistart->fs_type, SIGNLEN) == 0) {
c7e1f668:	0a000006 	beq	c7e1f688 <read_bootsectandvi+0xf4>
			*fatsize = 12;
			goto exit;
		}
		if (strncmp(FAT16_SIGN, vistart->fs_type, SIGNLEN) == 0) {
c7e1f66c:	e1a01004 	mov	r1, r4
c7e1f670:	e59f0044 	ldr	r0, [pc, #68]	; c7e1f6bc <read_bootsectandvi+0x128>
c7e1f674:	e3a02008 	mov	r2, #8	; 0x8
c7e1f678:	eb000c86 	bl	c7e22898 <strncmp>
c7e1f67c:	e3500000 	cmp	r0, #0	; 0x0
c7e1f680:	1a000003 	bne	c7e1f694 <read_bootsectandvi+0x100>
			*fatsize = 16;
c7e1f684:	e3a03010 	mov	r3, #16	; 0x10
c7e1f688:	e5853000 	str	r3, [r5]
c7e1f68c:	e1a04000 	mov	r4, r0
c7e1f690:	ea000000 	b	c7e1f698 <read_bootsectandvi+0x104>
	}

	debug("Error: broken fs_type sign\n");
fail:
	ret = -1;
exit:
c7e1f694:	e3e04000 	mvn	r4, #0	; 0x0
	free(block);
c7e1f698:	e1a00006 	mov	r0, r6
c7e1f69c:	ebffa62f 	bl	c7e08f60 <free>
c7e1f6a0:	ea000000 	b	c7e1f6a8 <read_bootsectandvi+0x114>
	return ret;
c7e1f6a4:	e3e04000 	mvn	r4, #0	; 0x0
}
c7e1f6a8:	e1a00004 	mov	r0, r4
c7e1f6ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e1f6b0:	c7e42280 	.word	0xc7e42280
c7e1f6b4:	c7e344b3 	.word	0xc7e344b3
c7e1f6b8:	c7e344bc 	.word	0xc7e344bc
c7e1f6bc:	c7e344c5 	.word	0xc7e344c5

c7e1f6c0 <file_fat_detectfs>:
{
	return do_fat_read_at(filename, 0, buffer, maxsize, dols);
}

int file_fat_detectfs(void)
{
c7e1f6c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	boot_sector bs;
	volume_info volinfo;
	int fatsize;
	char vol_label[12];

	if (cur_dev == NULL) {
c7e1f6c4:	e59f4114 	ldr	r4, [pc, #276]	; c7e1f7e0 <file_fat_detectfs+0x120>
{
	return do_fat_read_at(filename, 0, buffer, maxsize, dols);
}

int file_fat_detectfs(void)
{
c7e1f6c8:	e24dd074 	sub	sp, sp, #116	; 0x74
	boot_sector bs;
	volume_info volinfo;
	int fatsize;
	char vol_label[12];

	if (cur_dev == NULL) {
c7e1f6cc:	e5943000 	ldr	r3, [r4]
c7e1f6d0:	e3530000 	cmp	r3, #0	; 0x0
		printf("No current device\n");
c7e1f6d4:	059f0108 	ldreq	r0, [pc, #264]	; c7e1f7e4 <file_fat_detectfs+0x124>
	boot_sector bs;
	volume_info volinfo;
	int fatsize;
	char vol_label[12];

	if (cur_dev == NULL) {
c7e1f6d8:	0a00002e 	beq	c7e1f798 <file_fat_detectfs+0xd8>
#if defined(CONFIG_CMD_IDE) || \
    defined(CONFIG_CMD_SATA) || \
    defined(CONFIG_CMD_SCSI) || \
    defined(CONFIG_CMD_USB) || \
    defined(CONFIG_MMC)
	printf("Interface:  ");
c7e1f6dc:	e59f0104 	ldr	r0, [pc, #260]	; c7e1f7e8 <file_fat_detectfs+0x128>
c7e1f6e0:	ebffa4dc 	bl	c7e08a58 <printf>
	switch (cur_dev->if_type) {
c7e1f6e4:	e5943000 	ldr	r3, [r4]
c7e1f6e8:	e5933000 	ldr	r3, [r3]
c7e1f6ec:	e2433001 	sub	r3, r3, #1	; 0x1
c7e1f6f0:	e3530007 	cmp	r3, #7	; 0x7
c7e1f6f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e1f6f8:	ea000015 	b	c7e1f754 <file_fat_detectfs+0x94>
c7e1f6fc:	c7e1f71c 	.word	0xc7e1f71c
c7e1f700:	c7e1f72c 	.word	0xc7e1f72c
c7e1f704:	c7e1f734 	.word	0xc7e1f734
c7e1f708:	c7e1f73c 	.word	0xc7e1f73c
c7e1f70c:	c7e1f744 	.word	0xc7e1f744
c7e1f710:	c7e1f74c 	.word	0xc7e1f74c
c7e1f714:	c7e1f754 	.word	0xc7e1f754
c7e1f718:	c7e1f724 	.word	0xc7e1f724
	case IF_TYPE_IDE:
		printf("IDE");
c7e1f71c:	e59f00c8 	ldr	r0, [pc, #200]	; c7e1f7ec <file_fat_detectfs+0x12c>
c7e1f720:	ea00000c 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	case IF_TYPE_SATA:
		printf("SATA");
c7e1f724:	e59f00c4 	ldr	r0, [pc, #196]	; c7e1f7f0 <file_fat_detectfs+0x130>
c7e1f728:	ea00000a 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	case IF_TYPE_SCSI:
		printf("SCSI");
c7e1f72c:	e59f00c0 	ldr	r0, [pc, #192]	; c7e1f7f4 <file_fat_detectfs+0x134>
c7e1f730:	ea000008 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	case IF_TYPE_ATAPI:
		printf("ATAPI");
c7e1f734:	e59f00bc 	ldr	r0, [pc, #188]	; c7e1f7f8 <file_fat_detectfs+0x138>
c7e1f738:	ea000006 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	case IF_TYPE_USB:
		printf("USB");
c7e1f73c:	e59f00b8 	ldr	r0, [pc, #184]	; c7e1f7fc <file_fat_detectfs+0x13c>
c7e1f740:	ea000004 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	case IF_TYPE_DOC:
		printf("DOC");
c7e1f744:	e59f00b4 	ldr	r0, [pc, #180]	; c7e1f800 <file_fat_detectfs+0x140>
c7e1f748:	ea000002 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	case IF_TYPE_MMC:
		printf("MMC");
c7e1f74c:	e59f00b0 	ldr	r0, [pc, #176]	; c7e1f804 <file_fat_detectfs+0x144>
c7e1f750:	ea000000 	b	c7e1f758 <file_fat_detectfs+0x98>
		break;
	default:
		printf("Unknown");
c7e1f754:	e59f00ac 	ldr	r0, [pc, #172]	; c7e1f808 <file_fat_detectfs+0x148>
	}

	printf("\n  Device %d: ", cur_dev->dev);
c7e1f758:	e59f7080 	ldr	r7, [pc, #128]	; c7e1f7e0 <file_fat_detectfs+0x120>
		break;
	case IF_TYPE_MMC:
		printf("MMC");
		break;
	default:
		printf("Unknown");
c7e1f75c:	ebffa4bd 	bl	c7e08a58 <printf>
	}

	printf("\n  Device %d: ", cur_dev->dev);
c7e1f760:	e5973000 	ldr	r3, [r7]
c7e1f764:	e59f00a0 	ldr	r0, [pc, #160]	; c7e1f80c <file_fat_detectfs+0x14c>
c7e1f768:	e5931004 	ldr	r1, [r3, #4]
c7e1f76c:	ebffa4b9 	bl	c7e08a58 <printf>
	dev_print(cur_dev);
#endif

	if (read_bootsectandvi(&bs, &volinfo, &fatsize)) {
c7e1f770:	e28d6046 	add	r6, sp, #70	; 0x46
	default:
		printf("Unknown");
	}

	printf("\n  Device %d: ", cur_dev->dev);
	dev_print(cur_dev);
c7e1f774:	e5970000 	ldr	r0, [r7]
c7e1f778:	ebffc0a8 	bl	c7e0fa20 <dev_print>
#endif

	if (read_bootsectandvi(&bs, &volinfo, &fatsize)) {
c7e1f77c:	e28d0004 	add	r0, sp, #4	; 0x4
c7e1f780:	e1a01006 	mov	r1, r6
c7e1f784:	e28d206c 	add	r2, sp, #108	; 0x6c
c7e1f788:	ebffff81 	bl	c7e1f594 <read_bootsectandvi>
c7e1f78c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e1f790:	0a000003 	beq	c7e1f7a4 <file_fat_detectfs+0xe4>
		printf("\nNo valid FAT fs found\n");
c7e1f794:	e59f0074 	ldr	r0, [pc, #116]	; c7e1f810 <file_fat_detectfs+0x150>
c7e1f798:	ebffa4ae 	bl	c7e08a58 <printf>
c7e1f79c:	e3a00001 	mov	r0, #1	; 0x1
c7e1f7a0:	ea00000c 	b	c7e1f7d8 <file_fat_detectfs+0x118>
		return 1;
	}

	memcpy(vol_label, volinfo.volume_label, 11);
c7e1f7a4:	e28d4060 	add	r4, sp, #96	; 0x60
c7e1f7a8:	e2861007 	add	r1, r6, #7	; 0x7
c7e1f7ac:	e3a0200b 	mov	r2, #11	; 0xb
c7e1f7b0:	e1a00004 	mov	r0, r4
c7e1f7b4:	eb000d20 	bl	c7e22c3c <memcpy>
	vol_label[11] = '\0';
	volinfo.fs_type[5] = '\0';

	printf("Partition %d: Filesystem: %s \"%s\"\n", cur_part_nr,
c7e1f7b8:	e5971054 	ldr	r1, [r7, #84]
c7e1f7bc:	e2862012 	add	r2, r6, #18	; 0x12
c7e1f7c0:	e1a03004 	mov	r3, r4
c7e1f7c4:	e59f0048 	ldr	r0, [pc, #72]	; c7e1f814 <file_fat_detectfs+0x154>
		printf("\nNo valid FAT fs found\n");
		return 1;
	}

	memcpy(vol_label, volinfo.volume_label, 11);
	vol_label[11] = '\0';
c7e1f7c8:	e5cd506b 	strb	r5, [sp, #107]
	volinfo.fs_type[5] = '\0';
c7e1f7cc:	e5cd505d 	strb	r5, [sp, #93]

	printf("Partition %d: Filesystem: %s \"%s\"\n", cur_part_nr,
c7e1f7d0:	ebffa4a0 	bl	c7e08a58 <printf>
c7e1f7d4:	e1a00005 	mov	r0, r5
		volinfo.fs_type, vol_label);

	return 0;
}
c7e1f7d8:	e28dd074 	add	sp, sp, #116	; 0x74
c7e1f7dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e1f7e0:	c7e42280 	.word	0xc7e42280
c7e1f7e4:	c7e344ce 	.word	0xc7e344ce
c7e1f7e8:	c7e344e1 	.word	0xc7e344e1
c7e1f7ec:	c7e32a6f 	.word	0xc7e32a6f
c7e1f7f0:	c7e32a73 	.word	0xc7e32a73
c7e1f7f4:	c7e32a78 	.word	0xc7e32a78
c7e1f7f8:	c7e32a7d 	.word	0xc7e32a7d
c7e1f7fc:	c7e32a83 	.word	0xc7e32a83
c7e1f800:	c7e32a87 	.word	0xc7e32a87
c7e1f804:	c7e304a0 	.word	0xc7e304a0
c7e1f808:	c7e337ac 	.word	0xc7e337ac
c7e1f80c:	c7e344ee 	.word	0xc7e344ee
c7e1f810:	c7e344fd 	.word	0xc7e344fd
c7e1f814:	c7e34515 	.word	0xc7e34515

c7e1f818 <get_cluster>:
 * Read at most 'size' bytes from the specified cluster into 'buffer'.
 * Return 0 on success, -1 otherwise.
 */
static int
get_cluster(fsdata *mydata, __u32 clustnum, __u8 *buffer, unsigned long size)
{
c7e1f818:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	__u32 idx = 0;
	__u32 startsect;
	int ret;

	if (clustnum > 0) {
c7e1f81c:	e3510000 	cmp	r1, #0	; 0x0
 * Read at most 'size' bytes from the specified cluster into 'buffer'.
 * Return 0 on success, -1 otherwise.
 */
static int
get_cluster(fsdata *mydata, __u32 clustnum, __u8 *buffer, unsigned long size)
{
c7e1f820:	e1a07002 	mov	r7, r2
c7e1f824:	e1a0a003 	mov	sl, r3
	__u32 idx = 0;
	__u32 startsect;
	int ret;

	if (clustnum > 0) {
		startsect = mydata->data_begin +
c7e1f828:	11d021b6 	ldrhne	r2, [r0, #22]
c7e1f82c:	15903018 	ldrne	r3, [r0, #24]
				clustnum * mydata->clust_size;
	} else {
		startsect = mydata->rootdir_sect;
c7e1f830:	05906010 	ldreq	r6, [r0, #16]
	__u32 idx = 0;
	__u32 startsect;
	int ret;

	if (clustnum > 0) {
		startsect = mydata->data_begin +
c7e1f834:	10263192 	mlane	r6, r2, r1, r3
		startsect = mydata->rootdir_sect;
	}

	debug("gc - clustnum: %d, startsect: %d\n", clustnum, startsect);

	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
c7e1f838:	e317003f 	tst	r7, #63	; 0x3f
 * Read at most 'size' bytes from the specified cluster into 'buffer'.
 * Return 0 on success, -1 otherwise.
 */
static int
get_cluster(fsdata *mydata, __u32 clustnum, __u8 *buffer, unsigned long size)
{
c7e1f83c:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e1f840:	e1a05000 	mov	r5, r0
c7e1f844:	e1d011b4 	ldrh	r1, [r0, #20]
		startsect = mydata->rootdir_sect;
	}

	debug("gc - clustnum: %d, startsect: %d\n", clustnum, startsect);

	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
c7e1f848:	0a000022 	beq	c7e1f8d8 <get_cluster+0xc0>
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);
c7e1f84c:	e281303f 	add	r3, r1, #63	; 0x3f
c7e1f850:	e3c3303f 	bic	r3, r3, #63	; 0x3f
c7e1f854:	e283304d 	add	r3, r3, #77	; 0x4d
c7e1f858:	e1a031a3 	lsr	r3, r3, #3
c7e1f85c:	e1a0200d 	mov	r2, sp
c7e1f860:	e0422183 	sub	r2, r2, r3, lsl #3
		startsect = mydata->rootdir_sect;
	}

	debug("gc - clustnum: %d, startsect: %d\n", clustnum, startsect);

	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
c7e1f864:	e1a0900d 	mov	r9, sp
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);
c7e1f868:	e1a0d002 	mov	sp, r2
c7e1f86c:	e28d303f 	add	r3, sp, #63	; 0x3f

		printf("FAT: Misaligned buffer address (%p)\n", buffer);
c7e1f870:	e1a01007 	mov	r1, r7
c7e1f874:	e59f0110 	ldr	r0, [pc, #272]	; c7e1f98c <get_cluster+0x174>
	}

	debug("gc - clustnum: %d, startsect: %d\n", clustnum, startsect);

	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);
c7e1f878:	e3c3403f 	bic	r4, r3, #63	; 0x3f

		printf("FAT: Misaligned buffer address (%p)\n", buffer);
c7e1f87c:	ebffa475 	bl	c7e08a58 <printf>
c7e1f880:	ea00000c 	b	c7e1f8b8 <get_cluster+0xa0>

		while (size >= mydata->sect_size) {
			ret = disk_read(startsect++, 1, tmpbuf);
c7e1f884:	ebfffe4f 	bl	c7e1f1c8 <disk_read>
			if (ret != 1) {
c7e1f888:	e3500001 	cmp	r0, #1	; 0x1
				debug("Error reading data (got %d)\n", ret);
				return -1;
			}

			memcpy(buffer, tmpbuf, mydata->sect_size);
c7e1f88c:	e1a01004 	mov	r1, r4
c7e1f890:	e1a00007 	mov	r0, r7
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);

		printf("FAT: Misaligned buffer address (%p)\n", buffer);

		while (size >= mydata->sect_size) {
			ret = disk_read(startsect++, 1, tmpbuf);
c7e1f894:	e2866001 	add	r6, r6, #1	; 0x1
			if (ret != 1) {
c7e1f898:	0a000001 	beq	c7e1f8a4 <get_cluster+0x8c>
c7e1f89c:	e1a0d009 	mov	sp, r9
c7e1f8a0:	ea00002f 	b	c7e1f964 <get_cluster+0x14c>
				debug("Error reading data (got %d)\n", ret);
				return -1;
			}

			memcpy(buffer, tmpbuf, mydata->sect_size);
c7e1f8a4:	e1d521b4 	ldrh	r2, [r5, #20]
c7e1f8a8:	eb000ce3 	bl	c7e22c3c <memcpy>
			buffer += mydata->sect_size;
c7e1f8ac:	e1d531b4 	ldrh	r3, [r5, #20]
			size -= mydata->sect_size;
c7e1f8b0:	e063a00a 	rsb	sl, r3, sl
				debug("Error reading data (got %d)\n", ret);
				return -1;
			}

			memcpy(buffer, tmpbuf, mydata->sect_size);
			buffer += mydata->sect_size;
c7e1f8b4:	e0877003 	add	r7, r7, r3
	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);

		printf("FAT: Misaligned buffer address (%p)\n", buffer);

		while (size >= mydata->sect_size) {
c7e1f8b8:	e1d531b4 	ldrh	r3, [r5, #20]
			ret = disk_read(startsect++, 1, tmpbuf);
c7e1f8bc:	e1a00006 	mov	r0, r6
	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);

		printf("FAT: Misaligned buffer address (%p)\n", buffer);

		while (size >= mydata->sect_size) {
c7e1f8c0:	e15a0003 	cmp	sl, r3
			ret = disk_read(startsect++, 1, tmpbuf);
c7e1f8c4:	e3a01001 	mov	r1, #1	; 0x1
c7e1f8c8:	e1a02004 	mov	r2, r4
	if ((unsigned long)buffer & (ARCH_DMA_MINALIGN - 1)) {
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);

		printf("FAT: Misaligned buffer address (%p)\n", buffer);

		while (size >= mydata->sect_size) {
c7e1f8cc:	2affffec 	bcs	c7e1f884 <get_cluster+0x6c>
c7e1f8d0:	e1a0d009 	mov	sp, r9
c7e1f8d4:	ea00000d 	b	c7e1f910 <get_cluster+0xf8>
			memcpy(buffer, tmpbuf, mydata->sect_size);
			buffer += mydata->sect_size;
			size -= mydata->sect_size;
		}
	} else {
		idx = size / mydata->sect_size;
c7e1f8d8:	e1a0000a 	mov	r0, sl
c7e1f8dc:	eb002b09 	bl	c7e2a508 <__udivsi3>
c7e1f8e0:	e1a04000 	mov	r4, r0
		ret = disk_read(startsect, idx, buffer);
c7e1f8e4:	e1a01004 	mov	r1, r4
c7e1f8e8:	e1a00006 	mov	r0, r6
c7e1f8ec:	e1a02007 	mov	r2, r7
c7e1f8f0:	ebfffe34 	bl	c7e1f1c8 <disk_read>
		if (ret != idx) {
c7e1f8f4:	e1500004 	cmp	r0, r4
c7e1f8f8:	1a000019 	bne	c7e1f964 <get_cluster+0x14c>
			debug("Error reading data (got %d)\n", ret);
			return -1;
		}
		startsect += idx;
		idx *= mydata->sect_size;
c7e1f8fc:	e1d531b4 	ldrh	r3, [r5, #20]
		ret = disk_read(startsect, idx, buffer);
		if (ret != idx) {
			debug("Error reading data (got %d)\n", ret);
			return -1;
		}
		startsect += idx;
c7e1f900:	e0866000 	add	r6, r6, r0
		idx *= mydata->sect_size;
c7e1f904:	e0030390 	mul	r3, r0, r3
		buffer += idx;
		size -= idx;
c7e1f908:	e063a00a 	rsb	sl, r3, sl
			debug("Error reading data (got %d)\n", ret);
			return -1;
		}
		startsect += idx;
		idx *= mydata->sect_size;
		buffer += idx;
c7e1f90c:	e0877003 	add	r7, r7, r3
		size -= idx;
	}
	if (size) {
c7e1f910:	e35a0000 	cmp	sl, #0	; 0x0
c7e1f914:	01a0000a 	moveq	r0, sl
c7e1f918:	0a000019 	beq	c7e1f984 <get_cluster+0x16c>
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);
c7e1f91c:	e1d531b4 	ldrh	r3, [r5, #20]
c7e1f920:	e1a0200d 	mov	r2, sp
c7e1f924:	e283303f 	add	r3, r3, #63	; 0x3f
c7e1f928:	e3c3303f 	bic	r3, r3, #63	; 0x3f
c7e1f92c:	e283304d 	add	r3, r3, #77	; 0x4d
c7e1f930:	e1a031a3 	lsr	r3, r3, #3
c7e1f934:	e0422183 	sub	r2, r2, r3, lsl #3
		startsect += idx;
		idx *= mydata->sect_size;
		buffer += idx;
		size -= idx;
	}
	if (size) {
c7e1f938:	e1a0500d 	mov	r5, sp
		ALLOC_CACHE_ALIGN_BUFFER(__u8, tmpbuf, mydata->sect_size);
c7e1f93c:	e1a0d002 	mov	sp, r2
c7e1f940:	e28d303f 	add	r3, sp, #63	; 0x3f
c7e1f944:	e3c3403f 	bic	r4, r3, #63	; 0x3f

		ret = disk_read(startsect, 1, tmpbuf);
c7e1f948:	e1a00006 	mov	r0, r6
c7e1f94c:	e3a01001 	mov	r1, #1	; 0x1
c7e1f950:	e1a02004 	mov	r2, r4
c7e1f954:	ebfffe1b 	bl	c7e1f1c8 <disk_read>
		if (ret != 1) {
c7e1f958:	e3500001 	cmp	r0, #1	; 0x1
c7e1f95c:	0a000002 	beq	c7e1f96c <get_cluster+0x154>
c7e1f960:	e1a0d005 	mov	sp, r5
c7e1f964:	e3e00000 	mvn	r0, #0	; 0x0
c7e1f968:	ea000005 	b	c7e1f984 <get_cluster+0x16c>
			debug("Error reading data (got %d)\n", ret);
			return -1;
		}

		memcpy(buffer, tmpbuf, size);
c7e1f96c:	e1a00007 	mov	r0, r7
c7e1f970:	e1a01004 	mov	r1, r4
c7e1f974:	e1a0200a 	mov	r2, sl
c7e1f978:	eb000caf 	bl	c7e22c3c <memcpy>
c7e1f97c:	e3a00000 	mov	r0, #0	; 0x0
c7e1f980:	e1a0d005 	mov	sp, r5
	}

	return 0;
}
c7e1f984:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e1f988:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e1f98c:	c7e34538 	.word	0xc7e34538

c7e1f990 <get_vfatname>:
 * Return 0 on success, -1 otherwise.
 */
static int
get_vfatname(fsdata *mydata, int curclust, __u8 *cluster,
	     dir_entry *retdent, char *l_name)
{
c7e1f990:	e92d46f7 	push	{r0, r1, r2, r4, r5, r6, r7, r9, sl, lr}
c7e1f994:	e1a09003 	mov	r9, r3
	dir_entry *realdent;
	dir_slot *slotptr = (dir_slot *)retdent;
c7e1f998:	e1a06003 	mov	r6, r3
	__u8 *buflimit = cluster + mydata->sect_size * ((curclust == 0) ?
							PREFETCH_BLOCKS :
							mydata->clust_size);
	__u8 counter = (slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff;
c7e1f99c:	e5d33000 	ldrb	r3, [r3]
{
	dir_entry *realdent;
	dir_slot *slotptr = (dir_slot *)retdent;
	__u8 *buflimit = cluster + mydata->sect_size * ((curclust == 0) ?
							PREFETCH_BLOCKS :
							mydata->clust_size);
c7e1f9a0:	e251a000 	subs	sl, r1, #0	; 0x0
 * Return 0 on success, -1 otherwise.
 */
static int
get_vfatname(fsdata *mydata, int curclust, __u8 *cluster,
	     dir_entry *retdent, char *l_name)
{
c7e1f9a4:	e1a04000 	mov	r4, r0
	dir_entry *realdent;
	dir_slot *slotptr = (dir_slot *)retdent;
	__u8 *buflimit = cluster + mydata->sect_size * ((curclust == 0) ?
							PREFETCH_BLOCKS :
							mydata->clust_size);
c7e1f9a8:	e1d0c1b4 	ldrh	ip, [r0, #20]
	__u8 counter = (slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff;
c7e1f9ac:	e20350bf 	and	r5, r3, #191	; 0xbf
{
	dir_entry *realdent;
	dir_slot *slotptr = (dir_slot *)retdent;
	__u8 *buflimit = cluster + mydata->sect_size * ((curclust == 0) ?
							PREFETCH_BLOCKS :
							mydata->clust_size);
c7e1f9b0:	11d401b6 	ldrhne	r0, [r4, #22]
c7e1f9b4:	03a00002 	moveq	r0, #2	; 0x2
	__u8 counter = (slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff;
	int idx = 0;
c7e1f9b8:	e3a03000 	mov	r3, #0	; 0x0

	if (counter > VFAT_MAXSEQ) {
c7e1f9bc:	e3550009 	cmp	r5, #9	; 0x9
 * Return 0 on success, -1 otherwise.
 */
static int
get_vfatname(fsdata *mydata, int curclust, __u8 *cluster,
	     dir_entry *retdent, char *l_name)
{
c7e1f9c0:	e59d7028 	ldr	r7, [sp, #40]
	dir_entry *realdent;
	dir_slot *slotptr = (dir_slot *)retdent;
	__u8 *buflimit = cluster + mydata->sect_size * ((curclust == 0) ?
							PREFETCH_BLOCKS :
							mydata->clust_size);
c7e1f9c4:	e021209c 	mla	r1, ip, r0, r2
	__u8 counter = (slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff;
	int idx = 0;
c7e1f9c8:	e58d3004 	str	r3, [sp, #4]

	if (counter > VFAT_MAXSEQ) {
c7e1f9cc:	9a000008 	bls	c7e1f9f4 <get_vfatname+0x64>
c7e1f9d0:	ea000056 	b	c7e1fb30 <get_vfatname+0x1a0>
		debug("Error: VFAT name is too long\n");
		return -1;
	}

	while ((__u8 *)slotptr < buflimit) {
		if (counter == 0)
c7e1f9d4:	e3550000 	cmp	r5, #0	; 0x0
c7e1f9d8:	0a000009 	beq	c7e1fa04 <get_vfatname+0x74>
			break;
		if (((slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff) != counter)
c7e1f9dc:	e5d63000 	ldrb	r3, [r6]
			return -1;
		slotptr++;
c7e1f9e0:	e2866020 	add	r6, r6, #32	; 0x20
	}

	while ((__u8 *)slotptr < buflimit) {
		if (counter == 0)
			break;
		if (((slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff) != counter)
c7e1f9e4:	e20330bf 	and	r3, r3, #191	; 0xbf
c7e1f9e8:	e1530005 	cmp	r3, r5
c7e1f9ec:	1a00004f 	bne	c7e1fb30 <get_vfatname+0x1a0>
			return -1;
		slotptr++;
		counter--;
c7e1f9f0:	e20250ff 	and	r5, r2, #255	; 0xff
	if (counter > VFAT_MAXSEQ) {
		debug("Error: VFAT name is too long\n");
		return -1;
	}

	while ((__u8 *)slotptr < buflimit) {
c7e1f9f4:	e1560001 	cmp	r6, r1
		if (counter == 0)
			break;
		if (((slotptr->id & ~LAST_LONG_ENTRY_MASK) & 0xff) != counter)
			return -1;
		slotptr++;
		counter--;
c7e1f9f8:	e2452001 	sub	r2, r5, #1	; 0x1
	if (counter > VFAT_MAXSEQ) {
		debug("Error: VFAT name is too long\n");
		return -1;
	}

	while ((__u8 *)slotptr < buflimit) {
c7e1f9fc:	3afffff4 	bcc	c7e1f9d4 <get_vfatname+0x44>
c7e1fa00:	ea00004c 	b	c7e1fb38 <get_vfatname+0x1a8>
			slotptr2--;
			slot2str(slotptr2, l_name, &idx);
		}
	} else {
		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr;
c7e1fa04:	e1a04006 	mov	r4, r6
c7e1fa08:	ea00002c 	b	c7e1fac0 <get_vfatname+0x130>
	if ((__u8 *)slotptr >= buflimit) {
		dir_slot *slotptr2;

		if (curclust == 0)
			return -1;
		curclust = get_fatent(mydata, curclust);
c7e1fa0c:	e1a0100a 	mov	r1, sl
c7e1fa10:	e1a00004 	mov	r0, r4
c7e1fa14:	ebfffe0c 	bl	c7e1f24c <get_fatent>
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e1fa18:	e3500001 	cmp	r0, #1	; 0x1
	if ((__u8 *)slotptr >= buflimit) {
		dir_slot *slotptr2;

		if (curclust == 0)
			return -1;
		curclust = get_fatent(mydata, curclust);
c7e1fa1c:	e1a01000 	mov	r1, r0
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e1fa20:	da000005 	ble	c7e1fa3c <get_vfatname+0xac>
c7e1fa24:	e5943004 	ldr	r3, [r4, #4]
c7e1fa28:	e3530020 	cmp	r3, #32	; 0x20
c7e1fa2c:	e59f3110 	ldr	r3, [pc, #272]	; c7e1fb44 <get_vfatname+0x1b4>
c7e1fa30:	03e032ff 	mvneq	r3, #-268435441	; 0xf000000f
c7e1fa34:	e1500003 	cmp	r0, r3
c7e1fa38:	ba000002 	blt	c7e1fa48 <get_vfatname+0xb8>
			debug("curclust: 0x%x\n", curclust);
			printf("Invalid FAT entry\n");
c7e1fa3c:	e59f0104 	ldr	r0, [pc, #260]	; c7e1fb48 <get_vfatname+0x1b8>
c7e1fa40:	ebffa404 	bl	c7e08a58 <printf>
c7e1fa44:	ea000039 	b	c7e1fb30 <get_vfatname+0x1a0>
			return -1;
		}

		if (get_cluster(mydata, curclust, get_contents_vfatname_block,
c7e1fa48:	e1d421b4 	ldrh	r2, [r4, #20]
c7e1fa4c:	e1d431b6 	ldrh	r3, [r4, #22]
c7e1fa50:	e1a00004 	mov	r0, r4
c7e1fa54:	e0030392 	mul	r3, r2, r3
c7e1fa58:	e59f20ec 	ldr	r2, [pc, #236]	; c7e1fb4c <get_vfatname+0x1bc>
c7e1fa5c:	ebffff6d 	bl	c7e1f818 <get_cluster>
c7e1fa60:	e3500000 	cmp	r0, #0	; 0x0
				mydata->clust_size * mydata->sect_size) != 0) {
			debug("Error: reading directory block\n");
			return -1;
		}

		slotptr2 = (dir_slot *)get_contents_vfatname_block;
c7e1fa64:	059f40e0 	ldreq	r4, [pc, #224]	; c7e1fb4c <get_vfatname+0x1bc>
			debug("curclust: 0x%x\n", curclust);
			printf("Invalid FAT entry\n");
			return -1;
		}

		if (get_cluster(mydata, curclust, get_contents_vfatname_block,
c7e1fa68:	0a000006 	beq	c7e1fa88 <get_vfatname+0xf8>
c7e1fa6c:	ea00002f 	b	c7e1fb30 <get_vfatname+0x1a0>
			return -1;
		}

		slotptr2 = (dir_slot *)get_contents_vfatname_block;
		while (counter > 0) {
			if (((slotptr2->id & ~LAST_LONG_ENTRY_MASK)
c7e1fa70:	e5d43000 	ldrb	r3, [r4]
			    & 0xff) != counter)
				return -1;
			slotptr2++;
c7e1fa74:	e2844020 	add	r4, r4, #32	; 0x20
			return -1;
		}

		slotptr2 = (dir_slot *)get_contents_vfatname_block;
		while (counter > 0) {
			if (((slotptr2->id & ~LAST_LONG_ENTRY_MASK)
c7e1fa78:	e20330bf 	and	r3, r3, #191	; 0xbf
c7e1fa7c:	e1530005 	cmp	r3, r5
c7e1fa80:	1a00002a 	bne	c7e1fb30 <get_vfatname+0x1a0>
			    & 0xff) != counter)
				return -1;
			slotptr2++;
			counter--;
c7e1fa84:	e20250ff 	and	r5, r2, #255	; 0xff
			debug("Error: reading directory block\n");
			return -1;
		}

		slotptr2 = (dir_slot *)get_contents_vfatname_block;
		while (counter > 0) {
c7e1fa88:	e3550000 	cmp	r5, #0	; 0x0
			if (((slotptr2->id & ~LAST_LONG_ENTRY_MASK)
			    & 0xff) != counter)
				return -1;
			slotptr2++;
			counter--;
c7e1fa8c:	e2452001 	sub	r2, r5, #1	; 0x1
			debug("Error: reading directory block\n");
			return -1;
		}

		slotptr2 = (dir_slot *)get_contents_vfatname_block;
		while (counter > 0) {
c7e1fa90:	1afffff6 	bne	c7e1fa70 <get_vfatname+0xe0>
c7e1fa94:	e1a05004 	mov	r5, r4
c7e1fa98:	ea000000 	b	c7e1faa0 <get_vfatname+0x110>

		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr2;
		while ((__u8 *)slotptr2 > get_contents_vfatname_block) {
			slotptr2--;
			slot2str(slotptr2, l_name, &idx);
c7e1fa9c:	ebfffe4d 	bl	c7e1f3d8 <slot2str>
			counter--;
		}

		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr2;
		while ((__u8 *)slotptr2 > get_contents_vfatname_block) {
c7e1faa0:	e59f30a4 	ldr	r3, [pc, #164]	; c7e1fb4c <get_vfatname+0x1bc>
			slotptr2--;
			slot2str(slotptr2, l_name, &idx);
c7e1faa4:	e1a01007 	mov	r1, r7
			counter--;
		}

		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr2;
		while ((__u8 *)slotptr2 > get_contents_vfatname_block) {
c7e1faa8:	e1540003 	cmp	r4, r3
			slotptr2--;
c7e1faac:	e2444020 	sub	r4, r4, #32	; 0x20
			slot2str(slotptr2, l_name, &idx);
c7e1fab0:	e28d2004 	add	r2, sp, #4	; 0x4
c7e1fab4:	e1a00004 	mov	r0, r4
			counter--;
		}

		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr2;
		while ((__u8 *)slotptr2 > get_contents_vfatname_block) {
c7e1fab8:	8afffff7 	bhi	c7e1fa9c <get_vfatname+0x10c>
			slotptr2++;
			counter--;
		}

		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr2;
c7e1fabc:	e1a04005 	mov	r4, r5
		/* Save the real directory entry */
		realdent = (dir_entry *)slotptr;
	}

	do {
		slotptr--;
c7e1fac0:	e2466020 	sub	r6, r6, #32	; 0x20
		if (slot2str(slotptr, l_name, &idx))
c7e1fac4:	e1a00006 	mov	r0, r6
c7e1fac8:	e1a01007 	mov	r1, r7
c7e1facc:	e28d2004 	add	r2, sp, #4	; 0x4
c7e1fad0:	ebfffe40 	bl	c7e1f3d8 <slot2str>
c7e1fad4:	e3500000 	cmp	r0, #0	; 0x0
c7e1fad8:	1a000002 	bne	c7e1fae8 <get_vfatname+0x158>
			break;
	} while (!(slotptr->id & LAST_LONG_ENTRY_MASK));
c7e1fadc:	e5d63000 	ldrb	r3, [r6]
c7e1fae0:	e3130040 	tst	r3, #64	; 0x40
c7e1fae4:	0afffff5 	beq	c7e1fac0 <get_vfatname+0x130>

	l_name[idx] = '\0';
c7e1fae8:	e59d3004 	ldr	r3, [sp, #4]
c7e1faec:	e3a02000 	mov	r2, #0	; 0x0
c7e1faf0:	e7c72003 	strb	r2, [r7, r3]
	if (*l_name == DELETED_FLAG)
c7e1faf4:	e5d73000 	ldrb	r3, [r7]
c7e1faf8:	e35300e5 	cmp	r3, #229	; 0xe5
		*l_name = '\0';
c7e1fafc:	05c72000 	strbeq	r2, [r7]
		if (slot2str(slotptr, l_name, &idx))
			break;
	} while (!(slotptr->id & LAST_LONG_ENTRY_MASK));

	l_name[idx] = '\0';
	if (*l_name == DELETED_FLAG)
c7e1fb00:	0a000002 	beq	c7e1fb10 <get_vfatname+0x180>
		*l_name = '\0';
	else if (*l_name == aRING)
c7e1fb04:	e3530005 	cmp	r3, #5	; 0x5
		*l_name = DELETED_FLAG;
c7e1fb08:	03e0301a 	mvneq	r3, #26	; 0x1a
c7e1fb0c:	05c73000 	strbeq	r3, [r7]
	downcase(l_name);
c7e1fb10:	e1a00007 	mov	r0, r7
c7e1fb14:	ebfffda0 	bl	c7e1f19c <downcase>

	/* Return the real directory entry */
	memcpy(retdent, realdent, sizeof(dir_entry));
c7e1fb18:	e1a00009 	mov	r0, r9
c7e1fb1c:	e1a01004 	mov	r1, r4
c7e1fb20:	e3a02020 	mov	r2, #32	; 0x20
c7e1fb24:	eb000c44 	bl	c7e22c3c <memcpy>
c7e1fb28:	e3a00000 	mov	r0, #0	; 0x0
c7e1fb2c:	ea000000 	b	c7e1fb34 <get_vfatname+0x1a4>

	return 0;
c7e1fb30:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e1fb34:	e8bd86fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r9, sl, pc}
	}

	if ((__u8 *)slotptr >= buflimit) {
		dir_slot *slotptr2;

		if (curclust == 0)
c7e1fb38:	e35a0000 	cmp	sl, #0	; 0x0
c7e1fb3c:	0afffffb 	beq	c7e1fb30 <get_vfatname+0x1a0>
c7e1fb40:	eaffffb1 	b	c7e1fa0c <get_vfatname+0x7c>
c7e1fb44:	0000fff0 	.word	0x0000fff0
c7e1fb48:	c7e3455d 	.word	0xc7e3455d
c7e1fb4c:	c7e42300 	.word	0xc7e42300

c7e1fb50 <do_fat_read_at>:
	__aligned(ARCH_DMA_MINALIGN);

long
do_fat_read_at(const char *filename, unsigned long pos, void *buffer,
	       unsigned long maxsize, int dols)
{
c7e1fb50:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e1fb54:	e24dde9f 	sub	sp, sp, #2544	; 0x9f0
c7e1fb58:	e24dd008 	sub	sp, sp, #8	; 0x8
c7e1fb5c:	e58d2010 	str	r2, [sp, #16]
	int firsttime;
	__u32 root_cluster = 0;
	int rootdir_size = 0;
	int j;

	if (read_bootsectandvi(&bs, &volinfo, &mydata->fatsize)) {
c7e1fb60:	e28d2e9b 	add	r2, sp, #2480	; 0x9b0
	__aligned(ARCH_DMA_MINALIGN);

long
do_fat_read_at(const char *filename, unsigned long pos, void *buffer,
	       unsigned long maxsize, int dols)
{
c7e1fb64:	e58d1014 	str	r1, [sp, #20]
c7e1fb68:	e1a06000 	mov	r6, r0
	int firsttime;
	__u32 root_cluster = 0;
	int rootdir_size = 0;
	int j;

	if (read_bootsectandvi(&bs, &volinfo, &mydata->fatsize)) {
c7e1fb6c:	e28d1e9d 	add	r1, sp, #2512	; 0x9d0
c7e1fb70:	e28d0e95 	add	r0, sp, #2384	; 0x950
c7e1fb74:	e2822004 	add	r2, r2, #4	; 0x4
	__aligned(ARCH_DMA_MINALIGN);

long
do_fat_read_at(const char *filename, unsigned long pos, void *buffer,
	       unsigned long maxsize, int dols)
{
c7e1fb78:	e58d300c 	str	r3, [sp, #12]
	int firsttime;
	__u32 root_cluster = 0;
	int rootdir_size = 0;
	int j;

	if (read_bootsectandvi(&bs, &volinfo, &mydata->fatsize)) {
c7e1fb7c:	ebfffe84 	bl	c7e1f594 <read_bootsectandvi>
c7e1fb80:	e3500000 	cmp	r0, #0	; 0x0
c7e1fb84:	1a00029c 	bne	c7e205fc <do_fat_read_at+0xaac>
		debug("Error: reading boot sector\n");
		return -1;
	}

	if (mydata->fatsize == 32) {
c7e1fb88:	e59d39b4 	ldr	r3, [sp, #2484]

	cursect = mydata->rootdir_sect
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
	mydata->clust_size = bs.cluster_size;
c7e1fb8c:	e5dd595d 	ldrb	r5, [sp, #2397]
	if (read_bootsectandvi(&bs, &volinfo, &mydata->fatsize)) {
		debug("Error: reading boot sector\n");
		return -1;
	}

	if (mydata->fatsize == 32) {
c7e1fb90:	e3530020 	cmp	r3, #32	; 0x20
		root_cluster = bs.root_cluster;
		mydata->fatlength = bs.fat32_length;
	} else {
		mydata->fatlength = bs.fat_length;
c7e1fb94:	128d2c09 	addne	r2, sp, #2304	; 0x900
c7e1fb98:	11d236b6 	ldrhne	r3, [r2, #102]
		return -1;
	}

	if (mydata->fatsize == 32) {
		root_cluster = bs.root_cluster;
		mydata->fatlength = bs.fat32_length;
c7e1fb9c:	059d3974 	ldreq	r3, [sp, #2420]
		debug("Error: reading boot sector\n");
		return -1;
	}

	if (mydata->fatsize == 32) {
		root_cluster = bs.root_cluster;
c7e1fba0:	059d197c 	ldreq	r1, [sp, #2428]
		mydata->fatlength = bs.fat32_length;
	} else {
		mydata->fatlength = bs.fat_length;
c7e1fba4:	e58d39b8 	str	r3, [sp, #2488]
	}

	mydata->fat_sect = bs.reserved;
c7e1fba8:	e28d3c09 	add	r3, sp, #2304	; 0x900
c7e1fbac:	e1d3c5be 	ldrh	ip, [r3, #94]
		debug("Error: reading boot sector\n");
		return -1;
	}

	if (mydata->fatsize == 32) {
		root_cluster = bs.root_cluster;
c7e1fbb0:	058d102c 	streq	r1, [sp, #44]
		mydata->fatlength = bs.fat_length;
	}

	mydata->fat_sect = bs.reserved;

	cursect = mydata->rootdir_sect
c7e1fbb4:	e59d39b8 	ldr	r3, [sp, #2488]
c7e1fbb8:	e5dd1960 	ldrb	r1, [sp, #2400]

	if (mydata->fatsize == 32) {
		root_cluster = bs.root_cluster;
		mydata->fatlength = bs.fat32_length;
	} else {
		mydata->fatlength = bs.fat_length;
c7e1fbbc:	158d002c 	strne	r0, [sp, #44]
	mydata->fat_sect = bs.reserved;

	cursect = mydata->rootdir_sect
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
c7e1fbc0:	e5dd295b 	ldrb	r2, [sp, #2395]
c7e1fbc4:	e5dd095c 	ldrb	r0, [sp, #2396]
		mydata->fatlength = bs.fat_length;
	}

	mydata->fat_sect = bs.reserved;

	cursect = mydata->rootdir_sect
c7e1fbc8:	e029c193 	mla	r9, r3, r1, ip
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
	mydata->clust_size = bs.cluster_size;
	if (mydata->sect_size != cur_part_info.blksz) {
c7e1fbcc:	e59f3a3c 	ldr	r3, [pc, #2620]	; c7e20610 <do_fat_read_at+0xac0>
	mydata->fat_sect = bs.reserved;

	cursect = mydata->rootdir_sect
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
c7e1fbd0:	e0822400 	add	r2, r2, r0, lsl #8
c7e1fbd4:	e1a02802 	lsl	r2, r2, #16
	mydata->clust_size = bs.cluster_size;
	if (mydata->sect_size != cur_part_info.blksz) {
c7e1fbd8:	e593300c 	ldr	r3, [r3, #12]
	mydata->fat_sect = bs.reserved;

	cursect = mydata->rootdir_sect
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
c7e1fbdc:	e1a04822 	lsr	r4, r2, #16
		mydata->fatlength = bs.fat32_length;
	} else {
		mydata->fatlength = bs.fat_length;
	}

	mydata->fat_sect = bs.reserved;
c7e1fbe0:	e28dec09 	add	lr, sp, #2304	; 0x900
	cursect = mydata->rootdir_sect
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
	mydata->clust_size = bs.cluster_size;
	if (mydata->sect_size != cur_part_info.blksz) {
c7e1fbe4:	e1540003 	cmp	r4, r3
		mydata->fatlength = bs.fat32_length;
	} else {
		mydata->fatlength = bs.fat_length;
	}

	mydata->fat_sect = bs.reserved;
c7e1fbe8:	e1cecbbc 	strh	ip, [lr, #188]

	cursect = mydata->rootdir_sect
c7e1fbec:	e58d99c0 	str	r9, [sp, #2496]
		= mydata->fat_sect + mydata->fatlength * bs.fats;

	mydata->sect_size = (bs.sector_size[1] << 8) + bs.sector_size[0];
c7e1fbf0:	e1ce4cb4 	strh	r4, [lr, #196]
	mydata->clust_size = bs.cluster_size;
c7e1fbf4:	e1ce5cb6 	strh	r5, [lr, #198]
	if (mydata->sect_size != cur_part_info.blksz) {
c7e1fbf8:	0a000004 	beq	c7e1fc10 <do_fat_read_at+0xc0>
		printf("Error: FAT sector size mismatch (fs=%hu, dev=%lu)\n",
c7e1fbfc:	e1a01004 	mov	r1, r4
c7e1fc00:	e1a02003 	mov	r2, r3
c7e1fc04:	e59f0a08 	ldr	r0, [pc, #2568]	; c7e20614 <do_fat_read_at+0xac4>
c7e1fc08:	ebffa392 	bl	c7e08a58 <printf>
c7e1fc0c:	ea00027a 	b	c7e205fc <do_fat_read_at+0xaac>
				mydata->sect_size, cur_part_info.blksz);
		return -1;
	}

	if (mydata->fatsize == 32) {
c7e1fc10:	e59d39b4 	ldr	r3, [sp, #2484]
c7e1fc14:	e3530020 	cmp	r3, #32	; 0x20
c7e1fc18:	1a000005 	bne	c7e1fc34 <do_fat_read_at+0xe4>
		mydata->data_begin = mydata->rootdir_sect -
c7e1fc1c:	e3e03001 	mvn	r3, #1	; 0x1
c7e1fc20:	e0239395 	mla	r3, r5, r3, r9
c7e1fc24:	e3a01000 	mov	r1, #0	; 0x0
c7e1fc28:	e58d39c8 	str	r3, [sp, #2504]
c7e1fc2c:	e58d1030 	str	r1, [sp, #48]
c7e1fc30:	ea00000a 	b	c7e1fc60 <do_fat_read_at+0x110>
					(mydata->clust_size * 2);
	} else {
		rootdir_size = ((bs.dir_entries[1]  * (int)256 +
c7e1fc34:	e5dd3962 	ldrb	r3, [sp, #2402]
c7e1fc38:	e5dd0961 	ldrb	r0, [sp, #2401]
c7e1fc3c:	e1a01004 	mov	r1, r4
c7e1fc40:	e0800403 	add	r0, r0, r3, lsl #8
c7e1fc44:	e1a00280 	lsl	r0, r0, #5
c7e1fc48:	eb002a2e 	bl	c7e2a508 <__udivsi3>
				 bs.dir_entries[0]) *
				 sizeof(dir_entry)) /
				 mydata->sect_size;
		mydata->data_begin = mydata->rootdir_sect +
c7e1fc4c:	e3e03001 	mvn	r3, #1	; 0x1
c7e1fc50:	e0239395 	mla	r3, r5, r3, r9
c7e1fc54:	e0833000 	add	r3, r3, r0

	if (mydata->fatsize == 32) {
		mydata->data_begin = mydata->rootdir_sect -
					(mydata->clust_size * 2);
	} else {
		rootdir_size = ((bs.dir_entries[1]  * (int)256 +
c7e1fc58:	e58d0030 	str	r0, [sp, #48]
				 bs.dir_entries[0]) *
				 sizeof(dir_entry)) /
				 mydata->sect_size;
		mydata->data_begin = mydata->rootdir_sect +
c7e1fc5c:	e58d39c8 	str	r3, [sp, #2504]
					rootdir_size -
					(mydata->clust_size * 2);
	}

	mydata->fatbufnum = -1;
	mydata->fatbuf = memalign(ARCH_DMA_MINALIGN, FATBUFSIZE);
c7e1fc60:	e3a03006 	mov	r3, #6	; 0x6
c7e1fc64:	e0010493 	mul	r1, r3, r4
c7e1fc68:	e3a00040 	mov	r0, #64	; 0x40
		mydata->data_begin = mydata->rootdir_sect +
					rootdir_size -
					(mydata->clust_size * 2);
	}

	mydata->fatbufnum = -1;
c7e1fc6c:	e3e03000 	mvn	r3, #0	; 0x0
c7e1fc70:	e58d39cc 	str	r3, [sp, #2508]
	mydata->fatbuf = memalign(ARCH_DMA_MINALIGN, FATBUFSIZE);
c7e1fc74:	ebffa6d5 	bl	c7e097d0 <memalign>
	if (mydata->fatbuf == NULL) {
c7e1fc78:	e3500000 	cmp	r0, #0	; 0x0
					rootdir_size -
					(mydata->clust_size * 2);
	}

	mydata->fatbufnum = -1;
	mydata->fatbuf = memalign(ARCH_DMA_MINALIGN, FATBUFSIZE);
c7e1fc7c:	e58d09b0 	str	r0, [sp, #2480]
	if (mydata->fatbuf == NULL) {
c7e1fc80:	1a000001 	bne	c7e1fc8c <do_fat_read_at+0x13c>
c7e1fc84:	ea00025c 	b	c7e205fc <do_fat_read_at+0xaac>
	debug("Sector size: %d, cluster size: %d\n", mydata->sect_size,
	      mydata->clust_size);

	/* "cwd" is always the root... */
	while (ISDIRDELIM(*filename))
		filename++;
c7e1fc88:	e2866001 	add	r6, r6, #1	; 0x1
	       mydata->rootdir_sect * mydata->sect_size, mydata->data_begin);
	debug("Sector size: %d, cluster size: %d\n", mydata->sect_size,
	      mydata->clust_size);

	/* "cwd" is always the root... */
	while (ISDIRDELIM(*filename))
c7e1fc8c:	e5d63000 	ldrb	r3, [r6]
c7e1fc90:	e353005c 	cmp	r3, #92	; 0x5c
c7e1fc94:	1353002f 	cmpne	r3, #47	; 0x2f
c7e1fc98:	13a05000 	movne	r5, #0	; 0x0
c7e1fc9c:	03a05001 	moveq	r5, #1	; 0x1
c7e1fca0:	0afffff8 	beq	c7e1fc88 <do_fat_read_at+0x138>
		filename++;

	/* Make a copy of the filename and convert it to lowercase */
	strcpy(fnamecopy, filename);
c7e1fca4:	e28d4058 	add	r4, sp, #88	; 0x58
c7e1fca8:	e2444008 	sub	r4, r4, #8	; 0x8
c7e1fcac:	e1a01006 	mov	r1, r6
c7e1fcb0:	e1a00004 	mov	r0, r4
c7e1fcb4:	eb000ab2 	bl	c7e22784 <strcpy>
	downcase(fnamecopy);
c7e1fcb8:	e1a00004 	mov	r0, r4
c7e1fcbc:	ebfffd36 	bl	c7e1f19c <downcase>

	if (*fnamecopy == '\0') {
c7e1fcc0:	e5dd3050 	ldrb	r3, [sp, #80]
c7e1fcc4:	e3530000 	cmp	r3, #0	; 0x0
c7e1fcc8:	1a000007 	bne	c7e1fcec <do_fat_read_at+0x19c>
		if (!dols)
c7e1fccc:	e59d2a18 	ldr	r2, [sp, #2584]
c7e1fcd0:	e3520000 	cmp	r2, #0	; 0x0
c7e1fcd4:	0a000244 	beq	c7e205ec <do_fat_read_at+0xa9c>
			goto exit;
c7e1fcd8:	e58d301c 	str	r3, [sp, #28]
c7e1fcdc:	e2833002 	add	r3, r3, #2	; 0x2
c7e1fce0:	e58d3a18 	str	r3, [sp, #2584]
c7e1fce4:	e59fb92c 	ldr	fp, [pc, #2348]	; c7e20618 <do_fat_read_at+0xac8>
c7e1fce8:	ea000018 	b	c7e1fd50 <do_fat_read_at+0x200>

		dols = LS_ROOT;
	} else if ((idx = dirdelim(fnamecopy)) >= 0) {
c7e1fcec:	e1a00004 	mov	r0, r4
c7e1fcf0:	ebfffd48 	bl	c7e1f218 <dirdelim>
c7e1fcf4:	e3500000 	cmp	r0, #0	; 0x0
c7e1fcf8:	ba00000e 	blt	c7e1fd38 <do_fat_read_at+0x1e8>
		isdir = 1;
		fnamecopy[idx] = '\0';
c7e1fcfc:	e28dce9f 	add	ip, sp, #2544	; 0x9f0
c7e1fd00:	e28cc008 	add	ip, ip, #8	; 0x8
		subname = fnamecopy + idx + 1;
c7e1fd04:	e2802001 	add	r2, r0, #1	; 0x1
			goto exit;

		dols = LS_ROOT;
	} else if ((idx = dirdelim(fnamecopy)) >= 0) {
		isdir = 1;
		fnamecopy[idx] = '\0';
c7e1fd08:	e08c3000 	add	r3, ip, r0
c7e1fd0c:	e54359a8 	strb	r5, [r3, #-2472]
		subname = fnamecopy + idx + 1;
c7e1fd10:	e084b002 	add	fp, r4, r2
c7e1fd14:	ea000000 	b	c7e1fd1c <do_fat_read_at+0x1cc>

		/* Handle multiple delimiters */
		while (ISDIRDELIM(*subname))
			subname++;
c7e1fd18:	e28bb001 	add	fp, fp, #1	; 0x1
		isdir = 1;
		fnamecopy[idx] = '\0';
		subname = fnamecopy + idx + 1;

		/* Handle multiple delimiters */
		while (ISDIRDELIM(*subname))
c7e1fd1c:	e5db3000 	ldrb	r3, [fp]
c7e1fd20:	e353005c 	cmp	r3, #92	; 0x5c
c7e1fd24:	1353002f 	cmpne	r3, #47	; 0x2f
c7e1fd28:	0afffffa 	beq	c7e1fd18 <do_fat_read_at+0x1c8>
c7e1fd2c:	e3a0e001 	mov	lr, #1	; 0x1
c7e1fd30:	e58de01c 	str	lr, [sp, #28]
c7e1fd34:	ea000005 	b	c7e1fd50 <do_fat_read_at+0x200>
			subname++;
	} else if (dols) {
c7e1fd38:	e59d1a18 	ldr	r1, [sp, #2584]
c7e1fd3c:	e59fb8d4 	ldr	fp, [pc, #2260]	; c7e20618 <do_fat_read_at+0xac8>
c7e1fd40:	e3510000 	cmp	r1, #0	; 0x0
c7e1fd44:	13a01001 	movne	r1, #1	; 0x1
c7e1fd48:	03a01000 	moveq	r1, #0	; 0x0
c7e1fd4c:	e58d101c 	str	r1, [sp, #28]
c7e1fd50:	e59f28c4 	ldr	r2, [pc, #2244]	; c7e2061c <do_fat_read_at+0xacc>
c7e1fd54:	e3a05000 	mov	r5, #0	; 0x0
c7e1fd58:	e58d2018 	str	r2, [sp, #24]
c7e1fd5c:	e58d5020 	str	r5, [sp, #32]
c7e1fd60:	e58d5024 	str	r5, [sp, #36]
c7e1fd64:	e1a0a005 	mov	sl, r5

	j = 0;
	while (1) {
		int i;

		if (j == 0) {
c7e1fd68:	e35a0000 	cmp	sl, #0	; 0x0
c7e1fd6c:	1a00000a 	bne	c7e1fd9c <do_fat_read_at+0x24c>
			debug("FAT read sect=%d, clust_size=%d, DIRENTSPERBLOCK=%zd\n",
				cursect, mydata->clust_size, DIRENTSPERBLOCK);

			if (disk_read(cursect,
c7e1fd70:	e59d39b4 	ldr	r3, [sp, #2484]
c7e1fd74:	e1a00009 	mov	r0, r9
c7e1fd78:	e3530020 	cmp	r3, #32	; 0x20
c7e1fd7c:	028d3c09 	addeq	r3, sp, #2304	; 0x900
c7e1fd80:	13a01002 	movne	r1, #2	; 0x2
c7e1fd84:	01d31cb6 	ldrheq	r1, [r3, #198]
c7e1fd88:	e59f2890 	ldr	r2, [pc, #2192]	; c7e20620 <do_fat_read_at+0xad0>
c7e1fd8c:	ebfffd0d 	bl	c7e1f1c8 <disk_read>
c7e1fd90:	e3500000 	cmp	r0, #0	; 0x0
c7e1fd94:	ba000214 	blt	c7e205ec <do_fat_read_at+0xa9c>
					do_fat_read_at_block) < 0) {
				debug("Error: reading rootdir block\n");
				goto exit;
			}

			dentptr = (dir_entry *) do_fat_read_at_block;
c7e1fd98:	e59f5880 	ldr	r5, [pc, #2176]	; c7e20620 <do_fat_read_at+0xad0>
c7e1fd9c:	e3a04000 	mov	r4, #0	; 0x0
c7e1fda0:	e2856020 	add	r6, r5, #32	; 0x20
c7e1fda4:	e58d4034 	str	r4, [sp, #52]
c7e1fda8:	ea000072 	b	c7e1ff78 <do_fat_read_at+0x428>
		}

		for (i = 0; i < DIRENTSPERBLOCK; i++) {
			char s_name[14], l_name[VFAT_MAXLEN_BYTES];

			l_name[0] = '\0';
c7e1fdac:	e3a03000 	mov	r3, #0	; 0x0
c7e1fdb0:	e5cd3850 	strb	r3, [sp, #2128]
			if (dentptr->name[0] == DELETED_FLAG) {
c7e1fdb4:	e5564020 	ldrb	r4, [r6, #-32]
c7e1fdb8:	e35400e5 	cmp	r4, #229	; 0xe5
c7e1fdbc:	0a000069 	beq	c7e1ff68 <do_fat_read_at+0x418>
				dentptr++;
				continue;
			}
			if ((dentptr->attr & ATTR_VOLUME)) {
c7e1fdc0:	e5563015 	ldrb	r3, [r6, #-21]
c7e1fdc4:	e3130008 	tst	r3, #8	; 0x8
c7e1fdc8:	0a000019 	beq	c7e1fe34 <do_fat_read_at+0x2e4>
#ifdef CONFIG_SUPPORT_VFAT
				if ((dentptr->attr & ATTR_VFAT) == ATTR_VFAT &&
c7e1fdcc:	e203300f 	and	r3, r3, #15	; 0xf
c7e1fdd0:	e353000f 	cmp	r3, #15	; 0xf
c7e1fdd4:	1a000063 	bne	c7e1ff68 <do_fat_read_at+0x418>
c7e1fdd8:	e3140040 	tst	r4, #64	; 0x40
c7e1fddc:	0a000061 	beq	c7e1ff68 <do_fat_read_at+0x418>
				    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
					prevcksum =
c7e1fde0:	e556c013 	ldrb	ip, [r6, #-19]
						((dir_slot *)dentptr)->alias_checksum;

					get_vfatname(mydata,
c7e1fde4:	e28d4e85 	add	r4, sp, #2128	; 0x850
c7e1fde8:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
c7e1fdec:	e59d102c 	ldr	r1, [sp, #44]
c7e1fdf0:	e59f2828 	ldr	r2, [pc, #2088]	; c7e20620 <do_fat_read_at+0xad0>
c7e1fdf4:	e1a03005 	mov	r3, r5
			}
			if ((dentptr->attr & ATTR_VOLUME)) {
#ifdef CONFIG_SUPPORT_VFAT
				if ((dentptr->attr & ATTR_VFAT) == ATTR_VFAT &&
				    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
					prevcksum =
c7e1fdf8:	e58dc018 	str	ip, [sp, #24]
						((dir_slot *)dentptr)->alias_checksum;

					get_vfatname(mydata,
c7e1fdfc:	e58d4000 	str	r4, [sp]
c7e1fe00:	ebfffee2 	bl	c7e1f990 <get_vfatname>
						     root_cluster,
						     do_fat_read_at_block,
						     dentptr, l_name);

					if (dols == LS_ROOT) {
c7e1fe04:	e59dea18 	ldr	lr, [sp, #2584]
c7e1fe08:	e35e0002 	cmp	lr, #2	; 0x2
c7e1fe0c:	1a00001b 	bne	c7e1fe80 <do_fat_read_at+0x330>
						char dirc;
						int doit = 0;
						int isdir =
							(dentptr->attr & ATTR_DIR);

						if (isdir) {
c7e1fe10:	e5563015 	ldrb	r3, [r6, #-21]
c7e1fe14:	e3130010 	tst	r3, #16	; 0x10
								printf(" %8ld   %s%c\n",
									(long)FAT2CPU32(dentptr->size),
									l_name,
									dirc);
							} else {
								printf("            %s%c\n",
c7e1fe18:	11a01004 	movne	r1, r4
						char dirc;
						int doit = 0;
						int isdir =
							(dentptr->attr & ATTR_DIR);

						if (isdir) {
c7e1fe1c:	1a000026 	bne	c7e1febc <do_fat_read_at+0x36c>
							dirs++;
							dirc = '/';
							doit = 1;
						} else {
							dirc = ' ';
							if (l_name[0] != 0) {
c7e1fe20:	e5dd3850 	ldrb	r3, [sp, #2128]
c7e1fe24:	e3530000 	cmp	r3, #0	; 0x0
								doit = 1;
							}
						}
						if (doit) {
							if (dirc == ' ') {
								printf(" %8ld   %s%c\n",
c7e1fe28:	11a02004 	movne	r2, r4
							dirs++;
							dirc = '/';
							doit = 1;
						} else {
							dirc = ' ';
							if (l_name[0] != 0) {
c7e1fe2c:	1a00002c 	bne	c7e1fee4 <do_fat_read_at+0x394>
c7e1fe30:	ea00004c 	b	c7e1ff68 <do_fat_read_at+0x418>
				{
					/* Volume label or VFAT entry */
					dentptr++;
					continue;
				}
			} else if (dentptr->name[0] == 0) {
c7e1fe34:	e3540000 	cmp	r4, #0	; 0x0
c7e1fe38:	1a000007 	bne	c7e1fe5c <do_fat_read_at+0x30c>
				debug("RootDentname == NULL - %d\n", i);
				if (dols == LS_ROOT) {
c7e1fe3c:	e59dca18 	ldr	ip, [sp, #2584]
c7e1fe40:	e35c0002 	cmp	ip, #2	; 0x2
c7e1fe44:	1a0001e8 	bne	c7e205ec <do_fat_read_at+0xa9c>
					printf("\n%d file(s), %d dir(s)\n\n",
c7e1fe48:	e59d1020 	ldr	r1, [sp, #32]
c7e1fe4c:	e59d2024 	ldr	r2, [sp, #36]
c7e1fe50:	e59f07cc 	ldr	r0, [pc, #1996]	; c7e20624 <do_fat_read_at+0xad4>
c7e1fe54:	ebffa2ff 	bl	c7e08a58 <printf>
c7e1fe58:	ea0001e4 	b	c7e205f0 <do_fat_read_at+0xaa0>
					ret = 0;
				}
				goto exit;
			}
#ifdef CONFIG_SUPPORT_VFAT
			else if (dols == LS_ROOT &&
c7e1fe5c:	e59dea18 	ldr	lr, [sp, #2584]
c7e1fe60:	e35e0002 	cmp	lr, #2	; 0x2
c7e1fe64:	1a000005 	bne	c7e1fe80 <do_fat_read_at+0x330>
c7e1fe68:	e1a00005 	mov	r0, r5
c7e1fe6c:	ebfffd8d 	bl	c7e1f4a8 <mkcksum>
c7e1fe70:	e59d1018 	ldr	r1, [sp, #24]
c7e1fe74:	e1a00800 	lsl	r0, r0, #16
c7e1fe78:	e1510820 	cmp	r1, r0, lsr #16
c7e1fe7c:	0a000037 	beq	c7e1ff60 <do_fat_read_at+0x410>
				prevcksum = 0xffff;
				dentptr++;
				continue;
			}
#endif
			get_name(dentptr, s_name);
c7e1fe80:	e28d7e9e 	add	r7, sp, #2528	; 0x9e0
c7e1fe84:	e287700a 	add	r7, r7, #10	; 0xa
c7e1fe88:	e1a00005 	mov	r0, r5
c7e1fe8c:	e1a01007 	mov	r1, r7
c7e1fe90:	ebfffd90 	bl	c7e1f4d8 <get_name>

			if (dols == LS_ROOT) {
c7e1fe94:	e59d2a18 	ldr	r2, [sp, #2584]
c7e1fe98:	e3520002 	cmp	r2, #2	; 0x2
c7e1fe9c:	1a000018 	bne	c7e1ff04 <do_fat_read_at+0x3b4>
				int isdir = (dentptr->attr & ATTR_DIR);
				char dirc;
				int doit = 0;

				if (isdir) {
c7e1fea0:	e5563015 	ldrb	r3, [r6, #-21]
c7e1fea4:	e5dd29ea 	ldrb	r2, [sp, #2538]
c7e1fea8:	e3130010 	tst	r3, #16	; 0x10
c7e1feac:	0a000009 	beq	c7e1fed8 <do_fat_read_at+0x388>
					dirc = '/';
					if (s_name[0] != 0) {
c7e1feb0:	e3520000 	cmp	r2, #0	; 0x0
c7e1feb4:	0a00002b 	beq	c7e1ff68 <do_fat_read_at+0x418>
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
							(long)FAT2CPU32(dentptr->size),
							s_name, dirc);
					} else {
						printf("            %s%c\n",
c7e1feb8:	e1a01007 	mov	r1, r7
				int doit = 0;

				if (isdir) {
					dirc = '/';
					if (s_name[0] != 0) {
						dirs++;
c7e1febc:	e59d3024 	ldr	r3, [sp, #36]
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
							(long)FAT2CPU32(dentptr->size),
							s_name, dirc);
					} else {
						printf("            %s%c\n",
c7e1fec0:	e3a0202f 	mov	r2, #47	; 0x2f
				int doit = 0;

				if (isdir) {
					dirc = '/';
					if (s_name[0] != 0) {
						dirs++;
c7e1fec4:	e2833001 	add	r3, r3, #1	; 0x1
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
							(long)FAT2CPU32(dentptr->size),
							s_name, dirc);
					} else {
						printf("            %s%c\n",
c7e1fec8:	e59f0758 	ldr	r0, [pc, #1880]	; c7e20628 <do_fat_read_at+0xad8>
				int doit = 0;

				if (isdir) {
					dirc = '/';
					if (s_name[0] != 0) {
						dirs++;
c7e1fecc:	e58d3024 	str	r3, [sp, #36]
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
							(long)FAT2CPU32(dentptr->size),
							s_name, dirc);
					} else {
						printf("            %s%c\n",
c7e1fed0:	ebffa2e0 	bl	c7e08a58 <printf>
c7e1fed4:	ea000023 	b	c7e1ff68 <do_fat_read_at+0x418>
						dirs++;
						doit = 1;
					}
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
c7e1fed8:	e3520000 	cmp	r2, #0	; 0x0
c7e1fedc:	0a000021 	beq	c7e1ff68 <do_fat_read_at+0x418>
						doit = 1;
					}
				}
				if (doit) {
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
c7e1fee0:	e1a02007 	mov	r2, r7
						doit = 1;
					}
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
						files++;
c7e1fee4:	e59d4020 	ldr	r4, [sp, #32]
						doit = 1;
					}
				}
				if (doit) {
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
c7e1fee8:	e5161004 	ldr	r1, [r6, #-4]
						doit = 1;
					}
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
						files++;
c7e1feec:	e2844001 	add	r4, r4, #1	; 0x1
						doit = 1;
					}
				}
				if (doit) {
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
c7e1fef0:	e3a03020 	mov	r3, #32	; 0x20
c7e1fef4:	e59f0730 	ldr	r0, [pc, #1840]	; c7e2062c <do_fat_read_at+0xadc>
						doit = 1;
					}
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
						files++;
c7e1fef8:	e58d4020 	str	r4, [sp, #32]
						doit = 1;
					}
				}
				if (doit) {
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
c7e1fefc:	ebffa2d5 	bl	c7e08a58 <printf>
c7e1ff00:	ea000018 	b	c7e1ff68 <do_fat_read_at+0x418>
				}
				dentptr++;
				continue;
			}

			if (strcmp(fnamecopy, s_name)
c7e1ff04:	e28d4058 	add	r4, sp, #88	; 0x58
c7e1ff08:	e2444008 	sub	r4, r4, #8	; 0x8
c7e1ff0c:	e1a01007 	mov	r1, r7
c7e1ff10:	e1a00004 	mov	r0, r4
c7e1ff14:	eb000a51 	bl	c7e22860 <strcmp>
c7e1ff18:	e3500000 	cmp	r0, #0	; 0x0
c7e1ff1c:	0a000004 	beq	c7e1ff34 <do_fat_read_at+0x3e4>
c7e1ff20:	e1a00004 	mov	r0, r4
c7e1ff24:	e28d1e85 	add	r1, sp, #2128	; 0x850
c7e1ff28:	eb000a4c 	bl	c7e22860 <strcmp>
c7e1ff2c:	e3500000 	cmp	r0, #0	; 0x0
c7e1ff30:	1a00000c 	bne	c7e1ff68 <do_fat_read_at+0x418>
				       l_name);
				dentptr++;
				continue;
			}

			if (isdir && !(dentptr->attr & ATTR_DIR))
c7e1ff34:	e59dc01c 	ldr	ip, [sp, #28]
c7e1ff38:	e35c0000 	cmp	ip, #0	; 0x0
c7e1ff3c:	0a000004 	beq	c7e1ff54 <do_fat_read_at+0x404>
c7e1ff40:	e5d5300b 	ldrb	r3, [r5, #11]
c7e1ff44:	e3130010 	tst	r3, #16	; 0x10
c7e1ff48:	0a0001a7 	beq	c7e205ec <do_fat_read_at+0xa9c>
				goto exit;
c7e1ff4c:	e3a0e001 	mov	lr, #1	; 0x1
c7e1ff50:	e58de01c 	str	lr, [sp, #28]
c7e1ff54:	e3a01001 	mov	r1, #1	; 0x1
c7e1ff58:	e58d1028 	str	r1, [sp, #40]
c7e1ff5c:	ea00010d 	b	c7e20398 <do_fat_read_at+0x848>
c7e1ff60:	e59f26b4 	ldr	r2, [pc, #1716]	; c7e2061c <do_fat_read_at+0xacc>
c7e1ff64:	e58d2018 	str	r2, [sp, #24]
			}

			dentptr = (dir_entry *) do_fat_read_at_block;
		}

		for (i = 0; i < DIRENTSPERBLOCK; i++) {
c7e1ff68:	e59d3034 	ldr	r3, [sp, #52]
c7e1ff6c:	e2866020 	add	r6, r6, #32	; 0x20
c7e1ff70:	e2833001 	add	r3, r3, #1	; 0x1
c7e1ff74:	e58d3034 	str	r3, [sp, #52]
c7e1ff78:	e28d4c09 	add	r4, sp, #2304	; 0x900
c7e1ff7c:	e1d43cb4 	ldrh	r3, [r4, #196]
c7e1ff80:	e59dc034 	ldr	ip, [sp, #52]
c7e1ff84:	e2465020 	sub	r5, r6, #32	; 0x20
c7e1ff88:	e15c02a3 	cmp	ip, r3, lsr #5
c7e1ff8c:	3affff86 	bcc	c7e1fdac <do_fat_read_at+0x25c>
		 * root directory clusters when a cluster has been
		 * completely processed.
		 */
		++j;
		int rootdir_end = 0;
		if (mydata->fatsize == 32) {
c7e1ff90:	e59d39b4 	ldr	r3, [sp, #2484]
		/*
		 * On FAT32 we must fetch the FAT entries for the next
		 * root directory clusters when a cluster has been
		 * completely processed.
		 */
		++j;
c7e1ff94:	e28aa001 	add	sl, sl, #1	; 0x1
		int rootdir_end = 0;
		if (mydata->fatsize == 32) {
c7e1ff98:	e3530020 	cmp	r3, #32	; 0x20
c7e1ff9c:	1a000012 	bne	c7e1ffec <do_fat_read_at+0x49c>
			if (j == mydata->clust_size) {
c7e1ffa0:	e1d43cb6 	ldrh	r3, [r4, #198]
c7e1ffa4:	e15a0003 	cmp	sl, r3
c7e1ffa8:	1affff6e 	bne	c7e1fd68 <do_fat_read_at+0x218>
				int nxtsect = 0;
				int nxt_clust = 0;

				nxt_clust = get_fatent(mydata, root_cluster);
c7e1ffac:	e59d102c 	ldr	r1, [sp, #44]
c7e1ffb0:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
c7e1ffb4:	ebfffca4 	bl	c7e1f24c <get_fatent>
				rootdir_end = CHECK_CLUST(nxt_clust, 32);
c7e1ffb8:	e59f3670 	ldr	r3, [pc, #1648]	; c7e20630 <do_fat_read_at+0xae0>
				nxtsect = mydata->data_begin +
					(nxt_clust * mydata->clust_size);

				root_cluster = nxt_clust;

				cursect = nxtsect;
c7e1ffbc:	e28dec09 	add	lr, sp, #2304	; 0x900
			if (j == mydata->clust_size) {
				int nxtsect = 0;
				int nxt_clust = 0;

				nxt_clust = get_fatent(mydata, root_cluster);
				rootdir_end = CHECK_CLUST(nxt_clust, 32);
c7e1ffc0:	e2402002 	sub	r2, r0, #2	; 0x2
				nxtsect = mydata->data_begin +
					(nxt_clust * mydata->clust_size);

				root_cluster = nxt_clust;

				cursect = nxtsect;
c7e1ffc4:	e1de1cb6 	ldrh	r1, [lr, #198]
			if (j == mydata->clust_size) {
				int nxtsect = 0;
				int nxt_clust = 0;

				nxt_clust = get_fatent(mydata, root_cluster);
				rootdir_end = CHECK_CLUST(nxt_clust, 32);
c7e1ffc8:	e1520003 	cmp	r2, r3
c7e1ffcc:	93a02000 	movls	r2, #0	; 0x0
c7e1ffd0:	83a02001 	movhi	r2, #1	; 0x1
				nxtsect = mydata->data_begin +
					(nxt_clust * mydata->clust_size);

				root_cluster = nxt_clust;

				cursect = nxtsect;
c7e1ffd4:	e59d39c8 	ldr	r3, [sp, #2504]
c7e1ffd8:	e1a09000 	mov	r9, r0
		if (mydata->fatsize == 32) {
			if (j == mydata->clust_size) {
				int nxtsect = 0;
				int nxt_clust = 0;

				nxt_clust = get_fatent(mydata, root_cluster);
c7e1ffdc:	e58d002c 	str	r0, [sp, #44]
				nxtsect = mydata->data_begin +
					(nxt_clust * mydata->clust_size);

				root_cluster = nxt_clust;

				cursect = nxtsect;
c7e1ffe0:	e0293991 	mla	r9, r1, r9, r3
c7e1ffe4:	e3a0a000 	mov	sl, #0	; 0x0
c7e1ffe8:	ea000008 	b	c7e20010 <do_fat_read_at+0x4c0>
			}
		} else {
			if (j == PREFETCH_BLOCKS)
				j = 0;

			rootdir_end = (++cursect - mydata->rootdir_sect >=
c7e1ffec:	e59d39c0 	ldr	r3, [sp, #2496]
c7e1fff0:	e2899001 	add	r9, r9, #1	; 0x1
c7e1fff4:	e59d1030 	ldr	r1, [sp, #48]

				cursect = nxtsect;
				j = 0;
			}
		} else {
			if (j == PREFETCH_BLOCKS)
c7e1fff8:	e35a0002 	cmp	sl, #2	; 0x2
				j = 0;

			rootdir_end = (++cursect - mydata->rootdir_sect >=
c7e1fffc:	e0633009 	rsb	r3, r3, r9

				cursect = nxtsect;
				j = 0;
			}
		} else {
			if (j == PREFETCH_BLOCKS)
c7e20000:	03a0a000 	moveq	sl, #0	; 0x0
				j = 0;

			rootdir_end = (++cursect - mydata->rootdir_sect >=
c7e20004:	e1530001 	cmp	r3, r1
c7e20008:	33a02000 	movcc	r2, #0	; 0x0
c7e2000c:	23a02001 	movcs	r2, #1	; 0x1
				       rootdir_size);
		}

		/* If end of rootdir reached */
		if (rootdir_end) {
c7e20010:	e3520000 	cmp	r2, #0	; 0x0
c7e20014:	0affff53 	beq	c7e1fd68 <do_fat_read_at+0x218>
			if (dols == LS_ROOT) {
c7e20018:	e59d2a18 	ldr	r2, [sp, #2584]
c7e2001c:	e3520002 	cmp	r2, #2	; 0x2
c7e20020:	1a000171 	bne	c7e205ec <do_fat_read_at+0xa9c>
				printf("\n%d file(s), %d dir(s)\n\n",
c7e20024:	e59d1020 	ldr	r1, [sp, #32]
c7e20028:	e59d2024 	ldr	r2, [sp, #36]
c7e2002c:	e59f05f0 	ldr	r0, [pc, #1520]	; c7e20624 <do_fat_read_at+0xad4>
c7e20030:	ebffa288 	bl	c7e08a58 <printf>
c7e20034:	ea00016a 	b	c7e205e4 <do_fat_read_at+0xa94>
		int startsect = mydata->data_begin
			+ START(dentptr) * mydata->clust_size;
		dir_entry dent;
		char *nextname = NULL;

		dent = *dentptr;
c7e20038:	e28dce99 	add	ip, sp, #2448	; 0x990
c7e2003c:	e1a0e005 	mov	lr, r5
c7e20040:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
c7e20044:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
c7e20048:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
c7e2004c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
		dentptr = &dent;

		idx = dirdelim(subname);
c7e20050:	e1a0000b 	mov	r0, fp
c7e20054:	ebfffc6f 	bl	c7e1f218 <dirdelim>

		if (idx >= 0) {
c7e20058:	e3500000 	cmp	r0, #0	; 0x0
c7e2005c:	e58d004c 	str	r0, [sp, #76]
c7e20060:	ba000015 	blt	c7e200bc <do_fat_read_at+0x56c>
			subname[idx] = '\0';
			nextname = subname + idx + 1;
c7e20064:	e2802001 	add	r2, r0, #1	; 0x1
		dentptr = &dent;

		idx = dirdelim(subname);

		if (idx >= 0) {
			subname[idx] = '\0';
c7e20068:	e3a03000 	mov	r3, #0	; 0x0
			nextname = subname + idx + 1;
c7e2006c:	e08b2002 	add	r2, fp, r2
		dentptr = &dent;

		idx = dirdelim(subname);

		if (idx >= 0) {
			subname[idx] = '\0';
c7e20070:	e7cb3000 	strb	r3, [fp, r0]
			nextname = subname + idx + 1;
c7e20074:	e58d2038 	str	r2, [sp, #56]
c7e20078:	ea000002 	b	c7e20088 <do_fat_read_at+0x538>
			/* Handle multiple delimiters */
			while (ISDIRDELIM(*nextname))
				nextname++;
c7e2007c:	e59d3038 	ldr	r3, [sp, #56]
c7e20080:	e2833001 	add	r3, r3, #1	; 0x1
c7e20084:	e58d3038 	str	r3, [sp, #56]

		if (idx >= 0) {
			subname[idx] = '\0';
			nextname = subname + idx + 1;
			/* Handle multiple delimiters */
			while (ISDIRDELIM(*nextname))
c7e20088:	e59d4038 	ldr	r4, [sp, #56]
c7e2008c:	e5d43000 	ldrb	r3, [r4]
c7e20090:	e353005c 	cmp	r3, #92	; 0x5c
c7e20094:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20098:	0afffff7 	beq	c7e2007c <do_fat_read_at+0x52c>
				nextname++;
			if (dols && *nextname == '\0')
c7e2009c:	e59dca18 	ldr	ip, [sp, #2584]
c7e200a0:	e35c0000 	cmp	ip, #0	; 0x0
c7e200a4:	0a000011 	beq	c7e200f0 <do_fat_read_at+0x5a0>
c7e200a8:	e59de028 	ldr	lr, [sp, #40]
c7e200ac:	e3530000 	cmp	r3, #0	; 0x0
c7e200b0:	03a0e000 	moveq	lr, #0	; 0x0
c7e200b4:	e58de028 	str	lr, [sp, #40]
c7e200b8:	ea00000c 	b	c7e200f0 <do_fat_read_at+0x5a0>
				firsttime = 0;
		} else {
			if (dols && firsttime) {
c7e200bc:	e59d1a18 	ldr	r1, [sp, #2584]
c7e200c0:	e59d2028 	ldr	r2, [sp, #40]
c7e200c4:	e3510000 	cmp	r1, #0	; 0x0
c7e200c8:	13520000 	cmpne	r2, #0	; 0x0
c7e200cc:	03a03000 	moveq	r3, #0	; 0x0
c7e200d0:	13a03001 	movne	r3, #1	; 0x1
c7e200d4:	058d301c 	streq	r3, [sp, #28]
c7e200d8:	058d1048 	streq	r1, [sp, #72]
c7e200dc:	058d3038 	streq	r3, [sp, #56]
c7e200e0:	0a000006 	beq	c7e20100 <do_fat_read_at+0x5b0>
c7e200e4:	e3a03000 	mov	r3, #0	; 0x0
c7e200e8:	e58d3028 	str	r3, [sp, #40]
c7e200ec:	e58d3038 	str	r3, [sp, #56]
c7e200f0:	e3a04000 	mov	r4, #0	; 0x0
c7e200f4:	e3a0c001 	mov	ip, #1	; 0x1
c7e200f8:	e58d4048 	str	r4, [sp, #72]
c7e200fc:	e58dc01c 	str	ip, [sp, #28]
static dir_entry *get_dentfromdir(fsdata *mydata, int startsect,
				  char *filename, dir_entry *retdent,
				  int dols)
{
	__u16 prevcksum = 0xffff;
	__u32 curclust = START(retdent);
c7e20100:	e59d39b4 	ldr	r3, [sp, #2484]
c7e20104:	e28dec09 	add	lr, sp, #2304	; 0x900
c7e20108:	e3530020 	cmp	r3, #32	; 0x20
c7e2010c:	028d2c09 	addeq	r2, sp, #2304	; 0x900
c7e20110:	01d23ab4 	ldrheq	r3, [r2, #164]
c7e20114:	e1de1aba 	ldrh	r1, [lr, #170]
c7e20118:	01a00803 	lsleq	r0, r3, #16
c7e2011c:	e59f34f8 	ldr	r3, [pc, #1272]	; c7e2061c <do_fat_read_at+0xacc>
c7e20120:	13a00000 	movne	r0, #0	; 0x0
c7e20124:	e3a0a000 	mov	sl, #0	; 0x0
c7e20128:	e58d3040 	str	r3, [sp, #64]
c7e2012c:	e0807001 	add	r7, r0, r1
c7e20130:	e1a0900a 	mov	r9, sl
	while (1) {
		dir_entry *dentptr;

		int i;

		if (get_cluster(mydata, curclust, get_dentfromdir_block,
c7e20134:	e28d4c09 	add	r4, sp, #2304	; 0x900
c7e20138:	e1d42cb4 	ldrh	r2, [r4, #196]
c7e2013c:	e1d43cb6 	ldrh	r3, [r4, #198]
c7e20140:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
c7e20144:	e0030392 	mul	r3, r2, r3
c7e20148:	e1a01007 	mov	r1, r7
c7e2014c:	e59f24e0 	ldr	r2, [pc, #1248]	; c7e20634 <do_fat_read_at+0xae4>
c7e20150:	ebfffdb0 	bl	c7e1f818 <get_cluster>
c7e20154:	e3500000 	cmp	r0, #0	; 0x0
c7e20158:	1a00007d 	bne	c7e20354 <do_fat_read_at+0x804>
c7e2015c:	e58d003c 	str	r0, [sp, #60]
c7e20160:	e59f44d0 	ldr	r4, [pc, #1232]	; c7e20638 <do_fat_read_at+0xae8>
c7e20164:	ea000064 	b	c7e202fc <do_fat_read_at+0x7ac>

		for (i = 0; i < DIRENTSPERCLUST; i++) {
			char s_name[14], l_name[VFAT_MAXLEN_BYTES];

			l_name[0] = '\0';
			if (dentptr->name[0] == DELETED_FLAG) {
c7e20168:	e5542020 	ldrb	r2, [r4, #-32]
		dentptr = (dir_entry *)get_dentfromdir_block;

		for (i = 0; i < DIRENTSPERCLUST; i++) {
			char s_name[14], l_name[VFAT_MAXLEN_BYTES];

			l_name[0] = '\0';
c7e2016c:	e3a03000 	mov	r3, #0	; 0x0
			if (dentptr->name[0] == DELETED_FLAG) {
c7e20170:	e35200e5 	cmp	r2, #229	; 0xe5
		dentptr = (dir_entry *)get_dentfromdir_block;

		for (i = 0; i < DIRENTSPERCLUST; i++) {
			char s_name[14], l_name[VFAT_MAXLEN_BYTES];

			l_name[0] = '\0';
c7e20174:	e5cd3850 	strb	r3, [sp, #2128]
			if (dentptr->name[0] == DELETED_FLAG) {
c7e20178:	0a00005b 	beq	c7e202ec <do_fat_read_at+0x79c>
				dentptr++;
				continue;
			}
			if ((dentptr->attr & ATTR_VOLUME)) {
c7e2017c:	e5543015 	ldrb	r3, [r4, #-21]
c7e20180:	e3130008 	tst	r3, #8	; 0x8
c7e20184:	0a000015 	beq	c7e201e0 <do_fat_read_at+0x690>
#ifdef CONFIG_SUPPORT_VFAT
				if ((dentptr->attr & ATTR_VFAT) == ATTR_VFAT &&
c7e20188:	e203300f 	and	r3, r3, #15	; 0xf
c7e2018c:	e353000f 	cmp	r3, #15	; 0xf
c7e20190:	1a000055 	bne	c7e202ec <do_fat_read_at+0x79c>
c7e20194:	e3120040 	tst	r2, #64	; 0x40
c7e20198:	0a000053 	beq	c7e202ec <do_fat_read_at+0x79c>
				    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
					prevcksum = ((dir_slot *)dentptr)->alias_checksum;
					get_vfatname(mydata, curclust,
c7e2019c:	e28d5e85 	add	r5, sp, #2128	; 0x850
c7e201a0:	e58d5000 	str	r5, [sp]
			}
			if ((dentptr->attr & ATTR_VOLUME)) {
#ifdef CONFIG_SUPPORT_VFAT
				if ((dentptr->attr & ATTR_VFAT) == ATTR_VFAT &&
				    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
					prevcksum = ((dir_slot *)dentptr)->alias_checksum;
c7e201a4:	e554c013 	ldrb	ip, [r4, #-19]
					get_vfatname(mydata, curclust,
c7e201a8:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
c7e201ac:	e1a01007 	mov	r1, r7
c7e201b0:	e59f247c 	ldr	r2, [pc, #1148]	; c7e20634 <do_fat_read_at+0xae4>
c7e201b4:	e1a03006 	mov	r3, r6
			}
			if ((dentptr->attr & ATTR_VOLUME)) {
#ifdef CONFIG_SUPPORT_VFAT
				if ((dentptr->attr & ATTR_VFAT) == ATTR_VFAT &&
				    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
					prevcksum = ((dir_slot *)dentptr)->alias_checksum;
c7e201b8:	e58dc040 	str	ip, [sp, #64]
					get_vfatname(mydata, curclust,
c7e201bc:	ebfffdf3 	bl	c7e1f990 <get_vfatname>
						     get_dentfromdir_block,
						     dentptr, l_name);
					if (dols) {
c7e201c0:	e59de048 	ldr	lr, [sp, #72]
c7e201c4:	e35e0000 	cmp	lr, #0	; 0x0
c7e201c8:	0a000004 	beq	c7e201e0 <do_fat_read_at+0x690>
						char dirc;
						int doit = 0;

						isdir = (dentptr->attr & ATTR_DIR);

						if (isdir) {
c7e201cc:	e5543015 	ldrb	r3, [r4, #-21]
c7e201d0:	e3130010 	tst	r3, #16	; 0x10
							dirs++;
							dirc = '/';
							doit = 1;
						} else {
							dirc = ' ';
							if (l_name[0] != 0) {
c7e201d4:	05dd3850 	ldrbeq	r3, [sp, #2128]
						char dirc;
						int doit = 0;

						isdir = (dentptr->attr & ATTR_DIR);

						if (isdir) {
c7e201d8:	0a000026 	beq	c7e20278 <do_fat_read_at+0x728>
c7e201dc:	ea00001f 	b	c7e20260 <do_fat_read_at+0x710>
					/* Volume label or VFAT entry */
					dentptr++;
					continue;
				}
			}
			if (dentptr->name[0] == 0) {
c7e201e0:	e5543020 	ldrb	r3, [r4, #-32]
c7e201e4:	e3530000 	cmp	r3, #0	; 0x0
c7e201e8:	1a000007 	bne	c7e2020c <do_fat_read_at+0x6bc>
				if (dols) {
c7e201ec:	e59d1048 	ldr	r1, [sp, #72]
c7e201f0:	e3510000 	cmp	r1, #0	; 0x0
c7e201f4:	0a000056 	beq	c7e20354 <do_fat_read_at+0x804>
					printf("\n%d file(s), %d dir(s)\n\n",
c7e201f8:	e1a01009 	mov	r1, r9
c7e201fc:	e1a0200a 	mov	r2, sl
c7e20200:	e59f041c 	ldr	r0, [pc, #1052]	; c7e20624 <do_fat_read_at+0xad4>
c7e20204:	ebffa213 	bl	c7e08a58 <printf>
c7e20208:	ea000051 	b	c7e20354 <do_fat_read_at+0x804>
				}
				debug("Dentname == NULL - %d\n", i);
				return NULL;
			}
#ifdef CONFIG_SUPPORT_VFAT
			if (dols && mkcksum(dentptr->name) == prevcksum) {
c7e2020c:	e59d2048 	ldr	r2, [sp, #72]
c7e20210:	e3520000 	cmp	r2, #0	; 0x0
c7e20214:	0a000005 	beq	c7e20230 <do_fat_read_at+0x6e0>
c7e20218:	e1a00006 	mov	r0, r6
c7e2021c:	ebfffca1 	bl	c7e1f4a8 <mkcksum>
c7e20220:	e59d3040 	ldr	r3, [sp, #64]
c7e20224:	e1a00800 	lsl	r0, r0, #16
c7e20228:	e1530820 	cmp	r3, r0, lsr #16
c7e2022c:	0a00002c 	beq	c7e202e4 <do_fat_read_at+0x794>
				prevcksum = 0xffff;
				dentptr++;
				continue;
			}
#endif
			get_name(dentptr, s_name);
c7e20230:	e28d5e9e 	add	r5, sp, #2528	; 0x9e0
c7e20234:	e285500a 	add	r5, r5, #10	; 0xa
c7e20238:	e1a00006 	mov	r0, r6
c7e2023c:	e1a01005 	mov	r1, r5
c7e20240:	ebfffca4 	bl	c7e1f4d8 <get_name>
			if (dols) {
c7e20244:	e59dc048 	ldr	ip, [sp, #72]
c7e20248:	e35c0000 	cmp	ip, #0	; 0x0
c7e2024c:	0a000012 	beq	c7e2029c <do_fat_read_at+0x74c>
				int isdir = (dentptr->attr & ATTR_DIR);
				char dirc;
				int doit = 0;

				if (isdir) {
c7e20250:	e5543015 	ldrb	r3, [r4, #-21]
c7e20254:	e3130010 	tst	r3, #16	; 0x10
					dirs++;
					dirc = '/';
					doit = 1;
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
c7e20258:	05dd39ea 	ldrbeq	r3, [sp, #2538]
			if (dols) {
				int isdir = (dentptr->attr & ATTR_DIR);
				char dirc;
				int doit = 0;

				if (isdir) {
c7e2025c:	0a000005 	beq	c7e20278 <do_fat_read_at+0x728>
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
							(long)FAT2CPU32(dentptr->size),
							s_name, dirc);
					} else {
						printf("            %s%c\n",
c7e20260:	e1a01005 	mov	r1, r5
c7e20264:	e3a0202f 	mov	r2, #47	; 0x2f
c7e20268:	e59f03b8 	ldr	r0, [pc, #952]	; c7e20628 <do_fat_read_at+0xad8>
				int isdir = (dentptr->attr & ATTR_DIR);
				char dirc;
				int doit = 0;

				if (isdir) {
					dirs++;
c7e2026c:	e28aa001 	add	sl, sl, #1	; 0x1
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
							(long)FAT2CPU32(dentptr->size),
							s_name, dirc);
					} else {
						printf("            %s%c\n",
c7e20270:	ebffa1f8 	bl	c7e08a58 <printf>
c7e20274:	ea00001c 	b	c7e202ec <do_fat_read_at+0x79c>
					dirs++;
					dirc = '/';
					doit = 1;
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
c7e20278:	e3530000 	cmp	r3, #0	; 0x0
c7e2027c:	0a00001a 	beq	c7e202ec <do_fat_read_at+0x79c>
					}
				}

				if (doit) {
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
c7e20280:	e1a02005 	mov	r2, r5
c7e20284:	e5141004 	ldr	r1, [r4, #-4]
c7e20288:	e3a03020 	mov	r3, #32	; 0x20
c7e2028c:	e59f0398 	ldr	r0, [pc, #920]	; c7e2062c <do_fat_read_at+0xadc>
					dirc = '/';
					doit = 1;
				} else {
					dirc = ' ';
					if (s_name[0] != 0) {
						files++;
c7e20290:	e2899001 	add	r9, r9, #1	; 0x1
					}
				}

				if (doit) {
					if (dirc == ' ') {
						printf(" %8ld   %s%c\n",
c7e20294:	ebffa1ef 	bl	c7e08a58 <printf>
c7e20298:	ea000013 	b	c7e202ec <do_fat_read_at+0x79c>

				dentptr++;
				continue;
			}

			if (strcmp(filename, s_name)
c7e2029c:	e1a01005 	mov	r1, r5
c7e202a0:	e1a0000b 	mov	r0, fp
c7e202a4:	eb00096d 	bl	c7e22860 <strcmp>
c7e202a8:	e3500000 	cmp	r0, #0	; 0x0
c7e202ac:	0a000004 	beq	c7e202c4 <do_fat_read_at+0x774>
c7e202b0:	e1a0000b 	mov	r0, fp
c7e202b4:	e28d1e85 	add	r1, sp, #2128	; 0x850
c7e202b8:	eb000968 	bl	c7e22860 <strcmp>
c7e202bc:	e3500000 	cmp	r0, #0	; 0x0
c7e202c0:	1a000009 	bne	c7e202ec <do_fat_read_at+0x79c>
				debug("Mismatch: |%s|%s|\n", s_name, l_name);
				dentptr++;
				continue;
			}

			memcpy(retdent, dentptr, sizeof(dir_entry));
c7e202c4:	e1a01006 	mov	r1, r6
c7e202c8:	e28d0e99 	add	r0, sp, #2448	; 0x990
c7e202cc:	e3a02020 	mov	r2, #32	; 0x20
c7e202d0:	eb000a59 	bl	c7e22c3c <memcpy>
			if (dols && !isdir)
				ret = 0;
			goto exit;
		}

		if (isdir && !(dentptr->attr & ATTR_DIR))
c7e202d4:	e59de01c 	ldr	lr, [sp, #28]
c7e202d8:	e35e0000 	cmp	lr, #0	; 0x0
c7e202dc:	1a000025 	bne	c7e20378 <do_fat_read_at+0x828>
c7e202e0:	ea000027 	b	c7e20384 <do_fat_read_at+0x834>
c7e202e4:	e59f1330 	ldr	r1, [pc, #816]	; c7e2061c <do_fat_read_at+0xacc>
c7e202e8:	e58d1040 	str	r1, [sp, #64]
			return NULL;
		}

		dentptr = (dir_entry *)get_dentfromdir_block;

		for (i = 0; i < DIRENTSPERCLUST; i++) {
c7e202ec:	e59d203c 	ldr	r2, [sp, #60]
c7e202f0:	e2844020 	add	r4, r4, #32	; 0x20
c7e202f4:	e2822001 	add	r2, r2, #1	; 0x1
c7e202f8:	e58d203c 	str	r2, [sp, #60]
c7e202fc:	e28d3c09 	add	r3, sp, #2304	; 0x900
c7e20300:	e1d32cb4 	ldrh	r2, [r3, #196]
c7e20304:	e1d33cb6 	ldrh	r3, [r3, #198]
c7e20308:	e59dc03c 	ldr	ip, [sp, #60]
c7e2030c:	e0030392 	mul	r3, r2, r3
c7e20310:	e15c02a3 	cmp	ip, r3, lsr #5
c7e20314:	e2446020 	sub	r6, r4, #32	; 0x20
c7e20318:	3affff92 	bcc	c7e20168 <do_fat_read_at+0x618>
			      (dentptr->attr & ATTR_DIR) ? "(DIR)" : "");

			return retdent;
		}

		curclust = get_fatent(mydata, curclust);
c7e2031c:	e1a01007 	mov	r1, r7
c7e20320:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
c7e20324:	ebfffbc8 	bl	c7e1f24c <get_fatent>
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e20328:	e3500001 	cmp	r0, #1	; 0x1
			      (dentptr->attr & ATTR_DIR) ? "(DIR)" : "");

			return retdent;
		}

		curclust = get_fatent(mydata, curclust);
c7e2032c:	e1a07000 	mov	r7, r0
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e20330:	9a000005 	bls	c7e2034c <do_fat_read_at+0x7fc>
c7e20334:	e59d39b4 	ldr	r3, [sp, #2484]
c7e20338:	e3530020 	cmp	r3, #32	; 0x20
c7e2033c:	e59f32f8 	ldr	r3, [pc, #760]	; c7e2063c <do_fat_read_at+0xaec>
c7e20340:	03e032ff 	mvneq	r3, #-268435441	; 0xf000000f
c7e20344:	e1500003 	cmp	r0, r3
c7e20348:	3affff79 	bcc	c7e20134 <do_fat_read_at+0x5e4>
			debug("curclust: 0x%x\n", curclust);
			printf("Invalid FAT entry\n");
c7e2034c:	e59f02ec 	ldr	r0, [pc, #748]	; c7e20640 <do_fat_read_at+0xaf0>
c7e20350:	ebffa1c0 	bl	c7e08a58 <printf>
			}
		}

		if (get_dentfromdir(mydata, startsect, subname, dentptr,
				     isdir ? 0 : dols) == NULL) {
			if (dols && !isdir)
c7e20354:	e59dea18 	ldr	lr, [sp, #2584]
c7e20358:	e59d101c 	ldr	r1, [sp, #28]
c7e2035c:	e25e3000 	subs	r3, lr, #0	; 0x0
c7e20360:	13a03001 	movne	r3, #1	; 0x1
c7e20364:	e3510000 	cmp	r1, #0	; 0x0
c7e20368:	13a03000 	movne	r3, #0	; 0x0
c7e2036c:	e3530000 	cmp	r3, #0	; 0x0
c7e20370:	0a00009d 	beq	c7e205ec <do_fat_read_at+0xa9c>
c7e20374:	ea00009a 	b	c7e205e4 <do_fat_read_at+0xa94>
				ret = 0;
			goto exit;
		}

		if (isdir && !(dentptr->attr & ATTR_DIR))
c7e20378:	e5dd399b 	ldrb	r3, [sp, #2459]
c7e2037c:	e3130010 	tst	r3, #16	; 0x10
c7e20380:	0a000099 	beq	c7e205ec <do_fat_read_at+0xa9c>
			goto exit;

		if (idx >= 0)
c7e20384:	e59d304c 	ldr	r3, [sp, #76]
c7e20388:	e59d2038 	ldr	r2, [sp, #56]
c7e2038c:	e3530000 	cmp	r3, #0	; 0x0
c7e20390:	a1a0b002 	movge	fp, r2
c7e20394:	e28d5e99 	add	r5, sp, #2448	; 0x990
	}
rootdir_done:

	firsttime = 1;

	while (isdir) {
c7e20398:	e59d401c 	ldr	r4, [sp, #28]
c7e2039c:	e3540000 	cmp	r4, #0	; 0x0
c7e203a0:	1affff24 	bne	c7e20038 <do_fat_read_at+0x4e8>
get_contents(fsdata *mydata, dir_entry *dentptr, unsigned long pos,
	     __u8 *buffer, unsigned long maxsize)
{
	unsigned long filesize = FAT2CPU32(dentptr->size), gotsize = 0;
	unsigned int bytesperclust = mydata->clust_size * mydata->sect_size;
	__u32 curclust = START(dentptr);
c7e203a4:	e59d39b4 	ldr	r3, [sp, #2484]

static long
get_contents(fsdata *mydata, dir_entry *dentptr, unsigned long pos,
	     __u8 *buffer, unsigned long maxsize)
{
	unsigned long filesize = FAT2CPU32(dentptr->size), gotsize = 0;
c7e203a8:	e595701c 	ldr	r7, [r5, #28]
	unsigned int bytesperclust = mydata->clust_size * mydata->sect_size;
	__u32 curclust = START(dentptr);
c7e203ac:	e3530020 	cmp	r3, #32	; 0x20
c7e203b0:	01d531b4 	ldrheq	r3, [r5, #20]
static long
get_contents(fsdata *mydata, dir_entry *dentptr, unsigned long pos,
	     __u8 *buffer, unsigned long maxsize)
{
	unsigned long filesize = FAT2CPU32(dentptr->size), gotsize = 0;
	unsigned int bytesperclust = mydata->clust_size * mydata->sect_size;
c7e203b4:	e28dec09 	add	lr, sp, #2304	; 0x900
	__u32 curclust = START(dentptr);
c7e203b8:	01a00803 	lsleq	r0, r3, #16
	__u32 endclust, newclust;
	unsigned long actsize;

	debug("Filesize: %ld bytes\n", filesize);

	if (pos >= filesize) {
c7e203bc:	e59d3014 	ldr	r3, [sp, #20]
get_contents(fsdata *mydata, dir_entry *dentptr, unsigned long pos,
	     __u8 *buffer, unsigned long maxsize)
{
	unsigned long filesize = FAT2CPU32(dentptr->size), gotsize = 0;
	unsigned int bytesperclust = mydata->clust_size * mydata->sect_size;
	__u32 curclust = START(dentptr);
c7e203c0:	11a00004 	movne	r0, r4
	__u32 endclust, newclust;
	unsigned long actsize;

	debug("Filesize: %ld bytes\n", filesize);

	if (pos >= filesize) {
c7e203c4:	e1530007 	cmp	r3, r7
static long
get_contents(fsdata *mydata, dir_entry *dentptr, unsigned long pos,
	     __u8 *buffer, unsigned long maxsize)
{
	unsigned long filesize = FAT2CPU32(dentptr->size), gotsize = 0;
	unsigned int bytesperclust = mydata->clust_size * mydata->sect_size;
c7e203c8:	e1deccb6 	ldrh	ip, [lr, #198]
c7e203cc:	e1de2cb4 	ldrh	r2, [lr, #196]
	__u32 curclust = START(dentptr);
c7e203d0:	e1d511ba 	ldrh	r1, [r5, #26]
	__u32 endclust, newclust;
	unsigned long actsize;

	debug("Filesize: %ld bytes\n", filesize);

	if (pos >= filesize) {
c7e203d4:	2a000082 	bcs	c7e205e4 <do_fat_read_at+0xa94>
		debug("Read position past EOF: %lu\n", pos);
		return gotsize;
	}

	if (maxsize > 0 && filesize > pos + maxsize)
c7e203d8:	e59d400c 	ldr	r4, [sp, #12]
c7e203dc:	e3540000 	cmp	r4, #0	; 0x0
c7e203e0:	0a000002 	beq	c7e203f0 <do_fat_read_at+0x8a0>
c7e203e4:	e0843003 	add	r3, r4, r3
c7e203e8:	e1570003 	cmp	r7, r3
c7e203ec:	21a07003 	movcs	r7, r3
static long
get_contents(fsdata *mydata, dir_entry *dentptr, unsigned long pos,
	     __u8 *buffer, unsigned long maxsize)
{
	unsigned long filesize = FAT2CPU32(dentptr->size), gotsize = 0;
	unsigned int bytesperclust = mydata->clust_size * mydata->sect_size;
c7e203f0:	e00b029c 	mul	fp, ip, r2
	__u32 curclust = START(dentptr);
c7e203f4:	e0805001 	add	r5, r0, r1
c7e203f8:	e1a0400b 	mov	r4, fp
c7e203fc:	ea00000a 	b	c7e2042c <do_fat_read_at+0x8dc>

	actsize = bytesperclust;

	/* go to cluster at pos */
	while (actsize <= pos) {
		curclust = get_fatent(mydata, curclust);
c7e20400:	ebfffb91 	bl	c7e1f24c <get_fatent>
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e20404:	e3500001 	cmp	r0, #1	; 0x1

	actsize = bytesperclust;

	/* go to cluster at pos */
	while (actsize <= pos) {
		curclust = get_fatent(mydata, curclust);
c7e20408:	e1a05000 	mov	r5, r0
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
			debug("curclust: 0x%x\n", curclust);
			debug("Invalid FAT entry\n");
			return gotsize;
		}
		actsize += bytesperclust;
c7e2040c:	e084400b 	add	r4, r4, fp
	actsize = bytesperclust;

	/* go to cluster at pos */
	while (actsize <= pos) {
		curclust = get_fatent(mydata, curclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e20410:	9a000073 	bls	c7e205e4 <do_fat_read_at+0xa94>
c7e20414:	e59d39b4 	ldr	r3, [sp, #2484]
c7e20418:	e3530020 	cmp	r3, #32	; 0x20
c7e2041c:	e59f3218 	ldr	r3, [pc, #536]	; c7e2063c <do_fat_read_at+0xaec>
c7e20420:	03e032ff 	mvneq	r3, #-268435441	; 0xf000000f
c7e20424:	e1500003 	cmp	r0, r3
c7e20428:	2a00006d 	bcs	c7e205e4 <do_fat_read_at+0xa94>
	debug("%ld bytes\n", filesize);

	actsize = bytesperclust;

	/* go to cluster at pos */
	while (actsize <= pos) {
c7e2042c:	e59dc014 	ldr	ip, [sp, #20]
		curclust = get_fatent(mydata, curclust);
c7e20430:	e1a01005 	mov	r1, r5
	debug("%ld bytes\n", filesize);

	actsize = bytesperclust;

	/* go to cluster at pos */
	while (actsize <= pos) {
c7e20434:	e154000c 	cmp	r4, ip
		curclust = get_fatent(mydata, curclust);
c7e20438:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
	debug("%ld bytes\n", filesize);

	actsize = bytesperclust;

	/* go to cluster at pos */
	while (actsize <= pos) {
c7e2043c:	9affffef 	bls	c7e20400 <do_fat_read_at+0x8b0>
		}
		actsize += bytesperclust;
	}

	/* actsize > pos */
	actsize -= bytesperclust;
c7e20440:	e06b3004 	rsb	r3, fp, r4

		if (idx >= 0)
			subname = nextname;
	}

	ret = get_contents(mydata, dentptr, pos, buffer, maxsize);
c7e20444:	e59de010 	ldr	lr, [sp, #16]
	actsize -= bytesperclust;
	filesize -= actsize;
	pos -= actsize;

	/* align to beginning of next cluster if any */
	if (pos) {
c7e20448:	e05c6003 	subs	r6, ip, r3
		actsize += bytesperclust;
	}

	/* actsize > pos */
	actsize -= bytesperclust;
	filesize -= actsize;
c7e2044c:	e063a007 	rsb	sl, r3, r7

		if (idx >= 0)
			subname = nextname;
	}

	ret = get_contents(mydata, dentptr, pos, buffer, maxsize);
c7e20450:	e58de044 	str	lr, [sp, #68]

		curclust = get_fatent(mydata, curclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
			debug("curclust: 0x%x\n", curclust);
			debug("Invalid FAT entry\n");
			return gotsize;
c7e20454:	01a07006 	moveq	r7, r6
	actsize -= bytesperclust;
	filesize -= actsize;
	pos -= actsize;

	/* align to beginning of next cluster if any */
	if (pos) {
c7e20458:	0a00001f 	beq	c7e204dc <do_fat_read_at+0x98c>
		actsize = min(filesize, bytesperclust);
		if (get_cluster(mydata, curclust, get_contents_vfatname_block,
c7e2045c:	e59f91e0 	ldr	r9, [pc, #480]	; c7e20644 <do_fat_read_at+0xaf4>
	filesize -= actsize;
	pos -= actsize;

	/* align to beginning of next cluster if any */
	if (pos) {
		actsize = min(filesize, bytesperclust);
c7e20460:	e15a000b 	cmp	sl, fp
c7e20464:	31a0400a 	movcc	r4, sl
c7e20468:	21a0400b 	movcs	r4, fp
		if (get_cluster(mydata, curclust, get_contents_vfatname_block,
c7e2046c:	e1a02009 	mov	r2, r9
c7e20470:	e1a03004 	mov	r3, r4
c7e20474:	ebfffce7 	bl	c7e1f818 <get_cluster>
c7e20478:	e3500000 	cmp	r0, #0	; 0x0
c7e2047c:	1a000040 	bne	c7e20584 <do_fat_read_at+0xa34>
				(int)actsize) != 0) {
			printf("Error reading cluster\n");
			return -1;
		}
		filesize -= actsize;
		actsize -= pos;
c7e20480:	e0667004 	rsb	r7, r6, r4
		memcpy(buffer, get_contents_vfatname_block + pos, actsize);
c7e20484:	e0891006 	add	r1, r9, r6
		if (get_cluster(mydata, curclust, get_contents_vfatname_block,
				(int)actsize) != 0) {
			printf("Error reading cluster\n");
			return -1;
		}
		filesize -= actsize;
c7e20488:	e064a00a 	rsb	sl, r4, sl
		actsize -= pos;
		memcpy(buffer, get_contents_vfatname_block + pos, actsize);
c7e2048c:	e59d0010 	ldr	r0, [sp, #16]
c7e20490:	e1a02007 	mov	r2, r7
c7e20494:	eb0009e8 	bl	c7e22c3c <memcpy>
		gotsize += actsize;
		if (!filesize)
c7e20498:	e35a0000 	cmp	sl, #0	; 0x0
c7e2049c:	0a000023 	beq	c7e20530 <do_fat_read_at+0x9e0>
			return gotsize;
		buffer += actsize;

		curclust = get_fatent(mydata, curclust);
c7e204a0:	e1a01005 	mov	r1, r5
c7e204a4:	e28d0e9b 	add	r0, sp, #2480	; 0x9b0
c7e204a8:	ebfffb67 	bl	c7e1f24c <get_fatent>
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e204ac:	e3500001 	cmp	r0, #1	; 0x1
		gotsize += actsize;
		if (!filesize)
			return gotsize;
		buffer += actsize;

		curclust = get_fatent(mydata, curclust);
c7e204b0:	e1a05000 	mov	r5, r0
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e204b4:	9a00001d 	bls	c7e20530 <do_fat_read_at+0x9e0>
c7e204b8:	e59d39b4 	ldr	r3, [sp, #2484]
c7e204bc:	e3530020 	cmp	r3, #32	; 0x20
c7e204c0:	e59f3174 	ldr	r3, [pc, #372]	; c7e2063c <do_fat_read_at+0xaec>
c7e204c4:	03e032ff 	mvneq	r3, #-268435441	; 0xf000000f
c7e204c8:	e1500003 	cmp	r0, r3
		actsize -= pos;
		memcpy(buffer, get_contents_vfatname_block + pos, actsize);
		gotsize += actsize;
		if (!filesize)
			return gotsize;
		buffer += actsize;
c7e204cc:	359d1044 	ldrcc	r1, [sp, #68]
c7e204d0:	30811007 	addcc	r1, r1, r7
c7e204d4:	358d1044 	strcc	r1, [sp, #68]

		curclust = get_fatent(mydata, curclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e204d8:	2a000014 	bcs	c7e20530 <do_fat_read_at+0x9e0>
			debug("curclust: 0x%x\n", curclust);
			debug("Invalid FAT entry\n");
			return gotsize;
c7e204dc:	e1a0400b 	mov	r4, fp
c7e204e0:	e1a06005 	mov	r6, r5
c7e204e4:	ea000014 	b	c7e2053c <do_fat_read_at+0x9ec>
	endclust = curclust;

	do {
		/* search for consecutive clusters */
		while (actsize < filesize) {
			newclust = get_fatent(mydata, endclust);
c7e204e8:	ebfffb57 	bl	c7e1f24c <get_fatent>
c7e204ec:	e1a0e000 	mov	lr, r0
			if ((newclust - 1) != endclust)
c7e204f0:	e24ec001 	sub	ip, lr, #1	; 0x1
c7e204f4:	e15c0005 	cmp	ip, r5
			return -1;
		}
		gotsize += actsize;
		return gotsize;
getit:
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
c7e204f8:	e1a01006 	mov	r1, r6
c7e204fc:	e59d2044 	ldr	r2, [sp, #68]
c7e20500:	e1a03004 	mov	r3, r4
c7e20504:	e1a00009 	mov	r0, r9

	do {
		/* search for consecutive clusters */
		while (actsize < filesize) {
			newclust = get_fatent(mydata, endclust);
			if ((newclust - 1) != endclust)
c7e20508:	1a000018 	bne	c7e20570 <do_fat_read_at+0xa20>
				goto getit;
			if (CHECK_CLUST(newclust, mydata->fatsize)) {
c7e2050c:	e35e0001 	cmp	lr, #1	; 0x1
				debug("curclust: 0x%x\n", newclust);
				debug("Invalid FAT entry\n");
				return gotsize;
			}
			endclust = newclust;
			actsize += bytesperclust;
c7e20510:	e084400b 	add	r4, r4, fp
		/* search for consecutive clusters */
		while (actsize < filesize) {
			newclust = get_fatent(mydata, endclust);
			if ((newclust - 1) != endclust)
				goto getit;
			if (CHECK_CLUST(newclust, mydata->fatsize)) {
c7e20514:	9a000005 	bls	c7e20530 <do_fat_read_at+0x9e0>
c7e20518:	e59d39b4 	ldr	r3, [sp, #2484]
c7e2051c:	e3530020 	cmp	r3, #32	; 0x20
c7e20520:	e59f3114 	ldr	r3, [pc, #276]	; c7e2063c <do_fat_read_at+0xaec>
c7e20524:	03e032ff 	mvneq	r3, #-268435441	; 0xf000000f
c7e20528:	e15e0003 	cmp	lr, r3
c7e2052c:	3a000001 	bcc	c7e20538 <do_fat_read_at+0x9e8>
				debug("curclust: 0x%x\n", newclust);
				debug("Invalid FAT entry\n");
				return gotsize;
c7e20530:	e1a04007 	mov	r4, r7
c7e20534:	ea00002d 	b	c7e205f0 <do_fat_read_at+0xaa0>
			}
			endclust = newclust;
			actsize += bytesperclust;
c7e20538:	e1a0500e 	mov	r5, lr
c7e2053c:	e28d9e9b 	add	r9, sp, #2480	; 0x9b0
	actsize = bytesperclust;
	endclust = curclust;

	do {
		/* search for consecutive clusters */
		while (actsize < filesize) {
c7e20540:	e154000a 	cmp	r4, sl
			newclust = get_fatent(mydata, endclust);
c7e20544:	e1a01005 	mov	r1, r5
c7e20548:	e1a00009 	mov	r0, r9
	actsize = bytesperclust;
	endclust = curclust;

	do {
		/* search for consecutive clusters */
		while (actsize < filesize) {
c7e2054c:	3affffe5 	bcc	c7e204e8 <do_fat_read_at+0x998>
			actsize += bytesperclust;
		}

		/* get remaining bytes */
		actsize = filesize;
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
c7e20550:	e1a01006 	mov	r1, r6
c7e20554:	e59d2044 	ldr	r2, [sp, #68]
c7e20558:	e1a0300a 	mov	r3, sl
c7e2055c:	ebfffcad 	bl	c7e1f818 <get_cluster>
c7e20560:	e3500000 	cmp	r0, #0	; 0x0
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += actsize;
		return gotsize;
c7e20564:	008a4007 	addeq	r4, sl, r7
			actsize += bytesperclust;
		}

		/* get remaining bytes */
		actsize = filesize;
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
c7e20568:	0a000020 	beq	c7e205f0 <do_fat_read_at+0xaa0>
c7e2056c:	ea000004 	b	c7e20584 <do_fat_read_at+0xa34>
			return -1;
		}
		gotsize += actsize;
		return gotsize;
getit:
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
c7e20570:	ebfffca8 	bl	c7e1f818 <get_cluster>
c7e20574:	e3500000 	cmp	r0, #0	; 0x0
		}
		gotsize += (int)actsize;
		filesize -= actsize;
		buffer += actsize;

		curclust = get_fatent(mydata, endclust);
c7e20578:	e1a01005 	mov	r1, r5
c7e2057c:	e1a00009 	mov	r0, r9
			return -1;
		}
		gotsize += actsize;
		return gotsize;
getit:
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
c7e20580:	0a000002 	beq	c7e20590 <do_fat_read_at+0xa40>
			printf("Error reading cluster\n");
c7e20584:	e59f00bc 	ldr	r0, [pc, #188]	; c7e20648 <do_fat_read_at+0xaf8>
c7e20588:	ebffa132 	bl	c7e08a58 <printf>
c7e2058c:	ea000016 	b	c7e205ec <do_fat_read_at+0xa9c>
		}
		gotsize += (int)actsize;
		filesize -= actsize;
		buffer += actsize;

		curclust = get_fatent(mydata, endclust);
c7e20590:	ebfffb2d 	bl	c7e1f24c <get_fatent>
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += (int)actsize;
		filesize -= actsize;
		buffer += actsize;
c7e20594:	e59d2044 	ldr	r2, [sp, #68]

		curclust = get_fatent(mydata, endclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e20598:	e3500001 	cmp	r0, #1	; 0x1
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += (int)actsize;
		filesize -= actsize;
		buffer += actsize;
c7e2059c:	e0822004 	add	r2, r2, r4

		curclust = get_fatent(mydata, endclust);
c7e205a0:	e1a06000 	mov	r6, r0
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += (int)actsize;
		filesize -= actsize;
		buffer += actsize;
c7e205a4:	e58d2044 	str	r2, [sp, #68]
getit:
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += (int)actsize;
c7e205a8:	e0877004 	add	r7, r7, r4
		filesize -= actsize;
		buffer += actsize;

		curclust = get_fatent(mydata, endclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e205ac:	9a000008 	bls	c7e205d4 <do_fat_read_at+0xa84>
c7e205b0:	e59d39b4 	ldr	r3, [sp, #2484]
		if (get_cluster(mydata, curclust, buffer, (int)actsize) != 0) {
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += (int)actsize;
		filesize -= actsize;
c7e205b4:	e064a00a 	rsb	sl, r4, sl
		buffer += actsize;

		curclust = get_fatent(mydata, endclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
c7e205b8:	e3530020 	cmp	r3, #32	; 0x20
c7e205bc:	e59f3078 	ldr	r3, [pc, #120]	; c7e2063c <do_fat_read_at+0xaec>
c7e205c0:	03e032ff 	mvneq	r3, #-268435441	; 0xf000000f
c7e205c4:	e1500003 	cmp	r0, r3
			printf("Error reading cluster\n");
			return -1;
		}
		gotsize += (int)actsize;
		filesize -= actsize;
		buffer += actsize;
c7e205c8:	31a0400b 	movcc	r4, fp
c7e205cc:	31a0e000 	movcc	lr, r0
c7e205d0:	3affffd8 	bcc	c7e20538 <do_fat_read_at+0x9e8>

		curclust = get_fatent(mydata, endclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
			debug("curclust: 0x%x\n", curclust);
			printf("Invalid FAT entry\n");
c7e205d4:	e59f0064 	ldr	r0, [pc, #100]	; c7e20640 <do_fat_read_at+0xaf0>
			return gotsize;
c7e205d8:	e1a04007 	mov	r4, r7
		buffer += actsize;

		curclust = get_fatent(mydata, endclust);
		if (CHECK_CLUST(curclust, mydata->fatsize)) {
			debug("curclust: 0x%x\n", curclust);
			printf("Invalid FAT entry\n");
c7e205dc:	ebffa11d 	bl	c7e08a58 <printf>
c7e205e0:	ea000002 	b	c7e205f0 <do_fat_read_at+0xaa0>
			return gotsize;
c7e205e4:	e3a04000 	mov	r4, #0	; 0x0
c7e205e8:	ea000000 	b	c7e205f0 <do_fat_read_at+0xaa0>
	}

	ret = get_contents(mydata, dentptr, pos, buffer, maxsize);
	debug("Size: %d, got: %ld\n", FAT2CPU32(dentptr->size), ret);

exit:
c7e205ec:	e3e04000 	mvn	r4, #0	; 0x0
	free(mydata->fatbuf);
c7e205f0:	e59d09b0 	ldr	r0, [sp, #2480]
c7e205f4:	ebffa259 	bl	c7e08f60 <free>
c7e205f8:	ea000000 	b	c7e20600 <do_fat_read_at+0xab0>
	return ret;
c7e205fc:	e3e04000 	mvn	r4, #0	; 0x0
}
c7e20600:	e1a00004 	mov	r0, r4
c7e20604:	e28ddf7e 	add	sp, sp, #504	; 0x1f8
c7e20608:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e2060c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e20610:	c7e42280 	.word	0xc7e42280
c7e20614:	c7e34570 	.word	0xc7e34570
c7e20618:	c7e2fef0 	.word	0xc7e2fef0
c7e2061c:	0000ffff 	.word	0x0000ffff
c7e20620:	c7e52300 	.word	0xc7e52300
c7e20624:	c7e345c3 	.word	0xc7e345c3
c7e20628:	c7e345a3 	.word	0xc7e345a3
c7e2062c:	c7e345b5 	.word	0xc7e345b5
c7e20630:	0fffffed 	.word	0x0fffffed
c7e20634:	c7e62300 	.word	0xc7e62300
c7e20638:	c7e62320 	.word	0xc7e62320
c7e2063c:	0000fff0 	.word	0x0000fff0
c7e20640:	c7e3455d 	.word	0xc7e3455d
c7e20644:	c7e42300 	.word	0xc7e42300
c7e20648:	c7e345dc 	.word	0xc7e345dc

c7e2064c <file_fat_read_at>:
	return do_fat_read(dir, NULL, 0, LS_YES);
}

long file_fat_read_at(const char *filename, unsigned long pos, void *buffer,
		      unsigned long maxsize)
{
c7e2064c:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
c7e20650:	e1a04000 	mov	r4, r0
c7e20654:	e1a05001 	mov	r5, r1
c7e20658:	e1a06002 	mov	r6, r2
c7e2065c:	e1a07003 	mov	r7, r3
	printf("reading %s\n", filename);
c7e20660:	e1a01000 	mov	r1, r0
c7e20664:	e59f0020 	ldr	r0, [pc, #32]	; c7e2068c <file_fat_read_at+0x40>
c7e20668:	ebffa0fa 	bl	c7e08a58 <printf>
	return do_fat_read_at(filename, pos, buffer, maxsize, LS_NO);
c7e2066c:	e3a0c000 	mov	ip, #0	; 0x0
c7e20670:	e1a00004 	mov	r0, r4
c7e20674:	e1a01005 	mov	r1, r5
c7e20678:	e1a02006 	mov	r2, r6
c7e2067c:	e1a03007 	mov	r3, r7
c7e20680:	e58dc000 	str	ip, [sp]
c7e20684:	ebfffd31 	bl	c7e1fb50 <do_fat_read_at>
}
c7e20688:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
c7e2068c:	c7e345f3 	.word	0xc7e345f3

c7e20690 <file_fat_read>:

long file_fat_read(const char *filename, void *buffer, unsigned long maxsize)
{
c7e20690:	e1a03002 	mov	r3, r2
	return file_fat_read_at(filename, 0, buffer, maxsize);
c7e20694:	e1a02001 	mov	r2, r1
c7e20698:	e3a01000 	mov	r1, #0	; 0x0
c7e2069c:	eaffffea 	b	c7e2064c <file_fat_read_at>

c7e206a0 <do_fat_read>:
	return ret;
}

long
do_fat_read(const char *filename, void *buffer, unsigned long maxsize, int dols)
{
c7e206a0:	e92d4007 	push	{r0, r1, r2, lr}
c7e206a4:	e1a0c002 	mov	ip, r2
	return do_fat_read_at(filename, 0, buffer, maxsize, dols);
c7e206a8:	e58d3000 	str	r3, [sp]
c7e206ac:	e1a02001 	mov	r2, r1
c7e206b0:	e1a0300c 	mov	r3, ip
c7e206b4:	e3a01000 	mov	r1, #0	; 0x0
c7e206b8:	ebfffd24 	bl	c7e1fb50 <do_fat_read_at>
}
c7e206bc:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e206c0 <file_fat_ls>:
	return 0;
}

int file_fat_ls(const char *dir)
{
	return do_fat_read(dir, NULL, 0, LS_YES);
c7e206c0:	e3a01000 	mov	r1, #0	; 0x0
c7e206c4:	e1a02001 	mov	r2, r1
c7e206c8:	e3a03001 	mov	r3, #1	; 0x1
c7e206cc:	eafffff3 	b	c7e206a0 <do_fat_read>

c7e206d0 <fat_register_device>:
	return cur_dev->block_read(cur_dev->dev,
			cur_part_info.start + block, nr_blocks, buf);
}

int fat_register_device(block_dev_desc_t * dev_desc, int part_no)
{
c7e206d0:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e206d4:	e5903014 	ldr	r3, [r0, #20]

	/* First close any currently found FAT filesystem */
	cur_dev = NULL;
c7e206d8:	e59f413c 	ldr	r4, [pc, #316]	; c7e2081c <fat_register_device+0x14c>
			cur_part_info.start + block, nr_blocks, buf);
}

int fat_register_device(block_dev_desc_t * dev_desc, int part_no)
{
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e206dc:	e283303f 	add	r3, r3, #63	; 0x3f
c7e206e0:	e3c3303f 	bic	r3, r3, #63	; 0x3f
c7e206e4:	e2833048 	add	r3, r3, #72	; 0x48

	/* First close any currently found FAT filesystem */
	cur_dev = NULL;
c7e206e8:	e1a02004 	mov	r2, r4
	return cur_dev->block_read(cur_dev->dev,
			cur_part_info.start + block, nr_blocks, buf);
}

int fat_register_device(block_dev_desc_t * dev_desc, int part_no)
{
c7e206ec:	e28db014 	add	fp, sp, #20	; 0x14
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e206f0:	e04dd003 	sub	sp, sp, r3

	/* First close any currently found FAT filesystem */
	cur_dev = NULL;
c7e206f4:	e3a03000 	mov	r3, #0	; 0x0
c7e206f8:	e4823004 	str	r3, [r2], #4
	return cur_dev->block_read(cur_dev->dev,
			cur_part_info.start + block, nr_blocks, buf);
}

int fat_register_device(block_dev_desc_t * dev_desc, int part_no)
{
c7e206fc:	e1a06000 	mov	r6, r0
c7e20700:	e1a05001 	mov	r5, r1
     defined(CONFIG_CMD_USB) || \
     defined(CONFIG_MMC) || \
     defined(CONFIG_SYSTEMACE) )

	/* Read the partition table, if present */
	if (!get_partition_info(dev_desc, part_no, &cur_part_info)) {
c7e20704:	ebffbbc6 	bl	c7e0f624 <get_partition_info>
c7e20708:	e3500000 	cmp	r0, #0	; 0x0
		cur_dev = dev_desc;
c7e2070c:	05846000 	streq	r6, [r4]
		cur_part_nr = part_no;
c7e20710:	05845054 	streq	r5, [r4, #84]
	}
#endif

	/* Otherwise it might be a superfloppy (whole-disk FAT filesystem) */
	if (!cur_dev) {
c7e20714:	e59f4100 	ldr	r4, [pc, #256]	; c7e2081c <fat_register_device+0x14c>
			cur_part_info.start + block, nr_blocks, buf);
}

int fat_register_device(block_dev_desc_t * dev_desc, int part_no)
{
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e20718:	e1a0700d 	mov	r7, sp
		cur_part_nr = part_no;
	}
#endif

	/* Otherwise it might be a superfloppy (whole-disk FAT filesystem) */
	if (!cur_dev) {
c7e2071c:	e5943000 	ldr	r3, [r4]
c7e20720:	e3530000 	cmp	r3, #0	; 0x0
c7e20724:	1a000016 	bne	c7e20784 <fat_register_device+0xb4>
		if (part_no != 0) {
c7e20728:	e3550000 	cmp	r5, #0	; 0x0
c7e2072c:	0a000004 	beq	c7e20744 <fat_register_device+0x74>
			printf("** Partition %d not valid on device %d **\n",
c7e20730:	e1a01005 	mov	r1, r5
c7e20734:	e5962004 	ldr	r2, [r6, #4]
c7e20738:	e59f00e0 	ldr	r0, [pc, #224]	; c7e20820 <fat_register_device+0x150>
c7e2073c:	ebffa0c5 	bl	c7e08a58 <printf>
c7e20740:	ea000021 	b	c7e207cc <fat_register_device+0xfc>
			return -1;
		}

		cur_dev = dev_desc;
		cur_part_nr = 1;
		cur_part_info.start = 0;
c7e20744:	e5845004 	str	r5, [r4, #4]
		cur_part_info.size = dev_desc->lba;
c7e20748:	e5963010 	ldr	r3, [r6, #16]
		cur_part_info.blksz = dev_desc->blksz;
		memset(cur_part_info.name, 0, sizeof(cur_part_info.name));
c7e2074c:	e1a01005 	mov	r1, r5
		}

		cur_dev = dev_desc;
		cur_part_nr = 1;
		cur_part_info.start = 0;
		cur_part_info.size = dev_desc->lba;
c7e20750:	e5843008 	str	r3, [r4, #8]
		cur_part_info.blksz = dev_desc->blksz;
c7e20754:	e596c014 	ldr	ip, [r6, #20]
					part_no, dev_desc->dev);
			return -1;
		}

		cur_dev = dev_desc;
		cur_part_nr = 1;
c7e20758:	e3a03001 	mov	r3, #1	; 0x1
		cur_part_info.start = 0;
		cur_part_info.size = dev_desc->lba;
		cur_part_info.blksz = dev_desc->blksz;
		memset(cur_part_info.name, 0, sizeof(cur_part_info.name));
c7e2075c:	e3a02020 	mov	r2, #32	; 0x20
c7e20760:	e2840010 	add	r0, r4, #16	; 0x10
					part_no, dev_desc->dev);
			return -1;
		}

		cur_dev = dev_desc;
		cur_part_nr = 1;
c7e20764:	e5843054 	str	r3, [r4, #84]
		cur_part_info.start = 0;
		cur_part_info.size = dev_desc->lba;
		cur_part_info.blksz = dev_desc->blksz;
c7e20768:	e584c00c 	str	ip, [r4, #12]
			printf("** Partition %d not valid on device %d **\n",
					part_no, dev_desc->dev);
			return -1;
		}

		cur_dev = dev_desc;
c7e2076c:	e5846000 	str	r6, [r4]
		cur_part_nr = 1;
		cur_part_info.start = 0;
		cur_part_info.size = dev_desc->lba;
		cur_part_info.blksz = dev_desc->blksz;
		memset(cur_part_info.name, 0, sizeof(cur_part_info.name));
c7e20770:	eb000907 	bl	c7e22b94 <memset>
		memset(cur_part_info.type, 0, sizeof(cur_part_info.type));
c7e20774:	e2840030 	add	r0, r4, #48	; 0x30
c7e20778:	e1a01005 	mov	r1, r5
c7e2077c:	e3a02020 	mov	r2, #32	; 0x20
c7e20780:	eb000903 	bl	c7e22b94 <memset>
			cur_part_info.start + block, nr_blocks, buf);
}

int fat_register_device(block_dev_desc_t * dev_desc, int part_no)
{
	ALLOC_CACHE_ALIGN_BUFFER(unsigned char, buffer, dev_desc->blksz);
c7e20784:	e287303f 	add	r3, r7, #63	; 0x3f
c7e20788:	e3c3403f 	bic	r4, r3, #63	; 0x3f
		memset(cur_part_info.name, 0, sizeof(cur_part_info.name));
		memset(cur_part_info.type, 0, sizeof(cur_part_info.type));
	}

	/* Make sure it has a valid FAT header */
	if (disk_read(0, 1, buffer) != 1) {
c7e2078c:	e3a00000 	mov	r0, #0	; 0x0
c7e20790:	e3a01001 	mov	r1, #1	; 0x1
c7e20794:	e1a02004 	mov	r2, r4
c7e20798:	ebfffa8a 	bl	c7e1f1c8 <disk_read>
c7e2079c:	e3500001 	cmp	r0, #1	; 0x1
c7e207a0:	1a000006 	bne	c7e207c0 <fat_register_device+0xf0>
		cur_dev = NULL;
		return -1;
	}

	/* Check if it's actually a DOS volume */
	if (memcmp(buffer + DOS_BOOT_MAGIC_OFFSET, "\x55\xAA", 2)) {
c7e207a4:	e2840f7f 	add	r0, r4, #508	; 0x1fc
c7e207a8:	e2800002 	add	r0, r0, #2	; 0x2
c7e207ac:	e59f1070 	ldr	r1, [pc, #112]	; c7e20824 <fat_register_device+0x154>
c7e207b0:	e3a02002 	mov	r2, #2	; 0x2
c7e207b4:	eb00095a 	bl	c7e22d24 <memcmp>
c7e207b8:	e2505000 	subs	r5, r0, #0	; 0x0
c7e207bc:	0a000004 	beq	c7e207d4 <fat_register_device+0x104>
		cur_dev = NULL;
c7e207c0:	e59f3054 	ldr	r3, [pc, #84]	; c7e2081c <fat_register_device+0x14c>
c7e207c4:	e3a02000 	mov	r2, #0	; 0x0
c7e207c8:	e5832000 	str	r2, [r3]
c7e207cc:	e3e00000 	mvn	r0, #0	; 0x0
c7e207d0:	ea00000f 	b	c7e20814 <fat_register_device+0x144>
		return -1;
	}

	/* Check for FAT12/FAT16/FAT32 filesystem */
	if (!memcmp(buffer + DOS_FS_TYPE_OFFSET, "FAT", 3))
c7e207d4:	e2840036 	add	r0, r4, #54	; 0x36
c7e207d8:	e59f1048 	ldr	r1, [pc, #72]	; c7e20828 <fat_register_device+0x158>
c7e207dc:	e3a02003 	mov	r2, #3	; 0x3
c7e207e0:	eb00094f 	bl	c7e22d24 <memcmp>
c7e207e4:	e3500000 	cmp	r0, #0	; 0x0
c7e207e8:	0a000008 	beq	c7e20810 <fat_register_device+0x140>
		return 0;
	if (!memcmp(buffer + DOS_FS32_TYPE_OFFSET, "FAT32", 5))
c7e207ec:	e2840052 	add	r0, r4, #82	; 0x52
c7e207f0:	e59f1034 	ldr	r1, [pc, #52]	; c7e2082c <fat_register_device+0x15c>
c7e207f4:	e3a02005 	mov	r2, #5	; 0x5
c7e207f8:	eb000949 	bl	c7e22d24 <memcmp>
c7e207fc:	e3500000 	cmp	r0, #0	; 0x0
		return 0;

	cur_dev = NULL;
c7e20800:	159f3014 	ldrne	r3, [pc, #20]	; c7e2081c <fat_register_device+0x14c>
c7e20804:	13e00000 	mvnne	r0, #0	; 0x0
c7e20808:	15835000 	strne	r5, [r3]
c7e2080c:	1a000000 	bne	c7e20814 <fat_register_device+0x144>
c7e20810:	e3a00000 	mov	r0, #0	; 0x0
	return -1;
}
c7e20814:	e24bd014 	sub	sp, fp, #20	; 0x14
c7e20818:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}
c7e2081c:	c7e42280 	.word	0xc7e42280
c7e20820:	c7e345ff 	.word	0xc7e345ff
c7e20824:	c7e3462a 	.word	0xc7e3462a
c7e20828:	c7e32c9d 	.word	0xc7e32c9d
c7e2082c:	c7e32ca1 	.word	0xc7e32ca1

c7e20830 <file_getfsname>:
char file_cwd[CWD_LEN+1] = "/";

const char *
file_getfsname(int idx)
{
	if (idx < 0 || idx >= NUM_FILESYS)
c7e20830:	e59f300c 	ldr	r3, [pc, #12]	; c7e20844 <file_getfsname+0x14>
		return NULL;

	return filesystems[idx].name;
}
c7e20834:	e3500000 	cmp	r0, #0	; 0x0
c7e20838:	01a00003 	moveq	r0, r3
c7e2083c:	13a00000 	movne	r0, #0	; 0x0
c7e20840:	e12fff1e 	bx	lr
c7e20844:	c7e2ca38 	.word	0xc7e2ca38

c7e20848 <file_read>:
	return filesystems[current_filesystem].ls(arg);
}

long
file_read(const char *filename, void *buffer, unsigned long maxsize)
{
c7e20848:	e92d4070 	push	{r4, r5, r6, lr}
	char fullpath[1024];
	const char *arg;

	if (current_filesystem == FSTYPE_NONE) {
c7e2084c:	e59fc080 	ldr	ip, [pc, #128]	; c7e208d4 <file_read+0x8c>
	return filesystems[current_filesystem].ls(arg);
}

long
file_read(const char *filename, void *buffer, unsigned long maxsize)
{
c7e20850:	e24ddb01 	sub	sp, sp, #1024	; 0x400
	char fullpath[1024];
	const char *arg;

	if (current_filesystem == FSTYPE_NONE) {
c7e20854:	e59c4000 	ldr	r4, [ip]
	return filesystems[current_filesystem].ls(arg);
}

long
file_read(const char *filename, void *buffer, unsigned long maxsize)
{
c7e20858:	e1a05001 	mov	r5, r1
	char fullpath[1024];
	const char *arg;

	if (current_filesystem == FSTYPE_NONE) {
c7e2085c:	e3740001 	cmn	r4, #1	; 0x1
	return filesystems[current_filesystem].ls(arg);
}

long
file_read(const char *filename, void *buffer, unsigned long maxsize)
{
c7e20860:	e1a06002 	mov	r6, r2
	char fullpath[1024];
	const char *arg;

	if (current_filesystem == FSTYPE_NONE) {
c7e20864:	1a000003 	bne	c7e20878 <file_read+0x30>
		printf("Can't load file without a filesystem!\n");
c7e20868:	e59f0068 	ldr	r0, [pc, #104]	; c7e208d8 <file_read+0x90>
c7e2086c:	ebffa079 	bl	c7e08a58 <printf>
c7e20870:	e1a00004 	mov	r0, r4
c7e20874:	ea000014 	b	c7e208cc <file_read+0x84>
		return -1;
	}

	if (ISDIRDELIM(*filename)) {
c7e20878:	e5d03000 	ldrb	r3, [r0]
c7e2087c:	e353005c 	cmp	r3, #92	; 0x5c
c7e20880:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20884:	0a000006 	beq	c7e208a4 <file_read+0x5c>
		arg = filename;
	} else {
		sprintf(fullpath, "%s/%s", file_cwd, filename);
c7e20888:	e1a03000 	mov	r3, r0
c7e2088c:	e28c2004 	add	r2, ip, #4	; 0x4
c7e20890:	e1a0000d 	mov	r0, sp
c7e20894:	e59f1040 	ldr	r1, [pc, #64]	; c7e208dc <file_read+0x94>
c7e20898:	eb000d64 	bl	c7e23e30 <sprintf>
c7e2089c:	e1a0400d 	mov	r4, sp
c7e208a0:	e1a0000d 	mov	r0, sp
		arg = fullpath;
	}

	return filesystems[current_filesystem].read(arg, buffer, maxsize);
c7e208a4:	e59f3028 	ldr	r3, [pc, #40]	; c7e208d4 <file_read+0x8c>
c7e208a8:	e1a01005 	mov	r1, r5
c7e208ac:	e5932000 	ldr	r2, [r3]
c7e208b0:	e3a03003 	mov	r3, #3	; 0x3
c7e208b4:	e00c0293 	mul	ip, r3, r2
c7e208b8:	e1a02006 	mov	r2, r6
c7e208bc:	e28cc001 	add	ip, ip, #1	; 0x1
c7e208c0:	e59f3018 	ldr	r3, [pc, #24]	; c7e208e0 <file_read+0x98>
c7e208c4:	e1a0e00f 	mov	lr, pc
c7e208c8:	e793f18c 	ldr	pc, [r3, ip, lsl #3]
}
c7e208cc:	e28ddb01 	add	sp, sp, #1024	; 0x400
c7e208d0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e208d4:	c7e3a2c8 	.word	0xc7e3a2c8
c7e208d8:	c7e3462d 	.word	0xc7e3462d
c7e208dc:	c7e34654 	.word	0xc7e34654
c7e208e0:	c7e2ca2c 	.word	0xc7e2ca2c

c7e208e4 <file_ls>:
	return current_filesystem;
}

int
file_ls(const char *dir)
{
c7e208e4:	e92d4010 	push	{r4, lr}
	char fullpath[1024];
	const char *arg;

	if (current_filesystem == FSTYPE_NONE) {
c7e208e8:	e59f206c 	ldr	r2, [pc, #108]	; c7e2095c <file_ls+0x78>
	return current_filesystem;
}

int
file_ls(const char *dir)
{
c7e208ec:	e24ddb01 	sub	sp, sp, #1024	; 0x400
	char fullpath[1024];
	const char *arg;

	if (current_filesystem == FSTYPE_NONE) {
c7e208f0:	e5924000 	ldr	r4, [r2]
c7e208f4:	e3740001 	cmn	r4, #1	; 0x1
c7e208f8:	1a000003 	bne	c7e2090c <file_ls+0x28>
		printf("Can't list files without a filesystem!\n");
c7e208fc:	e59f005c 	ldr	r0, [pc, #92]	; c7e20960 <file_ls+0x7c>
c7e20900:	ebffa054 	bl	c7e08a58 <printf>
c7e20904:	e1a00004 	mov	r0, r4
c7e20908:	ea000011 	b	c7e20954 <file_ls+0x70>
		return -1;
	}

	if (ISDIRDELIM(*dir)) {
c7e2090c:	e5d03000 	ldrb	r3, [r0]
c7e20910:	e353005c 	cmp	r3, #92	; 0x5c
c7e20914:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20918:	0a000006 	beq	c7e20938 <file_ls+0x54>
		arg = dir;
	} else {
		sprintf(fullpath, "%s/%s", file_cwd, dir);
c7e2091c:	e1a03000 	mov	r3, r0
c7e20920:	e2822004 	add	r2, r2, #4	; 0x4
c7e20924:	e1a0000d 	mov	r0, sp
c7e20928:	e59f1034 	ldr	r1, [pc, #52]	; c7e20964 <file_ls+0x80>
c7e2092c:	eb000d3f 	bl	c7e23e30 <sprintf>
c7e20930:	e1a0400d 	mov	r4, sp
c7e20934:	e1a0000d 	mov	r0, sp
		arg = fullpath;
	}
	return filesystems[current_filesystem].ls(arg);
c7e20938:	e59f301c 	ldr	r3, [pc, #28]	; c7e2095c <file_ls+0x78>
c7e2093c:	e3a02018 	mov	r2, #24	; 0x18
c7e20940:	e5931000 	ldr	r1, [r3]
c7e20944:	e59f301c 	ldr	r3, [pc, #28]	; c7e20968 <file_ls+0x84>
c7e20948:	e0233192 	mla	r3, r2, r1, r3
c7e2094c:	e1a0e00f 	mov	lr, pc
c7e20950:	e593f004 	ldr	pc, [r3, #4]
}
c7e20954:	e28ddb01 	add	sp, sp, #1024	; 0x400
c7e20958:	e8bd8010 	pop	{r4, pc}
c7e2095c:	c7e3a2c8 	.word	0xc7e3a2c8
c7e20960:	c7e3465a 	.word	0xc7e3465a
c7e20964:	c7e34654 	.word	0xc7e34654
c7e20968:	c7e2ca2c 	.word	0xc7e2ca2c

c7e2096c <file_detectfs>:
	return 0;
}

int
file_detectfs(void)
{
c7e2096c:	e92d4070 	push	{r4, r5, r6, lr}
	int i;

	current_filesystem = FSTYPE_NONE;
c7e20970:	e59f4034 	ldr	r4, [pc, #52]	; c7e209ac <file_detectfs+0x40>
c7e20974:	e3e03000 	mvn	r3, #0	; 0x0
c7e20978:	e5843000 	str	r3, [r4]

	for (i = 0; i < NUM_FILESYS; i++) {
		if (filesystems[i].detect() == 0) {
c7e2097c:	e59f302c 	ldr	r3, [pc, #44]	; c7e209b0 <file_detectfs+0x44>
c7e20980:	e1a0e00f 	mov	lr, pc
c7e20984:	e593f000 	ldr	pc, [r3]
c7e20988:	e2505000 	subs	r5, r0, #0	; 0x0
c7e2098c:	1a000003 	bne	c7e209a0 <file_detectfs+0x34>
			strcpy(file_cwd, "/");
c7e20990:	e2840004 	add	r0, r4, #4	; 0x4
c7e20994:	e59f1018 	ldr	r1, [pc, #24]	; c7e209b4 <file_detectfs+0x48>
c7e20998:	eb000779 	bl	c7e22784 <strcpy>
			current_filesystem = i;
c7e2099c:	e5845000 	str	r5, [r4]
c7e209a0:	e59f3004 	ldr	r3, [pc, #4]	; c7e209ac <file_detectfs+0x40>
			break;
		}
	}

	return current_filesystem;
}
c7e209a4:	e5930000 	ldr	r0, [r3]
c7e209a8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e209ac:	c7e3a2c8 	.word	0xc7e3a2c8
c7e209b0:	c7e2ca2c 	.word	0xc7e2ca2c
c7e209b4:	c7e2f450 	.word	0xc7e2f450

c7e209b8 <file_cd>:
	} while (1);
}

int
file_cd(const char *path)
{
c7e209b8:	e92d4010 	push	{r4, lr}
	if (ISDIRDELIM(*path)) {
c7e209bc:	e5d03000 	ldrb	r3, [r0]
c7e209c0:	e353005c 	cmp	r3, #92	; 0x5c
c7e209c4:	1353002f 	cmpne	r3, #47	; 0x2f
c7e209c8:	159fc1e0 	ldrne	ip, [pc, #480]	; c7e20bb0 <file_cd+0x1f8>
c7e209cc:	1a00000b 	bne	c7e20a00 <file_cd+0x48>
c7e209d0:	ea000000 	b	c7e209d8 <file_cd+0x20>
		while (ISDIRDELIM(*path)) path++;
c7e209d4:	e2800001 	add	r0, r0, #1	; 0x1
c7e209d8:	e5d03000 	ldrb	r3, [r0]
c7e209dc:	e353005c 	cmp	r3, #92	; 0x5c
c7e209e0:	1353002f 	cmpne	r3, #47	; 0x2f
c7e209e4:	0afffffa 	beq	c7e209d4 <file_cd+0x1c>
		strncpy(file_cwd+1, path, CWD_LEN-1);
c7e209e8:	e1a01000 	mov	r1, r0
c7e209ec:	e59f21c0 	ldr	r2, [pc, #448]	; c7e20bb4 <file_cd+0x1fc>
c7e209f0:	e59f01c0 	ldr	r0, [pc, #448]	; c7e20bb8 <file_cd+0x200>
c7e209f4:	eb000769 	bl	c7e227a0 <strncpy>
c7e209f8:	ea00006a 	b	c7e20ba8 <file_cd+0x1f0>
	} else {
		const char *origpath = path;
		char *tmpstr = file_cwd;
		int back = 0;

		while (*tmpstr != '\0') tmpstr++;
c7e209fc:	e28cc001 	add	ip, ip, #1	; 0x1
c7e20a00:	e5dc3000 	ldrb	r3, [ip]
c7e20a04:	e3530000 	cmp	r3, #0	; 0x0
c7e20a08:	1afffffb 	bne	c7e209fc <file_cd+0x44>
		do {
			tmpstr--;
		} while (ISDIRDELIM(*tmpstr));
c7e20a0c:	e57c3001 	ldrb	r3, [ip, #-1]!
c7e20a10:	e353005c 	cmp	r3, #92	; 0x5c
c7e20a14:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20a18:	13a03000 	movne	r3, #0	; 0x0
c7e20a1c:	03a03001 	moveq	r3, #1	; 0x1
c7e20a20:	0afffff9 	beq	c7e20a0c <file_cd+0x54>
c7e20a24:	e1a02003 	mov	r2, r3
c7e20a28:	e1a01000 	mov	r1, r0
c7e20a2c:	ea000012 	b	c7e20a7c <file_cd+0xc4>

		while (*path == '.') {
			path++;
c7e20a30:	e2800001 	add	r0, r0, #1	; 0x1
c7e20a34:	ea000001 	b	c7e20a40 <file_cd+0x88>
			while (*path == '.') {
				path++;
c7e20a38:	e2800001 	add	r0, r0, #1	; 0x1
				back++;
c7e20a3c:	e2822001 	add	r2, r2, #1	; 0x1
			tmpstr--;
		} while (ISDIRDELIM(*tmpstr));

		while (*path == '.') {
			path++;
			while (*path == '.') {
c7e20a40:	e5d03000 	ldrb	r3, [r0]
c7e20a44:	e353002e 	cmp	r3, #46	; 0x2e
c7e20a48:	0afffffa 	beq	c7e20a38 <file_cd+0x80>
				path++;
				back++;
			}
			if (*path != '\0' && !ISDIRDELIM(*path)) {
c7e20a4c:	e3530000 	cmp	r3, #0	; 0x0
c7e20a50:	0a000004 	beq	c7e20a68 <file_cd+0xb0>
c7e20a54:	e353002f 	cmp	r3, #47	; 0x2f
c7e20a58:	1353005c 	cmpne	r3, #92	; 0x5c
c7e20a5c:	0a000001 	beq	c7e20a68 <file_cd+0xb0>
c7e20a60:	ea00001a 	b	c7e20ad0 <file_cd+0x118>
				path = origpath;
				back = 0;
				break;
			}
			while (ISDIRDELIM(*path)) path++;
c7e20a64:	e2800001 	add	r0, r0, #1	; 0x1
c7e20a68:	e5d03000 	ldrb	r3, [r0]
c7e20a6c:	e1a01000 	mov	r1, r0
c7e20a70:	e353005c 	cmp	r3, #92	; 0x5c
c7e20a74:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20a78:	0afffff9 	beq	c7e20a64 <file_cd+0xac>
		while (*tmpstr != '\0') tmpstr++;
		do {
			tmpstr--;
		} while (ISDIRDELIM(*tmpstr));

		while (*path == '.') {
c7e20a7c:	e5d04000 	ldrb	r4, [r0]
c7e20a80:	e354002e 	cmp	r4, #46	; 0x2e
c7e20a84:	0affffe9 	beq	c7e20a30 <file_cd+0x78>
c7e20a88:	ea000012 	b	c7e20ad8 <file_cd+0x120>
		}

		while (back--) {
			/* Strip off path component */
			while (!ISDIRDELIM(*tmpstr)) {
				tmpstr--;
c7e20a8c:	e24cc001 	sub	ip, ip, #1	; 0x1
			origpath = path;
		}

		while (back--) {
			/* Strip off path component */
			while (!ISDIRDELIM(*tmpstr)) {
c7e20a90:	e5dc3000 	ldrb	r3, [ip]
c7e20a94:	e353002f 	cmp	r3, #47	; 0x2f
c7e20a98:	1353005c 	cmpne	r3, #92	; 0x5c
c7e20a9c:	1afffffa 	bne	c7e20a8c <file_cd+0xd4>
				tmpstr--;
			}
			if (tmpstr == file_cwd) {
c7e20aa0:	e59f3108 	ldr	r3, [pc, #264]	; c7e20bb0 <file_cd+0x1f8>
c7e20aa4:	e15c0003 	cmp	ip, r3
c7e20aa8:	1a000002 	bne	c7e20ab8 <file_cd+0x100>
c7e20aac:	e59fc108 	ldr	ip, [pc, #264]	; c7e20bbc <file_cd+0x204>
c7e20ab0:	ea00000a 	b	c7e20ae0 <file_cd+0x128>
				/* Incremented again right after the loop. */
				tmpstr--;
				break;
			}
			/* Skip delimiters */
			while (ISDIRDELIM(*tmpstr)) tmpstr--;
c7e20ab4:	e24cc001 	sub	ip, ip, #1	; 0x1
c7e20ab8:	e5dc3000 	ldrb	r3, [ip]
c7e20abc:	e353005c 	cmp	r3, #92	; 0x5c
c7e20ac0:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20ac4:	0afffffa 	beq	c7e20ab4 <file_cd+0xfc>
c7e20ac8:	e2422001 	sub	r2, r2, #1	; 0x1
c7e20acc:	ea000001 	b	c7e20ad8 <file_cd+0x120>
c7e20ad0:	e1a00001 	mov	r0, r1
c7e20ad4:	e3a02000 	mov	r2, #0	; 0x0
			}
			while (ISDIRDELIM(*path)) path++;
			origpath = path;
		}

		while (back--) {
c7e20ad8:	e3520000 	cmp	r2, #0	; 0x0
c7e20adc:	1affffeb 	bne	c7e20a90 <file_cd+0xd8>
			}
			/* Skip delimiters */
			while (ISDIRDELIM(*tmpstr)) tmpstr--;
		}
		tmpstr++;
		if (*path == '\0') {
c7e20ae0:	e3540000 	cmp	r4, #0	; 0x0
				break;
			}
			/* Skip delimiters */
			while (ISDIRDELIM(*tmpstr)) tmpstr--;
		}
		tmpstr++;
c7e20ae4:	e28c2001 	add	r2, ip, #1	; 0x1
c7e20ae8:	e59f10c0 	ldr	r1, [pc, #192]	; c7e20bb0 <file_cd+0x1f8>
		if (*path == '\0') {
c7e20aec:	1a000007 	bne	c7e20b10 <file_cd+0x158>
			if (tmpstr == file_cwd) {
c7e20af0:	e1520001 	cmp	r2, r1
c7e20af4:	e59f10c4 	ldr	r1, [pc, #196]	; c7e20bc0 <file_cd+0x208>
				*tmpstr = '/';
c7e20af8:	03a0302f 	moveq	r3, #47	; 0x2f
c7e20afc:	05c13004 	strbeq	r3, [r1, #4]
c7e20b00:	02812005 	addeq	r2, r1, #5	; 0x5
				tmpstr++;
			}
			*tmpstr = '\0';
c7e20b04:	e3a03000 	mov	r3, #0	; 0x0
c7e20b08:	e5c23000 	strb	r3, [r2]
c7e20b0c:	ea000025 	b	c7e20ba8 <file_cd+0x1f0>
			return 0;
		}
		*tmpstr = '/';
		pathcpy(tmpstr+1, path);
c7e20b10:	e2824001 	add	r4, r2, #1	; 0x1
				tmpstr++;
			}
			*tmpstr = '\0';
			return 0;
		}
		*tmpstr = '/';
c7e20b14:	e3a0302f 	mov	r3, #47	; 0x2f
		pathcpy(tmpstr+1, path);
c7e20b18:	e28c2002 	add	r2, ip, #2	; 0x2
				tmpstr++;
			}
			*tmpstr = '\0';
			return 0;
		}
		*tmpstr = '/';
c7e20b1c:	e5cc3001 	strb	r3, [ip, #1]
		pathcpy(tmpstr+1, path);
c7e20b20:	e0612002 	rsb	r2, r1, r2
c7e20b24:	e1a0c004 	mov	ip, r4
c7e20b28:	ea000001 	b	c7e20b34 <file_cd+0x17c>
			if (dest-- != origdest && ISDIRDELIM(*dest)) {
				*dest = '\0';
			}
			return;
		}
		++dest;
c7e20b2c:	e28cc001 	add	ip, ip, #1	; 0x1
c7e20b30:	e2822001 	add	r2, r2, #1	; 0x1
pathcpy(char *dest, const char *src)
{
	char *origdest = dest;

	do {
		if (dest-file_cwd >= CWD_LEN) {
c7e20b34:	e59f3078 	ldr	r3, [pc, #120]	; c7e20bb4 <file_cd+0x1fc>
c7e20b38:	e1520003 	cmp	r2, r3
			*dest = '\0';
c7e20b3c:	c3a03000 	movgt	r3, #0	; 0x0
c7e20b40:	c5cc3000 	strbgt	r3, [ip]
c7e20b44:	ca000017 	bgt	c7e20ba8 <file_cd+0x1f0>
			return;
		}
		*(dest) = *(src);
c7e20b48:	e5d03000 	ldrb	r3, [r0]
c7e20b4c:	e5cc3000 	strb	r3, [ip]
		if (*src == '\0') {
c7e20b50:	e5d01000 	ldrb	r1, [r0]
c7e20b54:	e3510000 	cmp	r1, #0	; 0x0
c7e20b58:	1a000006 	bne	c7e20b78 <file_cd+0x1c0>
			if (dest-- != origdest && ISDIRDELIM(*dest)) {
c7e20b5c:	e15c0004 	cmp	ip, r4
c7e20b60:	0a000010 	beq	c7e20ba8 <file_cd+0x1f0>
c7e20b64:	e55c3001 	ldrb	r3, [ip, #-1]
c7e20b68:	e353005c 	cmp	r3, #92	; 0x5c
c7e20b6c:	1353002f 	cmpne	r3, #47	; 0x2f
				*dest = '\0';
c7e20b70:	054c1001 	strbeq	r1, [ip, #-1]
c7e20b74:	ea00000b 	b	c7e20ba8 <file_cd+0x1f0>
			}
			return;
		}
		++dest;

		if (ISDIRDELIM(*src))
c7e20b78:	e351005c 	cmp	r1, #92	; 0x5c
c7e20b7c:	1351002f 	cmpne	r1, #47	; 0x2f
c7e20b80:	0a000001 	beq	c7e20b8c <file_cd+0x1d4>
c7e20b84:	ea000005 	b	c7e20ba0 <file_cd+0x1e8>
			while (ISDIRDELIM(*src)) src++;
c7e20b88:	e2800001 	add	r0, r0, #1	; 0x1
c7e20b8c:	e5d03000 	ldrb	r3, [r0]
c7e20b90:	e353005c 	cmp	r3, #92	; 0x5c
c7e20b94:	1353002f 	cmpne	r3, #47	; 0x2f
c7e20b98:	0afffffa 	beq	c7e20b88 <file_cd+0x1d0>
c7e20b9c:	eaffffe2 	b	c7e20b2c <file_cd+0x174>
		else
			src++;
c7e20ba0:	e2800001 	add	r0, r0, #1	; 0x1
c7e20ba4:	eaffffe0 	b	c7e20b2c <file_cd+0x174>
		*tmpstr = '/';
		pathcpy(tmpstr+1, path);
	}

	return 0;
}
c7e20ba8:	e3a00000 	mov	r0, #0	; 0x0
c7e20bac:	e8bd8010 	pop	{r4, pc}
c7e20bb0:	c7e3a2cc 	.word	0xc7e3a2cc
c7e20bb4:	000001fe 	.word	0x000001fe
c7e20bb8:	c7e3a2cd 	.word	0xc7e3a2cd
c7e20bbc:	c7e3a2cb 	.word	0xc7e3a2cb
c7e20bc0:	c7e3a2c8 	.word	0xc7e3a2c8

c7e20bc4 <cyg_crc16>:
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
};

uint16_t
cyg_crc16(unsigned char *buf, int len)
{
c7e20bc4:	e3a0c000 	mov	ip, #0	; 0x0
c7e20bc8:	e92d4010 	push	{r4, lr}
c7e20bcc:	e1a04000 	mov	r4, r0
c7e20bd0:	e1a0000c 	mov	r0, ip
c7e20bd4:	ea000008 	b	c7e20bfc <cyg_crc16+0x38>
    int i;
    uint16_t cksum;

    cksum = 0;
    for (i = 0;  i < len;  i++) {
	cksum = crc16_tab[((cksum>>8) ^ *buf++) & 0xFF] ^ (cksum << 8);
c7e20bd8:	e7d4300c 	ldrb	r3, [r4, ip]
c7e20bdc:	e59f2024 	ldr	r2, [pc, #36]	; c7e20c08 <cyg_crc16+0x44>
c7e20be0:	e0233420 	eor	r3, r3, r0, lsr #8
c7e20be4:	e1a03083 	lsl	r3, r3, #1
c7e20be8:	e19230b3 	ldrh	r3, [r2, r3]
{
    int i;
    uint16_t cksum;

    cksum = 0;
    for (i = 0;  i < len;  i++) {
c7e20bec:	e28cc001 	add	ip, ip, #1	; 0x1
	cksum = crc16_tab[((cksum>>8) ^ *buf++) & 0xFF] ^ (cksum << 8);
c7e20bf0:	e0233400 	eor	r3, r3, r0, lsl #8
c7e20bf4:	e1a03803 	lsl	r3, r3, #16
c7e20bf8:	e1a00823 	lsr	r0, r3, #16
{
    int i;
    uint16_t cksum;

    cksum = 0;
    for (i = 0;  i < len;  i++) {
c7e20bfc:	e15c0001 	cmp	ip, r1
c7e20c00:	bafffff4 	blt	c7e20bd8 <cyg_crc16+0x14>
	cksum = crc16_tab[((cksum>>8) ^ *buf++) & 0xFF] ^ (cksum << 8);
    }
    return cksum;
}
c7e20c04:	e8bd8010 	pop	{r4, pc}
c7e20c08:	c7e2ca44 	.word	0xc7e2ca44

c7e20c0c <crc32_no_comp>:
    if (crc_table_empty)
      make_crc_table();
#endif
    crc = cpu_to_le32(crc);
    /* Align it */
    if (((long)b) & 3 && len) {
c7e20c0c:	e2113003 	ands	r3, r1, #3	; 0x3
c7e20c10:	13a03001 	movne	r3, #1	; 0x1
c7e20c14:	e3520000 	cmp	r2, #0	; 0x0
c7e20c18:	03a03000 	moveq	r3, #0	; 0x0
c7e20c1c:	12033001 	andne	r3, r3, #1	; 0x1
c7e20c20:	e3530000 	cmp	r3, #0	; 0x0

/* No ones complement version. JFFS2 (and other things ?)
 * don't use ones compliment in their CRC calculations.
 */
uint32_t ZEXPORT crc32_no_comp(uint32_t crc, const Bytef *buf, uInt len)
{
c7e20c24:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
    if (crc_table_empty)
      make_crc_table();
#endif
    crc = cpu_to_le32(crc);
    /* Align it */
    if (((long)b) & 3 && len) {
c7e20c28:	e1a0c002 	mov	ip, r2
 * don't use ones compliment in their CRC calculations.
 */
uint32_t ZEXPORT crc32_no_comp(uint32_t crc, const Bytef *buf, uInt len)
{
    const uint32_t *tab = crc_table;
    const uint32_t *b =(const uint32_t *)buf;
c7e20c2c:	e1a04001 	mov	r4, r1
    if (crc_table_empty)
      make_crc_table();
#endif
    crc = cpu_to_le32(crc);
    /* Align it */
    if (((long)b) & 3 && len) {
c7e20c30:	0a00000a 	beq	c7e20c60 <crc32_no_comp+0x54>
	 uint8_t *p = (uint8_t *)b;
	 do {
	      DO_CRC(*p++);
c7e20c34:	e4d13001 	ldrb	r3, [r1], #1
c7e20c38:	e59f20c0 	ldr	r2, [pc, #192]	; c7e20d00 <crc32_no_comp+0xf4>
c7e20c3c:	e0203003 	eor	r3, r0, r3
c7e20c40:	e20330ff 	and	r3, r3, #255	; 0xff
c7e20c44:	e7923103 	ldr	r3, [r2, r3, lsl #2]
	 } while ((--len) && ((long)p)&3);
c7e20c48:	e25cc001 	subs	ip, ip, #1	; 0x1
    crc = cpu_to_le32(crc);
    /* Align it */
    if (((long)b) & 3 && len) {
	 uint8_t *p = (uint8_t *)b;
	 do {
	      DO_CRC(*p++);
c7e20c4c:	e0230420 	eor	r0, r3, r0, lsr #8
	 } while ((--len) && ((long)p)&3);
c7e20c50:	0a000001 	beq	c7e20c5c <crc32_no_comp+0x50>
c7e20c54:	e3110003 	tst	r1, #3	; 0x3
c7e20c58:	1afffff5 	bne	c7e20c34 <crc32_no_comp+0x28>
	 b = (uint32_t *)p;
c7e20c5c:	e1a04001 	mov	r4, r1
    }

    rem_len = len & 3;
    len = len >> 2;
c7e20c60:	e1a0612c 	lsr	r6, ip, #2
	      DO_CRC(*p++);
	 } while ((--len) && ((long)p)&3);
	 b = (uint32_t *)p;
    }

    rem_len = len & 3;
c7e20c64:	e20c7003 	and	r7, ip, #3	; 0x3
    len = len >> 2;
    for (--b; len; --len) {
c7e20c68:	e244a004 	sub	sl, r4, #4	; 0x4
c7e20c6c:	e1a01006 	mov	r1, r6
c7e20c70:	e3a0c000 	mov	ip, #0	; 0x0
c7e20c74:	ea00000e 	b	c7e20cb4 <crc32_no_comp+0xa8>
	 /* load data 32 bits wide, xor data 32 bits wide. */
	 crc ^= *++b; /* use pre increment for speed */
c7e20c78:	e794200c 	ldr	r2, [r4, ip]
	 b = (uint32_t *)p;
    }

    rem_len = len & 3;
    len = len >> 2;
    for (--b; len; --len) {
c7e20c7c:	e28cc004 	add	ip, ip, #4	; 0x4
	 /* load data 32 bits wide, xor data 32 bits wide. */
	 crc ^= *++b; /* use pre increment for speed */
c7e20c80:	e0202002 	eor	r2, r0, r2
	 DO_CRC(0);
c7e20c84:	e20230ff 	and	r3, r2, #255	; 0xff
c7e20c88:	e7953103 	ldr	r3, [r5, r3, lsl #2]
c7e20c8c:	e0233422 	eor	r3, r3, r2, lsr #8
	 DO_CRC(0);
c7e20c90:	e20320ff 	and	r2, r3, #255	; 0xff
c7e20c94:	e7952102 	ldr	r2, [r5, r2, lsl #2]
c7e20c98:	e0222423 	eor	r2, r2, r3, lsr #8
	 DO_CRC(0);
c7e20c9c:	e20230ff 	and	r3, r2, #255	; 0xff
c7e20ca0:	e7953103 	ldr	r3, [r5, r3, lsl #2]
c7e20ca4:	e0233422 	eor	r3, r3, r2, lsr #8
	 DO_CRC(0);
c7e20ca8:	e20320ff 	and	r2, r3, #255	; 0xff
c7e20cac:	e7952102 	ldr	r2, [r5, r2, lsl #2]
c7e20cb0:	e0220423 	eor	r0, r2, r3, lsr #8
	 b = (uint32_t *)p;
    }

    rem_len = len & 3;
    len = len >> 2;
    for (--b; len; --len) {
c7e20cb4:	e3510000 	cmp	r1, #0	; 0x0
	 /* load data 32 bits wide, xor data 32 bits wide. */
	 crc ^= *++b; /* use pre increment for speed */
	 DO_CRC(0);
c7e20cb8:	e59f5040 	ldr	r5, [pc, #64]	; c7e20d00 <crc32_no_comp+0xf4>
	 b = (uint32_t *)p;
    }

    rem_len = len & 3;
    len = len >> 2;
    for (--b; len; --len) {
c7e20cbc:	e2411001 	sub	r1, r1, #1	; 0x1
c7e20cc0:	1affffec 	bne	c7e20c78 <crc32_no_comp+0x6c>
	 DO_CRC(0);
	 DO_CRC(0);
    }
    len = rem_len;
    /* And the last few bytes */
    if (len) {
c7e20cc4:	e3570000 	cmp	r7, #0	; 0x0
	 b = (uint32_t *)p;
    }

    rem_len = len & 3;
    len = len >> 2;
    for (--b; len; --len) {
c7e20cc8:	e08a3106 	add	r3, sl, r6, lsl #2
	 DO_CRC(0);
	 DO_CRC(0);
    }
    len = rem_len;
    /* And the last few bytes */
    if (len) {
c7e20ccc:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
c7e20cd0:	e1a0c003 	mov	ip, r3
c7e20cd4:	e1a01007 	mov	r1, r7
	 uint8_t *p = (uint8_t *)(b + 1) - 1;
	 do {
	      DO_CRC(*++p); /* use pre increment for speed */
c7e20cd8:	e5dc3004 	ldrb	r3, [ip, #4]
c7e20cdc:	e59f201c 	ldr	r2, [pc, #28]	; c7e20d00 <crc32_no_comp+0xf4>
c7e20ce0:	e0203003 	eor	r3, r0, r3
c7e20ce4:	e20330ff 	and	r3, r3, #255	; 0xff
c7e20ce8:	e7923103 	ldr	r3, [r2, r3, lsl #2]
	 } while (--len);
c7e20cec:	e2511001 	subs	r1, r1, #1	; 0x1
    len = rem_len;
    /* And the last few bytes */
    if (len) {
	 uint8_t *p = (uint8_t *)(b + 1) - 1;
	 do {
	      DO_CRC(*++p); /* use pre increment for speed */
c7e20cf0:	e0230420 	eor	r0, r3, r0, lsr #8
	 } while (--len);
c7e20cf4:	e28cc001 	add	ip, ip, #1	; 0x1
c7e20cf8:	1afffff6 	bne	c7e20cd8 <crc32_no_comp+0xcc>
    }

    return le32_to_cpu(crc);
}
c7e20cfc:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e20d00:	c7e2cc44 	.word	0xc7e2cc44

c7e20d04 <crc32>:
#undef DO_CRC

uint32_t ZEXPORT crc32 (uint32_t crc, const Bytef *p, uInt len)
{
c7e20d04:	e92d4010 	push	{r4, lr}
     return crc32_no_comp(crc ^ 0xffffffffL, p, len) ^ 0xffffffffL;
c7e20d08:	e1e00000 	mvn	r0, r0
c7e20d0c:	ebffffbe 	bl	c7e20c0c <crc32_no_comp>
}
c7e20d10:	e1e00000 	mvn	r0, r0
c7e20d14:	e8bd8010 	pop	{r4, pc}

c7e20d18 <crc32_wd>:
		crc = crc32 (crc, curr, chunk);
		curr += chunk;
		WATCHDOG_RESET ();
	}
#else
	crc = crc32 (crc, buf, len);
c7e20d18:	eafffff9 	b	c7e20d04 <crc32>

c7e20d1c <crc7>:
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
u8 crc7(u8 crc, const u8 *buffer, size_t len)
{
c7e20d1c:	e92d4010 	push	{r4, lr}
c7e20d20:	e3a0c000 	mov	ip, #0	; 0x0
c7e20d24:	e1a04001 	mov	r4, r1
c7e20d28:	e1a01002 	mov	r1, r2
c7e20d2c:	ea000004 	b	c7e20d44 <crc7+0x28>

extern const u8 crc7_syndrome_table[256];

static inline u8 crc7_byte(u8 crc, u8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
c7e20d30:	e7d4300c 	ldrb	r3, [r4, ip]
c7e20d34:	e59f2018 	ldr	r2, [pc, #24]	; c7e20d54 <crc7+0x38>
c7e20d38:	e0233080 	eor	r3, r3, r0, lsl #1
c7e20d3c:	e7d20003 	ldrb	r0, [r2, r3]
c7e20d40:	e28cc001 	add	ip, ip, #1	; 0x1
	while (len--)
c7e20d44:	e3510000 	cmp	r1, #0	; 0x0
c7e20d48:	e2411001 	sub	r1, r1, #1	; 0x1
c7e20d4c:	1afffff7 	bne	c7e20d30 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
}
c7e20d50:	e8bd8010 	pop	{r4, pc}
c7e20d54:	c7e2d044 	.word	0xc7e2d044

c7e20d58 <print_size>:
 * print sizes as "xxx KiB", "xxx.y KiB", "xxx MiB", "xxx.y MiB",
 * xxx GiB, xxx.y GiB, etc as needed; allow for optional trailing string
 * (like "\n")
 */
void print_size(unsigned long long size, const char *s)
{
c7e20d58:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e20d5c:	e24dd020 	sub	sp, sp, #32	; 0x20
c7e20d60:	e58d0010 	str	r0, [sp, #16]
c7e20d64:	e58d1014 	str	r1, [sp, #20]
c7e20d68:	e58d200c 	str	r2, [sp, #12]
c7e20d6c:	e3a0903c 	mov	r9, #60	; 0x3c
c7e20d70:	e3a04000 	mov	r4, #0	; 0x0
	unsigned long d = 10 * ARRAY_SIZE(names);
	char c = 0;
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(names); i++, d -= 10) {
		if (size >> d) {
c7e20d74:	e1a02009 	mov	r2, r9
c7e20d78:	e28d1010 	add	r1, sp, #16	; 0x10
c7e20d7c:	e8910003 	ldm	r1, {r0, r1}
c7e20d80:	eb002677 	bl	c7e2a764 <__lshrdi3>
c7e20d84:	e1a06000 	mov	r6, r0
c7e20d88:	e1a07001 	mov	r7, r1
c7e20d8c:	e1961007 	orrs	r1, r6, r7
c7e20d90:	0a000005 	beq	c7e20dac <print_size+0x54>
			c = names[i];
c7e20d94:	e59f3104 	ldr	r3, [pc, #260]	; c7e20ea0 <print_size+0x148>
c7e20d98:	e7d33004 	ldrb	r3, [r3, r4]
			break;
		}
	}

	if (!c) {
c7e20d9c:	e3530000 	cmp	r3, #0	; 0x0
	char c = 0;
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(names); i++, d -= 10) {
		if (size >> d) {
			c = names[i];
c7e20da0:	e58d301c 	str	r3, [sp, #28]
			break;
		}
	}

	if (!c) {
c7e20da4:	1a00000c 	bne	c7e20ddc <print_size+0x84>
c7e20da8:	ea000003 	b	c7e20dbc <print_size+0x64>
	static const char names[] = {'E', 'P', 'T', 'G', 'M', 'K'};
	unsigned long d = 10 * ARRAY_SIZE(names);
	char c = 0;
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(names); i++, d -= 10) {
c7e20dac:	e2844001 	add	r4, r4, #1	; 0x1
c7e20db0:	e3540006 	cmp	r4, #6	; 0x6
c7e20db4:	e249900a 	sub	r9, r9, #10	; 0xa
c7e20db8:	1affffed 	bne	c7e20d74 <print_size+0x1c>
			break;
		}
	}

	if (!c) {
		printf("%llu Bytes%s", size, s);
c7e20dbc:	e59d100c 	ldr	r1, [sp, #12]
c7e20dc0:	e28d3010 	add	r3, sp, #16	; 0x10
c7e20dc4:	e893000c 	ldm	r3, {r2, r3}
c7e20dc8:	e59f00d4 	ldr	r0, [pc, #212]	; c7e20ea4 <print_size+0x14c>
c7e20dcc:	e58d1000 	str	r1, [sp]
c7e20dd0:	ebff9f20 	bl	c7e08a58 <printf>
	printf ("%lu", n);
	if (m) {
		printf (".%ld", m);
	}
	printf (" %ciB%s", c, s);
}
c7e20dd4:	e28dd020 	add	sp, sp, #32	; 0x20
c7e20dd8:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
		printf("%llu Bytes%s", size, s);
		return;
	}

	n = size >> d;
	f = size & ((1ULL << d) - 1);
c7e20ddc:	e3a0a001 	mov	sl, #1	; 0x1
c7e20de0:	e3a0b000 	mov	fp, #0	; 0x0
c7e20de4:	e1a02009 	mov	r2, r9
c7e20de8:	e1a0000a 	mov	r0, sl
c7e20dec:	e1a0100b 	mov	r1, fp
	if (!c) {
		printf("%llu Bytes%s", size, s);
		return;
	}

	n = size >> d;
c7e20df0:	e58d6018 	str	r6, [sp, #24]
	f = size & ((1ULL << d) - 1);
c7e20df4:	eb002668 	bl	c7e2a79c <__ashldi3>
c7e20df8:	e1a03000 	mov	r3, r0
c7e20dfc:	e1a04001 	mov	r4, r1
c7e20e00:	e053300a 	subs	r3, r3, sl
c7e20e04:	e0c4400b 	sbc	r4, r4, fp
c7e20e08:	e28d2010 	add	r2, sp, #16	; 0x10
c7e20e0c:	e8920006 	ldm	r2, {r1, r2}
c7e20e10:	e0047002 	and	r7, r4, r2
c7e20e14:	e0036001 	and	r6, r3, r1

	/* If there's a remainder, deal with it */
	if (f) {
c7e20e18:	e1960007 	orrs	r0, r6, r7
c7e20e1c:	01a04000 	moveq	r4, r0
c7e20e20:	0a000010 	beq	c7e20e68 <print_size+0x110>
		m = (10ULL * f + (1ULL << (d - 1))) >> d;
c7e20e24:	e3a0300a 	mov	r3, #10	; 0xa
c7e20e28:	e0854396 	umull	r4, r5, r6, r3
c7e20e2c:	e2492001 	sub	r2, r9, #1	; 0x1
c7e20e30:	e1a0000a 	mov	r0, sl
c7e20e34:	e1a0100b 	mov	r1, fp
c7e20e38:	e0255793 	mla	r5, r3, r7, r5
c7e20e3c:	eb002656 	bl	c7e2a79c <__ashldi3>
c7e20e40:	e0900004 	adds	r0, r0, r4
c7e20e44:	e1a02009 	mov	r2, r9
c7e20e48:	e0a11005 	adc	r1, r1, r5
c7e20e4c:	eb002644 	bl	c7e2a764 <__lshrdi3>

		if (m >= 10) {
c7e20e50:	e3500009 	cmp	r0, #9	; 0x9
			m -= 10;
			n += 1;
c7e20e54:	859d2018 	ldrhi	r2, [sp, #24]
	n = size >> d;
	f = size & ((1ULL << d) - 1);

	/* If there's a remainder, deal with it */
	if (f) {
		m = (10ULL * f + (1ULL << (d - 1))) >> d;
c7e20e58:	e1a04000 	mov	r4, r0

		if (m >= 10) {
			m -= 10;
			n += 1;
c7e20e5c:	82822001 	addhi	r2, r2, #1	; 0x1
	/* If there's a remainder, deal with it */
	if (f) {
		m = (10ULL * f + (1ULL << (d - 1))) >> d;

		if (m >= 10) {
			m -= 10;
c7e20e60:	8240400a 	subhi	r4, r0, #10	; 0xa
			n += 1;
c7e20e64:	858d2018 	strhi	r2, [sp, #24]
		}
	}

	printf ("%lu", n);
c7e20e68:	e59d1018 	ldr	r1, [sp, #24]
c7e20e6c:	e59f0034 	ldr	r0, [pc, #52]	; c7e20ea8 <print_size+0x150>
c7e20e70:	ebff9ef8 	bl	c7e08a58 <printf>
	if (m) {
c7e20e74:	e3540000 	cmp	r4, #0	; 0x0
c7e20e78:	0a000002 	beq	c7e20e88 <print_size+0x130>
		printf (".%ld", m);
c7e20e7c:	e1a01004 	mov	r1, r4
c7e20e80:	e59f0024 	ldr	r0, [pc, #36]	; c7e20eac <print_size+0x154>
c7e20e84:	ebff9ef3 	bl	c7e08a58 <printf>
	}
	printf (" %ciB%s", c, s);
c7e20e88:	e59d101c 	ldr	r1, [sp, #28]
c7e20e8c:	e59d200c 	ldr	r2, [sp, #12]
c7e20e90:	e59f0018 	ldr	r0, [pc, #24]	; c7e20eb0 <print_size+0x158>
}
c7e20e94:	e28dd020 	add	sp, sp, #32	; 0x20
c7e20e98:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}

	printf ("%lu", n);
	if (m) {
		printf (".%ld", m);
	}
	printf (" %ciB%s", c, s);
c7e20e9c:	eaff9eed 	b	c7e08a58 <printf>
c7e20ea0:	c7e2d244 	.word	0xc7e2d244
c7e20ea4:	c7e34682 	.word	0xc7e34682
c7e20ea8:	c7e3468f 	.word	0xc7e3468f
c7e20eac:	c7e34693 	.word	0xc7e34693
c7e20eb0:	c7e34698 	.word	0xc7e34698

c7e20eb4 <display_options>:
#include <version.h>
#include <linux/ctype.h>
#include <asm/io.h>

int display_options (void)
{
c7e20eb4:	e92d4010 	push	{r4, lr}
#if defined(BUILD_TAG)
	printf ("\n\n%s, Build: %s\n\n", version_string, BUILD_TAG);
#else
	printf ("\n\n%s\n\n", version_string);
c7e20eb8:	e59f100c 	ldr	r1, [pc, #12]	; c7e20ecc <display_options+0x18>
c7e20ebc:	e59f000c 	ldr	r0, [pc, #12]	; c7e20ed0 <display_options+0x1c>
c7e20ec0:	ebff9ee4 	bl	c7e08a58 <printf>
#endif
	return 0;
}
c7e20ec4:	e3a00000 	mov	r0, #0	; 0x0
c7e20ec8:	e8bd8010 	pop	{r4, pc}
c7e20ecc:	c7e2b1f0 	.word	0xc7e2b1f0
c7e20ed0:	c7e2dddb 	.word	0xc7e2dddb

c7e20ed4 <print_buffer>:
 *    linelen: Number of values to print per line; specify 0 for default length
 */
#define MAX_LINE_LENGTH_BYTES (64)
#define DEFAULT_LINE_LENGTH_BYTES (16)
int print_buffer (ulong addr, void* data, uint width, uint count, uint linelen)
{
c7e20ed4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e20ed8:	e24dd050 	sub	sp, sp, #80	; 0x50
c7e20edc:	e59d6070 	ldr	r6, [sp, #112]
c7e20ee0:	e1a07002 	mov	r7, r2
		uint16_t us[MAX_LINE_LENGTH_BYTES/sizeof(uint16_t) + 1];
		uint8_t  uc[MAX_LINE_LENGTH_BYTES/sizeof(uint8_t) + 1];
	} lb;
	int i;

	if (linelen*width > MAX_LINE_LENGTH_BYTES)
c7e20ee4:	e0020697 	mul	r2, r7, r6
c7e20ee8:	e3520040 	cmp	r2, #64	; 0x40
 *    linelen: Number of values to print per line; specify 0 for default length
 */
#define MAX_LINE_LENGTH_BYTES (64)
#define DEFAULT_LINE_LENGTH_BYTES (16)
int print_buffer (ulong addr, void* data, uint width, uint count, uint linelen)
{
c7e20eec:	e1a0b000 	mov	fp, r0
c7e20ef0:	e1a09001 	mov	r9, r1
c7e20ef4:	e1a0a003 	mov	sl, r3
		uint16_t us[MAX_LINE_LENGTH_BYTES/sizeof(uint16_t) + 1];
		uint8_t  uc[MAX_LINE_LENGTH_BYTES/sizeof(uint8_t) + 1];
	} lb;
	int i;

	if (linelen*width > MAX_LINE_LENGTH_BYTES)
c7e20ef8:	9a000003 	bls	c7e20f0c <print_buffer+0x38>
		linelen = MAX_LINE_LENGTH_BYTES / width;
c7e20efc:	e3a00040 	mov	r0, #64	; 0x40
c7e20f00:	e1a01007 	mov	r1, r7
c7e20f04:	eb00257f 	bl	c7e2a508 <__udivsi3>
c7e20f08:	e1a06000 	mov	r6, r0
	if (linelen < 1)
c7e20f0c:	e3560000 	cmp	r6, #0	; 0x0
c7e20f10:	1a000040 	bne	c7e21018 <print_buffer+0x144>
		linelen = DEFAULT_LINE_LENGTH_BYTES / width;
c7e20f14:	e3a00010 	mov	r0, #16	; 0x10
c7e20f18:	e1a01007 	mov	r1, r7
c7e20f1c:	eb002579 	bl	c7e2a508 <__udivsi3>
c7e20f20:	e1a06000 	mov	r6, r0
c7e20f24:	ea00003b 	b	c7e21018 <print_buffer+0x144>

	while (count) {
		printf("%08lx:", addr);
c7e20f28:	e59f0104 	ldr	r0, [pc, #260]	; c7e21034 <print_buffer+0x160>
c7e20f2c:	e1a0100b 	mov	r1, fp
c7e20f30:	e156000a 	cmp	r6, sl
c7e20f34:	21a0600a 	movcs	r6, sl
c7e20f38:	ebff9ec6 	bl	c7e08a58 <printf>
c7e20f3c:	e1a05009 	mov	r5, r9
c7e20f40:	e3a04000 	mov	r4, #0	; 0x0
c7e20f44:	ea000012 	b	c7e20f94 <print_buffer+0xc0>
			linelen = count;

		/* Copy from memory into linebuf and print hex values */
		for (i = 0; i < linelen; i++) {
			uint32_t x;
			if (width == 4)
c7e20f48:	e3570004 	cmp	r7, #4	; 0x4
				x = lb.ui[i] = *(volatile uint32_t *)data;
c7e20f4c:	05952000 	ldreq	r2, [r5]
c7e20f50:	028d300c 	addeq	r3, sp, #12	; 0xc
c7e20f54:	07832104 	streq	r2, [r3, r4, lsl #2]
			linelen = count;

		/* Copy from memory into linebuf and print hex values */
		for (i = 0; i < linelen; i++) {
			uint32_t x;
			if (width == 4)
c7e20f58:	0a000008 	beq	c7e20f80 <print_buffer+0xac>
				x = lb.ui[i] = *(volatile uint32_t *)data;
			else if (width == 2)
c7e20f5c:	e3570002 	cmp	r7, #2	; 0x2
				x = lb.us[i] = *(volatile uint16_t *)data;
			else
				x = lb.uc[i] = *(volatile uint8_t *)data;
c7e20f60:	15d53000 	ldrbne	r3, [r5]
		for (i = 0; i < linelen; i++) {
			uint32_t x;
			if (width == 4)
				x = lb.ui[i] = *(volatile uint32_t *)data;
			else if (width == 2)
				x = lb.us[i] = *(volatile uint16_t *)data;
c7e20f64:	01d530b0 	ldrheq	r3, [r5]
c7e20f68:	e28d100c 	add	r1, sp, #12	; 0xc
c7e20f6c:	01a02084 	lsleq	r2, r4, #1
			else
				x = lb.uc[i] = *(volatile uint8_t *)data;
c7e20f70:	120330ff 	andne	r3, r3, #255	; 0xff
		for (i = 0; i < linelen; i++) {
			uint32_t x;
			if (width == 4)
				x = lb.ui[i] = *(volatile uint32_t *)data;
			else if (width == 2)
				x = lb.us[i] = *(volatile uint16_t *)data;
c7e20f74:	018130b2 	strheq	r3, [r1, r2]
			else
				x = lb.uc[i] = *(volatile uint8_t *)data;
c7e20f78:	17c13004 	strbne	r3, [r1, r4]
c7e20f7c:	e1a02003 	mov	r2, r3
			printf(" %0*x", width * 2, x);
c7e20f80:	e59f00b0 	ldr	r0, [pc, #176]	; c7e21038 <print_buffer+0x164>
c7e20f84:	e59d1004 	ldr	r1, [sp, #4]
c7e20f88:	ebff9eb2 	bl	c7e08a58 <printf>
			data += width;
c7e20f8c:	e0855007 	add	r5, r5, r7
		/* check for overflow condition */
		if (count < linelen)
			linelen = count;

		/* Copy from memory into linebuf and print hex values */
		for (i = 0; i < linelen; i++) {
c7e20f90:	e2844001 	add	r4, r4, #1	; 0x1
c7e20f94:	e1540006 	cmp	r4, r6
c7e20f98:	3affffea 	bcc	c7e20f48 <print_buffer+0x74>
 *    linelen: Number of values to print per line; specify 0 for default length
 */
#define MAX_LINE_LENGTH_BYTES (64)
#define DEFAULT_LINE_LENGTH_BYTES (16)
int print_buffer (ulong addr, void* data, uint width, uint count, uint linelen)
{
c7e20f9c:	e0040697 	mul	r4, r7, r6
c7e20fa0:	e3a00000 	mov	r0, #0	; 0x0
c7e20fa4:	e0899004 	add	r9, r9, r4
c7e20fa8:	ea00000a 	b	c7e20fd8 <print_buffer+0x104>
			data += width;
		}

		/* Print data in ASCII characters */
		for (i = 0; i < linelen * width; i++) {
			if (!isprint(lb.uc[i]) || lb.uc[i] >= 0x80)
c7e20fac:	e7d11000 	ldrb	r1, [r1, r0]
c7e20fb0:	e59f3084 	ldr	r3, [pc, #132]	; c7e2103c <print_buffer+0x168>
c7e20fb4:	e7d33001 	ldrb	r3, [r3, r1]
c7e20fb8:	e3130097 	tst	r3, #151	; 0x97
c7e20fbc:	0a000001 	beq	c7e20fc8 <print_buffer+0xf4>
c7e20fc0:	e3110080 	tst	r1, #128	; 0x80
c7e20fc4:	0a000002 	beq	c7e20fd4 <print_buffer+0x100>
				lb.uc[i] = '.';
c7e20fc8:	e3a0202e 	mov	r2, #46	; 0x2e
c7e20fcc:	e28d300c 	add	r3, sp, #12	; 0xc
c7e20fd0:	e7c32000 	strb	r2, [r3, r0]
			printf(" %0*x", width * 2, x);
			data += width;
		}

		/* Print data in ASCII characters */
		for (i = 0; i < linelen * width; i++) {
c7e20fd4:	e2800001 	add	r0, r0, #1	; 0x1
c7e20fd8:	e1500004 	cmp	r0, r4
c7e20fdc:	e28d100c 	add	r1, sp, #12	; 0xc
c7e20fe0:	3afffff1 	bcc	c7e20fac <print_buffer+0xd8>
			if (!isprint(lb.uc[i]) || lb.uc[i] >= 0x80)
				lb.uc[i] = '.';
		}
		lb.uc[i] = '\0';
c7e20fe4:	e28d3050 	add	r3, sp, #80	; 0x50
c7e20fe8:	e0832004 	add	r2, r3, r4
c7e20fec:	e3a03000 	mov	r3, #0	; 0x0
c7e20ff0:	e5423044 	strb	r3, [r2, #-68]
		printf("    %s\n", lb.uc);
c7e20ff4:	e59f0044 	ldr	r0, [pc, #68]	; c7e21040 <print_buffer+0x16c>
c7e20ff8:	ebff9e96 	bl	c7e08a58 <printf>

		/* update references */
		addr += linelen * width;
		count -= linelen;

		if (ctrlc())
c7e20ffc:	ebff9f41 	bl	c7e08d08 <ctrlc>
c7e21000:	e3500000 	cmp	r0, #0	; 0x0
c7e21004:	13e00000 	mvnne	r0, #0	; 0x0
c7e21008:	1a000007 	bne	c7e2102c <print_buffer+0x158>
		}
		lb.uc[i] = '\0';
		printf("    %s\n", lb.uc);

		/* update references */
		addr += linelen * width;
c7e2100c:	e08bb004 	add	fp, fp, r4
		count -= linelen;
c7e21010:	e066a00a 	rsb	sl, r6, sl
c7e21014:	ea000001 	b	c7e21020 <print_buffer+0x14c>
				x = lb.ui[i] = *(volatile uint32_t *)data;
			else if (width == 2)
				x = lb.us[i] = *(volatile uint16_t *)data;
			else
				x = lb.uc[i] = *(volatile uint8_t *)data;
			printf(" %0*x", width * 2, x);
c7e21018:	e1a03087 	lsl	r3, r7, #1
c7e2101c:	e58d3004 	str	r3, [sp, #4]
	if (linelen*width > MAX_LINE_LENGTH_BYTES)
		linelen = MAX_LINE_LENGTH_BYTES / width;
	if (linelen < 1)
		linelen = DEFAULT_LINE_LENGTH_BYTES / width;

	while (count) {
c7e21020:	e35a0000 	cmp	sl, #0	; 0x0
c7e21024:	1affffbf 	bne	c7e20f28 <print_buffer+0x54>
c7e21028:	e1a0000a 	mov	r0, sl
		if (ctrlc())
			return -1;
	}

	return 0;
}
c7e2102c:	e28dd050 	add	sp, sp, #80	; 0x50
c7e21030:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e21034:	c7e2ffa1 	.word	0xc7e2ffa1
c7e21038:	c7e346a0 	.word	0xc7e346a0
c7e2103c:	c7e2d144 	.word	0xc7e2d144
c7e21040:	c7e346a6 	.word	0xc7e346a6

c7e21044 <__div64_32>:
 */

#include <linux/types.h>

uint32_t __div64_32(uint64_t *n, uint32_t base)
{
c7e21044:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	uint64_t rem = *n;
c7e21048:	e8900c00 	ldm	r0, {sl, fp}
	uint64_t res, d = 1;
	uint32_t high = rem >> 32;

	/* Reduce the thing a bit first */
	res = 0;
	if (high >= base) {
c7e2104c:	e151000b 	cmp	r1, fp
 */

#include <linux/types.h>

uint32_t __div64_32(uint64_t *n, uint32_t base)
{
c7e21050:	e1a09000 	mov	r9, r0
c7e21054:	e1a05001 	mov	r5, r1
	uint64_t res, d = 1;
	uint32_t high = rem >> 32;

	/* Reduce the thing a bit first */
	res = 0;
	if (high >= base) {
c7e21058:	83a06000 	movhi	r6, #0	; 0x0
c7e2105c:	83a07000 	movhi	r7, #0	; 0x0
c7e21060:	8a000007 	bhi	c7e21084 <__div64_32+0x40>
		high /= base;
c7e21064:	e1a0000b 	mov	r0, fp
c7e21068:	eb002526 	bl	c7e2a508 <__udivsi3>
		res = (uint64_t) high << 32;
		rem -= (uint64_t) (high*base) << 32;
c7e2106c:	e0040095 	mul	r4, r5, r0

	/* Reduce the thing a bit first */
	res = 0;
	if (high >= base) {
		high /= base;
		res = (uint64_t) high << 32;
c7e21070:	e3a06000 	mov	r6, #0	; 0x0
		rem -= (uint64_t) (high*base) << 32;
c7e21074:	e1a03006 	mov	r3, r6

	/* Reduce the thing a bit first */
	res = 0;
	if (high >= base) {
		high /= base;
		res = (uint64_t) high << 32;
c7e21078:	e1a07000 	mov	r7, r0
		rem -= (uint64_t) (high*base) << 32;
c7e2107c:	e05aa003 	subs	sl, sl, r3
c7e21080:	e0cbb004 	sbc	fp, fp, r4
#include <linux/types.h>

uint32_t __div64_32(uint64_t *n, uint32_t base)
{
	uint64_t rem = *n;
	uint64_t b = base;
c7e21084:	e1a01005 	mov	r1, r5
c7e21088:	e3a02000 	mov	r2, #0	; 0x0
c7e2108c:	e3a04001 	mov	r4, #1	; 0x1
c7e21090:	e3a05000 	mov	r5, #0	; 0x0
c7e21094:	ea000003 	b	c7e210a8 <__div64_32+0x64>
		res = (uint64_t) high << 32;
		rem -= (uint64_t) (high*base) << 32;
	}

	while ((int64_t)b > 0 && b < rem) {
		b = b+b;
c7e21098:	e0911001 	adds	r1, r1, r1
c7e2109c:	e0a22002 	adc	r2, r2, r2
		d = d+d;
c7e210a0:	e0944004 	adds	r4, r4, r4
c7e210a4:	e0a55005 	adc	r5, r5, r5
		high /= base;
		res = (uint64_t) high << 32;
		rem -= (uint64_t) (high*base) << 32;
	}

	while ((int64_t)b > 0 && b < rem) {
c7e210a8:	e3520000 	cmp	r2, #0	; 0x0
c7e210ac:	e3a03000 	mov	r3, #0	; 0x0
c7e210b0:	ca000002 	bgt	c7e210c0 <__div64_32+0x7c>
c7e210b4:	1a000002 	bne	c7e210c4 <__div64_32+0x80>
c7e210b8:	e3510000 	cmp	r1, #0	; 0x0
c7e210bc:	0a000000 	beq	c7e210c4 <__div64_32+0x80>
c7e210c0:	e3a03001 	mov	r3, #1	; 0x1
c7e210c4:	e15b0002 	cmp	fp, r2
c7e210c8:	e3a00000 	mov	r0, #0	; 0x0
c7e210cc:	8a000002 	bhi	c7e210dc <__div64_32+0x98>
c7e210d0:	1a000002 	bne	c7e210e0 <__div64_32+0x9c>
c7e210d4:	e15a0001 	cmp	sl, r1
c7e210d8:	9a000000 	bls	c7e210e0 <__div64_32+0x9c>
c7e210dc:	e3a00001 	mov	r0, #1	; 0x1
c7e210e0:	e0033000 	and	r3, r3, r0
c7e210e4:	e3130001 	tst	r3, #1	; 0x1
c7e210e8:	1affffea 	bne	c7e21098 <__div64_32+0x54>
		b = b+b;
		d = d+d;
	}

	do {
		if (rem >= b) {
c7e210ec:	e152000b 	cmp	r2, fp
c7e210f0:	8a000006 	bhi	c7e21110 <__div64_32+0xcc>
c7e210f4:	1a000001 	bne	c7e21100 <__div64_32+0xbc>
c7e210f8:	e151000a 	cmp	r1, sl
c7e210fc:	8a000003 	bhi	c7e21110 <__div64_32+0xcc>
			rem -= b;
c7e21100:	e05aa001 	subs	sl, sl, r1
c7e21104:	e0cbb002 	sbc	fp, fp, r2
			res += d;
c7e21108:	e0966004 	adds	r6, r6, r4
c7e2110c:	e0a77005 	adc	r7, r7, r5
		}
		b >>= 1;
		d >>= 1;
c7e21110:	e1b050a5 	lsrs	r5, r5, #1
c7e21114:	e1a04064 	rrx	r4, r4
	} while (d);
c7e21118:	e1943005 	orrs	r3, r4, r5
c7e2111c:	0a000002 	beq	c7e2112c <__div64_32+0xe8>
	do {
		if (rem >= b) {
			rem -= b;
			res += d;
		}
		b >>= 1;
c7e21120:	e1b020a2 	lsrs	r2, r2, #1
c7e21124:	e1a01061 	rrx	r1, r1
c7e21128:	eaffffef 	b	c7e210ec <__div64_32+0xa8>
		d >>= 1;
	} while (d);

	*n = res;
c7e2112c:	e88900c0 	stm	r9, {r6, r7}
	return rem;
}
c7e21130:	e1a0000a 	mov	r0, sl
c7e21134:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e21138 <zunzip>:
/*
 * Uncompress blocks compressed with zlib without headers
 */
int zunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp,
						int stoponerr, int offset)
{
c7e21138:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
	z_stream s;
	int r;

	s.zalloc = gzalloc;
c7e2113c:	e59fc0e8 	ldr	ip, [pc, #232]	; c7e2122c <zunzip+0xf4>
/*
 * Uncompress blocks compressed with zlib without headers
 */
int zunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp,
						int stoponerr, int offset)
{
c7e21140:	e24dd044 	sub	sp, sp, #68	; 0x44
	z_stream s;
	int r;

	s.zalloc = gzalloc;
c7e21144:	e58dc024 	str	ip, [sp, #36]
	s.zfree = gzfree;
c7e21148:	e59fc0e0 	ldr	ip, [pc, #224]	; c7e21230 <zunzip+0xf8>
/*
 * Uncompress blocks compressed with zlib without headers
 */
int zunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp,
						int stoponerr, int offset)
{
c7e2114c:	e1a05000 	mov	r5, r0
c7e21150:	e1a0a001 	mov	sl, r1
c7e21154:	e1a07002 	mov	r7, r2
c7e21158:	e1a04003 	mov	r4, r3
	int r;

	s.zalloc = gzalloc;
	s.zfree = gzfree;

	r = inflateInit2(&s, -MAX_WBITS);
c7e2115c:	e28d0004 	add	r0, sp, #4	; 0x4
c7e21160:	e3e0100e 	mvn	r1, #14	; 0xe
c7e21164:	e59f20c8 	ldr	r2, [pc, #200]	; c7e21234 <zunzip+0xfc>
c7e21168:	e3a0303c 	mov	r3, #60	; 0x3c
{
	z_stream s;
	int r;

	s.zalloc = gzalloc;
	s.zfree = gzfree;
c7e2116c:	e58dc028 	str	ip, [sp, #40]
/*
 * Uncompress blocks compressed with zlib without headers
 */
int zunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp,
						int stoponerr, int offset)
{
c7e21170:	e59d9060 	ldr	r9, [sp, #96]
c7e21174:	e59d6064 	ldr	r6, [sp, #100]
	int r;

	s.zalloc = gzalloc;
	s.zfree = gzfree;

	r = inflateInit2(&s, -MAX_WBITS);
c7e21178:	eb000e3d 	bl	c7e24a74 <inflateInit2_>
	if (r != Z_OK) {
c7e2117c:	e3500000 	cmp	r0, #0	; 0x0
c7e21180:	0a000003 	beq	c7e21194 <zunzip+0x5c>
		printf ("Error: inflateInit2() returned %d\n", r);
c7e21184:	e1a01000 	mov	r1, r0
c7e21188:	e59f00a8 	ldr	r0, [pc, #168]	; c7e21238 <zunzip+0x100>
c7e2118c:	ebff9e31 	bl	c7e08a58 <printf>
c7e21190:	ea000013 	b	c7e211e4 <zunzip+0xac>
		return -1;
	}
	s.next_in = src + offset;
	s.avail_in = *lenp - offset;
c7e21194:	e5943000 	ldr	r3, [r4]
	r = inflateInit2(&s, -MAX_WBITS);
	if (r != Z_OK) {
		printf ("Error: inflateInit2() returned %d\n", r);
		return -1;
	}
	s.next_in = src + offset;
c7e21198:	e0872006 	add	r2, r7, r6
	s.avail_in = *lenp - offset;
c7e2119c:	e0663003 	rsb	r3, r6, r3
	r = inflateInit2(&s, -MAX_WBITS);
	if (r != Z_OK) {
		printf ("Error: inflateInit2() returned %d\n", r);
		return -1;
	}
	s.next_in = src + offset;
c7e211a0:	e98d000c 	stmib	sp, {r2, r3}
	s.avail_in = *lenp - offset;
	s.next_out = dst;
c7e211a4:	e58d5010 	str	r5, [sp, #16]
	s.avail_out = dstlen;
c7e211a8:	e58da014 	str	sl, [sp, #20]
	do {
		r = inflate(&s, Z_FINISH);
c7e211ac:	e28d7004 	add	r7, sp, #4	; 0x4
c7e211b0:	e1a00007 	mov	r0, r7
c7e211b4:	e3a01004 	mov	r1, #4	; 0x4
c7e211b8:	eb000f60 	bl	c7e24f40 <inflate>
		if (r != Z_STREAM_END && r != Z_BUF_ERROR && stoponerr == 1) {
c7e211bc:	e3500001 	cmp	r0, #1	; 0x1
c7e211c0:	13700005 	cmnne	r0, #5	; 0x5
c7e211c4:	0a000008 	beq	c7e211ec <zunzip+0xb4>
c7e211c8:	e3590001 	cmp	r9, #1	; 0x1
c7e211cc:	1a000006 	bne	c7e211ec <zunzip+0xb4>
			printf("Error: inflate() returned %d\n", r);
c7e211d0:	e1a01000 	mov	r1, r0
c7e211d4:	e59f0060 	ldr	r0, [pc, #96]	; c7e2123c <zunzip+0x104>
c7e211d8:	ebff9e1e 	bl	c7e08a58 <printf>
			inflateEnd(&s);
c7e211dc:	e1a00007 	mov	r0, r7
c7e211e0:	eb000e69 	bl	c7e24b8c <inflateEnd>
c7e211e4:	e3e00000 	mvn	r0, #0	; 0x0
c7e211e8:	ea00000d 	b	c7e21224 <zunzip+0xec>
			return -1;
		}
		s.avail_in = *lenp - offset - (int)(s.next_out - (unsigned char*)dst);
c7e211ec:	e59d1010 	ldr	r1, [sp, #16]
c7e211f0:	e5942000 	ldr	r2, [r4]
c7e211f4:	e0613005 	rsb	r3, r1, r5
c7e211f8:	e0833002 	add	r3, r3, r2
c7e211fc:	e0663003 	rsb	r3, r6, r3
		s.avail_out = dstlen;
	} while (r == Z_BUF_ERROR);
c7e21200:	e3700005 	cmn	r0, #5	; 0x5
		if (r != Z_STREAM_END && r != Z_BUF_ERROR && stoponerr == 1) {
			printf("Error: inflate() returned %d\n", r);
			inflateEnd(&s);
			return -1;
		}
		s.avail_in = *lenp - offset - (int)(s.next_out - (unsigned char*)dst);
c7e21204:	e58d3008 	str	r3, [sp, #8]
		s.avail_out = dstlen;
c7e21208:	e58da014 	str	sl, [sp, #20]
	} while (r == Z_BUF_ERROR);
c7e2120c:	0affffe6 	beq	c7e211ac <zunzip+0x74>
	*lenp = s.next_out - (unsigned char *) dst;
c7e21210:	e0653001 	rsb	r3, r5, r1
c7e21214:	e5843000 	str	r3, [r4]
	inflateEnd(&s);
c7e21218:	e28d0004 	add	r0, sp, #4	; 0x4
c7e2121c:	eb000e5a 	bl	c7e24b8c <inflateEnd>
c7e21220:	e3a00000 	mov	r0, #0	; 0x0

	return 0;
}
c7e21224:	e28dd044 	add	sp, sp, #68	; 0x44
c7e21228:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e2122c:	c7e21310 	.word	0xc7e21310
c7e21230:	c7e21308 	.word	0xc7e21308
c7e21234:	c7e346ae 	.word	0xc7e346ae
c7e21238:	c7e346b4 	.word	0xc7e346b4
c7e2123c:	c7e346d7 	.word	0xc7e346d7

c7e21240 <gunzip>:
{
	free (addr);
}

int gunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp)
{
c7e21240:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
c7e21244:	e1a0c002 	mov	ip, r2
	int i, flags;

	/* skip header */
	i = 10;
	flags = src[3];
	if (src[2] != DEFLATED || (flags & RESERVED) != 0) {
c7e21248:	e5d22002 	ldrb	r2, [r2, #2]
{
	free (addr);
}

int gunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp)
{
c7e2124c:	e1a05001 	mov	r5, r1
	int i, flags;

	/* skip header */
	i = 10;
	flags = src[3];
	if (src[2] != DEFLATED || (flags & RESERVED) != 0) {
c7e21250:	e3520008 	cmp	r2, #8	; 0x8
{
	free (addr);
}

int gunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp)
{
c7e21254:	e1a04003 	mov	r4, r3
	int i, flags;

	/* skip header */
	i = 10;
	flags = src[3];
c7e21258:	e5dc1003 	ldrb	r1, [ip, #3]
	if (src[2] != DEFLATED || (flags & RESERVED) != 0) {
c7e2125c:	1a000001 	bne	c7e21268 <gunzip+0x28>
c7e21260:	e31100e0 	tst	r1, #224	; 0xe0
c7e21264:	0a000001 	beq	c7e21270 <gunzip+0x30>
		puts ("Error: Bad gzipped data\n");
c7e21268:	e59f0090 	ldr	r0, [pc, #144]	; c7e21300 <gunzip+0xc0>
c7e2126c:	ea000019 	b	c7e212d8 <gunzip+0x98>
		return (-1);
	}
	if ((flags & EXTRA_FIELD) != 0)
c7e21270:	e3110004 	tst	r1, #4	; 0x4
		i = 12 + src[10] + (src[11] << 8);
c7e21274:	15dc300a 	ldrbne	r3, [ip, #10]
c7e21278:	15dc200b 	ldrbne	r2, [ip, #11]
c7e2127c:	1283300c 	addne	r3, r3, #12	; 0xc
	flags = src[3];
	if (src[2] != DEFLATED || (flags & RESERVED) != 0) {
		puts ("Error: Bad gzipped data\n");
		return (-1);
	}
	if ((flags & EXTRA_FIELD) != 0)
c7e21280:	03a0e00a 	moveq	lr, #10	; 0xa
		i = 12 + src[10] + (src[11] << 8);
c7e21284:	1083e402 	addne	lr, r3, r2, lsl #8
	if ((flags & ORIG_NAME) != 0)
c7e21288:	e3110008 	tst	r1, #8	; 0x8
c7e2128c:	0a000004 	beq	c7e212a4 <gunzip+0x64>
c7e21290:	e08c200e 	add	r2, ip, lr
		while (src[i++] != 0)
c7e21294:	e4d23001 	ldrb	r3, [r2], #1
c7e21298:	e28ee001 	add	lr, lr, #1	; 0x1
c7e2129c:	e3530000 	cmp	r3, #0	; 0x0
c7e212a0:	1afffffb 	bne	c7e21294 <gunzip+0x54>
			;
	if ((flags & COMMENT) != 0)
c7e212a4:	e3110010 	tst	r1, #16	; 0x10
c7e212a8:	0a000004 	beq	c7e212c0 <gunzip+0x80>
c7e212ac:	e08c200e 	add	r2, ip, lr
		while (src[i++] != 0)
c7e212b0:	e4d23001 	ldrb	r3, [r2], #1
c7e212b4:	e28ee001 	add	lr, lr, #1	; 0x1
c7e212b8:	e3530000 	cmp	r3, #0	; 0x0
c7e212bc:	1afffffb 	bne	c7e212b0 <gunzip+0x70>
			;
	if ((flags & HEAD_CRC) != 0)
c7e212c0:	e3110002 	tst	r1, #2	; 0x2
		i += 2;
	if (i >= *lenp) {
c7e212c4:	e5943000 	ldr	r3, [r4]
			;
	if ((flags & COMMENT) != 0)
		while (src[i++] != 0)
			;
	if ((flags & HEAD_CRC) != 0)
		i += 2;
c7e212c8:	128ee002 	addne	lr, lr, #2	; 0x2
	if (i >= *lenp) {
c7e212cc:	e15e0003 	cmp	lr, r3
c7e212d0:	3a000003 	bcc	c7e212e4 <gunzip+0xa4>
		puts ("Error: gunzip out of data in header\n");
c7e212d4:	e59f0028 	ldr	r0, [pc, #40]	; c7e21304 <gunzip+0xc4>
c7e212d8:	ebff9dc3 	bl	c7e089ec <puts>
c7e212dc:	e3e00000 	mvn	r0, #0	; 0x0
c7e212e0:	ea000005 	b	c7e212fc <gunzip+0xbc>
		return (-1);
	}

	return zunzip(dst, dstlen, src, lenp, 1, i);
c7e212e4:	e1a0200c 	mov	r2, ip
c7e212e8:	e1a01005 	mov	r1, r5
c7e212ec:	e3a0c001 	mov	ip, #1	; 0x1
c7e212f0:	e1a03004 	mov	r3, r4
c7e212f4:	e88d5000 	stm	sp, {ip, lr}
c7e212f8:	ebffff8e 	bl	c7e21138 <zunzip>
}
c7e212fc:	e8bd803e 	pop	{r1, r2, r3, r4, r5, pc}
c7e21300:	c7e346f5 	.word	0xc7e346f5
c7e21304:	c7e3470e 	.word	0xc7e3470e

c7e21308 <gzfree>:
	return (p);
}

void gzfree(void *x, void *addr, unsigned nb)
{
	free (addr);
c7e21308:	e1a00001 	mov	r0, r1
c7e2130c:	eaff9f13 	b	c7e08f60 <free>

c7e21310 <gzalloc>:
void *gzalloc(void *x, unsigned items, unsigned size)
{
	void *p;

	size *= items;
	size = (size + ZALLOC_ALIGNMENT - 1) & ~(ZALLOC_ALIGNMENT - 1);
c7e21310:	e0000291 	mul	r0, r1, r2
c7e21314:	e280000f 	add	r0, r0, #15	; 0xf

	p = malloc (size);
c7e21318:	e3c0000f 	bic	r0, r0, #15	; 0xf
c7e2131c:	eaff9f9e 	b	c7e0919c <malloc>

c7e21320 <hdestroy_r>:
 * After using the hash table it has to be destroyed. The used memory can
 * be freed and the local static variable can be marked as not used.
 */

void hdestroy_r(struct hsearch_data *htab, int do_apply)
{
c7e21320:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	int i;

	/* Test for correct arguments.  */
	if (htab == NULL) {
c7e21324:	e2506000 	subs	r6, r0, #0	; 0x0
 * After using the hash table it has to be destroyed. The used memory can
 * be freed and the local static variable can be marked as not used.
 */

void hdestroy_r(struct hsearch_data *htab, int do_apply)
{
c7e21328:	e1a0a001 	mov	sl, r1
	int i;

	/* Test for correct arguments.  */
	if (htab == NULL) {
c7e2132c:	13a07001 	movne	r7, #1	; 0x1
c7e21330:	13a0500c 	movne	r5, #12	; 0xc
c7e21334:	1a000016 	bne	c7e21394 <hdestroy_r+0x74>
		__set_errno(EINVAL);
c7e21338:	e59f3078 	ldr	r3, [pc, #120]	; c7e213b8 <hdestroy_r+0x98>
c7e2133c:	e3a02016 	mov	r2, #22	; 0x16
c7e21340:	e5832000 	str	r2, [r3]
c7e21344:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
		return;
	}

	/* free used memory */
	for (i = 1; i <= htab->size; ++i) {
		if (htab->table[i].used > 0) {
c7e21348:	e5963000 	ldr	r3, [r6]
c7e2134c:	e7932005 	ldr	r2, [r3, r5]
c7e21350:	e0834005 	add	r4, r3, r5
c7e21354:	e3520000 	cmp	r2, #0	; 0x0
		__set_errno(EINVAL);
		return;
	}

	/* free used memory */
	for (i = 1; i <= htab->size; ++i) {
c7e21358:	e285500c 	add	r5, r5, #12	; 0xc
		if (htab->table[i].used > 0) {
c7e2135c:	da00000c 	ble	c7e21394 <hdestroy_r+0x74>
			ENTRY *ep = &htab->table[i].entry;
			if (do_apply && htab->apply != NULL) {
c7e21360:	e35a0000 	cmp	sl, #0	; 0x0
c7e21364:	0a000006 	beq	c7e21384 <hdestroy_r+0x64>
c7e21368:	e596c00c 	ldr	ip, [r6, #12]
				/* deletion is always forced */
				htab->apply(ep->key, ep->data, NULL, H_FORCE);
c7e2136c:	e3a02000 	mov	r2, #0	; 0x0

	/* free used memory */
	for (i = 1; i <= htab->size; ++i) {
		if (htab->table[i].used > 0) {
			ENTRY *ep = &htab->table[i].entry;
			if (do_apply && htab->apply != NULL) {
c7e21370:	e15c0002 	cmp	ip, r2
				/* deletion is always forced */
				htab->apply(ep->key, ep->data, NULL, H_FORCE);
c7e21374:	e3a03002 	mov	r3, #2	; 0x2

	/* free used memory */
	for (i = 1; i <= htab->size; ++i) {
		if (htab->table[i].used > 0) {
			ENTRY *ep = &htab->table[i].entry;
			if (do_apply && htab->apply != NULL) {
c7e21378:	0a000001 	beq	c7e21384 <hdestroy_r+0x64>
				/* deletion is always forced */
				htab->apply(ep->key, ep->data, NULL, H_FORCE);
c7e2137c:	e9940003 	ldmib	r4, {r0, r1}
c7e21380:	e12fff3c 	blx	ip
			}
			free((void *)ep->key);
c7e21384:	e5940004 	ldr	r0, [r4, #4]
c7e21388:	ebff9ef4 	bl	c7e08f60 <free>
			free(ep->data);
c7e2138c:	e5940008 	ldr	r0, [r4, #8]
c7e21390:	ebff9ef2 	bl	c7e08f60 <free>
		__set_errno(EINVAL);
		return;
	}

	/* free used memory */
	for (i = 1; i <= htab->size; ++i) {
c7e21394:	e5963004 	ldr	r3, [r6, #4]
c7e21398:	e1570003 	cmp	r7, r3
c7e2139c:	e2877001 	add	r7, r7, #1	; 0x1
c7e213a0:	9affffe8 	bls	c7e21348 <hdestroy_r+0x28>
			}
			free((void *)ep->key);
			free(ep->data);
		}
	}
	free(htab->table);
c7e213a4:	e5960000 	ldr	r0, [r6]
c7e213a8:	ebff9eec 	bl	c7e08f60 <free>

	/* the sign for an existing table is an value != NULL in htable */
	htab->table = NULL;
c7e213ac:	e3a03000 	mov	r3, #0	; 0x0
c7e213b0:	e5863000 	str	r3, [r6]
c7e213b4:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e213b8:	c7e72300 	.word	0xc7e72300

c7e213bc <drop_var_from_set>:
/*
 * Check whether variable 'name' is amongst vars[],
 * and remove all instances by setting the pointer to NULL
 */
static int drop_var_from_set(const char *name, int nvars, char * vars[])
{
c7e213bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int i = 0;
	int res = 0;

	/* No variables specified means process all of them */
	if (nvars == 0)
c7e213c0:	e2519000 	subs	r9, r1, #0	; 0x0
c7e213c4:	13a04000 	movne	r4, #0	; 0x0
/*
 * Check whether variable 'name' is amongst vars[],
 * and remove all instances by setting the pointer to NULL
 */
static int drop_var_from_set(const char *name, int nvars, char * vars[])
{
c7e213c8:	e1a0a000 	mov	sl, r0
c7e213cc:	e1a07002 	mov	r7, r2
	int i = 0;
	int res = 0;

	/* No variables specified means process all of them */
	if (nvars == 0)
c7e213d0:	03a06001 	moveq	r6, #1	; 0x1
c7e213d4:	11a06004 	movne	r6, r4
c7e213d8:	11a05004 	movne	r5, r4
c7e213dc:	1a000008 	bne	c7e21404 <drop_var_from_set+0x48>
c7e213e0:	ea00000b 	b	c7e21414 <drop_var_from_set+0x58>
		return 1;

	for (i = 0; i < nvars; i++) {
		if (vars[i] == NULL)
c7e213e4:	e7973005 	ldr	r3, [r7, r5]
c7e213e8:	e2531000 	subs	r1, r3, #0	; 0x0
c7e213ec:	0a000003 	beq	c7e21400 <drop_var_from_set+0x44>
			continue;
		/* If we found it, delete all of them */
		if (!strcmp(name, vars[i])) {
c7e213f0:	eb00051a 	bl	c7e22860 <strcmp>
c7e213f4:	e3500000 	cmp	r0, #0	; 0x0
			vars[i] = NULL;
c7e213f8:	03a06001 	moveq	r6, #1	; 0x1
c7e213fc:	07870005 	streq	r0, [r7, r5]

	/* No variables specified means process all of them */
	if (nvars == 0)
		return 1;

	for (i = 0; i < nvars; i++) {
c7e21400:	e2855004 	add	r5, r5, #4	; 0x4
c7e21404:	e1540009 	cmp	r4, r9
		if (vars[i] == NULL)
			continue;
		/* If we found it, delete all of them */
		if (!strcmp(name, vars[i])) {
c7e21408:	e1a0000a 	mov	r0, sl

	/* No variables specified means process all of them */
	if (nvars == 0)
		return 1;

	for (i = 0; i < nvars; i++) {
c7e2140c:	e2844001 	add	r4, r4, #1	; 0x1
c7e21410:	bafffff3 	blt	c7e213e4 <drop_var_from_set+0x28>
	}
	if (!res)
		debug("Skipping non-listed variable %s\n", name);

	return res;
}
c7e21414:	e1a00006 	mov	r0, r6
c7e21418:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

c7e2141c <cmpkey>:
static int cmpkey(const void *p1, const void *p2)
{
	ENTRY *e1 = *(ENTRY **) p1;
	ENTRY *e2 = *(ENTRY **) p2;

	return (strcmp(e1->key, e2->key));
c7e2141c:	e5903000 	ldr	r3, [r0]
c7e21420:	e5912000 	ldr	r2, [r1]
c7e21424:	e5930000 	ldr	r0, [r3]
c7e21428:	e5921000 	ldr	r1, [r2]
c7e2142c:	ea00050b 	b	c7e22860 <strcmp>

c7e21430 <hexport_r>:
}

ssize_t hexport_r(struct hsearch_data *htab, const char sep,
		 char **resp, size_t size,
		 int argc, char * const argv[])
{
c7e21430:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e21434:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e21438:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e2143c:	e50b0028 	str	r0, [fp, #-40]
	ENTRY *list[htab->size];
c7e21440:	e5900004 	ldr	r0, [r0, #4]
	char *res, *p;
	size_t totlen;
	int i, n;

	/* Test for correct arguments.  */
	if ((resp == NULL) || (htab == NULL)) {
c7e21444:	e3520000 	cmp	r2, #0	; 0x0

ssize_t hexport_r(struct hsearch_data *htab, const char sep,
		 char **resp, size_t size,
		 int argc, char * const argv[])
{
	ENTRY *list[htab->size];
c7e21448:	e1a00100 	lsl	r0, r0, #2
c7e2144c:	e280000e 	add	r0, r0, #14	; 0xe
c7e21450:	e3c00007 	bic	r0, r0, #7	; 0x7
c7e21454:	e04dd000 	sub	sp, sp, r0
	char *res, *p;
	size_t totlen;
	int i, n;

	/* Test for correct arguments.  */
	if ((resp == NULL) || (htab == NULL)) {
c7e21458:	e50b2030 	str	r2, [fp, #-48]
}

ssize_t hexport_r(struct hsearch_data *htab, const char sep,
		 char **resp, size_t size,
		 int argc, char * const argv[])
{
c7e2145c:	e50b102c 	str	r1, [fp, #-44]
c7e21460:	e1a0a003 	mov	sl, r3
	ENTRY *list[htab->size];
c7e21464:	e50bd034 	str	sp, [fp, #-52]
	char *res, *p;
	size_t totlen;
	int i, n;

	/* Test for correct arguments.  */
	if ((resp == NULL) || (htab == NULL)) {
c7e21468:	0a000005 	beq	c7e21484 <hexport_r+0x54>
c7e2146c:	e3a07000 	mov	r7, #0	; 0x0
c7e21470:	e3a00001 	mov	r0, #1	; 0x1
c7e21474:	e50b0024 	str	r0, [fp, #-36]
c7e21478:	e50b7020 	str	r7, [fp, #-32]
c7e2147c:	e3a0900c 	mov	r9, #12	; 0xc
c7e21480:	ea000040 	b	c7e21588 <hexport_r+0x158>
		__set_errno(EINVAL);
c7e21484:	e3a02016 	mov	r2, #22	; 0x16
c7e21488:	ea000052 	b	c7e215d8 <hexport_r+0x1a8>
	 * search used entries,
	 * save addresses and compute total length
	 */
	for (i = 1, n = 0, totlen = 0; i <= htab->size; ++i) {

		if (htab->table[i].used > 0) {
c7e2148c:	e51b1028 	ldr	r1, [fp, #-40]
c7e21490:	e5913000 	ldr	r3, [r1]
c7e21494:	e7932009 	ldr	r2, [r3, r9]
c7e21498:	e0835009 	add	r5, r3, r9
c7e2149c:	e3520000 	cmp	r2, #0	; 0x0
c7e214a0:	c3a04000 	movgt	r4, #0	; 0x0
c7e214a4:	ca000008 	bgt	c7e214cc <hexport_r+0x9c>
c7e214a8:	ea000032 	b	c7e21578 <hexport_r+0x148>
			ENTRY *ep = &htab->table[i].entry;
			int arg, found = 0;

			for (arg = 0; arg < argc; ++arg) {
				if (strcmp(argv[arg], ep->key) == 0) {
c7e214ac:	e59b2008 	ldr	r2, [fp, #8]
c7e214b0:	e5951004 	ldr	r1, [r5, #4]
c7e214b4:	e7920104 	ldr	r0, [r2, r4, lsl #2]
c7e214b8:	eb0004e8 	bl	c7e22860 <strcmp>
c7e214bc:	e3500000 	cmp	r0, #0	; 0x0
c7e214c0:	03a03001 	moveq	r3, #1	; 0x1
c7e214c4:	0a000004 	beq	c7e214dc <hexport_r+0xac>

		if (htab->table[i].used > 0) {
			ENTRY *ep = &htab->table[i].entry;
			int arg, found = 0;

			for (arg = 0; arg < argc; ++arg) {
c7e214c8:	e2844001 	add	r4, r4, #1	; 0x1
c7e214cc:	e59b3004 	ldr	r3, [fp, #4]
c7e214d0:	e1540003 	cmp	r4, r3
c7e214d4:	bafffff4 	blt	c7e214ac <hexport_r+0x7c>
c7e214d8:	e3a03000 	mov	r3, #0	; 0x0
				if (strcmp(argv[arg], ep->key) == 0) {
					found = 1;
					break;
				}
			}
			if ((argc > 0) && (found == 0))
c7e214dc:	e59bc004 	ldr	ip, [fp, #4]
c7e214e0:	e2233001 	eor	r3, r3, #1	; 0x1
c7e214e4:	e35c0000 	cmp	ip, #0	; 0x0
c7e214e8:	d3a06000 	movle	r6, #0	; 0x0
c7e214ec:	c2036001 	andgt	r6, r3, #1	; 0x1
c7e214f0:	e3560000 	cmp	r6, #0	; 0x0
c7e214f4:	1a00001f 	bne	c7e21578 <hexport_r+0x148>
				continue;

			list[n++] = ep;
c7e214f8:	e51b1020 	ldr	r1, [fp, #-32]
c7e214fc:	e51b2034 	ldr	r2, [fp, #-52]
c7e21500:	e2853004 	add	r3, r5, #4	; 0x4
c7e21504:	e7823101 	str	r3, [r2, r1, lsl #2]

			totlen += strlen(ep->key) + 2;
c7e21508:	e5950004 	ldr	r0, [r5, #4]
c7e2150c:	eb000509 	bl	c7e22938 <strlen>

			if (sep == '\0') {
c7e21510:	e51bc02c 	ldr	ip, [fp, #-44]
			if ((argc > 0) && (found == 0))
				continue;

			list[n++] = ep;

			totlen += strlen(ep->key) + 2;
c7e21514:	e2873002 	add	r3, r7, #2	; 0x2

			if (sep == '\0') {
c7e21518:	e35c0000 	cmp	ip, #0	; 0x0
			if ((argc > 0) && (found == 0))
				continue;

			list[n++] = ep;

			totlen += strlen(ep->key) + 2;
c7e2151c:	e0834000 	add	r4, r3, r0

			if (sep == '\0') {
				totlen += strlen(ep->data);
			} else {	/* check if escapes are needed */
				char *s = ep->data;
c7e21520:	15951008 	ldrne	r1, [r5, #8]
c7e21524:	11a03006 	movne	r3, r6

			list[n++] = ep;

			totlen += strlen(ep->key) + 2;

			if (sep == '\0') {
c7e21528:	1a00000a 	bne	c7e21558 <hexport_r+0x128>
				totlen += strlen(ep->data);
c7e2152c:	e5950008 	ldr	r0, [r5, #8]
c7e21530:	eb000500 	bl	c7e22938 <strlen>
c7e21534:	e0844000 	add	r4, r4, r0
c7e21538:	ea00000a 	b	c7e21568 <hexport_r+0x138>
				char *s = ep->data;

				while (*s) {
					++totlen;
					/* add room for needed escape chars */
					if ((*s == sep) || (*s == '\\'))
c7e2153c:	e51b002c 	ldr	r0, [fp, #-44]
				totlen += strlen(ep->data);
			} else {	/* check if escapes are needed */
				char *s = ep->data;

				while (*s) {
					++totlen;
c7e21540:	e2844001 	add	r4, r4, #1	; 0x1
					/* add room for needed escape chars */
					if ((*s == sep) || (*s == '\\'))
c7e21544:	e1520000 	cmp	r2, r0
c7e21548:	0a000001 	beq	c7e21554 <hexport_r+0x124>
c7e2154c:	e352005c 	cmp	r2, #92	; 0x5c
c7e21550:	1a000000 	bne	c7e21558 <hexport_r+0x128>
						++totlen;
c7e21554:	e2844001 	add	r4, r4, #1	; 0x1
			if (sep == '\0') {
				totlen += strlen(ep->data);
			} else {	/* check if escapes are needed */
				char *s = ep->data;

				while (*s) {
c7e21558:	e7d12003 	ldrb	r2, [r1, r3]
					++totlen;
					/* add room for needed escape chars */
					if ((*s == sep) || (*s == '\\'))
						++totlen;
c7e2155c:	e2833001 	add	r3, r3, #1	; 0x1
			if (sep == '\0') {
				totlen += strlen(ep->data);
			} else {	/* check if escapes are needed */
				char *s = ep->data;

				while (*s) {
c7e21560:	e3520000 	cmp	r2, #0	; 0x0
c7e21564:	1afffff4 	bne	c7e2153c <hexport_r+0x10c>
				}
			}
			if ((argc > 0) && (found == 0))
				continue;

			list[n++] = ep;
c7e21568:	e51b1020 	ldr	r1, [fp, #-32]
					if ((*s == sep) || (*s == '\\'))
						++totlen;
					++s;
				}
			}
			totlen += 2;	/* for '=' and 'sep' char */
c7e2156c:	e2847002 	add	r7, r4, #2	; 0x2
				}
			}
			if ((argc > 0) && (found == 0))
				continue;

			list[n++] = ep;
c7e21570:	e2811001 	add	r1, r1, #1	; 0x1
c7e21574:	e50b1020 	str	r1, [fp, #-32]
	/*
	 * Pass 1:
	 * search used entries,
	 * save addresses and compute total length
	 */
	for (i = 1, n = 0, totlen = 0; i <= htab->size; ++i) {
c7e21578:	e51b2024 	ldr	r2, [fp, #-36]
c7e2157c:	e289900c 	add	r9, r9, #12	; 0xc
c7e21580:	e2822001 	add	r2, r2, #1	; 0x1
c7e21584:	e50b2024 	str	r2, [fp, #-36]
c7e21588:	e51bc028 	ldr	ip, [fp, #-40]
c7e2158c:	e51b0024 	ldr	r0, [fp, #-36]
c7e21590:	e59c3004 	ldr	r3, [ip, #4]
c7e21594:	e1500003 	cmp	r0, r3
c7e21598:	9affffbb 	bls	c7e2148c <hexport_r+0x5c>
		       i, list[i], list[i]->key, list[i]->data);
	}
#endif

	/* Sort list by keys */
	qsort(list, n, sizeof(ENTRY *), cmpkey);
c7e2159c:	e3a02004 	mov	r2, #4	; 0x4
c7e215a0:	e51b0034 	ldr	r0, [fp, #-52]
c7e215a4:	e51b1020 	ldr	r1, [fp, #-32]
c7e215a8:	e59f3144 	ldr	r3, [pc, #324]	; c7e216f4 <hexport_r+0x2c4>
c7e215ac:	eb00042c 	bl	c7e22664 <qsort>

	/* Check if the user supplied buffer size is sufficient */
	if (size) {
c7e215b0:	e35a0000 	cmp	sl, #0	; 0x0
c7e215b4:	e2872001 	add	r2, r7, #1	; 0x1
				"but need %zu\n", size, totlen + 1);
			__set_errno(ENOMEM);
			return (-1);
		}
	} else {
		size = totlen + 1;
c7e215b8:	01a0a002 	moveq	sl, r2

	/* Sort list by keys */
	qsort(list, n, sizeof(ENTRY *), cmpkey);

	/* Check if the user supplied buffer size is sufficient */
	if (size) {
c7e215bc:	0a000009 	beq	c7e215e8 <hexport_r+0x1b8>
		if (size < totlen + 1) {	/* provided buffer too small */
c7e215c0:	e15a0002 	cmp	sl, r2
c7e215c4:	2a000007 	bcs	c7e215e8 <hexport_r+0x1b8>
			printf("Env export buffer too small: %zu, "
c7e215c8:	e1a0100a 	mov	r1, sl
c7e215cc:	e59f0124 	ldr	r0, [pc, #292]	; c7e216f8 <hexport_r+0x2c8>
c7e215d0:	ebff9d20 	bl	c7e08a58 <printf>
				"but need %zu\n", size, totlen + 1);
			__set_errno(ENOMEM);
c7e215d4:	e3a0200c 	mov	r2, #12	; 0xc
c7e215d8:	e59f311c 	ldr	r3, [pc, #284]	; c7e216fc <hexport_r+0x2cc>
c7e215dc:	e3e00000 	mvn	r0, #0	; 0x0
c7e215e0:	e5832000 	str	r2, [r3]
c7e215e4:	ea000040 	b	c7e216ec <hexport_r+0x2bc>
	} else {
		size = totlen + 1;
	}

	/* Check if the user provided a buffer */
	if (*resp) {
c7e215e8:	e51b1030 	ldr	r1, [fp, #-48]
c7e215ec:	e5914000 	ldr	r4, [r1]
c7e215f0:	e3540000 	cmp	r4, #0	; 0x0
c7e215f4:	0a000006 	beq	c7e21614 <hexport_r+0x1e4>
		/* yes; clear it */
		res = *resp;
		memset(res, '\0', size);
c7e215f8:	e1a00004 	mov	r0, r4
c7e215fc:	e3a01000 	mov	r1, #0	; 0x0
c7e21600:	e1a0200a 	mov	r2, sl
c7e21604:	eb000562 	bl	c7e22b94 <memset>
c7e21608:	e3a05000 	mov	r5, #0	; 0x0
c7e2160c:	e1a0e005 	mov	lr, r5
c7e21610:	ea00002f 	b	c7e216d4 <hexport_r+0x2a4>
	} else {
		/* no, allocate and clear one */
		*resp = res = calloc(1, size);
c7e21614:	e3a00001 	mov	r0, #1	; 0x1
c7e21618:	e1a0100a 	mov	r1, sl
c7e2161c:	ebffa0b8 	bl	c7e09904 <calloc>
c7e21620:	e51b2030 	ldr	r2, [fp, #-48]
		if (res == NULL) {
c7e21624:	e3500000 	cmp	r0, #0	; 0x0
		/* yes; clear it */
		res = *resp;
		memset(res, '\0', size);
	} else {
		/* no, allocate and clear one */
		*resp = res = calloc(1, size);
c7e21628:	e5820000 	str	r0, [r2]
		if (res == NULL) {
c7e2162c:	11a04000 	movne	r4, r0
c7e21630:	1afffff4 	bne	c7e21608 <hexport_r+0x1d8>
c7e21634:	eaffffe6 	b	c7e215d4 <hexport_r+0x1a4>
	 * export sorted list of result data
	 */
	for (i = 0, p = res; i < n; ++i) {
		const char *s;

		s = list[i]->key;
c7e21638:	e51bc034 	ldr	ip, [fp, #-52]
c7e2163c:	e1a00004 	mov	r0, r4
c7e21640:	e79c300e 	ldr	r3, [ip, lr]
c7e21644:	e3a02000 	mov	r2, #0	; 0x0
c7e21648:	e5933000 	ldr	r3, [r3]
c7e2164c:	ea000000 	b	c7e21654 <hexport_r+0x224>
		while (*s)
			*p++ = *s++;
c7e21650:	e5401001 	strb	r1, [r0, #-1]
	 */
	for (i = 0, p = res; i < n; ++i) {
		const char *s;

		s = list[i]->key;
		while (*s)
c7e21654:	e7d31002 	ldrb	r1, [r3, r2]
			*p++ = *s++;
c7e21658:	e1a0c000 	mov	ip, r0
	 */
	for (i = 0, p = res; i < n; ++i) {
		const char *s;

		s = list[i]->key;
		while (*s)
c7e2165c:	e3510000 	cmp	r1, #0	; 0x0
c7e21660:	e2822001 	add	r2, r2, #1	; 0x1
c7e21664:	e2800001 	add	r0, r0, #1	; 0x1
c7e21668:	1afffff8 	bne	c7e21650 <hexport_r+0x220>
			*p++ = *s++;
		*p++ = '=';
c7e2166c:	e3a0303d 	mov	r3, #61	; 0x3d
c7e21670:	e1a0000c 	mov	r0, ip
c7e21674:	e4c03001 	strb	r3, [r0], #1

		s = list[i]->data;
c7e21678:	e51b2034 	ldr	r2, [fp, #-52]
c7e2167c:	e792300e 	ldr	r3, [r2, lr]
c7e21680:	e1a02001 	mov	r2, r1
c7e21684:	e5931004 	ldr	r1, [r3, #4]
c7e21688:	ea000009 	b	c7e216b4 <hexport_r+0x284>

		while (*s) {
			if ((*s == sep) || (*s == '\\'))
c7e2168c:	e51bc02c 	ldr	ip, [fp, #-44]
c7e21690:	e153000c 	cmp	r3, ip
c7e21694:	0a000001 	beq	c7e216a0 <hexport_r+0x270>
c7e21698:	e353005c 	cmp	r3, #92	; 0x5c
c7e2169c:	1a000001 	bne	c7e216a8 <hexport_r+0x278>
				*p++ = '\\';	/* escape */
c7e216a0:	e3a0305c 	mov	r3, #92	; 0x5c
c7e216a4:	e4c03001 	strb	r3, [r0], #1
			*p++ = *s++;
c7e216a8:	e7d13002 	ldrb	r3, [r1, r2]
c7e216ac:	e2822001 	add	r2, r2, #1	; 0x1
c7e216b0:	e4c03001 	strb	r3, [r0], #1
			*p++ = *s++;
		*p++ = '=';

		s = list[i]->data;

		while (*s) {
c7e216b4:	e7d13002 	ldrb	r3, [r1, r2]
c7e216b8:	e3530000 	cmp	r3, #0	; 0x0
c7e216bc:	1afffff2 	bne	c7e2168c <hexport_r+0x25c>
			if ((*s == sep) || (*s == '\\'))
				*p++ = '\\';	/* escape */
			*p++ = *s++;
		}
		*p++ = sep;
c7e216c0:	e1a04000 	mov	r4, r0
c7e216c4:	e51b002c 	ldr	r0, [fp, #-44]
	}
	/*
	 * Pass 2:
	 * export sorted list of result data
	 */
	for (i = 0, p = res; i < n; ++i) {
c7e216c8:	e2855001 	add	r5, r5, #1	; 0x1
		while (*s) {
			if ((*s == sep) || (*s == '\\'))
				*p++ = '\\';	/* escape */
			*p++ = *s++;
		}
		*p++ = sep;
c7e216cc:	e4c40001 	strb	r0, [r4], #1
	}
	/*
	 * Pass 2:
	 * export sorted list of result data
	 */
	for (i = 0, p = res; i < n; ++i) {
c7e216d0:	e28ee004 	add	lr, lr, #4	; 0x4
c7e216d4:	e51b1020 	ldr	r1, [fp, #-32]
c7e216d8:	e1550001 	cmp	r5, r1
c7e216dc:	baffffd5 	blt	c7e21638 <hexport_r+0x208>
				*p++ = '\\';	/* escape */
			*p++ = *s++;
		}
		*p++ = sep;
	}
	*p = '\0';		/* terminate result */
c7e216e0:	e3a03000 	mov	r3, #0	; 0x0
c7e216e4:	e5c43000 	strb	r3, [r4]

	return size;
c7e216e8:	e1a0000a 	mov	r0, sl
}
c7e216ec:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e216f0:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e216f4:	c7e2141c 	.word	0xc7e2141c
c7e216f8:	c7e34733 	.word	0xc7e34733
c7e216fc:	c7e72300 	.word	0xc7e72300

c7e21700 <hcreate_r>:
 * The contents of the table is zeroed, especially the field used
 * becomes zero.
 */

int hcreate_r(size_t nel, struct hsearch_data *htab)
{
c7e21700:	e92d4070 	push	{r4, r5, r6, lr}
	/* Test for correct arguments.  */
	if (htab == NULL) {
c7e21704:	e2516000 	subs	r6, r1, #0	; 0x0
c7e21708:	1a000004 	bne	c7e21720 <hcreate_r+0x20>
		__set_errno(EINVAL);
c7e2170c:	e59f3090 	ldr	r3, [pc, #144]	; c7e217a4 <hcreate_r+0xa4>
c7e21710:	e3a02016 	mov	r2, #22	; 0x16
c7e21714:	e5832000 	str	r2, [r3]
c7e21718:	e1a00006 	mov	r0, r6
c7e2171c:	e8bd8070 	pop	{r4, r5, r6, pc}
		return 0;
	}

	/* There is still another table active. Return with error. */
	if (htab->table != NULL)
c7e21720:	e5963000 	ldr	r3, [r6]
c7e21724:	e3530000 	cmp	r3, #0	; 0x0
c7e21728:	13a00000 	movne	r0, #0	; 0x0
		return 0;

	/* Change nel to the first prime number not smaller as nel. */
	nel |= 1;		/* make odd */
c7e2172c:	03805001 	orreq	r5, r0, #1	; 0x1
		__set_errno(EINVAL);
		return 0;
	}

	/* There is still another table active. Return with error. */
	if (htab->table != NULL)
c7e21730:	18bd8070 	popne	{r4, r5, r6, pc}
c7e21734:	ea000000 	b	c7e2173c <hcreate_r+0x3c>
		return 0;

	/* Change nel to the first prime number not smaller as nel. */
	nel |= 1;		/* make odd */
	while (!isprime(nel))
		nel += 2;
c7e21738:	e2855002 	add	r5, r5, #2	; 0x2
c7e2173c:	e3a04003 	mov	r4, #3	; 0x3
c7e21740:	ea000000 	b	c7e21748 <hcreate_r+0x48>
{
	/* no even number will be passed */
	unsigned int div = 3;

	while (div * div < number && number % div != 0)
		div += 2;
c7e21744:	e2844002 	add	r4, r4, #2	; 0x2
static int isprime(unsigned int number)
{
	/* no even number will be passed */
	unsigned int div = 3;

	while (div * div < number && number % div != 0)
c7e21748:	e0030494 	mul	r3, r4, r4
c7e2174c:	e1530005 	cmp	r3, r5
c7e21750:	e1a01004 	mov	r1, r4
c7e21754:	e1a00005 	mov	r0, r5
c7e21758:	2a000002 	bcs	c7e21768 <hcreate_r+0x68>
c7e2175c:	eb0023a6 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e21760:	e3510000 	cmp	r1, #0	; 0x0
c7e21764:	1afffff6 	bne	c7e21744 <hcreate_r+0x44>
	if (htab->table != NULL)
		return 0;

	/* Change nel to the first prime number not smaller as nel. */
	nel |= 1;		/* make odd */
	while (!isprime(nel))
c7e21768:	e1a01004 	mov	r1, r4
c7e2176c:	e1a00005 	mov	r0, r5
c7e21770:	eb0023a1 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e21774:	e3510000 	cmp	r1, #0	; 0x0
c7e21778:	0affffee 	beq	c7e21738 <hcreate_r+0x38>
		nel += 2;

	htab->size = nel;
	htab->filled = 0;
c7e2177c:	e3a03000 	mov	r3, #0	; 0x0
c7e21780:	e5863008 	str	r3, [r6, #8]
	/* Change nel to the first prime number not smaller as nel. */
	nel |= 1;		/* make odd */
	while (!isprime(nel))
		nel += 2;

	htab->size = nel;
c7e21784:	e5865004 	str	r5, [r6, #4]
	htab->filled = 0;

	/* allocate memory and zero out */
	htab->table = (_ENTRY *) calloc(htab->size + 1, sizeof(_ENTRY));
c7e21788:	e2850001 	add	r0, r5, #1	; 0x1
c7e2178c:	e3a0100c 	mov	r1, #12	; 0xc
c7e21790:	ebffa05b 	bl	c7e09904 <calloc>
c7e21794:	e5860000 	str	r0, [r6]
c7e21798:	e2500000 	subs	r0, r0, #0	; 0x0
c7e2179c:	13a00001 	movne	r0, #1	; 0x1
	if (htab->table == NULL)
		return 0;

	/* everything went alright */
	return 1;
}
c7e217a0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e217a4:	c7e72300 	.word	0xc7e72300

c7e217a8 <hsearch_r>:
	return 0;
}

int hsearch_r(ENTRY item, ACTION action, ENTRY ** retval,
	      struct hsearch_data *htab)
{
c7e217a8:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e217ac:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e217b0:	e28dc010 	add	ip, sp, #16	; 0x10
c7e217b4:	e88c0003 	stm	ip, {r0, r1}
c7e217b8:	e58d2000 	str	r2, [sp]
c7e217bc:	e59d2014 	ldr	r2, [sp, #20]
c7e217c0:	e1a0b003 	mov	fp, r3
c7e217c4:	e58d200c 	str	r2, [sp, #12]
c7e217c8:	e58d0008 	str	r0, [sp, #8]
c7e217cc:	e59d9038 	ldr	r9, [sp, #56]
	unsigned int hval;
	unsigned int count;
	unsigned int len = strlen(item.key);
c7e217d0:	eb000458 	bl	c7e22938 <strlen>
c7e217d4:	e59d3008 	ldr	r3, [sp, #8]
c7e217d8:	e1a02000 	mov	r2, r0
c7e217dc:	e0831000 	add	r1, r3, r0
c7e217e0:	e1a07000 	mov	r7, r0
c7e217e4:	ea000002 	b	c7e217f4 <hsearch_r+0x4c>
	/* Compute an value for the given string. Perhaps use a better method. */
	hval = len;
	count = len;
	while (count-- > 0) {
		hval <<= 4;
		hval += item.key[count];
c7e217e8:	e5713001 	ldrb	r3, [r1, #-1]!
	unsigned int first_deleted = 0;

	/* Compute an value for the given string. Perhaps use a better method. */
	hval = len;
	count = len;
	while (count-- > 0) {
c7e217ec:	e2477001 	sub	r7, r7, #1	; 0x1
		hval <<= 4;
		hval += item.key[count];
c7e217f0:	e0832202 	add	r2, r3, r2, lsl #4
	unsigned int first_deleted = 0;

	/* Compute an value for the given string. Perhaps use a better method. */
	hval = len;
	count = len;
	while (count-- > 0) {
c7e217f4:	e3570000 	cmp	r7, #0	; 0x0
c7e217f8:	1afffffa 	bne	c7e217e8 <hsearch_r+0x40>

	/*
	 * First hash function:
	 * simply take the modul but prevent zero.
	 */
	hval %= htab->size;
c7e217fc:	e1a00002 	mov	r0, r2
c7e21800:	e5991004 	ldr	r1, [r9, #4]
c7e21804:	eb00237c 	bl	c7e2a5fc <__aeabi_uidivmod>
	if (hval == 0)
c7e21808:	e3510000 	cmp	r1, #0	; 0x0
c7e2180c:	11a0a001 	movne	sl, r1
c7e21810:	03a0a001 	moveq	sl, #1	; 0x1
		++hval;

	/* The first index tried. */
	idx = hval;

	if (htab->table[idx].used) {
c7e21814:	e3a0500c 	mov	r5, #12	; 0xc
c7e21818:	e005059a 	mul	r5, sl, r5
c7e2181c:	e5993000 	ldr	r3, [r9]
c7e21820:	e7936005 	ldr	r6, [r3, r5]
c7e21824:	e0833005 	add	r3, r3, r5
c7e21828:	e3560000 	cmp	r6, #0	; 0x0
c7e2182c:	058d7004 	streq	r7, [sp, #4]
c7e21830:	01a0700a 	moveq	r7, sl
c7e21834:	0a000061 	beq	c7e219c0 <hsearch_r+0x218>
		 * Further action might be required according to the
		 * action value.
		 */
		unsigned hval2;

		if (htab->table[idx].used == -1
c7e21838:	e3760001 	cmn	r6, #1	; 0x1
c7e2183c:	01a0100a 	moveq	r1, sl
c7e21840:	13a01000 	movne	r1, #0	; 0x0
		    && !first_deleted)
			first_deleted = idx;

		if (htab->table[idx].used == hval
c7e21844:	e156000a 	cmp	r6, sl
		 * Further action might be required according to the
		 * action value.
		 */
		unsigned hval2;

		if (htab->table[idx].used == -1
c7e21848:	e58d1004 	str	r1, [sp, #4]
		    && !first_deleted)
			first_deleted = idx;

		if (htab->table[idx].used == hval
c7e2184c:	1a000021 	bne	c7e218d8 <hsearch_r+0x130>
c7e21850:	e5931004 	ldr	r1, [r3, #4]
c7e21854:	e59d0008 	ldr	r0, [sp, #8]
c7e21858:	eb000400 	bl	c7e22860 <strcmp>
c7e2185c:	e3500000 	cmp	r0, #0	; 0x0
c7e21860:	1a00001c 	bne	c7e218d8 <hsearch_r+0x130>
		    && strcmp(item.key, htab->table[idx].entry.key) == 0) {
			/* Overwrite existing value? */
			if ((action == ENTER) && (item.data != NULL)) {
c7e21864:	e59d2000 	ldr	r2, [sp]
c7e21868:	e3520001 	cmp	r2, #1	; 0x1
c7e2186c:	1a000016 	bne	c7e218cc <hsearch_r+0x124>
c7e21870:	e59d300c 	ldr	r3, [sp, #12]
c7e21874:	e3530000 	cmp	r3, #0	; 0x0
c7e21878:	0a000013 	beq	c7e218cc <hsearch_r+0x124>
				free(htab->table[idx].entry.data);
c7e2187c:	e5993000 	ldr	r3, [r9]
c7e21880:	e0833005 	add	r3, r3, r5
c7e21884:	e5930008 	ldr	r0, [r3, #8]
c7e21888:	ebff9db4 	bl	c7e08f60 <free>
				htab->table[idx].entry.data =
c7e2188c:	e59d000c 	ldr	r0, [sp, #12]
c7e21890:	e5994000 	ldr	r4, [r9]
c7e21894:	eb000563 	bl	c7e22e28 <strdup>
					strdup(item.data);
				if (!htab->table[idx].entry.data) {
c7e21898:	e5993000 	ldr	r3, [r9]
		if (htab->table[idx].used == hval
		    && strcmp(item.key, htab->table[idx].entry.key) == 0) {
			/* Overwrite existing value? */
			if ((action == ENTER) && (item.data != NULL)) {
				free(htab->table[idx].entry.data);
				htab->table[idx].entry.data =
c7e2189c:	e0844005 	add	r4, r4, r5
c7e218a0:	e5840008 	str	r0, [r4, #8]
					strdup(item.data);
				if (!htab->table[idx].entry.data) {
c7e218a4:	e0833005 	add	r3, r3, r5
c7e218a8:	e5933008 	ldr	r3, [r3, #8]
c7e218ac:	e3530000 	cmp	r3, #0	; 0x0
c7e218b0:	1a000005 	bne	c7e218cc <hsearch_r+0x124>
					__set_errno(ENOMEM);
c7e218b4:	e59f31c8 	ldr	r3, [pc, #456]	; c7e21a84 <hsearch_r+0x2dc>
c7e218b8:	e3a0100c 	mov	r1, #12	; 0xc
					*retval = NULL;
c7e218bc:	e58b7000 	str	r7, [fp]
			if ((action == ENTER) && (item.data != NULL)) {
				free(htab->table[idx].entry.data);
				htab->table[idx].entry.data =
					strdup(item.data);
				if (!htab->table[idx].entry.data) {
					__set_errno(ENOMEM);
c7e218c0:	e5831000 	str	r1, [r3]
					*retval = NULL;
c7e218c4:	e1a00007 	mov	r0, r7
c7e218c8:	ea00006b 	b	c7e21a7c <hsearch_r+0x2d4>
					return 0;
				}
			}
			/* return found entry */
			*retval = &htab->table[idx].entry;
c7e218cc:	e5993000 	ldr	r3, [r9]
			return idx;
c7e218d0:	e1a00006 	mov	r0, r6
c7e218d4:	ea000031 	b	c7e219a0 <hsearch_r+0x1f8>

		/*
		 * Second hash function:
		 * as suggested in [Knuth]
		 */
		hval2 = 1 + hval % (htab->size - 2);
c7e218d8:	e5991004 	ldr	r1, [r9, #4]
c7e218dc:	e1a0000a 	mov	r0, sl
c7e218e0:	e2411002 	sub	r1, r1, #2	; 0x2
c7e218e4:	eb002344 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e218e8:	e1a0700a 	mov	r7, sl
c7e218ec:	e2814001 	add	r4, r1, #1	; 0x1
		do {
			/*
			 * Because SIZE is prime this guarantees to
			 * step through all available indices.
			 */
			if (idx <= hval2)
c7e218f0:	e1570004 	cmp	r7, r4
				idx = htab->size + idx - hval2;
c7e218f4:	95993004 	ldrls	r3, [r9, #4]
			else
				idx -= hval2;
c7e218f8:	80647007 	rsbhi	r7, r4, r7
			/*
			 * Because SIZE is prime this guarantees to
			 * step through all available indices.
			 */
			if (idx <= hval2)
				idx = htab->size + idx - hval2;
c7e218fc:	90643003 	rsbls	r3, r4, r3
c7e21900:	90877003 	addls	r7, r7, r3

			/*
			 * If we visited all entries leave the loop
			 * unsuccessfully.
			 */
			if (idx == hval)
c7e21904:	e157000a 	cmp	r7, sl
				break;

			/* If entry is found use it. */
			if ((htab->table[idx].used == hval)
c7e21908:	e3a0600c 	mov	r6, #12	; 0xc

			/*
			 * If we visited all entries leave the loop
			 * unsuccessfully.
			 */
			if (idx == hval)
c7e2190c:	0a00002b 	beq	c7e219c0 <hsearch_r+0x218>
				break;

			/* If entry is found use it. */
			if ((htab->table[idx].used == hval)
c7e21910:	e0050796 	mul	r5, r6, r7
c7e21914:	e5993000 	ldr	r3, [r9]
c7e21918:	e7932005 	ldr	r2, [r3, r5]
c7e2191c:	e0833005 	add	r3, r3, r5
c7e21920:	e152000a 	cmp	r2, sl
c7e21924:	1a000021 	bne	c7e219b0 <hsearch_r+0x208>
c7e21928:	e5931004 	ldr	r1, [r3, #4]
c7e2192c:	e59d0008 	ldr	r0, [sp, #8]
c7e21930:	eb0003ca 	bl	c7e22860 <strcmp>
c7e21934:	e3500000 	cmp	r0, #0	; 0x0
c7e21938:	1a00001c 	bne	c7e219b0 <hsearch_r+0x208>
			    && strcmp(item.key, htab->table[idx].entry.key) == 0) {
				/* Overwrite existing value? */
				if ((action == ENTER) && (item.data != NULL)) {
c7e2193c:	e59d2000 	ldr	r2, [sp]
c7e21940:	e3520001 	cmp	r2, #1	; 0x1
c7e21944:	1a000013 	bne	c7e21998 <hsearch_r+0x1f0>
c7e21948:	e59d300c 	ldr	r3, [sp, #12]
c7e2194c:	e3530000 	cmp	r3, #0	; 0x0
c7e21950:	0a000010 	beq	c7e21998 <hsearch_r+0x1f0>
					free(htab->table[idx].entry.data);
c7e21954:	e5993000 	ldr	r3, [r9]
c7e21958:	e0833005 	add	r3, r3, r5
c7e2195c:	e5930008 	ldr	r0, [r3, #8]
c7e21960:	ebff9d7e 	bl	c7e08f60 <free>
					htab->table[idx].entry.data =
c7e21964:	e59d000c 	ldr	r0, [sp, #12]
c7e21968:	e5994000 	ldr	r4, [r9]
c7e2196c:	eb00052d 	bl	c7e22e28 <strdup>
						strdup(item.data);
					if (!htab->table[idx].entry.data) {
c7e21970:	e5993000 	ldr	r3, [r9]
			if ((htab->table[idx].used == hval)
			    && strcmp(item.key, htab->table[idx].entry.key) == 0) {
				/* Overwrite existing value? */
				if ((action == ENTER) && (item.data != NULL)) {
					free(htab->table[idx].entry.data);
					htab->table[idx].entry.data =
c7e21974:	e0844005 	add	r4, r4, r5
c7e21978:	e5840008 	str	r0, [r4, #8]
						strdup(item.data);
					if (!htab->table[idx].entry.data) {
c7e2197c:	e0833005 	add	r3, r3, r5
c7e21980:	e5930008 	ldr	r0, [r3, #8]
c7e21984:	e3500000 	cmp	r0, #0	; 0x0
						__set_errno(ENOMEM);
c7e21988:	059f30f4 	ldreq	r3, [pc, #244]	; c7e21a84 <hsearch_r+0x2dc>
						*retval = NULL;
c7e2198c:	058b0000 	streq	r0, [fp]
				if ((action == ENTER) && (item.data != NULL)) {
					free(htab->table[idx].entry.data);
					htab->table[idx].entry.data =
						strdup(item.data);
					if (!htab->table[idx].entry.data) {
						__set_errno(ENOMEM);
c7e21990:	05836000 	streq	r6, [r3]
c7e21994:	0a000038 	beq	c7e21a7c <hsearch_r+0x2d4>
						*retval = NULL;
						return 0;
					}
				}
				/* return found entry */
				*retval = &htab->table[idx].entry;
c7e21998:	e5993000 	ldr	r3, [r9]
				return idx;
c7e2199c:	e1a00007 	mov	r0, r7
						*retval = NULL;
						return 0;
					}
				}
				/* return found entry */
				*retval = &htab->table[idx].entry;
c7e219a0:	e0833005 	add	r3, r3, r5
c7e219a4:	e2833004 	add	r3, r3, #4	; 0x4
c7e219a8:	e58b3000 	str	r3, [fp]
c7e219ac:	ea000032 	b	c7e21a7c <hsearch_r+0x2d4>
				return idx;
			}
		}
		while (htab->table[idx].used);
c7e219b0:	e5993000 	ldr	r3, [r9]
c7e219b4:	e7933005 	ldr	r3, [r3, r5]
c7e219b8:	e3530000 	cmp	r3, #0	; 0x0
c7e219bc:	1affffcb 	bne	c7e218f0 <hsearch_r+0x148>
	}

	/* An empty bucket has been found. */
	if (action == ENTER) {
c7e219c0:	e59d1000 	ldr	r1, [sp]
c7e219c4:	e3510001 	cmp	r1, #1	; 0x1
		*retval = &htab->table[idx].entry;
		return 1;
	}

	__set_errno(ESRCH);
	*retval = NULL;
c7e219c8:	13a01000 	movne	r1, #0	; 0x0
		/* return new entry */
		*retval = &htab->table[idx].entry;
		return 1;
	}

	__set_errno(ESRCH);
c7e219cc:	13a02003 	movne	r2, #3	; 0x3
		}
		while (htab->table[idx].used);
	}

	/* An empty bucket has been found. */
	if (action == ENTER) {
c7e219d0:	1a000025 	bne	c7e21a6c <hsearch_r+0x2c4>
		/*
		 * If table is full and another entry should be
		 * entered return with error.
		 */
		if (htab->filled == htab->size) {
c7e219d4:	e5992008 	ldr	r2, [r9, #8]
c7e219d8:	e5993004 	ldr	r3, [r9, #4]
c7e219dc:	e1520003 	cmp	r2, r3
c7e219e0:	0a000017 	beq	c7e21a44 <hsearch_r+0x29c>

		/*
		 * Create new entry;
		 * create copies of item.key and item.data
		 */
		if (first_deleted)
c7e219e4:	e59d2004 	ldr	r2, [sp, #4]
			idx = first_deleted;

		htab->table[idx].used = hval;
c7e219e8:	e3a0300c 	mov	r3, #12	; 0xc

		/*
		 * Create new entry;
		 * create copies of item.key and item.data
		 */
		if (first_deleted)
c7e219ec:	e3520000 	cmp	r2, #0	; 0x0
c7e219f0:	11a07002 	movne	r7, r2
			idx = first_deleted;

		htab->table[idx].used = hval;
c7e219f4:	e0060793 	mul	r6, r3, r7
c7e219f8:	e5994000 	ldr	r4, [r9]
		htab->table[idx].entry.key = strdup(item.key);
c7e219fc:	e59d0008 	ldr	r0, [sp, #8]
		 * create copies of item.key and item.data
		 */
		if (first_deleted)
			idx = first_deleted;

		htab->table[idx].used = hval;
c7e21a00:	e784a006 	str	sl, [r4, r6]
		htab->table[idx].entry.key = strdup(item.key);
c7e21a04:	eb000507 	bl	c7e22e28 <strdup>
		 * create copies of item.key and item.data
		 */
		if (first_deleted)
			idx = first_deleted;

		htab->table[idx].used = hval;
c7e21a08:	e0844006 	add	r4, r4, r6
		htab->table[idx].entry.key = strdup(item.key);
c7e21a0c:	e5840004 	str	r0, [r4, #4]
		htab->table[idx].entry.data = strdup(item.data);
c7e21a10:	e59d000c 	ldr	r0, [sp, #12]
c7e21a14:	e5995000 	ldr	r5, [r9]
c7e21a18:	eb000502 	bl	c7e22e28 <strdup>
		if (!htab->table[idx].entry.key ||
c7e21a1c:	e5993000 	ldr	r3, [r9]
		if (first_deleted)
			idx = first_deleted;

		htab->table[idx].used = hval;
		htab->table[idx].entry.key = strdup(item.key);
		htab->table[idx].entry.data = strdup(item.data);
c7e21a20:	e0855006 	add	r5, r5, r6
		if (!htab->table[idx].entry.key ||
c7e21a24:	e0832006 	add	r2, r3, r6
c7e21a28:	e5923004 	ldr	r3, [r2, #4]
		if (first_deleted)
			idx = first_deleted;

		htab->table[idx].used = hval;
		htab->table[idx].entry.key = strdup(item.key);
		htab->table[idx].entry.data = strdup(item.data);
c7e21a2c:	e5850008 	str	r0, [r5, #8]
		if (!htab->table[idx].entry.key ||
c7e21a30:	e3530000 	cmp	r3, #0	; 0x0
c7e21a34:	0a000002 	beq	c7e21a44 <hsearch_r+0x29c>
c7e21a38:	e5923008 	ldr	r3, [r2, #8]
c7e21a3c:	e3530000 	cmp	r3, #0	; 0x0
c7e21a40:	1a000002 	bne	c7e21a50 <hsearch_r+0x2a8>
		    !htab->table[idx].entry.data) {
			__set_errno(ENOMEM);
			*retval = NULL;
c7e21a44:	e3a01000 	mov	r1, #0	; 0x0
		htab->table[idx].used = hval;
		htab->table[idx].entry.key = strdup(item.key);
		htab->table[idx].entry.data = strdup(item.data);
		if (!htab->table[idx].entry.key ||
		    !htab->table[idx].entry.data) {
			__set_errno(ENOMEM);
c7e21a48:	e3a0200c 	mov	r2, #12	; 0xc
c7e21a4c:	ea000006 	b	c7e21a6c <hsearch_r+0x2c4>
			*retval = NULL;
			return 0;
		}

		++htab->filled;
c7e21a50:	e5993008 	ldr	r3, [r9, #8]

		/* return new entry */
		*retval = &htab->table[idx].entry;
c7e21a54:	e2822004 	add	r2, r2, #4	; 0x4
			__set_errno(ENOMEM);
			*retval = NULL;
			return 0;
		}

		++htab->filled;
c7e21a58:	e2833001 	add	r3, r3, #1	; 0x1
c7e21a5c:	e5893008 	str	r3, [r9, #8]

		/* return new entry */
		*retval = &htab->table[idx].entry;
c7e21a60:	e58b2000 	str	r2, [fp]
c7e21a64:	e59d0000 	ldr	r0, [sp]
c7e21a68:	ea000003 	b	c7e21a7c <hsearch_r+0x2d4>
		return 1;
	}

	__set_errno(ESRCH);
c7e21a6c:	e59f3010 	ldr	r3, [pc, #16]	; c7e21a84 <hsearch_r+0x2dc>
	*retval = NULL;
c7e21a70:	e58b1000 	str	r1, [fp]
		/* return new entry */
		*retval = &htab->table[idx].entry;
		return 1;
	}

	__set_errno(ESRCH);
c7e21a74:	e5832000 	str	r2, [r3]
	*retval = NULL;
c7e21a78:	e1a00001 	mov	r0, r1
	return 0;
}
c7e21a7c:	e28dd018 	add	sp, sp, #24	; 0x18
c7e21a80:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e21a84:	c7e72300 	.word	0xc7e72300

c7e21a88 <hdelete_r>:
 * to delete any entries from the hash table.  We extend the code to
 * do that.
 */

int hdelete_r(const char *key, struct hsearch_data *htab, int do_apply)
{
c7e21a88:	e92d4070 	push	{r4, r5, r6, lr}
c7e21a8c:	e24dd018 	sub	sp, sp, #24	; 0x18
	ENTRY e, *ep;
	int idx;

	debug("hdelete: DELETE key \"%s\"\n", key);

	e.key = (char *)key;
c7e21a90:	e58d000c 	str	r0, [sp, #12]

	if ((idx = hsearch_r(e, FIND, &ep, htab)) == 0) {
c7e21a94:	e28d300c 	add	r3, sp, #12	; 0xc
 * to delete any entries from the hash table.  We extend the code to
 * do that.
 */

int hdelete_r(const char *key, struct hsearch_data *htab, int do_apply)
{
c7e21a98:	e1a04001 	mov	r4, r1
c7e21a9c:	e1a05002 	mov	r5, r2

	debug("hdelete: DELETE key \"%s\"\n", key);

	e.key = (char *)key;

	if ((idx = hsearch_r(e, FIND, &ep, htab)) == 0) {
c7e21aa0:	e8930003 	ldm	r3, {r0, r1}
c7e21aa4:	e3a02000 	mov	r2, #0	; 0x0
c7e21aa8:	e28d3014 	add	r3, sp, #20	; 0x14
c7e21aac:	e58d4000 	str	r4, [sp]
c7e21ab0:	ebffff3c 	bl	c7e217a8 <hsearch_r>
c7e21ab4:	e2506000 	subs	r6, r0, #0	; 0x0
		__set_errno(ESRCH);
c7e21ab8:	059f3078 	ldreq	r3, [pc, #120]	; c7e21b38 <hdelete_r+0xb0>
c7e21abc:	03a02003 	moveq	r2, #3	; 0x3
c7e21ac0:	05832000 	streq	r2, [r3]
c7e21ac4:	01a00006 	moveq	r0, r6
c7e21ac8:	0a000018 	beq	c7e21b30 <hdelete_r+0xa8>
		return 0;	/* not found */
	}

	/* free used ENTRY */
	debug("hdelete: DELETING key \"%s\"\n", key);
	if (do_apply && htab->apply != NULL)
c7e21acc:	e3550000 	cmp	r5, #0	; 0x0
c7e21ad0:	0a000007 	beq	c7e21af4 <hdelete_r+0x6c>
c7e21ad4:	e594c00c 	ldr	ip, [r4, #12]
c7e21ad8:	e35c0000 	cmp	ip, #0	; 0x0
c7e21adc:	0a000004 	beq	c7e21af4 <hdelete_r+0x6c>
		htab->apply(ep->key, ep->data, NULL, H_FORCE);
c7e21ae0:	e59d3014 	ldr	r3, [sp, #20]
c7e21ae4:	e3a02000 	mov	r2, #0	; 0x0
c7e21ae8:	e8930003 	ldm	r3, {r0, r1}
c7e21aec:	e3a03002 	mov	r3, #2	; 0x2
c7e21af0:	e12fff3c 	blx	ip
	free((void *)ep->key);
c7e21af4:	e59d3014 	ldr	r3, [sp, #20]
c7e21af8:	e5930000 	ldr	r0, [r3]
c7e21afc:	ebff9d17 	bl	c7e08f60 <free>
	free(ep->data);
c7e21b00:	e59d3014 	ldr	r3, [sp, #20]
c7e21b04:	e5930004 	ldr	r0, [r3, #4]
c7e21b08:	ebff9d14 	bl	c7e08f60 <free>
	htab->table[idx].used = -1;
c7e21b0c:	e3a0300c 	mov	r3, #12	; 0xc
c7e21b10:	e0010693 	mul	r1, r3, r6
c7e21b14:	e5942000 	ldr	r2, [r4]
c7e21b18:	e3e03000 	mvn	r3, #0	; 0x0
c7e21b1c:	e7823001 	str	r3, [r2, r1]

	--htab->filled;
c7e21b20:	e5943008 	ldr	r3, [r4, #8]
c7e21b24:	e3a00001 	mov	r0, #1	; 0x1
c7e21b28:	e2433001 	sub	r3, r3, #1	; 0x1
c7e21b2c:	e5843008 	str	r3, [r4, #8]

	return 1;
}
c7e21b30:	e28dd018 	add	sp, sp, #24	; 0x18
c7e21b34:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e21b38:	c7e72300 	.word	0xc7e72300

c7e21b3c <himport_r>:
 */

int himport_r(struct hsearch_data *htab,
		const char *env, size_t size, const char sep, int flag,
		int nvars, char * const vars[], int do_apply)
{
c7e21b3c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e21b40:	e28db01c 	add	fp, sp, #28	; 0x1c
c7e21b44:	e24dd028 	sub	sp, sp, #40	; 0x28
	char *data, *sp, *dp, *name, *value;
	char *localvars[nvars];
	int i;

	/* Test for correct arguments.  */
	if (htab == NULL) {
c7e21b48:	e250a000 	subs	sl, r0, #0	; 0x0
int himport_r(struct hsearch_data *htab,
		const char *env, size_t size, const char sep, int flag,
		int nvars, char * const vars[], int do_apply)
{
	char *data, *sp, *dp, *name, *value;
	char *localvars[nvars];
c7e21b4c:	e59b0008 	ldr	r0, [fp, #8]
 */

int himport_r(struct hsearch_data *htab,
		const char *env, size_t size, const char sep, int flag,
		int nvars, char * const vars[], int do_apply)
{
c7e21b50:	e1a04001 	mov	r4, r1
	char *data, *sp, *dp, *name, *value;
	char *localvars[nvars];
c7e21b54:	e1a05100 	lsl	r5, r0, #2
c7e21b58:	e285000e 	add	r0, r5, #14	; 0xe
c7e21b5c:	e3c00007 	bic	r0, r0, #7	; 0x7
c7e21b60:	e04dd000 	sub	sp, sp, r0
 */

int himport_r(struct hsearch_data *htab,
		const char *env, size_t size, const char sep, int flag,
		int nvars, char * const vars[], int do_apply)
{
c7e21b64:	e50b2034 	str	r2, [fp, #-52]
c7e21b68:	e50b3038 	str	r3, [fp, #-56]
	char *data, *sp, *dp, *name, *value;
	char *localvars[nvars];
c7e21b6c:	e28d9008 	add	r9, sp, #8	; 0x8
	int i;

	/* Test for correct arguments.  */
	if (htab == NULL) {
		__set_errno(EINVAL);
c7e21b70:	059f3340 	ldreq	r3, [pc, #832]	; c7e21eb8 <himport_r+0x37c>
c7e21b74:	03a02016 	moveq	r2, #22	; 0x16
c7e21b78:	05832000 	streq	r2, [r3]
c7e21b7c:	01a0000a 	moveq	r0, sl
c7e21b80:	0a0000ca 	beq	c7e21eb0 <himport_r+0x374>
		return 0;
	}

	/* we allocate new space to make sure we can write to the array */
	if ((data = malloc(size)) == NULL) {
c7e21b84:	e51b0034 	ldr	r0, [fp, #-52]
c7e21b88:	ebff9d83 	bl	c7e0919c <malloc>
c7e21b8c:	e2501000 	subs	r1, r0, #0	; 0x0
c7e21b90:	e50b1030 	str	r1, [fp, #-48]
		debug("himport_r: can't malloc %zu bytes\n", size);
		__set_errno(ENOMEM);
c7e21b94:	059f331c 	ldreq	r3, [pc, #796]	; c7e21eb8 <himport_r+0x37c>
c7e21b98:	03a0200c 	moveq	r2, #12	; 0xc
c7e21b9c:	05832000 	streq	r2, [r3]
c7e21ba0:	01a00001 	moveq	r0, r1
c7e21ba4:	0a0000c1 	beq	c7e21eb0 <himport_r+0x374>
		return 0;
	}
	memcpy(data, env, size);
c7e21ba8:	e51b2034 	ldr	r2, [fp, #-52]
c7e21bac:	e1a01004 	mov	r1, r4
c7e21bb0:	eb000421 	bl	c7e22c3c <memcpy>
	dp = data;

	/* make a local copy of the list of variables */
	if (nvars)
c7e21bb4:	e59b2008 	ldr	r2, [fp, #8]
c7e21bb8:	e3520000 	cmp	r2, #0	; 0x0
c7e21bbc:	0a000003 	beq	c7e21bd0 <himport_r+0x94>
		memcpy(localvars, vars, sizeof(vars[0]) * nvars);
c7e21bc0:	e59b100c 	ldr	r1, [fp, #12]
c7e21bc4:	e1a02005 	mov	r2, r5
c7e21bc8:	e1a00009 	mov	r0, r9
c7e21bcc:	eb00041a 	bl	c7e22c3c <memcpy>

	if ((flag & H_NOCLEAR) == 0) {
c7e21bd0:	e59b3004 	ldr	r3, [fp, #4]
c7e21bd4:	e3130001 	tst	r3, #1	; 0x1
c7e21bd8:	1a000005 	bne	c7e21bf4 <himport_r+0xb8>
		/* Destroy old hash table if one exists */
		debug("Destroy Hash Table: %p table = %p\n", htab,
		       htab->table);
		if (htab->table)
c7e21bdc:	e59a3000 	ldr	r3, [sl]
c7e21be0:	e3530000 	cmp	r3, #0	; 0x0
c7e21be4:	0a000002 	beq	c7e21bf4 <himport_r+0xb8>
			hdestroy_r(htab, do_apply);
c7e21be8:	e1a0000a 	mov	r0, sl
c7e21bec:	e59b1010 	ldr	r1, [fp, #16]
c7e21bf0:	ebfffdca 	bl	c7e21320 <hdestroy_r>
	 * On the other hand we need to add some more entries for free
	 * space when importing very small buffers. Both boundaries can
	 * be overwritten in the board config file if needed.
	 */

	if (!htab->table) {
c7e21bf4:	e59a3000 	ldr	r3, [sl]
c7e21bf8:	e3530000 	cmp	r3, #0	; 0x0
c7e21bfc:	0a000001 	beq	c7e21c08 <himport_r+0xcc>
		}
		*sp++ = '\0';	/* terminate value */
		++dp;

		/* Skip variables which are not supposed to be processed */
		if (!drop_var_from_set(name, nvars, localvars))
c7e21c00:	e51b5030 	ldr	r5, [fp, #-48]
c7e21c04:	ea00000d 	b	c7e21c40 <himport_r+0x104>
	 * space when importing very small buffers. Both boundaries can
	 * be overwritten in the board config file if needed.
	 */

	if (!htab->table) {
		int nent = CONFIG_ENV_MIN_ENTRIES + size / 8;
c7e21c08:	e51bc034 	ldr	ip, [fp, #-52]
		if (nent > CONFIG_ENV_MAX_ENTRIES)
			nent = CONFIG_ENV_MAX_ENTRIES;

		debug("Create Hash Table: N=%d\n", nent);

		if (hcreate_r(nent, htab) == 0) {
c7e21c0c:	e1a0100a 	mov	r1, sl
	 * space when importing very small buffers. Both boundaries can
	 * be overwritten in the board config file if needed.
	 */

	if (!htab->table) {
		int nent = CONFIG_ENV_MIN_ENTRIES + size / 8;
c7e21c10:	e1a001ac 	lsr	r0, ip, #3
c7e21c14:	e2800040 	add	r0, r0, #64	; 0x40
		if (nent > CONFIG_ENV_MAX_ENTRIES)
			nent = CONFIG_ENV_MAX_ENTRIES;

		debug("Create Hash Table: N=%d\n", nent);

		if (hcreate_r(nent, htab) == 0) {
c7e21c18:	e3500c02 	cmp	r0, #512	; 0x200
c7e21c1c:	a3a00c02 	movge	r0, #512	; 0x200
c7e21c20:	ebfffeb6 	bl	c7e21700 <hcreate_r>
c7e21c24:	e2504000 	subs	r4, r0, #0	; 0x0
c7e21c28:	1afffff4 	bne	c7e21c00 <himport_r+0xc4>
			free(data);
c7e21c2c:	e51b0030 	ldr	r0, [fp, #-48]
c7e21c30:	ebff9cca 	bl	c7e08f60 <free>
c7e21c34:	e1a00004 	mov	r0, r4
c7e21c38:	ea00009c 	b	c7e21eb0 <himport_r+0x374>
	do {
		ENTRY e, *rv;

		/* skip leading white space */
		while (isblank(*dp))
			++dp;
c7e21c3c:	e1a05004 	mov	r5, r4
	/* Parse environment; allow for '\0' and 'sep' as separators */
	do {
		ENTRY e, *rv;

		/* skip leading white space */
		while (isblank(*dp))
c7e21c40:	e5d53000 	ldrb	r3, [r5]
c7e21c44:	e3530009 	cmp	r3, #9	; 0x9
c7e21c48:	13530020 	cmpne	r3, #32	; 0x20
			++dp;
c7e21c4c:	02854001 	addeq	r4, r5, #1	; 0x1
	/* Parse environment; allow for '\0' and 'sep' as separators */
	do {
		ENTRY e, *rv;

		/* skip leading white space */
		while (isblank(*dp))
c7e21c50:	0afffff9 	beq	c7e21c3c <himport_r+0x100>
			++dp;

		/* skip comment lines */
		if (*dp == '#') {
c7e21c54:	e3530023 	cmp	r3, #35	; 0x23
c7e21c58:	11a02005 	movne	r2, r5
c7e21c5c:	1a00000a 	bne	c7e21c8c <himport_r+0x150>
c7e21c60:	ea000000 	b	c7e21c68 <himport_r+0x12c>
			while (*dp && (*dp != sep))
				++dp;
c7e21c64:	e2855001 	add	r5, r5, #1	; 0x1
		while (isblank(*dp))
			++dp;

		/* skip comment lines */
		if (*dp == '#') {
			while (*dp && (*dp != sep))
c7e21c68:	e5d53000 	ldrb	r3, [r5]
c7e21c6c:	e3530000 	cmp	r3, #0	; 0x0
c7e21c70:	0a000002 	beq	c7e21c80 <himport_r+0x144>
c7e21c74:	e51b0038 	ldr	r0, [fp, #-56]
c7e21c78:	e1530000 	cmp	r3, r0
c7e21c7c:	1afffff8 	bne	c7e21c64 <himport_r+0x128>
				++dp;
			++dp;
c7e21c80:	e2854001 	add	r4, r5, #1	; 0x1
c7e21c84:	ea00006a 	b	c7e21e34 <himport_r+0x2f8>
			continue;
		}

		/* parse name */
		for (name = dp; *dp != '=' && *dp && *dp != sep; ++dp)
c7e21c88:	e2822001 	add	r2, r2, #1	; 0x1
c7e21c8c:	e5d23000 	ldrb	r3, [r2]
c7e21c90:	e353003d 	cmp	r3, #61	; 0x3d
c7e21c94:	13530000 	cmpne	r3, #0	; 0x0
c7e21c98:	0a000002 	beq	c7e21ca8 <himport_r+0x16c>
c7e21c9c:	e51b1038 	ldr	r1, [fp, #-56]
c7e21ca0:	e1530001 	cmp	r3, r1
c7e21ca4:	1afffff7 	bne	c7e21c88 <himport_r+0x14c>
			;

		/* deal with "name" and "name=" entries (delete var) */
		if (*dp == '\0' || *(dp + 1) == '\0' ||
c7e21ca8:	e3530000 	cmp	r3, #0	; 0x0
c7e21cac:	0a00000c 	beq	c7e21ce4 <himport_r+0x1a8>
c7e21cb0:	e5d21001 	ldrb	r1, [r2, #1]
c7e21cb4:	e2827001 	add	r7, r2, #1	; 0x1
c7e21cb8:	e3510000 	cmp	r1, #0	; 0x0
c7e21cbc:	0a000004 	beq	c7e21cd4 <himport_r+0x198>
c7e21cc0:	e51bc038 	ldr	ip, [fp, #-56]
c7e21cc4:	e153000c 	cmp	r3, ip
c7e21cc8:	0a000001 	beq	c7e21cd4 <himport_r+0x198>
c7e21ccc:	e151000c 	cmp	r1, ip
c7e21cd0:	1a000012 	bne	c7e21d20 <himport_r+0x1e4>
		    *dp == sep || *(dp + 1) == sep) {
			if (*dp == '=')
c7e21cd4:	e353003d 	cmp	r3, #61	; 0x3d
				*dp++ = '\0';
c7e21cd8:	03a03000 	moveq	r3, #0	; 0x0
c7e21cdc:	05c23000 	strbeq	r3, [r2]
			;

		/* deal with "name" and "name=" entries (delete var) */
		if (*dp == '\0' || *(dp + 1) == '\0' ||
		    *dp == sep || *(dp + 1) == sep) {
			if (*dp == '=')
c7e21ce0:	0a000000 	beq	c7e21ce8 <himport_r+0x1ac>
				*dp++ = '\0';
c7e21ce4:	e1a07002 	mov	r7, r2
			*dp++ = '\0';	/* terminate name */
c7e21ce8:	e3a03000 	mov	r3, #0	; 0x0
c7e21cec:	e1a04007 	mov	r4, r7
c7e21cf0:	e4c43001 	strb	r3, [r4], #1

			debug("DELETE CANDIDATE: \"%s\"\n", name);
			if (!drop_var_from_set(name, nvars, localvars))
c7e21cf4:	e1a00005 	mov	r0, r5
c7e21cf8:	e59b1008 	ldr	r1, [fp, #8]
c7e21cfc:	e1a02009 	mov	r2, r9
c7e21d00:	ebfffdad 	bl	c7e213bc <drop_var_from_set>
c7e21d04:	e3500000 	cmp	r0, #0	; 0x0
c7e21d08:	0a000049 	beq	c7e21e34 <himport_r+0x2f8>
				continue;

			if (hdelete_r(name, htab, do_apply) == 0)
c7e21d0c:	e1a00005 	mov	r0, r5
c7e21d10:	e1a0100a 	mov	r1, sl
c7e21d14:	e59b2010 	ldr	r2, [fp, #16]
c7e21d18:	ebffff5a 	bl	c7e21a88 <hdelete_r>
c7e21d1c:	ea000044 	b	c7e21e34 <himport_r+0x2f8>
				debug("DELETE ERROR ##############################\n");

			continue;
		}
		*dp++ = '\0';	/* terminate name */
c7e21d20:	e3a03000 	mov	r3, #0	; 0x0
c7e21d24:	e5c23000 	strb	r3, [r2]
c7e21d28:	e1a01007 	mov	r1, r7
c7e21d2c:	e1a0c007 	mov	ip, r7
c7e21d30:	ea000009 	b	c7e21d5c <himport_r+0x220>

		/* parse value; deal with escapes */
		for (value = sp = dp; *dp && (*dp != sep); ++dp) {
			if ((*dp == '\\') && *(dp + 1))
c7e21d34:	e353005c 	cmp	r3, #92	; 0x5c
c7e21d38:	1a000003 	bne	c7e21d4c <himport_r+0x210>
c7e21d3c:	e5dc3001 	ldrb	r3, [ip, #1]
c7e21d40:	e28c2001 	add	r2, ip, #1	; 0x1
c7e21d44:	e3530000 	cmp	r3, #0	; 0x0
c7e21d48:	1a000000 	bne	c7e21d50 <himport_r+0x214>
c7e21d4c:	e1a0200c 	mov	r2, ip
				++dp;
			*sp++ = *dp;
c7e21d50:	e1a0c002 	mov	ip, r2
c7e21d54:	e4dc3001 	ldrb	r3, [ip], #1
c7e21d58:	e4c13001 	strb	r3, [r1], #1
			continue;
		}
		*dp++ = '\0';	/* terminate name */

		/* parse value; deal with escapes */
		for (value = sp = dp; *dp && (*dp != sep); ++dp) {
c7e21d5c:	e5dc3000 	ldrb	r3, [ip]
c7e21d60:	e3530000 	cmp	r3, #0	; 0x0
c7e21d64:	0a000002 	beq	c7e21d74 <himport_r+0x238>
c7e21d68:	e51b0038 	ldr	r0, [fp, #-56]
c7e21d6c:	e1530000 	cmp	r3, r0
c7e21d70:	1affffef 	bne	c7e21d34 <himport_r+0x1f8>
			if ((*dp == '\\') && *(dp + 1))
				++dp;
			*sp++ = *dp;
		}
		*sp++ = '\0';	/* terminate value */
c7e21d74:	e3a06000 	mov	r6, #0	; 0x0
c7e21d78:	e5c16000 	strb	r6, [r1]
		++dp;

		/* Skip variables which are not supposed to be processed */
		if (!drop_var_from_set(name, nvars, localvars))
c7e21d7c:	e1a00005 	mov	r0, r5
c7e21d80:	e59b1008 	ldr	r1, [fp, #8]
c7e21d84:	e1a02009 	mov	r2, r9
			if ((*dp == '\\') && *(dp + 1))
				++dp;
			*sp++ = *dp;
		}
		*sp++ = '\0';	/* terminate value */
		++dp;
c7e21d88:	e28c4001 	add	r4, ip, #1	; 0x1

		/* Skip variables which are not supposed to be processed */
		if (!drop_var_from_set(name, nvars, localvars))
c7e21d8c:	ebfffd8a 	bl	c7e213bc <drop_var_from_set>
c7e21d90:	e1500006 	cmp	r0, r6
c7e21d94:	0a000026 	beq	c7e21e34 <himport_r+0x2f8>
		/* enter into hash table */
		e.key = name;
		e.data = value;

		/* if there is an apply function, check what it has to say */
		if (do_apply && htab->apply != NULL) {
c7e21d98:	e59b1010 	ldr	r1, [fp, #16]
		/* Skip variables which are not supposed to be processed */
		if (!drop_var_from_set(name, nvars, localvars))
			continue;

		/* enter into hash table */
		e.key = name;
c7e21d9c:	e50b5028 	str	r5, [fp, #-40]
		e.data = value;

		/* if there is an apply function, check what it has to say */
		if (do_apply && htab->apply != NULL) {
c7e21da0:	e1510006 	cmp	r1, r6
		if (!drop_var_from_set(name, nvars, localvars))
			continue;

		/* enter into hash table */
		e.key = name;
		e.data = value;
c7e21da4:	e50b7024 	str	r7, [fp, #-36]

		/* if there is an apply function, check what it has to say */
		if (do_apply && htab->apply != NULL) {
c7e21da8:	0a000012 	beq	c7e21df8 <himport_r+0x2bc>
c7e21dac:	e59a300c 	ldr	r3, [sl, #12]
c7e21db0:	e1530006 	cmp	r3, r6
c7e21db4:	0a00000f 	beq	c7e21df8 <himport_r+0x2bc>
				" for  %s\n", name);
			/*
			 * Search for variable in existing env, so to pass
			 * its previous value to the apply callback
			 */
			hsearch_r(e, FIND, &rv, htab);
c7e21db8:	e24b3028 	sub	r3, fp, #40	; 0x28
c7e21dbc:	e8930003 	ldm	r3, {r0, r1}
c7e21dc0:	e1a02006 	mov	r2, r6
c7e21dc4:	e24b3020 	sub	r3, fp, #32	; 0x20
c7e21dc8:	e58da000 	str	sl, [sp]
c7e21dcc:	ebfffe75 	bl	c7e217a8 <hsearch_r>
			debug("previous value was %s\n", rv ? rv->data : "");
			if (htab->apply(name, rv ? rv->data : NULL,
c7e21dd0:	e51b1020 	ldr	r1, [fp, #-32]
c7e21dd4:	e59ac00c 	ldr	ip, [sl, #12]
c7e21dd8:	e1510006 	cmp	r1, r6
c7e21ddc:	15911004 	ldrne	r1, [r1, #4]
c7e21de0:	e1a00005 	mov	r0, r5
c7e21de4:	e1a02007 	mov	r2, r7
c7e21de8:	e59b3004 	ldr	r3, [fp, #4]
c7e21dec:	e12fff3c 	blx	ip
c7e21df0:	e3500000 	cmp	r0, #0	; 0x0
c7e21df4:	1a00000e 	bne	c7e21e34 <himport_r+0x2f8>
					" variable %s, skipping it!\n", name);
				continue;
			}
		}

		hsearch_r(e, ENTER, &rv, htab);
c7e21df8:	e24b3028 	sub	r3, fp, #40	; 0x28
c7e21dfc:	e8930003 	ldm	r3, {r0, r1}
c7e21e00:	e3a02001 	mov	r2, #1	; 0x1
c7e21e04:	e24b3020 	sub	r3, fp, #32	; 0x20
c7e21e08:	e58da000 	str	sl, [sp]
c7e21e0c:	ebfffe65 	bl	c7e217a8 <hsearch_r>
		if (rv == NULL) {
c7e21e10:	e51b6020 	ldr	r6, [fp, #-32]
c7e21e14:	e3560000 	cmp	r6, #0	; 0x0
c7e21e18:	1a000005 	bne	c7e21e34 <himport_r+0x2f8>
			printf("himport_r: can't insert \"%s=%s\" into hash table\n",
c7e21e1c:	e1a01005 	mov	r1, r5
c7e21e20:	e1a02007 	mov	r2, r7
c7e21e24:	e59f0090 	ldr	r0, [pc, #144]	; c7e21ebc <himport_r+0x380>
c7e21e28:	ebff9b0a 	bl	c7e08a58 <printf>
c7e21e2c:	e1a00006 	mov	r0, r6
c7e21e30:	ea00001e 	b	c7e21eb0 <himport_r+0x374>
		}

		debug("INSERT: table %p, filled %d/%d rv %p ==> name=\"%s\" value=\"%s\"\n",
			htab, htab->filled, htab->size,
			rv, name, value);
	} while ((dp < data + size) && *dp);	/* size check needed for text */
c7e21e34:	e51b2030 	ldr	r2, [fp, #-48]
c7e21e38:	e51bc034 	ldr	ip, [fp, #-52]
c7e21e3c:	e082300c 	add	r3, r2, ip
c7e21e40:	e1540003 	cmp	r4, r3
c7e21e44:	2a000002 	bcs	c7e21e54 <himport_r+0x318>
c7e21e48:	e5d43000 	ldrb	r3, [r4]
c7e21e4c:	e3530000 	cmp	r3, #0	; 0x0
c7e21e50:	1affff79 	bne	c7e21c3c <himport_r+0x100>
						/* without '\0' termination */
	debug("INSERT: free(data = %p)\n", data);
	free(data);
c7e21e54:	e51b0030 	ldr	r0, [fp, #-48]
c7e21e58:	e3a05000 	mov	r5, #0	; 0x0
c7e21e5c:	ebff9c3f 	bl	c7e08f60 <free>
c7e21e60:	e1a04005 	mov	r4, r5
c7e21e64:	ea00000b 	b	c7e21e98 <himport_r+0x35c>

	/* process variables which were not considered */
	for (i = 0; i < nvars; i++) {
		if (localvars[i] == NULL)
c7e21e68:	e7993004 	ldr	r3, [r9, r4]
c7e21e6c:	e2530000 	subs	r0, r3, #0	; 0x0
c7e21e70:	0a000006 	beq	c7e21e90 <himport_r+0x354>
		 * This could mean two things:
		 * a) if the variable was present in current env, we delete it
		 * b) if the variable was not present in current env, we notify
		 *    it might be a typo
		 */
		if (hdelete_r(localvars[i], htab, do_apply) == 0)
c7e21e74:	ebffff03 	bl	c7e21a88 <hdelete_r>
c7e21e78:	e3500000 	cmp	r0, #0	; 0x0
			printf("WARNING: '%s' neither in running nor in imported env!\n", localvars[i]);
c7e21e7c:	07991004 	ldreq	r1, [r9, r4]
		else
			printf("WARNING: '%s' not in imported env, deleting it!\n", localvars[i]);
c7e21e80:	e59f0038 	ldr	r0, [pc, #56]	; c7e21ec0 <himport_r+0x384>
c7e21e84:	17991004 	ldrne	r1, [r9, r4]
		 * a) if the variable was present in current env, we delete it
		 * b) if the variable was not present in current env, we notify
		 *    it might be a typo
		 */
		if (hdelete_r(localvars[i], htab, do_apply) == 0)
			printf("WARNING: '%s' neither in running nor in imported env!\n", localvars[i]);
c7e21e88:	059f0034 	ldreq	r0, [pc, #52]	; c7e21ec4 <himport_r+0x388>
		else
			printf("WARNING: '%s' not in imported env, deleting it!\n", localvars[i]);
c7e21e8c:	ebff9af1 	bl	c7e08a58 <printf>
						/* without '\0' termination */
	debug("INSERT: free(data = %p)\n", data);
	free(data);

	/* process variables which were not considered */
	for (i = 0; i < nvars; i++) {
c7e21e90:	e2855001 	add	r5, r5, #1	; 0x1
c7e21e94:	e2844004 	add	r4, r4, #4	; 0x4
c7e21e98:	e59b0008 	ldr	r0, [fp, #8]
		 * This could mean two things:
		 * a) if the variable was present in current env, we delete it
		 * b) if the variable was not present in current env, we notify
		 *    it might be a typo
		 */
		if (hdelete_r(localvars[i], htab, do_apply) == 0)
c7e21e9c:	e1a0100a 	mov	r1, sl
						/* without '\0' termination */
	debug("INSERT: free(data = %p)\n", data);
	free(data);

	/* process variables which were not considered */
	for (i = 0; i < nvars; i++) {
c7e21ea0:	e1550000 	cmp	r5, r0
		 * This could mean two things:
		 * a) if the variable was present in current env, we delete it
		 * b) if the variable was not present in current env, we notify
		 *    it might be a typo
		 */
		if (hdelete_r(localvars[i], htab, do_apply) == 0)
c7e21ea4:	e59b2010 	ldr	r2, [fp, #16]
						/* without '\0' termination */
	debug("INSERT: free(data = %p)\n", data);
	free(data);

	/* process variables which were not considered */
	for (i = 0; i < nvars; i++) {
c7e21ea8:	baffffee 	blt	c7e21e68 <himport_r+0x32c>
c7e21eac:	e3a00001 	mov	r0, #1	; 0x1
			printf("WARNING: '%s' not in imported env, deleting it!\n", localvars[i]);
	}

	debug("INSERT: done\n");
	return 1;		/* everything OK */
}
c7e21eb0:	e24bd01c 	sub	sp, fp, #28	; 0x1c
c7e21eb4:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e21eb8:	c7e72300 	.word	0xc7e72300
c7e21ebc:	c7e34763 	.word	0xc7e34763
c7e21ec0:	c7e347cb 	.word	0xc7e347cb
c7e21ec4:	c7e34794 	.word	0xc7e34794

c7e21ec8 <hmatch_r>:
	return 0;
}

int hmatch_r(const char *match, int last_idx, ENTRY ** retval,
	     struct hsearch_data *htab)
{
c7e21ec8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
c7e21ecc:	e1a06003 	mov	r6, r3
	unsigned int idx;
	size_t key_len = strlen(match);

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21ed0:	e2815001 	add	r5, r1, #1	; 0x1
	return 0;
}

int hmatch_r(const char *match, int last_idx, ENTRY ** retval,
	     struct hsearch_data *htab)
{
c7e21ed4:	e1a09002 	mov	r9, r2
c7e21ed8:	e1a0a000 	mov	sl, r0
	unsigned int idx;
	size_t key_len = strlen(match);
c7e21edc:	eb000295 	bl	c7e22938 <strlen>

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21ee0:	e3a0300c 	mov	r3, #12	; 0xc

int hmatch_r(const char *match, int last_idx, ENTRY ** retval,
	     struct hsearch_data *htab)
{
	unsigned int idx;
	size_t key_len = strlen(match);
c7e21ee4:	e1a07000 	mov	r7, r0

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21ee8:	e0040593 	mul	r4, r3, r5
c7e21eec:	ea000010 	b	c7e21f34 <hmatch_r+0x6c>
		if (htab->table[idx].used <= 0)
c7e21ef0:	e5963000 	ldr	r3, [r6]
c7e21ef4:	e7931004 	ldr	r1, [r3, r4]
c7e21ef8:	e0833004 	add	r3, r3, r4
c7e21efc:	e3510000 	cmp	r1, #0	; 0x0
c7e21f00:	da000009 	ble	c7e21f2c <hmatch_r+0x64>
			continue;
		if (!strncmp(match, htab->table[idx].entry.key, key_len)) {
c7e21f04:	e5931004 	ldr	r1, [r3, #4]
c7e21f08:	eb000262 	bl	c7e22898 <strncmp>
c7e21f0c:	e3500000 	cmp	r0, #0	; 0x0
c7e21f10:	1a000005 	bne	c7e21f2c <hmatch_r+0x64>
			*retval = &htab->table[idx].entry;
c7e21f14:	e5963000 	ldr	r3, [r6]
			return idx;
c7e21f18:	e1a00005 	mov	r0, r5

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
		if (htab->table[idx].used <= 0)
			continue;
		if (!strncmp(match, htab->table[idx].entry.key, key_len)) {
			*retval = &htab->table[idx].entry;
c7e21f1c:	e0833004 	add	r3, r3, r4
c7e21f20:	e2833004 	add	r3, r3, #4	; 0x4
c7e21f24:	e5893000 	str	r3, [r9]
c7e21f28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	     struct hsearch_data *htab)
{
	unsigned int idx;
	size_t key_len = strlen(match);

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21f2c:	e2855001 	add	r5, r5, #1	; 0x1
c7e21f30:	e284400c 	add	r4, r4, #12	; 0xc
c7e21f34:	e5963004 	ldr	r3, [r6, #4]
		if (htab->table[idx].used <= 0)
			continue;
		if (!strncmp(match, htab->table[idx].entry.key, key_len)) {
c7e21f38:	e1a0000a 	mov	r0, sl
	     struct hsearch_data *htab)
{
	unsigned int idx;
	size_t key_len = strlen(match);

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21f3c:	e1550003 	cmp	r5, r3
		if (htab->table[idx].used <= 0)
			continue;
		if (!strncmp(match, htab->table[idx].entry.key, key_len)) {
c7e21f40:	e1a02007 	mov	r2, r7
	     struct hsearch_data *htab)
{
	unsigned int idx;
	size_t key_len = strlen(match);

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21f44:	3affffe9 	bcc	c7e21ef0 <hmatch_r+0x28>
			*retval = &htab->table[idx].entry;
			return idx;
		}
	}

	__set_errno(ESRCH);
c7e21f48:	e59f3014 	ldr	r3, [pc, #20]	; c7e21f64 <hmatch_r+0x9c>
	*retval = NULL;
c7e21f4c:	e3a01000 	mov	r1, #0	; 0x0
			*retval = &htab->table[idx].entry;
			return idx;
		}
	}

	__set_errno(ESRCH);
c7e21f50:	e3a02003 	mov	r2, #3	; 0x3
c7e21f54:	e5832000 	str	r2, [r3]
	*retval = NULL;
c7e21f58:	e5891000 	str	r1, [r9]
c7e21f5c:	e1a00001 	mov	r0, r1
	return 0;
}
c7e21f60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e21f64:	c7e72300 	.word	0xc7e72300

c7e21f68 <hstrstr_r>:
/*
 * hstrstr_r - return index to entry whose key and/or data contains match
 */
int hstrstr_r(const char *match, int last_idx, ENTRY ** retval,
	      struct hsearch_data *htab)
{
c7e21f68:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	unsigned int idx;

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21f6c:	e2816001 	add	r6, r1, #1	; 0x1
/*
 * hstrstr_r - return index to entry whose key and/or data contains match
 */
int hstrstr_r(const char *match, int last_idx, ENTRY ** retval,
	      struct hsearch_data *htab)
{
c7e21f70:	e1a05003 	mov	r5, r3
	unsigned int idx;

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21f74:	e3a0300c 	mov	r3, #12	; 0xc
/*
 * hstrstr_r - return index to entry whose key and/or data contains match
 */
int hstrstr_r(const char *match, int last_idx, ENTRY ** retval,
	      struct hsearch_data *htab)
{
c7e21f78:	e1a07000 	mov	r7, r0
c7e21f7c:	e1a0a002 	mov	sl, r2
	unsigned int idx;

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21f80:	e0040693 	mul	r4, r3, r6
c7e21f84:	ea000017 	b	c7e21fe8 <hstrstr_r+0x80>
		if (htab->table[idx].used <= 0)
c7e21f88:	e5953000 	ldr	r3, [r5]
c7e21f8c:	e7932004 	ldr	r2, [r3, r4]
c7e21f90:	e0833004 	add	r3, r3, r4
c7e21f94:	e3520000 	cmp	r2, #0	; 0x0
c7e21f98:	da000010 	ble	c7e21fe0 <hstrstr_r+0x78>
			continue;
		if (strstr(htab->table[idx].entry.key, match) ||
c7e21f9c:	e5930004 	ldr	r0, [r3, #4]
c7e21fa0:	eb00037b 	bl	c7e22d94 <strstr>
c7e21fa4:	e3500000 	cmp	r0, #0	; 0x0
c7e21fa8:	e1a01007 	mov	r1, r7
c7e21fac:	1a000005 	bne	c7e21fc8 <hstrstr_r+0x60>
c7e21fb0:	e5953000 	ldr	r3, [r5]
c7e21fb4:	e0833004 	add	r3, r3, r4
c7e21fb8:	e5930008 	ldr	r0, [r3, #8]
c7e21fbc:	eb000374 	bl	c7e22d94 <strstr>
c7e21fc0:	e3500000 	cmp	r0, #0	; 0x0
c7e21fc4:	0a000005 	beq	c7e21fe0 <hstrstr_r+0x78>
		    strstr(htab->table[idx].entry.data, match)) {
			*retval = &htab->table[idx].entry;
c7e21fc8:	e5953000 	ldr	r3, [r5]
			return idx;
c7e21fcc:	e1a00006 	mov	r0, r6
	for (idx = last_idx + 1; idx < htab->size; ++idx) {
		if (htab->table[idx].used <= 0)
			continue;
		if (strstr(htab->table[idx].entry.key, match) ||
		    strstr(htab->table[idx].entry.data, match)) {
			*retval = &htab->table[idx].entry;
c7e21fd0:	e0833004 	add	r3, r3, r4
c7e21fd4:	e2833004 	add	r3, r3, #4	; 0x4
c7e21fd8:	e58a3000 	str	r3, [sl]
c7e21fdc:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
int hstrstr_r(const char *match, int last_idx, ENTRY ** retval,
	      struct hsearch_data *htab)
{
	unsigned int idx;

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21fe0:	e2866001 	add	r6, r6, #1	; 0x1
c7e21fe4:	e284400c 	add	r4, r4, #12	; 0xc
c7e21fe8:	e5953004 	ldr	r3, [r5, #4]
		if (htab->table[idx].used <= 0)
			continue;
		if (strstr(htab->table[idx].entry.key, match) ||
c7e21fec:	e1a01007 	mov	r1, r7
int hstrstr_r(const char *match, int last_idx, ENTRY ** retval,
	      struct hsearch_data *htab)
{
	unsigned int idx;

	for (idx = last_idx + 1; idx < htab->size; ++idx) {
c7e21ff0:	e1560003 	cmp	r6, r3
c7e21ff4:	3affffe3 	bcc	c7e21f88 <hstrstr_r+0x20>
			*retval = &htab->table[idx].entry;
			return idx;
		}
	}

	__set_errno(ESRCH);
c7e21ff8:	e59f3014 	ldr	r3, [pc, #20]	; c7e22014 <hstrstr_r+0xac>
	*retval = NULL;
c7e21ffc:	e3a01000 	mov	r1, #0	; 0x0
			*retval = &htab->table[idx].entry;
			return idx;
		}
	}

	__set_errno(ESRCH);
c7e22000:	e3a02003 	mov	r2, #3	; 0x3
c7e22004:	e5832000 	str	r2, [r3]
	*retval = NULL;
c7e22008:	e58a1000 	str	r1, [sl]
c7e2200c:	e1a00001 	mov	r0, r1
	return 0;
}
c7e22010:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e22014:	c7e72300 	.word	0xc7e72300

c7e22018 <ldiv>:
	long    rem;
} ldiv_t;
/* Return the `ldiv_t' representation of NUMER over DENOM.  */
ldiv_t
ldiv (long int numer, long int denom)
{
c7e22018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e2201c:	e1a04001 	mov	r4, r1
c7e22020:	e1a07000 	mov	r7, r0
  ldiv_t result;

  result.quot = numer / denom;
c7e22024:	e1a01002 	mov	r1, r2
c7e22028:	e1a00004 	mov	r0, r4
	long    rem;
} ldiv_t;
/* Return the `ldiv_t' representation of NUMER over DENOM.  */
ldiv_t
ldiv (long int numer, long int denom)
{
c7e2202c:	e1a06002 	mov	r6, r2
  ldiv_t result;

  result.quot = numer / denom;
c7e22030:	eb002179 	bl	c7e2a61c <__divsi3>
  result.rem = numer % denom;
c7e22034:	e1a01006 	mov	r1, r6
ldiv_t
ldiv (long int numer, long int denom)
{
  ldiv_t result;

  result.quot = numer / denom;
c7e22038:	e1a05000 	mov	r5, r0
  result.rem = numer % denom;
c7e2203c:	e1a00004 	mov	r0, r4
c7e22040:	eb0021bf 	bl	c7e2a744 <__aeabi_idivmod>
     RESULT will always be positive.  This all boils down to: if
     NUMER >= 0, but REM < 0, we got the wrong answer.  In that
     case, to get the right answer, add 1 to QUOT and subtract
     DENOM from REM.  */

  if (numer >= 0 && result.rem < 0)
c7e22044:	e3540000 	cmp	r4, #0	; 0x0
c7e22048:	ba000002 	blt	c7e22058 <ldiv+0x40>
c7e2204c:	e3510000 	cmp	r1, #0	; 0x0
    {
      ++result.quot;
      result.rem -= denom;
c7e22050:	b0661001 	rsblt	r1, r6, r1
     case, to get the right answer, add 1 to QUOT and subtract
     DENOM from REM.  */

  if (numer >= 0 && result.rem < 0)
    {
      ++result.quot;
c7e22054:	b2855001 	addlt	r5, r5, #1	; 0x1
      result.rem -= denom;
    }

  return result;
c7e22058:	e5871004 	str	r1, [r7, #4]
c7e2205c:	e5875000 	str	r5, [r7]
}
c7e22060:	e1a00007 	mov	r0, r7
c7e22064:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e22068 <lmb_dump_all>:
			(long long unsigned)lmb->reserved.region[i].base);
		debug("		     .size = 0x%llx\n",
			(long long unsigned)lmb->reserved.region[i].size);
	}
#endif /* DEBUG */
}
c7e22068:	e12fff1e 	bx	lr

c7e2206c <lmb_addrs_adjacent>:
}

static long lmb_addrs_adjacent(phys_addr_t base1, phys_size_t size1,
		phys_addr_t base2, phys_size_t size2)
{
	if (base2 == base1 + size1)
c7e2206c:	e0811000 	add	r1, r1, r0
c7e22070:	e1520001 	cmp	r2, r1
c7e22074:	03a00001 	moveq	r0, #1	; 0x1
c7e22078:	012fff1e 	bxeq	lr
		return 1;
	else if (base1 == base2 + size2)
c7e2207c:	e0833002 	add	r3, r3, r2
c7e22080:	e1500003 	cmp	r0, r3
c7e22084:	03e00000 	mvneq	r0, #0	; 0x0
c7e22088:	13a00000 	movne	r0, #0	; 0x0
		return -1;

	return 0;
}
c7e2208c:	e12fff1e 	bx	lr

c7e22090 <lmb_remove_region>:

	return lmb_addrs_adjacent(base1, size1, base2, size2);
}

static void lmb_remove_region(struct lmb_region *rgn, unsigned long r)
{
c7e22090:	e2813002 	add	r3, r1, #2	; 0x2
c7e22094:	e080c183 	add	ip, r0, r3, lsl #3
c7e22098:	ea000003 	b	c7e220ac <lmb_remove_region+0x1c>
	unsigned long i;

	for (i = r; i < rgn->cnt - 1; i++) {
		rgn->region[i].base = rgn->region[i + 1].base;
c7e2209c:	e51c3008 	ldr	r3, [ip, #-8]
		rgn->region[i].size = rgn->region[i + 1].size;
c7e220a0:	e51c2004 	ldr	r2, [ip, #-4]
static void lmb_remove_region(struct lmb_region *rgn, unsigned long r)
{
	unsigned long i;

	for (i = r; i < rgn->cnt - 1; i++) {
		rgn->region[i].base = rgn->region[i + 1].base;
c7e220a4:	e50c3010 	str	r3, [ip, #-16]
		rgn->region[i].size = rgn->region[i + 1].size;
c7e220a8:	e50c200c 	str	r2, [ip, #-12]

static void lmb_remove_region(struct lmb_region *rgn, unsigned long r)
{
	unsigned long i;

	for (i = r; i < rgn->cnt - 1; i++) {
c7e220ac:	e5903000 	ldr	r3, [r0]
c7e220b0:	e28cc008 	add	ip, ip, #8	; 0x8
c7e220b4:	e2433001 	sub	r3, r3, #1	; 0x1
c7e220b8:	e1510003 	cmp	r1, r3
		rgn->region[i].base = rgn->region[i + 1].base;
c7e220bc:	e2811001 	add	r1, r1, #1	; 0x1

static void lmb_remove_region(struct lmb_region *rgn, unsigned long r)
{
	unsigned long i;

	for (i = r; i < rgn->cnt - 1; i++) {
c7e220c0:	3afffff5 	bcc	c7e2209c <lmb_remove_region+0xc>
		rgn->region[i].base = rgn->region[i + 1].base;
		rgn->region[i].size = rgn->region[i + 1].size;
	}
	rgn->cnt--;
c7e220c4:	e5803000 	str	r3, [r0]
}
c7e220c8:	e12fff1e 	bx	lr

c7e220cc <lmb_init>:
void lmb_init(struct lmb *lmb)
{
	/* Create a dummy zero size LMB which will get coalesced away later.
	 * This simplifies the lmb_add() code below...
	 */
	lmb->memory.region[0].base = 0;
c7e220cc:	e3a03000 	mov	r3, #0	; 0x0
	lmb->memory.region[0].size = 0;
	lmb->memory.cnt = 1;
c7e220d0:	e3a02001 	mov	r2, #1	; 0x1

	/* Ditto. */
	lmb->reserved.region[0].base = 0;
	lmb->reserved.region[0].size = 0;
	lmb->reserved.cnt = 1;
	lmb->reserved.size = 0;
c7e220d4:	e5803054 	str	r3, [r0, #84]
	lmb->memory.size = 0;

	/* Ditto. */
	lmb->reserved.region[0].base = 0;
	lmb->reserved.region[0].size = 0;
	lmb->reserved.cnt = 1;
c7e220d8:	e5802050 	str	r2, [r0, #80]
void lmb_init(struct lmb *lmb)
{
	/* Create a dummy zero size LMB which will get coalesced away later.
	 * This simplifies the lmb_add() code below...
	 */
	lmb->memory.region[0].base = 0;
c7e220dc:	e5803008 	str	r3, [r0, #8]
	lmb->memory.region[0].size = 0;
c7e220e0:	e580300c 	str	r3, [r0, #12]
	lmb->memory.cnt = 1;
c7e220e4:	e880000c 	stm	r0, {r2, r3}
	lmb->memory.size = 0;

	/* Ditto. */
	lmb->reserved.region[0].base = 0;
c7e220e8:	e5803058 	str	r3, [r0, #88]
	lmb->reserved.region[0].size = 0;
c7e220ec:	e580305c 	str	r3, [r0, #92]
	lmb->reserved.cnt = 1;
	lmb->reserved.size = 0;
}
c7e220f0:	e12fff1e 	bx	lr

c7e220f4 <lmb_add_region>:

/* This routine called with relocation disabled. */
static long lmb_add_region(struct lmb_region *rgn, phys_addr_t base, phys_size_t size)
{
c7e220f4:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	unsigned long coalesced = 0;
	long adjacent, i;

	if ((rgn->cnt == 1) && (rgn->region[0].size == 0)) {
c7e220f8:	e590b000 	ldr	fp, [r0]
	lmb->reserved.size = 0;
}

/* This routine called with relocation disabled. */
static long lmb_add_region(struct lmb_region *rgn, phys_addr_t base, phys_size_t size)
{
c7e220fc:	e1a04000 	mov	r4, r0
	unsigned long coalesced = 0;
	long adjacent, i;

	if ((rgn->cnt == 1) && (rgn->region[0].size == 0)) {
c7e22100:	e35b0001 	cmp	fp, #1	; 0x1
	lmb->reserved.size = 0;
}

/* This routine called with relocation disabled. */
static long lmb_add_region(struct lmb_region *rgn, phys_addr_t base, phys_size_t size)
{
c7e22104:	e58d1008 	str	r1, [sp, #8]
c7e22108:	e1a09002 	mov	r9, r2
	unsigned long coalesced = 0;
	long adjacent, i;

	if ((rgn->cnt == 1) && (rgn->region[0].size == 0)) {
c7e2210c:	0a000002 	beq	c7e2211c <lmb_add_region+0x28>
c7e22110:	e1a07004 	mov	r7, r4
c7e22114:	e3a0a000 	mov	sl, #0	; 0x0
c7e22118:	ea000023 	b	c7e221ac <lmb_add_region+0xb8>
c7e2211c:	e590000c 	ldr	r0, [r0, #12]
c7e22120:	e3500000 	cmp	r0, #0	; 0x0
		rgn->region[0].base = base;
c7e22124:	059d1008 	ldreq	r1, [sp, #8]
		rgn->region[0].size = size;
c7e22128:	0584200c 	streq	r2, [r4, #12]
{
	unsigned long coalesced = 0;
	long adjacent, i;

	if ((rgn->cnt == 1) && (rgn->region[0].size == 0)) {
		rgn->region[0].base = base;
c7e2212c:	05841008 	streq	r1, [r4, #8]
static long lmb_add_region(struct lmb_region *rgn, phys_addr_t base, phys_size_t size)
{
	unsigned long coalesced = 0;
	long adjacent, i;

	if ((rgn->cnt == 1) && (rgn->region[0].size == 0)) {
c7e22130:	1afffff6 	bne	c7e22110 <lmb_add_region+0x1c>
c7e22134:	ea00005f 	b	c7e222b8 <lmb_add_region+0x1c4>
		return 0;
	}

	/* First try and coalesce this LMB with another. */
	for (i=0; i < rgn->cnt; i++) {
		phys_addr_t rgnbase = rgn->region[i].base;
c7e22138:	e5976008 	ldr	r6, [r7, #8]
		phys_size_t rgnsize = rgn->region[i].size;
c7e2213c:	e597500c 	ldr	r5, [r7, #12]

		if ((rgnbase == base) && (rgnsize == size))
c7e22140:	e59dc008 	ldr	ip, [sp, #8]
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
c7e22144:	e1a02006 	mov	r2, r6
	/* First try and coalesce this LMB with another. */
	for (i=0; i < rgn->cnt; i++) {
		phys_addr_t rgnbase = rgn->region[i].base;
		phys_size_t rgnsize = rgn->region[i].size;

		if ((rgnbase == base) && (rgnsize == size))
c7e22148:	e156000c 	cmp	r6, ip
c7e2214c:	01550009 	cmpeq	r5, r9
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
c7e22150:	e1a03005 	mov	r3, r5
		if ( adjacent > 0 ) {
			rgn->region[i].base -= size;
			rgn->region[i].size += size;
			coalesced++;
			break;
c7e22154:	e2877008 	add	r7, r7, #8	; 0x8
	/* First try and coalesce this LMB with another. */
	for (i=0; i < rgn->cnt; i++) {
		phys_addr_t rgnbase = rgn->region[i].base;
		phys_size_t rgnsize = rgn->region[i].size;

		if ((rgnbase == base) && (rgnsize == size))
c7e22158:	03a00000 	moveq	r0, #0	; 0x0
c7e2215c:	0a000055 	beq	c7e222b8 <lmb_add_region+0x1c4>
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
c7e22160:	ebffffc1 	bl	c7e2206c <lmb_addrs_adjacent>
		if ( adjacent > 0 ) {
c7e22164:	e3500000 	cmp	r0, #0	; 0x0
c7e22168:	e28a3001 	add	r3, sl, #1	; 0x1
c7e2216c:	da000007 	ble	c7e22190 <lmb_add_region+0x9c>
			rgn->region[i].base -= size;
			rgn->region[i].size += size;
c7e22170:	e0842183 	add	r2, r4, r3, lsl #3
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
		if ( adjacent > 0 ) {
			rgn->region[i].base -= size;
c7e22174:	e1a00003 	mov	r0, r3
			rgn->region[i].size += size;
c7e22178:	e5923004 	ldr	r3, [r2, #4]
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
		if ( adjacent > 0 ) {
			rgn->region[i].base -= size;
c7e2217c:	e0691006 	rsb	r1, r9, r6
			rgn->region[i].size += size;
c7e22180:	e0893003 	add	r3, r9, r3
c7e22184:	e5823004 	str	r3, [r2, #4]
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
		if ( adjacent > 0 ) {
			rgn->region[i].base -= size;
c7e22188:	e7841180 	str	r1, [r4, r0, lsl #3]
c7e2218c:	ea000003 	b	c7e221a0 <lmb_add_region+0xac>
			rgn->region[i].size += size;
			coalesced++;
			break;
		}
		else if ( adjacent < 0 ) {
c7e22190:	0a000004 	beq	c7e221a8 <lmb_add_region+0xb4>
			rgn->region[i].size += size;
c7e22194:	e0842183 	add	r2, r4, r3, lsl #3
c7e22198:	e0853009 	add	r3, r5, r9
c7e2219c:	e5823004 	str	r3, [r2, #4]
c7e221a0:	e3a07001 	mov	r7, #1	; 0x1
c7e221a4:	ea000005 	b	c7e221c0 <lmb_add_region+0xcc>
		rgn->region[0].size = size;
		return 0;
	}

	/* First try and coalesce this LMB with another. */
	for (i=0; i < rgn->cnt; i++) {
c7e221a8:	e1a0a003 	mov	sl, r3
c7e221ac:	e15a000b 	cmp	sl, fp

		if ((rgnbase == base) && (rgnsize == size))
			/* Already have this region, so we're done */
			return 0;

		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
c7e221b0:	e59d0008 	ldr	r0, [sp, #8]
c7e221b4:	e1a01009 	mov	r1, r9
		rgn->region[0].size = size;
		return 0;
	}

	/* First try and coalesce this LMB with another. */
	for (i=0; i < rgn->cnt; i++) {
c7e221b8:	3affffde 	bcc	c7e22138 <lmb_add_region+0x44>
c7e221bc:	e3a07000 	mov	r7, #0	; 0x0
			coalesced++;
			break;
		}
	}

	if ((i < rgn->cnt-1) && lmb_regions_adjacent(rgn, i, i+1) ) {
c7e221c0:	e5946000 	ldr	r6, [r4]
c7e221c4:	e2461001 	sub	r1, r6, #1	; 0x1
c7e221c8:	e15a0001 	cmp	sl, r1
c7e221cc:	e58d100c 	str	r1, [sp, #12]
c7e221d0:	2a000015 	bcs	c7e2222c <lmb_add_region+0x138>
c7e221d4:	e28a5001 	add	r5, sl, #1	; 0x1
		unsigned long r1, unsigned long r2)
{
	phys_addr_t base1 = rgn->region[r1].base;
	phys_size_t size1 = rgn->region[r1].size;
	phys_addr_t base2 = rgn->region[r2].base;
	phys_size_t size2 = rgn->region[r2].size;
c7e221d8:	e2852001 	add	r2, r5, #1	; 0x1
c7e221dc:	e0843182 	add	r3, r4, r2, lsl #3

static long lmb_regions_adjacent(struct lmb_region *rgn,
		unsigned long r1, unsigned long r2)
{
	phys_addr_t base1 = rgn->region[r1].base;
	phys_size_t size1 = rgn->region[r1].size;
c7e221e0:	e084c185 	add	ip, r4, r5, lsl #3
c7e221e4:	e59ca004 	ldr	sl, [ip, #4]
	phys_addr_t base2 = rgn->region[r2].base;
	phys_size_t size2 = rgn->region[r2].size;
c7e221e8:	e593b004 	ldr	fp, [r3, #4]

	return lmb_addrs_adjacent(base1, size1, base2, size2);
c7e221ec:	e7942182 	ldr	r2, [r4, r2, lsl #3]
c7e221f0:	e7940185 	ldr	r0, [r4, r5, lsl #3]
c7e221f4:	e1a0100a 	mov	r1, sl
c7e221f8:	e1a0300b 	mov	r3, fp

static long lmb_regions_adjacent(struct lmb_region *rgn,
		unsigned long r1, unsigned long r2)
{
	phys_addr_t base1 = rgn->region[r1].base;
	phys_size_t size1 = rgn->region[r1].size;
c7e221fc:	e58dc004 	str	ip, [sp, #4]
	phys_addr_t base2 = rgn->region[r2].base;
	phys_size_t size2 = rgn->region[r2].size;

	return lmb_addrs_adjacent(base1, size1, base2, size2);
c7e22200:	ebffff99 	bl	c7e2206c <lmb_addrs_adjacent>
			coalesced++;
			break;
		}
	}

	if ((i < rgn->cnt-1) && lmb_regions_adjacent(rgn, i, i+1) ) {
c7e22204:	e3500000 	cmp	r0, #0	; 0x0
c7e22208:	0a000007 	beq	c7e2222c <lmb_add_region+0x138>

/* Assumption: base addr of region 1 < base addr of region 2 */
static void lmb_coalesce_regions(struct lmb_region *rgn,
		unsigned long r1, unsigned long r2)
{
	rgn->region[r1].size += rgn->region[r2].size;
c7e2220c:	e59d1004 	ldr	r1, [sp, #4]
c7e22210:	e08b300a 	add	r3, fp, sl
c7e22214:	e5813004 	str	r3, [r1, #4]
	lmb_remove_region(rgn, r2);
c7e22218:	e1a00004 	mov	r0, r4
c7e2221c:	e1a01005 	mov	r1, r5
c7e22220:	ebffff9a 	bl	c7e22090 <lmb_remove_region>
		}
	}

	if ((i < rgn->cnt-1) && lmb_regions_adjacent(rgn, i, i+1) ) {
		lmb_coalesce_regions(rgn, i, i+1);
		coalesced++;
c7e22224:	e2870001 	add	r0, r7, #1	; 0x1
c7e22228:	ea000022 	b	c7e222b8 <lmb_add_region+0x1c4>
	}

	if (coalesced)
c7e2222c:	e3570000 	cmp	r7, #0	; 0x0
c7e22230:	13a00001 	movne	r0, #1	; 0x1
c7e22234:	1a00001f 	bne	c7e222b8 <lmb_add_region+0x1c4>
		return coalesced;
	if (rgn->cnt >= MAX_LMB_REGIONS)
c7e22238:	e3560007 	cmp	r6, #7	; 0x7
c7e2223c:	83e00000 	mvnhi	r0, #0	; 0x0
c7e22240:	8a00001c 	bhi	c7e222b8 <lmb_add_region+0x1c4>
		return -1;

	/* Couldn't coalesce the LMB, so add it to the sorted table. */
	for (i = rgn->cnt-1; i >= 0; i--) {
c7e22244:	e2863001 	add	r3, r6, #1	; 0x1
c7e22248:	e59d200c 	ldr	r2, [sp, #12]
c7e2224c:	e0841183 	add	r1, r4, r3, lsl #3
c7e22250:	ea00000d 	b	c7e2228c <lmb_add_region+0x198>
		if (base < rgn->region[i].base) {
c7e22254:	e5310008 	ldr	r0, [r1, #-8]!
c7e22258:	e59d3008 	ldr	r3, [sp, #8]
c7e2225c:	e1530000 	cmp	r3, r0
			rgn->region[i+1].base = rgn->region[i].base;
			rgn->region[i+1].size = rgn->region[i].size;
c7e22260:	35913004 	ldrcc	r3, [r1, #4]
		return -1;

	/* Couldn't coalesce the LMB, so add it to the sorted table. */
	for (i = rgn->cnt-1; i >= 0; i--) {
		if (base < rgn->region[i].base) {
			rgn->region[i+1].base = rgn->region[i].base;
c7e22264:	35810008 	strcc	r0, [r1, #8]
			rgn->region[i+1].size = rgn->region[i].size;
c7e22268:	3581300c 	strcc	r3, [r1, #12]
		return coalesced;
	if (rgn->cnt >= MAX_LMB_REGIONS)
		return -1;

	/* Couldn't coalesce the LMB, so add it to the sorted table. */
	for (i = rgn->cnt-1; i >= 0; i--) {
c7e2226c:	32422001 	subcc	r2, r2, #1	; 0x1
c7e22270:	3a000005 	bcc	c7e2228c <lmb_add_region+0x198>
		if (base < rgn->region[i].base) {
			rgn->region[i+1].base = rgn->region[i].base;
			rgn->region[i+1].size = rgn->region[i].size;
		} else {
			rgn->region[i+1].base = base;
c7e22274:	e2822002 	add	r2, r2, #2	; 0x2
c7e22278:	e59dc008 	ldr	ip, [sp, #8]
			rgn->region[i+1].size = size;
c7e2227c:	e0843182 	add	r3, r4, r2, lsl #3
c7e22280:	e5839004 	str	r9, [r3, #4]
	for (i = rgn->cnt-1; i >= 0; i--) {
		if (base < rgn->region[i].base) {
			rgn->region[i+1].base = rgn->region[i].base;
			rgn->region[i+1].size = rgn->region[i].size;
		} else {
			rgn->region[i+1].base = base;
c7e22284:	e784c182 	str	ip, [r4, r2, lsl #3]
c7e22288:	ea000001 	b	c7e22294 <lmb_add_region+0x1a0>
		return coalesced;
	if (rgn->cnt >= MAX_LMB_REGIONS)
		return -1;

	/* Couldn't coalesce the LMB, so add it to the sorted table. */
	for (i = rgn->cnt-1; i >= 0; i--) {
c7e2228c:	e3520000 	cmp	r2, #0	; 0x0
c7e22290:	aaffffef 	bge	c7e22254 <lmb_add_region+0x160>
			rgn->region[i+1].size = size;
			break;
		}
	}

	if (base < rgn->region[0].base) {
c7e22294:	e5943008 	ldr	r3, [r4, #8]
c7e22298:	e59d1008 	ldr	r1, [sp, #8]
		rgn->region[0].base = base;
		rgn->region[0].size = size;
	}

	rgn->cnt++;
c7e2229c:	e3a00000 	mov	r0, #0	; 0x0
			rgn->region[i+1].size = size;
			break;
		}
	}

	if (base < rgn->region[0].base) {
c7e222a0:	e1510003 	cmp	r1, r3
		rgn->region[0].base = base;
		rgn->region[0].size = size;
	}

	rgn->cnt++;
c7e222a4:	e5943000 	ldr	r3, [r4]
			break;
		}
	}

	if (base < rgn->region[0].base) {
		rgn->region[0].base = base;
c7e222a8:	35841008 	strcc	r1, [r4, #8]
		rgn->region[0].size = size;
	}

	rgn->cnt++;
c7e222ac:	e2833001 	add	r3, r3, #1	; 0x1
		}
	}

	if (base < rgn->region[0].base) {
		rgn->region[0].base = base;
		rgn->region[0].size = size;
c7e222b0:	3584900c 	strcc	r9, [r4, #12]
	}

	rgn->cnt++;
c7e222b4:	e5843000 	str	r3, [r4]

	return 0;
}
c7e222b8:	e28dd010 	add	sp, sp, #16	; 0x10
c7e222bc:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e222c0 <lmb_add>:
/* This routine may be called with relocation disabled. */
long lmb_add(struct lmb *lmb, phys_addr_t base, phys_size_t size)
{
	struct lmb_region *_rgn = &(lmb->memory);

	return lmb_add_region(_rgn, base, size);
c7e222c0:	eaffff8b 	b	c7e220f4 <lmb_add_region>

c7e222c4 <lmb_free>:
}

long lmb_free(struct lmb *lmb, phys_addr_t base, phys_size_t size)
{
c7e222c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	rgnbegin = rgnend = 0; /* supress gcc warnings */

	/* Find the region where (base, size) belongs to */
	for (i=0; i < rgn->cnt; i++) {
c7e222c8:	e3a0c000 	mov	ip, #0	; 0x0

	return lmb_add_region(_rgn, base, size);
}

long lmb_free(struct lmb *lmb, phys_addr_t base, phys_size_t size)
{
c7e222cc:	e1a04000 	mov	r4, r0
	struct lmb_region *rgn = &(lmb->reserved);
	phys_addr_t rgnbegin, rgnend;
	phys_addr_t end = base + size;
c7e222d0:	e0826001 	add	r6, r2, r1

	return lmb_add_region(_rgn, base, size);
}

long lmb_free(struct lmb *lmb, phys_addr_t base, phys_size_t size)
{
c7e222d4:	e1a07001 	mov	r7, r1
c7e222d8:	e1a0a002 	mov	sl, r2
	int i;

	rgnbegin = rgnend = 0; /* supress gcc warnings */

	/* Find the region where (base, size) belongs to */
	for (i=0; i < rgn->cnt; i++) {
c7e222dc:	e5900050 	ldr	r0, [r0, #80]
c7e222e0:	e1a02004 	mov	r2, r4
c7e222e4:	e1a0500c 	mov	r5, ip
c7e222e8:	e1a0100c 	mov	r1, ip
c7e222ec:	ea000007 	b	c7e22310 <lmb_free+0x4c>
		rgnbegin = rgn->region[i].base;
c7e222f0:	e592c058 	ldr	ip, [r2, #88]
		rgnend = rgnbegin + rgn->region[i].size;
c7e222f4:	e592305c 	ldr	r3, [r2, #92]
c7e222f8:	e2822008 	add	r2, r2, #8	; 0x8
c7e222fc:	e08c5003 	add	r5, ip, r3

		if ((rgnbegin <= base) && (end <= rgnend))
c7e22300:	e15c0007 	cmp	ip, r7
c7e22304:	91560005 	cmpls	r6, r5
c7e22308:	9a000002 	bls	c7e22318 <lmb_free+0x54>
	int i;

	rgnbegin = rgnend = 0; /* supress gcc warnings */

	/* Find the region where (base, size) belongs to */
	for (i=0; i < rgn->cnt; i++) {
c7e2230c:	e2811001 	add	r1, r1, #1	; 0x1
c7e22310:	e1510000 	cmp	r1, r0
c7e22314:	3afffff5 	bcc	c7e222f0 <lmb_free+0x2c>
		if ((rgnbegin <= base) && (end <= rgnend))
			break;
	}

	/* Didn't find the region */
	if (i == rgn->cnt)
c7e22318:	e1510000 	cmp	r1, r0
c7e2231c:	03e00000 	mvneq	r0, #0	; 0x0
c7e22320:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;

	/* Check to see if we are removing entire region */
	if ((rgnbegin == base) && (rgnend == end)) {
c7e22324:	e15c0007 	cmp	ip, r7
c7e22328:	13a00000 	movne	r0, #0	; 0x0
c7e2232c:	03a00001 	moveq	r0, #1	; 0x1
c7e22330:	e1550006 	cmp	r5, r6
c7e22334:	13a03000 	movne	r3, #0	; 0x0
c7e22338:	03a03001 	moveq	r3, #1	; 0x1
c7e2233c:	e0109003 	ands	r9, r0, r3
	return lmb_add_region(_rgn, base, size);
}

long lmb_free(struct lmb *lmb, phys_addr_t base, phys_size_t size)
{
	struct lmb_region *rgn = &(lmb->reserved);
c7e22340:	e284c050 	add	ip, r4, #80	; 0x50
	/* Didn't find the region */
	if (i == rgn->cnt)
		return -1;

	/* Check to see if we are removing entire region */
	if ((rgnbegin == base) && (rgnend == end)) {
c7e22344:	0a000003 	beq	c7e22358 <lmb_free+0x94>
		lmb_remove_region(rgn, i);
c7e22348:	e1a0000c 	mov	r0, ip
c7e2234c:	ebffff4f 	bl	c7e22090 <lmb_remove_region>
c7e22350:	e3a00000 	mov	r0, #0	; 0x0
c7e22354:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
	}

	/* Check to see if region is matching at the front */
	if (rgnbegin == base) {
c7e22358:	e3500000 	cmp	r0, #0	; 0x0
c7e2235c:	0a000007 	beq	c7e22380 <lmb_free+0xbc>
		rgn->region[i].base = end;
c7e22360:	e281300b 	add	r3, r1, #11	; 0xb
		rgn->region[i].size -= size;
c7e22364:	e0841183 	add	r1, r4, r3, lsl #3
c7e22368:	e5912004 	ldr	r2, [r1, #4]
		return 0;
	}

	/* Check to see if region is matching at the front */
	if (rgnbegin == base) {
		rgn->region[i].base = end;
c7e2236c:	e7846183 	str	r6, [r4, r3, lsl #3]
		rgn->region[i].size -= size;
c7e22370:	e06a2002 	rsb	r2, sl, r2
c7e22374:	e5812004 	str	r2, [r1, #4]
c7e22378:	e1a00009 	mov	r0, r9
c7e2237c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
	}

	/* Check to see if the region is matching at the end */
	if (rgnend == end) {
c7e22380:	e3530000 	cmp	r3, #0	; 0x0
c7e22384:	e281200b 	add	r2, r1, #11	; 0xb
c7e22388:	0a000004 	beq	c7e223a0 <lmb_free+0xdc>
		rgn->region[i].size -= size;
c7e2238c:	e0842182 	add	r2, r4, r2, lsl #3
c7e22390:	e5923004 	ldr	r3, [r2, #4]
c7e22394:	e06a3003 	rsb	r3, sl, r3
c7e22398:	e5823004 	str	r3, [r2, #4]
c7e2239c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

	/*
	 * We need to split the entry -  adjust the current one to the
	 * beginging of the hole and add the region after hole.
	 */
	rgn->region[i].size = base - rgn->region[i].base;
c7e223a0:	e7943182 	ldr	r3, [r4, r2, lsl #3]
c7e223a4:	e0842182 	add	r2, r4, r2, lsl #3
c7e223a8:	e0633007 	rsb	r3, r3, r7
c7e223ac:	e5823004 	str	r3, [r2, #4]
	return lmb_add_region(rgn, end, rgnend - end);
c7e223b0:	e1a01006 	mov	r1, r6
c7e223b4:	e1a0000c 	mov	r0, ip
c7e223b8:	e0662005 	rsb	r2, r6, r5
}
c7e223bc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	/*
	 * We need to split the entry -  adjust the current one to the
	 * beginging of the hole and add the region after hole.
	 */
	rgn->region[i].size = base - rgn->region[i].base;
	return lmb_add_region(rgn, end, rgnend - end);
c7e223c0:	eaffff4b 	b	c7e220f4 <lmb_add_region>

c7e223c4 <lmb_reserve>:

long lmb_reserve(struct lmb *lmb, phys_addr_t base, phys_size_t size)
{
	struct lmb_region *_rgn = &(lmb->reserved);

	return lmb_add_region(_rgn, base, size);
c7e223c4:	e2800050 	add	r0, r0, #80	; 0x50
c7e223c8:	eaffff49 	b	c7e220f4 <lmb_add_region>

c7e223cc <lmb_overlaps_region>:
}

long lmb_overlaps_region(struct lmb_region *rgn, phys_addr_t base,
				phys_size_t size)
{
c7e223cc:	e92d4070 	push	{r4, r5, r6, lr}
	unsigned long i;

	for (i=0; i < rgn->cnt; i++) {
c7e223d0:	e1a0c000 	mov	ip, r0
c7e223d4:	e5905000 	ldr	r5, [r0]
	return lmb_add_region(_rgn, base, size);
}

long lmb_overlaps_region(struct lmb_region *rgn, phys_addr_t base,
				phys_size_t size)
{
c7e223d8:	e1a04001 	mov	r4, r1
c7e223dc:	e1a06002 	mov	r6, r2
	unsigned long i;

	for (i=0; i < rgn->cnt; i++) {
c7e223e0:	e3a00000 	mov	r0, #0	; 0x0
c7e223e4:	ea000008 	b	c7e2240c <lmb_overlaps_region+0x40>
		phys_addr_t rgnbase = rgn->region[i].base;
c7e223e8:	e59c2008 	ldr	r2, [ip, #8]
}

static long lmb_addrs_overlap(phys_addr_t base1,
		phys_size_t size1, phys_addr_t base2, phys_size_t size2)
{
	return ((base1 < (base2+size2)) && (base2 < (base1+size1)));
c7e223ec:	e59c300c 	ldr	r3, [ip, #12]
long lmb_overlaps_region(struct lmb_region *rgn, phys_addr_t base,
				phys_size_t size)
{
	unsigned long i;

	for (i=0; i < rgn->cnt; i++) {
c7e223f0:	e28cc008 	add	ip, ip, #8	; 0x8
}

static long lmb_addrs_overlap(phys_addr_t base1,
		phys_size_t size1, phys_addr_t base2, phys_size_t size2)
{
	return ((base1 < (base2+size2)) && (base2 < (base1+size1)));
c7e223f4:	e0823003 	add	r3, r2, r3
c7e223f8:	e1540003 	cmp	r4, r3
c7e223fc:	2a000007 	bcs	c7e22420 <lmb_overlaps_region+0x54>
c7e22400:	e1520001 	cmp	r2, r1
c7e22404:	2a000005 	bcs	c7e22420 <lmb_overlaps_region+0x54>
c7e22408:	e8bd8070 	pop	{r4, r5, r6, pc}
long lmb_overlaps_region(struct lmb_region *rgn, phys_addr_t base,
				phys_size_t size)
{
	unsigned long i;

	for (i=0; i < rgn->cnt; i++) {
c7e2240c:	e1500005 	cmp	r0, r5
}

static long lmb_addrs_overlap(phys_addr_t base1,
		phys_size_t size1, phys_addr_t base2, phys_size_t size2)
{
	return ((base1 < (base2+size2)) && (base2 < (base1+size1)));
c7e22410:	e0861004 	add	r1, r6, r4
long lmb_overlaps_region(struct lmb_region *rgn, phys_addr_t base,
				phys_size_t size)
{
	unsigned long i;

	for (i=0; i < rgn->cnt; i++) {
c7e22414:	3afffff3 	bcc	c7e223e8 <lmb_overlaps_region+0x1c>
c7e22418:	e3e00000 	mvn	r0, #0	; 0x0
			break;
		}
	}

	return (i < rgn->cnt) ? i : -1;
}
c7e2241c:	e8bd8070 	pop	{r4, r5, r6, pc}
long lmb_overlaps_region(struct lmb_region *rgn, phys_addr_t base,
				phys_size_t size)
{
	unsigned long i;

	for (i=0; i < rgn->cnt; i++) {
c7e22420:	e2800001 	add	r0, r0, #1	; 0x1
c7e22424:	eafffff8 	b	c7e2240c <lmb_overlaps_region+0x40>

c7e22428 <lmb_align_down>:

	return alloc;
}

static phys_addr_t lmb_align_down(phys_addr_t addr, phys_size_t size)
{
c7e22428:	e2611000 	rsb	r1, r1, #0	; 0x0
	return addr & ~(size - 1);
}
c7e2242c:	e0010000 	and	r0, r1, r0
c7e22430:	e12fff1e 	bx	lr

c7e22434 <__lmb_alloc_base>:
{
	return (addr + (size - 1)) & ~(size - 1);
}

phys_addr_t __lmb_alloc_base(struct lmb *lmb, phys_size_t size, ulong align, phys_addr_t max_addr)
{
c7e22434:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	long i, j;
	phys_addr_t base = 0;
	phys_addr_t res_base;

	for (i = lmb->memory.cnt-1; i >= 0; i--) {
c7e22438:	e1a09000 	mov	r9, r0
{
	return (addr + (size - 1)) & ~(size - 1);
}

phys_addr_t __lmb_alloc_base(struct lmb *lmb, phys_size_t size, ulong align, phys_addr_t max_addr)
{
c7e2243c:	e58d0004 	str	r0, [sp, #4]
	long i, j;
	phys_addr_t base = 0;
	phys_addr_t res_base;

	for (i = lmb->memory.cnt-1; i >= 0; i--) {
c7e22440:	e4990050 	ldr	r0, [r9], #80
{
	return (addr + (size - 1)) & ~(size - 1);
}

phys_addr_t __lmb_alloc_base(struct lmb *lmb, phys_size_t size, ulong align, phys_addr_t max_addr)
{
c7e22444:	e1a07002 	mov	r7, r2
			base = lmb_align_down(base - size, align);
		} else
			continue;

		while (base && lmbbase <= base) {
			j = lmb_overlaps_region(&lmb->reserved, base, size);
c7e22448:	e59d2004 	ldr	r2, [sp, #4]
{
	return (addr + (size - 1)) & ~(size - 1);
}

phys_addr_t __lmb_alloc_base(struct lmb *lmb, phys_size_t size, ulong align, phys_addr_t max_addr)
{
c7e2244c:	e1a05001 	mov	r5, r1
			base = lmb_align_down(base - size, align);
		} else
			continue;

		while (base && lmbbase <= base) {
			j = lmb_overlaps_region(&lmb->reserved, base, size);
c7e22450:	e2801001 	add	r1, r0, #1	; 0x1
{
	return (addr + (size - 1)) & ~(size - 1);
}

phys_addr_t __lmb_alloc_base(struct lmb *lmb, phys_size_t size, ulong align, phys_addr_t max_addr)
{
c7e22454:	e58d3000 	str	r3, [sp]
			base = lmb_align_down(base - size, align);
		} else
			continue;

		while (base && lmbbase <= base) {
			j = lmb_overlaps_region(&lmb->reserved, base, size);
c7e22458:	e082a181 	add	sl, r2, r1, lsl #3
{
	long i, j;
	phys_addr_t base = 0;
	phys_addr_t res_base;

	for (i = lmb->memory.cnt-1; i >= 0; i--) {
c7e2245c:	e240b001 	sub	fp, r0, #1	; 0x1
c7e22460:	ea000032 	b	c7e22530 <__lmb_alloc_base+0xfc>
		phys_addr_t lmbbase = lmb->memory.region[i].base;
		phys_size_t lmbsize = lmb->memory.region[i].size;
c7e22464:	e51a0004 	ldr	r0, [sl, #-4]
	long i, j;
	phys_addr_t base = 0;
	phys_addr_t res_base;

	for (i = lmb->memory.cnt-1; i >= 0; i--) {
		phys_addr_t lmbbase = lmb->memory.region[i].base;
c7e22468:	e51a6008 	ldr	r6, [sl, #-8]
		phys_size_t lmbsize = lmb->memory.region[i].size;

		if (lmbsize < size)
c7e2246c:	e1500005 	cmp	r0, r5
c7e22470:	3a00002c 	bcc	c7e22528 <__lmb_alloc_base+0xf4>
			continue;
		if (max_addr == LMB_ALLOC_ANYWHERE)
c7e22474:	e59d3000 	ldr	r3, [sp]
c7e22478:	e3530000 	cmp	r3, #0	; 0x0
			base = lmb_align_down(lmbbase + lmbsize - size, align);
c7e2247c:	00800006 	addeq	r0, r0, r6
c7e22480:	00650000 	rsbeq	r0, r5, r0
		phys_addr_t lmbbase = lmb->memory.region[i].base;
		phys_size_t lmbsize = lmb->memory.region[i].size;

		if (lmbsize < size)
			continue;
		if (max_addr == LMB_ALLOC_ANYWHERE)
c7e22484:	0a000006 	beq	c7e224a4 <__lmb_alloc_base+0x70>
			base = lmb_align_down(lmbbase + lmbsize - size, align);
		else if (lmbbase < max_addr) {
c7e22488:	e59d2000 	ldr	r2, [sp]
c7e2248c:	e1560002 	cmp	r6, r2
c7e22490:	2a000024 	bcs	c7e22528 <__lmb_alloc_base+0xf4>
			base = min(lmbbase + lmbsize, max_addr);
c7e22494:	e0800006 	add	r0, r0, r6
			base = lmb_align_down(base - size, align);
c7e22498:	e1520000 	cmp	r2, r0
c7e2249c:	90650002 	rsbls	r0, r5, r2
c7e224a0:	80650000 	rsbhi	r0, r5, r0
c7e224a4:	e1a01007 	mov	r1, r7
c7e224a8:	ea000013 	b	c7e224fc <__lmb_alloc_base+0xc8>
		} else
			continue;

		while (base && lmbbase <= base) {
			j = lmb_overlaps_region(&lmb->reserved, base, size);
c7e224ac:	ebffffc6 	bl	c7e223cc <lmb_overlaps_region>
			if (j < 0) {
c7e224b0:	e3500000 	cmp	r0, #0	; 0x0
				return base;
			}
			res_base = lmb->reserved.region[j].base;
			if (res_base < size)
				break;
			base = lmb_align_down(res_base - size, align);
c7e224b4:	e1a01007 	mov	r1, r7
							lmb_align_up(size,
								align)) < 0)
					return 0;
				return base;
			}
			res_base = lmb->reserved.region[j].base;
c7e224b8:	e280000b 	add	r0, r0, #11	; 0xb
		} else
			continue;

		while (base && lmbbase <= base) {
			j = lmb_overlaps_region(&lmb->reserved, base, size);
			if (j < 0) {
c7e224bc:	aa000009 	bge	c7e224e8 <__lmb_alloc_base+0xb4>
				/* This area isn't reserved, take it */
				if (lmb_add_region(&lmb->reserved, base,
c7e224c0:	e2452001 	sub	r2, r5, #1	; 0x1
c7e224c4:	e2673000 	rsb	r3, r7, #0	; 0x0
c7e224c8:	e0822007 	add	r2, r2, r7
c7e224cc:	e0032002 	and	r2, r3, r2
c7e224d0:	e1a00009 	mov	r0, r9
c7e224d4:	e1a01004 	mov	r1, r4
c7e224d8:	ebffff05 	bl	c7e220f4 <lmb_add_region>
c7e224dc:	e3500000 	cmp	r0, #0	; 0x0
c7e224e0:	aa000015 	bge	c7e2253c <__lmb_alloc_base+0x108>
c7e224e4:	ea000013 	b	c7e22538 <__lmb_alloc_base+0x104>
							lmb_align_up(size,
								align)) < 0)
					return 0;
				return base;
			}
			res_base = lmb->reserved.region[j].base;
c7e224e8:	e59d2004 	ldr	r2, [sp, #4]
c7e224ec:	e7923180 	ldr	r3, [r2, r0, lsl #3]
			if (res_base < size)
c7e224f0:	e1530005 	cmp	r3, r5
				break;
			base = lmb_align_down(res_base - size, align);
c7e224f4:	e0650003 	rsb	r0, r5, r3
								align)) < 0)
					return 0;
				return base;
			}
			res_base = lmb->reserved.region[j].base;
			if (res_base < size)
c7e224f8:	3a00000a 	bcc	c7e22528 <__lmb_alloc_base+0xf4>
				break;
			base = lmb_align_down(res_base - size, align);
c7e224fc:	ebffffc9 	bl	c7e22428 <lmb_align_down>
c7e22500:	e1a04000 	mov	r4, r0
			base = min(lmbbase + lmbsize, max_addr);
			base = lmb_align_down(base - size, align);
		} else
			continue;

		while (base && lmbbase <= base) {
c7e22504:	e2543000 	subs	r3, r4, #0	; 0x0
c7e22508:	13a03001 	movne	r3, #1	; 0x1
c7e2250c:	e1560004 	cmp	r6, r4
c7e22510:	83a03000 	movhi	r3, #0	; 0x0
c7e22514:	e3530000 	cmp	r3, #0	; 0x0
			j = lmb_overlaps_region(&lmb->reserved, base, size);
c7e22518:	e1a01000 	mov	r1, r0
c7e2251c:	e1a02005 	mov	r2, r5
c7e22520:	e1a00009 	mov	r0, r9
			base = min(lmbbase + lmbsize, max_addr);
			base = lmb_align_down(base - size, align);
		} else
			continue;

		while (base && lmbbase <= base) {
c7e22524:	1affffe0 	bne	c7e224ac <__lmb_alloc_base+0x78>
{
	long i, j;
	phys_addr_t base = 0;
	phys_addr_t res_base;

	for (i = lmb->memory.cnt-1; i >= 0; i--) {
c7e22528:	e24bb001 	sub	fp, fp, #1	; 0x1
c7e2252c:	e24aa008 	sub	sl, sl, #8	; 0x8
c7e22530:	e35b0000 	cmp	fp, #0	; 0x0
c7e22534:	aaffffca 	bge	c7e22464 <__lmb_alloc_base+0x30>
c7e22538:	e3a04000 	mov	r4, #0	; 0x0
				break;
			base = lmb_align_down(res_base - size, align);
		}
	}
	return 0;
}
c7e2253c:	e1a00004 	mov	r0, r4
c7e22540:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}

c7e22544 <lmb_is_reserved>:

int lmb_is_reserved(struct lmb *lmb, phys_addr_t addr)
{
c7e22544:	e92d4010 	push	{r4, lr}
	int i;

	for (i = 0; i < lmb->reserved.cnt; i++) {
c7e22548:	e1a0c000 	mov	ip, r0
c7e2254c:	e5904050 	ldr	r4, [r0, #80]
c7e22550:	e3a00000 	mov	r0, #0	; 0x0
c7e22554:	ea00000d 	b	c7e22590 <lmb_is_reserved+0x4c>
		phys_addr_t upper = lmb->reserved.region[i].base +
			lmb->reserved.region[i].size - 1;
c7e22558:	e59c3058 	ldr	r3, [ip, #88]
		if ((addr >= lmb->reserved.region[i].base) && (addr <= upper))
c7e2255c:	e59c205c 	ldr	r2, [ip, #92]
c7e22560:	e28cc008 	add	ip, ip, #8	; 0x8
c7e22564:	e0832002 	add	r2, r3, r2
c7e22568:	e2422001 	sub	r2, r2, #1	; 0x1
c7e2256c:	e1510003 	cmp	r1, r3
c7e22570:	33a03000 	movcc	r3, #0	; 0x0
c7e22574:	23a03001 	movcs	r3, #1	; 0x1
c7e22578:	e1510002 	cmp	r1, r2
c7e2257c:	83a03000 	movhi	r3, #0	; 0x0
c7e22580:	e3530000 	cmp	r3, #0	; 0x0
c7e22584:	0a000001 	beq	c7e22590 <lmb_is_reserved+0x4c>
c7e22588:	e3a00001 	mov	r0, #1	; 0x1
c7e2258c:	e8bd8010 	pop	{r4, pc}

int lmb_is_reserved(struct lmb *lmb, phys_addr_t addr)
{
	int i;

	for (i = 0; i < lmb->reserved.cnt; i++) {
c7e22590:	e1500004 	cmp	r0, r4
c7e22594:	e2800001 	add	r0, r0, #1	; 0x1
c7e22598:	3affffee 	bcc	c7e22558 <lmb_is_reserved+0x14>
c7e2259c:	e3a00000 	mov	r0, #0	; 0x0
			lmb->reserved.region[i].size - 1;
		if ((addr >= lmb->reserved.region[i].base) && (addr <= upper))
			return 1;
	}
	return 0;
}
c7e225a0:	e8bd8010 	pop	{r4, pc}

c7e225a4 <__board_lmb_reserve>:

void __board_lmb_reserve(struct lmb *lmb)
{
	/* please define platform specific board_lmb_reserve() */
}
c7e225a4:	e12fff1e 	bx	lr

c7e225a8 <__arch_lmb_reserve>:
void board_lmb_reserve(struct lmb *lmb) __attribute__((weak, alias("__board_lmb_reserve")));

void __arch_lmb_reserve(struct lmb *lmb)
{
	/* please define platform specific arch_lmb_reserve() */
}
c7e225a8:	e12fff1e 	bx	lr

c7e225ac <lmb_alloc_base>:
{
	return lmb_alloc_base(lmb, size, align, LMB_ALLOC_ANYWHERE);
}

phys_addr_t lmb_alloc_base(struct lmb *lmb, phys_size_t size, ulong align, phys_addr_t max_addr)
{
c7e225ac:	e92d4070 	push	{r4, r5, r6, lr}
c7e225b0:	e1a04001 	mov	r4, r1
c7e225b4:	e1a05003 	mov	r5, r3
	phys_addr_t alloc;

	alloc = __lmb_alloc_base(lmb, size, align, max_addr);
c7e225b8:	ebffff9d 	bl	c7e22434 <__lmb_alloc_base>

	if (alloc == 0)
c7e225bc:	e2506000 	subs	r6, r0, #0	; 0x0
c7e225c0:	1a000003 	bne	c7e225d4 <lmb_alloc_base+0x28>
		printf("ERROR: Failed to allocate 0x%lx bytes below 0x%lx.\n",
c7e225c4:	e1a01004 	mov	r1, r4
c7e225c8:	e1a02005 	mov	r2, r5
c7e225cc:	e59f0008 	ldr	r0, [pc, #8]	; c7e225dc <lmb_alloc_base+0x30>
c7e225d0:	ebff9920 	bl	c7e08a58 <printf>
		      (ulong)size, (ulong)max_addr);

	return alloc;
}
c7e225d4:	e1a00006 	mov	r0, r6
c7e225d8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e225dc:	c7e347fc 	.word	0xc7e347fc

c7e225e0 <lmb_alloc>:
	return (i < rgn->cnt) ? i : -1;
}

phys_addr_t lmb_alloc(struct lmb *lmb, phys_size_t size, ulong align)
{
	return lmb_alloc_base(lmb, size, align, LMB_ALLOC_ANYWHERE);
c7e225e0:	e3a03000 	mov	r3, #0	; 0x0
c7e225e4:	eafffff0 	b	c7e225ac <lmb_alloc_base>

c7e225e8 <string_to_ip>:
 */

#include <common.h>

IPaddr_t string_to_ip(const char *s)
{
c7e225e8:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
	IPaddr_t addr;
	char *e;
	int i;

	if (s == NULL)
c7e225ec:	e2504000 	subs	r4, r0, #0	; 0x0
c7e225f0:	01a00004 	moveq	r0, r4
c7e225f4:	0a000019 	beq	c7e22660 <string_to_ip+0x78>
c7e225f8:	e3a05000 	mov	r5, #0	; 0x0
c7e225fc:	e1a06005 	mov	r6, r5
		return(0);

	for (addr=0, i=0; i<4; ++i) {
		ulong val = s ? simple_strtoul(s, &e, 10) : 0;
c7e22600:	e3540000 	cmp	r4, #0	; 0x0
c7e22604:	e1a00004 	mov	r0, r4
c7e22608:	e28d1004 	add	r1, sp, #4	; 0x4
c7e2260c:	e3a0200a 	mov	r2, #10	; 0xa
c7e22610:	0a000000 	beq	c7e22618 <string_to_ip+0x30>
c7e22614:	eb000251 	bl	c7e22f60 <simple_strtoul>
		addr <<= 8;
		addr |= (val & 0xFF);
c7e22618:	e20030ff 	and	r3, r0, #255	; 0xff
		if (s) {
c7e2261c:	e3540000 	cmp	r4, #0	; 0x0
		return(0);

	for (addr=0, i=0; i<4; ++i) {
		ulong val = s ? simple_strtoul(s, &e, 10) : 0;
		addr <<= 8;
		addr |= (val & 0xFF);
c7e22620:	e1835405 	orr	r5, r3, r5, lsl #8
		if (s) {
c7e22624:	0a000004 	beq	c7e2263c <string_to_ip+0x54>
			s = (*e) ? e+1 : e;
c7e22628:	e59d2004 	ldr	r2, [sp, #4]
c7e2262c:	e5d23000 	ldrb	r3, [r2]
c7e22630:	e2824001 	add	r4, r2, #1	; 0x1
c7e22634:	e3530000 	cmp	r3, #0	; 0x0
c7e22638:	01a04002 	moveq	r4, r2
	int i;

	if (s == NULL)
		return(0);

	for (addr=0, i=0; i<4; ++i) {
c7e2263c:	e2866001 	add	r6, r6, #1	; 0x1
c7e22640:	e3560004 	cmp	r6, #4	; 0x4
c7e22644:	1affffed 	bne	c7e22600 <string_to_ip+0x18>
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
	return __arch__swab32(x);
c7e22648:	e1a03c05 	lsl	r3, r5, #24
c7e2264c:	e2052cff 	and	r2, r5, #65280	; 0xff00
c7e22650:	e1833c25 	orr	r3, r3, r5, lsr #24
c7e22654:	e1833402 	orr	r3, r3, r2, lsl #8
c7e22658:	e20528ff 	and	r2, r5, #16711680	; 0xff0000
c7e2265c:	e1830422 	orr	r0, r3, r2, lsr #8
			s = (*e) ? e+1 : e;
		}
	}

	return (htonl(addr));
}
c7e22660:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}

c7e22664 <qsort>:

void qsort(void  *base,
	   size_t nel,
	   size_t width,
	   int (*comp)(const void *, const void *))
{
c7e22664:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
	size_t wgap, i, j, k;
	char tmp;

	if ((nel > 1) && (width > 0)) {
c7e22668:	e3520000 	cmp	r2, #0	; 0x0
c7e2266c:	13510001 	cmpne	r1, #1	; 0x1

void qsort(void  *base,
	   size_t nel,
	   size_t width,
	   int (*comp)(const void *, const void *))
{
c7e22670:	e24dd018 	sub	sp, sp, #24	; 0x18
c7e22674:	e1a05001 	mov	r5, r1
	size_t wgap, i, j, k;
	char tmp;

	if ((nel > 1) && (width > 0)) {
c7e22678:	e1a04002 	mov	r4, r2

void qsort(void  *base,
	   size_t nel,
	   size_t width,
	   int (*comp)(const void *, const void *))
{
c7e2267c:	e58d0008 	str	r0, [sp, #8]
c7e22680:	e58d3004 	str	r3, [sp, #4]
	size_t wgap, i, j, k;
	char tmp;

	if ((nel > 1) && (width > 0)) {
c7e22684:	9a000039 	bls	c7e22770 <qsort+0x10c>
		assert(nel <= ((size_t)(-1)) / width); /* check for overflow */
		wgap = 0;
		do {
			wgap = 3 * wgap + 1;
		} while (wgap < (nel-1)/3);
c7e22688:	e2410001 	sub	r0, r1, #1	; 0x1
c7e2268c:	e3a01003 	mov	r1, #3	; 0x3
c7e22690:	eb001f9c 	bl	c7e2a508 <__udivsi3>
c7e22694:	e3a02000 	mov	r2, #0	; 0x0

	if ((nel > 1) && (width > 0)) {
		assert(nel <= ((size_t)(-1)) / width); /* check for overflow */
		wgap = 0;
		do {
			wgap = 3 * wgap + 1;
c7e22698:	e3a03003 	mov	r3, #3	; 0x3
c7e2269c:	e0030392 	mul	r3, r2, r3
c7e226a0:	e2832001 	add	r2, r3, #1	; 0x1
		} while (wgap < (nel-1)/3);
c7e226a4:	e1520000 	cmp	r2, r0
c7e226a8:	3afffffa 	bcc	c7e22698 <qsort+0x34>
		/* From the above, we know that either wgap == 1 < nel or */
		/* ((wgap-1)/3 < (int) ((nel-1)/3) <= (nel-1)/3 ==> wgap <  nel. */
		wgap *= width;			/* So this can not overflow if wnel doesn't. */
		nel *= width;			/* Convert nel to 'wnel' */
c7e226ac:	e0050594 	mul	r5, r4, r5
		do {
			wgap = 3 * wgap + 1;
		} while (wgap < (nel-1)/3);
		/* From the above, we know that either wgap == 1 < nel or */
		/* ((wgap-1)/3 < (int) ((nel-1)/3) <= (nel-1)/3 ==> wgap <  nel. */
		wgap *= width;			/* So this can not overflow if wnel doesn't. */
c7e226b0:	e00a0294 	mul	sl, r4, r2
		nel *= width;			/* Convert nel to 'wnel' */
c7e226b4:	e58d5010 	str	r5, [sp, #16]
c7e226b8:	e59d3008 	ldr	r3, [sp, #8]
c7e226bc:	e08a2004 	add	r2, sl, r4
c7e226c0:	e083300a 	add	r3, r3, sl
c7e226c4:	e58d200c 	str	r2, [sp, #12]
c7e226c8:	e58d3014 	str	r3, [sp, #20]
c7e226cc:	e3a0b000 	mov	fp, #0	; 0x0
c7e226d0:	e59d2008 	ldr	r2, [sp, #8]
c7e226d4:	e59d5014 	ldr	r5, [sp, #20]
c7e226d8:	e26a9000 	rsb	r9, sl, #0	; 0x0
c7e226dc:	e082600b 	add	r6, r2, fp
c7e226e0:	e1a0700b 	mov	r7, fp
					register char *b;

					j -= wgap;
					a = j + ((char *)base);
					b = a + wgap;
					if ((*comp)(a, b) <= 0) {
c7e226e4:	e1a00006 	mov	r0, r6
c7e226e8:	e1a01005 	mov	r1, r5
c7e226ec:	e59d3004 	ldr	r3, [sp, #4]
c7e226f0:	e12fff33 	blx	r3
c7e226f4:	e3500000 	cmp	r0, #0	; 0x0
c7e226f8:	da00000c 	ble	c7e22730 <qsort+0xcc>
						break;
c7e226fc:	e3a01000 	mov	r1, #0	; 0x0
					}
					k = width;
					do {
						tmp = *a;
c7e22700:	e7d62001 	ldrb	r2, [r6, r1]
						*a++ = *b;
c7e22704:	e7d53001 	ldrb	r3, [r5, r1]
c7e22708:	e7c63001 	strb	r3, [r6, r1]
						*b++ = tmp;
c7e2270c:	e7c52001 	strb	r2, [r5, r1]
c7e22710:	e2811001 	add	r1, r1, #1	; 0x1
					} while (--k);
c7e22714:	e1540001 	cmp	r4, r1
c7e22718:	1afffff8 	bne	c7e22700 <qsort+0x9c>
c7e2271c:	e0877009 	add	r7, r7, r9
				} while (j >= wgap);
c7e22720:	e177000a 	cmn	r7, sl
					k = width;
					do {
						tmp = *a;
						*a++ = *b;
						*b++ = tmp;
					} while (--k);
c7e22724:	e0866009 	add	r6, r6, r9
c7e22728:	e0855009 	add	r5, r5, r9
				} while (j >= wgap);
c7e2272c:	3affffec 	bcc	c7e226e4 <qsort+0x80>
c7e22730:	e59d200c 	ldr	r2, [sp, #12]
c7e22734:	e08bb004 	add	fp, fp, r4
c7e22738:	e0822004 	add	r2, r2, r4
				i += width;
			} while (i < nel);
c7e2273c:	e0643002 	rsb	r3, r4, r2
					do {
						tmp = *a;
						*a++ = *b;
						*b++ = tmp;
					} while (--k);
				} while (j >= wgap);
c7e22740:	e58d200c 	str	r2, [sp, #12]
				i += width;
			} while (i < nel);
c7e22744:	e59d2010 	ldr	r2, [sp, #16]
c7e22748:	e1530002 	cmp	r3, r2
					do {
						tmp = *a;
						*a++ = *b;
						*b++ = tmp;
					} while (--k);
				} while (j >= wgap);
c7e2274c:	e59d3014 	ldr	r3, [sp, #20]
c7e22750:	e0833004 	add	r3, r3, r4
c7e22754:	e58d3014 	str	r3, [sp, #20]
				i += width;
			} while (i < nel);
c7e22758:	3affffdc 	bcc	c7e226d0 <qsort+0x6c>
			wgap = (wgap - width)/3;
c7e2275c:	e064000a 	rsb	r0, r4, sl
c7e22760:	e3a01003 	mov	r1, #3	; 0x3
c7e22764:	eb001f67 	bl	c7e2a508 <__udivsi3>
		} while (wgap);
c7e22768:	e250a000 	subs	sl, r0, #0	; 0x0
c7e2276c:	1affffd1 	bne	c7e226b8 <qsort+0x54>
	}
}
c7e22770:	e28dd018 	add	sp, sp, #24	; 0x18
c7e22774:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e22778 <strcmp_compar>:

int strcmp_compar(const void *p1, const void *p2)
{
	return strcmp(*(const char **)p1, *(const char **)p2);
c7e22778:	e5900000 	ldr	r0, [r0]
c7e2277c:	e5911000 	ldr	r1, [r1]
c7e22780:	ea000036 	b	c7e22860 <strcmp>

c7e22784 <strcpy>:
 * strcpy - Copy a %NUL terminated string
 * @dest: Where to copy the string to
 * @src: Where to copy the string from
 */
char * strcpy(char * dest,const char *src)
{
c7e22784:	e3a02000 	mov	r2, #0	; 0x0
	char *tmp = dest;

	while ((*dest++ = *src++) != '\0')
c7e22788:	e7d13002 	ldrb	r3, [r1, r2]
c7e2278c:	e3530000 	cmp	r3, #0	; 0x0
c7e22790:	e7c03002 	strb	r3, [r0, r2]
c7e22794:	e2822001 	add	r2, r2, #1	; 0x1
c7e22798:	1afffffa 	bne	c7e22788 <strcpy+0x4>
		/* nothing */;
	return tmp;
}
c7e2279c:	e12fff1e 	bx	lr

c7e227a0 <strncpy>:
 * Note that unlike userspace strncpy, this does not %NUL-pad the buffer.
 * However, the result is not %NUL-terminated if the source exceeds
 * @count bytes.
 */
char * strncpy(char * dest,const char *src,size_t count)
{
c7e227a0:	e3a0c000 	mov	ip, #0	; 0x0
	char *tmp = dest;

	while (count-- && (*dest++ = *src++) != '\0')
c7e227a4:	e3520000 	cmp	r2, #0	; 0x0
c7e227a8:	e2422001 	sub	r2, r2, #1	; 0x1
c7e227ac:	012fff1e 	bxeq	lr
c7e227b0:	e7d1300c 	ldrb	r3, [r1, ip]
c7e227b4:	e3530000 	cmp	r3, #0	; 0x0
c7e227b8:	e7c0300c 	strb	r3, [r0, ip]
c7e227bc:	e28cc001 	add	ip, ip, #1	; 0x1
c7e227c0:	1afffff7 	bne	c7e227a4 <strncpy+0x4>
		/* nothing */;

	return tmp;
}
c7e227c4:	e12fff1e 	bx	lr

c7e227c8 <strcat>:
 * strcat - Append one %NUL-terminated string to another
 * @dest: The string to be appended to
 * @src: The string to append to it
 */
char * strcat(char * dest, const char * src)
{
c7e227c8:	e1a0c000 	mov	ip, r0
c7e227cc:	ea000000 	b	c7e227d4 <strcat+0xc>
	char *tmp = dest;

	while (*dest)
		dest++;
c7e227d0:	e28cc001 	add	ip, ip, #1	; 0x1
 */
char * strcat(char * dest, const char * src)
{
	char *tmp = dest;

	while (*dest)
c7e227d4:	e5dc3000 	ldrb	r3, [ip]
c7e227d8:	e3530000 	cmp	r3, #0	; 0x0
c7e227dc:	1afffffb 	bne	c7e227d0 <strcat+0x8>
c7e227e0:	e1a02003 	mov	r2, r3
		dest++;
	while ((*dest++ = *src++) != '\0')
c7e227e4:	e7d13002 	ldrb	r3, [r1, r2]
c7e227e8:	e3530000 	cmp	r3, #0	; 0x0
c7e227ec:	e7cc3002 	strb	r3, [ip, r2]
c7e227f0:	e2822001 	add	r2, r2, #1	; 0x1
c7e227f4:	1afffffa 	bne	c7e227e4 <strcat+0x1c>
		;

	return tmp;
}
c7e227f8:	e12fff1e 	bx	lr

c7e227fc <strncat>:
 *
 * Note that in contrast to strncpy, strncat ensures the result is
 * terminated.
 */
char * strncat(char *dest, const char *src, size_t count)
{
c7e227fc:	e92d4030 	push	{r4, r5, lr}
	char *tmp = dest;

	if (count) {
c7e22800:	e2525000 	subs	r5, r2, #0	; 0x0
 *
 * Note that in contrast to strncpy, strncat ensures the result is
 * terminated.
 */
char * strncat(char *dest, const char *src, size_t count)
{
c7e22804:	e1a04001 	mov	r4, r1
	char *tmp = dest;

	if (count) {
c7e22808:	11a0c000 	movne	ip, r0
c7e2280c:	1a000001 	bne	c7e22818 <strncat+0x1c>
c7e22810:	e8bd8030 	pop	{r4, r5, pc}
		while (*dest)
			dest++;
c7e22814:	e28cc001 	add	ip, ip, #1	; 0x1
char * strncat(char *dest, const char *src, size_t count)
{
	char *tmp = dest;

	if (count) {
		while (*dest)
c7e22818:	e5dc3000 	ldrb	r3, [ip]
c7e2281c:	e3530000 	cmp	r3, #0	; 0x0
c7e22820:	1afffffb 	bne	c7e22814 <strncat+0x18>
c7e22824:	ea000004 	b	c7e2283c <strncat+0x40>
			dest++;
		while ((*dest++ = *src++)) {
			if (--count == 0) {
c7e22828:	e1550002 	cmp	r5, r2
c7e2282c:	1a000004 	bne	c7e22844 <strncat+0x48>
				*dest = '\0';
c7e22830:	e3a03000 	mov	r3, #0	; 0x0
c7e22834:	e5cc3000 	strb	r3, [ip]
c7e22838:	e8bd8030 	pop	{r4, r5, pc}
				break;
c7e2283c:	e1a02003 	mov	r2, r3
c7e22840:	e1a0100c 	mov	r1, ip
	char *tmp = dest;

	if (count) {
		while (*dest)
			dest++;
		while ((*dest++ = *src++)) {
c7e22844:	e7d43002 	ldrb	r3, [r4, r2]
c7e22848:	e28cc001 	add	ip, ip, #1	; 0x1
c7e2284c:	e3530000 	cmp	r3, #0	; 0x0
c7e22850:	e7c13002 	strb	r3, [r1, r2]
c7e22854:	e2822001 	add	r2, r2, #1	; 0x1
c7e22858:	1afffff2 	bne	c7e22828 <strncat+0x2c>
			}
		}
	}

	return tmp;
}
c7e2285c:	e8bd8030 	pop	{r4, r5, pc}

c7e22860 <strcmp>:
 * strcmp - Compare two strings
 * @cs: One string
 * @ct: Another string
 */
int strcmp(const char * cs,const char * ct)
{
c7e22860:	e92d4010 	push	{r4, lr}
c7e22864:	e3a02000 	mov	r2, #0	; 0x0
c7e22868:	e1a04000 	mov	r4, r0
	register signed char __res;

	while (1) {
		if ((__res = *cs - *ct++) != 0 || !*cs++)
c7e2286c:	e7d4c002 	ldrb	ip, [r4, r2]
c7e22870:	e7d13002 	ldrb	r3, [r1, r2]
c7e22874:	e2822001 	add	r2, r2, #1	; 0x1
c7e22878:	e063300c 	rsb	r3, r3, ip
c7e2287c:	e21300ff 	ands	r0, r3, #255	; 0xff
c7e22880:	1a000001 	bne	c7e2288c <strcmp+0x2c>
c7e22884:	e35c0000 	cmp	ip, #0	; 0x0
c7e22888:	1afffff7 	bne	c7e2286c <strcmp+0xc>
c7e2288c:	e1a00c00 	lsl	r0, r0, #24
			break;
	}

	return __res;
}
c7e22890:	e1a00c40 	asr	r0, r0, #24
c7e22894:	e8bd8010 	pop	{r4, pc}

c7e22898 <strncmp>:
 * @cs: One string
 * @ct: Another string
 * @count: The maximum number of bytes to compare
 */
int strncmp(const char * cs,const char * ct,size_t count)
{
c7e22898:	e92d4030 	push	{r4, r5, lr}
c7e2289c:	e3a0c000 	mov	ip, #0	; 0x0
c7e228a0:	e1a05000 	mov	r5, r0
c7e228a4:	e1a04001 	mov	r4, r1
c7e228a8:	ea000008 	b	c7e228d0 <strncmp+0x38>
	register signed char __res = 0;

	while (count) {
		if ((__res = *cs - *ct++) != 0 || !*cs++)
c7e228ac:	e7d5100c 	ldrb	r1, [r5, ip]
c7e228b0:	e7d4300c 	ldrb	r3, [r4, ip]
			break;
		count--;
c7e228b4:	e2422001 	sub	r2, r2, #1	; 0x1
int strncmp(const char * cs,const char * ct,size_t count)
{
	register signed char __res = 0;

	while (count) {
		if ((__res = *cs - *ct++) != 0 || !*cs++)
c7e228b8:	e0633001 	rsb	r3, r3, r1
c7e228bc:	e21300ff 	ands	r0, r3, #255	; 0xff
c7e228c0:	e28cc001 	add	ip, ip, #1	; 0x1
c7e228c4:	1a000004 	bne	c7e228dc <strncmp+0x44>
c7e228c8:	e3510000 	cmp	r1, #0	; 0x0
c7e228cc:	0a000002 	beq	c7e228dc <strncmp+0x44>
 */
int strncmp(const char * cs,const char * ct,size_t count)
{
	register signed char __res = 0;

	while (count) {
c7e228d0:	e3520000 	cmp	r2, #0	; 0x0
c7e228d4:	1afffff4 	bne	c7e228ac <strncmp+0x14>
c7e228d8:	e1a00002 	mov	r0, r2
c7e228dc:	e1a00c00 	lsl	r0, r0, #24
			break;
		count--;
	}

	return __res;
}
c7e228e0:	e1a00c40 	asr	r0, r0, #24
c7e228e4:	e8bd8030 	pop	{r4, r5, pc}

c7e228e8 <strchr>:
 * strchr - Find the first occurrence of a character in a string
 * @s: The string to be searched
 * @c: The character to search for
 */
char * strchr(const char * s, int c)
{
c7e228e8:	e1a02000 	mov	r2, r0
c7e228ec:	ea000002 	b	c7e228fc <strchr+0x14>
	for(; *s != (char) c; ++s)
		if (*s == '\0')
c7e228f0:	e3500000 	cmp	r0, #0	; 0x0
c7e228f4:	012fff1e 	bxeq	lr
 * @s: The string to be searched
 * @c: The character to search for
 */
char * strchr(const char * s, int c)
{
	for(; *s != (char) c; ++s)
c7e228f8:	e2822001 	add	r2, r2, #1	; 0x1
c7e228fc:	e5d20000 	ldrb	r0, [r2]
c7e22900:	e20130ff 	and	r3, r1, #255	; 0xff
c7e22904:	e1500003 	cmp	r0, r3
c7e22908:	1afffff8 	bne	c7e228f0 <strchr+0x8>
		if (*s == '\0')
			return NULL;
	return (char *) s;
c7e2290c:	e1a00002 	mov	r0, r2
}
c7e22910:	e12fff1e 	bx	lr

c7e22914 <skip_spaces>:
 * @str: The string to be stripped.
 *
 * Returns a pointer to the first non-whitespace character in @str.
 */
char *skip_spaces(const char *str)
{
c7e22914:	ea000000 	b	c7e2291c <skip_spaces+0x8>
	while (isspace(*str))
		++str;
c7e22918:	e2800001 	add	r0, r0, #1	; 0x1
 *
 * Returns a pointer to the first non-whitespace character in @str.
 */
char *skip_spaces(const char *str)
{
	while (isspace(*str))
c7e2291c:	e5d03000 	ldrb	r3, [r0]
c7e22920:	e59f200c 	ldr	r2, [pc, #12]	; c7e22934 <skip_spaces+0x20>
c7e22924:	e7d23003 	ldrb	r3, [r2, r3]
c7e22928:	e3130020 	tst	r3, #32	; 0x20
c7e2292c:	1afffff9 	bne	c7e22918 <skip_spaces+0x4>
		++str;
	return (char *)str;
}
c7e22930:	e12fff1e 	bx	lr
c7e22934:	c7e2d144 	.word	0xc7e2d144

c7e22938 <strlen>:
/**
 * strlen - Find the length of a string
 * @s: The string to be sized
 */
size_t strlen(const char * s)
{
c7e22938:	e1a02000 	mov	r2, r0
c7e2293c:	ea000000 	b	c7e22944 <strlen+0xc>
	const char *sc;

	for (sc = s; *sc != '\0'; ++sc)
c7e22940:	e2800001 	add	r0, r0, #1	; 0x1
c7e22944:	e5d03000 	ldrb	r3, [r0]
c7e22948:	e3530000 	cmp	r3, #0	; 0x0
c7e2294c:	1afffffb 	bne	c7e22940 <strlen+0x8>
		/* nothing */;
	return sc - s;
}
c7e22950:	e0620000 	rsb	r0, r2, r0
c7e22954:	e12fff1e 	bx	lr

c7e22958 <strim>:
 * Note that the first trailing whitespace is replaced with a %NUL-terminator
 * in the given string @s. Returns a pointer to the first non-whitespace
 * character in @s.
 */
char *strim(char *s)
{
c7e22958:	e92d4010 	push	{r4, lr}
	size_t size;
	char *end;

	s = skip_spaces(s);
c7e2295c:	ebffffec 	bl	c7e22914 <skip_spaces>
c7e22960:	e1a04000 	mov	r4, r0
	size = strlen(s);
c7e22964:	ebfffff3 	bl	c7e22938 <strlen>
	if (!size)
c7e22968:	e3500000 	cmp	r0, #0	; 0x0
		return s;

	end = s + size - 1;
c7e2296c:	12403001 	subne	r3, r0, #1	; 0x1
c7e22970:	10840003 	addne	r0, r4, r3
	size_t size;
	char *end;

	s = skip_spaces(s);
	size = strlen(s);
	if (!size)
c7e22974:	1a000001 	bne	c7e22980 <strim+0x28>
c7e22978:	ea000009 	b	c7e229a4 <strim+0x4c>
		return s;

	end = s + size - 1;
	while (end >= s && isspace(*end))
		end--;
c7e2297c:	e2400001 	sub	r0, r0, #1	; 0x1
	size = strlen(s);
	if (!size)
		return s;

	end = s + size - 1;
	while (end >= s && isspace(*end))
c7e22980:	e1500004 	cmp	r0, r4
c7e22984:	3a000004 	bcc	c7e2299c <strim+0x44>
c7e22988:	e5d03000 	ldrb	r3, [r0]
c7e2298c:	e59f2018 	ldr	r2, [pc, #24]	; c7e229ac <strim+0x54>
c7e22990:	e7d23003 	ldrb	r3, [r2, r3]
c7e22994:	e3130020 	tst	r3, #32	; 0x20
c7e22998:	1afffff7 	bne	c7e2297c <strim+0x24>
		end--;
	*(end + 1) = '\0';
c7e2299c:	e3a03000 	mov	r3, #0	; 0x0
c7e229a0:	e5c03001 	strb	r3, [r0, #1]

	return s;
}
c7e229a4:	e1a00004 	mov	r0, r4
c7e229a8:	e8bd8010 	pop	{r4, pc}
c7e229ac:	c7e2d144 	.word	0xc7e2d144

c7e229b0 <strrchr>:
 * strrchr - Find the last occurrence of a character in a string
 * @s: The string to be searched
 * @c: The character to search for
 */
char * strrchr(const char * s, int c)
{
c7e229b0:	e92d4070 	push	{r4, r5, r6, lr}
c7e229b4:	e1a04000 	mov	r4, r0
c7e229b8:	e1a05001 	mov	r5, r1
       const char *p = s + strlen(s);
c7e229bc:	ebffffdd 	bl	c7e22938 <strlen>
c7e229c0:	e0840000 	add	r0, r4, r0
       do {
	   if (*p == (char)c)
c7e229c4:	e5d02000 	ldrb	r2, [r0]
c7e229c8:	e20530ff 	and	r3, r5, #255	; 0xff
c7e229cc:	e1520003 	cmp	r2, r3
c7e229d0:	08bd8070 	popeq	{r4, r5, r6, pc}
	       return (char *)p;
       } while (--p >= s);
c7e229d4:	e2400001 	sub	r0, r0, #1	; 0x1
c7e229d8:	e1500004 	cmp	r0, r4
c7e229dc:	2afffff8 	bcs	c7e229c4 <strrchr+0x14>
c7e229e0:	e3a00000 	mov	r0, #0	; 0x0
       return NULL;
}
c7e229e4:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e229e8 <strnlen>:
 * strnlen - Find the length of a length-limited string
 * @s: The string to be sized
 * @count: The maximum number of bytes to search
 */
size_t strnlen(const char * s, size_t count)
{
c7e229e8:	e3a02000 	mov	r2, #0	; 0x0
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c7e229ec:	e1510002 	cmp	r1, r2
 * strnlen - Find the length of a length-limited string
 * @s: The string to be sized
 * @count: The maximum number of bytes to search
 */
size_t strnlen(const char * s, size_t count)
{
c7e229f0:	e080c002 	add	ip, r0, r2
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c7e229f4:	0a000003 	beq	c7e22a08 <strnlen+0x20>
c7e229f8:	e7d03002 	ldrb	r3, [r0, r2]
c7e229fc:	e2822001 	add	r2, r2, #1	; 0x1
c7e22a00:	e3530000 	cmp	r3, #0	; 0x0
c7e22a04:	1afffff8 	bne	c7e229ec <strnlen+0x4>
		/* nothing */;
	return sc - s;
}
c7e22a08:	e060000c 	rsb	r0, r0, ip
c7e22a0c:	e12fff1e 	bx	lr

c7e22a10 <strspn>:
 *	contain letters in @accept
 * @s: The string to be searched
 * @accept: The string to search for
 */
size_t strspn(const char *s, const char *accept)
{
c7e22a10:	e92d4010 	push	{r4, lr}
c7e22a14:	e1a04000 	mov	r4, r0
c7e22a18:	e3a00000 	mov	r0, #0	; 0x0
c7e22a1c:	ea000007 	b	c7e22a40 <strspn+0x30>
	const char *a;
	size_t count = 0;

	for (p = s; *p != '\0'; ++p) {
		for (a = accept; *a != '\0'; ++a) {
			if (*p == *a)
c7e22a20:	e15c0002 	cmp	ip, r2
c7e22a24:	0a000004 	beq	c7e22a3c <strspn+0x2c>
	const char *p;
	const char *a;
	size_t count = 0;

	for (p = s; *p != '\0'; ++p) {
		for (a = accept; *a != '\0'; ++a) {
c7e22a28:	e7d12003 	ldrb	r2, [r1, r3]
{
	const char *p;
	const char *a;
	size_t count = 0;

	for (p = s; *p != '\0'; ++p) {
c7e22a2c:	e2833001 	add	r3, r3, #1	; 0x1
		for (a = accept; *a != '\0'; ++a) {
c7e22a30:	e3520000 	cmp	r2, #0	; 0x0
c7e22a34:	1afffff9 	bne	c7e22a20 <strspn+0x10>
c7e22a38:	e8bd8010 	pop	{r4, pc}
			if (*p == *a)
				break;
		}
		if (*a == '\0')
			return count;
		++count;
c7e22a3c:	e2800001 	add	r0, r0, #1	; 0x1
{
	const char *p;
	const char *a;
	size_t count = 0;

	for (p = s; *p != '\0'; ++p) {
c7e22a40:	e7d4c000 	ldrb	ip, [r4, r0]
c7e22a44:	e35c0000 	cmp	ip, #0	; 0x0
c7e22a48:	08bd8010 	popeq	{r4, pc}
c7e22a4c:	e3a03000 	mov	r3, #0	; 0x0
c7e22a50:	eafffff4 	b	c7e22a28 <strspn+0x18>

c7e22a54 <strpbrk>:
 * strpbrk - Find the first occurrence of a set of characters
 * @cs: The string to be searched
 * @ct: The characters to search for
 */
char * strpbrk(const char * cs,const char * ct)
{
c7e22a54:	e1a02000 	mov	r2, r0
c7e22a58:	ea000009 	b	c7e22a84 <strpbrk+0x30>
	const char *sc1,*sc2;

	for( sc1 = cs; *sc1 != '\0'; ++sc1) {
		for( sc2 = ct; *sc2 != '\0'; ++sc2) {
			if (*sc1 == *sc2)
c7e22a5c:	e150000c 	cmp	r0, ip
c7e22a60:	1a000002 	bne	c7e22a70 <strpbrk+0x1c>
				return (char *) sc1;
c7e22a64:	e1a00002 	mov	r0, r2
c7e22a68:	e12fff1e 	bx	lr
c7e22a6c:	e3a03000 	mov	r3, #0	; 0x0
char * strpbrk(const char * cs,const char * ct)
{
	const char *sc1,*sc2;

	for( sc1 = cs; *sc1 != '\0'; ++sc1) {
		for( sc2 = ct; *sc2 != '\0'; ++sc2) {
c7e22a70:	e7d1c003 	ldrb	ip, [r1, r3]
 */
char * strpbrk(const char * cs,const char * ct)
{
	const char *sc1,*sc2;

	for( sc1 = cs; *sc1 != '\0'; ++sc1) {
c7e22a74:	e2833001 	add	r3, r3, #1	; 0x1
		for( sc2 = ct; *sc2 != '\0'; ++sc2) {
c7e22a78:	e35c0000 	cmp	ip, #0	; 0x0
c7e22a7c:	1afffff6 	bne	c7e22a5c <strpbrk+0x8>
 */
char * strpbrk(const char * cs,const char * ct)
{
	const char *sc1,*sc2;

	for( sc1 = cs; *sc1 != '\0'; ++sc1) {
c7e22a80:	e2822001 	add	r2, r2, #1	; 0x1
c7e22a84:	e5d20000 	ldrb	r0, [r2]
c7e22a88:	e3500000 	cmp	r0, #0	; 0x0
c7e22a8c:	1afffff6 	bne	c7e22a6c <strpbrk+0x18>
			if (*sc1 == *sc2)
				return (char *) sc1;
		}
	}
	return NULL;
}
c7e22a90:	e12fff1e 	bx	lr

c7e22a94 <strtok>:
 */
char * strtok(char * s,const char * ct)
{
	char *sbegin, *send;

	sbegin  = s ? s : ___strtok;
c7e22a94:	e3500000 	cmp	r0, #0	; 0x0
 * @ct: The characters to search for
 *
 * WARNING: strtok is deprecated, use strsep instead.
 */
char * strtok(char * s,const char * ct)
{
c7e22a98:	e92d4070 	push	{r4, r5, r6, lr}
c7e22a9c:	e1a05001 	mov	r5, r1
	char *sbegin, *send;

	sbegin  = s ? s : ___strtok;
c7e22aa0:	11a04000 	movne	r4, r0
c7e22aa4:	1a000003 	bne	c7e22ab8 <strtok+0x24>
c7e22aa8:	e59f3060 	ldr	r3, [pc, #96]	; c7e22b10 <strtok+0x7c>
c7e22aac:	e5934000 	ldr	r4, [r3]
	if (!sbegin) {
c7e22ab0:	e3540000 	cmp	r4, #0	; 0x0
c7e22ab4:	0a000013 	beq	c7e22b08 <strtok+0x74>
		return NULL;
	}
	sbegin += strspn(sbegin,ct);
c7e22ab8:	e1a00004 	mov	r0, r4
c7e22abc:	e1a01005 	mov	r1, r5
c7e22ac0:	ebffffd2 	bl	c7e22a10 <strspn>
	if (*sbegin == '\0') {
c7e22ac4:	e7f42000 	ldrb	r2, [r4, r0]!
c7e22ac8:	e3520000 	cmp	r2, #0	; 0x0
		___strtok = NULL;
c7e22acc:	059f303c 	ldreq	r3, [pc, #60]	; c7e22b10 <strtok+0x7c>
c7e22ad0:	01a04002 	moveq	r4, r2
c7e22ad4:	05832000 	streq	r2, [r3]
c7e22ad8:	0a00000a 	beq	c7e22b08 <strtok+0x74>
		return( NULL );
	}
	send = strpbrk( sbegin, ct);
c7e22adc:	e1a01005 	mov	r1, r5
c7e22ae0:	e1a00004 	mov	r0, r4
c7e22ae4:	ebffffda 	bl	c7e22a54 <strpbrk>
	if (send && *send != '\0')
c7e22ae8:	e3500000 	cmp	r0, #0	; 0x0
c7e22aec:	0a000003 	beq	c7e22b00 <strtok+0x6c>
c7e22af0:	e5d03000 	ldrb	r3, [r0]
c7e22af4:	e3530000 	cmp	r3, #0	; 0x0
		*send++ = '\0';
c7e22af8:	13a03000 	movne	r3, #0	; 0x0
c7e22afc:	14c03001 	strbne	r3, [r0], #1
	___strtok = send;
c7e22b00:	e59f3008 	ldr	r3, [pc, #8]	; c7e22b10 <strtok+0x7c>
c7e22b04:	e5830000 	str	r0, [r3]
	return (sbegin);
}
c7e22b08:	e1a00004 	mov	r0, r4
c7e22b0c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e22b10:	c7e72304 	.word	0xc7e72304

c7e22b14 <strsep>:
 * It returns empty tokens, too, behaving exactly like the libc function
 * of that name. In fact, it was stolen from glibc2 and de-fancy-fied.
 * Same semantics, slimmer shape. ;)
 */
char * strsep(char **s, const char *ct)
{
c7e22b14:	e92d4070 	push	{r4, r5, r6, lr}
	char *sbegin = *s, *end;
c7e22b18:	e5904000 	ldr	r4, [r0]
 * It returns empty tokens, too, behaving exactly like the libc function
 * of that name. In fact, it was stolen from glibc2 and de-fancy-fied.
 * Same semantics, slimmer shape. ;)
 */
char * strsep(char **s, const char *ct)
{
c7e22b1c:	e1a05000 	mov	r5, r0
	char *sbegin = *s, *end;

	if (sbegin == NULL)
c7e22b20:	e3540000 	cmp	r4, #0	; 0x0
c7e22b24:	0a000005 	beq	c7e22b40 <strsep+0x2c>
		return NULL;

	end = strpbrk(sbegin, ct);
c7e22b28:	e1a00004 	mov	r0, r4
c7e22b2c:	ebffffc8 	bl	c7e22a54 <strpbrk>
	if (end)
c7e22b30:	e3500000 	cmp	r0, #0	; 0x0
		*end++ = '\0';
c7e22b34:	13a03000 	movne	r3, #0	; 0x0
c7e22b38:	14c03001 	strbne	r3, [r0], #1
	*s = end;
c7e22b3c:	e5850000 	str	r0, [r5]

	return sbegin;
}
c7e22b40:	e1a00004 	mov	r0, r4
c7e22b44:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e22b48 <strswab>:
 */
char *strswab(const char *s)
{
	char *p, *q;

	if ((NULL == s) || ('\0' == *s)) {
c7e22b48:	e3500000 	cmp	r0, #0	; 0x0
c7e22b4c:	0a00000e 	beq	c7e22b8c <strswab+0x44>
c7e22b50:	e5d03000 	ldrb	r3, [r0]
c7e22b54:	e3530000 	cmp	r3, #0	; 0x0
		return (NULL);
	}

	for (p=(char *)s, q=p+1; (*p != '\0') && (*q != '\0'); p+=2, q+=2) {
c7e22b58:	11a03000 	movne	r3, r0
 */
char *strswab(const char *s)
{
	char *p, *q;

	if ((NULL == s) || ('\0' == *s)) {
c7e22b5c:	1a000002 	bne	c7e22b6c <strswab+0x24>
c7e22b60:	ea000009 	b	c7e22b8c <strswab+0x44>

	for (p=(char *)s, q=p+1; (*p != '\0') && (*q != '\0'); p+=2, q+=2) {
		char  tmp;

		tmp = *p;
		*p  = *q;
c7e22b64:	e5432002 	strb	r2, [r3, #-2]
		*q  = tmp;
c7e22b68:	e5431001 	strb	r1, [r3, #-1]

	if ((NULL == s) || ('\0' == *s)) {
		return (NULL);
	}

	for (p=(char *)s, q=p+1; (*p != '\0') && (*q != '\0'); p+=2, q+=2) {
c7e22b6c:	e5d31000 	ldrb	r1, [r3]
c7e22b70:	e3510000 	cmp	r1, #0	; 0x0
c7e22b74:	012fff1e 	bxeq	lr
c7e22b78:	e5d32001 	ldrb	r2, [r3, #1]
c7e22b7c:	e2833002 	add	r3, r3, #2	; 0x2
c7e22b80:	e3520000 	cmp	r2, #0	; 0x0
c7e22b84:	1afffff6 	bne	c7e22b64 <strswab+0x1c>
c7e22b88:	e12fff1e 	bx	lr
c7e22b8c:	e3a00000 	mov	r0, #0	; 0x0
		*p  = *q;
		*q  = tmp;
	}

	return (char *) s;
}
c7e22b90:	e12fff1e 	bx	lr

c7e22b94 <memset>:
	unsigned long cl = 0;
	char *s8;
	int i;

	/* do it one word at a time (32 bits or 64 bits) while possible */
	if ( ((ulong)s & (sizeof(*sl) - 1)) == 0) {
c7e22b94:	e2103003 	ands	r3, r0, #3	; 0x3
 * @count: The size of the area.
 *
 * Do not use memset() to access IO space, use memset_io() instead.
 */
void * memset(void * s,int c,size_t count)
{
c7e22b98:	e92d4010 	push	{r4, lr}
	unsigned long *sl = (unsigned long *) s;
c7e22b9c:	e1a0c000 	mov	ip, r0
 * @count: The size of the area.
 *
 * Do not use memset() to access IO space, use memset_io() instead.
 */
void * memset(void * s,int c,size_t count)
{
c7e22ba0:	e1a04001 	mov	r4, r1
	unsigned long cl = 0;
	char *s8;
	int i;

	/* do it one word at a time (32 bits or 64 bits) while possible */
	if ( ((ulong)s & (sizeof(*sl) - 1)) == 0) {
c7e22ba4:	1a000011 	bne	c7e22bf0 <memset+0x5c>
c7e22ba8:	e1a01003 	mov	r1, r3
c7e22bac:	e1a0c003 	mov	ip, r3
		for (i = 0; i < sizeof(*sl); i++) {
c7e22bb0:	e28cc001 	add	ip, ip, #1	; 0x1
			cl <<= 8;
			cl |= c & 0xff;
c7e22bb4:	e20430ff 	and	r3, r4, #255	; 0xff
	char *s8;
	int i;

	/* do it one word at a time (32 bits or 64 bits) while possible */
	if ( ((ulong)s & (sizeof(*sl) - 1)) == 0) {
		for (i = 0; i < sizeof(*sl); i++) {
c7e22bb8:	e35c0004 	cmp	ip, #4	; 0x4
			cl <<= 8;
			cl |= c & 0xff;
c7e22bbc:	e1831401 	orr	r1, r3, r1, lsl #8
	char *s8;
	int i;

	/* do it one word at a time (32 bits or 64 bits) while possible */
	if ( ((ulong)s & (sizeof(*sl) - 1)) == 0) {
		for (i = 0; i < sizeof(*sl); i++) {
c7e22bc0:	1afffffa 	bne	c7e22bb0 <memset+0x1c>
c7e22bc4:	e1a0c002 	mov	ip, r2
c7e22bc8:	e3a03000 	mov	r3, #0	; 0x0
c7e22bcc:	ea000001 	b	c7e22bd8 <memset+0x44>
			cl <<= 8;
			cl |= c & 0xff;
		}
		while (count >= sizeof(*sl)) {
			*sl++ = cl;
c7e22bd0:	e7801003 	str	r1, [r0, r3]
			count -= sizeof(*sl);
c7e22bd4:	e2833004 	add	r3, r3, #4	; 0x4
	if ( ((ulong)s & (sizeof(*sl) - 1)) == 0) {
		for (i = 0; i < sizeof(*sl); i++) {
			cl <<= 8;
			cl |= c & 0xff;
		}
		while (count >= sizeof(*sl)) {
c7e22bd8:	e35c0003 	cmp	ip, #3	; 0x3
			*sl++ = cl;
			count -= sizeof(*sl);
c7e22bdc:	e24cc004 	sub	ip, ip, #4	; 0x4
	if ( ((ulong)s & (sizeof(*sl) - 1)) == 0) {
		for (i = 0; i < sizeof(*sl); i++) {
			cl <<= 8;
			cl |= c & 0xff;
		}
		while (count >= sizeof(*sl)) {
c7e22be0:	8afffffa 	bhi	c7e22bd0 <memset+0x3c>
c7e22be4:	e3c23003 	bic	r3, r2, #3	; 0x3
c7e22be8:	e080c003 	add	ip, r0, r3
c7e22bec:	e2022003 	and	r2, r2, #3	; 0x3
c7e22bf0:	e3a03000 	mov	r3, #0	; 0x0
c7e22bf4:	ea000001 	b	c7e22c00 <memset+0x6c>
		}
	}
	/* fill 8 bits at a time */
	s8 = (char *)sl;
	while (count--)
		*s8++ = c;
c7e22bf8:	e7cc4003 	strb	r4, [ip, r3]
c7e22bfc:	e2833001 	add	r3, r3, #1	; 0x1
			count -= sizeof(*sl);
		}
	}
	/* fill 8 bits at a time */
	s8 = (char *)sl;
	while (count--)
c7e22c00:	e3520000 	cmp	r2, #0	; 0x0
		*s8++ = c;
c7e22c04:	e2422001 	sub	r2, r2, #1	; 0x1
			count -= sizeof(*sl);
		}
	}
	/* fill 8 bits at a time */
	s8 = (char *)sl;
	while (count--)
c7e22c08:	1afffffa 	bne	c7e22bf8 <memset+0x64>
		*s8++ = c;

	return s;
}
c7e22c0c:	e8bd8010 	pop	{r4, pc}

c7e22c10 <bcopy>:
 *
 * You should not use this function to access IO space, use memcpy_toio()
 * or memcpy_fromio() instead.
 */
char * bcopy(const char * src, char * dest, int count)
{
c7e22c10:	e92d4010 	push	{r4, lr}
c7e22c14:	e3a0c000 	mov	ip, #0	; 0x0
c7e22c18:	e1a04000 	mov	r4, r0
c7e22c1c:	e1a00001 	mov	r0, r1
c7e22c20:	ea000002 	b	c7e22c30 <bcopy+0x20>
	char *tmp = dest;

	while (count--)
		*tmp++ = *src++;
c7e22c24:	e7d4300c 	ldrb	r3, [r4, ip]
c7e22c28:	e7c0300c 	strb	r3, [r0, ip]
c7e22c2c:	e28cc001 	add	ip, ip, #1	; 0x1
 */
char * bcopy(const char * src, char * dest, int count)
{
	char *tmp = dest;

	while (count--)
c7e22c30:	e2522001 	subs	r2, r2, #1	; 0x1
c7e22c34:	2afffffa 	bcs	c7e22c24 <bcopy+0x14>
		*tmp++ = *src++;

	return dest;
}
c7e22c38:	e8bd8010 	pop	{r4, pc}

c7e22c3c <memcpy>:
void * memcpy(void *dest, const void *src, size_t count)
{
	unsigned long *dl = (unsigned long *)dest, *sl = (unsigned long *)src;
	char *d8, *s8;

	if (src == dest)
c7e22c3c:	e1510000 	cmp	r1, r0
 *
 * You should not use this function to access IO space, use memcpy_toio()
 * or memcpy_fromio() instead.
 */
void * memcpy(void *dest, const void *src, size_t count)
{
c7e22c40:	e92d4010 	push	{r4, lr}
c7e22c44:	e1a04000 	mov	r4, r0
c7e22c48:	e1a00002 	mov	r0, r2
	unsigned long *dl = (unsigned long *)dest, *sl = (unsigned long *)src;
	char *d8, *s8;

	if (src == dest)
c7e22c4c:	0a000019 	beq	c7e22cb8 <memcpy+0x7c>
		return dest;

	/* while all data is aligned (common case), copy a word at a time */
	if ( (((ulong)dest | (ulong)src) & (sizeof(*dl) - 1)) == 0) {
c7e22c50:	e1813004 	orr	r3, r1, r4
c7e22c54:	e2133003 	ands	r3, r3, #3	; 0x3
 * You should not use this function to access IO space, use memcpy_toio()
 * or memcpy_fromio() instead.
 */
void * memcpy(void *dest, const void *src, size_t count)
{
	unsigned long *dl = (unsigned long *)dest, *sl = (unsigned long *)src;
c7e22c58:	e1a0c004 	mov	ip, r4
c7e22c5c:	e1a02001 	mov	r2, r1

	if (src == dest)
		return dest;

	/* while all data is aligned (common case), copy a word at a time */
	if ( (((ulong)dest | (ulong)src) & (sizeof(*dl) - 1)) == 0) {
c7e22c60:	01a0c003 	moveq	ip, r3
c7e22c64:	01a02000 	moveq	r2, r0
c7e22c68:	0a000003 	beq	c7e22c7c <memcpy+0x40>
c7e22c6c:	ea000009 	b	c7e22c98 <memcpy+0x5c>
		while (count >= sizeof(*dl)) {
			*dl++ = *sl++;
c7e22c70:	e791300c 	ldr	r3, [r1, ip]
c7e22c74:	e784300c 	str	r3, [r4, ip]
			count -= sizeof(*dl);
c7e22c78:	e28cc004 	add	ip, ip, #4	; 0x4
	if (src == dest)
		return dest;

	/* while all data is aligned (common case), copy a word at a time */
	if ( (((ulong)dest | (ulong)src) & (sizeof(*dl) - 1)) == 0) {
		while (count >= sizeof(*dl)) {
c7e22c7c:	e3520003 	cmp	r2, #3	; 0x3
			*dl++ = *sl++;
			count -= sizeof(*dl);
c7e22c80:	e2422004 	sub	r2, r2, #4	; 0x4
	if (src == dest)
		return dest;

	/* while all data is aligned (common case), copy a word at a time */
	if ( (((ulong)dest | (ulong)src) & (sizeof(*dl) - 1)) == 0) {
		while (count >= sizeof(*dl)) {
c7e22c84:	8afffff9 	bhi	c7e22c70 <memcpy+0x34>
 *
 * You should not use this function to access IO space, use memcpy_toio()
 * or memcpy_fromio() instead.
 */
void * memcpy(void *dest, const void *src, size_t count)
{
c7e22c88:	e3c03003 	bic	r3, r0, #3	; 0x3
c7e22c8c:	e0812003 	add	r2, r1, r3
c7e22c90:	e084c003 	add	ip, r4, r3
c7e22c94:	e2000003 	and	r0, r0, #3	; 0x3
c7e22c98:	e3a01000 	mov	r1, #0	; 0x0
c7e22c9c:	ea000002 	b	c7e22cac <memcpy+0x70>
	}
	/* copy the reset one byte at a time */
	d8 = (char *)dl;
	s8 = (char *)sl;
	while (count--)
		*d8++ = *s8++;
c7e22ca0:	e7d23001 	ldrb	r3, [r2, r1]
c7e22ca4:	e7cc3001 	strb	r3, [ip, r1]
c7e22ca8:	e2811001 	add	r1, r1, #1	; 0x1
		}
	}
	/* copy the reset one byte at a time */
	d8 = (char *)dl;
	s8 = (char *)sl;
	while (count--)
c7e22cac:	e3500000 	cmp	r0, #0	; 0x0
		*d8++ = *s8++;
c7e22cb0:	e2400001 	sub	r0, r0, #1	; 0x1
		}
	}
	/* copy the reset one byte at a time */
	d8 = (char *)dl;
	s8 = (char *)sl;
	while (count--)
c7e22cb4:	1afffff9 	bne	c7e22ca0 <memcpy+0x64>
		*d8++ = *s8++;

	return dest;
}
c7e22cb8:	e1a00004 	mov	r0, r4
c7e22cbc:	e8bd8010 	pop	{r4, pc}

c7e22cc0 <memmove>:
 */
void * memmove(void * dest,const void *src,size_t count)
{
	char *tmp, *s;

	if (src == dest)
c7e22cc0:	e1510000 	cmp	r1, r0
 * @count: The size of the area.
 *
 * Unlike memcpy(), memmove() copes with overlapping areas.
 */
void * memmove(void * dest,const void *src,size_t count)
{
c7e22cc4:	e92d4010 	push	{r4, lr}
	char *tmp, *s;

	if (src == dest)
c7e22cc8:	08bd8010 	popeq	{r4, pc}
		return dest;

	if (dest <= src) {
c7e22ccc:	e1500001 	cmp	r0, r1
c7e22cd0:	93a0c000 	movls	ip, #0	; 0x0
c7e22cd4:	9a000003 	bls	c7e22ce8 <memmove+0x28>
c7e22cd8:	ea000006 	b	c7e22cf8 <memmove+0x38>
		tmp = (char *) dest;
		s = (char *) src;
		while (count--)
			*tmp++ = *s++;
c7e22cdc:	e7d1300c 	ldrb	r3, [r1, ip]
c7e22ce0:	e7c0300c 	strb	r3, [r0, ip]
c7e22ce4:	e28cc001 	add	ip, ip, #1	; 0x1
		return dest;

	if (dest <= src) {
		tmp = (char *) dest;
		s = (char *) src;
		while (count--)
c7e22ce8:	e3520000 	cmp	r2, #0	; 0x0
			*tmp++ = *s++;
c7e22cec:	e2422001 	sub	r2, r2, #1	; 0x1
		return dest;

	if (dest <= src) {
		tmp = (char *) dest;
		s = (char *) src;
		while (count--)
c7e22cf0:	1afffff9 	bne	c7e22cdc <memmove+0x1c>
c7e22cf4:	e8bd8010 	pop	{r4, pc}
			*tmp++ = *s++;
		}
	else {
		tmp = (char *) dest + count;
		s = (char *) src + count;
c7e22cf8:	e0814002 	add	r4, r1, r2
c7e22cfc:	e3a0c000 	mov	ip, #0	; 0x0
		s = (char *) src;
		while (count--)
			*tmp++ = *s++;
		}
	else {
		tmp = (char *) dest + count;
c7e22d00:	e0801002 	add	r1, r0, r2
c7e22d04:	ea000001 	b	c7e22d10 <memmove+0x50>
		s = (char *) src + count;
		while (count--)
			*--tmp = *--s;
c7e22d08:	e7d4300c 	ldrb	r3, [r4, ip]
c7e22d0c:	e7c1300c 	strb	r3, [r1, ip]
			*tmp++ = *s++;
		}
	else {
		tmp = (char *) dest + count;
		s = (char *) src + count;
		while (count--)
c7e22d10:	e3520000 	cmp	r2, #0	; 0x0
			*--tmp = *--s;
c7e22d14:	e24cc001 	sub	ip, ip, #1	; 0x1
c7e22d18:	e2422001 	sub	r2, r2, #1	; 0x1
			*tmp++ = *s++;
		}
	else {
		tmp = (char *) dest + count;
		s = (char *) src + count;
		while (count--)
c7e22d1c:	1afffff9 	bne	c7e22d08 <memmove+0x48>
			*--tmp = *--s;
		}

	return dest;
}
c7e22d20:	e8bd8010 	pop	{r4, pc}

c7e22d24 <memcmp>:
 * @cs: One area of memory
 * @ct: Another area of memory
 * @count: The size of the area.
 */
int memcmp(const void * cs,const void * ct,size_t count)
{
c7e22d24:	e92d4030 	push	{r4, r5, lr}
c7e22d28:	e3a0c000 	mov	ip, #0	; 0x0
c7e22d2c:	e1a04001 	mov	r4, r1
c7e22d30:	e1a05000 	mov	r5, r0
c7e22d34:	e1a01002 	mov	r1, r2
c7e22d38:	ea000005 	b	c7e22d54 <memcmp+0x30>
	const unsigned char *su1, *su2;
	int res = 0;

	for( su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
		if ((res = *su1 - *su2) != 0)
c7e22d3c:	e7d5200c 	ldrb	r2, [r5, ip]
c7e22d40:	e7d4300c 	ldrb	r3, [r4, ip]
c7e22d44:	e28cc001 	add	ip, ip, #1	; 0x1
c7e22d48:	e0520003 	subs	r0, r2, r3
c7e22d4c:	18bd8030 	popne	{r4, r5, pc}
int memcmp(const void * cs,const void * ct,size_t count)
{
	const unsigned char *su1, *su2;
	int res = 0;

	for( su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
c7e22d50:	e2411001 	sub	r1, r1, #1	; 0x1
c7e22d54:	e3510000 	cmp	r1, #0	; 0x0
c7e22d58:	1afffff7 	bne	c7e22d3c <memcmp+0x18>
c7e22d5c:	e1a00001 	mov	r0, r1
		if ((res = *su1 - *su2) != 0)
			break;
	return res;
}
c7e22d60:	e8bd8030 	pop	{r4, r5, pc}

c7e22d64 <memscan>:
 *
 * returns the address of the first occurrence of @c, or 1 byte past
 * the area if @c is not found
 */
void * memscan(void * addr, int c, size_t size)
{
c7e22d64:	e92d4010 	push	{r4, lr}
	unsigned char * p = (unsigned char *) addr;
c7e22d68:	e3a0c000 	mov	ip, #0	; 0x0
 *
 * returns the address of the first occurrence of @c, or 1 byte past
 * the area if @c is not found
 */
void * memscan(void * addr, int c, size_t size)
{
c7e22d6c:	e1a04000 	mov	r4, r0
c7e22d70:	ea000003 	b	c7e22d84 <memscan+0x20>
	unsigned char * p = (unsigned char *) addr;

	while (size) {
		if (*p == c)
c7e22d74:	e7d4300c 	ldrb	r3, [r4, ip]
c7e22d78:	e28cc001 	add	ip, ip, #1	; 0x1
c7e22d7c:	e1530001 	cmp	r3, r1
c7e22d80:	08bd8010 	popeq	{r4, pc}
 */
void * memscan(void * addr, int c, size_t size)
{
	unsigned char * p = (unsigned char *) addr;

	while (size) {
c7e22d84:	e152000c 	cmp	r2, ip
		if (*p == c)
c7e22d88:	e084000c 	add	r0, r4, ip
 */
void * memscan(void * addr, int c, size_t size)
{
	unsigned char * p = (unsigned char *) addr;

	while (size) {
c7e22d8c:	1afffff8 	bne	c7e22d74 <memscan+0x10>
			return (void *) p;
		p++;
		size--;
	}
	return (void *) p;
}
c7e22d90:	e8bd8010 	pop	{r4, pc}

c7e22d94 <strstr>:
 * strstr - Find the first substring in a %NUL terminated string
 * @s1: The string to be searched
 * @s2: The string to search for
 */
char * strstr(const char * s1,const char * s2)
{
c7e22d94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e22d98:	e1a04000 	mov	r4, r0
	int l1, l2;

	l2 = strlen(s2);
c7e22d9c:	e1a00001 	mov	r0, r1
 * strstr - Find the first substring in a %NUL terminated string
 * @s1: The string to be searched
 * @s2: The string to search for
 */
char * strstr(const char * s1,const char * s2)
{
c7e22da0:	e1a07001 	mov	r7, r1
	int l1, l2;

	l2 = strlen(s2);
c7e22da4:	ebfffee3 	bl	c7e22938 <strlen>
	if (!l2)
c7e22da8:	e2506000 	subs	r6, r0, #0	; 0x0
c7e22dac:	0a000006 	beq	c7e22dcc <strstr+0x38>
		return (char *) s1;
	l1 = strlen(s1);
c7e22db0:	e1a00004 	mov	r0, r4
c7e22db4:	ebfffedf 	bl	c7e22938 <strlen>
c7e22db8:	e1a05000 	mov	r5, r0
c7e22dbc:	ea000005 	b	c7e22dd8 <strstr+0x44>
	while (l1 >= l2) {
		l1--;
		if (!memcmp(s1,s2,l2))
c7e22dc0:	ebffffd7 	bl	c7e22d24 <memcmp>
c7e22dc4:	e3500000 	cmp	r0, #0	; 0x0
c7e22dc8:	1a000001 	bne	c7e22dd4 <strstr+0x40>
			return (char *) s1;
c7e22dcc:	e1a00004 	mov	r0, r4
c7e22dd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		s1++;
c7e22dd4:	e2844001 	add	r4, r4, #1	; 0x1

	l2 = strlen(s2);
	if (!l2)
		return (char *) s1;
	l1 = strlen(s1);
	while (l1 >= l2) {
c7e22dd8:	e1550006 	cmp	r5, r6
		l1--;
		if (!memcmp(s1,s2,l2))
c7e22ddc:	e1a00004 	mov	r0, r4
c7e22de0:	e1a01007 	mov	r1, r7
c7e22de4:	e1a02006 	mov	r2, r6
	l2 = strlen(s2);
	if (!l2)
		return (char *) s1;
	l1 = strlen(s1);
	while (l1 >= l2) {
		l1--;
c7e22de8:	e2455001 	sub	r5, r5, #1	; 0x1

	l2 = strlen(s2);
	if (!l2)
		return (char *) s1;
	l1 = strlen(s1);
	while (l1 >= l2) {
c7e22dec:	aafffff3 	bge	c7e22dc0 <strstr+0x2c>
c7e22df0:	e3a00000 	mov	r0, #0	; 0x0
		if (!memcmp(s1,s2,l2))
			return (char *) s1;
		s1++;
	}
	return NULL;
}
c7e22df4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

c7e22df8 <memchr>:
 *
 * returns the address of the first occurrence of @c, or %NULL
 * if @c is not found
 */
void *memchr(const void *s, int c, size_t n)
{
c7e22df8:	ea000005 	b	c7e22e14 <memchr+0x1c>
	const unsigned char *p = s;
	while (n-- != 0) {
		if ((unsigned char)c == *p++) {
c7e22dfc:	e4d03001 	ldrb	r3, [r0], #1
c7e22e00:	e2422001 	sub	r2, r2, #1	; 0x1
c7e22e04:	e15c0003 	cmp	ip, r3
c7e22e08:	1a000001 	bne	c7e22e14 <memchr+0x1c>
			return (void *)(p-1);
c7e22e0c:	e2400001 	sub	r0, r0, #1	; 0x1
c7e22e10:	e12fff1e 	bx	lr
 * if @c is not found
 */
void *memchr(const void *s, int c, size_t n)
{
	const unsigned char *p = s;
	while (n-- != 0) {
c7e22e14:	e3520000 	cmp	r2, #0	; 0x0
		if ((unsigned char)c == *p++) {
c7e22e18:	e201c0ff 	and	ip, r1, #255	; 0xff
 * if @c is not found
 */
void *memchr(const void *s, int c, size_t n)
{
	const unsigned char *p = s;
	while (n-- != 0) {
c7e22e1c:	1afffff6 	bne	c7e22dfc <memchr+0x4>
c7e22e20:	e1a00002 	mov	r0, r2
		if ((unsigned char)c == *p++) {
			return (void *)(p-1);
		}
	}
	return NULL;
}
c7e22e24:	e12fff1e 	bx	lr

c7e22e28 <strdup>:
}
#endif

#ifndef __HAVE_ARCH_STRDUP
char * strdup(const char *s)
{
c7e22e28:	e92d4070 	push	{r4, r5, r6, lr}
	char *new;

	if ((s == NULL)	||
c7e22e2c:	e2505000 	subs	r5, r0, #0	; 0x0
c7e22e30:	01a04005 	moveq	r4, r5
c7e22e34:	0a000006 	beq	c7e22e54 <strdup+0x2c>
c7e22e38:	ebfffebe 	bl	c7e22938 <strlen>
c7e22e3c:	e2800001 	add	r0, r0, #1	; 0x1
c7e22e40:	ebff98d5 	bl	c7e0919c <malloc>
c7e22e44:	e2504000 	subs	r4, r0, #0	; 0x0
c7e22e48:	0a000001 	beq	c7e22e54 <strdup+0x2c>
	    ((new = malloc (strlen(s) + 1)) == NULL) ) {
		return NULL;
	}

	strcpy (new, s);
c7e22e4c:	e1a01005 	mov	r1, r5
c7e22e50:	ebfffe4b 	bl	c7e22784 <strcpy>
	return new;
}
c7e22e54:	e1a00004 	mov	r0, r4
c7e22e58:	e8bd8070 	pop	{r4, r5, r6, pc}

c7e22e5c <strmhz>:
 * MA 02111-1307 USA
 */
#include <common.h>

char *strmhz (char *buf, unsigned long hz)
{
c7e22e5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	long l, n;
	long m;

	n = DIV_ROUND(hz, 1000) / 1000L;
c7e22e60:	e2815f7d 	add	r5, r1, #500	; 0x1f4
 * MA 02111-1307 USA
 */
#include <common.h>

char *strmhz (char *buf, unsigned long hz)
{
c7e22e64:	e1a06000 	mov	r6, r0
	long l, n;
	long m;

	n = DIV_ROUND(hz, 1000) / 1000L;
c7e22e68:	e59f1048 	ldr	r1, [pc, #72]	; c7e22eb8 <strmhz+0x5c>
c7e22e6c:	e1a00005 	mov	r0, r5
c7e22e70:	eb001da4 	bl	c7e2a508 <__udivsi3>
c7e22e74:	e1a04000 	mov	r4, r0
	l = sprintf (buf, "%ld", n);
c7e22e78:	e1a02004 	mov	r2, r4
c7e22e7c:	e59f1038 	ldr	r1, [pc, #56]	; c7e22ebc <strmhz+0x60>
c7e22e80:	e1a00006 	mov	r0, r6
c7e22e84:	eb0003e9 	bl	c7e23e30 <sprintf>

	hz -= n * 1000000L;
	m = DIV_ROUND(hz, 1000L);
c7e22e88:	e59f3030 	ldr	r3, [pc, #48]	; c7e22ec0 <strmhz+0x64>
{
	long l, n;
	long m;

	n = DIV_ROUND(hz, 1000) / 1000L;
	l = sprintf (buf, "%ld", n);
c7e22e8c:	e1a07000 	mov	r7, r0

	hz -= n * 1000000L;
	m = DIV_ROUND(hz, 1000L);
c7e22e90:	e3a01ffa 	mov	r1, #1000	; 0x3e8
c7e22e94:	e0205493 	mla	r0, r3, r4, r5
c7e22e98:	eb001d9a 	bl	c7e2a508 <__udivsi3>
	if (m != 0)
c7e22e9c:	e2502000 	subs	r2, r0, #0	; 0x0
c7e22ea0:	0a000002 	beq	c7e22eb0 <strmhz+0x54>
		sprintf (buf + l, ".%03ld", m);
c7e22ea4:	e0860007 	add	r0, r6, r7
c7e22ea8:	e59f1014 	ldr	r1, [pc, #20]	; c7e22ec4 <strmhz+0x68>
c7e22eac:	eb0003df 	bl	c7e23e30 <sprintf>
	return (buf);
}
c7e22eb0:	e1a00006 	mov	r0, r6
c7e22eb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e22eb8:	000f4240 	.word	0x000f4240
c7e22ebc:	c7e34694 	.word	0xc7e34694
c7e22ec0:	fff0bdc0 	.word	0xfff0bdc0
c7e22ec4:	c7e34830 	.word	0xc7e34830

c7e22ec8 <udelay>:
#endif

/* ------------------------------------------------------------------------- */

void udelay(unsigned long usec)
{
c7e22ec8:	e92d4070 	push	{r4, r5, r6, lr}
c7e22ecc:	e1a05000 	mov	r5, r0
	ulong kv;

	do {
		WATCHDOG_RESET();
		kv = usec > CONFIG_WD_PERIOD ? CONFIG_WD_PERIOD : usec;
c7e22ed0:	e59f4018 	ldr	r4, [pc, #24]	; c7e22ef0 <udelay+0x28>
c7e22ed4:	e1550004 	cmp	r5, r4
c7e22ed8:	31a04005 	movcc	r4, r5
		__udelay (kv);
c7e22edc:	e1a00004 	mov	r0, r4
c7e22ee0:	ebff76a0 	bl	c7e00968 <__udelay>
		usec -= kv;
	} while(usec);
c7e22ee4:	e0555004 	subs	r5, r5, r4
c7e22ee8:	1afffff8 	bne	c7e22ed0 <udelay+0x8>
}
c7e22eec:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e22ef0:	00989680 	.word	0x00989680

c7e22ef4 <mdelay>:

void mdelay(unsigned long msec)
{
c7e22ef4:	e92d4010 	push	{r4, lr}
c7e22ef8:	e1a04000 	mov	r4, r0
c7e22efc:	ea000000 	b	c7e22f04 <mdelay+0x10>
	while (msec--)
		udelay(1000);
c7e22f00:	ebfffff0 	bl	c7e22ec8 <udelay>
	} while(usec);
}

void mdelay(unsigned long msec)
{
	while (msec--)
c7e22f04:	e3540000 	cmp	r4, #0	; 0x0
		udelay(1000);
c7e22f08:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c7e22f0c:	e2444001 	sub	r4, r4, #1	; 0x1
	} while(usec);
}

void mdelay(unsigned long msec)
{
	while (msec--)
c7e22f10:	1afffffa 	bne	c7e22f00 <mdelay+0xc>
		udelay(1000);
}
c7e22f14:	e8bd8010 	pop	{r4, pc}

c7e22f18 <__toupper>:
	return c;
}

static inline unsigned char __toupper(unsigned char c)
{
	if (islower(c))
c7e22f18:	e59f3010 	ldr	r3, [pc, #16]	; c7e22f30 <__toupper+0x18>
c7e22f1c:	e7d33000 	ldrb	r3, [r3, r0]
c7e22f20:	e3130002 	tst	r3, #2	; 0x2
		c -= 'a'-'A';
c7e22f24:	12403020 	subne	r3, r0, #32	; 0x20
c7e22f28:	120300ff 	andne	r0, r3, #255	; 0xff
	return c;
}
c7e22f2c:	e12fff1e 	bx	lr
c7e22f30:	c7e2d144 	.word	0xc7e2d144

c7e22f34 <pack_hex_byte>:
#define hex_asc_lo(x)   hex_asc[((x) & 0x0f)]
#define hex_asc_hi(x)   hex_asc[((x) & 0xf0) >> 4]

static inline char *pack_hex_byte(char *buf, u8 byte)
{
	*buf++ = hex_asc_hi(byte);
c7e22f34:	e59fc020 	ldr	ip, [pc, #32]	; c7e22f5c <pack_hex_byte+0x28>
	*buf++ = hex_asc_lo(byte);
c7e22f38:	e201300f 	and	r3, r1, #15	; 0xf
#define hex_asc_lo(x)   hex_asc[((x) & 0x0f)]
#define hex_asc_hi(x)   hex_asc[((x) & 0xf0) >> 4]

static inline char *pack_hex_byte(char *buf, u8 byte)
{
	*buf++ = hex_asc_hi(byte);
c7e22f3c:	e7dc2221 	ldrb	r2, [ip, r1, lsr #4]
	*buf++ = hex_asc_lo(byte);
c7e22f40:	e7dc3003 	ldrb	r3, [ip, r3]
const char hex_asc[] = "0123456789abcdef";
#define hex_asc_lo(x)   hex_asc[((x) & 0x0f)]
#define hex_asc_hi(x)   hex_asc[((x) & 0xf0) >> 4]

static inline char *pack_hex_byte(char *buf, u8 byte)
{
c7e22f44:	e92d4010 	push	{r4, lr}
c7e22f48:	e1a04000 	mov	r4, r0
	*buf++ = hex_asc_hi(byte);
c7e22f4c:	e4c02001 	strb	r2, [r0], #1
	*buf++ = hex_asc_lo(byte);
	return buf;
}
c7e22f50:	e2800001 	add	r0, r0, #1	; 0x1
#define hex_asc_hi(x)   hex_asc[((x) & 0xf0) >> 4]

static inline char *pack_hex_byte(char *buf, u8 byte)
{
	*buf++ = hex_asc_hi(byte);
	*buf++ = hex_asc_lo(byte);
c7e22f54:	e5c43001 	strb	r3, [r4, #1]
	return buf;
}
c7e22f58:	e8bd8010 	pop	{r4, pc}
c7e22f5c:	c7e2d24a 	.word	0xc7e2d24a

c7e22f60 <simple_strtoul>:

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c7e22f60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	unsigned long result = 0,value;

	if (*cp == '0') {
c7e22f64:	e5d03000 	ldrb	r3, [r0]
	*buf++ = hex_asc_lo(byte);
	return buf;
}

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c7e22f68:	e1a05000 	mov	r5, r0
	unsigned long result = 0,value;

	if (*cp == '0') {
c7e22f6c:	e3530030 	cmp	r3, #48	; 0x30
	*buf++ = hex_asc_lo(byte);
	return buf;
}

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c7e22f70:	e1a07001 	mov	r7, r1
c7e22f74:	e1a04002 	mov	r4, r2
	unsigned long result = 0,value;

	if (*cp == '0') {
c7e22f78:	1a00000d 	bne	c7e22fb4 <simple_strtoul+0x54>
		cp++;
		if ((*cp == 'x') && isxdigit(cp[1])) {
c7e22f7c:	e5f53001 	ldrb	r3, [r5, #1]!
c7e22f80:	e3530078 	cmp	r3, #120	; 0x78
c7e22f84:	1a000007 	bne	c7e22fa8 <simple_strtoul+0x48>
c7e22f88:	e5d53001 	ldrb	r3, [r5, #1]
c7e22f8c:	e59f2080 	ldr	r2, [pc, #128]	; c7e23014 <simple_strtoul+0xb4>
c7e22f90:	e2851001 	add	r1, r5, #1	; 0x1
c7e22f94:	e7d23003 	ldrb	r3, [r2, r3]
c7e22f98:	e3130044 	tst	r3, #68	; 0x44
c7e22f9c:	11a05001 	movne	r5, r1
c7e22fa0:	13a04010 	movne	r4, #16	; 0x10
c7e22fa4:	1a000004 	bne	c7e22fbc <simple_strtoul+0x5c>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
		cp++;
	}
	if (endp)
		*endp = (char *)cp;
c7e22fa8:	e3540000 	cmp	r4, #0	; 0x0
c7e22fac:	03a04008 	moveq	r4, #8	; 0x8
c7e22fb0:	ea000001 	b	c7e22fbc <simple_strtoul+0x5c>
		}
		if (!base) {
			base = 8;
		}
	}
	if (!base) {
c7e22fb4:	e3520000 	cmp	r2, #0	; 0x0
c7e22fb8:	03a0400a 	moveq	r4, #10	; 0xa
c7e22fbc:	e3a06000 	mov	r6, #0	; 0x0
c7e22fc0:	ea000001 	b	c7e22fcc <simple_strtoul+0x6c>
		base = 10;
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
c7e22fc4:	e0262694 	mla	r6, r4, r6, r2
		cp++;
c7e22fc8:	e2855001 	add	r5, r5, #1	; 0x1
		}
	}
	if (!base) {
		base = 10;
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c7e22fcc:	e5d50000 	ldrb	r0, [r5]
c7e22fd0:	e59f303c 	ldr	r3, [pc, #60]	; c7e23014 <simple_strtoul+0xb4>
c7e22fd4:	e2402030 	sub	r2, r0, #48	; 0x30
c7e22fd8:	e7d33000 	ldrb	r3, [r3, r0]
c7e22fdc:	e3130044 	tst	r3, #68	; 0x44
c7e22fe0:	0a000007 	beq	c7e23004 <simple_strtoul+0xa4>
c7e22fe4:	e3130004 	tst	r3, #4	; 0x4
c7e22fe8:	1a000003 	bne	c7e22ffc <simple_strtoul+0x9c>
c7e22fec:	e3130002 	tst	r3, #2	; 0x2
c7e22ff0:	0a000000 	beq	c7e22ff8 <simple_strtoul+0x98>
c7e22ff4:	ebffffc7 	bl	c7e22f18 <__toupper>
c7e22ff8:	e2402037 	sub	r2, r0, #55	; 0x37
c7e22ffc:	e1520004 	cmp	r2, r4
c7e23000:	3affffef 	bcc	c7e22fc4 <simple_strtoul+0x64>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
		cp++;
	}
	if (endp)
c7e23004:	e3570000 	cmp	r7, #0	; 0x0
		*endp = (char *)cp;
c7e23008:	15875000 	strne	r5, [r7]
	return result;
}
c7e2300c:	e1a00006 	mov	r0, r6
c7e23010:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e23014:	c7e2d144 	.word	0xc7e2d144

c7e23018 <simple_strtol>:

	return -EINVAL;
}

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
c7e23018:	e92d4010 	push	{r4, lr}
	if(*cp=='-')
c7e2301c:	e5d03000 	ldrb	r3, [r0]
c7e23020:	e353002d 	cmp	r3, #45	; 0x2d
c7e23024:	1a000003 	bne	c7e23038 <simple_strtol+0x20>
		return -simple_strtoul(cp+1,endp,base);
c7e23028:	e2800001 	add	r0, r0, #1	; 0x1
c7e2302c:	ebffffcb 	bl	c7e22f60 <simple_strtoul>
	return simple_strtoul(cp,endp,base);
}
c7e23030:	e2600000 	rsb	r0, r0, #0	; 0x0
c7e23034:	e8bd8010 	pop	{r4, pc}
c7e23038:	e8bd4010 	pop	{r4, lr}

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
	if(*cp=='-')
		return -simple_strtoul(cp+1,endp,base);
	return simple_strtoul(cp,endp,base);
c7e2303c:	eaffffc7 	b	c7e22f60 <simple_strtoul>

c7e23040 <ustrtoul>:
}

int ustrtoul(const char *cp, char **endp, unsigned int base)
{
c7e23040:	e92d4010 	push	{r4, lr}
c7e23044:	e1a04001 	mov	r4, r1
	unsigned long result = simple_strtoul(cp, endp, base);
c7e23048:	ebffffc4 	bl	c7e22f60 <simple_strtoul>
	switch (**endp) {
c7e2304c:	e5941000 	ldr	r1, [r4]
c7e23050:	e5d13000 	ldrb	r3, [r1]
c7e23054:	e353004b 	cmp	r3, #75	; 0x4b
c7e23058:	0a00000a 	beq	c7e23088 <ustrtoul+0x48>
c7e2305c:	8a000002 	bhi	c7e2306c <ustrtoul+0x2c>
c7e23060:	e3530047 	cmp	r3, #71	; 0x47
c7e23064:	18bd8010 	popne	{r4, pc}
c7e23068:	ea000004 	b	c7e23080 <ustrtoul+0x40>
c7e2306c:	e353004d 	cmp	r3, #77	; 0x4d
c7e23070:	0a000003 	beq	c7e23084 <ustrtoul+0x44>
c7e23074:	e353006b 	cmp	r3, #107	; 0x6b
c7e23078:	18bd8010 	popne	{r4, pc}
c7e2307c:	ea000001 	b	c7e23088 <ustrtoul+0x48>
	case 'G' :
		result *= 1024;
c7e23080:	e1a00500 	lsl	r0, r0, #10
		/* fall through */
	case 'M':
		result *= 1024;
c7e23084:	e1a00500 	lsl	r0, r0, #10
		/* fall through */
	case 'K':
	case 'k':
		result *= 1024;
		if ((*endp)[1] == 'i') {
c7e23088:	e5d13001 	ldrb	r3, [r1, #1]
	case 'M':
		result *= 1024;
		/* fall through */
	case 'K':
	case 'k':
		result *= 1024;
c7e2308c:	e1a00500 	lsl	r0, r0, #10
		if ((*endp)[1] == 'i') {
c7e23090:	e3530069 	cmp	r3, #105	; 0x69
c7e23094:	18bd8010 	popne	{r4, pc}
			if ((*endp)[2] == 'B')
c7e23098:	e5d13002 	ldrb	r3, [r1, #2]
c7e2309c:	e2812002 	add	r2, r1, #2	; 0x2
c7e230a0:	e3530042 	cmp	r3, #66	; 0x42
				(*endp) += 3;
c7e230a4:	02813003 	addeq	r3, r1, #3	; 0x3
c7e230a8:	05843000 	streq	r3, [r4]
			else
				(*endp) += 2;
c7e230ac:	15842000 	strne	r2, [r4]
		}
	}
	return result;
}
c7e230b0:	e8bd8010 	pop	{r4, pc}

c7e230b4 <simple_strtoull>:

unsigned long long simple_strtoull (const char *cp, char **endp, unsigned int base)
{
c7e230b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned long long result = 0, value;

	if (*cp == '0') {
c7e230b8:	e5d03000 	ldrb	r3, [r0]
	}
	return result;
}

unsigned long long simple_strtoull (const char *cp, char **endp, unsigned int base)
{
c7e230bc:	e1a0a000 	mov	sl, r0
	unsigned long long result = 0, value;

	if (*cp == '0') {
c7e230c0:	e3530030 	cmp	r3, #48	; 0x30
	}
	return result;
}

unsigned long long simple_strtoull (const char *cp, char **endp, unsigned int base)
{
c7e230c4:	e1a09001 	mov	r9, r1
c7e230c8:	e1a07002 	mov	r7, r2
	unsigned long long result = 0, value;

	if (*cp == '0') {
c7e230cc:	1a00000d 	bne	c7e23108 <simple_strtoull+0x54>
		cp++;
		if ((*cp == 'x') && isxdigit (cp[1])) {
c7e230d0:	e5fa3001 	ldrb	r3, [sl, #1]!
c7e230d4:	e3530078 	cmp	r3, #120	; 0x78
c7e230d8:	1a000007 	bne	c7e230fc <simple_strtoull+0x48>
c7e230dc:	e5da3001 	ldrb	r3, [sl, #1]
c7e230e0:	e59f20a4 	ldr	r2, [pc, #164]	; c7e2318c <simple_strtoull+0xd8>
c7e230e4:	e28a1001 	add	r1, sl, #1	; 0x1
c7e230e8:	e7d23003 	ldrb	r3, [r2, r3]
c7e230ec:	e3130044 	tst	r3, #68	; 0x44
c7e230f0:	11a0a001 	movne	sl, r1
c7e230f4:	13a07010 	movne	r7, #16	; 0x10
c7e230f8:	1a000004 	bne	c7e23110 <simple_strtoull+0x5c>
				: (islower (*cp) ? toupper (*cp) : *cp) - 'A' + 10) < base) {
		result = result * base + value;
		cp++;
	}
	if (endp)
		*endp = (char *) cp;
c7e230fc:	e3570000 	cmp	r7, #0	; 0x0
c7e23100:	03a07008 	moveq	r7, #8	; 0x8
c7e23104:	ea000001 	b	c7e23110 <simple_strtoull+0x5c>
		}
		if (!base) {
			base = 8;
		}
	}
	if (!base) {
c7e23108:	e3520000 	cmp	r2, #0	; 0x0
c7e2310c:	03a0700a 	moveq	r7, #10	; 0xa
c7e23110:	e3a05000 	mov	r5, #0	; 0x0
c7e23114:	e3a06000 	mov	r6, #0	; 0x0
c7e23118:	ea000004 	b	c7e23130 <simple_strtoull+0x7c>
		base = 10;
	}
	while (isxdigit (*cp) && (value = isdigit (*cp)
				? *cp - '0'
				: (islower (*cp) ? toupper (*cp) : *cp) - 'A' + 10) < base) {
		result = result * base + value;
c7e2311c:	e0843795 	umull	r3, r4, r5, r7
c7e23120:	e0244697 	mla	r4, r7, r6, r4
c7e23124:	e0905003 	adds	r5, r0, r3
c7e23128:	e0a16004 	adc	r6, r1, r4
		cp++;
c7e2312c:	e28aa001 	add	sl, sl, #1	; 0x1
		}
	}
	if (!base) {
		base = 10;
	}
	while (isxdigit (*cp) && (value = isdigit (*cp)
c7e23130:	e5da0000 	ldrb	r0, [sl]
c7e23134:	e59f3050 	ldr	r3, [pc, #80]	; c7e2318c <simple_strtoull+0xd8>
c7e23138:	e2402030 	sub	r2, r0, #48	; 0x30
c7e2313c:	e7d33000 	ldrb	r3, [r3, r0]
c7e23140:	e3130044 	tst	r3, #68	; 0x44
c7e23144:	0a00000b 	beq	c7e23178 <simple_strtoull+0xc4>
c7e23148:	e3130004 	tst	r3, #4	; 0x4
c7e2314c:	1a000003 	bne	c7e23160 <simple_strtoull+0xac>
c7e23150:	e3130002 	tst	r3, #2	; 0x2
c7e23154:	0a000000 	beq	c7e2315c <simple_strtoull+0xa8>
c7e23158:	ebffff6e 	bl	c7e22f18 <__toupper>
c7e2315c:	e2402037 	sub	r2, r0, #55	; 0x37
c7e23160:	e1a00002 	mov	r0, r2
c7e23164:	e1a01fc0 	asr	r1, r0, #31
c7e23168:	e3510000 	cmp	r1, #0	; 0x0
c7e2316c:	1a000001 	bne	c7e23178 <simple_strtoull+0xc4>
c7e23170:	e1570000 	cmp	r7, r0
c7e23174:	8affffe8 	bhi	c7e2311c <simple_strtoull+0x68>
				? *cp - '0'
				: (islower (*cp) ? toupper (*cp) : *cp) - 'A' + 10) < base) {
		result = result * base + value;
		cp++;
	}
	if (endp)
c7e23178:	e3590000 	cmp	r9, #0	; 0x0
		*endp = (char *) cp;
c7e2317c:	1589a000 	strne	sl, [r9]
	return result;
}
c7e23180:	e1a01006 	mov	r1, r6
c7e23184:	e1a00005 	mov	r0, r5
c7e23188:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e2318c:	c7e2d144 	.word	0xc7e2d144

c7e23190 <skip_atoi>:

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
c7e23190:	e1a0c000 	mov	ip, r0
c7e23194:	e3a00000 	mov	r0, #0	; 0x0
c7e23198:	ea000002 	b	c7e231a8 <skip_atoi+0x18>
	int i=0;

	while (is_digit(**s))
		i = i*10 + *((*s)++) - '0';
c7e2319c:	e3a0300a 	mov	r3, #10	; 0xa
c7e231a0:	e0202093 	mla	r0, r3, r0, r2
c7e231a4:	e58c1000 	str	r1, [ip]

static int skip_atoi(const char **s)
{
	int i=0;

	while (is_digit(**s))
c7e231a8:	e59c3000 	ldr	r3, [ip]
c7e231ac:	e5d32000 	ldrb	r2, [r3]
		i = i*10 + *((*s)++) - '0';
c7e231b0:	e2831001 	add	r1, r3, #1	; 0x1

static int skip_atoi(const char **s)
{
	int i=0;

	while (is_digit(**s))
c7e231b4:	e2422030 	sub	r2, r2, #48	; 0x30
c7e231b8:	e20230ff 	and	r3, r2, #255	; 0xff
c7e231bc:	e3530009 	cmp	r3, #9	; 0x9
c7e231c0:	9afffff5 	bls	c7e2319c <skip_atoi+0xc>
		i = i*10 + *((*s)++) - '0';
	return i;
}
c7e231c4:	e12fff1e 	bx	lr

c7e231c8 <put_dec_trunc>:
 * On i386 gcc 4.1.2 -O2: ~250 bytes of code. */
static char* put_dec_trunc(char *buf, unsigned q)
{
	unsigned d3, d2, d1, d0;
	d1 = (q>>4) & 0xf;
	d2 = (q>>8) & 0xf;
c7e231c8:	e1a03421 	lsr	r3, r1, #8
 * Outputs from one to five digits depending on input.
 * On i386 gcc 4.1.2 -O2: ~250 bytes of code. */
static char* put_dec_trunc(char *buf, unsigned q)
{
	unsigned d3, d2, d1, d0;
	d1 = (q>>4) & 0xf;
c7e231cc:	e1a0c221 	lsr	ip, r1, #4

/* Formats correctly any integer in [0,99999].
 * Outputs from one to five digits depending on input.
 * On i386 gcc 4.1.2 -O2: ~250 bytes of code. */
static char* put_dec_trunc(char *buf, unsigned q)
{
c7e231d0:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
	unsigned d3, d2, d1, d0;
	d1 = (q>>4) & 0xf;
c7e231d4:	e20cc00f 	and	ip, ip, #15	; 0xf
	d2 = (q>>8) & 0xf;
c7e231d8:	e203600f 	and	r6, r3, #15	; 0xf
	d3 = (q>>12);
c7e231dc:	e1a05621 	lsr	r5, r1, #12

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
c7e231e0:	e08c3006 	add	r3, ip, r6
c7e231e4:	e0833005 	add	r3, r3, r5
c7e231e8:	e3a02006 	mov	r2, #6	; 0x6
c7e231ec:	e201100f 	and	r1, r1, #15	; 0xf
c7e231f0:	e0211392 	mla	r1, r2, r3, r1
	q = (d0 * 0xcd) >> 11;
c7e231f4:	e3a0a0cd 	mov	sl, #205	; 0xcd
c7e231f8:	e002019a 	mul	r2, sl, r1
	d0 = d0 - 10*q;
	*buf++ = d0 + '0'; /* least significant digit */
	d1 = q + 9*d3 + 5*d2 + d1;
c7e231fc:	e3a03009 	mov	r3, #9	; 0x9
c7e23200:	e024c593 	mla	r4, r3, r5, ip
	d1 = (q>>4) & 0xf;
	d2 = (q>>8) & 0xf;
	d3 = (q>>12);

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
c7e23204:	e1a025a2 	lsr	r2, r2, #11
	d0 = d0 - 10*q;
	*buf++ = d0 + '0'; /* least significant digit */
c7e23208:	e3a0700a 	mov	r7, #10	; 0xa
c7e2320c:	e00c0297 	mul	ip, r7, r2
	d1 = q + 9*d3 + 5*d2 + d1;
c7e23210:	e3a03005 	mov	r3, #5	; 0x5
c7e23214:	e0234396 	mla	r3, r6, r3, r4
	d3 = (q>>12);

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0'; /* least significant digit */
c7e23218:	e06c1001 	rsb	r1, ip, r1
c7e2321c:	e2811030 	add	r1, r1, #48	; 0x30
	d1 = q + 9*d3 + 5*d2 + d1;
	if (d1 != 0) {
c7e23220:	e093c002 	adds	ip, r3, r2

/* Formats correctly any integer in [0,99999].
 * Outputs from one to five digits depending on input.
 * On i386 gcc 4.1.2 -O2: ~250 bytes of code. */
static char* put_dec_trunc(char *buf, unsigned q)
{
c7e23224:	e1a04000 	mov	r4, r0
	d3 = (q>>12);

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0'; /* least significant digit */
c7e23228:	e4c01001 	strb	r1, [r0], #1
	d1 = q + 9*d3 + 5*d2 + d1;
	if (d1 != 0) {
c7e2322c:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
		q = (d1 * 0xcd) >> 11;
c7e23230:	e0030c9a 	mul	r3, sl, ip
c7e23234:	e1a035a3 	lsr	r3, r3, #11
		d1 = d1 - 10*q;
		*buf++ = d1 + '0'; /* next digit */
c7e23238:	e0020397 	mul	r2, r7, r3

		d2 = q + 2*d2;
c7e2323c:	e0831086 	add	r1, r3, r6, lsl #1
	*buf++ = d0 + '0'; /* least significant digit */
	d1 = q + 9*d3 + 5*d2 + d1;
	if (d1 != 0) {
		q = (d1 * 0xcd) >> 11;
		d1 = d1 - 10*q;
		*buf++ = d1 + '0'; /* next digit */
c7e23240:	e062200c 	rsb	r2, r2, ip
c7e23244:	e2822030 	add	r2, r2, #48	; 0x30

		d2 = q + 2*d2;
		if ((d2 != 0) || (d3 != 0)) {
c7e23248:	e1913005 	orrs	r3, r1, r5
	*buf++ = d0 + '0'; /* least significant digit */
	d1 = q + 9*d3 + 5*d2 + d1;
	if (d1 != 0) {
		q = (d1 * 0xcd) >> 11;
		d1 = d1 - 10*q;
		*buf++ = d1 + '0'; /* next digit */
c7e2324c:	e5c42001 	strb	r2, [r4, #1]
c7e23250:	e2800001 	add	r0, r0, #1	; 0x1

		d2 = q + 2*d2;
		if ((d2 != 0) || (d3 != 0)) {
c7e23254:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
			q = (d2 * 0xd) >> 7;
c7e23258:	e3a0300d 	mov	r3, #13	; 0xd
c7e2325c:	e0030391 	mul	r3, r1, r3
c7e23260:	e1a033a3 	lsr	r3, r3, #7
			d2 = d2 - 10*q;
			*buf++ = d2 + '0'; /* next digit */
c7e23264:	e0020397 	mul	r2, r7, r3
c7e23268:	e0622001 	rsb	r2, r2, r1
c7e2326c:	e2822030 	add	r2, r2, #48	; 0x30

			d3 = q + 4*d3;
			if (d3 != 0) {
c7e23270:	e0931105 	adds	r1, r3, r5, lsl #2

		d2 = q + 2*d2;
		if ((d2 != 0) || (d3 != 0)) {
			q = (d2 * 0xd) >> 7;
			d2 = d2 - 10*q;
			*buf++ = d2 + '0'; /* next digit */
c7e23274:	e4c02001 	strb	r2, [r0], #1

			d3 = q + 4*d3;
			if (d3 != 0) {
c7e23278:	08bd84f0 	popeq	{r4, r5, r6, r7, sl, pc}
				q = (d3 * 0xcd) >> 11;
c7e2327c:	e003019a 	mul	r3, sl, r1
c7e23280:	e1a025a3 	lsr	r2, r3, #11
				d3 = d3 - 10*q;
				*buf++ = d3 + '0';  /* next digit */
c7e23284:	e0030297 	mul	r3, r7, r2
c7e23288:	e0633001 	rsb	r3, r3, r1
c7e2328c:	e2833030 	add	r3, r3, #48	; 0x30
				if (q != 0)
c7e23290:	e3520000 	cmp	r2, #0	; 0x0

			d3 = q + 4*d3;
			if (d3 != 0) {
				q = (d3 * 0xcd) >> 11;
				d3 = d3 - 10*q;
				*buf++ = d3 + '0';  /* next digit */
c7e23294:	e4c03001 	strb	r3, [r0], #1
				if (q != 0)
					*buf++ = q + '0';  /* most sign. digit */
c7e23298:	12823030 	addne	r3, r2, #48	; 0x30
c7e2329c:	14c03001 	strbne	r3, [r0], #1
			}
		}
	}
	return buf;
}
c7e232a0:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}

c7e232a4 <simple_itoa>:
{
	/* 21 digits plus null terminator, good for 64-bit or smaller ints */
	static char local[22];
	char *p = &local[21];

	*p-- = '\0';
c7e232a4:	e59f2048 	ldr	r2, [pc, #72]	; c7e232f4 <simple_itoa+0x50>
c7e232a8:	e3a03000 	mov	r3, #0	; 0x0
	panic("%s:%u: %s: Assertion `%s' failed.", file, line, function,
	      assertion);
}

char *simple_itoa(ulong i)
{
c7e232ac:	e92d4070 	push	{r4, r5, r6, lr}
	/* 21 digits plus null terminator, good for 64-bit or smaller ints */
	static char local[22];
	char *p = &local[21];

	*p-- = '\0';
c7e232b0:	e5c23015 	strb	r3, [r2, #21]
	panic("%s:%u: %s: Assertion `%s' failed.", file, line, function,
	      assertion);
}

char *simple_itoa(ulong i)
{
c7e232b4:	e1a05000 	mov	r5, r0
	/* 21 digits plus null terminator, good for 64-bit or smaller ints */
	static char local[22];
	char *p = &local[21];

	*p-- = '\0';
c7e232b8:	e2826014 	add	r6, r2, #20	; 0x14
	do {
		*p-- = '0' + i % 10;
c7e232bc:	e1a00005 	mov	r0, r5
c7e232c0:	e3a0100a 	mov	r1, #10	; 0xa
c7e232c4:	eb001ccc 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e232c8:	e1a04006 	mov	r4, r6
c7e232cc:	e2811030 	add	r1, r1, #48	; 0x30
c7e232d0:	e4441001 	strb	r1, [r4], #-1
		i /= 10;
c7e232d4:	e1a00005 	mov	r0, r5
c7e232d8:	e3a0100a 	mov	r1, #10	; 0xa
c7e232dc:	eb001c89 	bl	c7e2a508 <__udivsi3>
	} while (i > 0);
c7e232e0:	e2505000 	subs	r5, r0, #0	; 0x0
	char *p = &local[21];

	*p-- = '\0';
	do {
		*p-- = '0' + i % 10;
		i /= 10;
c7e232e4:	e1a00006 	mov	r0, r6
c7e232e8:	e1a06004 	mov	r6, r4
	} while (i > 0);
c7e232ec:	1afffff2 	bne	c7e232bc <simple_itoa+0x18>
	return p + 1;
}
c7e232f0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e232f4:	c7e72308 	.word	0xc7e72308

c7e232f8 <panic>:
	va_end(args);
	return i;
}

void panic(const char *fmt, ...)
{
c7e232f8:	e92d000f 	push	{r0, r1, r2, r3}
c7e232fc:	e24dd008 	sub	sp, sp, #8	; 0x8
	va_list	args;
	va_start(args, fmt);
c7e23300:	e28d300c 	add	r3, sp, #12	; 0xc
	vprintf(fmt, args);
c7e23304:	e1a01003 	mov	r1, r3
c7e23308:	e59d0008 	ldr	r0, [sp, #8]
}

void panic(const char *fmt, ...)
{
	va_list	args;
	va_start(args, fmt);
c7e2330c:	e58d3004 	str	r3, [sp, #4]
	vprintf(fmt, args);
c7e23310:	ebff95bf 	bl	c7e08a14 <vprintf>
	putc('\n');
c7e23314:	e3a0000a 	mov	r0, #10	; 0xa
c7e23318:	ebff965e 	bl	c7e08c98 <putc>
	va_end(args);
#if defined (CONFIG_PANIC_HANG)
	hang();
#else
	udelay (100000);	/* allow messages to go out */
c7e2331c:	e59f0018 	ldr	r0, [pc, #24]	; c7e2333c <panic+0x44>
c7e23320:	ebfffee8 	bl	c7e22ec8 <udelay>
	do_reset (NULL, 0, 0, NULL);
c7e23324:	e3a00000 	mov	r0, #0	; 0x0
c7e23328:	e1a01000 	mov	r1, r0
c7e2332c:	e1a02000 	mov	r2, r0
c7e23330:	e1a03000 	mov	r3, r0
c7e23334:	ebff7805 	bl	c7e01350 <do_reset>
c7e23338:	eafffffe 	b	c7e23338 <panic+0x40>
c7e2333c:	000186a0 	.word	0x000186a0

c7e23340 <__assert_fail>:
		;
}

void __assert_fail(const char *assertion, const char *file, unsigned line,
		   const char *function)
{
c7e23340:	e92d4007 	push	{r0, r1, r2, lr}
	/* This will not return */
	panic("%s:%u: %s: Assertion `%s' failed.", file, line, function,
c7e23344:	e58d0000 	str	r0, [sp]
c7e23348:	e59f0000 	ldr	r0, [pc, #0]	; c7e23350 <__assert_fail+0x10>
c7e2334c:	ebffffe9 	bl	c7e232f8 <panic>
c7e23350:	c7e34837 	.word	0xc7e34837

c7e23354 <string>:
static char *string(char *buf, char *end, char *s, int field_width,
		int precision, int flags)
{
	int len, i;

	if (s == 0)
c7e23354:	e59f10a4 	ldr	r1, [pc, #164]	; c7e23400 <string+0xac>
c7e23358:	e3520000 	cmp	r2, #0	; 0x0
	return buf;
}

static char *string(char *buf, char *end, char *s, int field_width,
		int precision, int flags)
{
c7e2335c:	e92d4070 	push	{r4, r5, r6, lr}
	int len, i;

	if (s == 0)
c7e23360:	11a06002 	movne	r6, r2
c7e23364:	01a06001 	moveq	r6, r1
	return buf;
}

static char *string(char *buf, char *end, char *s, int field_width,
		int precision, int flags)
{
c7e23368:	e1a04000 	mov	r4, r0
	int len, i;

	if (s == 0)
		s = "<NULL>";

	len = strnlen(s, precision);
c7e2336c:	e59d1010 	ldr	r1, [sp, #16]
c7e23370:	e1a00006 	mov	r0, r6
	return buf;
}

static char *string(char *buf, char *end, char *s, int field_width,
		int precision, int flags)
{
c7e23374:	e1a05003 	mov	r5, r3
	int len, i;

	if (s == 0)
		s = "<NULL>";

	len = strnlen(s, precision);
c7e23378:	ebfffd9a 	bl	c7e229e8 <strnlen>

	if (!(flags & LEFT))
c7e2337c:	e59d3014 	ldr	r3, [sp, #20]
	int len, i;

	if (s == 0)
		s = "<NULL>";

	len = strnlen(s, precision);
c7e23380:	e1a0c000 	mov	ip, r0

	if (!(flags & LEFT))
c7e23384:	e3130010 	tst	r3, #16	; 0x10
c7e23388:	01a02004 	moveq	r2, r4
c7e2338c:	0a000002 	beq	c7e2339c <string+0x48>
c7e23390:	ea000007 	b	c7e233b4 <string+0x60>
		while (len < field_width--)
			ADDCH(buf, ' ');
c7e23394:	e3a03020 	mov	r3, #32	; 0x20
c7e23398:	e5423001 	strb	r3, [r2, #-1]
		s = "<NULL>";

	len = strnlen(s, precision);

	if (!(flags & LEFT))
		while (len < field_width--)
c7e2339c:	e2455001 	sub	r5, r5, #1	; 0x1
	return buf;
}

static char *string(char *buf, char *end, char *s, int field_width,
		int precision, int flags)
{
c7e233a0:	e2853001 	add	r3, r5, #1	; 0x1
		s = "<NULL>";

	len = strnlen(s, precision);

	if (!(flags & LEFT))
		while (len < field_width--)
c7e233a4:	e15c0003 	cmp	ip, r3
			ADDCH(buf, ' ');
c7e233a8:	e1a04002 	mov	r4, r2
		s = "<NULL>";

	len = strnlen(s, precision);

	if (!(flags & LEFT))
		while (len < field_width--)
c7e233ac:	e2822001 	add	r2, r2, #1	; 0x1
c7e233b0:	bafffff7 	blt	c7e23394 <string+0x40>
c7e233b4:	e3a02000 	mov	r2, #0	; 0x0
c7e233b8:	ea000002 	b	c7e233c8 <string+0x74>
			ADDCH(buf, ' ');
	for (i = 0; i < len; ++i)
		ADDCH(buf, *s++);
c7e233bc:	e7d63002 	ldrb	r3, [r6, r2]
c7e233c0:	e7c43002 	strb	r3, [r4, r2]
	len = strnlen(s, precision);

	if (!(flags & LEFT))
		while (len < field_width--)
			ADDCH(buf, ' ');
	for (i = 0; i < len; ++i)
c7e233c4:	e2822001 	add	r2, r2, #1	; 0x1
c7e233c8:	e152000c 	cmp	r2, ip
	return buf;
}

static char *string(char *buf, char *end, char *s, int field_width,
		int precision, int flags)
{
c7e233cc:	e0843002 	add	r3, r4, r2
	len = strnlen(s, precision);

	if (!(flags & LEFT))
		while (len < field_width--)
			ADDCH(buf, ' ');
	for (i = 0; i < len; ++i)
c7e233d0:	bafffff9 	blt	c7e233bc <string+0x68>
c7e233d4:	e1a02003 	mov	r2, r3
c7e233d8:	e1a01005 	mov	r1, r5
c7e233dc:	ea000001 	b	c7e233e8 <string+0x94>
		ADDCH(buf, *s++);
	while (len < field_width--)
		ADDCH(buf, ' ');
c7e233e0:	e3a03020 	mov	r3, #32	; 0x20
c7e233e4:	e5423001 	strb	r3, [r2, #-1]
	if (!(flags & LEFT))
		while (len < field_width--)
			ADDCH(buf, ' ');
	for (i = 0; i < len; ++i)
		ADDCH(buf, *s++);
	while (len < field_width--)
c7e233e8:	e15c0001 	cmp	ip, r1
		ADDCH(buf, ' ');
c7e233ec:	e1a00002 	mov	r0, r2
c7e233f0:	e2411001 	sub	r1, r1, #1	; 0x1
c7e233f4:	e2822001 	add	r2, r2, #1	; 0x1
	if (!(flags & LEFT))
		while (len < field_width--)
			ADDCH(buf, ' ');
	for (i = 0; i < len; ++i)
		ADDCH(buf, *s++);
	while (len < field_width--)
c7e233f8:	bafffff8 	blt	c7e233e0 <string+0x8c>
		ADDCH(buf, ' ');
	return buf;
}
c7e233fc:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e23400:	c7e34859 	.word	0xc7e34859

c7e23404 <put_dec>:
					*buf++ = q + '0';
	return buf;
}
/* No inlining helps gcc to use registers better */
static noinline char* put_dec(char *buf, unsigned NUM_TYPE num)
{
c7e23404:	e92d44f3 	push	{r0, r1, r4, r5, r6, r7, sl, lr}
c7e23408:	e88d000c 	stm	sp, {r2, r3}
c7e2340c:	e1a0a000 	mov	sl, r0
	while (1) {
		unsigned rem;
		if (num < 100000)
c7e23410:	e59d6004 	ldr	r6, [sp, #4]
			return put_dec_trunc(buf, num);
		rem = do_div(num, 100000);
c7e23414:	e1a0000d 	mov	r0, sp
/* No inlining helps gcc to use registers better */
static noinline char* put_dec(char *buf, unsigned NUM_TYPE num)
{
	while (1) {
		unsigned rem;
		if (num < 100000)
c7e23418:	e3560000 	cmp	r6, #0	; 0x0
			return put_dec_trunc(buf, num);
		rem = do_div(num, 100000);
c7e2341c:	e59f1108 	ldr	r1, [pc, #264]	; c7e2352c <put_dec+0x128>
/* No inlining helps gcc to use registers better */
static noinline char* put_dec(char *buf, unsigned NUM_TYPE num)
{
	while (1) {
		unsigned rem;
		if (num < 100000)
c7e23420:	e59d4000 	ldr	r4, [sp]
c7e23424:	1a00000e 	bne	c7e23464 <put_dec+0x60>
c7e23428:	e59f3100 	ldr	r3, [pc, #256]	; c7e23530 <put_dec+0x12c>
			return put_dec_trunc(buf, num);
		rem = do_div(num, 100000);
c7e2342c:	e1a00004 	mov	r0, r4
/* No inlining helps gcc to use registers better */
static noinline char* put_dec(char *buf, unsigned NUM_TYPE num)
{
	while (1) {
		unsigned rem;
		if (num < 100000)
c7e23430:	e1540003 	cmp	r4, r3
c7e23434:	8a000003 	bhi	c7e23448 <put_dec+0x44>
			return put_dec_trunc(buf, num);
c7e23438:	e1a0000a 	mov	r0, sl
c7e2343c:	e1a01004 	mov	r1, r4
c7e23440:	ebffff60 	bl	c7e231c8 <put_dec_trunc>
		rem = do_div(num, 100000);
		buf = put_dec_full(buf, rem);
	}
}
c7e23444:	e8bd84fc 	pop	{r2, r3, r4, r5, r6, r7, sl, pc}
{
	while (1) {
		unsigned rem;
		if (num < 100000)
			return put_dec_trunc(buf, num);
		rem = do_div(num, 100000);
c7e23448:	eb001c6b 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e2344c:	e1a00004 	mov	r0, r4
c7e23450:	e1a05001 	mov	r5, r1
c7e23454:	e59f10d0 	ldr	r1, [pc, #208]	; c7e2352c <put_dec+0x128>
c7e23458:	eb001c2a 	bl	c7e2a508 <__udivsi3>
c7e2345c:	e88d0041 	stm	sp, {r0, r6}
c7e23460:	ea000001 	b	c7e2346c <put_dec+0x68>
c7e23464:	ebfff6f6 	bl	c7e21044 <__div64_32>
c7e23468:	e1a05000 	mov	r5, r0
static char* put_dec_full(char *buf, unsigned q)
{
	/* BTW, if q is in [0,9999], 8-bit ints will be enough, */
	/* but anyway, gcc produces better code with full-sized ints */
	unsigned d3, d2, d1, d0;
	d1 = (q>>4) & 0xf;
c7e2346c:	e1a0c225 	lsr	ip, r5, #4
	d2 = (q>>8) & 0xf;
c7e23470:	e1a00425 	lsr	r0, r5, #8
c7e23474:	e200000f 	and	r0, r0, #15	; 0xf
static char* put_dec_full(char *buf, unsigned q)
{
	/* BTW, if q is in [0,9999], 8-bit ints will be enough, */
	/* but anyway, gcc produces better code with full-sized ints */
	unsigned d3, d2, d1, d0;
	d1 = (q>>4) & 0xf;
c7e23478:	e20cc00f 	and	ip, ip, #15	; 0xf
	d2 = (q>>8) & 0xf;
	d3 = (q>>12);
c7e2347c:	e1a0e625 	lsr	lr, r5, #12
	 * (x * 0x34) >> 9:    110100 - same
	 * (x * 0x1a) >> 8:     11010 - same
	 * (x * 0x0d) >> 7:      1101 - same, shortest code (on i386)
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
c7e23480:	e08c3000 	add	r3, ip, r0
c7e23484:	e083300e 	add	r3, r3, lr
c7e23488:	e205100f 	and	r1, r5, #15	; 0xf
c7e2348c:	e3a02006 	mov	r2, #6	; 0x6
c7e23490:	e0261392 	mla	r6, r2, r3, r1
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
	d1 = q + 9*d3 + 5*d2 + d1;
c7e23494:	e3a03009 	mov	r3, #9	; 0x9
c7e23498:	e022ce93 	mla	r2, r3, lr, ip
	 * (x * 0x1a) >> 8:     11010 - same
	 * (x * 0x0d) >> 7:      1101 - same, shortest code (on i386)
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
c7e2349c:	e3a040cd 	mov	r4, #205	; 0xcd
c7e234a0:	e0050694 	mul	r5, r4, r6
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
	d1 = q + 9*d3 + 5*d2 + d1;
c7e234a4:	e3a03005 	mov	r3, #5	; 0x5
c7e234a8:	e0212093 	mla	r1, r3, r0, r2
	 * (x * 0x1a) >> 8:     11010 - same
	 * (x * 0x0d) >> 7:      1101 - same, shortest code (on i386)
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
c7e234ac:	e1a055a5 	lsr	r5, r5, #11
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
	d1 = q + 9*d3 + 5*d2 + d1;
c7e234b0:	e0811005 	add	r1, r1, r5
		q = (d1 * 0xcd) >> 11;
c7e234b4:	e00c0194 	mul	ip, r4, r1
c7e234b8:	e1a0c5ac 	lsr	ip, ip, #11
		d1 = d1 - 10*q;
		*buf++ = d1 + '0';

		d2 = q + 2*d2;
c7e234bc:	e08c0080 	add	r0, ip, r0, lsl #1
			q = (d2 * 0xd) >> 7;
c7e234c0:	e2833008 	add	r3, r3, #8	; 0x8
c7e234c4:	e0020093 	mul	r2, r3, r0
c7e234c8:	e1a023a2 	lsr	r2, r2, #7
			d2 = d2 - 10*q;
			*buf++ = d2 + '0';

			d3 = q + 4*d3;
c7e234cc:	e082e10e 	add	lr, r2, lr, lsl #2
				q = (d3 * 0xcd) >> 11; /* - shorter code */
c7e234d0:	e004049e 	mul	r4, lr, r4
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
c7e234d4:	e3a0300a 	mov	r3, #10	; 0xa
			q = (d2 * 0xd) >> 7;
			d2 = d2 - 10*q;
			*buf++ = d2 + '0';

			d3 = q + 4*d3;
				q = (d3 * 0xcd) >> 11; /* - shorter code */
c7e234d8:	e1a045a4 	lsr	r4, r4, #11
				/* q = (d3 * 0x67) >> 10; - would also work */
				d3 = d3 - 10*q;
				*buf++ = d3 + '0';
c7e234dc:	e0070493 	mul	r7, r3, r4
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
c7e234e0:	e0050593 	mul	r5, r3, r5
	d1 = q + 9*d3 + 5*d2 + d1;
		q = (d1 * 0xcd) >> 11;
		d1 = d1 - 10*q;
		*buf++ = d1 + '0';
c7e234e4:	e00c0c93 	mul	ip, r3, ip

		d2 = q + 2*d2;
			q = (d2 * 0xd) >> 7;
			d2 = d2 - 10*q;
			*buf++ = d2 + '0';
c7e234e8:	e0030392 	mul	r3, r2, r3
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
c7e234ec:	e0656006 	rsb	r6, r5, r6
	d1 = q + 9*d3 + 5*d2 + d1;
		q = (d1 * 0xcd) >> 11;
		d1 = d1 - 10*q;
		*buf++ = d1 + '0';
c7e234f0:	e06c1001 	rsb	r1, ip, r1

		d2 = q + 2*d2;
			q = (d2 * 0xd) >> 7;
			d2 = d2 - 10*q;
			*buf++ = d2 + '0';
c7e234f4:	e0630000 	rsb	r0, r3, r0

			d3 = q + 4*d3;
				q = (d3 * 0xcd) >> 11; /* - shorter code */
				/* q = (d3 * 0x67) >> 10; - would also work */
				d3 = d3 - 10*q;
				*buf++ = d3 + '0';
c7e234f8:	e067e00e 	rsb	lr, r7, lr
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
c7e234fc:	e2866030 	add	r6, r6, #48	; 0x30
	d1 = q + 9*d3 + 5*d2 + d1;
		q = (d1 * 0xcd) >> 11;
		d1 = d1 - 10*q;
		*buf++ = d1 + '0';
c7e23500:	e2811030 	add	r1, r1, #48	; 0x30

		d2 = q + 2*d2;
			q = (d2 * 0xd) >> 7;
			d2 = d2 - 10*q;
			*buf++ = d2 + '0';
c7e23504:	e2800030 	add	r0, r0, #48	; 0x30

			d3 = q + 4*d3;
				q = (d3 * 0xcd) >> 11; /* - shorter code */
				/* q = (d3 * 0x67) >> 10; - would also work */
				d3 = d3 - 10*q;
				*buf++ = d3 + '0';
c7e23508:	e28ee030 	add	lr, lr, #48	; 0x30
					*buf++ = q + '0';
c7e2350c:	e2844030 	add	r4, r4, #48	; 0x30
	 */

	d0 = 6*(d3 + d2 + d1) + (q & 0xf);
	q = (d0 * 0xcd) >> 11;
	d0 = d0 - 10*q;
	*buf++ = d0 + '0';
c7e23510:	e5ca6000 	strb	r6, [sl]
	d1 = q + 9*d3 + 5*d2 + d1;
		q = (d1 * 0xcd) >> 11;
		d1 = d1 - 10*q;
		*buf++ = d1 + '0';
c7e23514:	e5ca1001 	strb	r1, [sl, #1]

		d2 = q + 2*d2;
			q = (d2 * 0xd) >> 7;
			d2 = d2 - 10*q;
			*buf++ = d2 + '0';
c7e23518:	e5ca0002 	strb	r0, [sl, #2]

			d3 = q + 4*d3;
				q = (d3 * 0xcd) >> 11; /* - shorter code */
				/* q = (d3 * 0x67) >> 10; - would also work */
				d3 = d3 - 10*q;
				*buf++ = d3 + '0';
c7e2351c:	e5cae003 	strb	lr, [sl, #3]
					*buf++ = q + '0';
c7e23520:	e5ca4004 	strb	r4, [sl, #4]
	return buf;
}
/* No inlining helps gcc to use registers better */
static noinline char* put_dec(char *buf, unsigned NUM_TYPE num)
{
c7e23524:	e28aa005 	add	sl, sl, #5	; 0x5
c7e23528:	eaffffb8 	b	c7e23410 <put_dec+0xc>
c7e2352c:	000186a0 	.word	0x000186a0
c7e23530:	0001869f 	.word	0x0001869f

c7e23534 <number>:
#define ADDCH(str, ch)	(*(str)++ = (ch))
#endif

static char *number(char *buf, char *end, unsigned NUM_TYPE num,
		int base, int size, int precision, int type)
{
c7e23534:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e23538:	e24dd058 	sub	sp, sp, #88	; 0x58
c7e2353c:	e1a09000 	mov	r9, r0
	static const char digits[16] = "0123456789ABCDEF"; /* "GHIJKLMNOPQRSTUVWXYZ"; */

	char tmp[66];
	char sign;
	char locase;
	int need_pfx = ((type & SPECIAL) && base != 10);
c7e23540:	e59d0078 	ldr	r0, [sp, #120]
#define ADDCH(str, ch)	(*(str)++ = (ch))
#endif

static char *number(char *buf, char *end, unsigned NUM_TYPE num,
		int base, int size, int precision, int type)
{
c7e23544:	e59da084 	ldr	sl, [sp, #132]
	static const char digits[16] = "0123456789ABCDEF"; /* "GHIJKLMNOPQRSTUVWXYZ"; */

	char tmp[66];
	char sign;
	char locase;
	int need_pfx = ((type & SPECIAL) && base != 10);
c7e23548:	e250100a 	subs	r1, r0, #10	; 0xa
c7e2354c:	13a01001 	movne	r1, #1	; 0x1
c7e23550:	e001132a 	and	r1, r1, sl, lsr #6
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
	if (type & LEFT)
c7e23554:	e31a0010 	tst	sl, #16	; 0x10
	static const char digits[16] = "0123456789ABCDEF"; /* "GHIJKLMNOPQRSTUVWXYZ"; */

	char tmp[66];
	char sign;
	char locase;
	int need_pfx = ((type & SPECIAL) && base != 10);
c7e23558:	e58d1004 	str	r1, [sp, #4]
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
c7e2355c:	e20a1020 	and	r1, sl, #32	; 0x20
	if (type & LEFT)
		type &= ~ZEROPAD;
c7e23560:	13caa001 	bicne	sl, sl, #1	; 0x1
	sign = 0;
	if (type & SIGN) {
c7e23564:	e31a0002 	tst	sl, #2	; 0x2
#define ADDCH(str, ch)	(*(str)++ = (ch))
#endif

static char *number(char *buf, char *end, unsigned NUM_TYPE num,
		int base, int size, int precision, int type)
{
c7e23568:	e1a05002 	mov	r5, r2
c7e2356c:	e1a06003 	mov	r6, r3
c7e23570:	e59d707c 	ldr	r7, [sp, #124]
	int need_pfx = ((type & SPECIAL) && base != 10);
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
c7e23574:	e58d1000 	str	r1, [sp]
	if (type & LEFT)
		type &= ~ZEROPAD;
	sign = 0;
	if (type & SIGN) {
c7e23578:	0a000010 	beq	c7e235c0 <number+0x8c>
		if ((signed NUM_TYPE) num < 0) {
c7e2357c:	e3530000 	cmp	r3, #0	; 0x0
c7e23580:	ba000002 	blt	c7e23590 <number+0x5c>
			sign = '-';
			num = - (signed NUM_TYPE) num;
			size--;
		} else if (type & PLUS) {
c7e23584:	e31a0004 	tst	sl, #4	; 0x4
c7e23588:	0a000008 	beq	c7e235b0 <number+0x7c>
c7e2358c:	ea000004 	b	c7e235a4 <number+0x70>
		type &= ~ZEROPAD;
	sign = 0;
	if (type & SIGN) {
		if ((signed NUM_TYPE) num < 0) {
			sign = '-';
			num = - (signed NUM_TYPE) num;
c7e23590:	e2755000 	rsbs	r5, r5, #0	; 0x0
c7e23594:	e2e66000 	rsc	r6, r6, #0	; 0x0
			size--;
c7e23598:	e2477001 	sub	r7, r7, #1	; 0x1
c7e2359c:	e3a0b02d 	mov	fp, #45	; 0x2d
c7e235a0:	ea000007 	b	c7e235c4 <number+0x90>
		} else if (type & PLUS) {
			sign = '+';
			size--;
c7e235a4:	e2477001 	sub	r7, r7, #1	; 0x1
c7e235a8:	e3a0b02b 	mov	fp, #43	; 0x2b
c7e235ac:	ea000004 	b	c7e235c4 <number+0x90>
		} else if (type & SPACE) {
c7e235b0:	e31a0008 	tst	sl, #8	; 0x8
			sign = ' ';
			size--;
c7e235b4:	12477001 	subne	r7, r7, #1	; 0x1
c7e235b8:	13a0b020 	movne	fp, #32	; 0x20
			num = - (signed NUM_TYPE) num;
			size--;
		} else if (type & PLUS) {
			sign = '+';
			size--;
		} else if (type & SPACE) {
c7e235bc:	1a000000 	bne	c7e235c4 <number+0x90>
			sign = ' ';
			size--;
c7e235c0:	e3a0b000 	mov	fp, #0	; 0x0
		}
	}
	if (need_pfx) {
c7e235c4:	e59d2004 	ldr	r2, [sp, #4]
c7e235c8:	e3520000 	cmp	r2, #0	; 0x0
c7e235cc:	0a000003 	beq	c7e235e0 <number+0xac>
		size--;
		if (base == 16)
c7e235d0:	e59d3078 	ldr	r3, [sp, #120]
			sign = ' ';
			size--;
		}
	}
	if (need_pfx) {
		size--;
c7e235d4:	e2477001 	sub	r7, r7, #1	; 0x1
		if (base == 16)
c7e235d8:	e3530010 	cmp	r3, #16	; 0x10
			size--;
c7e235dc:	02477001 	subeq	r7, r7, #1	; 0x1
	}

	/* generate full string in tmp[], in reverse order */
	i = 0;
	if (num == 0)
c7e235e0:	e1950006 	orrs	r0, r5, r6
		tmp[i++] = '0';
c7e235e4:	03a03030 	moveq	r3, #48	; 0x30
c7e235e8:	05cd3016 	strbeq	r3, [sp, #22]
c7e235ec:	03a04001 	moveq	r4, #1	; 0x1
			size--;
	}

	/* generate full string in tmp[], in reverse order */
	i = 0;
	if (num == 0)
c7e235f0:	0a000023 	beq	c7e23684 <number+0x150>
	/* Generic code, for any base:
	else do {
		tmp[i++] = (digits[do_div(num,base)] | locase);
	} while (num != 0);
	*/
	else if (base != 10) { /* 8 or 16 */
c7e235f4:	e59d1078 	ldr	r1, [sp, #120]
c7e235f8:	e351000a 	cmp	r1, #10	; 0xa
c7e235fc:	0a00001a 	beq	c7e2366c <number+0x138>
		int mask = base - 1;
		int shift = 3;
		if (base == 16) shift = 4;
c7e23600:	e3510010 	cmp	r1, #16	; 0x10
c7e23604:	03a02004 	moveq	r2, #4	; 0x4
c7e23608:	13a02003 	movne	r2, #3	; 0x3
	else do {
		tmp[i++] = (digits[do_div(num,base)] | locase);
	} while (num != 0);
	*/
	else if (base != 10) { /* 8 or 16 */
		int mask = base - 1;
c7e2360c:	e2413001 	sub	r3, r1, #1	; 0x1
		int shift = 3;
		if (base == 16) shift = 4;
c7e23610:	e58d200c 	str	r2, [sp, #12]
	else do {
		tmp[i++] = (digits[do_div(num,base)] | locase);
	} while (num != 0);
	*/
	else if (base != 10) { /* 8 or 16 */
		int mask = base - 1;
c7e23614:	e58d3008 	str	r3, [sp, #8]
		int shift = 3;
		if (base == 16) shift = 4;
c7e23618:	e3a04000 	mov	r4, #0	; 0x0
		do {
			tmp[i++] = (digits[((unsigned char)num) & mask] | locase);
c7e2361c:	e59d0008 	ldr	r0, [sp, #8]
c7e23620:	e20520ff 	and	r2, r5, #255	; 0xff
c7e23624:	e59f316c 	ldr	r3, [pc, #364]	; c7e23798 <number+0x264>
c7e23628:	e0022000 	and	r2, r2, r0
c7e2362c:	e0833002 	add	r3, r3, r2
c7e23630:	e5d3c011 	ldrb	ip, [r3, #17]
c7e23634:	e59d2000 	ldr	r2, [sp]
c7e23638:	e28d3016 	add	r3, sp, #22	; 0x16
c7e2363c:	e182c00c 	orr	ip, r2, ip
			num >>= shift;
c7e23640:	e1a00005 	mov	r0, r5
c7e23644:	e1a01006 	mov	r1, r6
c7e23648:	e59d200c 	ldr	r2, [sp, #12]
	else if (base != 10) { /* 8 or 16 */
		int mask = base - 1;
		int shift = 3;
		if (base == 16) shift = 4;
		do {
			tmp[i++] = (digits[((unsigned char)num) & mask] | locase);
c7e2364c:	e7c3c004 	strb	ip, [r3, r4]
			num >>= shift;
c7e23650:	eb001c43 	bl	c7e2a764 <__lshrdi3>
		} while (num);
c7e23654:	e1903001 	orrs	r3, r0, r1
		int mask = base - 1;
		int shift = 3;
		if (base == 16) shift = 4;
		do {
			tmp[i++] = (digits[((unsigned char)num) & mask] | locase);
			num >>= shift;
c7e23658:	e1a05000 	mov	r5, r0
c7e2365c:	e1a06001 	mov	r6, r1
	else if (base != 10) { /* 8 or 16 */
		int mask = base - 1;
		int shift = 3;
		if (base == 16) shift = 4;
		do {
			tmp[i++] = (digits[((unsigned char)num) & mask] | locase);
c7e23660:	e2844001 	add	r4, r4, #1	; 0x1
			num >>= shift;
		} while (num);
c7e23664:	1affffec 	bne	c7e2361c <number+0xe8>
c7e23668:	ea000005 	b	c7e23684 <number+0x150>
	} else { /* base 10 */
		i = put_dec(tmp, num) - tmp;
c7e2366c:	e28d4016 	add	r4, sp, #22	; 0x16
c7e23670:	e1a00004 	mov	r0, r4
c7e23674:	e1a02005 	mov	r2, r5
c7e23678:	e1a03006 	mov	r3, r6
c7e2367c:	ebffff60 	bl	c7e23404 <put_dec>
c7e23680:	e0644000 	rsb	r4, r4, r0
c7e23684:	e59d3080 	ldr	r3, [sp, #128]
c7e23688:	e1540003 	cmp	r4, r3
c7e2368c:	a1a01004 	movge	r1, r4
c7e23690:	b1a01003 	movlt	r1, r3
	/* printing 100 using %2d gives "100", not "00" */
	if (i > precision)
		precision = i;
	/* leading space padding */
	size -= precision;
	if (!(type & (ZEROPAD + LEFT))) {
c7e23694:	e31a0011 	tst	sl, #17	; 0x11

	/* printing 100 using %2d gives "100", not "00" */
	if (i > precision)
		precision = i;
	/* leading space padding */
	size -= precision;
c7e23698:	e061c007 	rsb	ip, r1, r7
	if (!(type & (ZEROPAD + LEFT))) {
c7e2369c:	01a02009 	moveq	r2, r9
c7e236a0:	0a000002 	beq	c7e236b0 <number+0x17c>
c7e236a4:	ea000005 	b	c7e236c0 <number+0x18c>
		while (--size >= 0)
			ADDCH(buf, ' ');
c7e236a8:	e3a03020 	mov	r3, #32	; 0x20
c7e236ac:	e5423001 	strb	r3, [r2, #-1]
	if (i > precision)
		precision = i;
	/* leading space padding */
	size -= precision;
	if (!(type & (ZEROPAD + LEFT))) {
		while (--size >= 0)
c7e236b0:	e25cc001 	subs	ip, ip, #1	; 0x1
			ADDCH(buf, ' ');
c7e236b4:	e1a09002 	mov	r9, r2
	if (i > precision)
		precision = i;
	/* leading space padding */
	size -= precision;
	if (!(type & (ZEROPAD + LEFT))) {
		while (--size >= 0)
c7e236b8:	e2822001 	add	r2, r2, #1	; 0x1
c7e236bc:	5afffff9 	bpl	c7e236a8 <number+0x174>
			ADDCH(buf, ' ');
	}
	/* sign */
	if (sign)
c7e236c0:	e35b0000 	cmp	fp, #0	; 0x0
		ADDCH(buf, sign);
c7e236c4:	14c9b001 	strbne	fp, [r9], #1
	/* "0x" / "0" prefix */
	if (need_pfx) {
c7e236c8:	e59d0004 	ldr	r0, [sp, #4]
c7e236cc:	e3500000 	cmp	r0, #0	; 0x0
c7e236d0:	0a000006 	beq	c7e236f0 <number+0x1bc>
		ADDCH(buf, '0');
		if (base == 16)
c7e236d4:	e59d2078 	ldr	r2, [sp, #120]
	/* sign */
	if (sign)
		ADDCH(buf, sign);
	/* "0x" / "0" prefix */
	if (need_pfx) {
		ADDCH(buf, '0');
c7e236d8:	e3a03030 	mov	r3, #48	; 0x30
		if (base == 16)
c7e236dc:	e3520010 	cmp	r2, #16	; 0x10
	/* sign */
	if (sign)
		ADDCH(buf, sign);
	/* "0x" / "0" prefix */
	if (need_pfx) {
		ADDCH(buf, '0');
c7e236e0:	e4c93001 	strb	r3, [r9], #1
		if (base == 16)
			ADDCH(buf, 'X' | locase);
c7e236e4:	059d0000 	ldreq	r0, [sp]
c7e236e8:	03803058 	orreq	r3, r0, #88	; 0x58
c7e236ec:	04c93001 	strbeq	r3, [r9], #1
	}
	/* zero or space padding */
	if (!(type & LEFT)) {
c7e236f0:	e31a0010 	tst	sl, #16	; 0x10
c7e236f4:	1a000009 	bne	c7e23720 <number+0x1ec>
		char c = (type & ZEROPAD) ? '0' : ' ';
c7e236f8:	e31a0001 	tst	sl, #1	; 0x1
c7e236fc:	13a02030 	movne	r2, #48	; 0x30
c7e23700:	03a02020 	moveq	r2, #32	; 0x20
c7e23704:	e1a03009 	mov	r3, r9
c7e23708:	ea000000 	b	c7e23710 <number+0x1dc>

		while (--size >= 0)
			ADDCH(buf, c);
c7e2370c:	e5432001 	strb	r2, [r3, #-1]
	}
	/* zero or space padding */
	if (!(type & LEFT)) {
		char c = (type & ZEROPAD) ? '0' : ' ';

		while (--size >= 0)
c7e23710:	e25cc001 	subs	ip, ip, #1	; 0x1
			ADDCH(buf, c);
c7e23714:	e1a09003 	mov	r9, r3
	}
	/* zero or space padding */
	if (!(type & LEFT)) {
		char c = (type & ZEROPAD) ? '0' : ' ';

		while (--size >= 0)
c7e23718:	e2833001 	add	r3, r3, #1	; 0x1
c7e2371c:	5afffffa 	bpl	c7e2370c <number+0x1d8>
c7e23720:	e1a00009 	mov	r0, r9
c7e23724:	ea000001 	b	c7e23730 <number+0x1fc>
			ADDCH(buf, c);
	}
	/* hmm even more zero padding? */
	while (i <= --precision)
		ADDCH(buf, '0');
c7e23728:	e3a03030 	mov	r3, #48	; 0x30
c7e2372c:	e5403001 	strb	r3, [r0, #-1]

		while (--size >= 0)
			ADDCH(buf, c);
	}
	/* hmm even more zero padding? */
	while (i <= --precision)
c7e23730:	e2411001 	sub	r1, r1, #1	; 0x1
c7e23734:	e1540001 	cmp	r4, r1
		ADDCH(buf, '0');
c7e23738:	e1a02000 	mov	r2, r0

		while (--size >= 0)
			ADDCH(buf, c);
	}
	/* hmm even more zero padding? */
	while (i <= --precision)
c7e2373c:	e2800001 	add	r0, r0, #1	; 0x1
c7e23740:	dafffff8 	ble	c7e23728 <number+0x1f4>
c7e23744:	e28d1058 	add	r1, sp, #88	; 0x58
c7e23748:	e0813004 	add	r3, r1, r4
c7e2374c:	e2431043 	sub	r1, r3, #67	; 0x43
c7e23750:	ea000001 	b	c7e2375c <number+0x228>
		ADDCH(buf, '0');
	/* actual digits of result */
	while (--i >= 0)
		ADDCH(buf, tmp[i]);
c7e23754:	e5d13001 	ldrb	r3, [r1, #1]
c7e23758:	e5423001 	strb	r3, [r2, #-1]
	}
	/* hmm even more zero padding? */
	while (i <= --precision)
		ADDCH(buf, '0');
	/* actual digits of result */
	while (--i >= 0)
c7e2375c:	e2544001 	subs	r4, r4, #1	; 0x1
		ADDCH(buf, tmp[i]);
c7e23760:	e1a03002 	mov	r3, r2
	}
	/* hmm even more zero padding? */
	while (i <= --precision)
		ADDCH(buf, '0');
	/* actual digits of result */
	while (--i >= 0)
c7e23764:	e2411001 	sub	r1, r1, #1	; 0x1
c7e23768:	e2822001 	add	r2, r2, #1	; 0x1
c7e2376c:	5afffff8 	bpl	c7e23754 <number+0x220>
c7e23770:	e1a02003 	mov	r2, r3
c7e23774:	ea000001 	b	c7e23780 <number+0x24c>
		ADDCH(buf, tmp[i]);
	/* trailing space padding */
	while (--size >= 0)
		ADDCH(buf, ' ');
c7e23778:	e3a03020 	mov	r3, #32	; 0x20
c7e2377c:	e5423001 	strb	r3, [r2, #-1]
		ADDCH(buf, '0');
	/* actual digits of result */
	while (--i >= 0)
		ADDCH(buf, tmp[i]);
	/* trailing space padding */
	while (--size >= 0)
c7e23780:	e25cc001 	subs	ip, ip, #1	; 0x1
		ADDCH(buf, ' ');
c7e23784:	e1a00002 	mov	r0, r2
		ADDCH(buf, '0');
	/* actual digits of result */
	while (--i >= 0)
		ADDCH(buf, tmp[i]);
	/* trailing space padding */
	while (--size >= 0)
c7e23788:	e2822001 	add	r2, r2, #1	; 0x1
c7e2378c:	5afffff9 	bpl	c7e23778 <number+0x244>
		ADDCH(buf, ' ');
	return buf;
}
c7e23790:	e28dd058 	add	sp, sp, #88	; 0x58
c7e23794:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e23798:	c7e2d24a 	.word	0xc7e2d24a

c7e2379c <vsprintf>:
 * buffer overflows.
 *
 * If you're not already dealing with a va_list consider using sprintf().
 */
int vsprintf(char *buf, const char *fmt, va_list args)
{
c7e2379c:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */
				/* 'z' support added 23/7/1999 S.H.    */
				/* 'z' changed to 'Z' --davidm 1/25/99 */
				/* 't' added for ptrdiff_t */
	char *end = buf + size;
c7e237a0:	e2403106 	sub	r3, r0, #-2147483647	; 0x80000001
 * buffer overflows.
 *
 * If you're not already dealing with a va_list consider using sprintf().
 */
int vsprintf(char *buf, const char *fmt, va_list args)
{
c7e237a4:	e24dd078 	sub	sp, sp, #120	; 0x78
c7e237a8:	e58d0010 	str	r0, [sp, #16]
	return vsnprintf_internal(buf, INT_MAX, fmt, args);
c7e237ac:	e58d1070 	str	r1, [sp, #112]
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */
				/* 'z' support added 23/7/1999 S.H.    */
				/* 'z' changed to 'Z' --davidm 1/25/99 */
				/* 't' added for ptrdiff_t */
	char *end = buf + size;
c7e237b0:	e1a04002 	mov	r4, r2
c7e237b4:	e58d3014 	str	r3, [sp, #20]
c7e237b8:	e1a09000 	mov	r9, r0
c7e237bc:	ea000190 	b	c7e23e04 <vsprintf+0x668>
	}
#endif
	str = buf;

	for (; *fmt ; ++fmt) {
		if (*fmt != '%') {
c7e237c0:	e3530025 	cmp	r3, #37	; 0x25
c7e237c4:	1a00013d 	bne	c7e23cc0 <vsprintf+0x524>
c7e237c8:	e3a05000 	mov	r5, #0	; 0x0
		}

		/* process flags */
		flags = 0;
		repeat:
			++fmt;		/* this also skips first '%' */
c7e237cc:	e59d3070 	ldr	r3, [sp, #112]
c7e237d0:	e2831001 	add	r1, r3, #1	; 0x1
c7e237d4:	e58d1070 	str	r1, [sp, #112]
			switch (*fmt) {
c7e237d8:	e5d32001 	ldrb	r2, [r3, #1]
c7e237dc:	e352002b 	cmp	r2, #43	; 0x2b
c7e237e0:	0a00000c 	beq	c7e23818 <vsprintf+0x7c>
c7e237e4:	8a000004 	bhi	c7e237fc <vsprintf+0x60>
c7e237e8:	e3520020 	cmp	r2, #32	; 0x20
c7e237ec:	0a00000b 	beq	c7e23820 <vsprintf+0x84>
c7e237f0:	e3520023 	cmp	r2, #35	; 0x23
c7e237f4:	1a00000f 	bne	c7e23838 <vsprintf+0x9c>
c7e237f8:	ea00000a 	b	c7e23828 <vsprintf+0x8c>
c7e237fc:	e352002d 	cmp	r2, #45	; 0x2d
c7e23800:	0a000002 	beq	c7e23810 <vsprintf+0x74>
c7e23804:	e3520030 	cmp	r2, #48	; 0x30
c7e23808:	1a00000a 	bne	c7e23838 <vsprintf+0x9c>
c7e2380c:	ea000007 	b	c7e23830 <vsprintf+0x94>
				case '-': flags |= LEFT; goto repeat;
c7e23810:	e3855010 	orr	r5, r5, #16	; 0x10
c7e23814:	eaffffec 	b	c7e237cc <vsprintf+0x30>
				case '+': flags |= PLUS; goto repeat;
c7e23818:	e3855004 	orr	r5, r5, #4	; 0x4
c7e2381c:	eaffffea 	b	c7e237cc <vsprintf+0x30>
				case ' ': flags |= SPACE; goto repeat;
c7e23820:	e3855008 	orr	r5, r5, #8	; 0x8
c7e23824:	eaffffe8 	b	c7e237cc <vsprintf+0x30>
				case '#': flags |= SPECIAL; goto repeat;
c7e23828:	e3855040 	orr	r5, r5, #64	; 0x40
c7e2382c:	eaffffe6 	b	c7e237cc <vsprintf+0x30>
				case '0': flags |= ZEROPAD; goto repeat;
c7e23830:	e3855001 	orr	r5, r5, #1	; 0x1
c7e23834:	eaffffe4 	b	c7e237cc <vsprintf+0x30>
			}

		/* get field width */
		field_width = -1;
		if (is_digit(*fmt))
c7e23838:	e2423030 	sub	r3, r2, #48	; 0x30
c7e2383c:	e3530009 	cmp	r3, #9	; 0x9
c7e23840:	8a000004 	bhi	c7e23858 <vsprintf+0xbc>
			field_width = skip_atoi(&fmt);
c7e23844:	e28d0070 	add	r0, sp, #112	; 0x70
c7e23848:	ebfffe50 	bl	c7e23190 <skip_atoi>
c7e2384c:	e1a0a004 	mov	sl, r4
c7e23850:	e1a0b000 	mov	fp, r0
c7e23854:	ea00000a 	b	c7e23884 <vsprintf+0xe8>
		else if (*fmt == '*') {
c7e23858:	e352002a 	cmp	r2, #42	; 0x2a
c7e2385c:	11a0a004 	movne	sl, r4
c7e23860:	13e0b000 	mvnne	fp, #0	; 0x0
c7e23864:	1a000006 	bne	c7e23884 <vsprintf+0xe8>
			++fmt;
			/* it's the next argument */
			field_width = va_arg(args, int);
c7e23868:	e594b000 	ldr	fp, [r4]
		/* get field width */
		field_width = -1;
		if (is_digit(*fmt))
			field_width = skip_atoi(&fmt);
		else if (*fmt == '*') {
			++fmt;
c7e2386c:	e2813001 	add	r3, r1, #1	; 0x1
			/* it's the next argument */
			field_width = va_arg(args, int);
			if (field_width < 0) {
c7e23870:	e35b0000 	cmp	fp, #0	; 0x0
		/* get field width */
		field_width = -1;
		if (is_digit(*fmt))
			field_width = skip_atoi(&fmt);
		else if (*fmt == '*') {
			++fmt;
c7e23874:	e58d3070 	str	r3, [sp, #112]
			/* it's the next argument */
			field_width = va_arg(args, int);
c7e23878:	e284a004 	add	sl, r4, #4	; 0x4
			if (field_width < 0) {
				field_width = -field_width;
c7e2387c:	b26bb000 	rsblt	fp, fp, #0	; 0x0
				flags |= LEFT;
c7e23880:	b3855010 	orrlt	r5, r5, #16	; 0x10
			}
		}

		/* get the precision */
		precision = -1;
		if (*fmt == '.') {
c7e23884:	e59d2070 	ldr	r2, [sp, #112]
c7e23888:	e5d23000 	ldrb	r3, [r2]
c7e2388c:	e353002e 	cmp	r3, #46	; 0x2e
c7e23890:	13e0c000 	mvnne	ip, #0	; 0x0
c7e23894:	11a0400a 	movne	r4, sl
c7e23898:	158dc018 	strne	ip, [sp, #24]
c7e2389c:	1a000017 	bne	c7e23900 <vsprintf+0x164>
			++fmt;
c7e238a0:	e2821001 	add	r1, r2, #1	; 0x1
c7e238a4:	e58d1070 	str	r1, [sp, #112]
			if (is_digit(*fmt))
c7e238a8:	e5d22001 	ldrb	r2, [r2, #1]
c7e238ac:	e2423030 	sub	r3, r2, #48	; 0x30
c7e238b0:	e3530009 	cmp	r3, #9	; 0x9
c7e238b4:	8a000003 	bhi	c7e238c8 <vsprintf+0x12c>
				precision = skip_atoi(&fmt);
c7e238b8:	e28d0070 	add	r0, sp, #112	; 0x70
c7e238bc:	ebfffe33 	bl	c7e23190 <skip_atoi>
c7e238c0:	e58d0018 	str	r0, [sp, #24]
c7e238c4:	ea000006 	b	c7e238e4 <vsprintf+0x148>
			else if (*fmt == '*') {
c7e238c8:	e352002a 	cmp	r2, #42	; 0x2a
c7e238cc:	1a000008 	bne	c7e238f4 <vsprintf+0x158>
				++fmt;
c7e238d0:	e2813001 	add	r3, r1, #1	; 0x1
c7e238d4:	e58d3070 	str	r3, [sp, #112]
				/* it's the next argument */
				precision = va_arg(args, int);
c7e238d8:	e59a3000 	ldr	r3, [sl]
c7e238dc:	e28aa004 	add	sl, sl, #4	; 0x4
c7e238e0:	e58d3018 	str	r3, [sp, #24]
			}
			if (precision < 0)
c7e238e4:	e59dc018 	ldr	ip, [sp, #24]
c7e238e8:	e35c0000 	cmp	ip, #0	; 0x0
c7e238ec:	a1a0400a 	movge	r4, sl
c7e238f0:	aa000002 	bge	c7e23900 <vsprintf+0x164>
c7e238f4:	e3a03000 	mov	r3, #0	; 0x0
c7e238f8:	e1a0400a 	mov	r4, sl
c7e238fc:	e58d3018 	str	r3, [sp, #24]
				precision = 0;
		}

		/* get the conversion qualifier */
		qualifier = -1;
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c7e23900:	e59d1070 	ldr	r1, [sp, #112]
c7e23904:	e5d13000 	ldrb	r3, [r1]
c7e23908:	e353006c 	cmp	r3, #108	; 0x6c
c7e2390c:	13530068 	cmpne	r3, #104	; 0x68
c7e23910:	0a000008 	beq	c7e23938 <vsprintf+0x19c>
c7e23914:	e353004c 	cmp	r3, #76	; 0x4c
c7e23918:	0a000006 	beq	c7e23938 <vsprintf+0x19c>
c7e2391c:	e353005a 	cmp	r3, #90	; 0x5a
c7e23920:	0a000004 	beq	c7e23938 <vsprintf+0x19c>
c7e23924:	e353007a 	cmp	r3, #122	; 0x7a
c7e23928:	0a000002 	beq	c7e23938 <vsprintf+0x19c>
c7e2392c:	e3530074 	cmp	r3, #116	; 0x74
c7e23930:	13e02000 	mvnne	r2, #0	; 0x0
c7e23934:	1a000009 	bne	c7e23960 <vsprintf+0x1c4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't') {
			qualifier = *fmt;
			++fmt;
c7e23938:	e2810001 	add	r0, r1, #1	; 0x1
			if (qualifier == 'l' && *fmt == 'l') {
c7e2393c:	e353006c 	cmp	r3, #108	; 0x6c

		/* get the conversion qualifier */
		qualifier = -1;
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't') {
			qualifier = *fmt;
c7e23940:	e1a02003 	mov	r2, r3
			++fmt;
c7e23944:	e58d0070 	str	r0, [sp, #112]
			if (qualifier == 'l' && *fmt == 'l') {
c7e23948:	1a000004 	bne	c7e23960 <vsprintf+0x1c4>
c7e2394c:	e5d13001 	ldrb	r3, [r1, #1]
c7e23950:	e353006c 	cmp	r3, #108	; 0x6c
				qualifier = 'L';
				++fmt;
c7e23954:	02803001 	addeq	r3, r0, #1	; 0x1
c7e23958:	058d3070 	streq	r3, [sp, #112]
c7e2395c:	03a0204c 	moveq	r2, #76	; 0x4c
		}

		/* default base */
		base = 10;

		switch (*fmt) {
c7e23960:	e59d1070 	ldr	r1, [sp, #112]
c7e23964:	e5d13000 	ldrb	r3, [r1]
c7e23968:	e353006e 	cmp	r3, #110	; 0x6e
c7e2396c:	0a0000cc 	beq	c7e23ca4 <vsprintf+0x508>
c7e23970:	8a00000c 	bhi	c7e239a8 <vsprintf+0x20c>
c7e23974:	e3530063 	cmp	r3, #99	; 0x63
c7e23978:	0a000017 	beq	c7e239dc <vsprintf+0x240>
c7e2397c:	8a000004 	bhi	c7e23994 <vsprintf+0x1f8>
c7e23980:	e3530025 	cmp	r3, #37	; 0x25
c7e23984:	0a0000cd 	beq	c7e23cc0 <vsprintf+0x524>
c7e23988:	e3530058 	cmp	r3, #88	; 0x58
c7e2398c:	1a0000d4 	bne	c7e23ce4 <vsprintf+0x548>
c7e23990:	ea0000cf 	b	c7e23cd4 <vsprintf+0x538>
c7e23994:	e3530064 	cmp	r3, #100	; 0x64
c7e23998:	0a0000cf 	beq	c7e23cdc <vsprintf+0x540>
c7e2399c:	e3530069 	cmp	r3, #105	; 0x69
c7e239a0:	1a0000cf 	bne	c7e23ce4 <vsprintf+0x548>
c7e239a4:	ea0000cc 	b	c7e23cdc <vsprintf+0x540>
c7e239a8:	e3530073 	cmp	r3, #115	; 0x73
c7e239ac:	0a000021 	beq	c7e23a38 <vsprintf+0x29c>
c7e239b0:	8a000004 	bhi	c7e239c8 <vsprintf+0x22c>
c7e239b4:	e353006f 	cmp	r3, #111	; 0x6f
c7e239b8:	0a0000c2 	beq	c7e23cc8 <vsprintf+0x52c>
c7e239bc:	e3530070 	cmp	r3, #112	; 0x70
c7e239c0:	1a0000c7 	bne	c7e23ce4 <vsprintf+0x548>
c7e239c4:	ea000025 	b	c7e23a60 <vsprintf+0x2c4>
c7e239c8:	e3530075 	cmp	r3, #117	; 0x75
c7e239cc:	0a0000cd 	beq	c7e23d08 <vsprintf+0x56c>
c7e239d0:	e3530078 	cmp	r3, #120	; 0x78
c7e239d4:	1a0000c2 	bne	c7e23ce4 <vsprintf+0x548>
c7e239d8:	ea0000bc 	b	c7e23cd0 <vsprintf+0x534>
		case 'c':
			if (!(flags & LEFT)) {
c7e239dc:	e3150010 	tst	r5, #16	; 0x10
c7e239e0:	01a02009 	moveq	r2, r9
c7e239e4:	0a000002 	beq	c7e239f4 <vsprintf+0x258>
c7e239e8:	ea000006 	b	c7e23a08 <vsprintf+0x26c>
				while (--field_width > 0)
					ADDCH(str, ' ');
c7e239ec:	e3a03020 	mov	r3, #32	; 0x20
c7e239f0:	e5423001 	strb	r3, [r2, #-1]
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT)) {
				while (--field_width > 0)
c7e239f4:	e24bb001 	sub	fp, fp, #1	; 0x1
c7e239f8:	e35b0000 	cmp	fp, #0	; 0x0
					ADDCH(str, ' ');
c7e239fc:	e1a09002 	mov	r9, r2
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT)) {
				while (--field_width > 0)
c7e23a00:	e2822001 	add	r2, r2, #1	; 0x1
c7e23a04:	cafffff8 	bgt	c7e239ec <vsprintf+0x250>
					ADDCH(str, ' ');
			}
			ADDCH(str, (unsigned char) va_arg(args, int));
c7e23a08:	e59a3000 	ldr	r3, [sl]
c7e23a0c:	e1a02009 	mov	r2, r9
c7e23a10:	e4c23001 	strb	r3, [r2], #1
c7e23a14:	ea000001 	b	c7e23a20 <vsprintf+0x284>
			while (--field_width > 0)
				ADDCH(str, ' ');
c7e23a18:	e3a03020 	mov	r3, #32	; 0x20
c7e23a1c:	e5423001 	strb	r3, [r2, #-1]
			if (!(flags & LEFT)) {
				while (--field_width > 0)
					ADDCH(str, ' ');
			}
			ADDCH(str, (unsigned char) va_arg(args, int));
			while (--field_width > 0)
c7e23a20:	e24bb001 	sub	fp, fp, #1	; 0x1
c7e23a24:	e35b0000 	cmp	fp, #0	; 0x0
				ADDCH(str, ' ');
c7e23a28:	e1a09002 	mov	r9, r2
			if (!(flags & LEFT)) {
				while (--field_width > 0)
					ADDCH(str, ' ');
			}
			ADDCH(str, (unsigned char) va_arg(args, int));
			while (--field_width > 0)
c7e23a2c:	e2822001 	add	r2, r2, #1	; 0x1
c7e23a30:	cafffff8 	bgt	c7e23a18 <vsprintf+0x27c>
c7e23a34:	ea000098 	b	c7e23c9c <vsprintf+0x500>
				ADDCH(str, ' ');
			continue;

		case 's':
			str = string(str, end, va_arg(args, char *),
c7e23a38:	e59dc018 	ldr	ip, [sp, #24]
c7e23a3c:	e58d5004 	str	r5, [sp, #4]
c7e23a40:	e58dc000 	str	ip, [sp]
c7e23a44:	e1a00009 	mov	r0, r9
c7e23a48:	e59a2000 	ldr	r2, [sl]
c7e23a4c:	e1a0300b 	mov	r3, fp
c7e23a50:	e59d1014 	ldr	r1, [sp, #20]
c7e23a54:	e28a4004 	add	r4, sl, #4	; 0x4
c7e23a58:	ebfffe3d 	bl	c7e23354 <string>
c7e23a5c:	ea0000e4 	b	c7e23df4 <vsprintf+0x658>
				     field_width, precision, flags);
			continue;

		case 'p':
			str = pointer(fmt+1, str, end,
c7e23a60:	e59ae000 	ldr	lr, [sl]
 * pointer to the real address.
 */
static char *pointer(const char *fmt, char *buf, char *end, void *ptr,
		int field_width, int precision, int flags)
{
	if (!ptr)
c7e23a64:	e35e0000 	cmp	lr, #0	; 0x0
			str = string(str, end, va_arg(args, char *),
				     field_width, precision, flags);
			continue;

		case 'p':
			str = pointer(fmt+1, str, end,
c7e23a68:	e58de01c 	str	lr, [sp, #28]
 * pointer to the real address.
 */
static char *pointer(const char *fmt, char *buf, char *end, void *ptr,
		int field_width, int precision, int flags)
{
	if (!ptr)
c7e23a6c:	1a000007 	bne	c7e23a90 <vsprintf+0x2f4>
		return string(buf, end, "(null)", field_width, precision,
c7e23a70:	e59dc018 	ldr	ip, [sp, #24]
c7e23a74:	e1a00009 	mov	r0, r9
c7e23a78:	e1a0300b 	mov	r3, fp
c7e23a7c:	e59d1014 	ldr	r1, [sp, #20]
c7e23a80:	e59f23a0 	ldr	r2, [pc, #928]	; c7e23e28 <vsprintf+0x68c>
c7e23a84:	e58dc000 	str	ip, [sp]
c7e23a88:	e58d5004 	str	r5, [sp, #4]
c7e23a8c:	ea000026 	b	c7e23b2c <vsprintf+0x390>
			      flags);

#ifdef CONFIG_CMD_NET
	switch (*fmt) {
c7e23a90:	e5d13001 	ldrb	r3, [r1, #1]
			str = string(str, end, va_arg(args, char *),
				     field_width, precision, flags);
			continue;

		case 'p':
			str = pointer(fmt+1, str, end,
c7e23a94:	e2812001 	add	r2, r1, #1	; 0x1
	if (!ptr)
		return string(buf, end, "(null)", field_width, precision,
			      flags);

#ifdef CONFIG_CMD_NET
	switch (*fmt) {
c7e23a98:	e353004d 	cmp	r3, #77	; 0x4d
c7e23a9c:	0a000008 	beq	c7e23ac4 <vsprintf+0x328>
c7e23aa0:	8a000002 	bhi	c7e23ab0 <vsprintf+0x314>
c7e23aa4:	e3530049 	cmp	r3, #73	; 0x49
c7e23aa8:	1a000065 	bne	c7e23c44 <vsprintf+0x4a8>
c7e23aac:	ea000022 	b	c7e23b3c <vsprintf+0x3a0>
c7e23ab0:	e3530069 	cmp	r3, #105	; 0x69
c7e23ab4:	0a00001f 	beq	c7e23b38 <vsprintf+0x39c>
c7e23ab8:	e353006d 	cmp	r3, #109	; 0x6d
c7e23abc:	1a000060 	bne	c7e23c44 <vsprintf+0x4a8>
	case 'm':
		flags |= SPECIAL;
c7e23ac0:	e3855040 	orr	r5, r5, #64	; 0x40
c7e23ac4:	e3a04000 	mov	r4, #0	; 0x0
c7e23ac8:	e28d004e 	add	r0, sp, #78	; 0x4e
	char mac_addr[6 * 3]; /* (6 * 2 hex digits), 5 colons and trailing zero */
	char *p = mac_addr;
	int i;

	for (i = 0; i < 6; i++) {
		p = pack_hex_byte(p, addr[i]);
c7e23acc:	e59de01c 	ldr	lr, [sp, #28]
c7e23ad0:	e7de1004 	ldrb	r1, [lr, r4]
c7e23ad4:	ebfffd16 	bl	c7e22f34 <pack_hex_byte>
		if (!(flags & SPECIAL) && i != 5)
c7e23ad8:	e1a03325 	lsr	r3, r5, #6
c7e23adc:	e2233001 	eor	r3, r3, #1	; 0x1
c7e23ae0:	e3540005 	cmp	r4, #5	; 0x5
c7e23ae4:	03a03000 	moveq	r3, #0	; 0x0
c7e23ae8:	12033001 	andne	r3, r3, #1	; 0x1
c7e23aec:	e3530000 	cmp	r3, #0	; 0x0
			*p++ = ':';
c7e23af0:	13a0303a 	movne	r3, #58	; 0x3a
{
	char mac_addr[6 * 3]; /* (6 * 2 hex digits), 5 colons and trailing zero */
	char *p = mac_addr;
	int i;

	for (i = 0; i < 6; i++) {
c7e23af4:	e2844001 	add	r4, r4, #1	; 0x1
		p = pack_hex_byte(p, addr[i]);
		if (!(flags & SPECIAL) && i != 5)
			*p++ = ':';
c7e23af8:	14c03001 	strbne	r3, [r0], #1
{
	char mac_addr[6 * 3]; /* (6 * 2 hex digits), 5 colons and trailing zero */
	char *p = mac_addr;
	int i;

	for (i = 0; i < 6; i++) {
c7e23afc:	e3540006 	cmp	r4, #6	; 0x6
c7e23b00:	1afffff1 	bne	c7e23acc <vsprintf+0x330>
		p = pack_hex_byte(p, addr[i]);
		if (!(flags & SPECIAL) && i != 5)
			*p++ = ':';
	}
	*p = '\0';
c7e23b04:	e3a03000 	mov	r3, #0	; 0x0
c7e23b08:	e5c03000 	strb	r3, [r0]

	return string(buf, end, mac_addr, field_width, precision,
c7e23b0c:	e59d1014 	ldr	r1, [sp, #20]
c7e23b10:	e3c5c040 	bic	ip, r5, #64	; 0x40
c7e23b14:	e1a00009 	mov	r0, r9
c7e23b18:	e1a0300b 	mov	r3, fp
c7e23b1c:	e28d204e 	add	r2, sp, #78	; 0x4e
c7e23b20:	e59de018 	ldr	lr, [sp, #24]
c7e23b24:	e58dc004 	str	ip, [sp, #4]
c7e23b28:	e58de000 	str	lr, [sp]
c7e23b2c:	ebfffe08 	bl	c7e23354 <string>
c7e23b30:	e1a09000 	mov	r9, r0
c7e23b34:	ea000051 	b	c7e23c80 <vsprintf+0x4e4>
		/* Fallthrough */
	case 'M':
		return mac_address_string(buf, end, ptr, field_width,
					  precision, flags);
	case 'i':
		flags |= SPECIAL;
c7e23b38:	e3855040 	orr	r5, r5, #64	; 0x40
		/* Fallthrough */
	case 'I':
		if (fmt[1] == '6')
c7e23b3c:	e5d23001 	ldrb	r3, [r2, #1]
c7e23b40:	e3530036 	cmp	r3, #54	; 0x36
c7e23b44:	1a00001a 	bne	c7e23bb4 <vsprintf+0x418>
c7e23b48:	e59d601c 	ldr	r6, [sp, #28]
c7e23b4c:	e3a04000 	mov	r4, #0	; 0x0
c7e23b50:	e28d0026 	add	r0, sp, #38	; 0x26
	char ip6_addr[8 * 5]; /* (8 * 4 hex digits), 7 colons and trailing zero */
	char *p = ip6_addr;
	int i;

	for (i = 0; i < 8; i++) {
		p = pack_hex_byte(p, addr[2 * i]);
c7e23b54:	e5d61000 	ldrb	r1, [r6]
c7e23b58:	ebfffcf5 	bl	c7e22f34 <pack_hex_byte>
		p = pack_hex_byte(p, addr[2 * i + 1]);
c7e23b5c:	e5d61001 	ldrb	r1, [r6, #1]
c7e23b60:	ebfffcf3 	bl	c7e22f34 <pack_hex_byte>
		if (!(flags & SPECIAL) && i != 7)
c7e23b64:	e1a03325 	lsr	r3, r5, #6
c7e23b68:	e2233001 	eor	r3, r3, #1	; 0x1
c7e23b6c:	e3540007 	cmp	r4, #7	; 0x7
c7e23b70:	03a03000 	moveq	r3, #0	; 0x0
c7e23b74:	12033001 	andne	r3, r3, #1	; 0x1
c7e23b78:	e3530000 	cmp	r3, #0	; 0x0
			*p++ = ':';
c7e23b7c:	13a0303a 	movne	r3, #58	; 0x3a
{
	char ip6_addr[8 * 5]; /* (8 * 4 hex digits), 7 colons and trailing zero */
	char *p = ip6_addr;
	int i;

	for (i = 0; i < 8; i++) {
c7e23b80:	e2844001 	add	r4, r4, #1	; 0x1
		p = pack_hex_byte(p, addr[2 * i]);
		p = pack_hex_byte(p, addr[2 * i + 1]);
		if (!(flags & SPECIAL) && i != 7)
			*p++ = ':';
c7e23b84:	14c03001 	strbne	r3, [r0], #1
{
	char ip6_addr[8 * 5]; /* (8 * 4 hex digits), 7 colons and trailing zero */
	char *p = ip6_addr;
	int i;

	for (i = 0; i < 8; i++) {
c7e23b88:	e3540008 	cmp	r4, #8	; 0x8
c7e23b8c:	e2866002 	add	r6, r6, #2	; 0x2
c7e23b90:	1affffef 	bne	c7e23b54 <vsprintf+0x3b8>
		p = pack_hex_byte(p, addr[2 * i]);
		p = pack_hex_byte(p, addr[2 * i + 1]);
		if (!(flags & SPECIAL) && i != 7)
			*p++ = ':';
	}
	*p = '\0';
c7e23b94:	e3a03000 	mov	r3, #0	; 0x0
c7e23b98:	e5c03000 	strb	r3, [r0]

	return string(buf, end, ip6_addr, field_width, precision,
c7e23b9c:	e3c5c040 	bic	ip, r5, #64	; 0x40
c7e23ba0:	e1a00009 	mov	r0, r9
c7e23ba4:	e1a0300b 	mov	r3, fp
c7e23ba8:	e59d1014 	ldr	r1, [sp, #20]
c7e23bac:	e28d2026 	add	r2, sp, #38	; 0x26
c7e23bb0:	eaffffda 	b	c7e23b20 <vsprintf+0x384>
		/* Fallthrough */
	case 'I':
		if (fmt[1] == '6')
			return ip6_addr_string(buf, end, ptr, field_width,
					       precision, flags);
		if (fmt[1] == '4')
c7e23bb4:	e3530034 	cmp	r3, #52	; 0x34
			return ip4_addr_string(buf, end, ptr, field_width,
					       precision, flags);
		flags &= ~SPECIAL;
c7e23bb8:	13c55040 	bicne	r5, r5, #64	; 0x40
		/* Fallthrough */
	case 'I':
		if (fmt[1] == '6')
			return ip6_addr_string(buf, end, ptr, field_width,
					       precision, flags);
		if (fmt[1] == '4')
c7e23bbc:	1a000020 	bne	c7e23c44 <vsprintf+0x4a8>
c7e23bc0:	e3a07000 	mov	r7, #0	; 0x0
c7e23bc4:	e28d6060 	add	r6, sp, #96	; 0x60
	char temp[3];	/* hold each IP quad in reverse order */
	char *p = ip4_addr;
	int i, digits;

	for (i = 0; i < 4; i++) {
		digits = put_dec_trunc(temp, addr[i]) - temp;
c7e23bc8:	e59d301c 	ldr	r3, [sp, #28]
c7e23bcc:	e28d4075 	add	r4, sp, #117	; 0x75
c7e23bd0:	e7d31007 	ldrb	r1, [r3, r7]
c7e23bd4:	e1a00004 	mov	r0, r4
c7e23bd8:	ebfffd7a 	bl	c7e231c8 <put_dec_trunc>
c7e23bdc:	e3a02000 	mov	r2, #0	; 0x0
c7e23be0:	e0641000 	rsb	r1, r4, r0
c7e23be4:	e2400001 	sub	r0, r0, #1	; 0x1
c7e23be8:	ea000002 	b	c7e23bf8 <vsprintf+0x45c>
		/* reverse the digits in the quad */
		while (digits--)
			*p++ = temp[digits];
c7e23bec:	e5d03001 	ldrb	r3, [r0, #1]
c7e23bf0:	e7c63002 	strb	r3, [r6, r2]
c7e23bf4:	e2822001 	add	r2, r2, #1	; 0x1
c7e23bf8:	e2400001 	sub	r0, r0, #1	; 0x1
	int i, digits;

	for (i = 0; i < 4; i++) {
		digits = put_dec_trunc(temp, addr[i]) - temp;
		/* reverse the digits in the quad */
		while (digits--)
c7e23bfc:	e28d3073 	add	r3, sp, #115	; 0x73
c7e23c00:	e1500003 	cmp	r0, r3
c7e23c04:	1afffff8 	bne	c7e23bec <vsprintf+0x450>
			*p++ = temp[digits];
		if (i != 3)
c7e23c08:	e3570003 	cmp	r7, #3	; 0x3
			*p++ = '.';
c7e23c0c:	13a0302e 	movne	r3, #46	; 0x2e
	int i, digits;

	for (i = 0; i < 4; i++) {
		digits = put_dec_trunc(temp, addr[i]) - temp;
		/* reverse the digits in the quad */
		while (digits--)
c7e23c10:	e0866001 	add	r6, r6, r1
	char ip4_addr[4 * 4]; /* (4 * 3 decimal digits), 3 dots and trailing zero */
	char temp[3];	/* hold each IP quad in reverse order */
	char *p = ip4_addr;
	int i, digits;

	for (i = 0; i < 4; i++) {
c7e23c14:	e2877001 	add	r7, r7, #1	; 0x1
		digits = put_dec_trunc(temp, addr[i]) - temp;
		/* reverse the digits in the quad */
		while (digits--)
			*p++ = temp[digits];
		if (i != 3)
			*p++ = '.';
c7e23c18:	14c63001 	strbne	r3, [r6], #1
	char ip4_addr[4 * 4]; /* (4 * 3 decimal digits), 3 dots and trailing zero */
	char temp[3];	/* hold each IP quad in reverse order */
	char *p = ip4_addr;
	int i, digits;

	for (i = 0; i < 4; i++) {
c7e23c1c:	e3570004 	cmp	r7, #4	; 0x4
c7e23c20:	1affffe8 	bne	c7e23bc8 <vsprintf+0x42c>
		while (digits--)
			*p++ = temp[digits];
		if (i != 3)
			*p++ = '.';
	}
	*p = '\0';
c7e23c24:	e3a03000 	mov	r3, #0	; 0x0
c7e23c28:	e5c63000 	strb	r3, [r6]

	return string(buf, end, ip4_addr, field_width, precision,
c7e23c2c:	e3c5c040 	bic	ip, r5, #64	; 0x40
c7e23c30:	e1a00009 	mov	r0, r9
c7e23c34:	e1a0300b 	mov	r3, fp
c7e23c38:	e59d1014 	ldr	r1, [sp, #20]
c7e23c3c:	e28d2060 	add	r2, sp, #96	; 0x60
c7e23c40:	eaffffb6 	b	c7e23b20 <vsprintf+0x384>
	flags |= SMALL;
	if (field_width == -1) {
		field_width = 2*sizeof(void *);
		flags |= ZEROPAD;
	}
	return number(buf, end, (unsigned long)ptr, 16, field_width,
c7e23c44:	e3a0c010 	mov	ip, #16	; 0x10
		flags &= ~SPECIAL;
		break;
	}
#endif
	flags |= SMALL;
	if (field_width == -1) {
c7e23c48:	e37b0001 	cmn	fp, #1	; 0x1
		field_width = 2*sizeof(void *);
		flags |= ZEROPAD;
	}
	return number(buf, end, (unsigned long)ptr, 16, field_width,
c7e23c4c:	e58dc000 	str	ip, [sp]
c7e23c50:	e59dc018 	ldr	ip, [sp, #24]
					       precision, flags);
		flags &= ~SPECIAL;
		break;
	}
#endif
	flags |= SMALL;
c7e23c54:	e385e020 	orr	lr, r5, #32	; 0x20
	if (field_width == -1) {
		field_width = 2*sizeof(void *);
		flags |= ZEROPAD;
c7e23c58:	028bb009 	addeq	fp, fp, #9	; 0x9
c7e23c5c:	0385e021 	orreq	lr, r5, #33	; 0x21
	}
	return number(buf, end, (unsigned long)ptr, 16, field_width,
c7e23c60:	e1a00009 	mov	r0, r9
c7e23c64:	e59d201c 	ldr	r2, [sp, #28]
c7e23c68:	e59d1014 	ldr	r1, [sp, #20]
c7e23c6c:	e3a03000 	mov	r3, #0	; 0x0
c7e23c70:	e98d5800 	stmib	sp, {fp, ip, lr}
c7e23c74:	ebfffe2e 	bl	c7e23534 <number>
c7e23c78:	eaffffac 	b	c7e23b30 <vsprintf+0x394>
			str = pointer(fmt+1, str, end,
					va_arg(args, void *),
					field_width, precision, flags);
			/* Skip all alphanumeric pointer suffixes */
			while (isalnum(fmt[1]))
				fmt++;
c7e23c7c:	e58d1070 	str	r1, [sp, #112]
		case 'p':
			str = pointer(fmt+1, str, end,
					va_arg(args, void *),
					field_width, precision, flags);
			/* Skip all alphanumeric pointer suffixes */
			while (isalnum(fmt[1]))
c7e23c80:	e59d3070 	ldr	r3, [sp, #112]
c7e23c84:	e5d32001 	ldrb	r2, [r3, #1]
c7e23c88:	e2831001 	add	r1, r3, #1	; 0x1
c7e23c8c:	e59f3198 	ldr	r3, [pc, #408]	; c7e23e2c <vsprintf+0x690>
c7e23c90:	e7d33002 	ldrb	r3, [r3, r2]
c7e23c94:	e3130007 	tst	r3, #7	; 0x7
c7e23c98:	1afffff7 	bne	c7e23c7c <vsprintf+0x4e0>
			str = string(str, end, va_arg(args, char *),
				     field_width, precision, flags);
			continue;

		case 'p':
			str = pointer(fmt+1, str, end,
c7e23c9c:	e28a4004 	add	r4, sl, #4	; 0x4
c7e23ca0:	ea000054 	b	c7e23df8 <vsprintf+0x65c>
c7e23ca4:	e59d3010 	ldr	r3, [sp, #16]
c7e23ca8:	e28a2004 	add	r2, sl, #4	; 0x4
c7e23cac:	e0631009 	rsb	r1, r3, r9
			if (qualifier == 'l') {
				long * ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int * ip = va_arg(args, int *);
				*ip = (str - buf);
c7e23cb0:	e59a3000 	ldr	r3, [sl]
c7e23cb4:	e1a04002 	mov	r4, r2
c7e23cb8:	e5831000 	str	r1, [r3]
c7e23cbc:	ea00004d 	b	c7e23df8 <vsprintf+0x65c>
			}
			continue;

		case '%':
			ADDCH(str, '%');
c7e23cc0:	e4c93001 	strb	r3, [r9], #1
c7e23cc4:	ea00004b 	b	c7e23df8 <vsprintf+0x65c>
c7e23cc8:	e3a0c008 	mov	ip, #8	; 0x8
c7e23ccc:	ea00000e 	b	c7e23d0c <vsprintf+0x570>
		case 'o':
			base = 8;
			break;

		case 'x':
			flags |= SMALL;
c7e23cd0:	e3855020 	orr	r5, r5, #32	; 0x20
c7e23cd4:	e3a0c010 	mov	ip, #16	; 0x10
c7e23cd8:	ea00000b 	b	c7e23d0c <vsprintf+0x570>
			base = 16;
			break;

		case 'd':
		case 'i':
			flags |= SIGN;
c7e23cdc:	e3855002 	orr	r5, r5, #2	; 0x2
c7e23ce0:	ea000008 	b	c7e23d08 <vsprintf+0x56c>
		case 'u':
			break;

		default:
			ADDCH(str, '%');
c7e23ce4:	e3a03025 	mov	r3, #37	; 0x25
c7e23ce8:	e4c93001 	strb	r3, [r9], #1
			if (*fmt)
c7e23cec:	e59d3070 	ldr	r3, [sp, #112]
c7e23cf0:	e5d32000 	ldrb	r2, [r3]
c7e23cf4:	e3520000 	cmp	r2, #0	; 0x0
				ADDCH(str, *fmt);
			else
				--fmt;
c7e23cf8:	02433001 	subeq	r3, r3, #1	; 0x1
			break;

		default:
			ADDCH(str, '%');
			if (*fmt)
				ADDCH(str, *fmt);
c7e23cfc:	14c92001 	strbne	r2, [r9], #1
			else
				--fmt;
c7e23d00:	058d3070 	streq	r3, [sp, #112]
c7e23d04:	ea00003b 	b	c7e23df8 <vsprintf+0x65c>
c7e23d08:	e3a0c00a 	mov	ip, #10	; 0xa
			continue;
		}
		if (qualifier == 'L')  /* "quad" for 64 bit variables */
c7e23d0c:	e352004c 	cmp	r2, #76	; 0x4c
			num = va_arg(args, unsigned long long);
c7e23d10:	028a3007 	addeq	r3, sl, #7	; 0x7
c7e23d14:	03c33007 	biceq	r3, r3, #7	; 0x7
c7e23d18:	08930006 	ldmeq	r3, {r1, r2}
c7e23d1c:	02834008 	addeq	r4, r3, #8	; 0x8
c7e23d20:	0a00002a 	beq	c7e23dd0 <vsprintf+0x634>
		else if (qualifier == 'l') {
c7e23d24:	e352006c 	cmp	r2, #108	; 0x6c
c7e23d28:	1a000006 	bne	c7e23d48 <vsprintf+0x5ac>
			num = va_arg(args, unsigned long);
c7e23d2c:	e59a3000 	ldr	r3, [sl]
			if (flags & SIGN)
c7e23d30:	e3150002 	tst	r5, #2	; 0x2
			continue;
		}
		if (qualifier == 'L')  /* "quad" for 64 bit variables */
			num = va_arg(args, unsigned long long);
		else if (qualifier == 'l') {
			num = va_arg(args, unsigned long);
c7e23d34:	e1a01003 	mov	r1, r3
c7e23d38:	e3a02000 	mov	r2, #0	; 0x0
c7e23d3c:	e28a4004 	add	r4, sl, #4	; 0x4
			if (flags & SIGN)
c7e23d40:	0a000022 	beq	c7e23dd0 <vsprintf+0x634>
c7e23d44:	ea000020 	b	c7e23dcc <vsprintf+0x630>
				num = (signed long) num;
		} else if (qualifier == 'Z' || qualifier == 'z') {
c7e23d48:	e352007a 	cmp	r2, #122	; 0x7a
c7e23d4c:	1352005a 	cmpne	r2, #90	; 0x5a
			num = va_arg(args, size_t);
c7e23d50:	059a3000 	ldreq	r3, [sl]
c7e23d54:	028a4004 	addeq	r4, sl, #4	; 0x4
c7e23d58:	01a01003 	moveq	r1, r3
c7e23d5c:	03a02000 	moveq	r2, #0	; 0x0
			num = va_arg(args, unsigned long long);
		else if (qualifier == 'l') {
			num = va_arg(args, unsigned long);
			if (flags & SIGN)
				num = (signed long) num;
		} else if (qualifier == 'Z' || qualifier == 'z') {
c7e23d60:	0a00001a 	beq	c7e23dd0 <vsprintf+0x634>
			num = va_arg(args, size_t);
		} else if (qualifier == 't') {
c7e23d64:	e3520074 	cmp	r2, #116	; 0x74
			num = va_arg(args, ptrdiff_t);
c7e23d68:	059a3000 	ldreq	r3, [sl]
c7e23d6c:	028a4004 	addeq	r4, sl, #4	; 0x4
			num = va_arg(args, unsigned long);
			if (flags & SIGN)
				num = (signed long) num;
		} else if (qualifier == 'Z' || qualifier == 'z') {
			num = va_arg(args, size_t);
		} else if (qualifier == 't') {
c7e23d70:	0a00000d 	beq	c7e23dac <vsprintf+0x610>
			num = va_arg(args, ptrdiff_t);
		} else if (qualifier == 'h') {
c7e23d74:	e3520068 	cmp	r2, #104	; 0x68
c7e23d78:	e59a3000 	ldr	r3, [sl]
c7e23d7c:	e28a2004 	add	r2, sl, #4	; 0x4
c7e23d80:	e2051002 	and	r1, r5, #2	; 0x2
c7e23d84:	1a00000b 	bne	c7e23db8 <vsprintf+0x61c>
			num = (unsigned short) va_arg(args, int);
c7e23d88:	e1a03803 	lsl	r3, r3, #16
			if (flags & SIGN)
c7e23d8c:	e3510000 	cmp	r1, #0	; 0x0
		} else if (qualifier == 'Z' || qualifier == 'z') {
			num = va_arg(args, size_t);
		} else if (qualifier == 't') {
			num = va_arg(args, ptrdiff_t);
		} else if (qualifier == 'h') {
			num = (unsigned short) va_arg(args, int);
c7e23d90:	e1a03823 	lsr	r3, r3, #16
c7e23d94:	e1a04002 	mov	r4, r2
c7e23d98:	e1a01003 	mov	r1, r3
c7e23d9c:	e3a02000 	mov	r2, #0	; 0x0
			if (flags & SIGN)
c7e23da0:	0a00000a 	beq	c7e23dd0 <vsprintf+0x634>
				num = (signed short) num;
c7e23da4:	e1a03801 	lsl	r3, r1, #16
c7e23da8:	e1a03843 	asr	r3, r3, #16
c7e23dac:	e1a01003 	mov	r1, r3
c7e23db0:	e1a02fc1 	asr	r2, r1, #31
c7e23db4:	ea000005 	b	c7e23dd0 <vsprintf+0x634>
		} else {
			num = va_arg(args, unsigned int);
			if (flags & SIGN)
c7e23db8:	e3510000 	cmp	r1, #0	; 0x0
		} else if (qualifier == 'h') {
			num = (unsigned short) va_arg(args, int);
			if (flags & SIGN)
				num = (signed short) num;
		} else {
			num = va_arg(args, unsigned int);
c7e23dbc:	e1a04002 	mov	r4, r2
c7e23dc0:	e1a01003 	mov	r1, r3
c7e23dc4:	e3a02000 	mov	r2, #0	; 0x0
			if (flags & SIGN)
c7e23dc8:	0a000000 	beq	c7e23dd0 <vsprintf+0x634>
				num = (signed int) num;
c7e23dcc:	e1a02fc1 	asr	r2, r1, #31
		}
		str = number(str, end, num, base, field_width, precision,
c7e23dd0:	e58dc000 	str	ip, [sp]
c7e23dd4:	e59dc018 	ldr	ip, [sp, #24]
c7e23dd8:	e1a03002 	mov	r3, r2
c7e23ddc:	e1a00009 	mov	r0, r9
c7e23de0:	e1a02001 	mov	r2, r1
c7e23de4:	e59d1014 	ldr	r1, [sp, #20]
c7e23de8:	e98d1800 	stmib	sp, {fp, ip}
c7e23dec:	e58d500c 	str	r5, [sp, #12]
c7e23df0:	ebfffdcf 	bl	c7e23534 <number>
c7e23df4:	e1a09000 	mov	r9, r0
		size = end - buf;
	}
#endif
	str = buf;

	for (; *fmt ; ++fmt) {
c7e23df8:	e59d3070 	ldr	r3, [sp, #112]
c7e23dfc:	e2833001 	add	r3, r3, #1	; 0x1
c7e23e00:	e58d3070 	str	r3, [sp, #112]
c7e23e04:	e59d3070 	ldr	r3, [sp, #112]
c7e23e08:	e5d33000 	ldrb	r3, [r3]
c7e23e0c:	e3530000 	cmp	r3, #0	; 0x0
c7e23e10:	1afffe6a 	bne	c7e237c0 <vsprintf+0x24>
		ADDCH(str, '\0');
		if (str > end)
			end[-1] = '\0';
	}
#else
	*str = '\0';
c7e23e14:	e5c93000 	strb	r3, [r9]
 * If you're not already dealing with a va_list consider using sprintf().
 */
int vsprintf(char *buf, const char *fmt, va_list args)
{
	return vsnprintf_internal(buf, INT_MAX, fmt, args);
}
c7e23e18:	e59d3010 	ldr	r3, [sp, #16]
c7e23e1c:	e0630009 	rsb	r0, r3, r9
c7e23e20:	e28dd078 	add	sp, sp, #120	; 0x78
c7e23e24:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e23e28:	c7e34860 	.word	0xc7e34860
c7e23e2c:	c7e2d144 	.word	0xc7e2d144

c7e23e30 <sprintf>:

int sprintf(char * buf, const char *fmt, ...)
{
c7e23e30:	e92d000e 	push	{r1, r2, r3}
c7e23e34:	e92d4003 	push	{r0, r1, lr}
	va_list args;
	int i;

	va_start(args, fmt);
c7e23e38:	e28d3010 	add	r3, sp, #16	; 0x10
	i=vsprintf(buf,fmt,args);
c7e23e3c:	e1a02003 	mov	r2, r3
c7e23e40:	e59d100c 	ldr	r1, [sp, #12]
int sprintf(char * buf, const char *fmt, ...)
{
	va_list args;
	int i;

	va_start(args, fmt);
c7e23e44:	e58d3004 	str	r3, [sp, #4]
	i=vsprintf(buf,fmt,args);
c7e23e48:	ebfffe53 	bl	c7e2379c <vsprintf>
	va_end(args);
	return i;
}
c7e23e4c:	e8bd400c 	pop	{r2, r3, lr}
c7e23e50:	e28dd00c 	add	sp, sp, #12	; 0xc
c7e23e54:	e12fff1e 	bx	lr

c7e23e58 <strict_strtoul>:
{
	char *tail;
	unsigned long val;
	size_t len;

	*res = 0;
c7e23e58:	e3a03000 	mov	r3, #0	; 0x0
		*endp = (char *)cp;
	return result;
}

int strict_strtoul(const char *cp, unsigned int base, unsigned long *res)
{
c7e23e5c:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *tail;
	unsigned long val;
	size_t len;

	*res = 0;
c7e23e60:	e5823000 	str	r3, [r2]
		*endp = (char *)cp;
	return result;
}

int strict_strtoul(const char *cp, unsigned int base, unsigned long *res)
{
c7e23e64:	e1a07002 	mov	r7, r2
c7e23e68:	e1a05001 	mov	r5, r1
c7e23e6c:	e1a04000 	mov	r4, r0
	char *tail;
	unsigned long val;
	size_t len;

	*res = 0;
	len = strlen(cp);
c7e23e70:	ebfffab0 	bl	c7e22938 <strlen>
	if (len == 0)
c7e23e74:	e2506000 	subs	r6, r0, #0	; 0x0
c7e23e78:	0a000013 	beq	c7e23ecc <strict_strtoul+0x74>
		return -EINVAL;

	val = simple_strtoul(cp, &tail, base);
c7e23e7c:	e28d1004 	add	r1, sp, #4	; 0x4
c7e23e80:	e1a02005 	mov	r2, r5
c7e23e84:	e1a00004 	mov	r0, r4
c7e23e88:	ebfffc34 	bl	c7e22f60 <simple_strtoul>
c7e23e8c:	e1a01000 	mov	r1, r0
	if (tail == cp)
c7e23e90:	e59d0004 	ldr	r0, [sp, #4]
c7e23e94:	e1500004 	cmp	r0, r4
c7e23e98:	0a00000b 	beq	c7e23ecc <strict_strtoul+0x74>
		return -EINVAL;

	if ((*tail == '\0') ||
c7e23e9c:	e5d02000 	ldrb	r2, [r0]
c7e23ea0:	e3520000 	cmp	r2, #0	; 0x0
c7e23ea4:	0a000005 	beq	c7e23ec0 <strict_strtoul+0x68>
c7e23ea8:	e0643000 	rsb	r3, r4, r0
c7e23eac:	e2833001 	add	r3, r3, #1	; 0x1
c7e23eb0:	e1560003 	cmp	r6, r3
c7e23eb4:	1a000004 	bne	c7e23ecc <strict_strtoul+0x74>
c7e23eb8:	e352000a 	cmp	r2, #10	; 0xa
c7e23ebc:	1a000002 	bne	c7e23ecc <strict_strtoul+0x74>
		((len == (size_t)(tail - cp) + 1) && (*tail == '\n'))) {
		*res = val;
c7e23ec0:	e5871000 	str	r1, [r7]
c7e23ec4:	e3a00000 	mov	r0, #0	; 0x0
c7e23ec8:	ea000000 	b	c7e23ed0 <strict_strtoul+0x78>
		return 0;
c7e23ecc:	e3e00015 	mvn	r0, #21	; 0x15
	}

	return -EINVAL;
}
c7e23ed0:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

c7e23ed4 <inflate_fast>:
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
c7e23ed4:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
c7e23ed8:	e5903000 	ldr	r3, [r0]
    last = in + (strm->avail_in - 5);
c7e23edc:	e5902004 	ldr	r2, [r0, #4]
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
c7e23ee0:	e24dd038 	sub	sp, sp, #56	; 0x38
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
c7e23ee4:	e243b001 	sub	fp, r3, #1	; 0x1
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
c7e23ee8:	e58d0004 	str	r0, [sp, #4]
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
c7e23eec:	e2423005 	sub	r3, r2, #5	; 0x5
    unsigned len;               /* match length, unused bytes */
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
c7e23ef0:	e590001c 	ldr	r0, [r0, #28]
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
    if (in > last && strm->avail_in > 5) {
c7e23ef4:	e09b3003 	adds	r3, fp, r3
c7e23ef8:	e58d300c 	str	r3, [sp, #12]
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
c7e23efc:	e1a04001 	mov	r4, r1
    unsigned len;               /* match length, unused bytes */
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
c7e23f00:	e58d0008 	str	r0, [sp, #8]
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
    if (in > last && strm->avail_in > 5) {
c7e23f04:	3a000007 	bcc	c7e23f28 <inflate_fast+0x54>
c7e23f08:	e3520005 	cmp	r2, #5	; 0x5
c7e23f0c:	9a000005 	bls	c7e23f28 <inflate_fast+0x54>
        /*
         * overflow detected, limit strm->avail_in to the
         * max. possible size and recalculate last
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
c7e23f10:	e1e0300b 	mvn	r3, fp
        last = in + (strm->avail_in - 5);
c7e23f14:	e2432005 	sub	r2, r3, #5	; 0x5
    if (in > last && strm->avail_in > 5) {
        /*
         * overflow detected, limit strm->avail_in to the
         * max. possible size and recalculate last
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
c7e23f18:	e59d1004 	ldr	r1, [sp, #4]
        last = in + (strm->avail_in - 5);
c7e23f1c:	e08b2002 	add	r2, fp, r2
    if (in > last && strm->avail_in > 5) {
        /*
         * overflow detected, limit strm->avail_in to the
         * max. possible size and recalculate last
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
c7e23f20:	e5813004 	str	r3, [r1, #4]
        last = in + (strm->avail_in - 5);
c7e23f24:	e58d200c 	str	r2, [sp, #12]
    window = state->window;
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
c7e23f28:	e59d2008 	ldr	r2, [sp, #8]
c7e23f2c:	e3a00001 	mov	r0, #1	; 0x1
c7e23f30:	e5923054 	ldr	r3, [r2, #84]
    dmask = (1U << state->distbits) - 1;
c7e23f34:	e592c058 	ldr	ip, [r2, #88]
c7e23f38:	e1a0cc10 	lsl	ip, r0, ip
    window = state->window;
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
c7e23f3c:	e1a00310 	lsl	r0, r0, r3
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
c7e23f40:	e59d3004 	ldr	r3, [sp, #4]
    window = state->window;
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
c7e23f44:	e2400001 	sub	r0, r0, #1	; 0x1
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
c7e23f48:	e5932010 	ldr	r2, [r3, #16]
         * max. possible size and recalculate last
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
c7e23f4c:	e593300c 	ldr	r3, [r3, #12]
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
c7e23f50:	e2421c01 	sub	r1, r2, #256	; 0x100
         * max. possible size and recalculate last
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
c7e23f54:	e2435001 	sub	r5, r3, #1	; 0x1
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
c7e23f58:	e59d3008 	ldr	r3, [sp, #8]
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
c7e23f5c:	e0642002 	rsb	r2, r4, r2
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
c7e23f60:	e5933028 	ldr	r3, [r3, #40]
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
c7e23f64:	e2411001 	sub	r1, r1, #1	; 0x1
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
c7e23f68:	e58d3018 	str	r3, [sp, #24]
    whave = state->whave;
c7e23f6c:	e59d3008 	ldr	r3, [sp, #8]
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
c7e23f70:	e0852002 	add	r2, r5, r2
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
c7e23f74:	e593302c 	ldr	r3, [r3, #44]
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
c7e23f78:	e0851001 	add	r1, r5, r1
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
c7e23f7c:	e58d301c 	str	r3, [sp, #28]
    write = state->write;
c7e23f80:	e59d3008 	ldr	r3, [sp, #8]
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    dmask = (1U << state->distbits) - 1;
c7e23f84:	e24cc001 	sub	ip, ip, #1	; 0x1
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
c7e23f88:	e5933030 	ldr	r3, [r3, #48]
         */
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
c7e23f8c:	e58d2010 	str	r2, [sp, #16]
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
c7e23f90:	e58d3020 	str	r3, [sp, #32]
    window = state->window;
c7e23f94:	e59d3008 	ldr	r3, [sp, #8]
	strm->avail_in = 0xffffffff - (uintptr_t)in;
        last = in + (strm->avail_in - 5);
    }
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
c7e23f98:	e58d1014 	str	r1, [sp, #20]
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
    window = state->window;
c7e23f9c:	e5933034 	ldr	r3, [r3, #52]
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
c7e23fa0:	e58d0030 	str	r0, [sp, #48]
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
    window = state->window;
c7e23fa4:	e58d3024 	str	r3, [sp, #36]
    hold = state->hold;
c7e23fa8:	e59d3008 	ldr	r3, [sp, #8]
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    dmask = (1U << state->distbits) - 1;
c7e23fac:	e58dc034 	str	ip, [sp, #52]
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
    window = state->window;
    hold = state->hold;
c7e23fb0:	e5939038 	ldr	r9, [r3, #56]
    bits = state->bits;
c7e23fb4:	e593a03c 	ldr	sl, [r3, #60]
    lcode = state->lencode;
c7e23fb8:	e593304c 	ldr	r3, [r3, #76]
c7e23fbc:	e58d3028 	str	r3, [sp, #40]
    dcode = state->distcode;
c7e23fc0:	e59d3008 	ldr	r3, [sp, #8]
c7e23fc4:	e5933050 	ldr	r3, [r3, #80]
c7e23fc8:	e58d302c 	str	r3, [sp, #44]
    dmask = (1U << state->distbits) - 1;

    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */
    do {
        if (bits < 15) {
c7e23fcc:	e35a000e 	cmp	sl, #14	; 0xe
c7e23fd0:	8a000007 	bhi	c7e23ff4 <inflate_fast+0x120>
            hold += (unsigned long)(PUP(in)) << bits;
c7e23fd4:	e28b1001 	add	r1, fp, #1	; 0x1
c7e23fd8:	e5d13000 	ldrb	r3, [r1]
            bits += 8;
            hold += (unsigned long)(PUP(in)) << bits;
c7e23fdc:	e5d10001 	ldrb	r0, [r1, #1]

    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */
    do {
        if (bits < 15) {
            hold += (unsigned long)(PUP(in)) << bits;
c7e23fe0:	e0893a13 	add	r3, r9, r3, lsl sl
            bits += 8;
c7e23fe4:	e28a2008 	add	r2, sl, #8	; 0x8
            hold += (unsigned long)(PUP(in)) << bits;
c7e23fe8:	e0839210 	add	r9, r3, r0, lsl r2
            bits += 8;
c7e23fec:	e282a008 	add	sl, r2, #8	; 0x8
       input data or output space */
    do {
        if (bits < 15) {
            hold += (unsigned long)(PUP(in)) << bits;
            bits += 8;
            hold += (unsigned long)(PUP(in)) << bits;
c7e23ff0:	e281b001 	add	fp, r1, #1	; 0x1
            bits += 8;
        }
        this = lcode[hold & lmask];
c7e23ff4:	e59dc030 	ldr	ip, [sp, #48]
c7e23ff8:	e59d0028 	ldr	r0, [sp, #40]
c7e23ffc:	e009300c 	and	r3, r9, ip
c7e24000:	e7d01103 	ldrb	r1, [r0, r3, lsl #2]
c7e24004:	e0802103 	add	r2, r0, r3, lsl #2
c7e24008:	e5d23001 	ldrb	r3, [r2, #1]
      dolen:
        op = (unsigned)(this.bits);
        hold >>= op;
        bits -= op;
        op = (unsigned)(this.op);
        if (op == 0) {                          /* literal */
c7e2400c:	e3510000 	cmp	r1, #0	; 0x0
            hold += (unsigned long)(PUP(in)) << bits;
            bits += 8;
            hold += (unsigned long)(PUP(in)) << bits;
            bits += 8;
        }
        this = lcode[hold & lmask];
c7e24010:	e1d200b2 	ldrh	r0, [r2, #2]
      dolen:
        op = (unsigned)(this.bits);
        hold >>= op;
        bits -= op;
c7e24014:	e063a00a 	rsb	sl, r3, sl
            bits += 8;
        }
        this = lcode[hold & lmask];
      dolen:
        op = (unsigned)(this.bits);
        hold >>= op;
c7e24018:	e1a09339 	lsr	r9, r9, r3
        op = (unsigned)(this.op);
        if (op == 0) {                          /* literal */
            Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
                    "inflate:         literal '%c'\n" :
                    "inflate:         literal 0x%02x\n", this.val));
            PUP(out) = (unsigned char)(this.val);
c7e2401c:	05e50001 	strbeq	r0, [r5, #1]!
c7e24020:	0a0000ee 	beq	c7e243e0 <inflate_fast+0x50c>
        }
        else if (op & 16) {                     /* length base */
c7e24024:	e3110010 	tst	r1, #16	; 0x10
c7e24028:	0a0000d7 	beq	c7e2438c <inflate_fast+0x4b8>
            len = (unsigned)(this.val);
            op &= 15;                           /* number of extra bits */
            if (op) {
c7e2402c:	e211200f 	ands	r2, r1, #15	; 0xf
                    "inflate:         literal '%c'\n" :
                    "inflate:         literal 0x%02x\n", this.val));
            PUP(out) = (unsigned char)(this.val);
        }
        else if (op & 16) {                     /* length base */
            len = (unsigned)(this.val);
c7e24030:	e1a07000 	mov	r7, r0
            op &= 15;                           /* number of extra bits */
            if (op) {
c7e24034:	0a000008 	beq	c7e2405c <inflate_fast+0x188>
                if (bits < op) {
c7e24038:	e15a0002 	cmp	sl, r2
                    hold += (unsigned long)(PUP(in)) << bits;
c7e2403c:	35fb3001 	ldrbcc	r3, [fp, #1]!
c7e24040:	30899a13 	addcc	r9, r9, r3, lsl sl
                    bits += 8;
                }
                len += (unsigned)hold & ((1U << op) - 1);
c7e24044:	e3e03000 	mvn	r3, #0	; 0x0
c7e24048:	e1c93213 	bic	r3, r9, r3, lsl r2
                hold >>= op;
c7e2404c:	e1a09239 	lsr	r9, r9, r2
            len = (unsigned)(this.val);
            op &= 15;                           /* number of extra bits */
            if (op) {
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
                    bits += 8;
c7e24050:	328aa008 	addcc	sl, sl, #8	; 0x8
                }
                len += (unsigned)hold & ((1U << op) - 1);
c7e24054:	e0807003 	add	r7, r0, r3
                hold >>= op;
                bits -= op;
c7e24058:	e062a00a 	rsb	sl, r2, sl
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
c7e2405c:	e35a000e 	cmp	sl, #14	; 0xe
c7e24060:	8a000007 	bhi	c7e24084 <inflate_fast+0x1b0>
                hold += (unsigned long)(PUP(in)) << bits;
c7e24064:	e28b1001 	add	r1, fp, #1	; 0x1
c7e24068:	e5d13000 	ldrb	r3, [r1]
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
c7e2406c:	e5d10001 	ldrb	r0, [r1, #1]
                hold >>= op;
                bits -= op;
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
                hold += (unsigned long)(PUP(in)) << bits;
c7e24070:	e0893a13 	add	r3, r9, r3, lsl sl
                bits += 8;
c7e24074:	e28a2008 	add	r2, sl, #8	; 0x8
                hold += (unsigned long)(PUP(in)) << bits;
c7e24078:	e0839210 	add	r9, r3, r0, lsl r2
                bits += 8;
c7e2407c:	e282a008 	add	sl, r2, #8	; 0x8
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
c7e24080:	e281b001 	add	fp, r1, #1	; 0x1
                bits += 8;
            }
            this = dcode[hold & dmask];
c7e24084:	e59d1034 	ldr	r1, [sp, #52]
c7e24088:	e0093001 	and	r3, r9, r1
c7e2408c:	e59dc02c 	ldr	ip, [sp, #44]
c7e24090:	e08c2103 	add	r2, ip, r3, lsl #2
c7e24094:	e7dc1103 	ldrb	r1, [ip, r3, lsl #2]
c7e24098:	e5d23001 	ldrb	r3, [r2, #1]
          dodist:
            op = (unsigned)(this.bits);
            hold >>= op;
            bits -= op;
            op = (unsigned)(this.op);
            if (op & 16) {                      /* distance base */
c7e2409c:	e3110010 	tst	r1, #16	; 0x10
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
            }
            this = dcode[hold & dmask];
c7e240a0:	e1d200b2 	ldrh	r0, [r2, #2]
          dodist:
            op = (unsigned)(this.bits);
            hold >>= op;
            bits -= op;
c7e240a4:	e063a00a 	rsb	sl, r3, sl
                bits += 8;
            }
            this = dcode[hold & dmask];
          dodist:
            op = (unsigned)(this.bits);
            hold >>= op;
c7e240a8:	e1a09339 	lsr	r9, r9, r3
            bits -= op;
            op = (unsigned)(this.op);
            if (op & 16) {                      /* distance base */
c7e240ac:	0a0000ab 	beq	c7e24360 <inflate_fast+0x48c>
                dist = (unsigned)(this.val);
                op &= 15;                       /* number of extra bits */
c7e240b0:	e201200f 	and	r2, r1, #15	; 0xf
                if (bits < op) {
c7e240b4:	e15a0002 	cmp	sl, r2
c7e240b8:	2a000006 	bcs	c7e240d8 <inflate_fast+0x204>
                    hold += (unsigned long)(PUP(in)) << bits;
c7e240bc:	e5fb3001 	ldrb	r3, [fp, #1]!
c7e240c0:	e0899a13 	add	r9, r9, r3, lsl sl
                    bits += 8;
c7e240c4:	e28aa008 	add	sl, sl, #8	; 0x8
                    if (bits < op) {
c7e240c8:	e15a0002 	cmp	sl, r2
                        hold += (unsigned long)(PUP(in)) << bits;
c7e240cc:	35fb3001 	ldrbcc	r3, [fp, #1]!
c7e240d0:	30899a13 	addcc	r9, r9, r3, lsl sl
                        bits += 8;
c7e240d4:	328aa008 	addcc	sl, sl, #8	; 0x8
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
c7e240d8:	e3e03000 	mvn	r3, #0	; 0x0
c7e240dc:	e1c93213 	bic	r3, r9, r3, lsl r2
c7e240e0:	e0834000 	add	r4, r3, r0
                }
#endif
                hold >>= op;
                bits -= op;
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
c7e240e4:	e59d0010 	ldr	r0, [sp, #16]
                    state->mode = BAD;
                    break;
                }
#endif
                hold >>= op;
                bits -= op;
c7e240e8:	e062a00a 	rsb	sl, r2, sl
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
c7e240ec:	e0603005 	rsb	r3, r0, r5
                if (dist > op) {                /* see if copy from window */
c7e240f0:	e1540003 	cmp	r4, r3
                    strm->msg = (char *)"invalid distance too far back";
                    state->mode = BAD;
                    break;
                }
#endif
                hold >>= op;
c7e240f4:	e1a09239 	lsr	r9, r9, r2
                bits -= op;
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
                if (dist > op) {                /* see if copy from window */
c7e240f8:	9a00006b 	bls	c7e242ac <inflate_fast+0x3d8>
                    op = dist - op;             /* distance back in window */
                    if (op > whave) {
c7e240fc:	e59d201c 	ldr	r2, [sp, #28]
                hold >>= op;
                bits -= op;
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                    op = dist - op;             /* distance back in window */
c7e24100:	e0631004 	rsb	r1, r3, r4
                    if (op > whave) {
c7e24104:	e1510002 	cmp	r1, r2
                        strm->msg = (char *)"invalid distance too far back";
c7e24108:	859f3344 	ldrhi	r3, [pc, #836]	; c7e24454 <inflate_fast+0x580>
c7e2410c:	859dc004 	ldrhi	ip, [sp, #4]
c7e24110:	858c3018 	strhi	r3, [ip, #24]
                        state->mode = BAD;
c7e24114:	83a0301b 	movhi	r3, #27	; 0x1b
c7e24118:	8a0000a7 	bhi	c7e243bc <inflate_fast+0x4e8>
                        break;
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
c7e2411c:	e59d2020 	ldr	r2, [sp, #32]
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
c7e24120:	e59d3024 	ldr	r3, [sp, #36]
                    if (write == 0) {           /* very common case */
c7e24124:	e3520000 	cmp	r2, #0	; 0x0
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
c7e24128:	e2436001 	sub	r6, r3, #1	; 0x1
                    if (write == 0) {           /* very common case */
c7e2412c:	1a000012 	bne	c7e2417c <inflate_fast+0x2a8>
                        from += wsize - op;
c7e24130:	e59dc018 	ldr	ip, [sp, #24]
                        if (op < len) {         /* some from window */
c7e24134:	e1510007 	cmp	r1, r7
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
c7e24138:	e061300c 	rsb	r3, r1, ip
c7e2413c:	e0866003 	add	r6, r6, r3
                        if (op < len) {         /* some from window */
c7e24140:	2a000009 	bcs	c7e2416c <inflate_fast+0x298>
c7e24144:	e1a0c006 	mov	ip, r6
c7e24148:	e1a00005 	mov	r0, r5
c7e2414c:	e1a02001 	mov	r2, r1
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
c7e24150:	e5fc3001 	ldrb	r3, [ip, #1]!
                            } while (--op);
c7e24154:	e2522001 	subs	r2, r2, #1	; 0x1
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
c7e24158:	e5e03001 	strb	r3, [r0, #1]!
                            } while (--op);
c7e2415c:	1afffffb 	bne	c7e24150 <inflate_fast+0x27c>
c7e24160:	e0855001 	add	r5, r5, r1
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
c7e24164:	e0617007 	rsb	r7, r1, r7
                            do {
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
c7e24168:	e0646005 	rsb	r6, r4, r5
c7e2416c:	e1a01005 	mov	r1, r5
c7e24170:	e1a02006 	mov	r2, r6
c7e24174:	e1a00007 	mov	r0, r7
c7e24178:	ea000035 	b	c7e24254 <inflate_fast+0x380>
                        }
                    }
                    else if (write < op) {      /* wrap around window */
c7e2417c:	e59d0020 	ldr	r0, [sp, #32]
c7e24180:	e1500001 	cmp	r0, r1
c7e24184:	2a00001f 	bcs	c7e24208 <inflate_fast+0x334>
                        from += wsize + write - op;
c7e24188:	e59d2020 	ldr	r2, [sp, #32]
c7e2418c:	e59dc018 	ldr	ip, [sp, #24]
                        op -= write;
c7e24190:	e0600001 	rsb	r0, r0, r1
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
c7e24194:	e082300c 	add	r3, r2, ip
c7e24198:	e0613003 	rsb	r3, r1, r3
                        op -= write;
                        if (op < len) {         /* some from end of window */
c7e2419c:	e1500007 	cmp	r0, r7
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
c7e241a0:	e0863003 	add	r3, r6, r3
                        op -= write;
                        if (op < len) {         /* some from end of window */
c7e241a4:	21a06003 	movcs	r6, r3
c7e241a8:	2affffef 	bcs	c7e2416c <inflate_fast+0x298>
                            len -= op;
c7e241ac:	e0607007 	rsb	r7, r0, r7
c7e241b0:	e1a0c003 	mov	ip, r3
c7e241b4:	e1a01005 	mov	r1, r5
c7e241b8:	e1a02000 	mov	r2, r0
                            do {
                                PUP(out) = PUP(from);
c7e241bc:	e5fc3001 	ldrb	r3, [ip, #1]!
                            } while (--op);
c7e241c0:	e2522001 	subs	r2, r2, #1	; 0x1
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
c7e241c4:	e5e13001 	strb	r3, [r1, #1]!
                            } while (--op);
c7e241c8:	1afffffb 	bne	c7e241bc <inflate_fast+0x2e8>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
c7e241cc:	e59d1020 	ldr	r1, [sp, #32]
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
                            } while (--op);
c7e241d0:	e0855000 	add	r5, r5, r0
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
c7e241d4:	e1510007 	cmp	r1, r7
c7e241d8:	2affffe3 	bcs	c7e2416c <inflate_fast+0x298>
c7e241dc:	e1a01005 	mov	r1, r5
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
c7e241e0:	e59dc024 	ldr	ip, [sp, #36]
                                } while (--op);
c7e241e4:	e59d0020 	ldr	r0, [sp, #32]
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
c7e241e8:	e7dc3002 	ldrb	r3, [ip, r2]
c7e241ec:	e2822001 	add	r2, r2, #1	; 0x1
                                } while (--op);
c7e241f0:	e1500002 	cmp	r0, r2
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
c7e241f4:	e5e13001 	strb	r3, [r1, #1]!
                                } while (--op);
c7e241f8:	1afffff8 	bne	c7e241e0 <inflate_fast+0x30c>
c7e241fc:	e0855000 	add	r5, r5, r0
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
c7e24200:	e0607007 	rsb	r7, r0, r7
c7e24204:	eaffffd7 	b	c7e24168 <inflate_fast+0x294>
                                from = out - dist;      /* rest from output */
                            }
                        }
                    }
                    else {                      /* contiguous in window */
                        from += write - op;
c7e24208:	e59d2020 	ldr	r2, [sp, #32]
                        if (op < len) {         /* some from window */
c7e2420c:	e1510007 	cmp	r1, r7
                                from = out - dist;      /* rest from output */
                            }
                        }
                    }
                    else {                      /* contiguous in window */
                        from += write - op;
c7e24210:	e0613002 	rsb	r3, r1, r2
c7e24214:	e0866003 	add	r6, r6, r3
                        if (op < len) {         /* some from window */
c7e24218:	2affffd3 	bcs	c7e2416c <inflate_fast+0x298>
c7e2421c:	e1a0c006 	mov	ip, r6
c7e24220:	e1a00005 	mov	r0, r5
c7e24224:	e1a02001 	mov	r2, r1
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
c7e24228:	e5fc3001 	ldrb	r3, [ip, #1]!
                            } while (--op);
c7e2422c:	e2522001 	subs	r2, r2, #1	; 0x1
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
c7e24230:	e5e03001 	strb	r3, [r0, #1]!
                            } while (--op);
c7e24234:	1afffffb 	bne	c7e24228 <inflate_fast+0x354>
c7e24238:	eaffffc8 	b	c7e24160 <inflate_fast+0x28c>
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
c7e2423c:	e5d23001 	ldrb	r3, [r2, #1]
c7e24240:	e5c13001 	strb	r3, [r1, #1]
                        PUP(out) = PUP(from);
c7e24244:	e5d23002 	ldrb	r3, [r2, #2]
c7e24248:	e5c13002 	strb	r3, [r1, #2]
                        PUP(out) = PUP(from);
c7e2424c:	e5f23003 	ldrb	r3, [r2, #3]!
c7e24250:	e5e13003 	strb	r3, [r1, #3]!
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
c7e24254:	e3500002 	cmp	r0, #2	; 0x2
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
c7e24258:	e2400003 	sub	r0, r0, #3	; 0x3
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
c7e2425c:	8afffff6 	bhi	c7e2423c <inflate_fast+0x368>
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
c7e24260:	e3a04003 	mov	r4, #3	; 0x3
c7e24264:	e1a01004 	mov	r1, r4
c7e24268:	e1a00007 	mov	r0, r7
c7e2426c:	eb0018a5 	bl	c7e2a508 <__udivsi3>
c7e24270:	e0030094 	mul	r3, r4, r0
c7e24274:	e1a01004 	mov	r1, r4
c7e24278:	e1a00007 	mov	r0, r7
c7e2427c:	e0864003 	add	r4, r6, r3
c7e24280:	e0855003 	add	r5, r5, r3
c7e24284:	eb0018dc 	bl	c7e2a5fc <__aeabi_uidivmod>
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
c7e24288:	e3510000 	cmp	r1, #0	; 0x0
c7e2428c:	0a000053 	beq	c7e243e0 <inflate_fast+0x50c>
                        PUP(out) = PUP(from);
c7e24290:	e5d43001 	ldrb	r3, [r4, #1]
                        if (len > 1)
c7e24294:	e3510002 	cmp	r1, #2	; 0x2
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
                        PUP(out) = PUP(from);
c7e24298:	e5e53001 	strb	r3, [r5, #1]!
c7e2429c:	e2843001 	add	r3, r4, #1	; 0x1
                        if (len > 1)
                            PUP(out) = PUP(from);
c7e242a0:	05d33001 	ldrbeq	r3, [r3, #1]
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
                        PUP(out) = PUP(from);
                        if (len > 1)
c7e242a4:	0a00002b 	beq	c7e24358 <inflate_fast+0x484>
c7e242a8:	ea00004c 	b	c7e243e0 <inflate_fast+0x50c>
		    unsigned long loops;

                    from = out - dist;          /* copy direct from output */
                    /* minimum length is three */
		    /* Align out addr */
		    if (!((long)(out - 1 + OFF) & 1)) {
c7e242ac:	e3150001 	tst	r5, #1	; 0x1
                }
                else {
		    unsigned short *sout;
		    unsigned long loops;

                    from = out - dist;          /* copy direct from output */
c7e242b0:	e0642005 	rsb	r2, r4, r5
                    /* minimum length is three */
		    /* Align out addr */
		    if (!((long)(out - 1 + OFF) & 1)) {
			PUP(out) = PUP(from);
c7e242b4:	05f23001 	ldrbeq	r3, [r2, #1]!
			len--;
c7e242b8:	02477001 	subeq	r7, r7, #1	; 0x1

                    from = out - dist;          /* copy direct from output */
                    /* minimum length is three */
		    /* Align out addr */
		    if (!((long)(out - 1 + OFF) & 1)) {
			PUP(out) = PUP(from);
c7e242bc:	05e53001 	strbeq	r3, [r5, #1]!
			len--;
		    }
		    sout = (unsigned short *)(out - OFF);
		    if (dist > 2 ) {
c7e242c0:	e3540002 	cmp	r4, #2	; 0x2
		    /* Align out addr */
		    if (!((long)(out - 1 + OFF) & 1)) {
			PUP(out) = PUP(from);
			len--;
		    }
		    sout = (unsigned short *)(out - OFF);
c7e242c4:	e2456001 	sub	r6, r5, #1	; 0x1
		    if (dist > 2 ) {
c7e242c8:	9a000012 	bls	c7e24318 <inflate_fast+0x444>
			unsigned short *sfrom;

			sfrom = (unsigned short *)(from - OFF);
			loops = len >> 1;
c7e242cc:	e1a040a7 	lsr	r4, r7, #1
c7e242d0:	e1a0c005 	mov	ip, r5
c7e242d4:	e1a00002 	mov	r0, r2
		    }
		    sout = (unsigned short *)(out - OFF);
		    if (dist > 2 ) {
			unsigned short *sfrom;

			sfrom = (unsigned short *)(from - OFF);
c7e242d8:	e2425001 	sub	r5, r2, #1	; 0x1
			loops = len >> 1;
c7e242dc:	e1a01004 	mov	r1, r4
			do
			    PUP(sout) = get_unaligned(++sfrom);
c7e242e0:	e5d02002 	ldrb	r2, [r0, #2]
c7e242e4:	e5d03001 	ldrb	r3, [r0, #1]
			while (--loops);
c7e242e8:	e2511001 	subs	r1, r1, #1	; 0x1
			unsigned short *sfrom;

			sfrom = (unsigned short *)(from - OFF);
			loops = len >> 1;
			do
			    PUP(sout) = get_unaligned(++sfrom);
c7e242ec:	e1833402 	orr	r3, r3, r2, lsl #8
c7e242f0:	e1cc30b1 	strh	r3, [ip, #1]
			while (--loops);
c7e242f4:	e2800002 	add	r0, r0, #2	; 0x2
c7e242f8:	e28cc002 	add	ip, ip, #2	; 0x2
c7e242fc:	1afffff7 	bne	c7e242e0 <inflate_fast+0x40c>
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
c7e24300:	e1a03084 	lsl	r3, r4, #1
			loops = len >> 1;
			do
			    PUP(sout) = get_unaligned(++sfrom);
			while (--loops);
			out = (unsigned char *)sout + OFF;
			from = (unsigned char *)sfrom + OFF;
c7e24304:	e0852003 	add	r2, r5, r3
			sfrom = (unsigned short *)(from - OFF);
			loops = len >> 1;
			do
			    PUP(sout) = get_unaligned(++sfrom);
			while (--loops);
			out = (unsigned char *)sout + OFF;
c7e24308:	e0863003 	add	r3, r6, r3
c7e2430c:	e2835001 	add	r5, r3, #1	; 0x1
			from = (unsigned char *)sfrom + OFF;
c7e24310:	e2822001 	add	r2, r2, #1	; 0x1
c7e24314:	ea00000c 	b	c7e2434c <inflate_fast+0x478>
		    } else { /* dist == 1 or dist == 2 */
			unsigned short pat16;

			pat16 = *(sout-2+2*OFF);
c7e24318:	e15500b1 	ldrh	r0, [r5, #-1]
			if (dist == 1)
c7e2431c:	e3540001 	cmp	r4, #1	; 0x1
#if defined(__BIG_ENDIAN)
			    pat16 = (pat16 & 0xff) | ((pat16 & 0xff ) << 8);
#elif defined(__LITTLE_ENDIAN)
			    pat16 = (pat16 & 0xff00) | ((pat16 & 0xff00 ) >> 8);
c7e24320:	03c030ff 	biceq	r3, r0, #255	; 0xff
#else
#error __BIG_ENDIAN nor __LITTLE_ENDIAN is defined
#endif
			loops = len >> 1;
c7e24324:	e1a0c0a7 	lsr	ip, r7, #1
			pat16 = *(sout-2+2*OFF);
			if (dist == 1)
#if defined(__BIG_ENDIAN)
			    pat16 = (pat16 & 0xff) | ((pat16 & 0xff ) << 8);
#elif defined(__LITTLE_ENDIAN)
			    pat16 = (pat16 & 0xff00) | ((pat16 & 0xff00 ) >> 8);
c7e24328:	01830420 	orreq	r0, r3, r0, lsr #8
#else
#error __BIG_ENDIAN nor __LITTLE_ENDIAN is defined
#endif
			loops = len >> 1;
c7e2432c:	e1a0100c 	mov	r1, ip
c7e24330:	e1a03005 	mov	r3, r5
			do
			    PUP(sout) = pat16;
			while (--loops);
c7e24334:	e2511001 	subs	r1, r1, #1	; 0x1
#else
#error __BIG_ENDIAN nor __LITTLE_ENDIAN is defined
#endif
			loops = len >> 1;
			do
			    PUP(sout) = pat16;
c7e24338:	e1c300b1 	strh	r0, [r3, #1]
			while (--loops);
c7e2433c:	e2833002 	add	r3, r3, #2	; 0x2
c7e24340:	1afffffb 	bne	c7e24334 <inflate_fast+0x460>
			out = (unsigned char *)sout + OFF;
c7e24344:	e086308c 	add	r3, r6, ip, lsl #1
c7e24348:	e2835001 	add	r5, r3, #1	; 0x1
		    }
		    if (len & 1)
c7e2434c:	e3170001 	tst	r7, #1	; 0x1
c7e24350:	0a000022 	beq	c7e243e0 <inflate_fast+0x50c>
			PUP(out) = PUP(from);
c7e24354:	e5d23001 	ldrb	r3, [r2, #1]
c7e24358:	e5e53001 	strb	r3, [r5, #1]!
c7e2435c:	ea00001f 	b	c7e243e0 <inflate_fast+0x50c>
                }
            }
            else if ((op & 64) == 0) {          /* 2nd level distance code */
c7e24360:	e3110040 	tst	r1, #64	; 0x40
                this = dcode[this.val + (hold & ((1U << op) - 1))];
c7e24364:	03e03000 	mvneq	r3, #0	; 0x0
c7e24368:	01c93113 	biceq	r3, r9, r3, lsl r1
c7e2436c:	00833000 	addeq	r3, r3, r0
c7e24370:	0affff45 	beq	c7e2408c <inflate_fast+0x1b8>
                goto dodist;
            }
            else {
                strm->msg = (char *)"invalid distance code";
c7e24374:	e59f30dc 	ldr	r3, [pc, #220]	; c7e24458 <inflate_fast+0x584>
c7e24378:	e99d0003 	ldmib	sp, {r0, r1}
c7e2437c:	e5803018 	str	r3, [r0, #24]
                state->mode = BAD;
c7e24380:	e3a0301b 	mov	r3, #27	; 0x1b
c7e24384:	e5813000 	str	r3, [r1]
c7e24388:	ea000019 	b	c7e243f4 <inflate_fast+0x520>
                break;
            }
        }
        else if ((op & 64) == 0) {              /* 2nd level length code */
c7e2438c:	e3110040 	tst	r1, #64	; 0x40
c7e24390:	1a000006 	bne	c7e243b0 <inflate_fast+0x4dc>
            this = lcode[this.val + (hold & ((1U << op) - 1))];
c7e24394:	e3e03000 	mvn	r3, #0	; 0x0
c7e24398:	e1c93113 	bic	r3, r9, r3, lsl r1
c7e2439c:	e59dc028 	ldr	ip, [sp, #40]
c7e243a0:	e0833000 	add	r3, r3, r0
c7e243a4:	e08c2103 	add	r2, ip, r3, lsl #2
c7e243a8:	e7dc1103 	ldrb	r1, [ip, r3, lsl #2]
c7e243ac:	eaffff15 	b	c7e24008 <inflate_fast+0x134>
            goto dolen;
        }
        else if (op & 32) {                     /* end-of-block */
c7e243b0:	e3110020 	tst	r1, #32	; 0x20
c7e243b4:	0a000003 	beq	c7e243c8 <inflate_fast+0x4f4>
            Tracevv((stderr, "inflate:         end of block\n"));
            state->mode = TYPE;
c7e243b8:	e3a0300b 	mov	r3, #11	; 0xb
c7e243bc:	e59d0008 	ldr	r0, [sp, #8]
c7e243c0:	e5803000 	str	r3, [r0]
c7e243c4:	ea00000a 	b	c7e243f4 <inflate_fast+0x520>
            break;
        }
        else {
            strm->msg = (char *)"invalid literal/length code";
c7e243c8:	e59f308c 	ldr	r3, [pc, #140]	; c7e2445c <inflate_fast+0x588>
c7e243cc:	e99d0006 	ldmib	sp, {r1, r2}
c7e243d0:	e5813018 	str	r3, [r1, #24]
            state->mode = BAD;
c7e243d4:	e3a0301b 	mov	r3, #27	; 0x1b
c7e243d8:	e5823000 	str	r3, [r2]
c7e243dc:	ea000004 	b	c7e243f4 <inflate_fast+0x520>
            break;
        }
    } while (in < last && out < end);
c7e243e0:	e59d300c 	ldr	r3, [sp, #12]
c7e243e4:	e59dc014 	ldr	ip, [sp, #20]
c7e243e8:	e15b0003 	cmp	fp, r3
c7e243ec:	3155000c 	cmpcc	r5, ip
c7e243f0:	3afffef5 	bcc	c7e23fcc <inflate_fast+0xf8>

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
c7e243f4:	e1a031aa 	lsr	r3, sl, #3
    in -= len;
    bits -= len << 3;
c7e243f8:	e04a4183 	sub	r4, sl, r3, lsl #3
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
                                 257 + (end - out) : 257 - (out - end));
    state->hold = hold;
c7e243fc:	e3e00000 	mvn	r0, #0	; 0x0
c7e24400:	e1c90410 	bic	r0, r9, r0, lsl r4

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
c7e24404:	e59d1014 	ldr	r1, [sp, #20]
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
c7e24408:	e59dc00c 	ldr	ip, [sp, #12]
    strm->avail_out = (unsigned)(out < end ?
c7e2440c:	e2812c01 	add	r2, r1, #256	; 0x100
c7e24410:	e2822001 	add	r2, r2, #1	; 0x1
        }
    } while (in < last && out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
c7e24414:	e063300b 	rsb	r3, r3, fp
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
c7e24418:	e28c1005 	add	r1, ip, #5	; 0x5
    strm->avail_out = (unsigned)(out < end ?
c7e2441c:	e0652002 	rsb	r2, r5, r2
    bits -= len << 3;
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
c7e24420:	e285c001 	add	ip, r5, #1	; 0x1
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
c7e24424:	e59d5004 	ldr	r5, [sp, #4]
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
c7e24428:	e0631001 	rsb	r1, r3, r1
c7e2442c:	e5851004 	str	r1, [r5, #4]
    strm->avail_out = (unsigned)(out < end ?
                                 257 + (end - out) : 257 - (out - end));
    state->hold = hold;
    state->bits = bits;
c7e24430:	e59d1008 	ldr	r1, [sp, #8]
    in -= len;
    bits -= len << 3;
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
c7e24434:	e2833001 	add	r3, r3, #1	; 0x1
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
c7e24438:	e5852010 	str	r2, [r5, #16]
    in -= len;
    bits -= len << 3;
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
c7e2443c:	e5853000 	str	r3, [r5]
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
                                 257 + (end - out) : 257 - (out - end));
    state->hold = hold;
    state->bits = bits;
c7e24440:	e581403c 	str	r4, [r1, #60]
    bits -= len << 3;
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
c7e24444:	e585c00c 	str	ip, [r5, #12]
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
                                 257 + (end - out) : 257 - (out - end));
    state->hold = hold;
c7e24448:	e5810038 	str	r0, [r1, #56]
    state->bits = bits;
    return;
}
c7e2444c:	e28dd038 	add	sp, sp, #56	; 0x38
c7e24450:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e24454:	c7e34867 	.word	0xc7e34867
c7e24458:	c7e34885 	.word	0xc7e34885
c7e2445c:	c7e3489b 	.word	0xc7e3489b

c7e24460 <inflate_table>:
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
c7e24460:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e24464:	e24dd080 	sub	sp, sp, #128	; 0x80
c7e24468:	e59d50a4 	ldr	r5, [sp, #164]
c7e2446c:	e1a06002 	mov	r6, r2
c7e24470:	e58d1008 	str	r1, [sp, #8]
c7e24474:	e58d3004 	str	r3, [sp, #4]
c7e24478:	e3a02000 	mov	r2, #0	; 0x0
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
c7e2447c:	e28d3060 	add	r3, sp, #96	; 0x60
c7e24480:	e3a01000 	mov	r1, #0	; 0x0
c7e24484:	e18310b2 	strh	r1, [r3, r2]
c7e24488:	e2822002 	add	r2, r2, #2	; 0x2
       at length counts to determine sub-table sizes when building the
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
c7e2448c:	e3520020 	cmp	r2, #32	; 0x20
c7e24490:	1afffff9 	bne	c7e2447c <inflate_table+0x1c>
c7e24494:	e3a01000 	mov	r1, #0	; 0x0
c7e24498:	ea000006 	b	c7e244b8 <inflate_table+0x58>
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;
c7e2449c:	e59d2008 	ldr	r2, [sp, #8]
c7e244a0:	e28d4080 	add	r4, sp, #128	; 0x80
c7e244a4:	e19230b3 	ldrh	r3, [r2, r3]
c7e244a8:	e0842083 	add	r2, r4, r3, lsl #1
c7e244ac:	e15232b0 	ldrh	r3, [r2, #-32]
c7e244b0:	e2833001 	add	r3, r3, #1	; 0x1
c7e244b4:	e14232b0 	strh	r3, [r2, #-32]
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
c7e244b8:	e1510006 	cmp	r1, r6
        count[lens[sym]]++;
c7e244bc:	e1a03081 	lsl	r3, r1, #1
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
c7e244c0:	e2811001 	add	r1, r1, #1	; 0x1
c7e244c4:	3afffff4 	bcc	c7e2449c <inflate_table+0x3c>
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
c7e244c8:	e59dc0a0 	ldr	ip, [sp, #160]
c7e244cc:	e3a0100f 	mov	r1, #15	; 0xf
c7e244d0:	e59c7000 	ldr	r7, [ip]
c7e244d4:	e58d1010 	str	r1, [sp, #16]
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
c7e244d8:	e59d4010 	ldr	r4, [sp, #16]
c7e244dc:	e28d2080 	add	r2, sp, #128	; 0x80
c7e244e0:	e0823084 	add	r3, r2, r4, lsl #1
c7e244e4:	e15332b0 	ldrh	r3, [r3, #-32]
c7e244e8:	e3530000 	cmp	r3, #0	; 0x0
c7e244ec:	0a000003 	beq	c7e24500 <inflate_table+0xa0>
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
c7e244f0:	e3540000 	cmp	r4, #0	; 0x0
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
c7e244f4:	13a04001 	movne	r4, #1	; 0x1
    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
c7e244f8:	1a000017 	bne	c7e2455c <inflate_table+0xfc>
c7e244fc:	ea000003 	b	c7e24510 <inflate_table+0xb0>
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
c7e24500:	e59dc010 	ldr	ip, [sp, #16]
c7e24504:	e25cc001 	subs	ip, ip, #1	; 0x1
c7e24508:	e58dc010 	str	ip, [sp, #16]
c7e2450c:	1afffff1 	bne	c7e244d8 <inflate_table+0x78>
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
c7e24510:	e59d0004 	ldr	r0, [sp, #4]
c7e24514:	e3a02001 	mov	r2, #1	; 0x1
c7e24518:	e5901000 	ldr	r1, [r0]
c7e2451c:	e3a00040 	mov	r0, #64	; 0x40
c7e24520:	e1a03001 	mov	r3, r1
c7e24524:	e4c30004 	strb	r0, [r3], #4
c7e24528:	e5c12001 	strb	r2, [r1, #1]
        *(*table)++ = this;
c7e2452c:	e5c10004 	strb	r0, [r1, #4]
c7e24530:	e5c32001 	strb	r2, [r3, #1]
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
c7e24534:	e3a04000 	mov	r4, #0	; 0x0
c7e24538:	e1c140b2 	strh	r4, [r1, #2]
        *(*table)++ = this;
c7e2453c:	e59d0004 	ldr	r0, [sp, #4]
        *bits = 1;
c7e24540:	e59d10a0 	ldr	r1, [sp, #160]
    if (max == 0) {                     /* no symbols to code at all */
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
c7e24544:	e283c004 	add	ip, r3, #4	; 0x4
c7e24548:	e580c000 	str	ip, [r0]
        *bits = 1;
c7e2454c:	e5812000 	str	r2, [r1]
    if (max == 0) {                     /* no symbols to code at all */
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
c7e24550:	e1c340b2 	strh	r4, [r3, #2]
        *bits = 1;
c7e24554:	e3a00000 	mov	r0, #0	; 0x0
c7e24558:	ea000122 	b	c7e249e8 <inflate_table+0x588>
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
        if (count[min] != 0) break;
c7e2455c:	e28d2080 	add	r2, sp, #128	; 0x80
c7e24560:	e0823084 	add	r3, r2, r4, lsl #1
c7e24564:	e15332b0 	ldrh	r3, [r3, #-32]
c7e24568:	e3530000 	cmp	r3, #0	; 0x0
c7e2456c:	1a000002 	bne	c7e2457c <inflate_table+0x11c>
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
c7e24570:	e2844001 	add	r4, r4, #1	; 0x1
c7e24574:	e3540010 	cmp	r4, #16	; 0x10
c7e24578:	1afffff7 	bne	c7e2455c <inflate_table+0xfc>
c7e2457c:	e28dc060 	add	ip, sp, #96	; 0x60
c7e24580:	e1a0200c 	mov	r2, ip
c7e24584:	e3a01001 	mov	r1, #1	; 0x1

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
c7e24588:	e1d230b2 	ldrh	r3, [r2, #2]
        if (left < 0) return -1;        /* over-subscribed */
c7e2458c:	e2822002 	add	r2, r2, #2	; 0x2
c7e24590:	e0731081 	rsbs	r1, r3, r1, lsl #1
c7e24594:	4a000110 	bmi	c7e249dc <inflate_table+0x57c>
        if (count[min] != 0) break;
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
c7e24598:	e28d307e 	add	r3, sp, #126	; 0x7e
c7e2459c:	e1520003 	cmp	r2, r3
c7e245a0:	1afffff8 	bne	c7e24588 <inflate_table+0x128>
        left <<= 1;
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
    }
    if (left > 0 && (type == CODES || max != 1))
c7e245a4:	e3510000 	cmp	r1, #0	; 0x0
c7e245a8:	0a000006 	beq	c7e245c8 <inflate_table+0x168>
c7e245ac:	e59d1010 	ldr	r1, [sp, #16]
c7e245b0:	e2513001 	subs	r3, r1, #1	; 0x1
c7e245b4:	13a03001 	movne	r3, #1	; 0x1
c7e245b8:	e3500000 	cmp	r0, #0	; 0x0
c7e245bc:	03833001 	orreq	r3, r3, #1	; 0x1
c7e245c0:	e3530000 	cmp	r3, #0	; 0x0
c7e245c4:	1a000104 	bne	c7e249dc <inflate_table+0x57c>
        return -1;                      /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
c7e245c8:	e3a02000 	mov	r2, #0	; 0x0
c7e245cc:	e1cd24b2 	strh	r2, [sp, #66]
c7e245d0:	e28d1040 	add	r1, sp, #64	; 0x40
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];
c7e245d4:	e1d130b2 	ldrh	r3, [r1, #2]
c7e245d8:	e1fc20b2 	ldrh	r2, [ip, #2]!
c7e245dc:	e0822003 	add	r2, r2, r3
c7e245e0:	e1c120b4 	strh	r2, [r1, #4]
    if (left > 0 && (type == CODES || max != 1))
        return -1;                      /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
c7e245e4:	e28d305c 	add	r3, sp, #92	; 0x5c
        offs[len + 1] = offs[len] + count[len];
c7e245e8:	e2811002 	add	r1, r1, #2	; 0x2
    if (left > 0 && (type == CODES || max != 1))
        return -1;                      /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
c7e245ec:	e1510003 	cmp	r1, r3
c7e245f0:	1afffff7 	bne	c7e245d4 <inflate_table+0x174>
c7e245f4:	e3a01000 	mov	r1, #0	; 0x0
c7e245f8:	ea00000a 	b	c7e24628 <inflate_table+0x1c8>
        offs[len + 1] = offs[len] + count[len];

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
c7e245fc:	e59dc008 	ldr	ip, [sp, #8]
c7e24600:	e28d2080 	add	r2, sp, #128	; 0x80
c7e24604:	e19c30b3 	ldrh	r3, [ip, r3]
c7e24608:	e3530000 	cmp	r3, #0	; 0x0
c7e2460c:	e082c083 	add	ip, r2, r3, lsl #1
c7e24610:	115c34b0 	ldrhne	r3, [ip, #-64]
c7e24614:	12832001 	addne	r2, r3, #1	; 0x1
c7e24618:	11a03083 	lslne	r3, r3, #1
c7e2461c:	114c24b0 	strhne	r2, [ip, #-64]
c7e24620:	118510b3 	strhne	r1, [r5, r3]
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
c7e24624:	e2811001 	add	r1, r1, #1	; 0x1
c7e24628:	e1510006 	cmp	r1, r6
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
c7e2462c:	e1a03081 	lsl	r3, r1, #1
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
c7e24630:	3afffff1 	bcc	c7e245fc <inflate_table+0x19c>
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    switch (type) {
c7e24634:	e3500000 	cmp	r0, #0	; 0x0
c7e24638:	0a000007 	beq	c7e2465c <inflate_table+0x1fc>
c7e2463c:	e3500001 	cmp	r0, #1	; 0x1
c7e24640:	1a00000a 	bne	c7e24670 <inflate_table+0x210>
c7e24644:	e59f33a4 	ldr	r3, [pc, #932]	; c7e249f0 <inflate_table+0x590>
c7e24648:	e3a0cc01 	mov	ip, #256	; 0x100
c7e2464c:	e58d3028 	str	r3, [sp, #40]
c7e24650:	e58dc030 	str	ip, [sp, #48]
c7e24654:	e283103e 	add	r1, r3, #62	; 0x3e
c7e24658:	ea000009 	b	c7e24684 <inflate_table+0x224>
c7e2465c:	e3a02013 	mov	r2, #19	; 0x13
c7e24660:	e58d5028 	str	r5, [sp, #40]
c7e24664:	e58d502c 	str	r5, [sp, #44]
c7e24668:	e58d2030 	str	r2, [sp, #48]
c7e2466c:	ea000005 	b	c7e24688 <inflate_table+0x228>
c7e24670:	e59f337c 	ldr	r3, [pc, #892]	; c7e249f4 <inflate_table+0x594>
c7e24674:	e3e0c000 	mvn	ip, #0	; 0x0
c7e24678:	e58d3028 	str	r3, [sp, #40]
c7e2467c:	e58dc030 	str	ip, [sp, #48]
c7e24680:	e2831040 	add	r1, r3, #64	; 0x40
c7e24684:	e58d102c 	str	r1, [sp, #44]
c7e24688:	e59d3010 	ldr	r3, [sp, #16]
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
c7e2468c:	e3500001 	cmp	r0, #1	; 0x1
c7e24690:	13a00000 	movne	r0, #0	; 0x0
c7e24694:	03a00001 	moveq	r0, #1	; 0x1
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    switch (type) {
c7e24698:	e1530007 	cmp	r3, r7
c7e2469c:	21a03007 	movcs	r3, r7
c7e246a0:	e1540003 	cmp	r4, r3
c7e246a4:	21a0b004 	movcs	fp, r4
c7e246a8:	31a0b003 	movcc	fp, r3
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
c7e246ac:	e3a03001 	mov	r3, #1	; 0x1
c7e246b0:	e1a03b13 	lsl	r3, r3, fp
c7e246b4:	e58d3014 	str	r3, [sp, #20]
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
c7e246b8:	e59d2014 	ldr	r2, [sp, #20]

    /* initialize state for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
c7e246bc:	e59dc004 	ldr	ip, [sp, #4]
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
c7e246c0:	e1a03000 	mov	r3, r0
c7e246c4:	e3520e5b 	cmp	r2, #1456	; 0x5b0
c7e246c8:	33a03000 	movcc	r3, #0	; 0x0
c7e246cc:	22033001 	andcs	r3, r3, #1	; 0x1

    /* initialize state for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
c7e246d0:	e59cc000 	ldr	ip, [ip]
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
c7e246d4:	e58d000c 	str	r0, [sp, #12]
c7e246d8:	e3530000 	cmp	r3, #0	; 0x0
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */
c7e246dc:	e2420001 	sub	r0, r2, #1	; 0x1

    /* initialize state for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
c7e246e0:	e58dc024 	str	ip, [sp, #36]
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */
c7e246e4:	e58d0020 	str	r0, [sp, #32]

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
c7e246e8:	1a0000bd 	bne	c7e249e4 <inflate_table+0x584>
c7e246ec:	e3e01000 	mvn	r1, #0	; 0x0
c7e246f0:	e1a07003 	mov	r7, r3
c7e246f4:	e58d5038 	str	r5, [sp, #56]
c7e246f8:	e1a00004 	mov	r0, r4
c7e246fc:	e1a0a00b 	mov	sl, fp
c7e24700:	e1a06003 	mov	r6, r3
c7e24704:	e58d101c 	str	r1, [sp, #28]
c7e24708:	ea000003 	b	c7e2471c <inflate_table+0x2bc>
c7e2470c:	e59d2038 	ldr	r2, [sp, #56]
c7e24710:	e1a00005 	mov	r0, r5
c7e24714:	e2822002 	add	r2, r2, #2	; 0x2
c7e24718:	e58d2038 	str	r2, [sp, #56]

    /* process all codes and make table entries */
    for (;;) {
        /* create table entry */
        this.bits = (unsigned char)(len - drop);
        if ((int)(work[sym]) < end) {
c7e2471c:	e59d3038 	ldr	r3, [sp, #56]
c7e24720:	e59dc030 	ldr	ip, [sp, #48]
c7e24724:	e1d340b0 	ldrh	r4, [r3]
        return 1;

    /* process all codes and make table entries */
    for (;;) {
        /* create table entry */
        this.bits = (unsigned char)(len - drop);
c7e24728:	e0673000 	rsb	r3, r7, r0
        if ((int)(work[sym]) < end) {
c7e2472c:	e154000c 	cmp	r4, ip
        return 1;

    /* process all codes and make table entries */
    for (;;) {
        /* create table entry */
        this.bits = (unsigned char)(len - drop);
c7e24730:	e20330ff 	and	r3, r3, #255	; 0xff
c7e24734:	e58d3034 	str	r3, [sp, #52]
        if ((int)(work[sym]) < end) {
c7e24738:	b3a05000 	movlt	r5, #0	; 0x0
c7e2473c:	ba000006 	blt	c7e2475c <inflate_table+0x2fc>
            this.op = (unsigned char)0;
            this.val = work[sym];
        }
        else if ((int)(work[sym]) > end) {
            this.op = (unsigned char)(extra[work[sym]]);
            this.val = base[work[sym]];
c7e24740:	c59d1028 	ldrgt	r1, [sp, #40]
        if ((int)(work[sym]) < end) {
            this.op = (unsigned char)0;
            this.val = work[sym];
        }
        else if ((int)(work[sym]) > end) {
            this.op = (unsigned char)(extra[work[sym]]);
c7e24744:	c59d202c 	ldrgt	r2, [sp, #44]
c7e24748:	c1a03084 	lslgt	r3, r4, #1
            this.val = base[work[sym]];
c7e2474c:	c19140b3 	ldrhgt	r4, [r1, r3]
        if ((int)(work[sym]) < end) {
            this.op = (unsigned char)0;
            this.val = work[sym];
        }
        else if ((int)(work[sym]) > end) {
            this.op = (unsigned char)(extra[work[sym]]);
c7e24750:	c7d25003 	ldrbgt	r5, [r2, r3]
        this.bits = (unsigned char)(len - drop);
        if ((int)(work[sym]) < end) {
            this.op = (unsigned char)0;
            this.val = work[sym];
        }
        else if ((int)(work[sym]) > end) {
c7e24754:	d3a04000 	movle	r4, #0	; 0x0
c7e24758:	d3a05060 	movle	r5, #96	; 0x60
            this.op = (unsigned char)(32 + 64);         /* end of block */
            this.val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1U << (len - drop);
c7e2475c:	e3a02001 	mov	r2, #1	; 0x1
        fill = 1U << curr;
c7e24760:	e1a03a12 	lsl	r3, r2, sl
c7e24764:	e58d3018 	str	r3, [sp, #24]
            this.op = (unsigned char)(32 + 64);         /* end of block */
            this.val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1U << (len - drop);
c7e24768:	e0673000 	rsb	r3, r7, r0
c7e2476c:	e1a0c312 	lsl	ip, r2, r3
        fill = 1U << curr;
c7e24770:	e59d1018 	ldr	r1, [sp, #24]
c7e24774:	e3e02003 	mvn	r2, #3	; 0x3
c7e24778:	e0813736 	add	r3, r1, r6, lsr r7
c7e2477c:	e002029c 	mul	r2, ip, r2
c7e24780:	e59d1024 	ldr	r1, [sp, #36]
c7e24784:	e06c3003 	rsb	r3, ip, r3
c7e24788:	e58d203c 	str	r2, [sp, #60]
c7e2478c:	e0812103 	add	r2, r1, r3, lsl #2
c7e24790:	e59d3018 	ldr	r3, [sp, #24]
c7e24794:	e26c9000 	rsb	r9, ip, #0	; 0x0
c7e24798:	e06c1003 	rsb	r1, ip, r3
        min = fill;                 /* save offset to next table */
        do {
            fill -= incr;
            next[(huff >> drop) + fill] = this;
c7e2479c:	e0811009 	add	r1, r1, r9
        } while (fill != 0);
c7e247a0:	e081300c 	add	r3, r1, ip
c7e247a4:	e3530000 	cmp	r3, #0	; 0x0
        incr = 1U << (len - drop);
        fill = 1U << curr;
        min = fill;                 /* save offset to next table */
        do {
            fill -= incr;
            next[(huff >> drop) + fill] = this;
c7e247a8:	e59d3034 	ldr	r3, [sp, #52]
c7e247ac:	e1c240b2 	strh	r4, [r2, #2]
c7e247b0:	e5c23001 	strb	r3, [r2, #1]
c7e247b4:	e59d303c 	ldr	r3, [sp, #60]
c7e247b8:	e6c25003 	strb	r5, [r2], r3
        } while (fill != 0);
c7e247bc:	1afffff6 	bne	c7e2479c <inflate_table+0x33c>

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
c7e247c0:	e2402001 	sub	r2, r0, #1	; 0x1
c7e247c4:	e3a03001 	mov	r3, #1	; 0x1
c7e247c8:	e1a01213 	lsl	r1, r3, r2
c7e247cc:	ea000000 	b	c7e247d4 <inflate_table+0x374>
        while (huff & incr)
            incr >>= 1;
c7e247d0:	e1a010a1 	lsr	r1, r1, #1
            next[(huff >> drop) + fill] = this;
        } while (fill != 0);

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
c7e247d4:	e1110006 	tst	r1, r6
c7e247d8:	1afffffc 	bne	c7e247d0 <inflate_table+0x370>
            incr >>= 1;
        if (incr != 0) {
c7e247dc:	e3510000 	cmp	r1, #0	; 0x0
            huff &= incr - 1;
c7e247e0:	12413001 	subne	r3, r1, #1	; 0x1
c7e247e4:	10033006 	andne	r3, r3, r6
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
        if (--(count[len]) == 0) {
c7e247e8:	e28d4080 	add	r4, sp, #128	; 0x80
        incr = 1U << (len - 1);
        while (huff & incr)
            incr >>= 1;
        if (incr != 0) {
            huff &= incr - 1;
            huff += incr;
c7e247ec:	10836001 	addne	r6, r3, r1
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
        if (--(count[len]) == 0) {
c7e247f0:	e0843080 	add	r3, r4, r0, lsl #1
c7e247f4:	e15332b0 	ldrh	r3, [r3, #-32]

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
            incr >>= 1;
        if (incr != 0) {
c7e247f8:	01a06001 	moveq	r6, r1
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
        if (--(count[len]) == 0) {
c7e247fc:	e2433001 	sub	r3, r3, #1	; 0x1
c7e24800:	e1a03803 	lsl	r3, r3, #16
c7e24804:	e1b02823 	lsrs	r2, r3, #16
c7e24808:	11a05000 	movne	r5, r0
c7e2480c:	1a000007 	bne	c7e24830 <inflate_table+0x3d0>
            if (len == max) break;
c7e24810:	e59dc010 	ldr	ip, [sp, #16]
c7e24814:	e150000c 	cmp	r0, ip
c7e24818:	0a00003e 	beq	c7e24918 <inflate_table+0x4b8>
            len = lens[work[sym]];
c7e2481c:	e59d1038 	ldr	r1, [sp, #56]
c7e24820:	e59d4008 	ldr	r4, [sp, #8]
c7e24824:	e1d130b2 	ldrh	r3, [r1, #2]
c7e24828:	e1a03083 	lsl	r3, r3, #1
c7e2482c:	e19450b3 	ldrh	r5, [r4, r3]
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
        if (--(count[len]) == 0) {
c7e24830:	e28dc080 	add	ip, sp, #128	; 0x80
c7e24834:	e08c3080 	add	r3, ip, r0, lsl #1
            if (len == max) break;
            len = lens[work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) != low) {
c7e24838:	e155000b 	cmp	r5, fp
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
        if (--(count[len]) == 0) {
c7e2483c:	e14322b0 	strh	r2, [r3, #-32]
            if (len == max) break;
            len = lens[work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) != low) {
c7e24840:	9affffb1 	bls	c7e2470c <inflate_table+0x2ac>
c7e24844:	e59d0020 	ldr	r0, [sp, #32]
c7e24848:	e59d101c 	ldr	r1, [sp, #28]
c7e2484c:	e006c000 	and	ip, r6, r0
c7e24850:	e15c0001 	cmp	ip, r1
c7e24854:	0affffac 	beq	c7e2470c <inflate_table+0x2ac>
            /* if first time, transition to sub-tables */
            if (drop == 0)
c7e24858:	e3570000 	cmp	r7, #0	; 0x0
c7e2485c:	01a0700b 	moveq	r7, fp

            /* increment past last table */
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
c7e24860:	e067a005 	rsb	sl, r7, r5
            left = (int)(1 << curr);
c7e24864:	e3a03001 	mov	r3, #1	; 0x1
c7e24868:	e08a2007 	add	r2, sl, r7
c7e2486c:	e1a01a13 	lsl	r1, r3, sl
c7e24870:	e28d3060 	add	r3, sp, #96	; 0x60
c7e24874:	e0834082 	add	r4, r3, r2, lsl #1
c7e24878:	ea000005 	b	c7e24894 <inflate_table+0x434>
            while (curr + drop < max) {
                left -= count[curr + drop];
c7e2487c:	e0d430b2 	ldrh	r3, [r4], #2
c7e24880:	e0633001 	rsb	r3, r3, r1
                if (left <= 0) break;
c7e24884:	e3530000 	cmp	r3, #0	; 0x0
c7e24888:	da000005 	ble	c7e248a4 <inflate_table+0x444>
                curr++;
c7e2488c:	e28aa001 	add	sl, sl, #1	; 0x1
                left <<= 1;
c7e24890:	e1a01083 	lsl	r1, r3, #1
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
c7e24894:	e59d3010 	ldr	r3, [sp, #16]
c7e24898:	e1520003 	cmp	r2, r3
                left -= count[curr + drop];
c7e2489c:	e2822001 	add	r2, r2, #1	; 0x1
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
c7e248a0:	3afffff5 	bcc	c7e2487c <inflate_table+0x41c>
                curr++;
                left <<= 1;
            }

            /* check for enough space */
            used += 1U << curr;
c7e248a4:	e59d4014 	ldr	r4, [sp, #20]
c7e248a8:	e3a03001 	mov	r3, #1	; 0x1
c7e248ac:	e0844a13 	add	r4, r4, r3, lsl sl
            if (type == LENS && used >= ENOUGH - MAXD)
c7e248b0:	e59d300c 	ldr	r3, [sp, #12]
                curr++;
                left <<= 1;
            }

            /* check for enough space */
            used += 1U << curr;
c7e248b4:	e58d4014 	str	r4, [sp, #20]
            if (type == LENS && used >= ENOUGH - MAXD)
c7e248b8:	e3540e5b 	cmp	r4, #1456	; 0x5b0
c7e248bc:	33a03000 	movcc	r3, #0	; 0x0
c7e248c0:	22033001 	andcs	r3, r3, #1	; 0x1
c7e248c4:	e3530000 	cmp	r3, #0	; 0x0
c7e248c8:	1a000045 	bne	c7e249e4 <inflate_table+0x584>
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
c7e248cc:	e59d0004 	ldr	r0, [sp, #4]
c7e248d0:	e1a0110c 	lsl	r1, ip, #2
c7e248d4:	e5903000 	ldr	r3, [r0]
c7e248d8:	e7c3a10c 	strb	sl, [r3, ip, lsl #2]
            /* if first time, transition to sub-tables */
            if (drop == 0)
                drop = root;

            /* increment past last table */
            next += min;            /* here min is 1 << curr */
c7e248dc:	e59d2024 	ldr	r2, [sp, #36]
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
            (*table)[low].bits = (unsigned char)root;
c7e248e0:	e5903000 	ldr	r3, [r0]
            /* if first time, transition to sub-tables */
            if (drop == 0)
                drop = root;

            /* increment past last table */
            next += min;            /* here min is 1 << curr */
c7e248e4:	e59d4018 	ldr	r4, [sp, #24]
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
            (*table)[low].bits = (unsigned char)root;
c7e248e8:	e0833001 	add	r3, r3, r1
            /* if first time, transition to sub-tables */
            if (drop == 0)
                drop = root;

            /* increment past last table */
            next += min;            /* here min is 1 << curr */
c7e248ec:	e0822104 	add	r2, r2, r4, lsl #2
c7e248f0:	e58d2024 	str	r2, [sp, #36]
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
            (*table)[low].bits = (unsigned char)root;
c7e248f4:	e5c3b001 	strb	fp, [r3, #1]
            (*table)[low].val = (unsigned short)(next - *table);
c7e248f8:	e5902000 	ldr	r2, [r0]
c7e248fc:	e58dc01c 	str	ip, [sp, #28]
c7e24900:	e59dc024 	ldr	ip, [sp, #36]
c7e24904:	e062300c 	rsb	r3, r2, ip
c7e24908:	e1a03143 	asr	r3, r3, #2
c7e2490c:	e0822001 	add	r2, r2, r1
c7e24910:	e1c230b2 	strh	r3, [r2, #2]
c7e24914:	eaffff7c 	b	c7e2470c <inflate_table+0x2ac>
c7e24918:	e1a0c000 	mov	ip, r0
c7e2491c:	ea000023 	b	c7e249b0 <inflate_table+0x550>
    this.op = (unsigned char)64;                /* invalid code marker */
    this.bits = (unsigned char)(len - drop);
    this.val = (unsigned short)0;
    while (huff != 0) {
        /* when done with sub-table, drop back to root table */
        if (drop != 0 && (huff & mask) != low) {
c7e24920:	e3570000 	cmp	r7, #0	; 0x0
c7e24924:	0a00000b 	beq	c7e24958 <inflate_table+0x4f8>
c7e24928:	e59d0020 	ldr	r0, [sp, #32]
c7e2492c:	e59d101c 	ldr	r1, [sp, #28]
c7e24930:	e0063000 	and	r3, r6, r0
c7e24934:	e1530001 	cmp	r3, r1
c7e24938:	0a000006 	beq	c7e24958 <inflate_table+0x4f8>
            drop = 0;
            len = root;
            next = *table;
c7e2493c:	e59d2004 	ldr	r2, [sp, #4]
            this.bits = (unsigned char)len;
c7e24940:	e20b30ff 	and	r3, fp, #255	; 0xff
    while (huff != 0) {
        /* when done with sub-table, drop back to root table */
        if (drop != 0 && (huff & mask) != low) {
            drop = 0;
            len = root;
            next = *table;
c7e24944:	e5922000 	ldr	r2, [r2]
            this.bits = (unsigned char)len;
c7e24948:	e58d3034 	str	r3, [sp, #52]
    while (huff != 0) {
        /* when done with sub-table, drop back to root table */
        if (drop != 0 && (huff & mask) != low) {
            drop = 0;
            len = root;
            next = *table;
c7e2494c:	e58d2024 	str	r2, [sp, #36]
            this.bits = (unsigned char)len;
c7e24950:	e1a0c00b 	mov	ip, fp
c7e24954:	e3a07000 	mov	r7, #0	; 0x0
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
c7e24958:	e1a02736 	lsr	r2, r6, r7
c7e2495c:	e59d4024 	ldr	r4, [sp, #36]
c7e24960:	e3a03040 	mov	r3, #64	; 0x40
c7e24964:	e7c43102 	strb	r3, [r4, r2, lsl #2]
c7e24968:	e0841102 	add	r1, r4, r2, lsl #2

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
c7e2496c:	e3a03001 	mov	r3, #1	; 0x1
c7e24970:	e24c0001 	sub	r0, ip, #1	; 0x1
            next = *table;
            this.bits = (unsigned char)len;
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
c7e24974:	e59d2034 	ldr	r2, [sp, #52]

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
c7e24978:	e1a00013 	lsl	r0, r3, r0
            next = *table;
            this.bits = (unsigned char)len;
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
c7e2497c:	e3a03000 	mov	r3, #0	; 0x0
c7e24980:	e5c12001 	strb	r2, [r1, #1]
c7e24984:	e1c130b2 	strh	r3, [r1, #2]
c7e24988:	ea000000 	b	c7e24990 <inflate_table+0x530>

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
            incr >>= 1;
c7e2498c:	e1a000a0 	lsr	r0, r0, #1
        /* put invalid code marker in table */
        next[huff >> drop] = this;

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
c7e24990:	e1100006 	tst	r0, r6
c7e24994:	1afffffc 	bne	c7e2498c <inflate_table+0x52c>
            incr >>= 1;
        if (incr != 0) {
c7e24998:	e3500000 	cmp	r0, #0	; 0x0
c7e2499c:	01a06000 	moveq	r6, r0
c7e249a0:	0a000004 	beq	c7e249b8 <inflate_table+0x558>
            huff &= incr - 1;
c7e249a4:	e2403001 	sub	r3, r0, #1	; 0x1
c7e249a8:	e0033006 	and	r3, r3, r6
            huff += incr;
c7e249ac:	e0836000 	add	r6, r3, r0
       drops back to the root table to fill in any remaining entries there.
     */
    this.op = (unsigned char)64;                /* invalid code marker */
    this.bits = (unsigned char)(len - drop);
    this.val = (unsigned short)0;
    while (huff != 0) {
c7e249b0:	e3560000 	cmp	r6, #0	; 0x0
c7e249b4:	1affffd9 	bne	c7e24920 <inflate_table+0x4c0>
        else
            huff = 0;
    }

    /* set return parameters */
    *table += used;
c7e249b8:	e59d4004 	ldr	r4, [sp, #4]
c7e249bc:	e59d0014 	ldr	r0, [sp, #20]
c7e249c0:	e5943000 	ldr	r3, [r4]
    *bits = root;
c7e249c4:	e59dc0a0 	ldr	ip, [sp, #160]
        else
            huff = 0;
    }

    /* set return parameters */
    *table += used;
c7e249c8:	e0833100 	add	r3, r3, r0, lsl #2
    *bits = root;
c7e249cc:	e58cb000 	str	fp, [ip]
        else
            huff = 0;
    }

    /* set return parameters */
    *table += used;
c7e249d0:	e5843000 	str	r3, [r4]
    *bits = root;
c7e249d4:	e1a00006 	mov	r0, r6
c7e249d8:	ea000002 	b	c7e249e8 <inflate_table+0x588>
    return 0;
c7e249dc:	e3e00000 	mvn	r0, #0	; 0x0
c7e249e0:	ea000000 	b	c7e249e8 <inflate_table+0x588>
c7e249e4:	e3a00001 	mov	r0, #1	; 0x1
}
c7e249e8:	e28dd080 	add	sp, sp, #128	; 0x80
c7e249ec:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e249f0:	c7e2d06a 	.word	0xc7e2d06a
c7e249f4:	c7e2d2e8 	.word	0xc7e2d2e8

c7e249f8 <inflateReset>:
int ZEXPORT inflateReset(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
c7e249f8:	e3500000 	cmp	r0, #0	; 0x0
c7e249fc:	0a00001a 	beq	c7e24a6c <inflateReset+0x74>
c7e24a00:	e590c01c 	ldr	ip, [r0, #28]
c7e24a04:	e35c0000 	cmp	ip, #0	; 0x0
c7e24a08:	0a000017 	beq	c7e24a6c <inflateReset+0x74>
    strm->msg = Z_NULL;
    strm->adler = 1;        /* to support ill-conceived Java test suite */
    state->mode = HEAD;
    state->last = 0;
    state->havedict = 0;
    state->dmax = 32768U;
c7e24a0c:	e3a02902 	mov	r2, #32768	; 0x8000
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
c7e24a10:	e3a03000 	mov	r3, #0	; 0x0
    state->wsize = 0;
    state->whave = 0;
    state->write = 0;
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
c7e24a14:	e28c1e53 	add	r1, ip, #1328	; 0x530
    strm->msg = Z_NULL;
    strm->adler = 1;        /* to support ill-conceived Java test suite */
    state->mode = HEAD;
    state->last = 0;
    state->havedict = 0;
    state->dmax = 32768U;
c7e24a18:	e58c2014 	str	r2, [ip, #20]

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
    strm->msg = Z_NULL;
    strm->adler = 1;        /* to support ill-conceived Java test suite */
c7e24a1c:	e3a02001 	mov	r2, #1	; 0x1
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
c7e24a20:	e58c301c 	str	r3, [ip, #28]
    strm->msg = Z_NULL;
c7e24a24:	e5803018 	str	r3, [r0, #24]
    strm->adler = 1;        /* to support ill-conceived Java test suite */
c7e24a28:	e5802034 	str	r2, [r0, #52]
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
c7e24a2c:	e5803014 	str	r3, [r0, #20]
c7e24a30:	e5803008 	str	r3, [r0, #8]
    state->wsize = 0;
    state->whave = 0;
    state->write = 0;
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
c7e24a34:	e58c104c 	str	r1, [ip, #76]
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
    strm->msg = Z_NULL;
    strm->adler = 1;        /* to support ill-conceived Java test suite */
    state->mode = HEAD;
c7e24a38:	e58c3000 	str	r3, [ip]
    state->last = 0;
c7e24a3c:	e58c3004 	str	r3, [ip, #4]
    state->havedict = 0;
c7e24a40:	e58c300c 	str	r3, [ip, #12]
    state->dmax = 32768U;
    state->head = Z_NULL;
c7e24a44:	e58c3020 	str	r3, [ip, #32]
    state->wsize = 0;
c7e24a48:	e58c3028 	str	r3, [ip, #40]
    state->whave = 0;
c7e24a4c:	e58c302c 	str	r3, [ip, #44]
    state->write = 0;
c7e24a50:	e58c3030 	str	r3, [ip, #48]
    state->hold = 0;
c7e24a54:	e58c3038 	str	r3, [ip, #56]
    state->bits = 0;
c7e24a58:	e58c303c 	str	r3, [ip, #60]
    state->lencode = state->distcode = state->next = state->codes;
c7e24a5c:	e58c106c 	str	r1, [ip, #108]
c7e24a60:	e58c1050 	str	r1, [ip, #80]
c7e24a64:	e1a00003 	mov	r0, r3
c7e24a68:	e12fff1e 	bx	lr
    WATCHDOG_RESET();
    Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
c7e24a6c:	e3e00001 	mvn	r0, #1	; 0x1
}
c7e24a70:	e12fff1e 	bx	lr

c7e24a74 <inflateInit2_>:
const char *version;
int stream_size;
{
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
c7e24a74:	e3520000 	cmp	r2, #0	; 0x0
int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)
z_streamp strm;
int windowBits;
const char *version;
int stream_size;
{
c7e24a78:	e92d4070 	push	{r4, r5, r6, lr}
c7e24a7c:	e1a05001 	mov	r5, r1
c7e24a80:	e1a04000 	mov	r4, r0
c7e24a84:	e1a01003 	mov	r1, r3
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
c7e24a88:	0a000036 	beq	c7e24b68 <inflateInit2_+0xf4>
c7e24a8c:	e5d23000 	ldrb	r3, [r2]
c7e24a90:	e351003c 	cmp	r1, #60	; 0x3c
c7e24a94:	03530031 	cmpeq	r3, #49	; 0x31
c7e24a98:	03a02000 	moveq	r2, #0	; 0x0
c7e24a9c:	13a02001 	movne	r2, #1	; 0x1
c7e24aa0:	1a000030 	bne	c7e24b68 <inflateInit2_+0xf4>
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
c7e24aa4:	e3500000 	cmp	r0, #0	; 0x0
c7e24aa8:	0a000026 	beq	c7e24b48 <inflateInit2_+0xd4>
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
c7e24aac:	e5903020 	ldr	r3, [r0, #32]

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
c7e24ab0:	e5802018 	str	r2, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
c7e24ab4:	e3530000 	cmp	r3, #0	; 0x0
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
c7e24ab8:	05803028 	streq	r3, [r0, #40]
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
c7e24abc:	059f30ac 	ldreq	r3, [pc, #172]	; c7e24b70 <inflateInit2_+0xfc>
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    state = (struct inflate_state FAR *)
c7e24ac0:	e3a01001 	mov	r1, #1	; 0x1
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
c7e24ac4:	05803020 	streq	r3, [r0, #32]
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
c7e24ac8:	e5903024 	ldr	r3, [r0, #36]
    state = (struct inflate_state FAR *)
c7e24acc:	e59f20a0 	ldr	r2, [pc, #160]	; c7e24b74 <inflateInit2_+0x100>
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
c7e24ad0:	e3530000 	cmp	r3, #0	; 0x0
c7e24ad4:	059f309c 	ldreq	r3, [pc, #156]	; c7e24b78 <inflateInit2_+0x104>
c7e24ad8:	05803024 	streq	r3, [r0, #36]
    state = (struct inflate_state FAR *)
c7e24adc:	e5900028 	ldr	r0, [r0, #40]
c7e24ae0:	e1a0e00f 	mov	lr, pc
c7e24ae4:	e594f020 	ldr	pc, [r4, #32]
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
c7e24ae8:	e3500000 	cmp	r0, #0	; 0x0
c7e24aec:	03e00003 	mvneq	r0, #3	; 0x3
c7e24af0:	08bd8070 	popeq	{r4, r5, r6, pc}
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
    if (windowBits < 0) {
c7e24af4:	e3550000 	cmp	r5, #0	; 0x0
        state->wrap = 0;
c7e24af8:	b3a03000 	movlt	r3, #0	; 0x0
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    state = (struct inflate_state FAR *)
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
c7e24afc:	e584001c 	str	r0, [r4, #28]
    if (windowBits < 0) {
        state->wrap = 0;
c7e24b00:	b5803008 	strlt	r3, [r0, #8]
        windowBits = -windowBits;
c7e24b04:	b2655000 	rsblt	r5, r5, #0	; 0x0
    state = (struct inflate_state FAR *)
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
    if (windowBits < 0) {
c7e24b08:	ba000004 	blt	c7e24b20 <inflateInit2_+0xac>
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
c7e24b0c:	e1a03245 	asr	r3, r5, #4
c7e24b10:	e2833001 	add	r3, r3, #1	; 0x1
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
c7e24b14:	e355002f 	cmp	r5, #47	; 0x2f
    if (windowBits < 0) {
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
c7e24b18:	e5803008 	str	r3, [r0, #8]
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
c7e24b1c:	d205500f 	andle	r5, r5, #15	; 0xf
#endif
    }
    if (windowBits < 8 || windowBits > 15) {
c7e24b20:	e2453008 	sub	r3, r5, #8	; 0x8
c7e24b24:	e3530007 	cmp	r3, #7	; 0x7
c7e24b28:	9a000008 	bls	c7e24b50 <inflateInit2_+0xdc>
        ZFREE(strm, state);
c7e24b2c:	e1a01000 	mov	r1, r0
c7e24b30:	e3a02000 	mov	r2, #0	; 0x0
c7e24b34:	e5940028 	ldr	r0, [r4, #40]
c7e24b38:	e1a0e00f 	mov	lr, pc
c7e24b3c:	e594f024 	ldr	pc, [r4, #36]
        strm->state = Z_NULL;
c7e24b40:	e3a03000 	mov	r3, #0	; 0x0
c7e24b44:	e584301c 	str	r3, [r4, #28]
c7e24b48:	e3e00001 	mvn	r0, #1	; 0x1
c7e24b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
    state->window = Z_NULL;
c7e24b50:	e3a03000 	mov	r3, #0	; 0x0
c7e24b54:	e5803034 	str	r3, [r0, #52]
    if (windowBits < 8 || windowBits > 15) {
        ZFREE(strm, state);
        strm->state = Z_NULL;
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
c7e24b58:	e5805024 	str	r5, [r0, #36]
    state->window = Z_NULL;
    return inflateReset(strm);
c7e24b5c:	e1a00004 	mov	r0, r4
}
c7e24b60:	e8bd4070 	pop	{r4, r5, r6, lr}
        strm->state = Z_NULL;
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
    state->window = Z_NULL;
    return inflateReset(strm);
c7e24b64:	eaffffa3 	b	c7e249f8 <inflateReset>
c7e24b68:	e3e00005 	mvn	r0, #5	; 0x5
}
c7e24b6c:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e24b70:	c7e24f38 	.word	0xc7e24f38
c7e24b74:	00002530 	.word	0x00002530
c7e24b78:	c7e24f30 	.word	0xc7e24f30

c7e24b7c <inflateInit_>:

int ZEXPORT inflateInit_(strm, version, stream_size)
z_streamp strm;
const char *version;
int stream_size;
{
c7e24b7c:	e1a03002 	mov	r3, r2
    return inflateInit2_(strm, DEF_WBITS, version, stream_size);
c7e24b80:	e1a02001 	mov	r2, r1
c7e24b84:	e3a0100f 	mov	r1, #15	; 0xf
c7e24b88:	eaffffb9 	b	c7e24a74 <inflateInit2_>

c7e24b8c <inflateEnd>:
    return ret;
}

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
c7e24b8c:	e92d4010 	push	{r4, lr}
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
c7e24b90:	e2504000 	subs	r4, r0, #0	; 0x0
c7e24b94:	0a000014 	beq	c7e24bec <inflateEnd+0x60>
c7e24b98:	e594101c 	ldr	r1, [r4, #28]
c7e24b9c:	e3510000 	cmp	r1, #0	; 0x0
c7e24ba0:	0a000011 	beq	c7e24bec <inflateEnd+0x60>
c7e24ba4:	e5943024 	ldr	r3, [r4, #36]
c7e24ba8:	e3530000 	cmp	r3, #0	; 0x0
c7e24bac:	0a00000e 	beq	c7e24bec <inflateEnd+0x60>
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->window != Z_NULL) {
c7e24bb0:	e5911034 	ldr	r1, [r1, #52]
c7e24bb4:	e3510000 	cmp	r1, #0	; 0x0
c7e24bb8:	0a000002 	beq	c7e24bc8 <inflateEnd+0x3c>
	WATCHDOG_RESET();
	ZFREE(strm, state->window);
c7e24bbc:	e5940028 	ldr	r0, [r4, #40]
c7e24bc0:	e3a02000 	mov	r2, #0	; 0x0
c7e24bc4:	e12fff33 	blx	r3
    }
    ZFREE(strm, strm->state);
c7e24bc8:	e5940028 	ldr	r0, [r4, #40]
c7e24bcc:	e594101c 	ldr	r1, [r4, #28]
c7e24bd0:	e3a02000 	mov	r2, #0	; 0x0
c7e24bd4:	e1a0e00f 	mov	lr, pc
c7e24bd8:	e594f024 	ldr	pc, [r4, #36]
    strm->state = Z_NULL;
c7e24bdc:	e3a03000 	mov	r3, #0	; 0x0
c7e24be0:	e584301c 	str	r3, [r4, #28]
c7e24be4:	e1a00003 	mov	r0, r3
c7e24be8:	e8bd8010 	pop	{r4, pc}
    Tracev((stderr, "inflate: end\n"));
    return Z_OK;
c7e24bec:	e3e00001 	mvn	r0, #1	; 0x1
}
c7e24bf0:	e8bd8010 	pop	{r4, pc}

c7e24bf4 <adler32>:
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
c7e24bf4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
c7e24bf8:	e3520001 	cmp	r2, #1	; 0x1
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;
c7e24bfc:	e1a05800 	lsl	r5, r0, #16
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
c7e24c00:	e1a07002 	mov	r7, r2
c7e24c04:	e1a09001 	mov	r9, r1
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;
c7e24c08:	e1a05825 	lsr	r5, r5, #16
{
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
c7e24c0c:	e1a06820 	lsr	r6, r0, #16
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
c7e24c10:	1a00000c 	bne	c7e24c48 <adler32+0x54>
        adler += buf[0];
c7e24c14:	e5d13000 	ldrb	r3, [r1]
c7e24c18:	e0831005 	add	r1, r3, r5
        if (adler >= BASE)
c7e24c1c:	e59f32f8 	ldr	r3, [pc, #760]	; c7e24f1c <adler32+0x328>
c7e24c20:	e1510003 	cmp	r1, r3
            adler -= BASE;
c7e24c24:	82411cff 	subhi	r1, r1, #65280	; 0xff00
c7e24c28:	824110f1 	subhi	r1, r1, #241	; 0xf1
        sum2 += adler;
        if (sum2 >= BASE)
c7e24c2c:	e59f32e8 	ldr	r3, [pc, #744]	; c7e24f1c <adler32+0x328>
    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
        adler += buf[0];
        if (adler >= BASE)
            adler -= BASE;
        sum2 += adler;
c7e24c30:	e0810006 	add	r0, r1, r6
        if (sum2 >= BASE)
c7e24c34:	e1500003 	cmp	r0, r3
            sum2 -= BASE;
c7e24c38:	82400cff 	subhi	r0, r0, #65280	; 0xff00
c7e24c3c:	824000f1 	subhi	r0, r0, #241	; 0xf1
        return adler | (sum2 << 16);
c7e24c40:	e1810800 	orr	r0, r1, r0, lsl #16
c7e24c44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
c7e24c48:	e3510000 	cmp	r1, #0	; 0x0
c7e24c4c:	03a00001 	moveq	r0, #1	; 0x1
c7e24c50:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
c7e24c54:	e352000f 	cmp	r2, #15	; 0xf
c7e24c58:	81a0a001 	movhi	sl, r1
c7e24c5c:	81a04002 	movhi	r4, r2
c7e24c60:	93a02000 	movls	r2, #0	; 0x0
c7e24c64:	9a000004 	bls	c7e24c7c <adler32+0x88>
c7e24c68:	ea000050 	b	c7e24db0 <adler32+0x1bc>
        while (len--) {
            adler += *buf++;
c7e24c6c:	e7d93002 	ldrb	r3, [r9, r2]
            sum2 += adler;
c7e24c70:	e2822001 	add	r2, r2, #1	; 0x1
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
c7e24c74:	e0855003 	add	r5, r5, r3
            sum2 += adler;
c7e24c78:	e0866005 	add	r6, r6, r5
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
c7e24c7c:	e3570000 	cmp	r7, #0	; 0x0
            adler += *buf++;
            sum2 += adler;
c7e24c80:	e2477001 	sub	r7, r7, #1	; 0x1
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
c7e24c84:	1afffff8 	bne	c7e24c6c <adler32+0x78>
            adler += *buf++;
            sum2 += adler;
        }
        if (adler >= BASE)
c7e24c88:	e59f328c 	ldr	r3, [pc, #652]	; c7e24f1c <adler32+0x328>
            adler -= BASE;
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
c7e24c8c:	e1a00006 	mov	r0, r6
    if (len < 16) {
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        if (adler >= BASE)
c7e24c90:	e1550003 	cmp	r5, r3
            adler -= BASE;
c7e24c94:	82455cff 	subhi	r5, r5, #65280	; 0xff00
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
c7e24c98:	e59f1280 	ldr	r1, [pc, #640]	; c7e24f20 <adler32+0x32c>
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        if (adler >= BASE)
            adler -= BASE;
c7e24c9c:	824550f1 	subhi	r5, r5, #241	; 0xf1
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
c7e24ca0:	eb001655 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e24ca4:	e1850801 	orr	r0, r5, r1, lsl #16
c7e24ca8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e24cac:	e59fe270 	ldr	lr, [pc, #624]	; c7e24f24 <adler32+0x330>
c7e24cb0:	e1a0c00a 	mov	ip, sl
    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
c7e24cb4:	e5dc3000 	ldrb	r3, [ip]
c7e24cb8:	e5dc1001 	ldrb	r1, [ip, #1]
c7e24cbc:	e0853003 	add	r3, r5, r3
c7e24cc0:	e5dc0002 	ldrb	r0, [ip, #2]
c7e24cc4:	e0832006 	add	r2, r3, r6
c7e24cc8:	e0833001 	add	r3, r3, r1
c7e24ccc:	e5dc1003 	ldrb	r1, [ip, #3]
c7e24cd0:	e0822003 	add	r2, r2, r3
c7e24cd4:	e0833000 	add	r3, r3, r0
c7e24cd8:	e5dc0004 	ldrb	r0, [ip, #4]
c7e24cdc:	e0822003 	add	r2, r2, r3
c7e24ce0:	e0833001 	add	r3, r3, r1
c7e24ce4:	e5dc1005 	ldrb	r1, [ip, #5]
c7e24ce8:	e0822003 	add	r2, r2, r3
c7e24cec:	e0833000 	add	r3, r3, r0
c7e24cf0:	e5dc0006 	ldrb	r0, [ip, #6]
c7e24cf4:	e0822003 	add	r2, r2, r3
c7e24cf8:	e0833001 	add	r3, r3, r1
c7e24cfc:	e5dc1007 	ldrb	r1, [ip, #7]
c7e24d00:	e0822003 	add	r2, r2, r3
c7e24d04:	e0833000 	add	r3, r3, r0
c7e24d08:	e5dc0008 	ldrb	r0, [ip, #8]
c7e24d0c:	e0822003 	add	r2, r2, r3
c7e24d10:	e0833001 	add	r3, r3, r1
c7e24d14:	e5dc1009 	ldrb	r1, [ip, #9]
c7e24d18:	e0822003 	add	r2, r2, r3
c7e24d1c:	e0833000 	add	r3, r3, r0
c7e24d20:	e5dc000a 	ldrb	r0, [ip, #10]
c7e24d24:	e0822003 	add	r2, r2, r3
c7e24d28:	e0833001 	add	r3, r3, r1
c7e24d2c:	e5dc100b 	ldrb	r1, [ip, #11]
c7e24d30:	e0822003 	add	r2, r2, r3
c7e24d34:	e0833000 	add	r3, r3, r0
c7e24d38:	e5dc000c 	ldrb	r0, [ip, #12]
c7e24d3c:	e0822003 	add	r2, r2, r3
c7e24d40:	e0833001 	add	r3, r3, r1
c7e24d44:	e5dc100d 	ldrb	r1, [ip, #13]
c7e24d48:	e0822003 	add	r2, r2, r3
c7e24d4c:	e0833000 	add	r3, r3, r0
c7e24d50:	e5dc000e 	ldrb	r0, [ip, #14]
c7e24d54:	e0822003 	add	r2, r2, r3
c7e24d58:	e0833001 	add	r3, r3, r1
c7e24d5c:	e5dc100f 	ldrb	r1, [ip, #15]
c7e24d60:	e0822003 	add	r2, r2, r3
c7e24d64:	e0833000 	add	r3, r3, r0
c7e24d68:	e0822003 	add	r2, r2, r3
c7e24d6c:	e0835001 	add	r5, r3, r1
            buf += 16;
        } while (--n);
c7e24d70:	e25ee001 	subs	lr, lr, #1	; 0x1
    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
c7e24d74:	e0826005 	add	r6, r2, r5
            buf += 16;
c7e24d78:	e28cc010 	add	ip, ip, #16	; 0x10
        } while (--n);
c7e24d7c:	1affffcc 	bne	c7e24cb4 <adler32+0xc0>
        MOD(adler);
c7e24d80:	e1a00005 	mov	r0, r5
c7e24d84:	e59f1194 	ldr	r1, [pc, #404]	; c7e24f20 <adler32+0x32c>
c7e24d88:	eb00161b 	bl	c7e2a5fc <__aeabi_uidivmod>
        MOD(sum2);
c7e24d8c:	e1a00006 	mov	r0, r6
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
c7e24d90:	e1a05001 	mov	r5, r1
        MOD(sum2);
c7e24d94:	e59f1184 	ldr	r1, [pc, #388]	; c7e24f20 <adler32+0x32c>
c7e24d98:	eb001617 	bl	c7e2a5fc <__aeabi_uidivmod>
        len -= NMAX;
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
c7e24d9c:	e28aad56 	add	sl, sl, #5504	; 0x1580
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
c7e24da0:	e2444d56 	sub	r4, r4, #5504	; 0x1580
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
c7e24da4:	e28aa030 	add	sl, sl, #48	; 0x30
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
c7e24da8:	e2444030 	sub	r4, r4, #48	; 0x30
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
        MOD(sum2);
c7e24dac:	e1a06001 	mov	r6, r1
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
c7e24db0:	e59f3170 	ldr	r3, [pc, #368]	; c7e24f28 <adler32+0x334>
c7e24db4:	e1540003 	cmp	r4, r3
c7e24db8:	8affffbb 	bhi	c7e24cac <adler32+0xb8>
c7e24dbc:	e59f4168 	ldr	r4, [pc, #360]	; c7e24f2c <adler32+0x338>
c7e24dc0:	e1a00007 	mov	r0, r7
c7e24dc4:	e1a01004 	mov	r1, r4
c7e24dc8:	eb00160b 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e24dcc:	e1a00007 	mov	r0, r7
c7e24dd0:	e1a0a001 	mov	sl, r1
c7e24dd4:	e1a01004 	mov	r1, r4
c7e24dd8:	eb0015ca 	bl	c7e2a508 <__udivsi3>
c7e24ddc:	e0279094 	mla	r7, r4, r0, r9
        MOD(adler);
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
c7e24de0:	e35a0000 	cmp	sl, #0	; 0x0
c7e24de4:	11a0c007 	movne	ip, r7
c7e24de8:	11a0e00a 	movne	lr, sl
c7e24dec:	1a000030 	bne	c7e24eb4 <adler32+0x2c0>
c7e24df0:	ea000047 	b	c7e24f14 <adler32+0x320>
        while (len >= 16) {
            len -= 16;
            DO16(buf);
c7e24df4:	e55c3010 	ldrb	r3, [ip, #-16]
c7e24df8:	e55c100f 	ldrb	r1, [ip, #-15]
c7e24dfc:	e0853003 	add	r3, r5, r3
c7e24e00:	e55c000e 	ldrb	r0, [ip, #-14]
c7e24e04:	e0832006 	add	r2, r3, r6
c7e24e08:	e0833001 	add	r3, r3, r1
c7e24e0c:	e55c100d 	ldrb	r1, [ip, #-13]
c7e24e10:	e0822003 	add	r2, r2, r3
c7e24e14:	e0833000 	add	r3, r3, r0
c7e24e18:	e55c000c 	ldrb	r0, [ip, #-12]
c7e24e1c:	e0822003 	add	r2, r2, r3
c7e24e20:	e0833001 	add	r3, r3, r1
c7e24e24:	e55c100b 	ldrb	r1, [ip, #-11]
c7e24e28:	e0822003 	add	r2, r2, r3
c7e24e2c:	e0833000 	add	r3, r3, r0
c7e24e30:	e55c000a 	ldrb	r0, [ip, #-10]
c7e24e34:	e0822003 	add	r2, r2, r3
c7e24e38:	e0833001 	add	r3, r3, r1
c7e24e3c:	e55c1009 	ldrb	r1, [ip, #-9]
c7e24e40:	e0822003 	add	r2, r2, r3
c7e24e44:	e0833000 	add	r3, r3, r0
c7e24e48:	e55c0008 	ldrb	r0, [ip, #-8]
c7e24e4c:	e0822003 	add	r2, r2, r3
c7e24e50:	e0833001 	add	r3, r3, r1
c7e24e54:	e55c1007 	ldrb	r1, [ip, #-7]
c7e24e58:	e0822003 	add	r2, r2, r3
c7e24e5c:	e0833000 	add	r3, r3, r0
c7e24e60:	e55c0006 	ldrb	r0, [ip, #-6]
c7e24e64:	e0822003 	add	r2, r2, r3
c7e24e68:	e0833001 	add	r3, r3, r1
c7e24e6c:	e55c1005 	ldrb	r1, [ip, #-5]
c7e24e70:	e0822003 	add	r2, r2, r3
c7e24e74:	e0833000 	add	r3, r3, r0
c7e24e78:	e55c0004 	ldrb	r0, [ip, #-4]
c7e24e7c:	e0822003 	add	r2, r2, r3
c7e24e80:	e0833001 	add	r3, r3, r1
c7e24e84:	e55c1003 	ldrb	r1, [ip, #-3]
c7e24e88:	e0822003 	add	r2, r2, r3
c7e24e8c:	e0833000 	add	r3, r3, r0
c7e24e90:	e55c0002 	ldrb	r0, [ip, #-2]
c7e24e94:	e0822003 	add	r2, r2, r3
c7e24e98:	e0833001 	add	r3, r3, r1
c7e24e9c:	e55c1001 	ldrb	r1, [ip, #-1]
c7e24ea0:	e0822003 	add	r2, r2, r3
c7e24ea4:	e0833000 	add	r3, r3, r0
c7e24ea8:	e0822003 	add	r2, r2, r3
c7e24eac:	e0835001 	add	r5, r3, r1
c7e24eb0:	e0826005 	add	r6, r2, r5
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
c7e24eb4:	e35e000f 	cmp	lr, #15	; 0xf
            len -= 16;
            DO16(buf);
c7e24eb8:	e28cc010 	add	ip, ip, #16	; 0x10
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
            len -= 16;
c7e24ebc:	e24ee010 	sub	lr, lr, #16	; 0x10
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
c7e24ec0:	8affffcb 	bhi	c7e24df4 <adler32+0x200>
c7e24ec4:	e3ca300f 	bic	r3, sl, #15	; 0xf
c7e24ec8:	e0870003 	add	r0, r7, r3
c7e24ecc:	e20a100f 	and	r1, sl, #15	; 0xf
c7e24ed0:	e3a02000 	mov	r2, #0	; 0x0
c7e24ed4:	ea000003 	b	c7e24ee8 <adler32+0x2f4>
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
c7e24ed8:	e7d03002 	ldrb	r3, [r0, r2]
            sum2 += adler;
c7e24edc:	e2822001 	add	r2, r2, #1	; 0x1
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
c7e24ee0:	e0855003 	add	r5, r5, r3
            sum2 += adler;
c7e24ee4:	e0866005 	add	r6, r6, r5
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
c7e24ee8:	e3510000 	cmp	r1, #0	; 0x0
            adler += *buf++;
            sum2 += adler;
c7e24eec:	e2411001 	sub	r1, r1, #1	; 0x1
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
c7e24ef0:	1afffff8 	bne	c7e24ed8 <adler32+0x2e4>
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
c7e24ef4:	e1a00005 	mov	r0, r5
c7e24ef8:	e59f1020 	ldr	r1, [pc, #32]	; c7e24f20 <adler32+0x32c>
c7e24efc:	eb0015be 	bl	c7e2a5fc <__aeabi_uidivmod>
        MOD(sum2);
c7e24f00:	e1a00006 	mov	r0, r6
        }
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
c7e24f04:	e1a05001 	mov	r5, r1
        MOD(sum2);
c7e24f08:	e59f1010 	ldr	r1, [pc, #16]	; c7e24f20 <adler32+0x32c>
c7e24f0c:	eb0015ba 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e24f10:	e1a06001 	mov	r6, r1
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
c7e24f14:	e1850806 	orr	r0, r5, r6, lsl #16
}
c7e24f18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
c7e24f1c:	0000fff0 	.word	0x0000fff0
c7e24f20:	0000fff1 	.word	0x0000fff1
c7e24f24:	0000015b 	.word	0x0000015b
c7e24f28:	000015af 	.word	0x000015af
c7e24f2c:	000015b0 	.word	0x000015b0

c7e24f30 <zcfree>:
void  zcfree (opaque, ptr, nb)
	voidpf opaque;
	voidpf ptr;
	unsigned nb;
{
	free(ptr);
c7e24f30:	e1a00001 	mov	r0, r1
c7e24f34:	eaff9009 	b	c7e08f60 <free>

c7e24f38 <zcalloc>:
	unsigned items;
	unsigned size;
{
	if (opaque)
		items += size - size; /* make compiler happy */
	return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
c7e24f38:	e0000291 	mul	r0, r1, r2
c7e24f3c:	eaff9096 	b	c7e0919c <malloc>

c7e24f40 <inflate>:
   will return Z_BUF_ERROR if it has not reached the end of the stream.
 */
int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
c7e24f40:	e92d4ef0 	push	{r4, r5, r6, r7, r9, sl, fp, lr}
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL ||
c7e24f44:	e3500000 	cmp	r0, #0	; 0x0
   will return Z_BUF_ERROR if it has not reached the end of the stream.
 */
int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
c7e24f48:	e24dd060 	sub	sp, sp, #96	; 0x60
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL ||
c7e24f4c:	e58d000c 	str	r0, [sp, #12]
   will return Z_BUF_ERROR if it has not reached the end of the stream.
 */
int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
c7e24f50:	e58d1008 	str	r1, [sp, #8]
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL ||
c7e24f54:	0a0005de 	beq	c7e266d4 <inflate+0x1794>
c7e24f58:	e590501c 	ldr	r5, [r0, #28]
c7e24f5c:	e3550000 	cmp	r5, #0	; 0x0
c7e24f60:	0a0005db 	beq	c7e266d4 <inflate+0x1794>
c7e24f64:	e5903000 	ldr	r3, [r0]
c7e24f68:	e3530000 	cmp	r3, #0	; 0x0
c7e24f6c:	1a000002 	bne	c7e24f7c <inflate+0x3c>
c7e24f70:	e5903004 	ldr	r3, [r0, #4]
c7e24f74:	e3530000 	cmp	r3, #0	; 0x0
c7e24f78:	1a0005d5 	bne	c7e266d4 <inflate+0x1794>
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
c7e24f7c:	e5953000 	ldr	r3, [r5]
    LOAD();
c7e24f80:	e59d000c 	ldr	r0, [sp, #12]
c7e24f84:	e59d100c 	ldr	r1, [sp, #12]
    if (strm == Z_NULL || strm->state == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
c7e24f88:	e353000b 	cmp	r3, #11	; 0xb
    LOAD();
c7e24f8c:	e5900010 	ldr	r0, [r0, #16]
c7e24f90:	e59d200c 	ldr	r2, [sp, #12]
    if (strm == Z_NULL || strm->state == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
c7e24f94:	02833001 	addeq	r3, r3, #1	; 0x1
    LOAD();
c7e24f98:	e5911004 	ldr	r1, [r1, #4]
c7e24f9c:	e58d0038 	str	r0, [sp, #56]
c7e24fa0:	e592200c 	ldr	r2, [r2, #12]
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
c7e24fa4:	e2850070 	add	r0, r5, #112	; 0x70
    if (strm == Z_NULL || strm->state == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
c7e24fa8:	05853000 	streq	r3, [r5]
    LOAD();
c7e24fac:	e59d300c 	ldr	r3, [sp, #12]
c7e24fb0:	e58d1044 	str	r1, [sp, #68]
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
c7e24fb4:	e285ce53 	add	ip, r5, #1328	; 0x530
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
c7e24fb8:	e285106c 	add	r1, r5, #108	; 0x6c
c7e24fbc:	e58d0014 	str	r0, [sp, #20]
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
c7e24fc0:	e59d0038 	ldr	r0, [sp, #56]
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
    LOAD();
c7e24fc4:	e58d2034 	str	r2, [sp, #52]
c7e24fc8:	e593b000 	ldr	fp, [r3]
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
c7e24fcc:	e58dc010 	str	ip, [sp, #16]
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
c7e24fd0:	e58d1018 	str	r1, [sp, #24]
c7e24fd4:	e2852054 	add	r2, r5, #84	; 0x54
c7e24fd8:	e2853e2f 	add	r3, r5, #752	; 0x2f0
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
c7e24fdc:	e285c058 	add	ip, r5, #88	; 0x58
c7e24fe0:	e3a01000 	mov	r1, #0	; 0x0
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
    LOAD();
c7e24fe4:	e5956038 	ldr	r6, [r5, #56]
c7e24fe8:	e595703c 	ldr	r7, [r5, #60]
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
c7e24fec:	e59da044 	ldr	sl, [sp, #68]
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
c7e24ff0:	e58d201c 	str	r2, [sp, #28]
c7e24ff4:	e58d3020 	str	r3, [sp, #32]
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
c7e24ff8:	e58dc028 	str	ip, [sp, #40]
c7e24ffc:	e58d003c 	str	r0, [sp, #60]
c7e25000:	e58d1040 	str	r1, [sp, #64]
    LOAD();
    in = have;
    out = left;
    ret = Z_OK;
    for (;;)
        switch (state->mode) {
c7e25004:	e5953000 	ldr	r3, [r5]
c7e25008:	e353001c 	cmp	r3, #28	; 0x1c
c7e2500c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e25010:	ea0005af 	b	c7e266d4 <inflate+0x1794>
c7e25014:	c7e250b4 	.word	0xc7e250b4
c7e25018:	c7e250ac 	.word	0xc7e250ac
c7e2501c:	c7e252cc 	.word	0xc7e252cc
c7e25020:	c7e25354 	.word	0xc7e25354
c7e25024:	c7e253d8 	.word	0xc7e253d8
c7e25028:	c7e25474 	.word	0xc7e25474
c7e2502c:	c7e25528 	.word	0xc7e25528
c7e25030:	c7e255d4 	.word	0xc7e255d4
c7e25034:	c7e25678 	.word	0xc7e25678
c7e25038:	c7e250a4 	.word	0xc7e250a4
c7e2503c:	c7e25770 	.word	0xc7e25770
c7e25040:	c7e257cc 	.word	0xc7e257cc
c7e25044:	c7e257d8 	.word	0xc7e257d8
c7e25048:	c7e258b0 	.word	0xc7e258b0
c7e2504c:	c7e2591c 	.word	0xc7e2591c
c7e25050:	c7e2509c 	.word	0xc7e2509c
c7e25054:	c7e25a70 	.word	0xc7e25a70
c7e25058:	c7e25d10 	.word	0xc7e25d10
c7e2505c:	c7e25dcc 	.word	0xc7e25dcc
c7e25060:	c7e25f68 	.word	0xc7e25f68
c7e25064:	c7e25fcc 	.word	0xc7e25fcc
c7e25068:	c7e26124 	.word	0xc7e26124
c7e2506c:	c7e261b8 	.word	0xc7e261b8
c7e25070:	c7e26270 	.word	0xc7e26270
c7e25074:	c7e262a0 	.word	0xc7e262a0
c7e25078:	c7e263bc 	.word	0xc7e263bc
c7e2507c:	c7e25088 	.word	0xc7e25088
c7e25080:	c7e2643c 	.word	0xc7e2643c
c7e25084:	c7e25090 	.word	0xc7e25090
c7e25088:	e3a02001 	mov	r2, #1	; 0x1
c7e2508c:	ea0004eb 	b	c7e26440 <inflate+0x1500>
c7e25090:	e3e03003 	mvn	r3, #3	; 0x3
c7e25094:	e58d3040 	str	r3, [sp, #64]
c7e25098:	ea00058f 	b	c7e266dc <inflate+0x179c>
c7e2509c:	e1a0200b 	mov	r2, fp
c7e250a0:	ea00023f 	b	c7e259a4 <inflate+0xa64>
c7e250a4:	e1a0200b 	mov	r2, fp
c7e250a8:	ea00019f 	b	c7e2572c <inflate+0x7ec>
c7e250ac:	e1a0200b 	mov	r2, fp
c7e250b0:	ea000066 	b	c7e25250 <inflate+0x310>
        case HEAD:
            if (state->wrap == 0) {
c7e250b4:	e5951008 	ldr	r1, [r5, #8]
c7e250b8:	e3510000 	cmp	r1, #0	; 0x0
c7e250bc:	11a0200b 	movne	r2, fp
                state->mode = TYPEDO;
c7e250c0:	03a0300c 	moveq	r3, #12	; 0xc
    out = left;
    ret = Z_OK;
    for (;;)
        switch (state->mode) {
        case HEAD:
            if (state->wrap == 0) {
c7e250c4:	0a000036 	beq	c7e251a4 <inflate+0x264>
c7e250c8:	ea000006 	b	c7e250e8 <inflate+0x1a8>
                state->mode = TYPEDO;
                break;
            }
            NEEDBITS(16);
c7e250cc:	e35a0000 	cmp	sl, #0	; 0x0
    for (;;)
        switch (state->mode) {
        case HEAD:
            if (state->wrap == 0) {
                state->mode = TYPEDO;
                break;
c7e250d0:	e2822001 	add	r2, r2, #1	; 0x1
            }
            NEEDBITS(16);
c7e250d4:	0a0004da 	beq	c7e26444 <inflate+0x1504>
c7e250d8:	e5523001 	ldrb	r3, [r2, #-1]
c7e250dc:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e250e0:	e0866713 	add	r6, r6, r3, lsl r7
c7e250e4:	e2877008 	add	r7, r7, #8	; 0x8
c7e250e8:	e357000f 	cmp	r7, #15	; 0xf
c7e250ec:	e1a0b002 	mov	fp, r2
c7e250f0:	9afffff5 	bls	c7e250cc <inflate+0x18c>
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
c7e250f4:	e59f3f30 	ldr	r3, [pc, #3888]	; c7e2602c <inflate+0x10ec>
c7e250f8:	e1560003 	cmp	r6, r3
c7e250fc:	13a03000 	movne	r3, #0	; 0x0
c7e25100:	03a03001 	moveq	r3, #1	; 0x1
c7e25104:	e01330a1 	ands	r3, r3, r1, lsr #1
c7e25108:	0a000011 	beq	c7e25154 <inflate+0x214>
                state->check = crc32(0L, Z_NULL, 0);
c7e2510c:	e3a00000 	mov	r0, #0	; 0x0
c7e25110:	e1a01000 	mov	r1, r0
c7e25114:	e1a02000 	mov	r2, r0
c7e25118:	ebffeef9 	bl	c7e20d04 <crc32>
                CRC2(state->check, hold);
c7e2511c:	e3a0301f 	mov	r3, #31	; 0x1f
                break;
            }
            NEEDBITS(16);
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
c7e25120:	e5850018 	str	r0, [r5, #24]
                CRC2(state->check, hold);
c7e25124:	e5cd305c 	strb	r3, [sp, #92]
c7e25128:	e3e03074 	mvn	r3, #116	; 0x74
c7e2512c:	e5cd305d 	strb	r3, [sp, #93]
c7e25130:	e5950018 	ldr	r0, [r5, #24]
c7e25134:	e28d105c 	add	r1, sp, #92	; 0x5c
c7e25138:	e3a02002 	mov	r2, #2	; 0x2
c7e2513c:	ebffeef0 	bl	c7e20d04 <crc32>
                INITBITS();
                state->mode = FLAGS;
c7e25140:	e3a03001 	mov	r3, #1	; 0x1
c7e25144:	e3a06000 	mov	r6, #0	; 0x0
            }
            NEEDBITS(16);
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
                CRC2(state->check, hold);
c7e25148:	e5850018 	str	r0, [r5, #24]
                INITBITS();
                state->mode = FLAGS;
c7e2514c:	e5853000 	str	r3, [r5]
c7e25150:	ea000035 	b	c7e2522c <inflate+0x2ec>
                break;
            }
            state->flags = 0;           /* expect zlib header */
            if (state->head != Z_NULL)
c7e25154:	e5952020 	ldr	r2, [r5, #32]
                CRC2(state->check, hold);
                INITBITS();
                state->mode = FLAGS;
                break;
            }
            state->flags = 0;           /* expect zlib header */
c7e25158:	e5853010 	str	r3, [r5, #16]
            if (state->head != Z_NULL)
c7e2515c:	e3520000 	cmp	r2, #0	; 0x0
                state->head->done = -1;
c7e25160:	13e03000 	mvnne	r3, #0	; 0x0
c7e25164:	15823030 	strne	r3, [r2, #48]
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
c7e25168:	e5953008 	ldr	r3, [r5, #8]
c7e2516c:	e3130001 	tst	r3, #1	; 0x1
c7e25170:	0a000007 	beq	c7e25194 <inflate+0x254>
c7e25174:	e1a00406 	lsl	r0, r6, #8
c7e25178:	e1a00800 	lsl	r0, r0, #16
c7e2517c:	e1a00820 	lsr	r0, r0, #16
c7e25180:	e0800426 	add	r0, r0, r6, lsr #8
c7e25184:	e3a0101f 	mov	r1, #31	; 0x1f
c7e25188:	eb00151b 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e2518c:	e2514000 	subs	r4, r1, #0	; 0x0
c7e25190:	0a000005 	beq	c7e251ac <inflate+0x26c>
#else
            if (
#endif
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
                strm->msg = (char *)"incorrect header check";
c7e25194:	e59f3e94 	ldr	r3, [pc, #3732]	; c7e26030 <inflate+0x10f0>
c7e25198:	e59dc00c 	ldr	ip, [sp, #12]
c7e2519c:	e58c3018 	str	r3, [ip, #24]
                state->mode = BAD;
c7e251a0:	e3a0301b 	mov	r3, #27	; 0x1b
c7e251a4:	e5853000 	str	r3, [r5]
c7e251a8:	eaffff95 	b	c7e25004 <inflate+0xc4>
                break;
            }
            if (BITS(4) != Z_DEFLATED) {
c7e251ac:	e206300f 	and	r3, r6, #15	; 0xf
c7e251b0:	e3530008 	cmp	r3, #8	; 0x8
                strm->msg = (char *)"unknown compression method";
c7e251b4:	159f3e78 	ldrne	r3, [pc, #3704]	; c7e26034 <inflate+0x10f4>
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
                strm->msg = (char *)"incorrect header check";
                state->mode = BAD;
                break;
            }
            if (BITS(4) != Z_DEFLATED) {
c7e251b8:	1a000495 	bne	c7e26414 <inflate+0x14d4>
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            DROPBITS(4);
c7e251bc:	e1a06226 	lsr	r6, r6, #4
            len = BITS(4) + 8;
c7e251c0:	e206300f 	and	r3, r6, #15	; 0xf
            if (len > state->wbits) {
c7e251c4:	e5952024 	ldr	r2, [r5, #36]
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            DROPBITS(4);
            len = BITS(4) + 8;
c7e251c8:	e2831008 	add	r1, r3, #8	; 0x8
            if (len > state->wbits) {
c7e251cc:	e1510002 	cmp	r1, r2
c7e251d0:	9a000006 	bls	c7e251f0 <inflate+0x2b0>
                strm->msg = (char *)"invalid window size";
c7e251d4:	e59f3e5c 	ldr	r3, [pc, #3676]	; c7e26038 <inflate+0x10f8>
c7e251d8:	e59d100c 	ldr	r1, [sp, #12]
            if (BITS(4) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            DROPBITS(4);
c7e251dc:	e2477004 	sub	r7, r7, #4	; 0x4
            len = BITS(4) + 8;
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
c7e251e0:	e5813018 	str	r3, [r1, #24]
                state->mode = BAD;
c7e251e4:	e3a0301b 	mov	r3, #27	; 0x1b
c7e251e8:	e5853000 	str	r3, [r5]
c7e251ec:	eaffff84 	b	c7e25004 <inflate+0xc4>
                break;
            }
            state->dmax = 1U << len;
c7e251f0:	e3a03001 	mov	r3, #1	; 0x1
c7e251f4:	e1a03113 	lsl	r3, r3, r1
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e251f8:	e1a02004 	mov	r2, r4
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
c7e251fc:	e5853014 	str	r3, [r5, #20]
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e25200:	e1a00004 	mov	r0, r4
c7e25204:	e1a01004 	mov	r1, r4
c7e25208:	ebfffe79 	bl	c7e24bf4 <adler32>
            state->mode = hold & 0x200 ? DICTID : TYPE;
c7e2520c:	e3160c02 	tst	r6, #512	; 0x200
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e25210:	e59d200c 	ldr	r2, [sp, #12]
            state->mode = hold & 0x200 ? DICTID : TYPE;
c7e25214:	13a03009 	movne	r3, #9	; 0x9
c7e25218:	03a0300b 	moveq	r3, #11	; 0xb
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e2521c:	e5850018 	str	r0, [r5, #24]
            state->mode = hold & 0x200 ? DICTID : TYPE;
c7e25220:	e1a06004 	mov	r6, r4
c7e25224:	e5853000 	str	r3, [r5]
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e25228:	e5820034 	str	r0, [r2, #52]
            state->mode = hold & 0x200 ? DICTID : TYPE;
c7e2522c:	e1a07006 	mov	r7, r6
c7e25230:	eaffff73 	b	c7e25004 <inflate+0xc4>
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
c7e25234:	e35a0000 	cmp	sl, #0	; 0x0
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
            state->mode = hold & 0x200 ? DICTID : TYPE;
            INITBITS();
            break;
c7e25238:	e2822001 	add	r2, r2, #1	; 0x1
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
c7e2523c:	0a000480 	beq	c7e26444 <inflate+0x1504>
c7e25240:	e5523001 	ldrb	r3, [r2, #-1]
c7e25244:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25248:	e0866713 	add	r6, r6, r3, lsl r7
c7e2524c:	e2877008 	add	r7, r7, #8	; 0x8
c7e25250:	e357000f 	cmp	r7, #15	; 0xf
c7e25254:	e1a0b002 	mov	fp, r2
c7e25258:	9afffff5 	bls	c7e25234 <inflate+0x2f4>
            state->flags = (int)(hold);
            if ((state->flags & 0xff) != Z_DEFLATED) {
c7e2525c:	e20630ff 	and	r3, r6, #255	; 0xff
c7e25260:	e3530008 	cmp	r3, #8	; 0x8
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
            state->flags = (int)(hold);
c7e25264:	e5856010 	str	r6, [r5, #16]
            if ((state->flags & 0xff) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
c7e25268:	159f3dc4 	ldrne	r3, [pc, #3524]	; c7e26034 <inflate+0x10f4>
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
            state->flags = (int)(hold);
            if ((state->flags & 0xff) != Z_DEFLATED) {
c7e2526c:	1affffc9 	bne	c7e25198 <inflate+0x258>
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            if (state->flags & 0xe000) {
c7e25270:	e3160a0e 	tst	r6, #57344	; 0xe000
                strm->msg = (char *)"unknown header flags set";
c7e25274:	159f3dc0 	ldrne	r3, [pc, #3520]	; c7e2603c <inflate+0x10fc>
            if ((state->flags & 0xff) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            if (state->flags & 0xe000) {
c7e25278:	1a000465 	bne	c7e26414 <inflate+0x14d4>
                strm->msg = (char *)"unknown header flags set";
                state->mode = BAD;
                break;
            }
            if (state->head != Z_NULL)
c7e2527c:	e5952020 	ldr	r2, [r5, #32]
c7e25280:	e3520000 	cmp	r2, #0	; 0x0
                state->head->text = (int)((hold >> 8) & 1);
c7e25284:	11a03426 	lsrne	r3, r6, #8
c7e25288:	12033001 	andne	r3, r3, #1	; 0x1
c7e2528c:	15823000 	strne	r3, [r2]
            if (state->flags & 0x0200) CRC2(state->check, hold);
c7e25290:	e5953010 	ldr	r3, [r5, #16]
c7e25294:	e3130c02 	tst	r3, #512	; 0x200
c7e25298:	0a000007 	beq	c7e252bc <inflate+0x37c>
c7e2529c:	e1a03426 	lsr	r3, r6, #8
c7e252a0:	e5cd305d 	strb	r3, [sp, #93]
c7e252a4:	e5cd605c 	strb	r6, [sp, #92]
c7e252a8:	e5950018 	ldr	r0, [r5, #24]
c7e252ac:	e28d105c 	add	r1, sp, #92	; 0x5c
c7e252b0:	e3a02002 	mov	r2, #2	; 0x2
c7e252b4:	ebffee92 	bl	c7e20d04 <crc32>
c7e252b8:	e5850018 	str	r0, [r5, #24]
            INITBITS();
            state->mode = TIME;
c7e252bc:	e3a06000 	mov	r6, #0	; 0x0
c7e252c0:	e3a03002 	mov	r3, #2	; 0x2
c7e252c4:	e5853000 	str	r3, [r5]
c7e252c8:	e1a07006 	mov	r7, r6
c7e252cc:	e1a0200b 	mov	r2, fp
c7e252d0:	ea000006 	b	c7e252f0 <inflate+0x3b0>
        case TIME:
            NEEDBITS(32);
c7e252d4:	e35a0000 	cmp	sl, #0	; 0x0
            }
            if (state->head != Z_NULL)
                state->head->text = (int)((hold >> 8) & 1);
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = TIME;
c7e252d8:	e2822001 	add	r2, r2, #1	; 0x1
        case TIME:
            NEEDBITS(32);
c7e252dc:	0a000458 	beq	c7e26444 <inflate+0x1504>
c7e252e0:	e5523001 	ldrb	r3, [r2, #-1]
c7e252e4:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e252e8:	e0866713 	add	r6, r6, r3, lsl r7
c7e252ec:	e2877008 	add	r7, r7, #8	; 0x8
c7e252f0:	e357001f 	cmp	r7, #31	; 0x1f
c7e252f4:	e1a0b002 	mov	fp, r2
c7e252f8:	9afffff5 	bls	c7e252d4 <inflate+0x394>
            if (state->head != Z_NULL)
c7e252fc:	e5953020 	ldr	r3, [r5, #32]
c7e25300:	e3530000 	cmp	r3, #0	; 0x0
                state->head->time = hold;
c7e25304:	15836004 	strne	r6, [r3, #4]
            if (state->flags & 0x0200) CRC4(state->check, hold);
c7e25308:	e5953010 	ldr	r3, [r5, #16]
c7e2530c:	e3130c02 	tst	r3, #512	; 0x200
c7e25310:	0a00000b 	beq	c7e25344 <inflate+0x404>
c7e25314:	e1a03c26 	lsr	r3, r6, #24
c7e25318:	e1a02426 	lsr	r2, r6, #8
c7e2531c:	e1a01826 	lsr	r1, r6, #16
c7e25320:	e5cd205d 	strb	r2, [sp, #93]
c7e25324:	e5cd105e 	strb	r1, [sp, #94]
c7e25328:	e5cd305f 	strb	r3, [sp, #95]
c7e2532c:	e5cd605c 	strb	r6, [sp, #92]
c7e25330:	e5950018 	ldr	r0, [r5, #24]
c7e25334:	e28d105c 	add	r1, sp, #92	; 0x5c
c7e25338:	e3a02004 	mov	r2, #4	; 0x4
c7e2533c:	ebffee70 	bl	c7e20d04 <crc32>
c7e25340:	e5850018 	str	r0, [r5, #24]
            INITBITS();
            state->mode = OS;
c7e25344:	e3a06000 	mov	r6, #0	; 0x0
c7e25348:	e3a03003 	mov	r3, #3	; 0x3
c7e2534c:	e5853000 	str	r3, [r5]
c7e25350:	e1a07006 	mov	r7, r6
c7e25354:	e1a0200b 	mov	r2, fp
c7e25358:	ea000006 	b	c7e25378 <inflate+0x438>
        case OS:
            NEEDBITS(16);
c7e2535c:	e35a0000 	cmp	sl, #0	; 0x0
            NEEDBITS(32);
            if (state->head != Z_NULL)
                state->head->time = hold;
            if (state->flags & 0x0200) CRC4(state->check, hold);
            INITBITS();
            state->mode = OS;
c7e25360:	e2822001 	add	r2, r2, #1	; 0x1
        case OS:
            NEEDBITS(16);
c7e25364:	0a000436 	beq	c7e26444 <inflate+0x1504>
c7e25368:	e5523001 	ldrb	r3, [r2, #-1]
c7e2536c:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25370:	e0866713 	add	r6, r6, r3, lsl r7
c7e25374:	e2877008 	add	r7, r7, #8	; 0x8
c7e25378:	e357000f 	cmp	r7, #15	; 0xf
c7e2537c:	e1a0b002 	mov	fp, r2
c7e25380:	9afffff5 	bls	c7e2535c <inflate+0x41c>
            if (state->head != Z_NULL) {
c7e25384:	e5951020 	ldr	r1, [r5, #32]
c7e25388:	e3510000 	cmp	r1, #0	; 0x0
                state->head->xflags = (int)(hold & 0xff);
                state->head->os = (int)(hold >> 8);
c7e2538c:	11a03426 	lsrne	r3, r6, #8
            INITBITS();
            state->mode = OS;
        case OS:
            NEEDBITS(16);
            if (state->head != Z_NULL) {
                state->head->xflags = (int)(hold & 0xff);
c7e25390:	120620ff 	andne	r2, r6, #255	; 0xff
                state->head->os = (int)(hold >> 8);
c7e25394:	1581300c 	strne	r3, [r1, #12]
            INITBITS();
            state->mode = OS;
        case OS:
            NEEDBITS(16);
            if (state->head != Z_NULL) {
                state->head->xflags = (int)(hold & 0xff);
c7e25398:	15812008 	strne	r2, [r1, #8]
                state->head->os = (int)(hold >> 8);
            }
            if (state->flags & 0x0200) CRC2(state->check, hold);
c7e2539c:	e5953010 	ldr	r3, [r5, #16]
c7e253a0:	e3130c02 	tst	r3, #512	; 0x200
c7e253a4:	0a000007 	beq	c7e253c8 <inflate+0x488>
c7e253a8:	e1a03426 	lsr	r3, r6, #8
c7e253ac:	e5cd305d 	strb	r3, [sp, #93]
c7e253b0:	e5cd605c 	strb	r6, [sp, #92]
c7e253b4:	e5950018 	ldr	r0, [r5, #24]
c7e253b8:	e28d105c 	add	r1, sp, #92	; 0x5c
c7e253bc:	e3a02002 	mov	r2, #2	; 0x2
c7e253c0:	ebffee4f 	bl	c7e20d04 <crc32>
c7e253c4:	e5850018 	str	r0, [r5, #24]
            INITBITS();
            state->mode = EXLEN;
c7e253c8:	e3a06000 	mov	r6, #0	; 0x0
c7e253cc:	e3a03004 	mov	r3, #4	; 0x4
c7e253d0:	e5853000 	str	r3, [r5]
c7e253d4:	e1a07006 	mov	r7, r6
        case EXLEN:
            if (state->flags & 0x0400) {
c7e253d8:	e5953010 	ldr	r3, [r5, #16]
c7e253dc:	e2133b01 	ands	r3, r3, #1024	; 0x400
c7e253e0:	11a0200b 	movne	r2, fp
c7e253e4:	1a000007 	bne	c7e25408 <inflate+0x4c8>
c7e253e8:	ea00001c 	b	c7e25460 <inflate+0x520>
                NEEDBITS(16);
c7e253ec:	e35a0000 	cmp	sl, #0	; 0x0
            }
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = EXLEN;
        case EXLEN:
            if (state->flags & 0x0400) {
c7e253f0:	e2822001 	add	r2, r2, #1	; 0x1
                NEEDBITS(16);
c7e253f4:	0a000412 	beq	c7e26444 <inflate+0x1504>
c7e253f8:	e5523001 	ldrb	r3, [r2, #-1]
c7e253fc:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25400:	e0866713 	add	r6, r6, r3, lsl r7
c7e25404:	e2877008 	add	r7, r7, #8	; 0x8
c7e25408:	e357000f 	cmp	r7, #15	; 0xf
c7e2540c:	e1a0b002 	mov	fp, r2
c7e25410:	9afffff5 	bls	c7e253ec <inflate+0x4ac>
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
c7e25414:	e5953020 	ldr	r3, [r5, #32]
            INITBITS();
            state->mode = EXLEN;
        case EXLEN:
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
c7e25418:	e5856040 	str	r6, [r5, #64]
                if (state->head != Z_NULL)
c7e2541c:	e3530000 	cmp	r3, #0	; 0x0
                    state->head->extra_len = (unsigned)hold;
c7e25420:	15836014 	strne	r6, [r3, #20]
                if (state->flags & 0x0200) CRC2(state->check, hold);
c7e25424:	e5953010 	ldr	r3, [r5, #16]
c7e25428:	e2133c02 	ands	r3, r3, #512	; 0x200
c7e2542c:	01a06003 	moveq	r6, r3
c7e25430:	0a000008 	beq	c7e25458 <inflate+0x518>
c7e25434:	e1a03426 	lsr	r3, r6, #8
c7e25438:	e5cd605c 	strb	r6, [sp, #92]
c7e2543c:	e5cd305d 	strb	r3, [sp, #93]
c7e25440:	e5950018 	ldr	r0, [r5, #24]
c7e25444:	e28d105c 	add	r1, sp, #92	; 0x5c
c7e25448:	e3a02002 	mov	r2, #2	; 0x2
c7e2544c:	ebffee2c 	bl	c7e20d04 <crc32>
c7e25450:	e3a06000 	mov	r6, #0	; 0x0
c7e25454:	e5850018 	str	r0, [r5, #24]
c7e25458:	e1a07006 	mov	r7, r6
c7e2545c:	ea000002 	b	c7e2546c <inflate+0x52c>
                INITBITS();
            }
            else if (state->head != Z_NULL)
c7e25460:	e5952020 	ldr	r2, [r5, #32]
c7e25464:	e3520000 	cmp	r2, #0	; 0x0
                state->head->extra = Z_NULL;
c7e25468:	15823010 	strne	r3, [r2, #16]
            state->mode = EXTRA;
c7e2546c:	e3a03005 	mov	r3, #5	; 0x5
c7e25470:	e5853000 	str	r3, [r5]
        case EXTRA:
            if (state->flags & 0x0400) {
c7e25474:	e5953010 	ldr	r3, [r5, #16]
c7e25478:	e3130b01 	tst	r3, #1024	; 0x400
c7e2547c:	0a000025 	beq	c7e25518 <inflate+0x5d8>
                copy = state->length;
c7e25480:	e5951040 	ldr	r1, [r5, #64]
c7e25484:	e15a0001 	cmp	sl, r1
c7e25488:	31a0400a 	movcc	r4, sl
c7e2548c:	21a04001 	movcs	r4, r1
                if (copy > have) copy = have;
                if (copy) {
c7e25490:	e3540000 	cmp	r4, #0	; 0x0
c7e25494:	0a00001c 	beq	c7e2550c <inflate+0x5cc>
                    if (state->head != Z_NULL &&
c7e25498:	e5952020 	ldr	r2, [r5, #32]
c7e2549c:	e3520000 	cmp	r2, #0	; 0x0
c7e254a0:	0a00000c 	beq	c7e254d8 <inflate+0x598>
c7e254a4:	e5920010 	ldr	r0, [r2, #16]
c7e254a8:	e3500000 	cmp	r0, #0	; 0x0
c7e254ac:	0a000009 	beq	c7e254d8 <inflate+0x598>
                        state->head->extra != Z_NULL) {
                        len = state->head->extra_len - state->length;
c7e254b0:	e5923014 	ldr	r3, [r2, #20]
                        zmemcpy(state->head->extra + len, next,
c7e254b4:	e5922018 	ldr	r2, [r2, #24]
                copy = state->length;
                if (copy > have) copy = have;
                if (copy) {
                    if (state->head != Z_NULL &&
                        state->head->extra != Z_NULL) {
                        len = state->head->extra_len - state->length;
c7e254b8:	e0611003 	rsb	r1, r1, r3
                        zmemcpy(state->head->extra + len, next,
c7e254bc:	e0843001 	add	r3, r4, r1
c7e254c0:	e1530002 	cmp	r3, r2
c7e254c4:	80612002 	rsbhi	r2, r1, r2
c7e254c8:	e0800001 	add	r0, r0, r1
c7e254cc:	91a02004 	movls	r2, r4
c7e254d0:	e1a0100b 	mov	r1, fp
c7e254d4:	ebfff5d8 	bl	c7e22c3c <memcpy>
                                len + copy > state->head->extra_max ?
                                state->head->extra_max - len : copy);
                    }
                    if (state->flags & 0x0200)
c7e254d8:	e5953010 	ldr	r3, [r5, #16]
c7e254dc:	e3130c02 	tst	r3, #512	; 0x200
c7e254e0:	0a000004 	beq	c7e254f8 <inflate+0x5b8>
                        state->check = crc32(state->check, next, copy);
c7e254e4:	e5950018 	ldr	r0, [r5, #24]
c7e254e8:	e1a0100b 	mov	r1, fp
c7e254ec:	e1a02004 	mov	r2, r4
c7e254f0:	ebffee03 	bl	c7e20d04 <crc32>
c7e254f4:	e5850018 	str	r0, [r5, #24]
                    have -= copy;
                    next += copy;
                    state->length -= copy;
c7e254f8:	e5953040 	ldr	r3, [r5, #64]
                                len + copy > state->head->extra_max ?
                                state->head->extra_max - len : copy);
                    }
                    if (state->flags & 0x0200)
                        state->check = crc32(state->check, next, copy);
                    have -= copy;
c7e254fc:	e064a00a 	rsb	sl, r4, sl
                    next += copy;
                    state->length -= copy;
c7e25500:	e0643003 	rsb	r3, r4, r3
c7e25504:	e5853040 	str	r3, [r5, #64]
                                state->head->extra_max - len : copy);
                    }
                    if (state->flags & 0x0200)
                        state->check = crc32(state->check, next, copy);
                    have -= copy;
                    next += copy;
c7e25508:	e08bb004 	add	fp, fp, r4
                    state->length -= copy;
                }
                if (state->length) goto inf_leave;
c7e2550c:	e5953040 	ldr	r3, [r5, #64]
c7e25510:	e3530000 	cmp	r3, #0	; 0x0
c7e25514:	1a0003ca 	bne	c7e26444 <inflate+0x1504>
            }
            state->length = 0;
c7e25518:	e3a03000 	mov	r3, #0	; 0x0
c7e2551c:	e5853040 	str	r3, [r5, #64]
            state->mode = NAME;
c7e25520:	e2833006 	add	r3, r3, #6	; 0x6
c7e25524:	e5853000 	str	r3, [r5]
        case NAME:
            if (state->flags & 0x0800) {
c7e25528:	e5953010 	ldr	r3, [r5, #16]
c7e2552c:	e2133b02 	ands	r3, r3, #2048	; 0x800
c7e25530:	0a000020 	beq	c7e255b8 <inflate+0x678>
                if (have == 0) goto inf_leave;
c7e25534:	e35a0000 	cmp	sl, #0	; 0x0
c7e25538:	0a0003c1 	beq	c7e26444 <inflate+0x1504>
c7e2553c:	e3a04000 	mov	r4, #0	; 0x0
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
c7e25540:	e5953020 	ldr	r3, [r5, #32]
        case NAME:
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
c7e25544:	e7db9004 	ldrb	r9, [fp, r4]
                    if (state->head != Z_NULL &&
c7e25548:	e3530000 	cmp	r3, #0	; 0x0
        case NAME:
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
c7e2554c:	e2844001 	add	r4, r4, #1	; 0x1
                    if (state->head != Z_NULL &&
c7e25550:	0a000008 	beq	c7e25578 <inflate+0x638>
c7e25554:	e593101c 	ldr	r1, [r3, #28]
c7e25558:	e3510000 	cmp	r1, #0	; 0x0
c7e2555c:	0a000005 	beq	c7e25578 <inflate+0x638>
c7e25560:	e5933020 	ldr	r3, [r3, #32]
c7e25564:	e5952040 	ldr	r2, [r5, #64]
c7e25568:	e1520003 	cmp	r2, r3
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
c7e2556c:	e2823001 	add	r3, r2, #1	; 0x1
c7e25570:	37c19002 	strbcc	r9, [r1, r2]
c7e25574:	35853040 	strcc	r3, [r5, #64]
                } while (len && copy < have);
c7e25578:	e3590000 	cmp	r9, #0	; 0x0
c7e2557c:	1154000a 	cmpne	r4, sl
c7e25580:	3affffee 	bcc	c7e25540 <inflate+0x600>
                if (state->flags & 0x0200)
c7e25584:	e5953010 	ldr	r3, [r5, #16]
c7e25588:	e3130c02 	tst	r3, #512	; 0x200
c7e2558c:	0a000004 	beq	c7e255a4 <inflate+0x664>
                    state->check = crc32(state->check, next, copy);
c7e25590:	e5950018 	ldr	r0, [r5, #24]
c7e25594:	e1a0100b 	mov	r1, fp
c7e25598:	e1a02004 	mov	r2, r4
c7e2559c:	ebffedd8 	bl	c7e20d04 <crc32>
c7e255a0:	e5850018 	str	r0, [r5, #24]
                have -= copy;
                next += copy;
                if (len) goto inf_leave;
c7e255a4:	e3590000 	cmp	r9, #0	; 0x0
                        state->head->name[state->length++] = len;
                } while (len && copy < have);
                if (state->flags & 0x0200)
                    state->check = crc32(state->check, next, copy);
                have -= copy;
                next += copy;
c7e255a8:	e08bb004 	add	fp, fp, r4
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
                } while (len && copy < have);
                if (state->flags & 0x0200)
                    state->check = crc32(state->check, next, copy);
                have -= copy;
c7e255ac:	e064a00a 	rsb	sl, r4, sl
                next += copy;
                if (len) goto inf_leave;
c7e255b0:	0a000003 	beq	c7e255c4 <inflate+0x684>
c7e255b4:	ea0003a2 	b	c7e26444 <inflate+0x1504>
            }
            else if (state->head != Z_NULL)
c7e255b8:	e5952020 	ldr	r2, [r5, #32]
c7e255bc:	e3520000 	cmp	r2, #0	; 0x0
                state->head->name = Z_NULL;
c7e255c0:	1582301c 	strne	r3, [r2, #28]
            state->length = 0;
c7e255c4:	e3a03000 	mov	r3, #0	; 0x0
c7e255c8:	e5853040 	str	r3, [r5, #64]
            state->mode = COMMENT;
c7e255cc:	e2833007 	add	r3, r3, #7	; 0x7
c7e255d0:	e5853000 	str	r3, [r5]
        case COMMENT:
            if (state->flags & 0x1000) {
c7e255d4:	e5953010 	ldr	r3, [r5, #16]
c7e255d8:	e2133a01 	ands	r3, r3, #4096	; 0x1000
c7e255dc:	0a000020 	beq	c7e25664 <inflate+0x724>
                if (have == 0) goto inf_leave;
c7e255e0:	e35a0000 	cmp	sl, #0	; 0x0
c7e255e4:	0a000396 	beq	c7e26444 <inflate+0x1504>
c7e255e8:	e3a04000 	mov	r4, #0	; 0x0
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
c7e255ec:	e5953020 	ldr	r3, [r5, #32]
        case COMMENT:
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
c7e255f0:	e7db9004 	ldrb	r9, [fp, r4]
                    if (state->head != Z_NULL &&
c7e255f4:	e3530000 	cmp	r3, #0	; 0x0
        case COMMENT:
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
c7e255f8:	e2844001 	add	r4, r4, #1	; 0x1
                    if (state->head != Z_NULL &&
c7e255fc:	0a000008 	beq	c7e25624 <inflate+0x6e4>
c7e25600:	e5931024 	ldr	r1, [r3, #36]
c7e25604:	e3510000 	cmp	r1, #0	; 0x0
c7e25608:	0a000005 	beq	c7e25624 <inflate+0x6e4>
c7e2560c:	e5933028 	ldr	r3, [r3, #40]
c7e25610:	e5952040 	ldr	r2, [r5, #64]
c7e25614:	e1520003 	cmp	r2, r3
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
c7e25618:	e2823001 	add	r3, r2, #1	; 0x1
c7e2561c:	37c19002 	strbcc	r9, [r1, r2]
c7e25620:	35853040 	strcc	r3, [r5, #64]
                } while (len && copy < have);
c7e25624:	e3590000 	cmp	r9, #0	; 0x0
c7e25628:	1154000a 	cmpne	r4, sl
c7e2562c:	3affffee 	bcc	c7e255ec <inflate+0x6ac>
                if (state->flags & 0x0200)
c7e25630:	e5953010 	ldr	r3, [r5, #16]
c7e25634:	e3130c02 	tst	r3, #512	; 0x200
c7e25638:	0a000004 	beq	c7e25650 <inflate+0x710>
                    state->check = crc32(state->check, next, copy);
c7e2563c:	e5950018 	ldr	r0, [r5, #24]
c7e25640:	e1a0100b 	mov	r1, fp
c7e25644:	e1a02004 	mov	r2, r4
c7e25648:	ebffedad 	bl	c7e20d04 <crc32>
c7e2564c:	e5850018 	str	r0, [r5, #24]
                have -= copy;
                next += copy;
                if (len) goto inf_leave;
c7e25650:	e3590000 	cmp	r9, #0	; 0x0
                        state->head->comment[state->length++] = len;
                } while (len && copy < have);
                if (state->flags & 0x0200)
                    state->check = crc32(state->check, next, copy);
                have -= copy;
                next += copy;
c7e25654:	e08bb004 	add	fp, fp, r4
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
                } while (len && copy < have);
                if (state->flags & 0x0200)
                    state->check = crc32(state->check, next, copy);
                have -= copy;
c7e25658:	e064a00a 	rsb	sl, r4, sl
                next += copy;
                if (len) goto inf_leave;
c7e2565c:	0a000003 	beq	c7e25670 <inflate+0x730>
c7e25660:	ea000377 	b	c7e26444 <inflate+0x1504>
            }
            else if (state->head != Z_NULL)
c7e25664:	e5952020 	ldr	r2, [r5, #32]
c7e25668:	e3520000 	cmp	r2, #0	; 0x0
                state->head->comment = Z_NULL;
c7e2566c:	15823024 	strne	r3, [r2, #36]
            state->mode = HCRC;
c7e25670:	e3a03008 	mov	r3, #8	; 0x8
c7e25674:	e5853000 	str	r3, [r5]
        case HCRC:
            if (state->flags & 0x0200) {
c7e25678:	e5950010 	ldr	r0, [r5, #16]
c7e2567c:	e3100c02 	tst	r0, #512	; 0x200
c7e25680:	11a0200b 	movne	r2, fp
c7e25684:	1a000007 	bne	c7e256a8 <inflate+0x768>
c7e25688:	ea00000f 	b	c7e256cc <inflate+0x78c>
                NEEDBITS(16);
c7e2568c:	e35a0000 	cmp	sl, #0	; 0x0
            }
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
c7e25690:	e2822001 	add	r2, r2, #1	; 0x1
                NEEDBITS(16);
c7e25694:	0a00036a 	beq	c7e26444 <inflate+0x1504>
c7e25698:	e5523001 	ldrb	r3, [r2, #-1]
c7e2569c:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e256a0:	e0866713 	add	r6, r6, r3, lsl r7
c7e256a4:	e2877008 	add	r7, r7, #8	; 0x8
c7e256a8:	e357000f 	cmp	r7, #15	; 0xf
c7e256ac:	e1a0b002 	mov	fp, r2
c7e256b0:	9afffff5 	bls	c7e2568c <inflate+0x74c>
                if (hold != (state->check & 0xffff)) {
c7e256b4:	e1d531b8 	ldrh	r3, [r5, #24]
c7e256b8:	e1560003 	cmp	r6, r3
                    strm->msg = (char *)"header crc mismatch";
c7e256bc:	159f397c 	ldrne	r3, [pc, #2428]	; c7e26040 <inflate+0x1100>
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
                if (hold != (state->check & 0xffff)) {
c7e256c0:	1a0002b9 	bne	c7e261ac <inflate+0x126c>
                    strm->msg = (char *)"header crc mismatch";
                    state->mode = BAD;
                    break;
c7e256c4:	e3a06000 	mov	r6, #0	; 0x0
c7e256c8:	e1a07006 	mov	r7, r6
                }
                INITBITS();
            }
            if (state->head != Z_NULL) {
c7e256cc:	e5951020 	ldr	r1, [r5, #32]
c7e256d0:	e3510000 	cmp	r1, #0	; 0x0
                state->head->hcrc = (int)((state->flags >> 9) & 1);
c7e256d4:	11a034c0 	asrne	r3, r0, #9
c7e256d8:	12033001 	andne	r3, r3, #1	; 0x1
                state->head->done = 1;
c7e256dc:	13a02001 	movne	r2, #1	; 0x1
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
c7e256e0:	e3a00000 	mov	r0, #0	; 0x0
                }
                INITBITS();
            }
            if (state->head != Z_NULL) {
                state->head->hcrc = (int)((state->flags >> 9) & 1);
                state->head->done = 1;
c7e256e4:	15812030 	strne	r2, [r1, #48]
                    break;
                }
                INITBITS();
            }
            if (state->head != Z_NULL) {
                state->head->hcrc = (int)((state->flags >> 9) & 1);
c7e256e8:	1581302c 	strne	r3, [r1, #44]
                state->head->done = 1;
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
c7e256ec:	e1a02000 	mov	r2, r0
c7e256f0:	e1a01000 	mov	r1, r0
c7e256f4:	ebffed82 	bl	c7e20d04 <crc32>
c7e256f8:	e59d200c 	ldr	r2, [sp, #12]
            state->mode = TYPE;
c7e256fc:	e3a0300b 	mov	r3, #11	; 0xb
            }
            if (state->head != Z_NULL) {
                state->head->hcrc = (int)((state->flags >> 9) & 1);
                state->head->done = 1;
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
c7e25700:	e5850018 	str	r0, [r5, #24]
            state->mode = TYPE;
c7e25704:	e5853000 	str	r3, [r5]
            }
            if (state->head != Z_NULL) {
                state->head->hcrc = (int)((state->flags >> 9) & 1);
                state->head->done = 1;
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
c7e25708:	e5820034 	str	r0, [r2, #52]
c7e2570c:	eafffe3c 	b	c7e25004 <inflate+0xc4>
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
c7e25710:	e35a0000 	cmp	sl, #0	; 0x0
                state->head->hcrc = (int)((state->flags >> 9) & 1);
                state->head->done = 1;
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
            state->mode = TYPE;
            break;
c7e25714:	e2822001 	add	r2, r2, #1	; 0x1
#endif
        case DICTID:
            NEEDBITS(32);
c7e25718:	0a000349 	beq	c7e26444 <inflate+0x1504>
c7e2571c:	e5523001 	ldrb	r3, [r2, #-1]
c7e25720:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25724:	e0866713 	add	r6, r6, r3, lsl r7
c7e25728:	e2877008 	add	r7, r7, #8	; 0x8
c7e2572c:	e357001f 	cmp	r7, #31	; 0x1f
c7e25730:	e1a0b002 	mov	fp, r2
c7e25734:	9afffff5 	bls	c7e25710 <inflate+0x7d0>
            strm->adler = state->check = REVERSE(hold);
c7e25738:	e1a02c26 	lsr	r2, r6, #24
c7e2573c:	e1a03426 	lsr	r3, r6, #8
c7e25740:	e0822c06 	add	r2, r2, r6, lsl #24
c7e25744:	e2033cff 	and	r3, r3, #65280	; 0xff00
c7e25748:	e0822003 	add	r2, r2, r3
c7e2574c:	e2063cff 	and	r3, r6, #65280	; 0xff00
c7e25750:	e0822403 	add	r2, r2, r3, lsl #8
            INITBITS();
            state->mode = DICT;
c7e25754:	e3a0300a 	mov	r3, #10	; 0xa
c7e25758:	e5853000 	str	r3, [r5]
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
            strm->adler = state->check = REVERSE(hold);
c7e2575c:	e59d300c 	ldr	r3, [sp, #12]
            INITBITS();
            state->mode = DICT;
c7e25760:	e3a06000 	mov	r6, #0	; 0x0
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
            strm->adler = state->check = REVERSE(hold);
c7e25764:	e5852018 	str	r2, [r5, #24]
            INITBITS();
            state->mode = DICT;
c7e25768:	e1a07006 	mov	r7, r6
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
            strm->adler = state->check = REVERSE(hold);
c7e2576c:	e5832034 	str	r2, [r3, #52]
            INITBITS();
            state->mode = DICT;
        case DICT:
            if (state->havedict == 0) {
c7e25770:	e595300c 	ldr	r3, [r5, #12]
c7e25774:	e3530000 	cmp	r3, #0	; 0x0
c7e25778:	1a00000a 	bne	c7e257a8 <inflate+0x868>
                RESTORE();
c7e2577c:	e59dc00c 	ldr	ip, [sp, #12]
c7e25780:	e59d0038 	ldr	r0, [sp, #56]
c7e25784:	e59d1034 	ldr	r1, [sp, #52]
c7e25788:	e58ca004 	str	sl, [ip, #4]
c7e2578c:	e58c0010 	str	r0, [ip, #16]
c7e25790:	e58c100c 	str	r1, [ip, #12]
c7e25794:	e585703c 	str	r7, [r5, #60]
c7e25798:	e58cb000 	str	fp, [ip]
c7e2579c:	e5856038 	str	r6, [r5, #56]
c7e257a0:	e3a02002 	mov	r2, #2	; 0x2
c7e257a4:	ea0003cb 	b	c7e266d8 <inflate+0x1798>
                return Z_NEED_DICT;
            }
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e257a8:	e3a00000 	mov	r0, #0	; 0x0
c7e257ac:	e1a01000 	mov	r1, r0
c7e257b0:	e1a02000 	mov	r2, r0
c7e257b4:	ebfffd0e 	bl	c7e24bf4 <adler32>
            state->mode = TYPE;
c7e257b8:	e3a0300b 	mov	r3, #11	; 0xb
c7e257bc:	e5853000 	str	r3, [r5]
        case DICT:
            if (state->havedict == 0) {
                RESTORE();
                return Z_NEED_DICT;
            }
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
c7e257c0:	e59d300c 	ldr	r3, [sp, #12]
c7e257c4:	e5850018 	str	r0, [r5, #24]
c7e257c8:	e5830034 	str	r0, [r3, #52]
            state->mode = TYPE;
        case TYPE:
	    WATCHDOG_RESET();
            if (flush == Z_BLOCK) goto inf_leave;
c7e257cc:	e59dc008 	ldr	ip, [sp, #8]
c7e257d0:	e35c0005 	cmp	ip, #5	; 0x5
c7e257d4:	0a00031a 	beq	c7e26444 <inflate+0x1504>
        case TYPEDO:
            if (state->last) {
c7e257d8:	e5953004 	ldr	r3, [r5, #4]
c7e257dc:	e3530000 	cmp	r3, #0	; 0x0
c7e257e0:	01a0200b 	moveq	r2, fp
c7e257e4:	0a00000c 	beq	c7e2581c <inflate+0x8dc>
                BYTEBITS();
c7e257e8:	e2073007 	and	r3, r7, #7	; 0x7
c7e257ec:	e1a06336 	lsr	r6, r6, r3
                state->mode = CHECK;
c7e257f0:	e3a03018 	mov	r3, #24	; 0x18
c7e257f4:	e5853000 	str	r3, [r5]
        case TYPE:
	    WATCHDOG_RESET();
            if (flush == Z_BLOCK) goto inf_leave;
        case TYPEDO:
            if (state->last) {
                BYTEBITS();
c7e257f8:	e3c77007 	bic	r7, r7, #7	; 0x7
c7e257fc:	eafffe00 	b	c7e25004 <inflate+0xc4>
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
c7e25800:	e35a0000 	cmp	sl, #0	; 0x0
            if (flush == Z_BLOCK) goto inf_leave;
        case TYPEDO:
            if (state->last) {
                BYTEBITS();
                state->mode = CHECK;
                break;
c7e25804:	e2822001 	add	r2, r2, #1	; 0x1
            }
            NEEDBITS(3);
c7e25808:	0a00030d 	beq	c7e26444 <inflate+0x1504>
c7e2580c:	e5523001 	ldrb	r3, [r2, #-1]
c7e25810:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25814:	e0866713 	add	r6, r6, r3, lsl r7
c7e25818:	e2877008 	add	r7, r7, #8	; 0x8
c7e2581c:	e3570002 	cmp	r7, #2	; 0x2
c7e25820:	e1a0b002 	mov	fp, r2
c7e25824:	9afffff5 	bls	c7e25800 <inflate+0x8c0>
            state->last = BITS(1);
            DROPBITS(1);
c7e25828:	e1a000a6 	lsr	r0, r6, #1
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
            state->last = BITS(1);
c7e2582c:	e2062001 	and	r2, r6, #1	; 0x1
            DROPBITS(1);
            switch (BITS(2)) {
c7e25830:	e2003003 	and	r3, r0, #3	; 0x3
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
            state->last = BITS(1);
c7e25834:	e5852004 	str	r2, [r5, #4]
            DROPBITS(1);
            switch (BITS(2)) {
c7e25838:	e3530003 	cmp	r3, #3	; 0x3
c7e2583c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e25840:	ea000017 	b	c7e258a4 <inflate+0x964>
c7e25844:	c7e25854 	.word	0xc7e25854
c7e25848:	c7e2585c 	.word	0xc7e2585c
c7e2584c:	c7e25888 	.word	0xc7e25888
c7e25850:	c7e25890 	.word	0xc7e25890
            case 0:                             /* stored block */
                Tracev((stderr, "inflate:     stored block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = STORED;
c7e25854:	e3a0300d 	mov	r3, #13	; 0xd
c7e25858:	ea000010 	b	c7e258a0 <inflate+0x960>
}

local void fixedtables(state)
struct inflate_state FAR *state;
{
    state->lencode = lenfix;
c7e2585c:	e59f17e0 	ldr	r1, [pc, #2016]	; c7e26044 <inflate+0x1104>
    state->lenbits = 9;
c7e25860:	e3a03009 	mov	r3, #9	; 0x9
c7e25864:	e5853054 	str	r3, [r5, #84]
    state->distcode = distfix;
    state->distbits = 5;
c7e25868:	e3a03005 	mov	r3, #5	; 0x5
local void fixedtables(state)
struct inflate_state FAR *state;
{
    state->lencode = lenfix;
    state->lenbits = 9;
    state->distcode = distfix;
c7e2586c:	e2812b02 	add	r2, r1, #2048	; 0x800
    state->distbits = 5;
c7e25870:	e5853058 	str	r3, [r5, #88]
                break;
            case 1:                             /* fixed block */
                fixedtables(state);
                Tracev((stderr, "inflate:     fixed codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = LEN;              /* decode codes */
c7e25874:	e283300d 	add	r3, r3, #13	; 0xd
local void fixedtables(state)
struct inflate_state FAR *state;
{
    state->lencode = lenfix;
    state->lenbits = 9;
    state->distcode = distfix;
c7e25878:	e5852050 	str	r2, [r5, #80]
                break;
            case 1:                             /* fixed block */
                fixedtables(state);
                Tracev((stderr, "inflate:     fixed codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = LEN;              /* decode codes */
c7e2587c:	e5853000 	str	r3, [r5]
}

local void fixedtables(state)
struct inflate_state FAR *state;
{
    state->lencode = lenfix;
c7e25880:	e585104c 	str	r1, [r5, #76]
c7e25884:	ea000006 	b	c7e258a4 <inflate+0x964>
                state->mode = LEN;              /* decode codes */
                break;
            case 2:                             /* dynamic block */
                Tracev((stderr, "inflate:     dynamic codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = TABLE;
c7e25888:	e3a0300f 	mov	r3, #15	; 0xf
c7e2588c:	ea000003 	b	c7e258a0 <inflate+0x960>
                break;
            case 3:
                strm->msg = (char *)"invalid block type";
c7e25890:	e59f37b0 	ldr	r3, [pc, #1968]	; c7e26048 <inflate+0x1108>
c7e25894:	e59d100c 	ldr	r1, [sp, #12]
c7e25898:	e5813018 	str	r3, [r1, #24]
                state->mode = BAD;
c7e2589c:	e3a0301b 	mov	r3, #27	; 0x1b
c7e258a0:	e5853000 	str	r3, [r5]
            }
            DROPBITS(2);
c7e258a4:	e1a06120 	lsr	r6, r0, #2
c7e258a8:	e2477003 	sub	r7, r7, #3	; 0x3
c7e258ac:	eafffdd4 	b	c7e25004 <inflate+0xc4>
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
c7e258b0:	e2073007 	and	r3, r7, #7	; 0x7
c7e258b4:	e1a06336 	lsr	r6, r6, r3
c7e258b8:	e3c77007 	bic	r7, r7, #7	; 0x7
c7e258bc:	e1a0200b 	mov	r2, fp
c7e258c0:	ea000006 	b	c7e258e0 <inflate+0x9a0>
            NEEDBITS(32);
c7e258c4:	e35a0000 	cmp	sl, #0	; 0x0
c7e258c8:	e2822001 	add	r2, r2, #1	; 0x1
c7e258cc:	0a0002dc 	beq	c7e26444 <inflate+0x1504>
c7e258d0:	e5523001 	ldrb	r3, [r2, #-1]
c7e258d4:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e258d8:	e0866713 	add	r6, r6, r3, lsl r7
c7e258dc:	e2877008 	add	r7, r7, #8	; 0x8
c7e258e0:	e357001f 	cmp	r7, #31	; 0x1f
c7e258e4:	e1a0b002 	mov	fp, r2
c7e258e8:	9afffff5 	bls	c7e258c4 <inflate+0x984>
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
c7e258ec:	e59f3758 	ldr	r3, [pc, #1880]	; c7e2604c <inflate+0x110c>
c7e258f0:	e1a02806 	lsl	r2, r6, #16
c7e258f4:	e0233826 	eor	r3, r3, r6, lsr #16
c7e258f8:	e1a02822 	lsr	r2, r2, #16
c7e258fc:	e1520003 	cmp	r2, r3
                strm->msg = (char *)"invalid stored block lengths";
c7e25900:	159f3748 	ldrne	r3, [pc, #1864]	; c7e26050 <inflate+0x1110>
            DROPBITS(2);
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
            NEEDBITS(32);
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
c7e25904:	1a000190 	bne	c7e25f4c <inflate+0x100c>
            }
            state->length = (unsigned)hold & 0xffff;
            Tracev((stderr, "inflate:       stored length %u\n",
                    state->length));
            INITBITS();
            state->mode = COPY;
c7e25908:	e3a06000 	mov	r6, #0	; 0x0
c7e2590c:	e3a0300e 	mov	r3, #14	; 0xe
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
                strm->msg = (char *)"invalid stored block lengths";
                state->mode = BAD;
                break;
            }
            state->length = (unsigned)hold & 0xffff;
c7e25910:	e5852040 	str	r2, [r5, #64]
            Tracev((stderr, "inflate:       stored length %u\n",
                    state->length));
            INITBITS();
            state->mode = COPY;
c7e25914:	e5853000 	str	r3, [r5]
c7e25918:	e1a07006 	mov	r7, r6
        case COPY:
            copy = state->length;
c7e2591c:	e5953040 	ldr	r3, [r5, #64]
            if (copy) {
c7e25920:	e3530000 	cmp	r3, #0	; 0x0
c7e25924:	0a000183 	beq	c7e25f38 <inflate+0xff8>
c7e25928:	e59dc038 	ldr	ip, [sp, #56]
c7e2592c:	e15c0003 	cmp	ip, r3
c7e25930:	31a0300c 	movcc	r3, ip
c7e25934:	e153000a 	cmp	r3, sl
c7e25938:	31a04003 	movcc	r4, r3
c7e2593c:	21a0400a 	movcs	r4, sl
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
c7e25940:	e3540000 	cmp	r4, #0	; 0x0
c7e25944:	0a0002be 	beq	c7e26444 <inflate+0x1504>
                zmemcpy(put, next, copy);
c7e25948:	e1a0100b 	mov	r1, fp
c7e2594c:	e59d0034 	ldr	r0, [sp, #52]
c7e25950:	e1a02004 	mov	r2, r4
c7e25954:	ebfff4b8 	bl	c7e22c3c <memcpy>
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state->length -= copy;
c7e25958:	e5953040 	ldr	r3, [r5, #64]
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
                next += copy;
                left -= copy;
c7e2595c:	e59d0038 	ldr	r0, [sp, #56]
                put += copy;
c7e25960:	e59d1034 	ldr	r1, [sp, #52]
                state->length -= copy;
c7e25964:	e0643003 	rsb	r3, r4, r3
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
                next += copy;
                left -= copy;
c7e25968:	e0640000 	rsb	r0, r4, r0
                put += copy;
c7e2596c:	e0811004 	add	r1, r1, r4
            if (copy) {
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
c7e25970:	e064a00a 	rsb	sl, r4, sl
                next += copy;
                left -= copy;
                put += copy;
                state->length -= copy;
c7e25974:	e5853040 	str	r3, [r5, #64]
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
                next += copy;
c7e25978:	e08bb004 	add	fp, fp, r4
                left -= copy;
c7e2597c:	e58d0038 	str	r0, [sp, #56]
                put += copy;
c7e25980:	e58d1034 	str	r1, [sp, #52]
c7e25984:	eafffd9e 	b	c7e25004 <inflate+0xc4>
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
c7e25988:	e35a0000 	cmp	sl, #0	; 0x0
                state->length -= copy;
                break;
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
c7e2598c:	e2822001 	add	r2, r2, #1	; 0x1
        case TABLE:
            NEEDBITS(14);
c7e25990:	0a0002ab 	beq	c7e26444 <inflate+0x1504>
c7e25994:	e5523001 	ldrb	r3, [r2, #-1]
c7e25998:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e2599c:	e0866713 	add	r6, r6, r3, lsl r7
c7e259a0:	e2877008 	add	r7, r7, #8	; 0x8
c7e259a4:	e357000d 	cmp	r7, #13	; 0xd
c7e259a8:	e1a0b002 	mov	fp, r2
c7e259ac:	9afffff5 	bls	c7e25988 <inflate+0xa48>
            state->nlen = BITS(5) + 257;
c7e259b0:	e206101f 	and	r1, r6, #31	; 0x1f
            DROPBITS(5);
c7e259b4:	e1a002a6 	lsr	r0, r6, #5
            state->ndist = BITS(5) + 1;
            DROPBITS(5);
c7e259b8:	e1a02526 	lsr	r2, r6, #10
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
c7e259bc:	e2811c01 	add	r1, r1, #256	; 0x100
            state->ndist = BITS(5) + 1;
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
            DROPBITS(4);
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
c7e259c0:	e59f368c 	ldr	r3, [pc, #1676]	; c7e26054 <inflate+0x1114>
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
c7e259c4:	e2811001 	add	r1, r1, #1	; 0x1
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
c7e259c8:	e200001f 	and	r0, r0, #31	; 0x1f
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
c7e259cc:	e202200f 	and	r2, r2, #15	; 0xf
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
c7e259d0:	e2800001 	add	r0, r0, #1	; 0x1
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
c7e259d4:	e2822004 	add	r2, r2, #4	; 0x4
            DROPBITS(4);
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
c7e259d8:	e1510003 	cmp	r1, r3
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
c7e259dc:	e585205c 	str	r2, [r5, #92]
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
c7e259e0:	e5851060 	str	r1, [r5, #96]
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
c7e259e4:	e5850064 	str	r0, [r5, #100]
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
            DROPBITS(4);
c7e259e8:	e1a06726 	lsr	r6, r6, #14
c7e259ec:	e247700e 	sub	r7, r7, #14	; 0xe
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
c7e259f0:	8a000001 	bhi	c7e259fc <inflate+0xabc>
c7e259f4:	e350001e 	cmp	r0, #30	; 0x1e
c7e259f8:	9a000001 	bls	c7e25a04 <inflate+0xac4>
                strm->msg = (char *)"too many length or distance symbols";
c7e259fc:	e59f3654 	ldr	r3, [pc, #1620]	; c7e26058 <inflate+0x1118>
c7e25a00:	ea000151 	b	c7e25f4c <inflate+0x100c>
                state->mode = BAD;
                break;
            }
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
c7e25a04:	e3a03000 	mov	r3, #0	; 0x0
c7e25a08:	e5853068 	str	r3, [r5, #104]
            state->mode = LENLENS;
c7e25a0c:	e2833010 	add	r3, r3, #16	; 0x10
c7e25a10:	e5853000 	str	r3, [r5]
c7e25a14:	ea000015 	b	c7e25a70 <inflate+0xb30>
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
c7e25a18:	e35a0000 	cmp	sl, #0	; 0x0
                break;
            }
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
c7e25a1c:	e2822001 	add	r2, r2, #1	; 0x1
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
c7e25a20:	0a000287 	beq	c7e26444 <inflate+0x1504>
c7e25a24:	e5523001 	ldrb	r3, [r2, #-1]
c7e25a28:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25a2c:	e0866713 	add	r6, r6, r3, lsl r7
c7e25a30:	e2877008 	add	r7, r7, #8	; 0x8
c7e25a34:	e3570002 	cmp	r7, #2	; 0x2
c7e25a38:	e1a0b002 	mov	fp, r2
c7e25a3c:	9afffff5 	bls	c7e25a18 <inflate+0xad8>
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
c7e25a40:	e59f3614 	ldr	r3, [pc, #1556]	; c7e2605c <inflate+0x111c>
c7e25a44:	e2062007 	and	r2, r6, #7	; 0x7
c7e25a48:	e0833080 	add	r3, r3, r0, lsl #1
c7e25a4c:	e2833e97 	add	r3, r3, #2416	; 0x970
c7e25a50:	e283300c 	add	r3, r3, #12	; 0xc
c7e25a54:	e1d330b0 	ldrh	r3, [r3]
c7e25a58:	e2801001 	add	r1, r0, #1	; 0x1
c7e25a5c:	e0853083 	add	r3, r5, r3, lsl #1
c7e25a60:	e1c327b0 	strh	r2, [r3, #112]
c7e25a64:	e5851068 	str	r1, [r5, #104]
                DROPBITS(3);
c7e25a68:	e1a061a6 	lsr	r6, r6, #3
c7e25a6c:	e2477003 	sub	r7, r7, #3	; 0x3
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
c7e25a70:	e5950068 	ldr	r0, [r5, #104]
c7e25a74:	e595305c 	ldr	r3, [r5, #92]
c7e25a78:	e1500003 	cmp	r0, r3
c7e25a7c:	2a000006 	bcs	c7e25a9c <inflate+0xb5c>
c7e25a80:	e1a0200b 	mov	r2, fp
c7e25a84:	eaffffea 	b	c7e25a34 <inflate+0xaf4>
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
c7e25a88:	e1d330b0 	ldrh	r3, [r3]
c7e25a8c:	e3a0c000 	mov	ip, #0	; 0x0
c7e25a90:	e0853083 	add	r3, r5, r3, lsl #1
c7e25a94:	e5851068 	str	r1, [r5, #104]
c7e25a98:	e1c3c7b0 	strh	ip, [r3, #112]
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
c7e25a9c:	e5952068 	ldr	r2, [r5, #104]
                state->lens[order[state->have++]] = 0;
c7e25aa0:	e59f35b4 	ldr	r3, [pc, #1460]	; c7e2605c <inflate+0x111c>
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
c7e25aa4:	e3520012 	cmp	r2, #18	; 0x12
                state->lens[order[state->have++]] = 0;
c7e25aa8:	e0833082 	add	r3, r3, r2, lsl #1
c7e25aac:	e2833e97 	add	r3, r3, #2416	; 0x970
c7e25ab0:	e283300c 	add	r3, r3, #12	; 0xc
c7e25ab4:	e2821001 	add	r1, r2, #1	; 0x1
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
c7e25ab8:	9afffff2 	bls	c7e25a88 <inflate+0xb48>
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
c7e25abc:	e59d0010 	ldr	r0, [sp, #16]
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
c7e25ac0:	e59dc01c 	ldr	ip, [sp, #28]
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
c7e25ac4:	e3a03007 	mov	r3, #7	; 0x7
c7e25ac8:	e5853054 	str	r3, [r5, #84]
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
c7e25acc:	e585006c 	str	r0, [r5, #108]
            state->lencode = (code const FAR *)(state->next);
c7e25ad0:	e585004c 	str	r0, [r5, #76]
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
c7e25ad4:	e58dc000 	str	ip, [sp]
c7e25ad8:	e59dc020 	ldr	ip, [sp, #32]
c7e25adc:	e59d3018 	ldr	r3, [sp, #24]
c7e25ae0:	e3a00000 	mov	r0, #0	; 0x0
c7e25ae4:	e59d1014 	ldr	r1, [sp, #20]
c7e25ae8:	e3a02013 	mov	r2, #19	; 0x13
c7e25aec:	e58dc004 	str	ip, [sp, #4]
c7e25af0:	ebfffa5a 	bl	c7e24460 <inflate_table>
                                &(state->lenbits), state->work);
            if (ret) {
c7e25af4:	e3500000 	cmp	r0, #0	; 0x0
c7e25af8:	e58d0040 	str	r0, [sp, #64]
                strm->msg = (char *)"invalid code lengths set";
c7e25afc:	159f355c 	ldrne	r3, [pc, #1372]	; c7e26060 <inflate+0x1120>
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
                                &(state->lenbits), state->work);
            if (ret) {
c7e25b00:	1a000243 	bne	c7e26414 <inflate+0x14d4>
                strm->msg = (char *)"invalid code lengths set";
                state->mode = BAD;
                break;
            }
            Tracev((stderr, "inflate:       code lengths ok\n"));
            state->have = 0;
c7e25b04:	e59d1040 	ldr	r1, [sp, #64]
            state->mode = CODELENS;
c7e25b08:	e3a03011 	mov	r3, #17	; 0x11
c7e25b0c:	e5853000 	str	r3, [r5]
                strm->msg = (char *)"invalid code lengths set";
                state->mode = BAD;
                break;
            }
            Tracev((stderr, "inflate:       code lengths ok\n"));
            state->have = 0;
c7e25b10:	e5851068 	str	r1, [r5, #104]
c7e25b14:	ea00007d 	b	c7e25d10 <inflate+0xdd0>
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
c7e25b18:	e5952054 	ldr	r2, [r5, #84]
c7e25b1c:	e3e03000 	mvn	r3, #0	; 0x0
c7e25b20:	e595404c 	ldr	r4, [r5, #76]
c7e25b24:	e1e09213 	mvn	r9, r3, lsl r2
c7e25b28:	e1a0200b 	mov	r2, fp
c7e25b2c:	e0063009 	and	r3, r6, r9
c7e25b30:	e0843103 	add	r3, r4, r3, lsl #2
c7e25b34:	e5d31001 	ldrb	r1, [r3, #1]
c7e25b38:	e1a0b002 	mov	fp, r2
                    if ((unsigned)(this.bits) <= bits) break;
c7e25b3c:	e1510007 	cmp	r1, r7
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
c7e25b40:	e1d300b2 	ldrh	r0, [r3, #2]
                    if ((unsigned)(this.bits) <= bits) break;
c7e25b44:	9a000007 	bls	c7e25b68 <inflate+0xc28>
                    PULLBYTE();
c7e25b48:	e35a0000 	cmp	sl, #0	; 0x0
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
                    if ((unsigned)(this.bits) <= bits) break;
c7e25b4c:	e2822001 	add	r2, r2, #1	; 0x1
                    PULLBYTE();
c7e25b50:	0a00023b 	beq	c7e26444 <inflate+0x1504>
c7e25b54:	e5523001 	ldrb	r3, [r2, #-1]
c7e25b58:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25b5c:	e0866713 	add	r6, r6, r3, lsl r7
c7e25b60:	e2877008 	add	r7, r7, #8	; 0x8
c7e25b64:	eafffff0 	b	c7e25b2c <inflate+0xbec>
                }
                if (this.val < 16) {
c7e25b68:	e350000f 	cmp	r0, #15	; 0xf
c7e25b6c:	8a000011 	bhi	c7e25bb8 <inflate+0xc78>
c7e25b70:	ea000006 	b	c7e25b90 <inflate+0xc50>
                    NEEDBITS(this.bits);
c7e25b74:	e35a0000 	cmp	sl, #0	; 0x0
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
                }
                if (this.val < 16) {
c7e25b78:	e2822001 	add	r2, r2, #1	; 0x1
                    NEEDBITS(this.bits);
c7e25b7c:	0a000230 	beq	c7e26444 <inflate+0x1504>
c7e25b80:	e5523001 	ldrb	r3, [r2, #-1]
c7e25b84:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25b88:	e0866713 	add	r6, r6, r3, lsl r7
c7e25b8c:	e2877008 	add	r7, r7, #8	; 0x8
c7e25b90:	e1570001 	cmp	r7, r1
c7e25b94:	e1a0b002 	mov	fp, r2
c7e25b98:	3afffff5 	bcc	c7e25b74 <inflate+0xc34>
                    DROPBITS(this.bits);
                    state->lens[state->have++] = this.val;
c7e25b9c:	e28c2001 	add	r2, ip, #1	; 0x1
c7e25ba0:	e085308c 	add	r3, r5, ip, lsl #1
c7e25ba4:	e1c307b0 	strh	r0, [r3, #112]
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
                }
                if (this.val < 16) {
                    NEEDBITS(this.bits);
                    DROPBITS(this.bits);
c7e25ba8:	e0617007 	rsb	r7, r1, r7
                    state->lens[state->have++] = this.val;
c7e25bac:	e5852068 	str	r2, [r5, #104]
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
                }
                if (this.val < 16) {
                    NEEDBITS(this.bits);
                    DROPBITS(this.bits);
c7e25bb0:	e1a06136 	lsr	r6, r6, r1
c7e25bb4:	ea000055 	b	c7e25d10 <inflate+0xdd0>
                    state->lens[state->have++] = this.val;
                }
                else {
                    if (this.val == 16) {
c7e25bb8:	e3500010 	cmp	r0, #16	; 0x10
c7e25bbc:	1a000019 	bne	c7e25c28 <inflate+0xce8>
c7e25bc0:	ea000006 	b	c7e25be0 <inflate+0xca0>
                        NEEDBITS(this.bits + 2);
c7e25bc4:	e35a0000 	cmp	sl, #0	; 0x0
                    NEEDBITS(this.bits);
                    DROPBITS(this.bits);
                    state->lens[state->have++] = this.val;
                }
                else {
                    if (this.val == 16) {
c7e25bc8:	e2822001 	add	r2, r2, #1	; 0x1
                        NEEDBITS(this.bits + 2);
c7e25bcc:	0a00021c 	beq	c7e26444 <inflate+0x1504>
c7e25bd0:	e5523001 	ldrb	r3, [r2, #-1]
c7e25bd4:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25bd8:	e0866713 	add	r6, r6, r3, lsl r7
c7e25bdc:	e2877008 	add	r7, r7, #8	; 0x8
c7e25be0:	e2813002 	add	r3, r1, #2	; 0x2
c7e25be4:	e1570003 	cmp	r7, r3
c7e25be8:	e1a0b002 	mov	fp, r2
c7e25bec:	3afffff4 	bcc	c7e25bc4 <inflate+0xc84>
                        DROPBITS(this.bits);
                        if (state->have == 0) {
c7e25bf0:	e35c0000 	cmp	ip, #0	; 0x0
                    state->lens[state->have++] = this.val;
                }
                else {
                    if (this.val == 16) {
                        NEEDBITS(this.bits + 2);
                        DROPBITS(this.bits);
c7e25bf4:	e0617007 	rsb	r7, r1, r7
c7e25bf8:	e1a06136 	lsr	r6, r6, r1
                        if (state->have == 0) {
                            strm->msg = (char *)"invalid bit length repeat";
c7e25bfc:	059f3460 	ldreq	r3, [pc, #1120]	; c7e26064 <inflate+0x1124>
c7e25c00:	059d200c 	ldreq	r2, [sp, #12]
c7e25c04:	05823018 	streq	r3, [r2, #24]
c7e25c08:	0a000036 	beq	c7e25ce8 <inflate+0xda8>
                            state->mode = BAD;
                            break;
                        }
                        len = state->lens[state->have - 1];
                        copy = 3 + BITS(2);
c7e25c0c:	e2062003 	and	r2, r6, #3	; 0x3
                        if (state->have == 0) {
                            strm->msg = (char *)"invalid bit length repeat";
                            state->mode = BAD;
                            break;
                        }
                        len = state->lens[state->have - 1];
c7e25c10:	e085308c 	add	r3, r5, ip, lsl #1
c7e25c14:	e1d306be 	ldrh	r0, [r3, #110]
                        copy = 3 + BITS(2);
c7e25c18:	e2821003 	add	r1, r2, #3	; 0x3
                        DROPBITS(2);
c7e25c1c:	e1a06126 	lsr	r6, r6, #2
c7e25c20:	e2477002 	sub	r7, r7, #2	; 0x2
c7e25c24:	ea000028 	b	c7e25ccc <inflate+0xd8c>
                    }
                    else if (this.val == 17) {
c7e25c28:	e3500011 	cmp	r0, #17	; 0x11
c7e25c2c:	1a00001a 	bne	c7e25c9c <inflate+0xd5c>
c7e25c30:	ea000006 	b	c7e25c50 <inflate+0xd10>
                        NEEDBITS(this.bits + 3);
c7e25c34:	e35a0000 	cmp	sl, #0	; 0x0
                        }
                        len = state->lens[state->have - 1];
                        copy = 3 + BITS(2);
                        DROPBITS(2);
                    }
                    else if (this.val == 17) {
c7e25c38:	e2822001 	add	r2, r2, #1	; 0x1
                        NEEDBITS(this.bits + 3);
c7e25c3c:	0a000200 	beq	c7e26444 <inflate+0x1504>
c7e25c40:	e5523001 	ldrb	r3, [r2, #-1]
c7e25c44:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25c48:	e0866713 	add	r6, r6, r3, lsl r7
c7e25c4c:	e2877008 	add	r7, r7, #8	; 0x8
c7e25c50:	e2813003 	add	r3, r1, #3	; 0x3
c7e25c54:	e1570003 	cmp	r7, r3
c7e25c58:	e1a0b002 	mov	fp, r2
c7e25c5c:	3afffff4 	bcc	c7e25c34 <inflate+0xcf4>
                        DROPBITS(this.bits);
c7e25c60:	e1a03136 	lsr	r3, r6, r1
c7e25c64:	e3e02002 	mvn	r2, #2	; 0x2
c7e25c68:	e0612002 	rsb	r2, r1, r2
                        len = 0;
                        copy = 3 + BITS(3);
c7e25c6c:	e2031007 	and	r1, r3, #7	; 0x7
                        DROPBITS(3);
c7e25c70:	e0877002 	add	r7, r7, r2
                    }
                    else if (this.val == 17) {
                        NEEDBITS(this.bits + 3);
                        DROPBITS(this.bits);
                        len = 0;
                        copy = 3 + BITS(3);
c7e25c74:	e2811003 	add	r1, r1, #3	; 0x3
                        DROPBITS(3);
c7e25c78:	e1a061a3 	lsr	r6, r3, #3
c7e25c7c:	ea000011 	b	c7e25cc8 <inflate+0xd88>
                    }
                    else {
                        NEEDBITS(this.bits + 7);
c7e25c80:	e35a0000 	cmp	sl, #0	; 0x0
                    else if (this.val == 17) {
                        NEEDBITS(this.bits + 3);
                        DROPBITS(this.bits);
                        len = 0;
                        copy = 3 + BITS(3);
                        DROPBITS(3);
c7e25c84:	e2822001 	add	r2, r2, #1	; 0x1
                    }
                    else {
                        NEEDBITS(this.bits + 7);
c7e25c88:	0a0001ed 	beq	c7e26444 <inflate+0x1504>
c7e25c8c:	e5523001 	ldrb	r3, [r2, #-1]
c7e25c90:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25c94:	e0866713 	add	r6, r6, r3, lsl r7
c7e25c98:	e2877008 	add	r7, r7, #8	; 0x8
c7e25c9c:	e2813007 	add	r3, r1, #7	; 0x7
c7e25ca0:	e1570003 	cmp	r7, r3
c7e25ca4:	e1a0b002 	mov	fp, r2
c7e25ca8:	3afffff4 	bcc	c7e25c80 <inflate+0xd40>
                        DROPBITS(this.bits);
c7e25cac:	e1a03136 	lsr	r3, r6, r1
c7e25cb0:	e3e02006 	mvn	r2, #6	; 0x6
c7e25cb4:	e0612002 	rsb	r2, r1, r2
                        len = 0;
                        copy = 11 + BITS(7);
c7e25cb8:	e203107f 	and	r1, r3, #127	; 0x7f
                        DROPBITS(7);
c7e25cbc:	e0877002 	add	r7, r7, r2
                    }
                    else {
                        NEEDBITS(this.bits + 7);
                        DROPBITS(this.bits);
                        len = 0;
                        copy = 11 + BITS(7);
c7e25cc0:	e281100b 	add	r1, r1, #11	; 0xb
                        DROPBITS(7);
c7e25cc4:	e1a063a3 	lsr	r6, r3, #7
c7e25cc8:	e3a00000 	mov	r0, #0	; 0x0
                    }
                    if (state->have + copy > state->nlen + state->ndist) {
c7e25ccc:	e081300c 	add	r3, r1, ip
c7e25cd0:	e59dc024 	ldr	ip, [sp, #36]
c7e25cd4:	e153000c 	cmp	r3, ip
c7e25cd8:	9a000005 	bls	c7e25cf4 <inflate+0xdb4>
                        strm->msg = (char *)"invalid bit length repeat";
c7e25cdc:	e59f3380 	ldr	r3, [pc, #896]	; c7e26064 <inflate+0x1124>
c7e25ce0:	e59d000c 	ldr	r0, [sp, #12]
c7e25ce4:	e5803018 	str	r3, [r0, #24]
                        state->mode = BAD;
c7e25ce8:	e3a0301b 	mov	r3, #27	; 0x1b
c7e25cec:	e5853000 	str	r3, [r5]
c7e25cf0:	ea00000d 	b	c7e25d2c <inflate+0xdec>
                        break;
                    }
                    while (copy--)
                        state->lens[state->have++] = (unsigned short)len;
c7e25cf4:	e5953068 	ldr	r3, [r5, #104]
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
c7e25cf8:	e2511001 	subs	r1, r1, #1	; 0x1
                        state->lens[state->have++] = (unsigned short)len;
c7e25cfc:	e2832001 	add	r2, r3, #1	; 0x1
c7e25d00:	e0853083 	add	r3, r5, r3, lsl #1
c7e25d04:	e1c307b0 	strh	r0, [r3, #112]
c7e25d08:	e5852068 	str	r2, [r5, #104]
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
c7e25d0c:	1afffff8 	bne	c7e25cf4 <inflate+0xdb4>
            }
            Tracev((stderr, "inflate:       code lengths ok\n"));
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
c7e25d10:	e5952064 	ldr	r2, [r5, #100]
c7e25d14:	e5953060 	ldr	r3, [r5, #96]
c7e25d18:	e595c068 	ldr	ip, [r5, #104]
c7e25d1c:	e0823003 	add	r3, r2, r3
c7e25d20:	e15c0003 	cmp	ip, r3
c7e25d24:	e58d3024 	str	r3, [sp, #36]
c7e25d28:	3affff7a 	bcc	c7e25b18 <inflate+0xbd8>
                        state->lens[state->have++] = (unsigned short)len;
                }
            }

            /* handle error breaks in while */
            if (state->mode == BAD) break;
c7e25d2c:	e5953000 	ldr	r3, [r5]
c7e25d30:	e353001b 	cmp	r3, #27	; 0x1b
c7e25d34:	0afffcb2 	beq	c7e25004 <inflate+0xc4>

            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
c7e25d38:	e3a03009 	mov	r3, #9	; 0x9
c7e25d3c:	e5853054 	str	r3, [r5, #84]

            /* handle error breaks in while */
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
c7e25d40:	e59d1010 	ldr	r1, [sp, #16]
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
c7e25d44:	e59d201c 	ldr	r2, [sp, #28]
c7e25d48:	e59d3020 	ldr	r3, [sp, #32]

            /* handle error breaks in while */
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
c7e25d4c:	e585106c 	str	r1, [r5, #108]
            state->lencode = (code const FAR *)(state->next);
c7e25d50:	e585104c 	str	r1, [r5, #76]
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
c7e25d54:	e88d000c 	stm	sp, {r2, r3}
c7e25d58:	e59d3018 	ldr	r3, [sp, #24]
c7e25d5c:	e3a00001 	mov	r0, #1	; 0x1
c7e25d60:	e59d1014 	ldr	r1, [sp, #20]
c7e25d64:	e5952060 	ldr	r2, [r5, #96]
c7e25d68:	ebfff9bc 	bl	c7e24460 <inflate_table>
                                &(state->lenbits), state->work);
            if (ret) {
c7e25d6c:	e3500000 	cmp	r0, #0	; 0x0
c7e25d70:	e58d0040 	str	r0, [sp, #64]
                strm->msg = (char *)"invalid literal/lengths set";
c7e25d74:	159f32ec 	ldrne	r3, [pc, #748]	; c7e26068 <inflate+0x1128>
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
                                &(state->lenbits), state->work);
            if (ret) {
c7e25d78:	1afffd06 	bne	c7e25198 <inflate+0x258>
                strm->msg = (char *)"invalid literal/lengths set";
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
c7e25d7c:	e595306c 	ldr	r3, [r5, #108]
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
c7e25d80:	e5951060 	ldr	r1, [r5, #96]
c7e25d84:	e59d0028 	ldr	r0, [sp, #40]
c7e25d88:	e59d2020 	ldr	r2, [sp, #32]
            if (ret) {
                strm->msg = (char *)"invalid literal/lengths set";
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
c7e25d8c:	e5853050 	str	r3, [r5, #80]
            state->distbits = 6;
c7e25d90:	e3a03006 	mov	r3, #6	; 0x6
c7e25d94:	e5853058 	str	r3, [r5, #88]
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
c7e25d98:	e2811038 	add	r1, r1, #56	; 0x38
c7e25d9c:	e88d0005 	stm	sp, {r0, r2}
c7e25da0:	e59d3018 	ldr	r3, [sp, #24]
c7e25da4:	e0851081 	add	r1, r5, r1, lsl #1
c7e25da8:	e3a00002 	mov	r0, #2	; 0x2
c7e25dac:	e5952064 	ldr	r2, [r5, #100]
c7e25db0:	ebfff9aa 	bl	c7e24460 <inflate_table>
                            &(state->next), &(state->distbits), state->work);
            if (ret) {
c7e25db4:	e3500000 	cmp	r0, #0	; 0x0
c7e25db8:	e58d0040 	str	r0, [sp, #64]
                strm->msg = (char *)"invalid distances set";
c7e25dbc:	159f32a8 	ldrne	r3, [pc, #680]	; c7e2606c <inflate+0x112c>
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
                            &(state->next), &(state->distbits), state->work);
            if (ret) {
c7e25dc0:	1afffcf4 	bne	c7e25198 <inflate+0x258>
                strm->msg = (char *)"invalid distances set";
                state->mode = BAD;
                break;
            }
            Tracev((stderr, "inflate:       codes ok\n"));
            state->mode = LEN;
c7e25dc4:	e3a03012 	mov	r3, #18	; 0x12
c7e25dc8:	e5853000 	str	r3, [r5]
        case LEN:
	    WATCHDOG_RESET();
            if (have >= 6 && left >= 258) {
c7e25dcc:	e59f329c 	ldr	r3, [pc, #668]	; c7e26070 <inflate+0x1130>
c7e25dd0:	e59d0038 	ldr	r0, [sp, #56]
c7e25dd4:	e35a0005 	cmp	sl, #5	; 0x5
c7e25dd8:	81500003 	cmphi	r0, r3
c7e25ddc:	9a000016 	bls	c7e25e3c <inflate+0xefc>
                RESTORE();
c7e25de0:	e59d100c 	ldr	r1, [sp, #12]
c7e25de4:	e59d2034 	ldr	r2, [sp, #52]
c7e25de8:	e5810010 	str	r0, [r1, #16]
c7e25dec:	e581a004 	str	sl, [r1, #4]
c7e25df0:	e581b000 	str	fp, [r1]
                inflate_fast(strm, out);
c7e25df4:	e1a00001 	mov	r0, r1
            Tracev((stderr, "inflate:       codes ok\n"));
            state->mode = LEN;
        case LEN:
	    WATCHDOG_RESET();
            if (have >= 6 && left >= 258) {
                RESTORE();
c7e25df8:	e581200c 	str	r2, [r1, #12]
c7e25dfc:	e5856038 	str	r6, [r5, #56]
c7e25e00:	e585703c 	str	r7, [r5, #60]
                inflate_fast(strm, out);
c7e25e04:	e59d103c 	ldr	r1, [sp, #60]
c7e25e08:	ebfff831 	bl	c7e23ed4 <inflate_fast>
                LOAD();
c7e25e0c:	e59d300c 	ldr	r3, [sp, #12]
c7e25e10:	e59dc00c 	ldr	ip, [sp, #12]
c7e25e14:	e59d000c 	ldr	r0, [sp, #12]
c7e25e18:	e593300c 	ldr	r3, [r3, #12]
c7e25e1c:	e59cc010 	ldr	ip, [ip, #16]
c7e25e20:	e58d3034 	str	r3, [sp, #52]
c7e25e24:	e58dc038 	str	ip, [sp, #56]
c7e25e28:	e590b000 	ldr	fp, [r0]
c7e25e2c:	e590a004 	ldr	sl, [r0, #4]
c7e25e30:	e5956038 	ldr	r6, [r5, #56]
c7e25e34:	e595703c 	ldr	r7, [r5, #60]
c7e25e38:	eafffc71 	b	c7e25004 <inflate+0xc4>
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
c7e25e3c:	e5952054 	ldr	r2, [r5, #84]
c7e25e40:	e3e03000 	mvn	r3, #0	; 0x0
c7e25e44:	e1e02213 	mvn	r2, r3, lsl r2
c7e25e48:	e595904c 	ldr	r9, [r5, #76]
c7e25e4c:	e58d2048 	str	r2, [sp, #72]
c7e25e50:	e1a0c00b 	mov	ip, fp
c7e25e54:	e59d1048 	ldr	r1, [sp, #72]
c7e25e58:	e1a0b00c 	mov	fp, ip
c7e25e5c:	e0063001 	and	r3, r6, r1
c7e25e60:	e0892103 	add	r2, r9, r3, lsl #2
c7e25e64:	e5d20001 	ldrb	r0, [r2, #1]
c7e25e68:	e7d91103 	ldrb	r1, [r9, r3, lsl #2]
                if ((unsigned)(this.bits) <= bits) break;
c7e25e6c:	e1500007 	cmp	r0, r7
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
c7e25e70:	e1d230b2 	ldrh	r3, [r2, #2]
                if ((unsigned)(this.bits) <= bits) break;
c7e25e74:	e1a04000 	mov	r4, r0
c7e25e78:	9a000007 	bls	c7e25e9c <inflate+0xf5c>
                PULLBYTE();
c7e25e7c:	e35a0000 	cmp	sl, #0	; 0x0
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
                if ((unsigned)(this.bits) <= bits) break;
c7e25e80:	e28cc001 	add	ip, ip, #1	; 0x1
                PULLBYTE();
c7e25e84:	0a00016e 	beq	c7e26444 <inflate+0x1504>
c7e25e88:	e55c3001 	ldrb	r3, [ip, #-1]
c7e25e8c:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25e90:	e0866713 	add	r6, r6, r3, lsl r7
c7e25e94:	e2877008 	add	r7, r7, #8	; 0x8
c7e25e98:	eaffffed 	b	c7e25e54 <inflate+0xf14>
            }
            if (this.op && (this.op & 0xf0) == 0) {
c7e25e9c:	e3510000 	cmp	r1, #0	; 0x0
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
            }
c7e25ea0:	e58d3050 	str	r3, [sp, #80]
            if (this.op && (this.op & 0xf0) == 0) {
c7e25ea4:	0a00001b 	beq	c7e25f18 <inflate+0xfd8>
c7e25ea8:	e31100f0 	tst	r1, #240	; 0xf0
c7e25eac:	1a000019 	bne	c7e25f18 <inflate+0xfd8>
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
c7e25eb0:	e0802001 	add	r2, r0, r1
c7e25eb4:	e3e03000 	mvn	r3, #0	; 0x0
c7e25eb8:	e1e03213 	mvn	r3, r3, lsl r2
c7e25ebc:	e58d302c 	str	r3, [sp, #44]
c7e25ec0:	e59d202c 	ldr	r2, [sp, #44]
c7e25ec4:	e59d1050 	ldr	r1, [sp, #80]
c7e25ec8:	e0063002 	and	r3, r6, r2
c7e25ecc:	e0813033 	add	r3, r1, r3, lsr r0
c7e25ed0:	e0892103 	add	r2, r9, r3, lsl #2
c7e25ed4:	e5d24001 	ldrb	r4, [r2, #1]
c7e25ed8:	e7d91103 	ldrb	r1, [r9, r3, lsl #2]
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
c7e25edc:	e0803004 	add	r3, r0, r4
c7e25ee0:	e1530007 	cmp	r3, r7
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
c7e25ee4:	e1a0b00c 	mov	fp, ip
c7e25ee8:	e1d230b2 	ldrh	r3, [r2, #2]
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
c7e25eec:	e28cc001 	add	ip, ip, #1	; 0x1
c7e25ef0:	9a000006 	bls	c7e25f10 <inflate+0xfd0>
                    PULLBYTE();
c7e25ef4:	e35a0000 	cmp	sl, #0	; 0x0
c7e25ef8:	0a000151 	beq	c7e26444 <inflate+0x1504>
c7e25efc:	e55c3001 	ldrb	r3, [ip, #-1]
c7e25f00:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25f04:	e0866713 	add	r6, r6, r3, lsl r7
c7e25f08:	e2877008 	add	r7, r7, #8	; 0x8
c7e25f0c:	eaffffeb 	b	c7e25ec0 <inflate+0xf80>
                }
                DROPBITS(last.bits);
c7e25f10:	e1a06036 	lsr	r6, r6, r0
c7e25f14:	e0607007 	rsb	r7, r0, r7
            }
            DROPBITS(this.bits);
            state->length = (unsigned)this.val;
            if ((int)(this.op) == 0) {
c7e25f18:	e3510000 	cmp	r1, #0	; 0x0
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
            state->length = (unsigned)this.val;
c7e25f1c:	e5853040 	str	r3, [r5, #64]
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
c7e25f20:	e0647007 	rsb	r7, r4, r7
c7e25f24:	e1a06436 	lsr	r6, r6, r4
            state->length = (unsigned)this.val;
            if ((int)(this.op) == 0) {
                Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
                        "inflate:         literal '%c'\n" :
                        "inflate:         literal 0x%02x\n", this.val));
                state->mode = LIT;
c7e25f28:	03a03017 	moveq	r3, #23	; 0x17
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
            state->length = (unsigned)this.val;
            if ((int)(this.op) == 0) {
c7e25f2c:	0afffc9c 	beq	c7e251a4 <inflate+0x264>
                        "inflate:         literal '%c'\n" :
                        "inflate:         literal 0x%02x\n", this.val));
                state->mode = LIT;
                break;
            }
            if (this.op & 32) {
c7e25f30:	e3110020 	tst	r1, #32	; 0x20
c7e25f34:	0a000001 	beq	c7e25f40 <inflate+0x1000>
                Tracevv((stderr, "inflate:         end of block\n"));
                state->mode = TYPE;
c7e25f38:	e3a0300b 	mov	r3, #11	; 0xb
c7e25f3c:	eafffc98 	b	c7e251a4 <inflate+0x264>
                break;
            }
            if (this.op & 64) {
c7e25f40:	e3110040 	tst	r1, #64	; 0x40
c7e25f44:	0a000003 	beq	c7e25f58 <inflate+0x1018>
                strm->msg = (char *)"invalid literal/length code";
c7e25f48:	e59f3124 	ldr	r3, [pc, #292]	; c7e26074 <inflate+0x1134>
c7e25f4c:	e59d200c 	ldr	r2, [sp, #12]
c7e25f50:	e5823018 	str	r3, [r2, #24]
c7e25f54:	eafffc91 	b	c7e251a0 <inflate+0x260>
                state->mode = BAD;
                break;
            }
            state->extra = (unsigned)(this.op) & 15;
c7e25f58:	e201300f 	and	r3, r1, #15	; 0xf
c7e25f5c:	e5853048 	str	r3, [r5, #72]
            state->mode = LENEXT;
c7e25f60:	e3a03013 	mov	r3, #19	; 0x13
c7e25f64:	e5853000 	str	r3, [r5]
        case LENEXT:
            if (state->extra) {
c7e25f68:	e5951048 	ldr	r1, [r5, #72]
c7e25f6c:	e3510000 	cmp	r1, #0	; 0x0
c7e25f70:	11a0200b 	movne	r2, fp
c7e25f74:	1a000007 	bne	c7e25f98 <inflate+0x1058>
c7e25f78:	ea000011 	b	c7e25fc4 <inflate+0x1084>
                NEEDBITS(state->extra);
c7e25f7c:	e35a0000 	cmp	sl, #0	; 0x0
                break;
            }
            state->extra = (unsigned)(this.op) & 15;
            state->mode = LENEXT;
        case LENEXT:
            if (state->extra) {
c7e25f80:	e2822001 	add	r2, r2, #1	; 0x1
                NEEDBITS(state->extra);
c7e25f84:	0a00012e 	beq	c7e26444 <inflate+0x1504>
c7e25f88:	e5523001 	ldrb	r3, [r2, #-1]
c7e25f8c:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e25f90:	e0866713 	add	r6, r6, r3, lsl r7
c7e25f94:	e2877008 	add	r7, r7, #8	; 0x8
c7e25f98:	e1570001 	cmp	r7, r1
c7e25f9c:	e1a0b002 	mov	fp, r2
c7e25fa0:	3afffff5 	bcc	c7e25f7c <inflate+0x103c>
                state->length += BITS(state->extra);
c7e25fa4:	e3e03000 	mvn	r3, #0	; 0x0
c7e25fa8:	e1c63113 	bic	r3, r6, r3, lsl r1
                DROPBITS(state->extra);
c7e25fac:	e5951048 	ldr	r1, [r5, #72]
            state->extra = (unsigned)(this.op) & 15;
            state->mode = LENEXT;
        case LENEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->length += BITS(state->extra);
c7e25fb0:	e5952040 	ldr	r2, [r5, #64]
                DROPBITS(state->extra);
c7e25fb4:	e1a06136 	lsr	r6, r6, r1
            state->extra = (unsigned)(this.op) & 15;
            state->mode = LENEXT;
        case LENEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->length += BITS(state->extra);
c7e25fb8:	e0822003 	add	r2, r2, r3
c7e25fbc:	e5852040 	str	r2, [r5, #64]
                DROPBITS(state->extra);
c7e25fc0:	e0617007 	rsb	r7, r1, r7
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
c7e25fc4:	e3a03014 	mov	r3, #20	; 0x14
c7e25fc8:	e5853000 	str	r3, [r5]
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
c7e25fcc:	e5952058 	ldr	r2, [r5, #88]
c7e25fd0:	e3e03000 	mvn	r3, #0	; 0x0
c7e25fd4:	e1e02213 	mvn	r2, r3, lsl r2
c7e25fd8:	e5959050 	ldr	r9, [r5, #80]
c7e25fdc:	e58d2030 	str	r2, [sp, #48]
c7e25fe0:	e1a0c00b 	mov	ip, fp
c7e25fe4:	e59d0030 	ldr	r0, [sp, #48]
c7e25fe8:	e1a0b00c 	mov	fp, ip
c7e25fec:	e0063000 	and	r3, r6, r0
c7e25ff0:	e0892103 	add	r2, r9, r3, lsl #2
c7e25ff4:	e5d21001 	ldrb	r1, [r2, #1]
c7e25ff8:	e7d94103 	ldrb	r4, [r9, r3, lsl #2]
                if ((unsigned)(this.bits) <= bits) break;
c7e25ffc:	e1510007 	cmp	r1, r7
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
c7e26000:	e1d220b2 	ldrh	r2, [r2, #2]
                if ((unsigned)(this.bits) <= bits) break;
c7e26004:	e1a00001 	mov	r0, r1
c7e26008:	9a00001e 	bls	c7e26088 <inflate+0x1148>
                PULLBYTE();
c7e2600c:	e35a0000 	cmp	sl, #0	; 0x0
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
                if ((unsigned)(this.bits) <= bits) break;
c7e26010:	e28cc001 	add	ip, ip, #1	; 0x1
                PULLBYTE();
c7e26014:	0a00010a 	beq	c7e26444 <inflate+0x1504>
c7e26018:	e55c3001 	ldrb	r3, [ip, #-1]
c7e2601c:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e26020:	e0866713 	add	r6, r6, r3, lsl r7
c7e26024:	e2877008 	add	r7, r7, #8	; 0x8
c7e26028:	eaffffed 	b	c7e25fe4 <inflate+0x10a4>
c7e2602c:	00008b1f 	.word	0x00008b1f
c7e26030:	c7e348b7 	.word	0xc7e348b7
c7e26034:	c7e348ce 	.word	0xc7e348ce
c7e26038:	c7e348e9 	.word	0xc7e348e9
c7e2603c:	c7e348fd 	.word	0xc7e348fd
c7e26040:	c7e34916 	.word	0xc7e34916
c7e26044:	c7e2d368 	.word	0xc7e2d368
c7e26048:	c7e3492a 	.word	0xc7e3492a
c7e2604c:	0000ffff 	.word	0x0000ffff
c7e26050:	c7e3493d 	.word	0xc7e3493d
c7e26054:	0000011e 	.word	0x0000011e
c7e26058:	c7e3495a 	.word	0xc7e3495a
c7e2605c:	c7e2d26c 	.word	0xc7e2d26c
c7e26060:	c7e3497e 	.word	0xc7e3497e
c7e26064:	c7e34997 	.word	0xc7e34997
c7e26068:	c7e349b1 	.word	0xc7e349b1
c7e2606c:	c7e349cd 	.word	0xc7e349cd
c7e26070:	00000101 	.word	0x00000101
c7e26074:	c7e3489b 	.word	0xc7e3489b
c7e26078:	c7e34885 	.word	0xc7e34885
c7e2607c:	c7e34867 	.word	0xc7e34867
c7e26080:	c7e349e3 	.word	0xc7e349e3
c7e26084:	c7e349f8 	.word	0xc7e349f8
            }
            if ((this.op & 0xf0) == 0) {
c7e26088:	e31400f0 	tst	r4, #240	; 0xf0
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
            }
c7e2608c:	e58d2054 	str	r2, [sp, #84]
            if ((this.op & 0xf0) == 0) {
c7e26090:	1a000019 	bne	c7e260fc <inflate+0x11bc>
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
c7e26094:	e0812004 	add	r2, r1, r4
c7e26098:	e3e03000 	mvn	r3, #0	; 0x0
c7e2609c:	e1e03213 	mvn	r3, r3, lsl r2
c7e260a0:	e58d304c 	str	r3, [sp, #76]
c7e260a4:	e59d204c 	ldr	r2, [sp, #76]
c7e260a8:	e59d0054 	ldr	r0, [sp, #84]
c7e260ac:	e0063002 	and	r3, r6, r2
c7e260b0:	e0803133 	add	r3, r0, r3, lsr r1
c7e260b4:	e0892103 	add	r2, r9, r3, lsl #2
c7e260b8:	e5d20001 	ldrb	r0, [r2, #1]
c7e260bc:	e7d94103 	ldrb	r4, [r9, r3, lsl #2]
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
c7e260c0:	e0813000 	add	r3, r1, r0
c7e260c4:	e1530007 	cmp	r3, r7
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
c7e260c8:	e1a0b00c 	mov	fp, ip
c7e260cc:	e1d220b2 	ldrh	r2, [r2, #2]
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
c7e260d0:	e28cc001 	add	ip, ip, #1	; 0x1
c7e260d4:	9a000006 	bls	c7e260f4 <inflate+0x11b4>
                    PULLBYTE();
c7e260d8:	e35a0000 	cmp	sl, #0	; 0x0
c7e260dc:	0a0000d8 	beq	c7e26444 <inflate+0x1504>
c7e260e0:	e55c3001 	ldrb	r3, [ip, #-1]
c7e260e4:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e260e8:	e0866713 	add	r6, r6, r3, lsl r7
c7e260ec:	e2877008 	add	r7, r7, #8	; 0x8
c7e260f0:	eaffffeb 	b	c7e260a4 <inflate+0x1164>
                }
                DROPBITS(last.bits);
c7e260f4:	e1a06136 	lsr	r6, r6, r1
c7e260f8:	e0617007 	rsb	r7, r1, r7
            }
            DROPBITS(this.bits);
            if (this.op & 64) {
c7e260fc:	e3140040 	tst	r4, #64	; 0x40
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
c7e26100:	e0607007 	rsb	r7, r0, r7
c7e26104:	e1a06036 	lsr	r6, r6, r0
            if (this.op & 64) {
                strm->msg = (char *)"invalid distance code";
c7e26108:	151f3098 	ldrne	r3, [pc, #-152]	; c7e26078 <inflate+0x1138>
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
            if (this.op & 64) {
c7e2610c:	1a000026 	bne	c7e261ac <inflate+0x126c>
                strm->msg = (char *)"invalid distance code";
                state->mode = BAD;
                break;
            }
            state->offset = (unsigned)this.val;
            state->extra = (unsigned)(this.op) & 15;
c7e26110:	e204300f 	and	r3, r4, #15	; 0xf
c7e26114:	e5853048 	str	r3, [r5, #72]
            state->mode = DISTEXT;
c7e26118:	e3a03015 	mov	r3, #21	; 0x15
            if (this.op & 64) {
                strm->msg = (char *)"invalid distance code";
                state->mode = BAD;
                break;
            }
            state->offset = (unsigned)this.val;
c7e2611c:	e5852044 	str	r2, [r5, #68]
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
c7e26120:	e5853000 	str	r3, [r5]
        case DISTEXT:
            if (state->extra) {
c7e26124:	e5951048 	ldr	r1, [r5, #72]
c7e26128:	e3510000 	cmp	r1, #0	; 0x0
c7e2612c:	11a0200b 	movne	r2, fp
c7e26130:	1a000007 	bne	c7e26154 <inflate+0x1214>
c7e26134:	ea000011 	b	c7e26180 <inflate+0x1240>
                NEEDBITS(state->extra);
c7e26138:	e35a0000 	cmp	sl, #0	; 0x0
            }
            state->offset = (unsigned)this.val;
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
c7e2613c:	e2822001 	add	r2, r2, #1	; 0x1
                NEEDBITS(state->extra);
c7e26140:	0a0000bf 	beq	c7e26444 <inflate+0x1504>
c7e26144:	e5523001 	ldrb	r3, [r2, #-1]
c7e26148:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e2614c:	e0866713 	add	r6, r6, r3, lsl r7
c7e26150:	e2877008 	add	r7, r7, #8	; 0x8
c7e26154:	e1570001 	cmp	r7, r1
c7e26158:	e1a0b002 	mov	fp, r2
c7e2615c:	3afffff5 	bcc	c7e26138 <inflate+0x11f8>
                state->offset += BITS(state->extra);
c7e26160:	e3e03000 	mvn	r3, #0	; 0x0
c7e26164:	e1c63113 	bic	r3, r6, r3, lsl r1
                DROPBITS(state->extra);
c7e26168:	e5951048 	ldr	r1, [r5, #72]
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->offset += BITS(state->extra);
c7e2616c:	e5952044 	ldr	r2, [r5, #68]
                DROPBITS(state->extra);
c7e26170:	e1a06136 	lsr	r6, r6, r1
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->offset += BITS(state->extra);
c7e26174:	e0822003 	add	r2, r2, r3
c7e26178:	e5852044 	str	r2, [r5, #68]
                DROPBITS(state->extra);
c7e2617c:	e0617007 	rsb	r7, r1, r7
                strm->msg = (char *)"invalid distance too far back";
                state->mode = BAD;
                break;
            }
#endif
            if (state->offset > state->whave + out - left) {
c7e26180:	e595302c 	ldr	r3, [r5, #44]
c7e26184:	e59dc03c 	ldr	ip, [sp, #60]
c7e26188:	e59d0038 	ldr	r0, [sp, #56]
c7e2618c:	e5952044 	ldr	r2, [r5, #68]
c7e26190:	e08c3003 	add	r3, ip, r3
c7e26194:	e0603003 	rsb	r3, r0, r3
c7e26198:	e1520003 	cmp	r2, r3
                strm->msg = (char *)"invalid distance too far back";
                state->mode = BAD;
                break;
            }
            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
            state->mode = MATCH;
c7e2619c:	93a03016 	movls	r3, #22	; 0x16
c7e261a0:	95853000 	strls	r3, [r5]
                strm->msg = (char *)"invalid distance too far back";
                state->mode = BAD;
                break;
            }
#endif
            if (state->offset > state->whave + out - left) {
c7e261a4:	9a000003 	bls	c7e261b8 <inflate+0x1278>
                strm->msg = (char *)"invalid distance too far back";
c7e261a8:	e51f3134 	ldr	r3, [pc, #-308]	; c7e2607c <inflate+0x113c>
c7e261ac:	e59d100c 	ldr	r1, [sp, #12]
c7e261b0:	e5813018 	str	r3, [r1, #24]
c7e261b4:	eafffbf9 	b	c7e251a0 <inflate+0x260>
                break;
            }
            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
            state->mode = MATCH;
        case MATCH:
            if (left == 0) goto inf_leave;
c7e261b8:	e59d2038 	ldr	r2, [sp, #56]
c7e261bc:	e3520000 	cmp	r2, #0	; 0x0
c7e261c0:	0a00009f 	beq	c7e26444 <inflate+0x1504>
            copy = out - left;
c7e261c4:	e59dc03c 	ldr	ip, [sp, #60]
            if (state->offset > copy) {         /* copy from window */
c7e261c8:	e5953044 	ldr	r3, [r5, #68]
            }
            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
            state->mode = MATCH;
        case MATCH:
            if (left == 0) goto inf_leave;
            copy = out - left;
c7e261cc:	e062100c 	rsb	r1, r2, ip
            if (state->offset > copy) {         /* copy from window */
c7e261d0:	e1530001 	cmp	r3, r1
                else
                    from = state->window + (state->write - copy);
                if (copy > state->length) copy = state->length;
            }
            else {                              /* copy from output */
                from = put - state->offset;
c7e261d4:	959d1034 	ldrls	r1, [sp, #52]
                copy = state->length;
c7e261d8:	95952040 	ldrls	r2, [r5, #64]
                else
                    from = state->window + (state->write - copy);
                if (copy > state->length) copy = state->length;
            }
            else {                              /* copy from output */
                from = put - state->offset;
c7e261dc:	90630001 	rsbls	r0, r3, r1
            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
            state->mode = MATCH;
        case MATCH:
            if (left == 0) goto inf_leave;
            copy = out - left;
            if (state->offset > copy) {         /* copy from window */
c7e261e0:	9a00000b 	bls	c7e26214 <inflate+0x12d4>
                copy = state->offset - copy;
                if (copy > state->write) {
c7e261e4:	e5952030 	ldr	r2, [r5, #48]
            state->mode = MATCH;
        case MATCH:
            if (left == 0) goto inf_leave;
            copy = out - left;
            if (state->offset > copy) {         /* copy from window */
                copy = state->offset - copy;
c7e261e8:	e0611003 	rsb	r1, r1, r3
                if (copy > state->write) {
c7e261ec:	e1510002 	cmp	r1, r2
                    copy -= state->write;
                    from = state->window + (state->wsize - copy);
c7e261f0:	85953028 	ldrhi	r3, [r5, #40]
            if (left == 0) goto inf_leave;
            copy = out - left;
            if (state->offset > copy) {         /* copy from window */
                copy = state->offset - copy;
                if (copy > state->write) {
                    copy -= state->write;
c7e261f4:	80621001 	rsbhi	r1, r2, r1
                    from = state->window + (state->wsize - copy);
                }
                else
                    from = state->window + (state->write - copy);
c7e261f8:	90613002 	rsbls	r3, r1, r2
c7e261fc:	e5950034 	ldr	r0, [r5, #52]
                if (copy > state->length) copy = state->length;
c7e26200:	e5952040 	ldr	r2, [r5, #64]
            copy = out - left;
            if (state->offset > copy) {         /* copy from window */
                copy = state->offset - copy;
                if (copy > state->write) {
                    copy -= state->write;
                    from = state->window + (state->wsize - copy);
c7e26204:	80613003 	rsbhi	r3, r1, r3
                }
                else
                    from = state->window + (state->write - copy);
c7e26208:	e0800003 	add	r0, r0, r3
                if (copy > state->length) copy = state->length;
c7e2620c:	e1520001 	cmp	r2, r1
c7e26210:	21a02001 	movcs	r2, r1
            }
            else {                              /* copy from output */
                from = put - state->offset;
                copy = state->length;
c7e26214:	e59d1038 	ldr	r1, [sp, #56]
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
c7e26218:	e5953040 	ldr	r3, [r5, #64]
                    from = state->window + (state->write - copy);
                if (copy > state->length) copy = state->length;
            }
            else {                              /* copy from output */
                from = put - state->offset;
                copy = state->length;
c7e2621c:	e1520001 	cmp	r2, r1
c7e26220:	31a01002 	movcc	r1, r2
            }
            if (copy > left) copy = left;
            left -= copy;
c7e26224:	e59d2038 	ldr	r2, [sp, #56]
            state->length -= copy;
c7e26228:	e0613003 	rsb	r3, r1, r3
            else {                              /* copy from output */
                from = put - state->offset;
                copy = state->length;
            }
            if (copy > left) copy = left;
            left -= copy;
c7e2622c:	e0612002 	rsb	r2, r1, r2
c7e26230:	e58d2038 	str	r2, [sp, #56]
            state->length -= copy;
c7e26234:	e5853040 	str	r3, [r5, #64]
c7e26238:	e3a02000 	mov	r2, #0	; 0x0
            do {
                *put++ = *from++;
c7e2623c:	e7d03002 	ldrb	r3, [r0, r2]
c7e26240:	e59dc034 	ldr	ip, [sp, #52]
c7e26244:	e7cc3002 	strb	r3, [ip, r2]
c7e26248:	e2822001 	add	r2, r2, #1	; 0x1
            } while (--copy);
c7e2624c:	e1510002 	cmp	r1, r2
c7e26250:	1afffff9 	bne	c7e2623c <inflate+0x12fc>
            if (state->length == 0) state->mode = LEN;
c7e26254:	e5953040 	ldr	r3, [r5, #64]
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
            } while (--copy);
c7e26258:	e08cc001 	add	ip, ip, r1
            if (state->length == 0) state->mode = LEN;
c7e2625c:	e3530000 	cmp	r3, #0	; 0x0
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
            } while (--copy);
c7e26260:	e58dc034 	str	ip, [sp, #52]
            if (state->length == 0) state->mode = LEN;
c7e26264:	02833012 	addeq	r3, r3, #18	; 0x12
c7e26268:	0afffbcd 	beq	c7e251a4 <inflate+0x264>
c7e2626c:	eafffb64 	b	c7e25004 <inflate+0xc4>
            break;
        case LIT:
            if (left == 0) goto inf_leave;
c7e26270:	e59d0038 	ldr	r0, [sp, #56]
c7e26274:	e3500000 	cmp	r0, #0	; 0x0
c7e26278:	0a000071 	beq	c7e26444 <inflate+0x1504>
            *put++ = (unsigned char)(state->length);
c7e2627c:	e5953040 	ldr	r3, [r5, #64]
c7e26280:	e59d1034 	ldr	r1, [sp, #52]
            left--;
c7e26284:	e2400001 	sub	r0, r0, #1	; 0x1
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
            *put++ = (unsigned char)(state->length);
c7e26288:	e4c13001 	strb	r3, [r1], #1
            left--;
            state->mode = LEN;
c7e2628c:	e3a03012 	mov	r3, #18	; 0x12
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
            *put++ = (unsigned char)(state->length);
c7e26290:	e58d1034 	str	r1, [sp, #52]
            left--;
            state->mode = LEN;
c7e26294:	e5853000 	str	r3, [r5]
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
            *put++ = (unsigned char)(state->length);
            left--;
c7e26298:	e58d0038 	str	r0, [sp, #56]
c7e2629c:	eafffb58 	b	c7e25004 <inflate+0xc4>
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
c7e262a0:	e5953008 	ldr	r3, [r5, #8]
c7e262a4:	e3530000 	cmp	r3, #0	; 0x0
c7e262a8:	11a0200b 	movne	r2, fp
c7e262ac:	1a000007 	bne	c7e262d0 <inflate+0x1390>
c7e262b0:	ea00003f 	b	c7e263b4 <inflate+0x1474>
                NEEDBITS(32);
c7e262b4:	e35a0000 	cmp	sl, #0	; 0x0
            *put++ = (unsigned char)(state->length);
            left--;
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
c7e262b8:	e2822001 	add	r2, r2, #1	; 0x1
                NEEDBITS(32);
c7e262bc:	0a000060 	beq	c7e26444 <inflate+0x1504>
c7e262c0:	e5523001 	ldrb	r3, [r2, #-1]
c7e262c4:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e262c8:	e0866713 	add	r6, r6, r3, lsl r7
c7e262cc:	e2877008 	add	r7, r7, #8	; 0x8
c7e262d0:	e357001f 	cmp	r7, #31	; 0x1f
c7e262d4:	e1a0b002 	mov	fp, r2
c7e262d8:	9afffff5 	bls	c7e262b4 <inflate+0x1374>
                out -= left;
                strm->total_out += out;
c7e262dc:	e59d200c 	ldr	r2, [sp, #12]
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
                NEEDBITS(32);
                out -= left;
c7e262e0:	e59dc03c 	ldr	ip, [sp, #60]
c7e262e4:	e59d0038 	ldr	r0, [sp, #56]
                strm->total_out += out;
c7e262e8:	e5923014 	ldr	r3, [r2, #20]
c7e262ec:	e59d100c 	ldr	r1, [sp, #12]
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
                NEEDBITS(32);
                out -= left;
c7e262f0:	e060200c 	rsb	r2, r0, ip
                strm->total_out += out;
c7e262f4:	e0833002 	add	r3, r3, r2
c7e262f8:	e5813014 	str	r3, [r1, #20]
                state->total += out;
c7e262fc:	e595301c 	ldr	r3, [r5, #28]
                if (out)
c7e26300:	e3520000 	cmp	r2, #0	; 0x0
        case CHECK:
            if (state->wrap) {
                NEEDBITS(32);
                out -= left;
                strm->total_out += out;
                state->total += out;
c7e26304:	e0833002 	add	r3, r3, r2
c7e26308:	e585301c 	str	r3, [r5, #28]
                if (out)
c7e2630c:	0a00000f 	beq	c7e26350 <inflate+0x1410>
                    strm->adler = state->check =
c7e26310:	e5953010 	ldr	r3, [r5, #16]
c7e26314:	e2621000 	rsb	r1, r2, #0	; 0x0
c7e26318:	e3530000 	cmp	r3, #0	; 0x0
c7e2631c:	0a000004 	beq	c7e26334 <inflate+0x13f4>
c7e26320:	e59d3034 	ldr	r3, [sp, #52]
c7e26324:	e5950018 	ldr	r0, [r5, #24]
c7e26328:	e0831001 	add	r1, r3, r1
c7e2632c:	ebffea74 	bl	c7e20d04 <crc32>
c7e26330:	ea000003 	b	c7e26344 <inflate+0x1404>
c7e26334:	e59dc034 	ldr	ip, [sp, #52]
c7e26338:	e5950018 	ldr	r0, [r5, #24]
c7e2633c:	e08c1001 	add	r1, ip, r1
c7e26340:	ebfffa2b 	bl	c7e24bf4 <adler32>
c7e26344:	e59d100c 	ldr	r1, [sp, #12]
c7e26348:	e5850018 	str	r0, [r5, #24]
c7e2634c:	e5810034 	str	r0, [r1, #52]
                        UPDATE(state->check, put - out, out);
                out = left;
                if ((
c7e26350:	e5953010 	ldr	r3, [r5, #16]
c7e26354:	e3530000 	cmp	r3, #0	; 0x0
c7e26358:	01a03c26 	lsreq	r3, r6, #24
c7e2635c:	01a02426 	lsreq	r2, r6, #8
c7e26360:	00833c06 	addeq	r3, r3, r6, lsl #24
c7e26364:	02022cff 	andeq	r2, r2, #65280	; 0xff00
c7e26368:	00833002 	addeq	r3, r3, r2
c7e2636c:	02062cff 	andeq	r2, r6, #65280	; 0xff00
c7e26370:	00832402 	addeq	r2, r3, r2, lsl #8
c7e26374:	e5953018 	ldr	r3, [r5, #24]
c7e26378:	11a02006 	movne	r2, r6
c7e2637c:	e1520003 	cmp	r2, r3
c7e26380:	0a000007 	beq	c7e263a4 <inflate+0x1464>
#ifdef GUNZIP
                     state->flags ? hold :
#endif
                     REVERSE(hold)) != state->check) {
                    strm->msg = (char *)"incorrect data check";
c7e26384:	e51f330c 	ldr	r3, [pc, #-780]	; c7e26080 <inflate+0x1140>
c7e26388:	e59d200c 	ldr	r2, [sp, #12]
c7e2638c:	e5823018 	str	r3, [r2, #24]
                    state->mode = BAD;
c7e26390:	e3a0301b 	mov	r3, #27	; 0x1b
c7e26394:	e5853000 	str	r3, [r5]
c7e26398:	e59d3038 	ldr	r3, [sp, #56]
c7e2639c:	e58d303c 	str	r3, [sp, #60]
c7e263a0:	eafffb17 	b	c7e25004 <inflate+0xc4>
                    break;
c7e263a4:	e59dc038 	ldr	ip, [sp, #56]
c7e263a8:	e3a06000 	mov	r6, #0	; 0x0
c7e263ac:	e58dc03c 	str	ip, [sp, #60]
c7e263b0:	e1a07006 	mov	r7, r6
                }
                INITBITS();
                Tracev((stderr, "inflate:   check matches trailer\n"));
            }
#ifdef GUNZIP
            state->mode = LENGTH;
c7e263b4:	e3a03019 	mov	r3, #25	; 0x19
c7e263b8:	e5853000 	str	r3, [r5]
        case LENGTH:
            if (state->wrap && state->flags) {
c7e263bc:	e5953008 	ldr	r3, [r5, #8]
c7e263c0:	e3530000 	cmp	r3, #0	; 0x0
c7e263c4:	0a000017 	beq	c7e26428 <inflate+0x14e8>
c7e263c8:	e5953010 	ldr	r3, [r5, #16]
c7e263cc:	e3530000 	cmp	r3, #0	; 0x0
c7e263d0:	0a000014 	beq	c7e26428 <inflate+0x14e8>
c7e263d4:	e1a0200b 	mov	r2, fp
c7e263d8:	ea000006 	b	c7e263f8 <inflate+0x14b8>
                NEEDBITS(32);
c7e263dc:	e35a0000 	cmp	sl, #0	; 0x0
                Tracev((stderr, "inflate:   check matches trailer\n"));
            }
#ifdef GUNZIP
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
c7e263e0:	e2822001 	add	r2, r2, #1	; 0x1
                NEEDBITS(32);
c7e263e4:	0a000016 	beq	c7e26444 <inflate+0x1504>
c7e263e8:	e5523001 	ldrb	r3, [r2, #-1]
c7e263ec:	e24aa001 	sub	sl, sl, #1	; 0x1
c7e263f0:	e0866713 	add	r6, r6, r3, lsl r7
c7e263f4:	e2877008 	add	r7, r7, #8	; 0x8
c7e263f8:	e357001f 	cmp	r7, #31	; 0x1f
c7e263fc:	e1a0b002 	mov	fp, r2
c7e26400:	9afffff5 	bls	c7e263dc <inflate+0x149c>
                if (hold != (state->total & 0xffffffffUL)) {
c7e26404:	e595301c 	ldr	r3, [r5, #28]
c7e26408:	e1560003 	cmp	r6, r3
c7e2640c:	0a000003 	beq	c7e26420 <inflate+0x14e0>
                    strm->msg = (char *)"incorrect length check";
c7e26410:	e51f3394 	ldr	r3, [pc, #-916]	; c7e26084 <inflate+0x1144>
c7e26414:	e59d000c 	ldr	r0, [sp, #12]
c7e26418:	e5803018 	str	r3, [r0, #24]
c7e2641c:	eafffb5f 	b	c7e251a0 <inflate+0x260>
                    state->mode = BAD;
                    break;
c7e26420:	e3a06000 	mov	r6, #0	; 0x0
c7e26424:	e1a07006 	mov	r7, r6
                }
                INITBITS();
                Tracev((stderr, "inflate:   length matches trailer\n"));
            }
#endif
            state->mode = DONE;
c7e26428:	e3a0301a 	mov	r3, #26	; 0x1a
c7e2642c:	e3a01001 	mov	r1, #1	; 0x1
c7e26430:	e5853000 	str	r3, [r5]
c7e26434:	e58d1040 	str	r1, [sp, #64]
c7e26438:	ea000001 	b	c7e26444 <inflate+0x1504>
c7e2643c:	e3e02002 	mvn	r2, #2	; 0x2
c7e26440:	e58d2040 	str	r2, [sp, #64]
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
c7e26444:	e59dc00c 	ldr	ip, [sp, #12]
c7e26448:	e59d3038 	ldr	r3, [sp, #56]
c7e2644c:	e58ca004 	str	sl, [ip, #4]
c7e26450:	e58c3010 	str	r3, [ip, #16]
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
c7e26454:	e5953028 	ldr	r3, [r5, #40]
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
c7e26458:	e59d0034 	ldr	r0, [sp, #52]
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
c7e2645c:	e3530000 	cmp	r3, #0	; 0x0
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
c7e26460:	e58c000c 	str	r0, [ip, #12]
c7e26464:	e58cb000 	str	fp, [ip]
c7e26468:	e5856038 	str	r6, [r5, #56]
c7e2646c:	e585703c 	str	r7, [r5, #60]
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
c7e26470:	1a000006 	bne	c7e26490 <inflate+0x1550>
c7e26474:	e5953000 	ldr	r3, [r5]
c7e26478:	e3530017 	cmp	r3, #23	; 0x17
c7e2647c:	8a000054 	bhi	c7e265d4 <inflate+0x1694>
c7e26480:	e59c3010 	ldr	r3, [ip, #16]
c7e26484:	e59d103c 	ldr	r1, [sp, #60]
c7e26488:	e1510003 	cmp	r1, r3
c7e2648c:	0a000050 	beq	c7e265d4 <inflate+0x1694>
unsigned out;
{
    struct inflate_state FAR *state;
    unsigned copy, dist;

    state = (struct inflate_state FAR *)strm->state;
c7e26490:	e59d200c 	ldr	r2, [sp, #12]
c7e26494:	e592401c 	ldr	r4, [r2, #28]

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
c7e26498:	e5943034 	ldr	r3, [r4, #52]
c7e2649c:	e3530000 	cmp	r3, #0	; 0x0
c7e264a0:	1a000009 	bne	c7e264cc <inflate+0x158c>
        state->window = (unsigned char FAR *)
c7e264a4:	e5941024 	ldr	r1, [r4, #36]
c7e264a8:	e59d300c 	ldr	r3, [sp, #12]
c7e264ac:	e3a02001 	mov	r2, #1	; 0x1
c7e264b0:	e1a01112 	lsl	r1, r2, r1
c7e264b4:	e5930028 	ldr	r0, [r3, #40]
c7e264b8:	e1a0e00f 	mov	lr, pc
c7e264bc:	e593f020 	ldr	pc, [r3, #32]
                        ZALLOC(strm, 1U << state->wbits,
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
c7e264c0:	e3500000 	cmp	r0, #0	; 0x0

    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
        state->window = (unsigned char FAR *)
c7e264c4:	e5840034 	str	r0, [r4, #52]
                        ZALLOC(strm, 1U << state->wbits,
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
c7e264c8:	0a00003c 	beq	c7e265c0 <inflate+0x1680>
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
c7e264cc:	e5941028 	ldr	r1, [r4, #40]
c7e264d0:	e3510000 	cmp	r1, #0	; 0x0
c7e264d4:	1a000005 	bne	c7e264f0 <inflate+0x15b0>
        state->wsize = 1U << state->wbits;
c7e264d8:	e5942024 	ldr	r2, [r4, #36]
c7e264dc:	e3a03001 	mov	r3, #1	; 0x1
c7e264e0:	e1a03213 	lsl	r3, r3, r2
        state->write = 0;
        state->whave = 0;
c7e264e4:	e584102c 	str	r1, [r4, #44]
        if (state->window == Z_NULL) return 1;
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
        state->wsize = 1U << state->wbits;
c7e264e8:	e5843028 	str	r3, [r4, #40]
        state->write = 0;
c7e264ec:	e5841030 	str	r1, [r4, #48]
        state->whave = 0;
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
c7e264f0:	e59dc00c 	ldr	ip, [sp, #12]
c7e264f4:	e59d003c 	ldr	r0, [sp, #60]
c7e264f8:	e59c3010 	ldr	r3, [ip, #16]
    if (copy >= state->wsize) {
c7e264fc:	e594c028 	ldr	ip, [r4, #40]
        state->write = 0;
        state->whave = 0;
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
c7e26500:	e0636000 	rsb	r6, r3, r0
c7e26504:	e59d200c 	ldr	r2, [sp, #12]
    if (copy >= state->wsize) {
c7e26508:	e156000c 	cmp	r6, ip
c7e2650c:	e592100c 	ldr	r1, [r2, #12]
c7e26510:	3a000008 	bcc	c7e26538 <inflate+0x15f8>
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
c7e26514:	e06c1001 	rsb	r1, ip, r1
c7e26518:	e1a0200c 	mov	r2, ip
c7e2651c:	e5940034 	ldr	r0, [r4, #52]
c7e26520:	ebfff1c5 	bl	c7e22c3c <memcpy>
        state->write = 0;
        state->whave = state->wsize;
c7e26524:	e5943028 	ldr	r3, [r4, #40]
c7e26528:	e584302c 	str	r3, [r4, #44]

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    if (copy >= state->wsize) {
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
c7e2652c:	e3a03000 	mov	r3, #0	; 0x0
c7e26530:	e5843030 	str	r3, [r4, #48]
c7e26534:	ea000026 	b	c7e265d4 <inflate+0x1694>
        state->whave = state->wsize;
    }
    else {
        dist = state->wsize - state->write;
c7e26538:	e5940030 	ldr	r0, [r4, #48]
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
c7e2653c:	e5942034 	ldr	r2, [r4, #52]
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
        state->whave = state->wsize;
    }
    else {
        dist = state->wsize - state->write;
c7e26540:	e060300c 	rsb	r3, r0, ip
c7e26544:	e1560003 	cmp	r6, r3
c7e26548:	31a07006 	movcc	r7, r6
c7e2654c:	21a07003 	movcs	r7, r3
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
c7e26550:	e0820000 	add	r0, r2, r0
c7e26554:	e0661001 	rsb	r1, r6, r1
c7e26558:	e1a02007 	mov	r2, r7
c7e2655c:	ebfff1b6 	bl	c7e22c3c <memcpy>
        copy -= dist;
        if (copy) {
c7e26560:	e0566007 	subs	r6, r6, r7
c7e26564:	0a000008 	beq	c7e2658c <inflate+0x164c>
            zmemcpy(state->window, strm->next_out - copy, copy);
c7e26568:	e59d300c 	ldr	r3, [sp, #12]
c7e2656c:	e5940034 	ldr	r0, [r4, #52]
c7e26570:	e593100c 	ldr	r1, [r3, #12]
c7e26574:	e1a02006 	mov	r2, r6
c7e26578:	e0661001 	rsb	r1, r6, r1
c7e2657c:	ebfff1ae 	bl	c7e22c3c <memcpy>
            state->write = copy;
            state->whave = state->wsize;
c7e26580:	e5943028 	ldr	r3, [r4, #40]
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
        copy -= dist;
        if (copy) {
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
c7e26584:	e5846030 	str	r6, [r4, #48]
c7e26588:	ea00000a 	b	c7e265b8 <inflate+0x1678>
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
c7e2658c:	e5943030 	ldr	r3, [r4, #48]
            if (state->write == state->wsize) state->write = 0;
c7e26590:	e5942028 	ldr	r2, [r4, #40]
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
c7e26594:	e0873003 	add	r3, r7, r3
            if (state->write == state->wsize) state->write = 0;
c7e26598:	e1530002 	cmp	r3, r2
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
c7e2659c:	e5843030 	str	r3, [r4, #48]
            if (state->write == state->wsize) state->write = 0;
            if (state->whave < state->wsize) state->whave += dist;
c7e265a0:	e594202c 	ldr	r2, [r4, #44]
c7e265a4:	e5943028 	ldr	r3, [r4, #40]
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
            if (state->write == state->wsize) state->write = 0;
c7e265a8:	05846030 	streq	r6, [r4, #48]
            if (state->whave < state->wsize) state->whave += dist;
c7e265ac:	e1520003 	cmp	r2, r3
c7e265b0:	2a000007 	bcs	c7e265d4 <inflate+0x1694>
c7e265b4:	e0873002 	add	r3, r7, r2
c7e265b8:	e584302c 	str	r3, [r4, #44]
c7e265bc:	ea000004 	b	c7e265d4 <inflate+0x1694>
     */
  inf_leave:
    RESTORE();
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
c7e265c0:	e3a0301c 	mov	r3, #28	; 0x1c
c7e265c4:	e3e0c003 	mvn	ip, #3	; 0x3
c7e265c8:	e5853000 	str	r3, [r5]
c7e265cc:	e58dc040 	str	ip, [sp, #64]
c7e265d0:	ea000041 	b	c7e266dc <inflate+0x179c>
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
c7e265d4:	e59d100c 	ldr	r1, [sp, #12]
    out -= strm->avail_out;
c7e265d8:	e59dc03c 	ldr	ip, [sp, #60]
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
c7e265dc:	e5910004 	ldr	r0, [r1, #4]
    out -= strm->avail_out;
c7e265e0:	e5911010 	ldr	r1, [r1, #16]
    strm->total_in += in;
c7e265e4:	e59d200c 	ldr	r2, [sp, #12]
        if (updatewindow(strm, out)) {
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
    out -= strm->avail_out;
c7e265e8:	e061400c 	rsb	r4, r1, ip
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
c7e265ec:	e59d1044 	ldr	r1, [sp, #68]
    out -= strm->avail_out;
    strm->total_in += in;
c7e265f0:	e5923008 	ldr	r3, [r2, #8]
    strm->total_out += out;
c7e265f4:	e5922014 	ldr	r2, [r2, #20]
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
    out -= strm->avail_out;
    strm->total_in += in;
c7e265f8:	e59dc00c 	ldr	ip, [sp, #12]
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
c7e265fc:	e0606001 	rsb	r6, r0, r1
    out -= strm->avail_out;
    strm->total_in += in;
c7e26600:	e0833006 	add	r3, r3, r6
    strm->total_out += out;
c7e26604:	e0822004 	add	r2, r2, r4
c7e26608:	e58c2014 	str	r2, [ip, #20]
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
    out -= strm->avail_out;
    strm->total_in += in;
c7e2660c:	e58c3008 	str	r3, [ip, #8]
    strm->total_out += out;
    state->total += out;
c7e26610:	e595301c 	ldr	r3, [r5, #28]
    if (state->wrap && out)
c7e26614:	e5952008 	ldr	r2, [r5, #8]
        }
    in -= strm->avail_in;
    out -= strm->avail_out;
    strm->total_in += in;
    strm->total_out += out;
    state->total += out;
c7e26618:	e0833004 	add	r3, r3, r4
    if (state->wrap && out)
c7e2661c:	e3520000 	cmp	r2, #0	; 0x0
c7e26620:	13540000 	cmpne	r4, #0	; 0x0
        }
    in -= strm->avail_in;
    out -= strm->avail_out;
    strm->total_in += in;
    strm->total_out += out;
    state->total += out;
c7e26624:	e585301c 	str	r3, [r5, #28]
    if (state->wrap && out)
c7e26628:	0a000010 	beq	c7e26670 <inflate+0x1730>
        strm->adler = state->check =
c7e2662c:	e5953010 	ldr	r3, [r5, #16]
c7e26630:	e59c100c 	ldr	r1, [ip, #12]
c7e26634:	e3530000 	cmp	r3, #0	; 0x0
c7e26638:	e2643000 	rsb	r3, r4, #0	; 0x0
c7e2663c:	0a000004 	beq	c7e26654 <inflate+0x1714>
c7e26640:	e0811003 	add	r1, r1, r3
c7e26644:	e5950018 	ldr	r0, [r5, #24]
c7e26648:	e1a02004 	mov	r2, r4
c7e2664c:	ebffe9ac 	bl	c7e20d04 <crc32>
c7e26650:	ea000003 	b	c7e26664 <inflate+0x1724>
c7e26654:	e0811003 	add	r1, r1, r3
c7e26658:	e5950018 	ldr	r0, [r5, #24]
c7e2665c:	e1a02004 	mov	r2, r4
c7e26660:	ebfff963 	bl	c7e24bf4 <adler32>
c7e26664:	e59d100c 	ldr	r1, [sp, #12]
c7e26668:	e5850018 	str	r0, [r5, #24]
c7e2666c:	e5810034 	str	r0, [r1, #52]
            UPDATE(state->check, strm->next_out - out, out);
    strm->data_type = state->bits + (state->last ? 64 : 0) +
c7e26670:	e895000a 	ldm	r5, {r1, r3}
c7e26674:	e351000b 	cmp	r1, #11	; 0xb
c7e26678:	03a01080 	moveq	r1, #128	; 0x80
c7e2667c:	13a01000 	movne	r1, #0	; 0x0
c7e26680:	e3530000 	cmp	r3, #0	; 0x0
c7e26684:	e595003c 	ldr	r0, [r5, #60]
c7e26688:	13a03040 	movne	r3, #64	; 0x40
c7e2668c:	03a03000 	moveq	r3, #0	; 0x0
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
c7e26690:	e59dc008 	ldr	ip, [sp, #8]
c7e26694:	e1946006 	orrs	r6, r4, r6
c7e26698:	13a02000 	movne	r2, #0	; 0x0
c7e2669c:	03a02001 	moveq	r2, #1	; 0x1
    strm->total_out += out;
    state->total += out;
    if (state->wrap && out)
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
    strm->data_type = state->bits + (state->last ? 64 : 0) +
c7e266a0:	e0833000 	add	r3, r3, r0
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
c7e266a4:	e35c0004 	cmp	ip, #4	; 0x4
c7e266a8:	03822001 	orreq	r2, r2, #1	; 0x1
    strm->total_out += out;
    state->total += out;
    if (state->wrap && out)
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
    strm->data_type = state->bits + (state->last ? 64 : 0) +
c7e266ac:	e59d000c 	ldr	r0, [sp, #12]
c7e266b0:	e0833001 	add	r3, r3, r1
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
c7e266b4:	e3520000 	cmp	r2, #0	; 0x0
    strm->total_out += out;
    state->total += out;
    if (state->wrap && out)
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
    strm->data_type = state->bits + (state->last ? 64 : 0) +
c7e266b8:	e580302c 	str	r3, [r0, #44]
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
c7e266bc:	0a000006 	beq	c7e266dc <inflate+0x179c>
c7e266c0:	e59d1040 	ldr	r1, [sp, #64]
c7e266c4:	e3510000 	cmp	r1, #0	; 0x0
c7e266c8:	03e01004 	mvneq	r1, #4	; 0x4
c7e266cc:	e58d1040 	str	r1, [sp, #64]
c7e266d0:	ea000001 	b	c7e266dc <inflate+0x179c>
c7e266d4:	e3e02001 	mvn	r2, #1	; 0x1
c7e266d8:	e58d2040 	str	r2, [sp, #64]
        ret = Z_BUF_ERROR;
    return ret;
}
c7e266dc:	e59d0040 	ldr	r0, [sp, #64]
c7e266e0:	e28dd060 	add	sp, sp, #96	; 0x60
c7e266e4:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}

c7e266e8 <__fswab16>:
#  define __swab64(x) __fswab64(x)
#endif /* OPTIMIZE */


static __inline__ __attribute__((const)) __u16 __fswab16(__u16 x)
{
c7e266e8:	e1a03420 	lsr	r3, r0, #8
c7e266ec:	e1833400 	orr	r3, r3, r0, lsl #8
c7e266f0:	e1a03803 	lsl	r3, r3, #16
	return __arch__swab16(x);
}
c7e266f4:	e1a00823 	lsr	r0, r3, #16
c7e266f8:	e12fff1e 	bx	lr

c7e266fc <ArpInit>:
uchar		NetArpPacketBuf[PKTSIZE_ALIGN + PKTALIGN];

void ArpInit(void)
{
	/* XXX problem with bss workaround */
	NetArpWaitPacketMAC = NULL;
c7e266fc:	e59f3020 	ldr	r3, [pc, #32]	; c7e26724 <ArpInit+0x28>
c7e26700:	e3a01000 	mov	r1, #0	; 0x0
	NetArpWaitPacketIP = 0;
	NetArpWaitReplyIP = 0;
	NetArpWaitTxPacketSize = 0;
	NetArpTxPacket = &NetArpPacketBuf[0] + (PKTALIGN - 1);
	NetArpTxPacket -= (ulong)NetArpTxPacket % PKTALIGN;
c7e26704:	e2832053 	add	r2, r3, #83	; 0x53
c7e26708:	e3c2203f 	bic	r2, r2, #63	; 0x3f
c7e2670c:	e5832010 	str	r2, [r3, #16]
{
	/* XXX problem with bss workaround */
	NetArpWaitPacketMAC = NULL;
	NetArpWaitPacketIP = 0;
	NetArpWaitReplyIP = 0;
	NetArpWaitTxPacketSize = 0;
c7e26710:	e583100c 	str	r1, [r3, #12]
uchar		NetArpPacketBuf[PKTSIZE_ALIGN + PKTALIGN];

void ArpInit(void)
{
	/* XXX problem with bss workaround */
	NetArpWaitPacketMAC = NULL;
c7e26714:	e5831000 	str	r1, [r3]
	NetArpWaitPacketIP = 0;
c7e26718:	e5831004 	str	r1, [r3, #4]
	NetArpWaitReplyIP = 0;
c7e2671c:	e5831008 	str	r1, [r3, #8]
	NetArpWaitTxPacketSize = 0;
	NetArpTxPacket = &NetArpPacketBuf[0] + (PKTALIGN - 1);
	NetArpTxPacket -= (ulong)NetArpTxPacket % PKTALIGN;
}
c7e26720:	e12fff1e 	bx	lr
c7e26724:	c7e72320 	.word	0xc7e72320

c7e26728 <NetCopyIP>:
}

/* copy IP */
static inline void NetCopyIP(void *to, void *from)
{
	memcpy((void *)to, from, sizeof(IPaddr_t));
c7e26728:	e3a02004 	mov	r2, #4	; 0x4
c7e2672c:	eafff142 	b	c7e22c3c <memcpy>

c7e26730 <NetReadIP>:
 * We're using inline functions, which had the smallest memory
 * footprint in our tests.
 */
/* return IP *in network byteorder* */
static inline IPaddr_t NetReadIP(void *from)
{
c7e26730:	e92d4007 	push	{r0, r1, r2, lr}
c7e26734:	e1a01000 	mov	r1, r0
	IPaddr_t ip;

	memcpy((void *)&ip, (void *)from, sizeof(ip));
c7e26738:	e3a02004 	mov	r2, #4	; 0x4
c7e2673c:	e28d0004 	add	r0, sp, #4	; 0x4
c7e26740:	ebfff13d 	bl	c7e22c3c <memcpy>
	return ip;
}
c7e26744:	e59d0004 	ldr	r0, [sp, #4]
c7e26748:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e2674c <NetWriteIP>:
	return l;
}

/* write IP *in network byteorder* */
static inline void NetWriteIP(void *to, IPaddr_t ip)
{
c7e2674c:	e92d4007 	push	{r0, r1, r2, lr}
c7e26750:	e28d3008 	add	r3, sp, #8	; 0x8
c7e26754:	e5231004 	str	r1, [r3, #-4]!
	memcpy(to, (void *)&ip, sizeof(ip));
c7e26758:	e1a01003 	mov	r1, r3
c7e2675c:	e3a02004 	mov	r2, #4	; 0x4
c7e26760:	ebfff135 	bl	c7e22c3c <memcpy>
}
c7e26764:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e26768 <NetSendPacket>:
}

/* Transmit a packet */
static inline void NetSendPacket(uchar *pkt, int len)
{
	(void) eth_send(pkt, len);
c7e26768:	ea00027e 	b	c7e27168 <eth_send>

c7e2676c <ArpReceive>:
	 *   the server ethernet address
	 */
	debug_cond(DEBUG_NET_PKT, "Got ARP\n");

	arp = (struct arp_hdr *)ip;
	if (len < ARP_HDR_SIZE) {
c7e2676c:	e352001b 	cmp	r2, #27	; 0x1b
		}
	}
}

void ArpReceive(struct ethernet_hdr *et, struct ip_udp_hdr *ip, int len)
{
c7e26770:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e26774:	e1a06002 	mov	r6, r2
c7e26778:	e1a09000 	mov	r9, r0
c7e2677c:	e1a07001 	mov	r7, r1
	 *   the server ethernet address
	 */
	debug_cond(DEBUG_NET_PKT, "Got ARP\n");

	arp = (struct arp_hdr *)ip;
	if (len < ARP_HDR_SIZE) {
c7e26780:	ca000005 	bgt	c7e2679c <ArpReceive+0x30>
		printf("bad length %d < %d\n", len, ARP_HDR_SIZE);
c7e26784:	e59f01a0 	ldr	r0, [pc, #416]	; c7e2692c <ArpReceive+0x1c0>
c7e26788:	e1a01002 	mov	r1, r2
c7e2678c:	e3a0201c 	mov	r2, #28	; 0x1c
	default:
		debug("Unexpected ARP opcode 0x%x\n",
		      ntohs(arp->ar_op));
		return;
	}
}
c7e26790:	e28dd008 	add	sp, sp, #8	; 0x8
c7e26794:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
	 */
	debug_cond(DEBUG_NET_PKT, "Got ARP\n");

	arp = (struct arp_hdr *)ip;
	if (len < ARP_HDR_SIZE) {
		printf("bad length %d < %d\n", len, ARP_HDR_SIZE);
c7e26798:	eaff88ae 	b	c7e08a58 <printf>
		return;
	}
	if (ntohs(arp->ar_hrd) != ARP_ETHER)
c7e2679c:	e1d100b0 	ldrh	r0, [r1]
c7e267a0:	ebffffd0 	bl	c7e266e8 <__fswab16>
c7e267a4:	e3500001 	cmp	r0, #1	; 0x1
c7e267a8:	1a00005d 	bne	c7e26924 <ArpReceive+0x1b8>
		return;
	if (ntohs(arp->ar_pro) != PROT_IP)
c7e267ac:	e1d700b2 	ldrh	r0, [r7, #2]
c7e267b0:	ebffffcc 	bl	c7e266e8 <__fswab16>
c7e267b4:	e3500b02 	cmp	r0, #2048	; 0x800
c7e267b8:	1a000059 	bne	c7e26924 <ArpReceive+0x1b8>
		return;
	if (arp->ar_hln != ARP_HLEN)
c7e267bc:	e5d7a004 	ldrb	sl, [r7, #4]
c7e267c0:	e35a0006 	cmp	sl, #6	; 0x6
c7e267c4:	1a000056 	bne	c7e26924 <ArpReceive+0x1b8>
		return;
	if (arp->ar_pln != ARP_PLEN)
c7e267c8:	e5d73005 	ldrb	r3, [r7, #5]
c7e267cc:	e3530004 	cmp	r3, #4	; 0x4
c7e267d0:	1a000053 	bne	c7e26924 <ArpReceive+0x1b8>
		return;

	if (NetOurIP == 0)
c7e267d4:	e59f2154 	ldr	r2, [pc, #340]	; c7e26930 <ArpReceive+0x1c4>
c7e267d8:	e5923000 	ldr	r3, [r2]
c7e267dc:	e3530000 	cmp	r3, #0	; 0x0
c7e267e0:	0a00004f 	beq	c7e26924 <ArpReceive+0x1b8>
		return;

	if (NetReadIP(&arp->ar_tpa) != NetOurIP)
c7e267e4:	e287b018 	add	fp, r7, #24	; 0x18
c7e267e8:	e1a0000b 	mov	r0, fp
c7e267ec:	ebffffcf 	bl	c7e26730 <NetReadIP>
c7e267f0:	e59f2138 	ldr	r2, [pc, #312]	; c7e26930 <ArpReceive+0x1c4>
c7e267f4:	e5923000 	ldr	r3, [r2]
c7e267f8:	e1500003 	cmp	r0, r3
c7e267fc:	1a000048 	bne	c7e26924 <ArpReceive+0x1b8>
		return;

	switch (ntohs(arp->ar_op)) {
c7e26800:	e1d700b6 	ldrh	r0, [r7, #6]
c7e26804:	ebffffb7 	bl	c7e266e8 <__fswab16>
c7e26808:	e3500001 	cmp	r0, #1	; 0x1
c7e2680c:	0a000002 	beq	c7e2681c <ArpReceive+0xb0>
c7e26810:	e3500002 	cmp	r0, #2	; 0x2
c7e26814:	1a000042 	bne	c7e26924 <ArpReceive+0x1b8>
c7e26818:	ea00001b 	b	c7e2688c <ArpReceive+0x120>
	case ARPOP_REQUEST:
		/* reply with our IP address */
		debug_cond(DEBUG_DEV_PKT, "Got ARP REQUEST, return our IP\n");
		pkt = (uchar *)et;
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_ARP);
c7e2681c:	e2891006 	add	r1, r9, #6	; 0x6
c7e26820:	e59f210c 	ldr	r2, [pc, #268]	; c7e26934 <ArpReceive+0x1c8>
c7e26824:	e1a00009 	mov	r0, r9
c7e26828:	eb00058a 	bl	c7e27e58 <net_update_ether>
		pkt += eth_hdr_size;
		arp->ar_op = htons(ARPOP_REPLY);
		memcpy(&arp->ar_tha, &arp->ar_sha, ARP_HLEN);
c7e2682c:	e2874008 	add	r4, r7, #8	; 0x8
		/* reply with our IP address */
		debug_cond(DEBUG_DEV_PKT, "Got ARP REQUEST, return our IP\n");
		pkt = (uchar *)et;
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_ARP);
		pkt += eth_hdr_size;
		arp->ar_op = htons(ARPOP_REPLY);
c7e26830:	e3a03c02 	mov	r3, #512	; 0x200
c7e26834:	e1c730b6 	strh	r3, [r7, #6]
		memcpy(&arp->ar_tha, &arp->ar_sha, ARP_HLEN);
c7e26838:	e1a0200a 	mov	r2, sl
	switch (ntohs(arp->ar_op)) {
	case ARPOP_REQUEST:
		/* reply with our IP address */
		debug_cond(DEBUG_DEV_PKT, "Got ARP REQUEST, return our IP\n");
		pkt = (uchar *)et;
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_ARP);
c7e2683c:	e1a06000 	mov	r6, r0
		pkt += eth_hdr_size;
		arp->ar_op = htons(ARPOP_REPLY);
		memcpy(&arp->ar_tha, &arp->ar_sha, ARP_HLEN);
		NetCopyIP(&arp->ar_tpa, &arp->ar_spa);
c7e26840:	e287500e 	add	r5, r7, #14	; 0xe
		debug_cond(DEBUG_DEV_PKT, "Got ARP REQUEST, return our IP\n");
		pkt = (uchar *)et;
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_ARP);
		pkt += eth_hdr_size;
		arp->ar_op = htons(ARPOP_REPLY);
		memcpy(&arp->ar_tha, &arp->ar_sha, ARP_HLEN);
c7e26844:	e1a01004 	mov	r1, r4
c7e26848:	e2870012 	add	r0, r7, #18	; 0x12
c7e2684c:	ebfff0fa 	bl	c7e22c3c <memcpy>
		NetCopyIP(&arp->ar_tpa, &arp->ar_spa);
c7e26850:	e1a0000b 	mov	r0, fp
c7e26854:	e1a01005 	mov	r1, r5
c7e26858:	ebffffb2 	bl	c7e26728 <NetCopyIP>
		memcpy(&arp->ar_sha, NetOurEther, ARP_HLEN);
c7e2685c:	e1a0200a 	mov	r2, sl
c7e26860:	e1a00004 	mov	r0, r4
c7e26864:	e59f10cc 	ldr	r1, [pc, #204]	; c7e26938 <ArpReceive+0x1cc>
c7e26868:	ebfff0f3 	bl	c7e22c3c <memcpy>
		NetCopyIP(&arp->ar_spa, &NetOurIP);
c7e2686c:	e1a00005 	mov	r0, r5
c7e26870:	e59f10b8 	ldr	r1, [pc, #184]	; c7e26930 <ArpReceive+0x1c4>
c7e26874:	ebffffab 	bl	c7e26728 <NetCopyIP>
		 */
		if ((NetReadIP(&arp->ar_tpa) & NetOurSubnetMask) !=
		    (NetReadIP(&arp->ar_spa) & NetOurSubnetMask))
			udelay(5000);
#endif
		NetSendPacket((uchar *)et, eth_hdr_size + ARP_HDR_SIZE);
c7e26878:	e1a00009 	mov	r0, r9
c7e2687c:	e286101c 	add	r1, r6, #28	; 0x1c
	default:
		debug("Unexpected ARP opcode 0x%x\n",
		      ntohs(arp->ar_op));
		return;
	}
}
c7e26880:	e28dd008 	add	sp, sp, #8	; 0x8
c7e26884:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
		 */
		if ((NetReadIP(&arp->ar_tpa) & NetOurSubnetMask) !=
		    (NetReadIP(&arp->ar_spa) & NetOurSubnetMask))
			udelay(5000);
#endif
		NetSendPacket((uchar *)et, eth_hdr_size + ARP_HDR_SIZE);
c7e26888:	eaffffb6 	b	c7e26768 <NetSendPacket>
		return;

	case ARPOP_REPLY:		/* arp reply */
		/* are we waiting for a reply */
		if (!NetArpWaitPacketIP)
c7e2688c:	e59f30a8 	ldr	r3, [pc, #168]	; c7e2693c <ArpReceive+0x1d0>
c7e26890:	e5933004 	ldr	r3, [r3, #4]
c7e26894:	e3530000 	cmp	r3, #0	; 0x0
c7e26898:	0a000021 	beq	c7e26924 <ArpReceive+0x1b8>
			sprintf(buf, "%pM", &arp->ar_sha);
			setenv("serveraddr", buf);
		}
#endif

		reply_ip_addr = NetReadIP(&arp->ar_spa);
c7e2689c:	e287000e 	add	r0, r7, #14	; 0xe
c7e268a0:	ebffffa2 	bl	c7e26730 <NetReadIP>
c7e268a4:	e1a04000 	mov	r4, r0

		/* matched waiting packet's address */
		if (reply_ip_addr == NetArpWaitReplyIP) {
c7e268a8:	e59f008c 	ldr	r0, [pc, #140]	; c7e2693c <ArpReceive+0x1d0>
c7e268ac:	e5903008 	ldr	r3, [r0, #8]
c7e268b0:	e1540003 	cmp	r4, r3
c7e268b4:	1a00001a 	bne	c7e26924 <ArpReceive+0x1b8>
			debug_cond(DEBUG_DEV_PKT,
				"Got ARP REPLY, set eth addr (%pM)\n",
				arp->ar_data);

			/* save address for later use */
			if (NetArpWaitPacketMAC != NULL)
c7e268b8:	e5900000 	ldr	r0, [r0]
c7e268bc:	e3500000 	cmp	r0, #0	; 0x0
c7e268c0:	0a000002 	beq	c7e268d0 <ArpReceive+0x164>
				memcpy(NetArpWaitPacketMAC,
c7e268c4:	e2871008 	add	r1, r7, #8	; 0x8
c7e268c8:	e3a02006 	mov	r2, #6	; 0x6
c7e268cc:	ebfff0da 	bl	c7e22c3c <memcpy>
				       &arp->ar_sha, ARP_HLEN);

			net_get_arp_handler()((uchar *)arp, 0, reply_ip_addr,
c7e268d0:	eb000464 	bl	c7e27a68 <net_get_arp_handler>
				0, len);

			/* set the mac address in the waiting packet's header
			   and transmit it */
			memcpy(((struct ethernet_hdr *)NetTxPacket)->et_dest,
c7e268d4:	e59f5064 	ldr	r5, [pc, #100]	; c7e26940 <ArpReceive+0x1d4>
			/* save address for later use */
			if (NetArpWaitPacketMAC != NULL)
				memcpy(NetArpWaitPacketMAC,
				       &arp->ar_sha, ARP_HLEN);

			net_get_arp_handler()((uchar *)arp, 0, reply_ip_addr,
c7e268d8:	e3a01000 	mov	r1, #0	; 0x0
c7e268dc:	e1a03001 	mov	r3, r1
c7e268e0:	e1a0c000 	mov	ip, r0
c7e268e4:	e1a02004 	mov	r2, r4
c7e268e8:	e1a00007 	mov	r0, r7

			/* set the mac address in the waiting packet's header
			   and transmit it */
			memcpy(((struct ethernet_hdr *)NetTxPacket)->et_dest,
				&arp->ar_sha, ARP_HLEN);
			NetSendPacket(NetTxPacket, NetArpWaitTxPacketSize);
c7e268ec:	e59f4048 	ldr	r4, [pc, #72]	; c7e2693c <ArpReceive+0x1d0>
			/* save address for later use */
			if (NetArpWaitPacketMAC != NULL)
				memcpy(NetArpWaitPacketMAC,
				       &arp->ar_sha, ARP_HLEN);

			net_get_arp_handler()((uchar *)arp, 0, reply_ip_addr,
c7e268f0:	e58d6000 	str	r6, [sp]
c7e268f4:	e12fff3c 	blx	ip
				0, len);

			/* set the mac address in the waiting packet's header
			   and transmit it */
			memcpy(((struct ethernet_hdr *)NetTxPacket)->et_dest,
c7e268f8:	e2871008 	add	r1, r7, #8	; 0x8
c7e268fc:	e3a02006 	mov	r2, #6	; 0x6
c7e26900:	e5950000 	ldr	r0, [r5]
c7e26904:	ebfff0cc 	bl	c7e22c3c <memcpy>
				&arp->ar_sha, ARP_HLEN);
			NetSendPacket(NetTxPacket, NetArpWaitTxPacketSize);
c7e26908:	e5950000 	ldr	r0, [r5]
c7e2690c:	e594100c 	ldr	r1, [r4, #12]
c7e26910:	ebffff94 	bl	c7e26768 <NetSendPacket>

			/* no arp request pending now */
			NetArpWaitPacketIP = 0;
c7e26914:	e3a03000 	mov	r3, #0	; 0x0
			NetArpWaitTxPacketSize = 0;
			NetArpWaitPacketMAC = NULL;
c7e26918:	e5843000 	str	r3, [r4]
			memcpy(((struct ethernet_hdr *)NetTxPacket)->et_dest,
				&arp->ar_sha, ARP_HLEN);
			NetSendPacket(NetTxPacket, NetArpWaitTxPacketSize);

			/* no arp request pending now */
			NetArpWaitPacketIP = 0;
c7e2691c:	e5843004 	str	r3, [r4, #4]
			NetArpWaitTxPacketSize = 0;
c7e26920:	e584300c 	str	r3, [r4, #12]
	default:
		debug("Unexpected ARP opcode 0x%x\n",
		      ntohs(arp->ar_op));
		return;
	}
}
c7e26924:	e28dd008 	add	sp, sp, #8	; 0x8
c7e26928:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e2692c:	c7e34a83 	.word	0xc7e34a83
c7e26930:	c7e729b8 	.word	0xc7e729b8
c7e26934:	00000806 	.word	0x00000806
c7e26938:	c7e729bc 	.word	0xc7e729bc
c7e2693c:	c7e72320 	.word	0xc7e72320
c7e26940:	c7e729cc 	.word	0xc7e729cc

c7e26944 <arp_raw_request>:
	NetArpTxPacket -= (ulong)NetArpTxPacket % PKTALIGN;
}

void arp_raw_request(IPaddr_t sourceIP, const uchar *targetEther,
	IPaddr_t targetIP)
{
c7e26944:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	struct arp_hdr *arp;
	int eth_hdr_size;

	debug_cond(DEBUG_DEV_PKT, "ARP broadcast %d\n", NetArpWaitTry);

	pkt = NetArpTxPacket;
c7e26948:	e59fa094 	ldr	sl, [pc, #148]	; c7e269e4 <arp_raw_request+0xa0>
	NetArpTxPacket -= (ulong)NetArpTxPacket % PKTALIGN;
}

void arp_raw_request(IPaddr_t sourceIP, const uchar *targetEther,
	IPaddr_t targetIP)
{
c7e2694c:	e1a09000 	mov	r9, r0
	struct arp_hdr *arp;
	int eth_hdr_size;

	debug_cond(DEBUG_DEV_PKT, "ARP broadcast %d\n", NetArpWaitTry);

	pkt = NetArpTxPacket;
c7e26950:	e59a5010 	ldr	r5, [sl, #16]
	NetArpTxPacket -= (ulong)NetArpTxPacket % PKTALIGN;
}

void arp_raw_request(IPaddr_t sourceIP, const uchar *targetEther,
	IPaddr_t targetIP)
{
c7e26954:	e1a0b001 	mov	fp, r1
c7e26958:	e58d2004 	str	r2, [sp, #4]

	debug_cond(DEBUG_DEV_PKT, "ARP broadcast %d\n", NetArpWaitTry);

	pkt = NetArpTxPacket;

	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_ARP);
c7e2695c:	e59f1084 	ldr	r1, [pc, #132]	; c7e269e8 <arp_raw_request+0xa4>
c7e26960:	e59f2084 	ldr	r2, [pc, #132]	; c7e269ec <arp_raw_request+0xa8>
c7e26964:	e1a00005 	mov	r0, r5
c7e26968:	eb00055e 	bl	c7e27ee8 <NetSetEther>
	arp = (struct arp_hdr *) pkt;

	arp->ar_hrd = htons(ARP_ETHER);
	arp->ar_pro = htons(PROT_IP);
	arp->ar_hln = ARP_HLEN;
	arp->ar_pln = ARP_PLEN;
c7e2696c:	e3a03004 	mov	r3, #4	; 0x4
	pkt = NetArpTxPacket;

	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_ARP);
	pkt += eth_hdr_size;

	arp = (struct arp_hdr *) pkt;
c7e26970:	e0854000 	add	r4, r5, r0

	arp->ar_hrd = htons(ARP_ETHER);
	arp->ar_pro = htons(PROT_IP);
	arp->ar_hln = ARP_HLEN;
c7e26974:	e3a06006 	mov	r6, #6	; 0x6
	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_ARP);
	pkt += eth_hdr_size;

	arp = (struct arp_hdr *) pkt;

	arp->ar_hrd = htons(ARP_ETHER);
c7e26978:	e3a02c01 	mov	r2, #256	; 0x100
	arp->ar_pro = htons(PROT_IP);
	arp->ar_hln = ARP_HLEN;
	arp->ar_pln = ARP_PLEN;
c7e2697c:	e5c43005 	strb	r3, [r4, #5]
	pkt += eth_hdr_size;

	arp = (struct arp_hdr *) pkt;

	arp->ar_hrd = htons(ARP_ETHER);
	arp->ar_pro = htons(PROT_IP);
c7e26980:	e3a03008 	mov	r3, #8	; 0x8
c7e26984:	e1c430b2 	strh	r3, [r4, #2]
	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_ARP);
	pkt += eth_hdr_size;

	arp = (struct arp_hdr *) pkt;

	arp->ar_hrd = htons(ARP_ETHER);
c7e26988:	e18520b0 	strh	r2, [r5, r0]

	debug_cond(DEBUG_DEV_PKT, "ARP broadcast %d\n", NetArpWaitTry);

	pkt = NetArpTxPacket;

	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_ARP);
c7e2698c:	e1a07000 	mov	r7, r0

	arp->ar_hrd = htons(ARP_ETHER);
	arp->ar_pro = htons(PROT_IP);
	arp->ar_hln = ARP_HLEN;
	arp->ar_pln = ARP_PLEN;
	arp->ar_op = htons(ARPOP_REQUEST);
c7e26990:	e1c420b6 	strh	r2, [r4, #6]

	arp = (struct arp_hdr *) pkt;

	arp->ar_hrd = htons(ARP_ETHER);
	arp->ar_pro = htons(PROT_IP);
	arp->ar_hln = ARP_HLEN;
c7e26994:	e5c46004 	strb	r6, [r4, #4]
	arp->ar_pln = ARP_PLEN;
	arp->ar_op = htons(ARPOP_REQUEST);

	memcpy(&arp->ar_sha, NetOurEther, ARP_HLEN);	/* source ET addr */
c7e26998:	e1a02006 	mov	r2, r6
c7e2699c:	e59f104c 	ldr	r1, [pc, #76]	; c7e269f0 <arp_raw_request+0xac>
c7e269a0:	e2840008 	add	r0, r4, #8	; 0x8
c7e269a4:	ebfff0a4 	bl	c7e22c3c <memcpy>
	NetWriteIP(&arp->ar_spa, sourceIP);		/* source IP addr */
c7e269a8:	e1a01009 	mov	r1, r9
c7e269ac:	e284000e 	add	r0, r4, #14	; 0xe
c7e269b0:	ebffff65 	bl	c7e2674c <NetWriteIP>
	memcpy(&arp->ar_tha, targetEther, ARP_HLEN);	/* target ET addr */
c7e269b4:	e1a0100b 	mov	r1, fp
c7e269b8:	e1a02006 	mov	r2, r6
c7e269bc:	e2840012 	add	r0, r4, #18	; 0x12
c7e269c0:	ebfff09d 	bl	c7e22c3c <memcpy>
	NetWriteIP(&arp->ar_tpa, targetIP);		/* target IP addr */
c7e269c4:	e2840018 	add	r0, r4, #24	; 0x18
c7e269c8:	e59d1004 	ldr	r1, [sp, #4]
c7e269cc:	ebffff5e 	bl	c7e2674c <NetWriteIP>

	NetSendPacket(NetArpTxPacket, eth_hdr_size + ARP_HDR_SIZE);
c7e269d0:	e59a0010 	ldr	r0, [sl, #16]
c7e269d4:	e287101c 	add	r1, r7, #28	; 0x1c
}
c7e269d8:	e28dd008 	add	sp, sp, #8	; 0x8
c7e269dc:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
	memcpy(&arp->ar_sha, NetOurEther, ARP_HLEN);	/* source ET addr */
	NetWriteIP(&arp->ar_spa, sourceIP);		/* source IP addr */
	memcpy(&arp->ar_tha, targetEther, ARP_HLEN);	/* target ET addr */
	NetWriteIP(&arp->ar_tpa, targetIP);		/* target IP addr */

	NetSendPacket(NetArpTxPacket, eth_hdr_size + ARP_HDR_SIZE);
c7e269e0:	eaffff60 	b	c7e26768 <NetSendPacket>
c7e269e4:	c7e72320 	.word	0xc7e72320
c7e269e8:	c7e3a4d0 	.word	0xc7e3a4d0
c7e269ec:	00000806 	.word	0x00000806
c7e269f0:	c7e729bc 	.word	0xc7e729bc

c7e269f4 <ArpRequest>:
}

void ArpRequest(void)
{
	if ((NetArpWaitPacketIP & NetOurSubnetMask) !=
c7e269f4:	e59f3060 	ldr	r3, [pc, #96]	; c7e26a5c <ArpRequest+0x68>

	NetSendPacket(NetArpTxPacket, eth_hdr_size + ARP_HDR_SIZE);
}

void ArpRequest(void)
{
c7e269f8:	e92d4010 	push	{r4, lr}
	if ((NetArpWaitPacketIP & NetOurSubnetMask) !=
c7e269fc:	e59f405c 	ldr	r4, [pc, #92]	; c7e26a60 <ArpRequest+0x6c>
c7e26a00:	e5932000 	ldr	r2, [r3]
c7e26a04:	e59f3058 	ldr	r3, [pc, #88]	; c7e26a64 <ArpRequest+0x70>
c7e26a08:	e5941004 	ldr	r1, [r4, #4]
c7e26a0c:	e5933000 	ldr	r3, [r3]
c7e26a10:	e0212002 	eor	r2, r1, r2
c7e26a14:	e1120003 	tst	r2, r3
			NetArpWaitReplyIP = NetArpWaitPacketIP;
		} else {
			NetArpWaitReplyIP = NetOurGatewayIP;
		}
	} else {
		NetArpWaitReplyIP = NetArpWaitPacketIP;
c7e26a18:	05841008 	streq	r1, [r4, #8]
	NetSendPacket(NetArpTxPacket, eth_hdr_size + ARP_HDR_SIZE);
}

void ArpRequest(void)
{
	if ((NetArpWaitPacketIP & NetOurSubnetMask) !=
c7e26a1c:	0a000007 	beq	c7e26a40 <ArpRequest+0x4c>
	    (NetOurIP & NetOurSubnetMask)) {
		if (NetOurGatewayIP == 0) {
c7e26a20:	e59f3040 	ldr	r3, [pc, #64]	; c7e26a68 <ArpRequest+0x74>
c7e26a24:	e5933000 	ldr	r3, [r3]
c7e26a28:	e3530000 	cmp	r3, #0	; 0x0
c7e26a2c:	1a000002 	bne	c7e26a3c <ArpRequest+0x48>
			puts("## Warning: gatewayip needed but not set\n");
c7e26a30:	e59f0034 	ldr	r0, [pc, #52]	; c7e26a6c <ArpRequest+0x78>
c7e26a34:	ebff87ec 	bl	c7e089ec <puts>
			NetArpWaitReplyIP = NetArpWaitPacketIP;
c7e26a38:	e5943004 	ldr	r3, [r4, #4]
		} else {
			NetArpWaitReplyIP = NetOurGatewayIP;
c7e26a3c:	e5843008 	str	r3, [r4, #8]
		}
	} else {
		NetArpWaitReplyIP = NetArpWaitPacketIP;
	}

	arp_raw_request(NetOurIP, NetEtherNullAddr, NetArpWaitReplyIP);
c7e26a40:	e59f3014 	ldr	r3, [pc, #20]	; c7e26a5c <ArpRequest+0x68>
c7e26a44:	e59f1024 	ldr	r1, [pc, #36]	; c7e26a70 <ArpRequest+0x7c>
c7e26a48:	e5930000 	ldr	r0, [r3]
c7e26a4c:	e59f300c 	ldr	r3, [pc, #12]	; c7e26a60 <ArpRequest+0x6c>
c7e26a50:	e5932008 	ldr	r2, [r3, #8]
}
c7e26a54:	e8bd4010 	pop	{r4, lr}
		}
	} else {
		NetArpWaitReplyIP = NetArpWaitPacketIP;
	}

	arp_raw_request(NetOurIP, NetEtherNullAddr, NetArpWaitReplyIP);
c7e26a58:	eaffffb9 	b	c7e26944 <arp_raw_request>
c7e26a5c:	c7e729b8 	.word	0xc7e729b8
c7e26a60:	c7e72320 	.word	0xc7e72320
c7e26a64:	c7e729f0 	.word	0xc7e729f0
c7e26a68:	c7e729ec 	.word	0xc7e729ec
c7e26a6c:	c7e34a97 	.word	0xc7e34a97
c7e26a70:	c7e729d0 	.word	0xc7e729d0

c7e26a74 <ArpTimeoutCheck>:
}

void ArpTimeoutCheck(void)
{
c7e26a74:	e92d4010 	push	{r4, lr}
	ulong t;

	if (!NetArpWaitPacketIP)
c7e26a78:	e59f405c 	ldr	r4, [pc, #92]	; c7e26adc <ArpTimeoutCheck+0x68>
c7e26a7c:	e5943004 	ldr	r3, [r4, #4]
c7e26a80:	e3530000 	cmp	r3, #0	; 0x0
c7e26a84:	08bd8010 	popeq	{r4, pc}
		return;

	t = get_timer(0);
c7e26a88:	e3a00000 	mov	r0, #0	; 0x0
c7e26a8c:	ebff67db 	bl	c7e00a00 <get_timer>

	/* check for arp timeout */
	if ((t - NetArpWaitTimerStart) > ARP_TIMEOUT) {
c7e26a90:	e5943654 	ldr	r3, [r4, #1620]
c7e26a94:	e59f2044 	ldr	r2, [pc, #68]	; c7e26ae0 <ArpTimeoutCheck+0x6c>
c7e26a98:	e0633000 	rsb	r3, r3, r0
c7e26a9c:	e1530002 	cmp	r3, r2
c7e26aa0:	98bd8010 	popls	{r4, pc}
		NetArpWaitTry++;
c7e26aa4:	e5943658 	ldr	r3, [r4, #1624]
c7e26aa8:	e2833001 	add	r3, r3, #1	; 0x1

		if (NetArpWaitTry >= ARP_TIMEOUT_COUNT) {
c7e26aac:	e3530004 	cmp	r3, #4	; 0x4

	t = get_timer(0);

	/* check for arp timeout */
	if ((t - NetArpWaitTimerStart) > ARP_TIMEOUT) {
		NetArpWaitTry++;
c7e26ab0:	e5843658 	str	r3, [r4, #1624]

		if (NetArpWaitTry >= ARP_TIMEOUT_COUNT) {
c7e26ab4:	da000005 	ble	c7e26ad0 <ArpTimeoutCheck+0x5c>
			puts("\nARP Retry count exceeded; starting again\n");
c7e26ab8:	e59f0024 	ldr	r0, [pc, #36]	; c7e26ae4 <ArpTimeoutCheck+0x70>
c7e26abc:	ebff87ca 	bl	c7e089ec <puts>
			NetArpWaitTry = 0;
c7e26ac0:	e3a03000 	mov	r3, #0	; 0x0
c7e26ac4:	e5843658 	str	r3, [r4, #1624]
		} else {
			NetArpWaitTimerStart = t;
			ArpRequest();
		}
	}
}
c7e26ac8:	e8bd4010 	pop	{r4, lr}
		NetArpWaitTry++;

		if (NetArpWaitTry >= ARP_TIMEOUT_COUNT) {
			puts("\nARP Retry count exceeded; starting again\n");
			NetArpWaitTry = 0;
			NetStartAgain();
c7e26acc:	ea000617 	b	c7e28330 <NetStartAgain>
		} else {
			NetArpWaitTimerStart = t;
c7e26ad0:	e5840654 	str	r0, [r4, #1620]
			ArpRequest();
		}
	}
}
c7e26ad4:	e8bd4010 	pop	{r4, lr}
			puts("\nARP Retry count exceeded; starting again\n");
			NetArpWaitTry = 0;
			NetStartAgain();
		} else {
			NetArpWaitTimerStart = t;
			ArpRequest();
c7e26ad8:	eaffffc5 	b	c7e269f4 <ArpRequest>
c7e26adc:	c7e72320 	.word	0xc7e72320
c7e26ae0:	00001388 	.word	0x00001388
c7e26ae4:	c7e34ac1 	.word	0xc7e34ac1

c7e26ae8 <__fswab16>:
#  define __swab64(x) __fswab64(x)
#endif /* OPTIMIZE */


static __inline__ __attribute__((const)) __u16 __fswab16(__u16 x)
{
c7e26ae8:	e1a03420 	lsr	r3, r0, #8
c7e26aec:	e1833400 	orr	r3, r3, r0, lsl #8
c7e26af0:	e1a03803 	lsl	r3, r3, #16
	return __arch__swab16(x);
}
c7e26af4:	e1a00823 	lsr	r0, r3, #16
c7e26af8:	e12fff1e 	bx	lr

c7e26afc <__fswab32>:
{
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
c7e26afc:	e1a03000 	mov	r3, r0
c7e26b00:	e1a00c00 	lsl	r0, r0, #24
c7e26b04:	e2032cff 	and	r2, r3, #65280	; 0xff00
c7e26b08:	e1800c23 	orr	r0, r0, r3, lsr #24
c7e26b0c:	e1800402 	orr	r0, r0, r2, lsl #8
c7e26b10:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
	return __arch__swab32(x);
}
c7e26b14:	e1800423 	orr	r0, r0, r3, lsr #8
c7e26b18:	e12fff1e 	bx	lr

c7e26b1c <truncate_sz>:
		setenv("bootfile", BootFile);
}

static int truncate_sz(const char *name, int maxlen, int curlen)
{
	if (curlen >= maxlen) {
c7e26b1c:	e1520001 	cmp	r2, r1
	if (*BootFile)
		setenv("bootfile", BootFile);
}

static int truncate_sz(const char *name, int maxlen, int curlen)
{
c7e26b20:	e92d4010 	push	{r4, lr}
c7e26b24:	e1a03002 	mov	r3, r2
c7e26b28:	e1a04001 	mov	r4, r1
	if (curlen >= maxlen) {
c7e26b2c:	ba000004 	blt	c7e26b44 <truncate_sz+0x28>
		printf("*** WARNING: %s is too long (%d - max: %d)"
c7e26b30:	e1a01000 	mov	r1, r0
c7e26b34:	e1a03004 	mov	r3, r4
c7e26b38:	e59f000c 	ldr	r0, [pc, #12]	; c7e26b4c <truncate_sz+0x30>
c7e26b3c:	ebff87c5 	bl	c7e08a58 <printf>
			" - truncated\n", name, curlen, maxlen);
		curlen = maxlen - 1;
c7e26b40:	e2443001 	sub	r3, r4, #1	; 0x1
	}
	return curlen;
}
c7e26b44:	e1a00003 	mov	r0, r3
c7e26b48:	e8bd8010 	pop	{r4, pc}
c7e26b4c:	c7e34aec 	.word	0xc7e34aec

c7e26b50 <NetWriteIP>:
	return l;
}

/* write IP *in network byteorder* */
static inline void NetWriteIP(void *to, IPaddr_t ip)
{
c7e26b50:	e92d4007 	push	{r0, r1, r2, lr}
c7e26b54:	e28d3008 	add	r3, sp, #8	; 0x8
c7e26b58:	e5231004 	str	r1, [r3, #-4]!
	memcpy(to, (void *)&ip, sizeof(ip));
c7e26b5c:	e1a01003 	mov	r1, r3
c7e26b60:	e3a02004 	mov	r2, #4	; 0x4
c7e26b64:	ebfff034 	bl	c7e22c3c <memcpy>
}
c7e26b68:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e26b6c <NetCopyIP>:

/* copy IP */
static inline void NetCopyIP(void *to, void *from)
{
	memcpy((void *)to, from, sizeof(IPaddr_t));
c7e26b6c:	e3a02004 	mov	r2, #4	; 0x4
c7e26b70:	eafff031 	b	c7e22c3c <memcpy>

c7e26b74 <NetReadLong>:
	return ip;
}

/* return ulong *in network byteorder* */
static inline ulong NetReadLong(ulong *from)
{
c7e26b74:	e92d4007 	push	{r0, r1, r2, lr}
c7e26b78:	e1a01000 	mov	r1, r0
	ulong l;

	memcpy((void *)&l, (void *)from, sizeof(l));
c7e26b7c:	e3a02004 	mov	r2, #4	; 0x4
c7e26b80:	e28d0004 	add	r0, sp, #4	; 0x4
c7e26b84:	ebfff02c 	bl	c7e22c3c <memcpy>
	return l;
}
c7e26b88:	e59d0004 	ldr	r0, [sp, #4]
c7e26b8c:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e26b90 <BootpRequest>:
}
#endif

void
BootpRequest(void)
{
c7e26b90:	e92d4eff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	for (i = 0; i < rand_ms; i++)
		udelay(1000); /*Wait 1ms*/

#endif	/* CONFIG_BOOTP_RANDOM_DELAY */

	printf("BOOTP broadcast %d\n", ++BootpTry);
c7e26b94:	e59f919c 	ldr	r9, [pc, #412]	; c7e26d38 <BootpRequest+0x1a8>
c7e26b98:	e59f019c 	ldr	r0, [pc, #412]	; c7e26d3c <BootpRequest+0x1ac>
c7e26b9c:	e5993000 	ldr	r3, [r9]

	bp = (struct Bootp_t *)pkt;
	bp->bp_op = OP_BOOTREQUEST;
	bp->bp_htype = HWT_ETHER;
	bp->bp_hlen = HWL_ETHER;
	bp->bp_hops = 0;
c7e26ba0:	e3a07000 	mov	r7, #0	; 0x0
	for (i = 0; i < rand_ms; i++)
		udelay(1000); /*Wait 1ms*/

#endif	/* CONFIG_BOOTP_RANDOM_DELAY */

	printf("BOOTP broadcast %d\n", ++BootpTry);
c7e26ba4:	e2833001 	add	r3, r3, #1	; 0x1
c7e26ba8:	e1a01003 	mov	r1, r3
c7e26bac:	e5893000 	str	r3, [r9]
c7e26bb0:	ebff87a8 	bl	c7e08a58 <printf>
	pkt = NetTxPacket;
c7e26bb4:	e59f3184 	ldr	r3, [pc, #388]	; c7e26d40 <BootpRequest+0x1b0>
	memset((void *)pkt, 0, PKTSIZE);
c7e26bb8:	e3a01000 	mov	r1, #0	; 0x0
		udelay(1000); /*Wait 1ms*/

#endif	/* CONFIG_BOOTP_RANDOM_DELAY */

	printf("BOOTP broadcast %d\n", ++BootpTry);
	pkt = NetTxPacket;
c7e26bbc:	e5935000 	ldr	r5, [r3]
	memset((void *)pkt, 0, PKTSIZE);
c7e26bc0:	e59f217c 	ldr	r2, [pc, #380]	; c7e26d44 <BootpRequest+0x1b4>
c7e26bc4:	e1a00005 	mov	r0, r5
c7e26bc8:	ebffeff1 	bl	c7e22b94 <memset>

	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_IP);
c7e26bcc:	e3a02b02 	mov	r2, #2048	; 0x800
c7e26bd0:	e59f1170 	ldr	r1, [pc, #368]	; c7e26d48 <BootpRequest+0x1b8>
c7e26bd4:	e1a00005 	mov	r0, r5
c7e26bd8:	eb0004c2 	bl	c7e27ee8 <NetSetEther>
	pkt += eth_hdr_size;
c7e26bdc:	e0855000 	add	r5, r5, r0
		sizeof (struct Bootp_t)); */
	iphdr = pkt;	/* We need this later for net_set_udp_header() */
	pkt += IP_UDP_HDR_SIZE;

	bp = (struct Bootp_t *)pkt;
	bp->bp_op = OP_BOOTREQUEST;
c7e26be0:	e3a03001 	mov	r3, #1	; 0x1
	/* net_set_udp_header(pkt, 0xFFFFFFFFL, PORT_BOOTPS, PORT_BOOTPC,
		sizeof (struct Bootp_t)); */
	iphdr = pkt;	/* We need this later for net_set_udp_header() */
	pkt += IP_UDP_HDR_SIZE;

	bp = (struct Bootp_t *)pkt;
c7e26be4:	e285601c 	add	r6, r5, #28	; 0x1c
	bp->bp_op = OP_BOOTREQUEST;
	bp->bp_htype = HWT_ETHER;
	bp->bp_hlen = HWL_ETHER;
c7e26be8:	e3a04006 	mov	r4, #6	; 0x6

	printf("BOOTP broadcast %d\n", ++BootpTry);
	pkt = NetTxPacket;
	memset((void *)pkt, 0, PKTSIZE);

	eth_hdr_size = NetSetEther(pkt, NetBcastAddr, PROT_IP);
c7e26bec:	e58d000c 	str	r0, [sp, #12]
	iphdr = pkt;	/* We need this later for net_set_udp_header() */
	pkt += IP_UDP_HDR_SIZE;

	bp = (struct Bootp_t *)pkt;
	bp->bp_op = OP_BOOTREQUEST;
	bp->bp_htype = HWT_ETHER;
c7e26bf0:	e5c63001 	strb	r3, [r6, #1]
		sizeof (struct Bootp_t)); */
	iphdr = pkt;	/* We need this later for net_set_udp_header() */
	pkt += IP_UDP_HDR_SIZE;

	bp = (struct Bootp_t *)pkt;
	bp->bp_op = OP_BOOTREQUEST;
c7e26bf4:	e5c5301c 	strb	r3, [r5, #28]
	bp->bp_htype = HWT_ETHER;
	bp->bp_hlen = HWL_ETHER;
c7e26bf8:	e5c64002 	strb	r4, [r6, #2]
	bp->bp_hops = 0;
c7e26bfc:	e5c67003 	strb	r7, [r6, #3]
	bp->bp_secs = htons(get_timer(0) / 1000);
c7e26c00:	e1a00007 	mov	r0, r7
c7e26c04:	ebff677d 	bl	c7e00a00 <get_timer>
c7e26c08:	e3a01ffa 	mov	r1, #1000	; 0x3e8
c7e26c0c:	eb000e3d 	bl	c7e2a508 <__udivsi3>
c7e26c10:	e1a00800 	lsl	r0, r0, #16
c7e26c14:	e1a00820 	lsr	r0, r0, #16
c7e26c18:	ebffffb2 	bl	c7e26ae8 <__fswab16>
	NetWriteIP(&bp->bp_ciaddr, 0);
c7e26c1c:	e1a01007 	mov	r1, r7
	bp = (struct Bootp_t *)pkt;
	bp->bp_op = OP_BOOTREQUEST;
	bp->bp_htype = HWT_ETHER;
	bp->bp_hlen = HWL_ETHER;
	bp->bp_hops = 0;
	bp->bp_secs = htons(get_timer(0) / 1000);
c7e26c20:	e1c600b8 	strh	r0, [r6, #8]
	NetWriteIP(&bp->bp_ciaddr, 0);
c7e26c24:	e2850028 	add	r0, r5, #40	; 0x28
c7e26c28:	ebffffc8 	bl	c7e26b50 <NetWriteIP>
	NetWriteIP(&bp->bp_yiaddr, 0);
c7e26c2c:	e285002c 	add	r0, r5, #44	; 0x2c
c7e26c30:	e1a01007 	mov	r1, r7
c7e26c34:	ebffffc5 	bl	c7e26b50 <NetWriteIP>
	NetWriteIP(&bp->bp_siaddr, 0);
	NetWriteIP(&bp->bp_giaddr, 0);
	memcpy(bp->bp_chaddr, NetOurEther, 6);
c7e26c38:	e59fa10c 	ldr	sl, [pc, #268]	; c7e26d4c <BootpRequest+0x1bc>
	bp->bp_hlen = HWL_ETHER;
	bp->bp_hops = 0;
	bp->bp_secs = htons(get_timer(0) / 1000);
	NetWriteIP(&bp->bp_ciaddr, 0);
	NetWriteIP(&bp->bp_yiaddr, 0);
	NetWriteIP(&bp->bp_siaddr, 0);
c7e26c3c:	e2850030 	add	r0, r5, #48	; 0x30
c7e26c40:	e1a01007 	mov	r1, r7
c7e26c44:	ebffffc1 	bl	c7e26b50 <NetWriteIP>
	NetWriteIP(&bp->bp_giaddr, 0);
c7e26c48:	e2850034 	add	r0, r5, #52	; 0x34
c7e26c4c:	e1a01007 	mov	r1, r7
c7e26c50:	ebffffbe 	bl	c7e26b50 <NetWriteIP>
	memcpy(bp->bp_chaddr, NetOurEther, 6);
c7e26c54:	e1a02004 	mov	r2, r4
c7e26c58:	e1a0100a 	mov	r1, sl
c7e26c5c:	e2850038 	add	r0, r5, #56	; 0x38
c7e26c60:	ebffeff5 	bl	c7e22c3c <memcpy>
	copy_filename(bp->bp_file, BootFile, sizeof(bp->bp_file));
c7e26c64:	e59f10e4 	ldr	r1, [pc, #228]	; c7e26d50 <BootpRequest+0x1c0>
c7e26c68:	e2850088 	add	r0, r5, #136	; 0x88
c7e26c6c:	e3a02080 	mov	r2, #128	; 0x80
c7e26c70:	eb0003a3 	bl	c7e27b04 <copy_filename>
 */
static int BootpExtended(u8 *e)
{
	u8 *start = e;

	*e++ = 99;		/* RFC1048 Magic Cookie */
c7e26c74:	e3a02063 	mov	r2, #99	; 0x63
	*e++ = 130;
c7e26c78:	e3e0307d 	mvn	r3, #125	; 0x7d
 */
static int BootpExtended(u8 *e)
{
	u8 *start = e;

	*e++ = 99;		/* RFC1048 Magic Cookie */
c7e26c7c:	e5c620ec 	strb	r2, [r6, #236]
	*e++ = 42;
	*e++ = 4;
	e   += 4;
#endif

	*e++ = 255;		/* End of the list */
c7e26c80:	e3e0b000 	mvn	fp, #0	; 0x0
static int BootpExtended(u8 *e)
{
	u8 *start = e;

	*e++ = 99;		/* RFC1048 Magic Cookie */
	*e++ = 130;
c7e26c84:	e5c53109 	strb	r3, [r5, #265]
	*e++ = 83;
c7e26c88:	e28330d1 	add	r3, r3, #209	; 0xd1
c7e26c8c:	e5c5310a 	strb	r3, [r5, #266]
	*e++ = 99;
c7e26c90:	e5c5210b 	strb	r2, [r5, #267]
	*e++ = 42;
	*e++ = 4;
	e   += 4;
#endif

	*e++ = 255;		/* End of the list */
c7e26c94:	e5c5b10c 	strb	fp, [r5, #268]

	/*
	 *	Bootp ID is the lower 4 bytes of our ethernet address
	 *	plus the current time in ms.
	 */
	BootpID = ((ulong)NetOurEther[2] << 24)
c7e26c98:	e5da4003 	ldrb	r4, [sl, #3]
c7e26c9c:	e5da3002 	ldrb	r3, [sl, #2]
c7e26ca0:	e5da2005 	ldrb	r2, [sl, #5]
c7e26ca4:	e1a04804 	lsl	r4, r4, #16
c7e26ca8:	e1844c03 	orr	r4, r4, r3, lsl #24
c7e26cac:	e5da3004 	ldrb	r3, [sl, #4]
c7e26cb0:	e1844002 	orr	r4, r4, r2
c7e26cb4:	e1844403 	orr	r4, r4, r3, lsl #8
		| ((ulong)NetOurEther[3] << 16)
		| ((ulong)NetOurEther[4] << 8)
		| (ulong)NetOurEther[5];
	BootpID += get_timer(0);
c7e26cb8:	e1a00007 	mov	r0, r7

	/*
	 *	Bootp ID is the lower 4 bytes of our ethernet address
	 *	plus the current time in ms.
	 */
	BootpID = ((ulong)NetOurEther[2] << 24)
c7e26cbc:	e5894004 	str	r4, [r9, #4]
		| ((ulong)NetOurEther[3] << 16)
		| ((ulong)NetOurEther[4] << 8)
		| (ulong)NetOurEther[5];
	BootpID += get_timer(0);
c7e26cc0:	ebff674e 	bl	c7e00a00 <get_timer>
	BootpID	 = htonl(BootpID);
c7e26cc4:	e0800004 	add	r0, r0, r4
c7e26cc8:	ebffff8b 	bl	c7e26afc <__fswab32>

	/*
	 * Calculate proper packet lengths taking into account the
	 * variable size of the options field
	 */
	iplen = BOOTP_HDR_SIZE - OPT_FIELD_SIZE + extlen;
c7e26ccc:	e0656006 	rsb	r6, r5, r6
	BootpID = ((ulong)NetOurEther[2] << 24)
		| ((ulong)NetOurEther[3] << 16)
		| ((ulong)NetOurEther[4] << 8)
		| (ulong)NetOurEther[5];
	BootpID += get_timer(0);
	BootpID	 = htonl(BootpID);
c7e26cd0:	e5a90004 	str	r0, [r9, #4]!
}

/* copy ulong */
static inline void NetCopyLong(ulong *to, ulong *from)
{
	memcpy((void *)to, (void *)from, sizeof(ulong));
c7e26cd4:	e1a01009 	mov	r1, r9
c7e26cd8:	e3a02004 	mov	r2, #4	; 0x4
c7e26cdc:	e2850020 	add	r0, r5, #32	; 0x20

	/*
	 * Calculate proper packet lengths taking into account the
	 * variable size of the options field
	 */
	iplen = BOOTP_HDR_SIZE - OPT_FIELD_SIZE + extlen;
c7e26ce0:	e2466017 	sub	r6, r6, #23	; 0x17
c7e26ce4:	ebffefd4 	bl	c7e22c3c <memcpy>
c7e26ce8:	e286c0ec 	add	ip, r6, #236	; 0xec
	pktlen = eth_hdr_size + IP_UDP_HDR_SIZE + iplen;
	net_set_udp_header(iphdr, 0xFFFFFFFFL, PORT_BOOTPS, PORT_BOOTPC, iplen);
c7e26cec:	e3a02043 	mov	r2, #67	; 0x43
c7e26cf0:	e3a03044 	mov	r3, #68	; 0x44
c7e26cf4:	e1a00005 	mov	r0, r5
c7e26cf8:	e1a0100b 	mov	r1, fp
c7e26cfc:	e58dc000 	str	ip, [sp]
c7e26d00:	eb00042a 	bl	c7e27db0 <net_set_udp_header>
	NetSetTimeout(SELECT_TIMEOUT, BootpTimeout);
c7e26d04:	e59f1048 	ldr	r1, [pc, #72]	; c7e26d54 <BootpRequest+0x1c4>
c7e26d08:	e59f0048 	ldr	r0, [pc, #72]	; c7e26d58 <BootpRequest+0x1c8>
c7e26d0c:	eb0003eb 	bl	c7e27cc0 <NetSetTimeout>

#if defined(CONFIG_CMD_DHCP)
	dhcp_state = SELECTING;
	net_set_udp_handler(DhcpHandler);
#else
	net_set_udp_handler(BootpHandler);
c7e26d10:	e59f0044 	ldr	r0, [pc, #68]	; c7e26d5c <BootpRequest+0x1cc>
c7e26d14:	eb00034b 	bl	c7e27a48 <net_set_udp_handler>
}

/* Transmit a packet */
static inline void NetSendPacket(uchar *pkt, int len)
{
	(void) eth_send(pkt, len);
c7e26d18:	e59d300c 	ldr	r3, [sp, #12]
c7e26d1c:	e2866f42 	add	r6, r6, #264	; 0x108
c7e26d20:	e0861003 	add	r1, r6, r3
c7e26d24:	e59f3014 	ldr	r3, [pc, #20]	; c7e26d40 <BootpRequest+0x1b0>
c7e26d28:	e5930000 	ldr	r0, [r3]
#endif
	NetSendPacket(NetTxPacket, pktlen);
}
c7e26d2c:	e28dd010 	add	sp, sp, #16	; 0x10
c7e26d30:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
c7e26d34:	ea00010b 	b	c7e27168 <eth_send>
c7e26d38:	c7e7297c 	.word	0xc7e7297c
c7e26d3c:	c7e34b24 	.word	0xc7e34b24
c7e26d40:	c7e729cc 	.word	0xc7e729cc
c7e26d44:	000005ee 	.word	0x000005ee
c7e26d48:	c7e3a4d0 	.word	0xc7e3a4d0
c7e26d4c:	c7e729bc 	.word	0xc7e729bc
c7e26d50:	c7e748d8 	.word	0xc7e748d8
c7e26d54:	c7e27044 	.word	0xc7e27044
c7e26d58:	00000bb8 	.word	0x00000bb8
c7e26d5c:	c7e26d60 	.word	0xc7e26d60

c7e26d60 <BootpHandler>:
 *	Handle a BOOTP received packet.
 */
static void
BootpHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src,
	     unsigned len)
{
c7e26d60:	e92d46f7 	push	{r0, r1, r2, r4, r5, r6, r7, r9, sl, lr}
static int BootpCheckPkt(uchar *pkt, unsigned dest, unsigned src, unsigned len)
{
	struct Bootp_t *bp = (struct Bootp_t *) pkt;
	int retval = 0;

	if (dest != PORT_BOOTPC || src != PORT_BOOTPS)
c7e26d64:	e3530043 	cmp	r3, #67	; 0x43
c7e26d68:	03510044 	cmpeq	r1, #68	; 0x44
 *	Handle a BOOTP received packet.
 */
static void
BootpHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src,
	     unsigned len)
{
c7e26d6c:	e1a04000 	mov	r4, r0
c7e26d70:	e59d6028 	ldr	r6, [sp, #40]
static int BootpCheckPkt(uchar *pkt, unsigned dest, unsigned src, unsigned len)
{
	struct Bootp_t *bp = (struct Bootp_t *) pkt;
	int retval = 0;

	if (dest != PORT_BOOTPC || src != PORT_BOOTPS)
c7e26d74:	1a00009f 	bne	c7e26ff8 <BootpHandler+0x298>
		retval = -1;
	else if (len < sizeof(struct Bootp_t) - OPT_FIELD_SIZE)
c7e26d78:	e35600eb 	cmp	r6, #235	; 0xeb
c7e26d7c:	9a00009d 	bls	c7e26ff8 <BootpHandler+0x298>
		retval = -2;
	else if (bp->bp_op != OP_BOOTREQUEST &&
c7e26d80:	e5d02000 	ldrb	r2, [r0]
c7e26d84:	e2423001 	sub	r3, r2, #1	; 0x1
c7e26d88:	e3520005 	cmp	r2, #5	; 0x5
c7e26d8c:	13530001 	cmpne	r3, #1	; 0x1
c7e26d90:	9a000001 	bls	c7e26d9c <BootpHandler+0x3c>
c7e26d94:	e3520006 	cmp	r2, #6	; 0x6
c7e26d98:	1a000096 	bne	c7e26ff8 <BootpHandler+0x298>
			bp->bp_op != OP_BOOTREPLY &&
			bp->bp_op != DHCP_OFFER &&
			bp->bp_op != DHCP_ACK &&
			bp->bp_op != DHCP_NAK)
		retval = -3;
	else if (bp->bp_htype != HWT_ETHER)
c7e26d9c:	e5d43001 	ldrb	r3, [r4, #1]
c7e26da0:	e3530001 	cmp	r3, #1	; 0x1
c7e26da4:	1a000093 	bne	c7e26ff8 <BootpHandler+0x298>
		retval = -4;
	else if (bp->bp_hlen != HWL_ETHER)
c7e26da8:	e5d43002 	ldrb	r3, [r4, #2]
c7e26dac:	e3530006 	cmp	r3, #6	; 0x6
c7e26db0:	1a000090 	bne	c7e26ff8 <BootpHandler+0x298>
		retval = -5;
	else if (NetReadLong((ulong *)&bp->bp_id) != BootpID)
c7e26db4:	e2840004 	add	r0, r4, #4	; 0x4
c7e26db8:	ebffff6d 	bl	c7e26b74 <NetReadLong>
c7e26dbc:	e59f3238 	ldr	r3, [pc, #568]	; c7e26ffc <BootpHandler+0x29c>
c7e26dc0:	e5933004 	ldr	r3, [r3, #4]
c7e26dc4:	e1500003 	cmp	r0, r3
c7e26dc8:	0a000082 	beq	c7e26fd8 <BootpHandler+0x278>
c7e26dcc:	ea000089 	b	c7e26ff8 <BootpHandler+0x298>
#if !defined(CONFIG_BOOTP_SERVERIP)
	IPaddr_t tmp_ip;

	NetCopyIP(&tmp_ip, &bp->bp_siaddr);
	if (tmp_ip != 0)
		NetCopyIP(&NetServerIP, &bp->bp_siaddr);
c7e26dd0:	e1a01005 	mov	r1, r5
c7e26dd4:	e59f0224 	ldr	r0, [pc, #548]	; c7e27000 <BootpHandler+0x2a0>
c7e26dd8:	ebffff63 	bl	c7e26b6c <NetCopyIP>
	memcpy(NetServerEther, ((struct ethernet_hdr *)NetRxPacket)->et_src, 6);
c7e26ddc:	e59f3220 	ldr	r3, [pc, #544]	; c7e27004 <BootpHandler+0x2a4>
c7e26de0:	e3a02006 	mov	r2, #6	; 0x6
c7e26de4:	e5931000 	ldr	r1, [r3]
c7e26de8:	e59f0218 	ldr	r0, [pc, #536]	; c7e27008 <BootpHandler+0x2a8>
c7e26dec:	e0811002 	add	r1, r1, r2
c7e26df0:	ebffef91 	bl	c7e22c3c <memcpy>
#endif
	NetCopyIP(&NetOurIP, &bp->bp_yiaddr);
	if (strlen(bp->bp_file) > 0)
c7e26df4:	e284506c 	add	r5, r4, #108	; 0x6c
	NetCopyIP(&tmp_ip, &bp->bp_siaddr);
	if (tmp_ip != 0)
		NetCopyIP(&NetServerIP, &bp->bp_siaddr);
	memcpy(NetServerEther, ((struct ethernet_hdr *)NetRxPacket)->et_src, 6);
#endif
	NetCopyIP(&NetOurIP, &bp->bp_yiaddr);
c7e26df8:	e59f020c 	ldr	r0, [pc, #524]	; c7e2700c <BootpHandler+0x2ac>
c7e26dfc:	e2841010 	add	r1, r4, #16	; 0x10
c7e26e00:	ebffff59 	bl	c7e26b6c <NetCopyIP>
	if (strlen(bp->bp_file) > 0)
c7e26e04:	e1a00005 	mov	r0, r5
c7e26e08:	ebffeeca 	bl	c7e22938 <strlen>
c7e26e0c:	e3500000 	cmp	r0, #0	; 0x0
c7e26e10:	0a000003 	beq	c7e26e24 <BootpHandler+0xc4>
		copy_filename(BootFile, bp->bp_file, sizeof(BootFile));
c7e26e14:	e1a01005 	mov	r1, r5
c7e26e18:	e59f01f0 	ldr	r0, [pc, #496]	; c7e27010 <BootpHandler+0x2b0>
c7e26e1c:	e3a02080 	mov	r2, #128	; 0x80
c7e26e20:	eb000337 	bl	c7e27b04 <copy_filename>

	/* Propagate to environment:
	 * don't delete exising entry when BOOTP / DHCP reply does
	 * not contain a new value
	 */
	if (*BootFile)
c7e26e24:	e59f11e4 	ldr	r1, [pc, #484]	; c7e27010 <BootpHandler+0x2b0>
c7e26e28:	e5d13000 	ldrb	r3, [r1]
c7e26e2c:	e3530000 	cmp	r3, #0	; 0x0
c7e26e30:	0a000001 	beq	c7e26e3c <BootpHandler+0xdc>
		setenv("bootfile", BootFile);
c7e26e34:	e59f01d8 	ldr	r0, [pc, #472]	; c7e27014 <BootpHandler+0x2b4>
c7e26e38:	ebff8204 	bl	c7e07650 <setenv>
#endif

	BootpCopyNetParams(bp);		/* Store net parameters from reply */

	/* Retrieve extended information (we must parse the vendor area) */
	if (NetReadLong((ulong *)&bp->bp_vend[0]) == htonl(BOOTP_VENDOR_MAGIC))
c7e26e3c:	e28400ec 	add	r0, r4, #236	; 0xec
c7e26e40:	ebffff4b 	bl	c7e26b74 <NetReadLong>
c7e26e44:	e59f31cc 	ldr	r3, [pc, #460]	; c7e27018 <BootpHandler+0x2b8>
c7e26e48:	e1500003 	cmp	r0, r3
		BootpVendorProcess((uchar *)&bp->bp_vend[4], len);
c7e26e4c:	028450f0 	addeq	r5, r4, #240	; 0xf0
	}
}

static void BootpVendorProcess(u8 *ext, int size)
{
	u8 *end = ext + size;
c7e26e50:	00859006 	addeq	r9, r5, r6
#endif

	BootpCopyNetParams(bp);		/* Store net parameters from reply */

	/* Retrieve extended information (we must parse the vendor area) */
	if (NetReadLong((ulong *)&bp->bp_vend[0]) == htonl(BOOTP_VENDOR_MAGIC))
c7e26e54:	1a00005a 	bne	c7e26fc4 <BootpHandler+0x264>
c7e26e58:	ea000054 	b	c7e26fb0 <BootpHandler+0x250>
	u8 *end = ext + size;

	debug("[BOOTP] Checking extension (%d bytes)...\n", size);

	while ((ext < end) && (*ext != 0xff)) {
		if (*ext == 0) {
c7e26e5c:	e3530000 	cmp	r3, #0	; 0x0
			ext++;
c7e26e60:	0285a001 	addeq	sl, r5, #1	; 0x1
	u8 *end = ext + size;

	debug("[BOOTP] Checking extension (%d bytes)...\n", size);

	while ((ext < end) && (*ext != 0xff)) {
		if (*ext == 0) {
c7e26e64:	0a000050 	beq	c7e26fac <BootpHandler+0x24c>
			ext++;
		} else {
			u8 *opt = ext;

			ext += ext[1] + 2;
c7e26e68:	e5d52001 	ldrb	r2, [r5, #1]
c7e26e6c:	e2823002 	add	r3, r2, #2	; 0x2
c7e26e70:	e085a003 	add	sl, r5, r3
			if (ext <= end)
c7e26e74:	e15a0009 	cmp	sl, r9
c7e26e78:	8a00004b 	bhi	c7e26fac <BootpHandler+0x24c>
	int size = *(ext + 1);

	debug("[BOOTP] Processing extension %d... (%d bytes)\n", *ext,
		*(ext + 1));

	NetBootFileSize = 0;
c7e26e7c:	e59f3198 	ldr	r3, [pc, #408]	; c7e2701c <BootpHandler+0x2bc>
c7e26e80:	e3a01000 	mov	r1, #0	; 0x0
c7e26e84:	e1c310b0 	strh	r1, [r3]

	switch (*ext) {
c7e26e88:	e5d53000 	ldrb	r3, [r5]
c7e26e8c:	e353000c 	cmp	r3, #12	; 0xc
c7e26e90:	0a00001e 	beq	c7e26f10 <BootpHandler+0x1b0>
c7e26e94:	8a000006 	bhi	c7e26eb4 <BootpHandler+0x154>
c7e26e98:	e3530003 	cmp	r3, #3	; 0x3
c7e26e9c:	0a000012 	beq	c7e26eec <BootpHandler+0x18c>
c7e26ea0:	e3530006 	cmp	r3, #6	; 0x6
c7e26ea4:	0a000012 	beq	c7e26ef4 <BootpHandler+0x194>
c7e26ea8:	e3530001 	cmp	r3, #1	; 0x1
c7e26eac:	1a00003e 	bne	c7e26fac <BootpHandler+0x24c>
c7e26eb0:	ea000006 	b	c7e26ed0 <BootpHandler+0x170>
c7e26eb4:	e3530011 	cmp	r3, #17	; 0x11
c7e26eb8:	0a000027 	beq	c7e26f5c <BootpHandler+0x1fc>
c7e26ebc:	e3530028 	cmp	r3, #40	; 0x28
c7e26ec0:	0a00002c 	beq	c7e26f78 <BootpHandler+0x218>
c7e26ec4:	e353000d 	cmp	r3, #13	; 0xd
c7e26ec8:	1a000037 	bne	c7e26fac <BootpHandler+0x24c>
c7e26ecc:	ea000016 	b	c7e26f2c <BootpHandler+0x1cc>
		/* Fixed length fields */
	case 1:			/* Subnet mask */
		if (NetOurSubnetMask == 0)
c7e26ed0:	e59f3148 	ldr	r3, [pc, #328]	; c7e27020 <BootpHandler+0x2c0>
c7e26ed4:	e5933000 	ldr	r3, [r3]
c7e26ed8:	e3530000 	cmp	r3, #0	; 0x0
			NetCopyIP(&NetOurSubnetMask, (IPaddr_t *) (ext + 2));
c7e26edc:	02851002 	addeq	r1, r5, #2	; 0x2
c7e26ee0:	059f0138 	ldreq	r0, [pc, #312]	; c7e27020 <BootpHandler+0x2c0>
	NetBootFileSize = 0;

	switch (*ext) {
		/* Fixed length fields */
	case 1:			/* Subnet mask */
		if (NetOurSubnetMask == 0)
c7e26ee4:	1a000030 	bne	c7e26fac <BootpHandler+0x24c>
c7e26ee8:	ea000006 	b	c7e26f08 <BootpHandler+0x1a8>
		break;
	case 2:			/* Time offset - Not yet supported */
		break;
		/* Variable length fields */
	case 3:			/* Gateways list */
		if (NetOurGatewayIP == 0)
c7e26eec:	e59f0130 	ldr	r0, [pc, #304]	; c7e27024 <BootpHandler+0x2c4>
c7e26ef0:	ea000000 	b	c7e26ef8 <BootpHandler+0x198>
	case 4:			/* Time server - Not yet supported */
		break;
	case 5:			/* IEN-116 name server - Not yet supported */
		break;
	case 6:
		if (NetOurDNSIP == 0)
c7e26ef4:	e59f012c 	ldr	r0, [pc, #300]	; c7e27028 <BootpHandler+0x2c8>
c7e26ef8:	e5903000 	ldr	r3, [r0]
c7e26efc:	e3530000 	cmp	r3, #0	; 0x0
c7e26f00:	1a000029 	bne	c7e26fac <BootpHandler+0x24c>
			NetCopyIP(&NetOurDNSIP, (IPaddr_t *) (ext + 2));
c7e26f04:	e2851002 	add	r1, r5, #2	; 0x2
c7e26f08:	ebffff17 	bl	c7e26b6c <NetCopyIP>
c7e26f0c:	ea000026 	b	c7e26fac <BootpHandler+0x24c>
	case 10:		/* Impress server - Not yet supported */
		break;
	case 11:		/* RPL server - Not yet supported */
		break;
	case 12:		/* Host name */
		if (NetOurHostName[0] == 0) {
c7e26f10:	e59f6114 	ldr	r6, [pc, #276]	; c7e2702c <BootpHandler+0x2cc>
c7e26f14:	e5d67000 	ldrb	r7, [r6]
c7e26f18:	e3570000 	cmp	r7, #0	; 0x0
			size = truncate_sz("Host Name",
c7e26f1c:	03a01020 	moveq	r1, #32	; 0x20
c7e26f20:	059f0108 	ldreq	r0, [pc, #264]	; c7e27030 <BootpHandler+0x2d0>
	case 10:		/* Impress server - Not yet supported */
		break;
	case 11:		/* RPL server - Not yet supported */
		break;
	case 12:		/* Host name */
		if (NetOurHostName[0] == 0) {
c7e26f24:	1a000020 	bne	c7e26fac <BootpHandler+0x24c>
c7e26f28:	ea000018 	b	c7e26f90 <BootpHandler+0x230>
			memcpy(&NetOurHostName, ext + 2, size);
			NetOurHostName[size] = 0;
		}
		break;
	case 13:		/* Boot file size */
		if (size == 2)
c7e26f2c:	e3520002 	cmp	r2, #2	; 0x2
c7e26f30:	1a000002 	bne	c7e26f40 <BootpHandler+0x1e0>
			NetBootFileSize = ntohs(*(ushort *) (ext + 2));
c7e26f34:	e1d500b2 	ldrh	r0, [r5, #2]
c7e26f38:	ebfffeea 	bl	c7e26ae8 <__fswab16>
c7e26f3c:	ea000003 	b	c7e26f50 <BootpHandler+0x1f0>
		else if (size == 4)
c7e26f40:	e3520004 	cmp	r2, #4	; 0x4
c7e26f44:	1a000018 	bne	c7e26fac <BootpHandler+0x24c>
			NetBootFileSize = ntohl(*(ulong *) (ext + 2));
c7e26f48:	e5950002 	ldr	r0, [r5, #2]
c7e26f4c:	ebfffeea 	bl	c7e26afc <__fswab32>
c7e26f50:	e59f30c4 	ldr	r3, [pc, #196]	; c7e2701c <BootpHandler+0x2bc>
c7e26f54:	e1c300b0 	strh	r0, [r3]
c7e26f58:	ea000013 	b	c7e26fac <BootpHandler+0x24c>
	case 15:		/* Domain name - Not yet supported */
		break;
	case 16:		/* Swap server - Not yet supported */
		break;
	case 17:		/* Root path */
		if (NetOurRootPath[0] == 0) {
c7e26f5c:	e59f60d0 	ldr	r6, [pc, #208]	; c7e27034 <BootpHandler+0x2d4>
c7e26f60:	e5d67000 	ldrb	r7, [r6]
c7e26f64:	e3570000 	cmp	r7, #0	; 0x0
			size = truncate_sz("Root Path",
c7e26f68:	03a01040 	moveq	r1, #64	; 0x40
c7e26f6c:	059f00c4 	ldreq	r0, [pc, #196]	; c7e27038 <BootpHandler+0x2d8>
	case 15:		/* Domain name - Not yet supported */
		break;
	case 16:		/* Swap server - Not yet supported */
		break;
	case 17:		/* Root path */
		if (NetOurRootPath[0] == 0) {
c7e26f70:	1a00000d 	bne	c7e26fac <BootpHandler+0x24c>
c7e26f74:	ea000005 	b	c7e26f90 <BootpHandler+0x230>
		 * access via TFTP.
		 */
		break;
		/* IP host layer fields */
	case 40:		/* NIS Domain name */
		if (NetOurNISDomain[0] == 0) {
c7e26f78:	e59f60bc 	ldr	r6, [pc, #188]	; c7e2703c <BootpHandler+0x2dc>
c7e26f7c:	e5d67000 	ldrb	r7, [r6]
c7e26f80:	e3570000 	cmp	r7, #0	; 0x0
c7e26f84:	1a000008 	bne	c7e26fac <BootpHandler+0x24c>
			size = truncate_sz("NIS Domain Name",
c7e26f88:	e59f00b0 	ldr	r0, [pc, #176]	; c7e27040 <BootpHandler+0x2e0>
c7e26f8c:	e3a01020 	mov	r1, #32	; 0x20
c7e26f90:	ebfffee1 	bl	c7e26b1c <truncate_sz>
c7e26f94:	e1a04000 	mov	r4, r0
				sizeof(NetOurNISDomain), size);
			memcpy(&NetOurNISDomain, ext + 2, size);
c7e26f98:	e2851002 	add	r1, r5, #2	; 0x2
c7e26f9c:	e1a00006 	mov	r0, r6
c7e26fa0:	e1a02004 	mov	r2, r4
c7e26fa4:	ebffef24 	bl	c7e22c3c <memcpy>
			NetOurNISDomain[size] = 0;
c7e26fa8:	e7c67004 	strb	r7, [r6, r4]
c7e26fac:	e1a0500a 	mov	r5, sl
{
	u8 *end = ext + size;

	debug("[BOOTP] Checking extension (%d bytes)...\n", size);

	while ((ext < end) && (*ext != 0xff)) {
c7e26fb0:	e1550009 	cmp	r5, r9
c7e26fb4:	2a000002 	bcs	c7e26fc4 <BootpHandler+0x264>
c7e26fb8:	e5d53000 	ldrb	r3, [r5]
c7e26fbc:	e35300ff 	cmp	r3, #255	; 0xff
c7e26fc0:	1affffa5 	bne	c7e26e5c <BootpHandler+0xfc>

	/* Retrieve extended information (we must parse the vendor area) */
	if (NetReadLong((ulong *)&bp->bp_vend[0]) == htonl(BOOTP_VENDOR_MAGIC))
		BootpVendorProcess((uchar *)&bp->bp_vend[4], len);

	NetSetTimeout(0, (thand_f *)0);
c7e26fc4:	e3a00000 	mov	r0, #0	; 0x0
c7e26fc8:	e1a01000 	mov	r1, r0
c7e26fcc:	eb00033b 	bl	c7e27cc0 <NetSetTimeout>
	bootstage_mark_name(BOOTSTAGE_ID_BOOTP_STOP, "bootp_stop");

	debug("Got good BOOTP\n");

	net_auto_load();
c7e26fd0:	eb000519 	bl	c7e2843c <net_auto_load>
c7e26fd4:	ea000007 	b	c7e26ff8 <BootpHandler+0x298>
static void BootpCopyNetParams(struct Bootp_t *bp)
{
#if !defined(CONFIG_BOOTP_SERVERIP)
	IPaddr_t tmp_ip;

	NetCopyIP(&tmp_ip, &bp->bp_siaddr);
c7e26fd8:	e2845014 	add	r5, r4, #20	; 0x14
c7e26fdc:	e28d0004 	add	r0, sp, #4	; 0x4
c7e26fe0:	e1a01005 	mov	r1, r5
c7e26fe4:	ebfffee0 	bl	c7e26b6c <NetCopyIP>
	if (tmp_ip != 0)
c7e26fe8:	e59d3004 	ldr	r3, [sp, #4]
c7e26fec:	e3530000 	cmp	r3, #0	; 0x0
c7e26ff0:	0affff79 	beq	c7e26ddc <BootpHandler+0x7c>
c7e26ff4:	eaffff75 	b	c7e26dd0 <BootpHandler+0x70>
	bootstage_mark_name(BOOTSTAGE_ID_BOOTP_STOP, "bootp_stop");

	debug("Got good BOOTP\n");

	net_auto_load();
}
c7e26ff8:	e8bd86fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r9, sl, pc}
c7e26ffc:	c7e7297c 	.word	0xc7e7297c
c7e27000:	c7e729f4 	.word	0xc7e729f4
c7e27004:	c7e729c4 	.word	0xc7e729c4
c7e27008:	c7e748d2 	.word	0xc7e748d2
c7e2700c:	c7e729b8 	.word	0xc7e729b8
c7e27010:	c7e748d8 	.word	0xc7e748d8
c7e27014:	c7e2f0e9 	.word	0xc7e2f0e9
c7e27018:	63538263 	.word	0x63538263
c7e2701c:	c7e748d0 	.word	0xc7e748d0
c7e27020:	c7e729f0 	.word	0xc7e729f0
c7e27024:	c7e729ec 	.word	0xc7e729ec
c7e27028:	c7e748cc 	.word	0xc7e748cc
c7e2702c:	c7e7486c 	.word	0xc7e7486c
c7e27030:	c7e34b38 	.word	0xc7e34b38
c7e27034:	c7e7488c 	.word	0xc7e7488c
c7e27038:	c7e34b42 	.word	0xc7e34b42
c7e2703c:	c7e7484c 	.word	0xc7e7484c
c7e27040:	c7e34b4c 	.word	0xc7e34b4c

c7e27044 <BootpTimeout>:
 *	Timeout on BOOTP/DHCP request.
 */
static void
BootpTimeout(void)
{
	if (BootpTry >= TIMEOUT_COUNT) {
c7e27044:	e59f3030 	ldr	r3, [pc, #48]	; c7e2707c <BootpTimeout+0x38>
/*
 *	Timeout on BOOTP/DHCP request.
 */
static void
BootpTimeout(void)
{
c7e27048:	e92d4010 	push	{r4, lr}
	if (BootpTry >= TIMEOUT_COUNT) {
c7e2704c:	e5933000 	ldr	r3, [r3]
c7e27050:	e3530004 	cmp	r3, #4	; 0x4
c7e27054:	da000003 	ble	c7e27068 <BootpTimeout+0x24>
#ifdef CONFIG_BOOTP_MAY_FAIL
		puts("\nRetry count exceeded\n");
		net_set_state(NETLOOP_FAIL);
#else
		puts("\nRetry count exceeded; starting again\n");
c7e27058:	e59f0020 	ldr	r0, [pc, #32]	; c7e27080 <BootpTimeout+0x3c>
c7e2705c:	ebff8662 	bl	c7e089ec <puts>
#endif
	} else {
		NetSetTimeout(TIMEOUT, BootpTimeout);
		BootpRequest();
	}
}
c7e27060:	e8bd4010 	pop	{r4, lr}
#ifdef CONFIG_BOOTP_MAY_FAIL
		puts("\nRetry count exceeded\n");
		net_set_state(NETLOOP_FAIL);
#else
		puts("\nRetry count exceeded; starting again\n");
		NetStartAgain();
c7e27064:	ea0004b1 	b	c7e28330 <NetStartAgain>
#endif
	} else {
		NetSetTimeout(TIMEOUT, BootpTimeout);
c7e27068:	e59f0014 	ldr	r0, [pc, #20]	; c7e27084 <BootpTimeout+0x40>
c7e2706c:	e59f1014 	ldr	r1, [pc, #20]	; c7e27088 <BootpTimeout+0x44>
c7e27070:	eb000312 	bl	c7e27cc0 <NetSetTimeout>
		BootpRequest();
	}
}
c7e27074:	e8bd4010 	pop	{r4, lr}
		puts("\nRetry count exceeded; starting again\n");
		NetStartAgain();
#endif
	} else {
		NetSetTimeout(TIMEOUT, BootpTimeout);
		BootpRequest();
c7e27078:	eafffec4 	b	c7e26b90 <BootpRequest>
c7e2707c:	c7e7297c 	.word	0xc7e7297c
c7e27080:	c7e34b5c 	.word	0xc7e34b5c
c7e27084:	00001388 	.word	0x00001388
c7e27088:	c7e27044 	.word	0xc7e27044

c7e2708c <is_valid_ether_addr>:
 * Return true if the address is a multicast address.
 * By definition the broadcast address is also a multicast address.
 */
static inline int is_multicast_ether_addr(const u8 *addr)
{
	return 0x01 & addr[0];
c7e2708c:	e5d01000 	ldrb	r1, [r0]
 * a multicast address, and is not FF:FF:FF:FF:FF:FF.
 *
 * Return true if the address is valid.
 */
static inline int is_valid_ether_addr(const u8 *addr)
{
c7e27090:	e1a0c000 	mov	ip, r0
	/* FF:FF:FF:FF:FF:FF is a multicast address so we don't need to
	 * explicitly check for it here. */
	return !is_multicast_ether_addr(addr) && !is_zero_ether_addr(addr);
c7e27094:	e3110001 	tst	r1, #1	; 0x1
c7e27098:	13a00000 	movne	r0, #0	; 0x0
c7e2709c:	112fff1e 	bxne	lr
c7e270a0:	e5dc2002 	ldrb	r2, [ip, #2]
c7e270a4:	e5dc3001 	ldrb	r3, [ip, #1]
c7e270a8:	e5dc0003 	ldrb	r0, [ip, #3]
c7e270ac:	e1833002 	orr	r3, r3, r2
c7e270b0:	e1813003 	orr	r3, r1, r3
c7e270b4:	e5dc1004 	ldrb	r1, [ip, #4]
c7e270b8:	e1833000 	orr	r3, r3, r0
c7e270bc:	e5dc2005 	ldrb	r2, [ip, #5]
c7e270c0:	e1833001 	orr	r3, r3, r1
c7e270c4:	e1932002 	orrs	r2, r3, r2
c7e270c8:	03a00000 	moveq	r0, #0	; 0x0
c7e270cc:	13a00001 	movne	r0, #1	; 0x1
}
c7e270d0:	e12fff1e 	bx	lr

c7e270d4 <cpu_eth_init>:
 * signals caller to move on
 */
static int __def_eth_init(bd_t *bis)
{
	return -1;
}
c7e270d4:	e3e00000 	mvn	r0, #0	; 0x0
c7e270d8:	e12fff1e 	bx	lr

c7e270dc <eth_get_dev_by_index>:

struct eth_device *eth_get_dev_by_index(int index)
{
	struct eth_device *dev, *target_dev;

	if (!eth_devices)
c7e270dc:	e59f3030 	ldr	r3, [pc, #48]	; c7e27114 <eth_get_dev_by_index+0x38>

	return target_dev;
}

struct eth_device *eth_get_dev_by_index(int index)
{
c7e270e0:	e1a01000 	mov	r1, r0
	struct eth_device *dev, *target_dev;

	if (!eth_devices)
c7e270e4:	e5932000 	ldr	r2, [r3]
c7e270e8:	e3520000 	cmp	r2, #0	; 0x0
c7e270ec:	0a000006 	beq	c7e2710c <eth_get_dev_by_index+0x30>
c7e270f0:	e1a00002 	mov	r0, r2
		return NULL;

	dev = eth_devices;
	target_dev = NULL;
	do {
		if (dev->index == index) {
c7e270f4:	e5903038 	ldr	r3, [r0, #56]
c7e270f8:	e1530001 	cmp	r3, r1
c7e270fc:	012fff1e 	bxeq	lr
			target_dev = dev;
			break;
		}
		dev = dev->next;
c7e27100:	e5900034 	ldr	r0, [r0, #52]
	} while (dev != eth_devices);
c7e27104:	e1500002 	cmp	r0, r2
c7e27108:	1afffff9 	bne	c7e270f4 <eth_get_dev_by_index+0x18>
c7e2710c:	e3a00000 	mov	r0, #0	; 0x0

	return target_dev;
}
c7e27110:	e12fff1e 	bx	lr
c7e27114:	c7e72984 	.word	0xc7e72984

c7e27118 <eth_get_dev_index>:

int eth_get_dev_index(void)
{
	if (!eth_current)
c7e27118:	e59f3010 	ldr	r3, [pc, #16]	; c7e27130 <eth_get_dev_index+0x18>
c7e2711c:	e5930004 	ldr	r0, [r3, #4]
c7e27120:	e3500000 	cmp	r0, #0	; 0x0
c7e27124:	03e00000 	mvneq	r0, #0	; 0x0
		return -1;

	return eth_current->index;
c7e27128:	15900038 	ldrne	r0, [r0, #56]
}
c7e2712c:	e12fff1e 	bx	lr
c7e27130:	c7e72984 	.word	0xc7e72984

c7e27134 <eth_halt>:

	return -1;
}

void eth_halt(void)
{
c7e27134:	e92d4010 	push	{r4, lr}
	if (!eth_current)
c7e27138:	e59f4024 	ldr	r4, [pc, #36]	; c7e27164 <eth_halt+0x30>
c7e2713c:	e5943004 	ldr	r3, [r4, #4]
c7e27140:	e3530000 	cmp	r3, #0	; 0x0
c7e27144:	08bd8010 	popeq	{r4, pc}
		return;

	eth_current->halt(eth_current);
c7e27148:	e1a00003 	mov	r0, r3
c7e2714c:	e1a0e00f 	mov	lr, pc
c7e27150:	e593f02c 	ldr	pc, [r3, #44]

	eth_current->state = ETH_STATE_PASSIVE;
c7e27154:	e5942004 	ldr	r2, [r4, #4]
c7e27158:	e3a03001 	mov	r3, #1	; 0x1
c7e2715c:	e582301c 	str	r3, [r2, #28]
c7e27160:	e8bd8010 	pop	{r4, pc}
c7e27164:	c7e72984 	.word	0xc7e72984

c7e27168 <eth_send>:
}

int eth_send(void *packet, int length)
{
	if (!eth_current)
c7e27168:	e59f3028 	ldr	r3, [pc, #40]	; c7e27198 <eth_send+0x30>

	eth_current->state = ETH_STATE_PASSIVE;
}

int eth_send(void *packet, int length)
{
c7e2716c:	e92d4010 	push	{r4, lr}
	if (!eth_current)
c7e27170:	e5933004 	ldr	r3, [r3, #4]

	eth_current->state = ETH_STATE_PASSIVE;
}

int eth_send(void *packet, int length)
{
c7e27174:	e1a02001 	mov	r2, r1
	if (!eth_current)
c7e27178:	e3530000 	cmp	r3, #0	; 0x0
c7e2717c:	03e00000 	mvneq	r0, #0	; 0x0
c7e27180:	08bd8010 	popeq	{r4, pc}
		return -1;

	return eth_current->send(eth_current, packet, length);
c7e27184:	e1a01000 	mov	r1, r0
c7e27188:	e1a00003 	mov	r0, r3
c7e2718c:	e1a0e00f 	mov	lr, pc
c7e27190:	e593f024 	ldr	pc, [r3, #36]
}
c7e27194:	e8bd8010 	pop	{r4, pc}
c7e27198:	c7e72984 	.word	0xc7e72984

c7e2719c <eth_rx>:

int eth_rx(void)
{
	if (!eth_current)
c7e2719c:	e59f3020 	ldr	r3, [pc, #32]	; c7e271c4 <eth_rx+0x28>

	return eth_current->send(eth_current, packet, length);
}

int eth_rx(void)
{
c7e271a0:	e92d4010 	push	{r4, lr}
	if (!eth_current)
c7e271a4:	e5933004 	ldr	r3, [r3, #4]
c7e271a8:	e3530000 	cmp	r3, #0	; 0x0
c7e271ac:	03e00000 	mvneq	r0, #0	; 0x0
c7e271b0:	08bd8010 	popeq	{r4, pc}
		return -1;

	return eth_current->recv(eth_current);
c7e271b4:	e1a00003 	mov	r0, r3
c7e271b8:	e1a0e00f 	mov	lr, pc
c7e271bc:	e593f028 	ldr	pc, [r3, #40]
}
c7e271c0:	e8bd8010 	pop	{r4, pc}
c7e271c4:	c7e72984 	.word	0xc7e72984

c7e271c8 <eth_get_name>:
	eth_current_changed();
}

char *eth_get_name(void)
{
	return eth_current ? eth_current->name : "unknown";
c7e271c8:	e59f3010 	ldr	r3, [pc, #16]	; c7e271e0 <eth_get_name+0x18>
}
c7e271cc:	e59f0010 	ldr	r0, [pc, #16]	; c7e271e4 <eth_get_name+0x1c>
	eth_current_changed();
}

char *eth_get_name(void)
{
	return eth_current ? eth_current->name : "unknown";
c7e271d0:	e5933004 	ldr	r3, [r3, #4]
}
c7e271d4:	e3530000 	cmp	r3, #0	; 0x0
c7e271d8:	11a00003 	movne	r0, r3
c7e271dc:	e12fff1e 	bx	lr
c7e271e0:	c7e72984 	.word	0xc7e72984
c7e271e4:	c7e34b83 	.word	0xc7e34b83

c7e271e8 <eth_current_changed>:

	return eth_current->index;
}

static void eth_current_changed(void)
{
c7e271e8:	e92d4010 	push	{r4, lr}
	char *act = getenv("ethact");
c7e271ec:	e59f0048 	ldr	r0, [pc, #72]	; c7e2723c <eth_current_changed+0x54>
c7e271f0:	ebff7fa9 	bl	c7e0709c <getenv>
	/* update current ethernet name */
	if (eth_current) {
c7e271f4:	e59f3044 	ldr	r3, [pc, #68]	; c7e27240 <eth_current_changed+0x58>
c7e271f8:	e5931004 	ldr	r1, [r3, #4]
c7e271fc:	e3510000 	cmp	r1, #0	; 0x0
c7e27200:	0a000008 	beq	c7e27228 <eth_current_changed+0x40>
		if (act == NULL || strcmp(act, eth_current->name) != 0)
c7e27204:	e3500000 	cmp	r0, #0	; 0x0
c7e27208:	0a000002 	beq	c7e27218 <eth_current_changed+0x30>
c7e2720c:	ebffed93 	bl	c7e22860 <strcmp>
c7e27210:	e3500000 	cmp	r0, #0	; 0x0
c7e27214:	08bd8010 	popeq	{r4, pc}
			setenv("ethact", eth_current->name);
c7e27218:	e59f3020 	ldr	r3, [pc, #32]	; c7e27240 <eth_current_changed+0x58>
c7e2721c:	e59f0018 	ldr	r0, [pc, #24]	; c7e2723c <eth_current_changed+0x54>
c7e27220:	e5931004 	ldr	r1, [r3, #4]
c7e27224:	ea000002 	b	c7e27234 <eth_current_changed+0x4c>
	}
	/*
	 * remove the variable completely if there is no active
	 * interface
	 */
	else if (act != NULL)
c7e27228:	e3500000 	cmp	r0, #0	; 0x0
c7e2722c:	08bd8010 	popeq	{r4, pc}
		setenv("ethact", NULL);
c7e27230:	e59f0004 	ldr	r0, [pc, #4]	; c7e2723c <eth_current_changed+0x54>
}
c7e27234:	e8bd4010 	pop	{r4, lr}
	/*
	 * remove the variable completely if there is no active
	 * interface
	 */
	else if (act != NULL)
		setenv("ethact", NULL);
c7e27238:	eaff8104 	b	c7e07650 <setenv>
c7e2723c:	c7e34b8b 	.word	0xc7e34b8b
c7e27240:	c7e72984 	.word	0xc7e72984

c7e27244 <eth_set_current>:
	if (first_failed == eth_current)
		NetRestartWrap = 1;
}

void eth_set_current(void)
{
c7e27244:	e92d4070 	push	{r4, r5, r6, lr}
	static char *act;
	static int  env_changed_id;
	struct eth_device *old_current;
	int	env_id;

	if (!eth_current)	/* XXX no current */
c7e27248:	e59f4080 	ldr	r4, [pc, #128]	; c7e272d0 <eth_set_current+0x8c>
c7e2724c:	e5943004 	ldr	r3, [r4, #4]
c7e27250:	e3530000 	cmp	r3, #0	; 0x0
c7e27254:	08bd8070 	popeq	{r4, r5, r6, pc}
		return;

	env_id = get_env_id();
c7e27258:	ebff7e5d 	bl	c7e06bd4 <get_env_id>
	if ((act == NULL) || (env_changed_id != env_id)) {
c7e2725c:	e5943008 	ldr	r3, [r4, #8]
	int	env_id;

	if (!eth_current)	/* XXX no current */
		return;

	env_id = get_env_id();
c7e27260:	e1a05000 	mov	r5, r0
	if ((act == NULL) || (env_changed_id != env_id)) {
c7e27264:	e3530000 	cmp	r3, #0	; 0x0
c7e27268:	0a000002 	beq	c7e27278 <eth_set_current+0x34>
c7e2726c:	e594300c 	ldr	r3, [r4, #12]
c7e27270:	e1530000 	cmp	r3, r0
c7e27274:	0a000004 	beq	c7e2728c <eth_set_current+0x48>
		act = getenv("ethact");
c7e27278:	e59f0054 	ldr	r0, [pc, #84]	; c7e272d4 <eth_set_current+0x90>
c7e2727c:	ebff7f86 	bl	c7e0709c <getenv>
c7e27280:	e59f3048 	ldr	r3, [pc, #72]	; c7e272d0 <eth_set_current+0x8c>
		env_changed_id = env_id;
c7e27284:	e583500c 	str	r5, [r3, #12]
	if (!eth_current)	/* XXX no current */
		return;

	env_id = get_env_id();
	if ((act == NULL) || (env_changed_id != env_id)) {
		act = getenv("ethact");
c7e27288:	e5830008 	str	r0, [r3, #8]
		env_changed_id = env_id;
	}
	if (act != NULL) {
c7e2728c:	e59f203c 	ldr	r2, [pc, #60]	; c7e272d0 <eth_set_current+0x8c>
c7e27290:	e5923008 	ldr	r3, [r2, #8]
c7e27294:	e3530000 	cmp	r3, #0	; 0x0
c7e27298:	0a00000a 	beq	c7e272c8 <eth_set_current+0x84>
		old_current = eth_current;
c7e2729c:	e5925004 	ldr	r5, [r2, #4]
		do {
			if (strcmp(eth_current->name, act) == 0)
c7e272a0:	e59f4028 	ldr	r4, [pc, #40]	; c7e272d0 <eth_set_current+0x8c>
c7e272a4:	e9940003 	ldmib	r4, {r0, r1}
c7e272a8:	ebffed6c 	bl	c7e22860 <strcmp>
c7e272ac:	e3500000 	cmp	r0, #0	; 0x0
c7e272b0:	08bd8070 	popeq	{r4, r5, r6, pc}
				return;
			eth_current = eth_current->next;
c7e272b4:	e5943004 	ldr	r3, [r4, #4]
c7e272b8:	e5933034 	ldr	r3, [r3, #52]
		} while (old_current != eth_current);
c7e272bc:	e1550003 	cmp	r5, r3
	if (act != NULL) {
		old_current = eth_current;
		do {
			if (strcmp(eth_current->name, act) == 0)
				return;
			eth_current = eth_current->next;
c7e272c0:	e5843004 	str	r3, [r4, #4]
		} while (old_current != eth_current);
c7e272c4:	1afffff5 	bne	c7e272a0 <eth_set_current+0x5c>
	}

	eth_current_changed();
}
c7e272c8:	e8bd4070 	pop	{r4, r5, r6, lr}
				return;
			eth_current = eth_current->next;
		} while (old_current != eth_current);
	}

	eth_current_changed();
c7e272cc:	eaffffc5 	b	c7e271e8 <eth_current_changed>
c7e272d0:	c7e72984 	.word	0xc7e72984
c7e272d4:	c7e34b8b 	.word	0xc7e34b8b

c7e272d8 <eth_try_another>:
	return length;
}
#endif /* CONFIG_API */

void eth_try_another(int first_restart)
{
c7e272d8:	e92d4010 	push	{r4, lr}
c7e272dc:	e1a04000 	mov	r4, r0

	/*
	 * Do not rotate between network interfaces when
	 * 'ethrotate' variable is set to 'no'.
	 */
	ethrotate = getenv("ethrotate");
c7e272e0:	e59f005c 	ldr	r0, [pc, #92]	; c7e27344 <eth_try_another+0x6c>
c7e272e4:	ebff7f6c 	bl	c7e0709c <getenv>
	if ((ethrotate != NULL) && (strcmp(ethrotate, "no") == 0))
c7e272e8:	e3500000 	cmp	r0, #0	; 0x0
c7e272ec:	0a000003 	beq	c7e27300 <eth_try_another+0x28>
c7e272f0:	e59f1050 	ldr	r1, [pc, #80]	; c7e27348 <eth_try_another+0x70>
c7e272f4:	ebffed59 	bl	c7e22860 <strcmp>
c7e272f8:	e3500000 	cmp	r0, #0	; 0x0
c7e272fc:	08bd8010 	popeq	{r4, pc}
		return;

	if (!eth_current)
c7e27300:	e59f2044 	ldr	r2, [pc, #68]	; c7e2734c <eth_try_another+0x74>
c7e27304:	e5923004 	ldr	r3, [r2, #4]
c7e27308:	e3530000 	cmp	r3, #0	; 0x0
c7e2730c:	08bd8010 	popeq	{r4, pc}
		return;

	if (first_restart)
c7e27310:	e3540000 	cmp	r4, #0	; 0x0
		first_failed = eth_current;
c7e27314:	15823010 	strne	r3, [r2, #16]

	eth_current = eth_current->next;
c7e27318:	e5933034 	ldr	r3, [r3, #52]
c7e2731c:	e59f4028 	ldr	r4, [pc, #40]	; c7e2734c <eth_try_another+0x74>
c7e27320:	e5843004 	str	r3, [r4, #4]

	eth_current_changed();
c7e27324:	ebffffaf 	bl	c7e271e8 <eth_current_changed>

	if (first_failed == eth_current)
c7e27328:	e5942004 	ldr	r2, [r4, #4]
c7e2732c:	e5943010 	ldr	r3, [r4, #16]
c7e27330:	e1530002 	cmp	r3, r2
		NetRestartWrap = 1;
c7e27334:	059f3014 	ldreq	r3, [pc, #20]	; c7e27350 <eth_try_another+0x78>
c7e27338:	03a02001 	moveq	r2, #1	; 0x1
c7e2733c:	05832000 	streq	r2, [r3]
c7e27340:	e8bd8010 	pop	{r4, pc}
c7e27344:	c7e34b92 	.word	0xc7e34b92
c7e27348:	c7e2e9f5 	.word	0xc7e2e9f5
c7e2734c:	c7e72984 	.word	0xc7e72984
c7e27350:	c7e729e0 	.word	0xc7e729e0

c7e27354 <eth_unregister>:
int eth_unregister(struct eth_device *dev)
{
	struct eth_device *cur;

	/* No device */
	if (!eth_devices)
c7e27354:	e59f308c 	ldr	r3, [pc, #140]	; c7e273e8 <eth_unregister+0x94>

	return 0;
}

int eth_unregister(struct eth_device *dev)
{
c7e27358:	e92d4010 	push	{r4, lr}
	struct eth_device *cur;

	/* No device */
	if (!eth_devices)
c7e2735c:	e5932000 	ldr	r2, [r3]
c7e27360:	e3520000 	cmp	r2, #0	; 0x0
c7e27364:	0a00001b 	beq	c7e273d8 <eth_unregister+0x84>
c7e27368:	e1a0c002 	mov	ip, r2
		return -1;

	for (cur = eth_devices; cur->next != eth_devices && cur->next != dev;
c7e2736c:	e59c1034 	ldr	r1, [ip, #52]
c7e27370:	e1510002 	cmp	r1, r2
c7e27374:	0a000003 	beq	c7e27388 <eth_unregister+0x34>
c7e27378:	e1510000 	cmp	r1, r0
c7e2737c:	0a000017 	beq	c7e273e0 <eth_unregister+0x8c>
c7e27380:	e1a0c001 	mov	ip, r1
c7e27384:	eafffff8 	b	c7e2736c <eth_unregister+0x18>
	     cur = cur->next)
		;

	/* Device not found */
	if (cur->next != dev)
c7e27388:	e1520000 	cmp	r2, r0
c7e2738c:	1a000011 	bne	c7e273d8 <eth_unregister+0x84>
		return -1;

	cur->next = dev->next;
c7e27390:	e5913034 	ldr	r3, [r1, #52]

	if (eth_devices == dev)
c7e27394:	e1520001 	cmp	r2, r1

	/* Device not found */
	if (cur->next != dev)
		return -1;

	cur->next = dev->next;
c7e27398:	e58c3034 	str	r3, [ip, #52]

	if (eth_devices == dev)
c7e2739c:	1a000004 	bne	c7e273b4 <eth_unregister+0x60>
		eth_devices = dev->next == eth_devices ? NULL : dev->next;
c7e273a0:	e5913034 	ldr	r3, [r1, #52]
c7e273a4:	e59f203c 	ldr	r2, [pc, #60]	; c7e273e8 <eth_unregister+0x94>
c7e273a8:	e1530001 	cmp	r3, r1
c7e273ac:	03a03000 	moveq	r3, #0	; 0x0
c7e273b0:	e5823000 	str	r3, [r2]

	if (eth_current == dev) {
c7e273b4:	e59f202c 	ldr	r2, [pc, #44]	; c7e273e8 <eth_unregister+0x94>
c7e273b8:	e5923004 	ldr	r3, [r2, #4]
c7e273bc:	e1530001 	cmp	r3, r1
c7e273c0:	1a000002 	bne	c7e273d0 <eth_unregister+0x7c>
		eth_current = eth_devices;
c7e273c4:	e5923000 	ldr	r3, [r2]
c7e273c8:	e5823004 	str	r3, [r2, #4]
		eth_current_changed();
c7e273cc:	ebffff85 	bl	c7e271e8 <eth_current_changed>
c7e273d0:	e3a00000 	mov	r0, #0	; 0x0
c7e273d4:	e8bd8010 	pop	{r4, pc}
c7e273d8:	e3e00000 	mvn	r0, #0	; 0x0
	}

	return 0;
}
c7e273dc:	e8bd8010 	pop	{r4, pc}
	if (eth_devices == dev)
		eth_devices = dev->next == eth_devices ? NULL : dev->next;

	if (eth_current == dev) {
		eth_current = eth_devices;
		eth_current_changed();
c7e273e0:	e1a01000 	mov	r1, r0
c7e273e4:	eaffffe9 	b	c7e27390 <eth_unregister+0x3c>
c7e273e8:	c7e72984 	.word	0xc7e72984

c7e273ec <bootstage_mark>:
 * This is a dummy implementation which just calls show_boot_progress(),
 * and won't even do that unless CONFIG_SHOW_BOOT_PROGRESS is defined
 */

static inline ulong bootstage_mark(enum bootstage_id id)
{
c7e273ec:	e92d4010 	push	{r4, lr}
	show_boot_progress(id);
c7e273f0:	ebff9921 	bl	c7e0d87c <__show_boot_progress>
	return 0;
}
c7e273f4:	e3a00000 	mov	r0, #0	; 0x0
c7e273f8:	e8bd8010 	pop	{r4, pc}

c7e273fc <eth_register>:

	return ret;
}

int eth_register(struct eth_device *dev)
{
c7e273fc:	e92d4010 	push	{r4, lr}
c7e27400:	e1a04000 	mov	r4, r0
	struct eth_device *d;
	static int index;

	assert(strlen(dev->name) < sizeof(dev->name));
c7e27404:	ebffed4b 	bl	c7e22938 <strlen>

	if (!eth_devices) {
c7e27408:	e59f3058 	ldr	r3, [pc, #88]	; c7e27468 <eth_register+0x6c>
c7e2740c:	e5932000 	ldr	r2, [r3]
c7e27410:	e3520000 	cmp	r2, #0	; 0x0
		eth_current = eth_devices = dev;
		eth_current_changed();
c7e27414:	11a03002 	movne	r3, r2
	struct eth_device *d;
	static int index;

	assert(strlen(dev->name) < sizeof(dev->name));

	if (!eth_devices) {
c7e27418:	1a000003 	bne	c7e2742c <eth_register+0x30>
		eth_current = eth_devices = dev;
c7e2741c:	e5834004 	str	r4, [r3, #4]
c7e27420:	e5834000 	str	r4, [r3]
		eth_current_changed();
c7e27424:	ebffff6f 	bl	c7e271e8 <eth_current_changed>
c7e27428:	ea000004 	b	c7e27440 <eth_register+0x44>
	} else {
		for (d = eth_devices; d->next != eth_devices; d = d->next)
c7e2742c:	e5931034 	ldr	r1, [r3, #52]
c7e27430:	e1510002 	cmp	r1, r2
c7e27434:	11a03001 	movne	r3, r1
c7e27438:	1afffffb 	bne	c7e2742c <eth_register+0x30>
			;
		d->next = dev;
c7e2743c:	e5834034 	str	r4, [r3, #52]
	}

	dev->state = ETH_STATE_INIT;
	dev->next  = eth_devices;
c7e27440:	e59f3020 	ldr	r3, [pc, #32]	; c7e27468 <eth_register+0x6c>
		for (d = eth_devices; d->next != eth_devices; d = d->next)
			;
		d->next = dev;
	}

	dev->state = ETH_STATE_INIT;
c7e27444:	e3a00000 	mov	r0, #0	; 0x0
	dev->next  = eth_devices;
	dev->index = index++;
c7e27448:	e5932014 	ldr	r2, [r3, #20]
			;
		d->next = dev;
	}

	dev->state = ETH_STATE_INIT;
	dev->next  = eth_devices;
c7e2744c:	e5931000 	ldr	r1, [r3]
	dev->index = index++;
c7e27450:	e282c001 	add	ip, r2, #1	; 0x1
c7e27454:	e5842038 	str	r2, [r4, #56]
		for (d = eth_devices; d->next != eth_devices; d = d->next)
			;
		d->next = dev;
	}

	dev->state = ETH_STATE_INIT;
c7e27458:	e584001c 	str	r0, [r4, #28]
	dev->next  = eth_devices;
c7e2745c:	e5841034 	str	r1, [r4, #52]
	dev->index = index++;
c7e27460:	e583c014 	str	ip, [r3, #20]

	return 0;
}
c7e27464:	e8bd8010 	pop	{r4, pc}
c7e27468:	c7e72984 	.word	0xc7e72984

c7e2746c <eth_setenv_enetaddr>:
	eth_parse_enetaddr(getenv(name), enetaddr);
	return is_valid_ether_addr(enetaddr);
}

int eth_setenv_enetaddr(char *name, const uchar *enetaddr)
{
c7e2746c:	e92d4030 	push	{r4, r5, lr}
c7e27470:	e24dd01c 	sub	sp, sp, #28	; 0x1c
	char buf[20];

	sprintf(buf, "%pM", enetaddr);
c7e27474:	e28d4004 	add	r4, sp, #4	; 0x4
	eth_parse_enetaddr(getenv(name), enetaddr);
	return is_valid_ether_addr(enetaddr);
}

int eth_setenv_enetaddr(char *name, const uchar *enetaddr)
{
c7e27478:	e1a02001 	mov	r2, r1
c7e2747c:	e1a05000 	mov	r5, r0
	char buf[20];

	sprintf(buf, "%pM", enetaddr);
c7e27480:	e59f1018 	ldr	r1, [pc, #24]	; c7e274a0 <eth_setenv_enetaddr+0x34>
c7e27484:	e1a00004 	mov	r0, r4
c7e27488:	ebfff268 	bl	c7e23e30 <sprintf>

	return setenv(name, buf);
c7e2748c:	e1a00005 	mov	r0, r5
c7e27490:	e1a01004 	mov	r1, r4
c7e27494:	ebff806d 	bl	c7e07650 <setenv>
}
c7e27498:	e28dd01c 	add	sp, sp, #28	; 0x1c
c7e2749c:	e8bd8030 	pop	{r4, r5, pc}
c7e274a0:	c7e34b9c 	.word	0xc7e34b9c

c7e274a4 <eth_get_dev_by_name>:

static struct eth_device *eth_devices;
struct eth_device *eth_current;

struct eth_device *eth_get_dev_by_name(const char *devname)
{
c7e274a4:	e92d4070 	push	{r4, r5, r6, lr}
	struct eth_device *dev, *target_dev;

	BUG_ON(devname == NULL);
c7e274a8:	e2505000 	subs	r5, r0, #0	; 0x0
c7e274ac:	1a000006 	bne	c7e274cc <eth_get_dev_by_name+0x28>
c7e274b0:	e59f005c 	ldr	r0, [pc, #92]	; c7e27514 <eth_get_dev_by_name+0x70>
c7e274b4:	e59f105c 	ldr	r1, [pc, #92]	; c7e27518 <eth_get_dev_by_name+0x74>
c7e274b8:	e3a02083 	mov	r2, #131	; 0x83
c7e274bc:	e59f3058 	ldr	r3, [pc, #88]	; c7e2751c <eth_get_dev_by_name+0x78>
c7e274c0:	ebff8564 	bl	c7e08a58 <printf>
c7e274c4:	e59f0054 	ldr	r0, [pc, #84]	; c7e27520 <eth_get_dev_by_name+0x7c>
c7e274c8:	ebffef8a 	bl	c7e232f8 <panic>

	if (!eth_devices)
c7e274cc:	e59f3050 	ldr	r3, [pc, #80]	; c7e27524 <eth_get_dev_by_name+0x80>
c7e274d0:	e5934000 	ldr	r4, [r3]
c7e274d4:	e3540000 	cmp	r4, #0	; 0x0
c7e274d8:	0a00000b 	beq	c7e2750c <eth_get_dev_by_name+0x68>
		return NULL;

	dev = eth_devices;
	target_dev = NULL;
	do {
		if (strcmp(devname, dev->name) == 0) {
c7e274dc:	e1a00005 	mov	r0, r5
c7e274e0:	e1a01004 	mov	r1, r4
c7e274e4:	ebffecdd 	bl	c7e22860 <strcmp>
c7e274e8:	e3500000 	cmp	r0, #0	; 0x0
c7e274ec:	1a000001 	bne	c7e274f8 <eth_get_dev_by_name+0x54>
c7e274f0:	e1a00004 	mov	r0, r4
c7e274f4:	e8bd8070 	pop	{r4, r5, r6, pc}
			target_dev = dev;
			break;
		}
		dev = dev->next;
	} while (dev != eth_devices);
c7e274f8:	e59f3024 	ldr	r3, [pc, #36]	; c7e27524 <eth_get_dev_by_name+0x80>
	do {
		if (strcmp(devname, dev->name) == 0) {
			target_dev = dev;
			break;
		}
		dev = dev->next;
c7e274fc:	e5944034 	ldr	r4, [r4, #52]
	} while (dev != eth_devices);
c7e27500:	e5933000 	ldr	r3, [r3]
c7e27504:	e1540003 	cmp	r4, r3
c7e27508:	eafffff2 	b	c7e274d8 <eth_get_dev_by_name+0x34>
c7e2750c:	e3a00000 	mov	r0, #0	; 0x0

	return target_dev;
}
c7e27510:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e27514:	c7e30403 	.word	0xc7e30403
c7e27518:	c7e34ba0 	.word	0xc7e34ba0
c7e2751c:	c7e2dd4c 	.word	0xc7e2dd4c
c7e27520:	c7e3042a 	.word	0xc7e3042a
c7e27524:	c7e72984 	.word	0xc7e72984

c7e27528 <eth_parse_enetaddr>:
#include <net.h>
#include <miiphy.h>
#include <phy.h>

void eth_parse_enetaddr(const char *addr, uchar *enetaddr)
{
c7e27528:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
c7e2752c:	e1a04000 	mov	r4, r0
c7e27530:	e1a06001 	mov	r6, r1
c7e27534:	e3a05000 	mov	r5, #0	; 0x0
	char *end;
	int i;

	for (i = 0; i < 6; ++i) {
		enetaddr[i] = addr ? simple_strtoul(addr, &end, 16) : 0;
c7e27538:	e3540000 	cmp	r4, #0	; 0x0
c7e2753c:	e1a00004 	mov	r0, r4
c7e27540:	e28d1004 	add	r1, sp, #4	; 0x4
c7e27544:	e3a02010 	mov	r2, #16	; 0x10
c7e27548:	0a000001 	beq	c7e27554 <eth_parse_enetaddr+0x2c>
c7e2754c:	ebffee83 	bl	c7e22f60 <simple_strtoul>
c7e27550:	e20000ff 	and	r0, r0, #255	; 0xff
		if (addr)
c7e27554:	e3540000 	cmp	r4, #0	; 0x0
{
	char *end;
	int i;

	for (i = 0; i < 6; ++i) {
		enetaddr[i] = addr ? simple_strtoul(addr, &end, 16) : 0;
c7e27558:	e7c60005 	strb	r0, [r6, r5]
		if (addr)
c7e2755c:	0a000004 	beq	c7e27574 <eth_parse_enetaddr+0x4c>
			addr = (*end) ? end + 1 : end;
c7e27560:	e59d2004 	ldr	r2, [sp, #4]
c7e27564:	e5d23000 	ldrb	r3, [r2]
c7e27568:	e2824001 	add	r4, r2, #1	; 0x1
c7e2756c:	e3530000 	cmp	r3, #0	; 0x0
c7e27570:	01a04002 	moveq	r4, r2
void eth_parse_enetaddr(const char *addr, uchar *enetaddr)
{
	char *end;
	int i;

	for (i = 0; i < 6; ++i) {
c7e27574:	e2855001 	add	r5, r5, #1	; 0x1
c7e27578:	e3550006 	cmp	r5, #6	; 0x6
c7e2757c:	1affffed 	bne	c7e27538 <eth_parse_enetaddr+0x10>
		enetaddr[i] = addr ? simple_strtoul(addr, &end, 16) : 0;
		if (addr)
			addr = (*end) ? end + 1 : end;
	}
}
c7e27580:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}

c7e27584 <eth_getenv_enetaddr>:

int eth_getenv_enetaddr(char *name, uchar *enetaddr)
{
c7e27584:	e92d4010 	push	{r4, lr}
c7e27588:	e1a04001 	mov	r4, r1
	eth_parse_enetaddr(getenv(name), enetaddr);
c7e2758c:	ebff7ec2 	bl	c7e0709c <getenv>
c7e27590:	e1a01004 	mov	r1, r4
c7e27594:	ebffffe3 	bl	c7e27528 <eth_parse_enetaddr>
	return is_valid_ether_addr(enetaddr);
c7e27598:	e1a00004 	mov	r0, r4
}
c7e2759c:	e8bd4010 	pop	{r4, lr}
}

int eth_getenv_enetaddr(char *name, uchar *enetaddr)
{
	eth_parse_enetaddr(getenv(name), enetaddr);
	return is_valid_ether_addr(enetaddr);
c7e275a0:	eafffeb9 	b	c7e2708c <is_valid_ether_addr>

c7e275a4 <eth_getenv_enetaddr_by_index>:
	return setenv(name, buf);
}

int eth_getenv_enetaddr_by_index(const char *base_name, int index,
				 uchar *enetaddr)
{
c7e275a4:	e92d4030 	push	{r4, r5, lr}
	char enetvar[32];
	sprintf(enetvar, index ? "%s%daddr" : "%saddr", base_name, index);
c7e275a8:	e59fc03c 	ldr	ip, [pc, #60]	; c7e275ec <eth_getenv_enetaddr_by_index+0x48>
c7e275ac:	e59fe03c 	ldr	lr, [pc, #60]	; c7e275f0 <eth_getenv_enetaddr_by_index+0x4c>
	return setenv(name, buf);
}

int eth_getenv_enetaddr_by_index(const char *base_name, int index,
				 uchar *enetaddr)
{
c7e275b0:	e24dd024 	sub	sp, sp, #36	; 0x24
	char enetvar[32];
	sprintf(enetvar, index ? "%s%daddr" : "%saddr", base_name, index);
c7e275b4:	e3510000 	cmp	r1, #0	; 0x0
c7e275b8:	e1a03001 	mov	r3, r1
	return setenv(name, buf);
}

int eth_getenv_enetaddr_by_index(const char *base_name, int index,
				 uchar *enetaddr)
{
c7e275bc:	e1a05002 	mov	r5, r2
	char enetvar[32];
	sprintf(enetvar, index ? "%s%daddr" : "%saddr", base_name, index);
c7e275c0:	11a0100c 	movne	r1, ip
c7e275c4:	01a0100e 	moveq	r1, lr
c7e275c8:	e1a02000 	mov	r2, r0
c7e275cc:	e1a0000d 	mov	r0, sp
c7e275d0:	ebfff216 	bl	c7e23e30 <sprintf>
	return eth_getenv_enetaddr(enetvar, enetaddr);
c7e275d4:	e1a0000d 	mov	r0, sp
c7e275d8:	e1a01005 	mov	r1, r5

int eth_getenv_enetaddr_by_index(const char *base_name, int index,
				 uchar *enetaddr)
{
	char enetvar[32];
	sprintf(enetvar, index ? "%s%daddr" : "%saddr", base_name, index);
c7e275dc:	e1a0400d 	mov	r4, sp
	return eth_getenv_enetaddr(enetvar, enetaddr);
c7e275e0:	ebffffe7 	bl	c7e27584 <eth_getenv_enetaddr>
}
c7e275e4:	e28dd024 	add	sp, sp, #36	; 0x24
c7e275e8:	e8bd8030 	pop	{r4, r5, pc}
c7e275ec:	c7e34bad 	.word	0xc7e34bad
c7e275f0:	c7e34ba6 	.word	0xc7e34ba6

c7e275f4 <eth_init>:

int eth_init(bd_t *bis)
{
	struct eth_device *old_current, *dev;

	if (!eth_current) {
c7e275f4:	e59f20ac 	ldr	r2, [pc, #172]	; c7e276a8 <eth_init+0xb4>

#endif


int eth_init(bd_t *bis)
{
c7e275f8:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
	struct eth_device *old_current, *dev;

	if (!eth_current) {
c7e275fc:	e5923004 	ldr	r3, [r2, #4]

#endif


int eth_init(bd_t *bis)
{
c7e27600:	e1a06000 	mov	r6, r0
	struct eth_device *old_current, *dev;

	if (!eth_current) {
c7e27604:	e3530000 	cmp	r3, #0	; 0x0
		puts("No ethernet found.\n");
		return -1;
	}

	/* Sync environment with network devices */
	dev = eth_devices;
c7e27608:	15924000 	ldrne	r4, [r2]

int eth_init(bd_t *bis)
{
	struct eth_device *old_current, *dev;

	if (!eth_current) {
c7e2760c:	1a000002 	bne	c7e2761c <eth_init+0x28>
		puts("No ethernet found.\n");
c7e27610:	e59f0094 	ldr	r0, [pc, #148]	; c7e276ac <eth_init+0xb8>
c7e27614:	ebff84f4 	bl	c7e089ec <puts>
c7e27618:	ea000020 	b	c7e276a0 <eth_init+0xac>
	/* Sync environment with network devices */
	dev = eth_devices;
	do {
		uchar env_enetaddr[6];

		if (eth_getenv_enetaddr_by_index("eth", dev->index,
c7e2761c:	e28d5002 	add	r5, sp, #2	; 0x2
c7e27620:	e5941038 	ldr	r1, [r4, #56]
c7e27624:	e1a02005 	mov	r2, r5
c7e27628:	e59f0080 	ldr	r0, [pc, #128]	; c7e276b0 <eth_init+0xbc>
c7e2762c:	ebffffdc 	bl	c7e275a4 <eth_getenv_enetaddr_by_index>
c7e27630:	e3500000 	cmp	r0, #0	; 0x0
c7e27634:	0a000003 	beq	c7e27648 <eth_init+0x54>
						 env_enetaddr))
			memcpy(dev->enetaddr, env_enetaddr, 6);
c7e27638:	e1a01005 	mov	r1, r5
c7e2763c:	e2840010 	add	r0, r4, #16	; 0x10
c7e27640:	e3a02006 	mov	r2, #6	; 0x6
c7e27644:	ebffed7c 	bl	c7e22c3c <memcpy>

		dev = dev->next;
	} while (dev != eth_devices);
c7e27648:	e59f2058 	ldr	r2, [pc, #88]	; c7e276a8 <eth_init+0xb4>

		if (eth_getenv_enetaddr_by_index("eth", dev->index,
						 env_enetaddr))
			memcpy(dev->enetaddr, env_enetaddr, 6);

		dev = dev->next;
c7e2764c:	e5944034 	ldr	r4, [r4, #52]
	} while (dev != eth_devices);
c7e27650:	e5923000 	ldr	r3, [r2]
c7e27654:	e1540003 	cmp	r4, r3
c7e27658:	1affffef 	bne	c7e2761c <eth_init+0x28>

	old_current = eth_current;
c7e2765c:	e5925004 	ldr	r5, [r2, #4]
	do {
		debug("Trying %s\n", eth_current->name);

		if (eth_current->init(eth_current, bis) >= 0) {
c7e27660:	e59f4040 	ldr	r4, [pc, #64]	; c7e276a8 <eth_init+0xb4>
c7e27664:	e1a01006 	mov	r1, r6
c7e27668:	e5943004 	ldr	r3, [r4, #4]
c7e2766c:	e1a00003 	mov	r0, r3
c7e27670:	e1a0e00f 	mov	lr, pc
c7e27674:	e593f020 	ldr	pc, [r3, #32]
c7e27678:	e3500000 	cmp	r0, #0	; 0x0

			return 0;
		}
		debug("FAIL\n");

		eth_try_another(0);
c7e2767c:	e3a00000 	mov	r0, #0	; 0x0
	old_current = eth_current;
	do {
		debug("Trying %s\n", eth_current->name);

		if (eth_current->init(eth_current, bis) >= 0) {
			eth_current->state = ETH_STATE_ACTIVE;
c7e27680:	a5942004 	ldrge	r2, [r4, #4]
c7e27684:	a3a03002 	movge	r3, #2	; 0x2
c7e27688:	a582301c 	strge	r3, [r2, #28]
c7e2768c:	aa000004 	bge	c7e276a4 <eth_init+0xb0>

			return 0;
		}
		debug("FAIL\n");

		eth_try_another(0);
c7e27690:	ebffff10 	bl	c7e272d8 <eth_try_another>
	} while (old_current != eth_current);
c7e27694:	e5943004 	ldr	r3, [r4, #4]
c7e27698:	e1550003 	cmp	r5, r3
c7e2769c:	1affffef 	bne	c7e27660 <eth_init+0x6c>
c7e276a0:	e3e00000 	mvn	r0, #0	; 0x0

	return -1;
}
c7e276a4:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
c7e276a8:	c7e72984 	.word	0xc7e72984
c7e276ac:	c7e34ddd 	.word	0xc7e34ddd
c7e276b0:	c7e34bb6 	.word	0xc7e34bb6

c7e276b4 <eth_write_hwaddr>:
		setenv("ethact", NULL);
}

int eth_write_hwaddr(struct eth_device *dev, const char *base_name,
		   int eth_number)
{
c7e276b4:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e276b8:	e24dd038 	sub	sp, sp, #56	; 0x38
c7e276bc:	e1a0a001 	mov	sl, r1
	unsigned char env_enetaddr[6];
	int ret = 0;

	eth_getenv_enetaddr_by_index(base_name, eth_number, env_enetaddr);
c7e276c0:	e28d4032 	add	r4, sp, #50	; 0x32
c7e276c4:	e1a01002 	mov	r1, r2
		setenv("ethact", NULL);
}

int eth_write_hwaddr(struct eth_device *dev, const char *base_name,
		   int eth_number)
{
c7e276c8:	e1a06000 	mov	r6, r0
c7e276cc:	e1a07002 	mov	r7, r2
	unsigned char env_enetaddr[6];
	int ret = 0;

	eth_getenv_enetaddr_by_index(base_name, eth_number, env_enetaddr);
c7e276d0:	e1a0000a 	mov	r0, sl
c7e276d4:	e1a02004 	mov	r2, r4
c7e276d8:	ebffffb1 	bl	c7e275a4 <eth_getenv_enetaddr_by_index>

	if (memcmp(env_enetaddr, "\0\0\0\0\0\0", 6)) {
c7e276dc:	e1a00004 	mov	r0, r4
c7e276e0:	e59f1130 	ldr	r1, [pc, #304]	; c7e27818 <eth_write_hwaddr+0x164>
c7e276e4:	e3a02006 	mov	r2, #6	; 0x6
c7e276e8:	ebffed8d 	bl	c7e22d24 <memcmp>
c7e276ec:	e3500000 	cmp	r0, #0	; 0x0
c7e276f0:	e2865010 	add	r5, r6, #16	; 0x10
c7e276f4:	0a000019 	beq	c7e27760 <eth_write_hwaddr+0xac>
		if (memcmp(dev->enetaddr, "\0\0\0\0\0\0", 6) &&
c7e276f8:	e1a00005 	mov	r0, r5
c7e276fc:	e59f1114 	ldr	r1, [pc, #276]	; c7e27818 <eth_write_hwaddr+0x164>
c7e27700:	e3a02006 	mov	r2, #6	; 0x6
c7e27704:	ebffed86 	bl	c7e22d24 <memcmp>
c7e27708:	e3500000 	cmp	r0, #0	; 0x0
c7e2770c:	0a00000e 	beq	c7e2774c <eth_write_hwaddr+0x98>
c7e27710:	e1a00005 	mov	r0, r5
c7e27714:	e1a01004 	mov	r1, r4
c7e27718:	e3a02006 	mov	r2, #6	; 0x6
c7e2771c:	ebffed80 	bl	c7e22d24 <memcmp>
c7e27720:	e3500000 	cmp	r0, #0	; 0x0
c7e27724:	0a000008 	beq	c7e2774c <eth_write_hwaddr+0x98>
				memcmp(dev->enetaddr, env_enetaddr, 6)) {
			printf("\nWarning: %s MAC addresses don't match:\n",
c7e27728:	e1a01006 	mov	r1, r6
c7e2772c:	e59f00e8 	ldr	r0, [pc, #232]	; c7e2781c <eth_write_hwaddr+0x168>
c7e27730:	ebff84c8 	bl	c7e08a58 <printf>
				dev->name);
			printf("Address in SROM is         %pM\n",
c7e27734:	e1a01005 	mov	r1, r5
c7e27738:	e59f00e0 	ldr	r0, [pc, #224]	; c7e27820 <eth_write_hwaddr+0x16c>
c7e2773c:	ebff84c5 	bl	c7e08a58 <printf>
				dev->enetaddr);
			printf("Address in environment is  %pM\n",
c7e27740:	e1a01004 	mov	r1, r4
c7e27744:	e59f00d8 	ldr	r0, [pc, #216]	; c7e27824 <eth_write_hwaddr+0x170>
c7e27748:	ebff84c2 	bl	c7e08a58 <printf>
				env_enetaddr);
		}

		memcpy(dev->enetaddr, env_enetaddr, 6);
c7e2774c:	e1a00005 	mov	r0, r5
c7e27750:	e28d1032 	add	r1, sp, #50	; 0x32
c7e27754:	e3a02006 	mov	r2, #6	; 0x6
c7e27758:	ebffed37 	bl	c7e22c3c <memcpy>
c7e2775c:	ea000012 	b	c7e277ac <eth_write_hwaddr+0xf8>
	} else if (is_valid_ether_addr(dev->enetaddr)) {
c7e27760:	e1a00005 	mov	r0, r5
c7e27764:	ebfffe48 	bl	c7e2708c <is_valid_ether_addr>
c7e27768:	e3500000 	cmp	r0, #0	; 0x0
c7e2776c:	0a00000e 	beq	c7e277ac <eth_write_hwaddr+0xf8>

static inline int eth_setenv_enetaddr_by_index(const char *base_name, int index,
				 uchar *enetaddr)
{
	char enetvar[32];
	sprintf(enetvar, index ? "%s%daddr" : "%saddr", base_name, index);
c7e27770:	e59f30b0 	ldr	r3, [pc, #176]	; c7e27828 <eth_write_hwaddr+0x174>
c7e27774:	e3570000 	cmp	r7, #0	; 0x0
c7e27778:	e28d4003 	add	r4, sp, #3	; 0x3
c7e2777c:	e59f10a8 	ldr	r1, [pc, #168]	; c7e2782c <eth_write_hwaddr+0x178>
c7e27780:	e1a0200a 	mov	r2, sl
c7e27784:	01a01003 	moveq	r1, r3
c7e27788:	e1a00004 	mov	r0, r4
c7e2778c:	e1a03007 	mov	r3, r7
c7e27790:	ebfff1a6 	bl	c7e23e30 <sprintf>
	return eth_setenv_enetaddr(enetvar, enetaddr);
c7e27794:	e1a01005 	mov	r1, r5
c7e27798:	e1a00004 	mov	r0, r4
c7e2779c:	ebffff32 	bl	c7e2746c <eth_setenv_enetaddr>

		memcpy(dev->enetaddr, env_enetaddr, 6);
	} else if (is_valid_ether_addr(dev->enetaddr)) {
		eth_setenv_enetaddr_by_index(base_name, eth_number,
					     dev->enetaddr);
		printf("\nWarning: %s using MAC address from net device\n",
c7e277a0:	e59f0088 	ldr	r0, [pc, #136]	; c7e27830 <eth_write_hwaddr+0x17c>
c7e277a4:	e1a01006 	mov	r1, r6
c7e277a8:	ebff84aa 	bl	c7e08a58 <printf>
			dev->name);
	}

	if (dev->write_hwaddr &&
c7e277ac:	e5963030 	ldr	r3, [r6, #48]
c7e277b0:	e3530000 	cmp	r3, #0	; 0x0
c7e277b4:	0a000014 	beq	c7e2780c <eth_write_hwaddr+0x158>

static int eth_mac_skip(int index)
{
	char enetvar[15];
	char *skip_state;
	sprintf(enetvar, index ? "eth%dmacskip" : "ethmacskip", index);
c7e277b8:	e59f3074 	ldr	r3, [pc, #116]	; c7e27834 <eth_write_hwaddr+0x180>
c7e277bc:	e3570000 	cmp	r7, #0	; 0x0
c7e277c0:	e28d4023 	add	r4, sp, #35	; 0x23
c7e277c4:	e59f106c 	ldr	r1, [pc, #108]	; c7e27838 <eth_write_hwaddr+0x184>
c7e277c8:	e1a02007 	mov	r2, r7
c7e277cc:	01a01003 	moveq	r1, r3
c7e277d0:	e1a00004 	mov	r0, r4
c7e277d4:	ebfff195 	bl	c7e23e30 <sprintf>
	return ((skip_state = getenv(enetvar)) != NULL);
c7e277d8:	e1a00004 	mov	r0, r4
c7e277dc:	ebff7e2e 	bl	c7e0709c <getenv>
					     dev->enetaddr);
		printf("\nWarning: %s using MAC address from net device\n",
			dev->name);
	}

	if (dev->write_hwaddr &&
c7e277e0:	e3500000 	cmp	r0, #0	; 0x0
c7e277e4:	1a000008 	bne	c7e2780c <eth_write_hwaddr+0x158>
			!eth_mac_skip(eth_number)) {
		if (!is_valid_ether_addr(dev->enetaddr))
c7e277e8:	e2860010 	add	r0, r6, #16	; 0x10
c7e277ec:	ebfffe26 	bl	c7e2708c <is_valid_ether_addr>
c7e277f0:	e3500000 	cmp	r0, #0	; 0x0
c7e277f4:	03e00000 	mvneq	r0, #0	; 0x0
c7e277f8:	0a000004 	beq	c7e27810 <eth_write_hwaddr+0x15c>
			return -1;

		ret = dev->write_hwaddr(dev);
c7e277fc:	e1a00006 	mov	r0, r6
c7e27800:	e1a0e00f 	mov	lr, pc
c7e27804:	e596f030 	ldr	pc, [r6, #48]
c7e27808:	ea000000 	b	c7e27810 <eth_write_hwaddr+0x15c>
c7e2780c:	e3a00000 	mov	r0, #0	; 0x0
	}

	return ret;
}
c7e27810:	e28dd038 	add	sp, sp, #56	; 0x38
c7e27814:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e27818:	c7e2dd60 	.word	0xc7e2dd60
c7e2781c:	c7e34bba 	.word	0xc7e34bba
c7e27820:	c7e34be3 	.word	0xc7e34be3
c7e27824:	c7e34c03 	.word	0xc7e34c03
c7e27828:	c7e34ba6 	.word	0xc7e34ba6
c7e2782c:	c7e34bad 	.word	0xc7e34bad
c7e27830:	c7e34c23 	.word	0xc7e34c23
c7e27834:	c7e34c53 	.word	0xc7e34c53
c7e27838:	c7e34c5e 	.word	0xc7e34c5e

c7e2783c <eth_initialize>:
}

int eth_initialize(bd_t *bis)
{
	int num_devices = 0;
	eth_devices = NULL;
c7e2783c:	e59f2180 	ldr	r2, [pc, #384]	; c7e279c4 <eth_initialize+0x188>
c7e27840:	e3a03000 	mov	r3, #0	; 0x0
	if ((s = getenv("bootfile")) != NULL)
		copy_filename(BootFile, s, sizeof(BootFile));
}

int eth_initialize(bd_t *bis)
{
c7e27844:	e92d4070 	push	{r4, r5, r6, lr}
	int num_devices = 0;
	eth_devices = NULL;
	eth_current = NULL;
c7e27848:	e5823004 	str	r3, [r2, #4]
}

int eth_initialize(bd_t *bis)
{
	int num_devices = 0;
	eth_devices = NULL;
c7e2784c:	e5823000 	str	r3, [r2]
	if ((s = getenv("bootfile")) != NULL)
		copy_filename(BootFile, s, sizeof(BootFile));
}

int eth_initialize(bd_t *bis)
{
c7e27850:	e1a04000 	mov	r4, r0
	int num_devices = 0;
	eth_devices = NULL;
	eth_current = NULL;

	bootstage_mark(BOOTSTAGE_ID_NET_ETH_START);
c7e27854:	e3a00040 	mov	r0, #64	; 0x40
c7e27858:	ebfffee3 	bl	c7e273ec <bootstage_mark>

static void eth_env_init(bd_t *bis)
{
	const char *s;

	if ((s = getenv("bootfile")) != NULL)
c7e2785c:	e59f0164 	ldr	r0, [pc, #356]	; c7e279c8 <eth_initialize+0x18c>
c7e27860:	ebff7e0d 	bl	c7e0709c <getenv>
c7e27864:	e3500000 	cmp	r0, #0	; 0x0
c7e27868:	0a000003 	beq	c7e2787c <eth_initialize+0x40>
		copy_filename(BootFile, s, sizeof(BootFile));
c7e2786c:	e1a01000 	mov	r1, r0
c7e27870:	e3a02080 	mov	r2, #128	; 0x80
c7e27874:	e59f0150 	ldr	r0, [pc, #336]	; c7e279cc <eth_initialize+0x190>
c7e27878:	eb0000a1 	bl	c7e27b04 <copy_filename>

	/*
	 * If board-specific initialization exists, call it.
	 * If not, call a CPU-specific one
	 */
	if (board_eth_init != __def_eth_init) {
c7e2787c:	e59f214c 	ldr	r2, [pc, #332]	; c7e279d0 <eth_initialize+0x194>
c7e27880:	e59f314c 	ldr	r3, [pc, #332]	; c7e279d4 <eth_initialize+0x198>
c7e27884:	e1520003 	cmp	r2, r3
c7e27888:	0a000005 	beq	c7e278a4 <eth_initialize+0x68>
		if (board_eth_init(bis) < 0)
c7e2788c:	e1a00004 	mov	r0, r4
c7e27890:	eb000af7 	bl	c7e2a474 <board_eth_init>
c7e27894:	e3500000 	cmp	r0, #0	; 0x0
			printf("Board Net Initialization Failed\n");
c7e27898:	b59f0138 	ldrlt	r0, [pc, #312]	; c7e279d8 <eth_initialize+0x19c>
	/*
	 * If board-specific initialization exists, call it.
	 * If not, call a CPU-specific one
	 */
	if (board_eth_init != __def_eth_init) {
		if (board_eth_init(bis) < 0)
c7e2789c:	aa00000b 	bge	c7e278d0 <eth_initialize+0x94>
c7e278a0:	ea000009 	b	c7e278cc <eth_initialize+0x90>
			printf("Board Net Initialization Failed\n");
	} else if (cpu_eth_init != __def_eth_init) {
c7e278a4:	e59f3130 	ldr	r3, [pc, #304]	; c7e279dc <eth_initialize+0x1a0>
c7e278a8:	e1530002 	cmp	r3, r2
c7e278ac:	0a000005 	beq	c7e278c8 <eth_initialize+0x8c>
		if (cpu_eth_init(bis) < 0)
c7e278b0:	e1a00004 	mov	r0, r4
c7e278b4:	ebfffe06 	bl	c7e270d4 <cpu_eth_init>
c7e278b8:	e3500000 	cmp	r0, #0	; 0x0
			printf("CPU Net Initialization Failed\n");
c7e278bc:	b59f011c 	ldrlt	r0, [pc, #284]	; c7e279e0 <eth_initialize+0x1a4>
	 */
	if (board_eth_init != __def_eth_init) {
		if (board_eth_init(bis) < 0)
			printf("Board Net Initialization Failed\n");
	} else if (cpu_eth_init != __def_eth_init) {
		if (cpu_eth_init(bis) < 0)
c7e278c0:	aa000002 	bge	c7e278d0 <eth_initialize+0x94>
c7e278c4:	ea000000 	b	c7e278cc <eth_initialize+0x90>
			printf("CPU Net Initialization Failed\n");
	} else
		printf("Net Initialization Skipped\n");
c7e278c8:	e59f0114 	ldr	r0, [pc, #276]	; c7e279e4 <eth_initialize+0x1a8>
c7e278cc:	ebff8461 	bl	c7e08a58 <printf>

	if (!eth_devices) {
c7e278d0:	e59f30ec 	ldr	r3, [pc, #236]	; c7e279c4 <eth_initialize+0x188>
c7e278d4:	e5934000 	ldr	r4, [r3]
c7e278d8:	e3540000 	cmp	r4, #0	; 0x0
c7e278dc:	1a000005 	bne	c7e278f8 <eth_initialize+0xbc>
		puts("No ethernet found.\n");
c7e278e0:	e59f0100 	ldr	r0, [pc, #256]	; c7e279e8 <eth_initialize+0x1ac>
c7e278e4:	ebff8440 	bl	c7e089ec <puts>

static inline ulong bootstage_error(enum bootstage_id id)
{
	show_boot_progress(-id);
c7e278e8:	e3e0003f 	mvn	r0, #63	; 0x3f
c7e278ec:	ebff97e2 	bl	c7e0d87c <__show_boot_progress>
c7e278f0:	e1a05004 	mov	r5, r4
c7e278f4:	ea000030 	b	c7e279bc <eth_initialize+0x180>
		bootstage_error(BOOTSTAGE_ID_NET_ETH_START);
	} else {
		struct eth_device *dev = eth_devices;
		char *ethprime = getenv("ethprime");
c7e278f8:	e59f00ec 	ldr	r0, [pc, #236]	; c7e279ec <eth_initialize+0x1b0>
c7e278fc:	ebff7de6 	bl	c7e0709c <getenv>
c7e27900:	e1a06000 	mov	r6, r0

		bootstage_mark(BOOTSTAGE_ID_NET_ETH_INIT);
c7e27904:	e3a00041 	mov	r0, #65	; 0x41
c7e27908:	ebfffeb7 	bl	c7e273ec <bootstage_mark>
c7e2790c:	e3a05000 	mov	r5, #0	; 0x0
		do {
			if (dev->index)
c7e27910:	e5943038 	ldr	r3, [r4, #56]

			if (eth_write_hwaddr(dev, "eth", dev->index))
				puts("\nWarning: failed to set MAC address\n");

			dev = dev->next;
			num_devices++;
c7e27914:	e2855001 	add	r5, r5, #1	; 0x1
		struct eth_device *dev = eth_devices;
		char *ethprime = getenv("ethprime");

		bootstage_mark(BOOTSTAGE_ID_NET_ETH_INIT);
		do {
			if (dev->index)
c7e27918:	e3530000 	cmp	r3, #0	; 0x0
c7e2791c:	0a000001 	beq	c7e27928 <eth_initialize+0xec>
				puts(", ");
c7e27920:	e59f00c8 	ldr	r0, [pc, #200]	; c7e279f0 <eth_initialize+0x1b4>
c7e27924:	ebff8430 	bl	c7e089ec <puts>

			printf("%s", dev->name);
c7e27928:	e1a01004 	mov	r1, r4
c7e2792c:	e59f00c0 	ldr	r0, [pc, #192]	; c7e279f4 <eth_initialize+0x1b8>
c7e27930:	ebff8448 	bl	c7e08a58 <printf>

			if (ethprime && strcmp(dev->name, ethprime) == 0) {
c7e27934:	e3560000 	cmp	r6, #0	; 0x0
c7e27938:	e1a01006 	mov	r1, r6
c7e2793c:	e1a00004 	mov	r0, r4
c7e27940:	0a000006 	beq	c7e27960 <eth_initialize+0x124>
c7e27944:	ebffebc5 	bl	c7e22860 <strcmp>
c7e27948:	e3500000 	cmp	r0, #0	; 0x0
c7e2794c:	1a000003 	bne	c7e27960 <eth_initialize+0x124>
				eth_current = dev;
c7e27950:	e59f306c 	ldr	r3, [pc, #108]	; c7e279c4 <eth_initialize+0x188>
				puts(" [PRIME]");
c7e27954:	e59f009c 	ldr	r0, [pc, #156]	; c7e279f8 <eth_initialize+0x1bc>
				puts(", ");

			printf("%s", dev->name);

			if (ethprime && strcmp(dev->name, ethprime) == 0) {
				eth_current = dev;
c7e27958:	e5834004 	str	r4, [r3, #4]
				puts(" [PRIME]");
c7e2795c:	ebff8422 	bl	c7e089ec <puts>
			}

			if (strchr(dev->name, ' '))
c7e27960:	e3a01020 	mov	r1, #32	; 0x20
c7e27964:	e1a00004 	mov	r0, r4
c7e27968:	ebffebde 	bl	c7e228e8 <strchr>
c7e2796c:	e3500000 	cmp	r0, #0	; 0x0
				puts("\nWarning: eth device name has a space!"
c7e27970:	e59f0084 	ldr	r0, [pc, #132]	; c7e279fc <eth_initialize+0x1c0>
			if (ethprime && strcmp(dev->name, ethprime) == 0) {
				eth_current = dev;
				puts(" [PRIME]");
			}

			if (strchr(dev->name, ' '))
c7e27974:	0a000000 	beq	c7e2797c <eth_initialize+0x140>
				puts("\nWarning: eth device name has a space!"
c7e27978:	ebff841b 	bl	c7e089ec <puts>
					"\n");

			if (eth_write_hwaddr(dev, "eth", dev->index))
c7e2797c:	e5942038 	ldr	r2, [r4, #56]
c7e27980:	e1a00004 	mov	r0, r4
c7e27984:	e59f1074 	ldr	r1, [pc, #116]	; c7e27a00 <eth_initialize+0x1c4>
c7e27988:	ebffff49 	bl	c7e276b4 <eth_write_hwaddr>
c7e2798c:	e3500000 	cmp	r0, #0	; 0x0
c7e27990:	0a000001 	beq	c7e2799c <eth_initialize+0x160>
				puts("\nWarning: failed to set MAC address\n");
c7e27994:	e59f0068 	ldr	r0, [pc, #104]	; c7e27a04 <eth_initialize+0x1c8>
c7e27998:	ebff8413 	bl	c7e089ec <puts>

			dev = dev->next;
			num_devices++;
		} while (dev != eth_devices);
c7e2799c:	e59f3020 	ldr	r3, [pc, #32]	; c7e279c4 <eth_initialize+0x188>
					"\n");

			if (eth_write_hwaddr(dev, "eth", dev->index))
				puts("\nWarning: failed to set MAC address\n");

			dev = dev->next;
c7e279a0:	e5944034 	ldr	r4, [r4, #52]
			num_devices++;
		} while (dev != eth_devices);
c7e279a4:	e5933000 	ldr	r3, [r3]
c7e279a8:	e1540003 	cmp	r4, r3
c7e279ac:	1affffd7 	bne	c7e27910 <eth_initialize+0xd4>

		eth_current_changed();
c7e279b0:	ebfffe0c 	bl	c7e271e8 <eth_current_changed>
		putc('\n');
c7e279b4:	e3a0000a 	mov	r0, #10	; 0xa
c7e279b8:	ebff84b6 	bl	c7e08c98 <putc>
	}

	return num_devices;
}
c7e279bc:	e1a00005 	mov	r0, r5
c7e279c0:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e279c4:	c7e72984 	.word	0xc7e72984
c7e279c8:	c7e2f0e9 	.word	0xc7e2f0e9
c7e279cc:	c7e748d8 	.word	0xc7e748d8
c7e279d0:	c7e2a474 	.word	0xc7e2a474
c7e279d4:	c7e270d4 	.word	0xc7e270d4
c7e279d8:	c7e34c6b 	.word	0xc7e34c6b
c7e279dc:	c7e270d4 	.word	0xc7e270d4
c7e279e0:	c7e34c8c 	.word	0xc7e34c8c
c7e279e4:	c7e34cab 	.word	0xc7e34cab
c7e279e8:	c7e34ddd 	.word	0xc7e34ddd
c7e279ec:	c7e34cc7 	.word	0xc7e34cc7
c7e279f0:	c7e34cd0 	.word	0xc7e34cd0
c7e279f4:	c7e3082f 	.word	0xc7e3082f
c7e279f8:	c7e34cd3 	.word	0xc7e34cd3
c7e279fc:	c7e34cdc 	.word	0xc7e34cdc
c7e27a00:	c7e34bb6 	.word	0xc7e34bb6
c7e27a04:	c7e34d04 	.word	0xc7e34d04

c7e27a08 <__fswab16>:
#  define __swab64(x) __fswab64(x)
#endif /* OPTIMIZE */


static __inline__ __attribute__((const)) __u16 __fswab16(__u16 x)
{
c7e27a08:	e1a03420 	lsr	r3, r0, #8
c7e27a0c:	e1833400 	orr	r3, r3, r0, lsl #8
c7e27a10:	e1a03803 	lsl	r3, r3, #16
	return __arch__swab16(x);
}
c7e27a14:	e1a00823 	lsr	r0, r3, #16
c7e27a18:	e12fff1e 	bx	lr

c7e27a1c <net_set_state>:
static inline void net_set_state(enum net_loop_state state)
{
	extern enum net_loop_state net_state;

	debug_cond(DEBUG_INT_STATE, "--- NetState set to %d\n", state);
	net_state = state;
c7e27a1c:	e59f3004 	ldr	r3, [pc, #4]	; c7e27a28 <net_set_state+0xc>
c7e27a20:	e5830000 	str	r0, [r3]
}
c7e27a24:	e12fff1e 	bx	lr
c7e27a28:	c7e7299c 	.word	0xc7e7299c

c7e27a2c <startAgainTimeout>:
/**********************************************************************/

static void
startAgainTimeout(void)
{
	net_set_state(NETLOOP_RESTART);
c7e27a2c:	e3a00001 	mov	r0, #1	; 0x1
c7e27a30:	eafffff9 	b	c7e27a1c <net_set_state>

c7e27a34 <dummy_handler>:

static void dummy_handler(uchar *pkt, unsigned dport,
			IPaddr_t sip, unsigned sport,
			unsigned len)
{
}
c7e27a34:	e12fff1e 	bx	lr

c7e27a38 <net_get_udp_handler>:

rxhand_f *net_get_udp_handler(void)
{
c7e27a38:	e59f3004 	ldr	r3, [pc, #4]	; c7e27a44 <net_get_udp_handler+0xc>
	return udp_packet_handler;
}
c7e27a3c:	e5930004 	ldr	r0, [r3, #4]
c7e27a40:	e12fff1e 	bx	lr
c7e27a44:	c7e7299c 	.word	0xc7e7299c

c7e27a48 <net_set_udp_handler>:

void net_set_udp_handler(rxhand_f *f)
{
	debug_cond(DEBUG_INT_STATE, "--- NetLoop UDP handler set (%p)\n", f);
	if (f == NULL)
c7e27a48:	e3500000 	cmp	r0, #0	; 0x0
c7e27a4c:	e59f200c 	ldr	r2, [pc, #12]	; c7e27a60 <net_set_udp_handler+0x18>
		udp_packet_handler = dummy_handler;
c7e27a50:	059f300c 	ldreq	r3, [pc, #12]	; c7e27a64 <net_set_udp_handler+0x1c>
	else
		udp_packet_handler = f;
c7e27a54:	15820004 	strne	r0, [r2, #4]

void net_set_udp_handler(rxhand_f *f)
{
	debug_cond(DEBUG_INT_STATE, "--- NetLoop UDP handler set (%p)\n", f);
	if (f == NULL)
		udp_packet_handler = dummy_handler;
c7e27a58:	05823004 	streq	r3, [r2, #4]
c7e27a5c:	e12fff1e 	bx	lr
c7e27a60:	c7e7299c 	.word	0xc7e7299c
c7e27a64:	c7e27a34 	.word	0xc7e27a34

c7e27a68 <net_get_arp_handler>:
	else
		udp_packet_handler = f;
}

rxhand_f *net_get_arp_handler(void)
{
c7e27a68:	e59f3004 	ldr	r3, [pc, #4]	; c7e27a74 <net_get_arp_handler+0xc>
	return arp_packet_handler;
}
c7e27a6c:	e5930008 	ldr	r0, [r3, #8]
c7e27a70:	e12fff1e 	bx	lr
c7e27a74:	c7e7299c 	.word	0xc7e7299c

c7e27a78 <net_set_arp_handler>:

void net_set_arp_handler(rxhand_f *f)
{
	debug_cond(DEBUG_INT_STATE, "--- NetLoop ARP handler set (%p)\n", f);
	if (f == NULL)
c7e27a78:	e3500000 	cmp	r0, #0	; 0x0
c7e27a7c:	e59f200c 	ldr	r2, [pc, #12]	; c7e27a90 <net_set_arp_handler+0x18>
		arp_packet_handler = dummy_handler;
c7e27a80:	059f300c 	ldreq	r3, [pc, #12]	; c7e27a94 <net_set_arp_handler+0x1c>
	else
		arp_packet_handler = f;
c7e27a84:	15820008 	strne	r0, [r2, #8]

void net_set_arp_handler(rxhand_f *f)
{
	debug_cond(DEBUG_INT_STATE, "--- NetLoop ARP handler set (%p)\n", f);
	if (f == NULL)
		arp_packet_handler = dummy_handler;
c7e27a88:	05823008 	streq	r3, [r2, #8]
c7e27a8c:	e12fff1e 	bx	lr
c7e27a90:	c7e7299c 	.word	0xc7e7299c
c7e27a94:	c7e27a34 	.word	0xc7e27a34

c7e27a98 <NetCksum>:
}


unsigned
NetCksum(uchar *ptr, int len)
{
c7e27a98:	e3a0c000 	mov	ip, #0	; 0x0
c7e27a9c:	e1a0200c 	mov	r2, ip
c7e27aa0:	ea000002 	b	c7e27ab0 <NetCksum+0x18>
	ulong	xsum;
	ushort *p = (ushort *)ptr;

	xsum = 0;
	while (len-- > 0)
		xsum += *p++;
c7e27aa4:	e19030b2 	ldrh	r3, [r0, r2]
c7e27aa8:	e2822002 	add	r2, r2, #2	; 0x2
c7e27aac:	e08cc003 	add	ip, ip, r3
{
	ulong	xsum;
	ushort *p = (ushort *)ptr;

	xsum = 0;
	while (len-- > 0)
c7e27ab0:	e3510000 	cmp	r1, #0	; 0x0
		xsum += *p++;
c7e27ab4:	e2411001 	sub	r1, r1, #1	; 0x1
{
	ulong	xsum;
	ushort *p = (ushort *)ptr;

	xsum = 0;
	while (len-- > 0)
c7e27ab8:	cafffff9 	bgt	c7e27aa4 <NetCksum+0xc>
		xsum += *p++;
	xsum = (xsum & 0xffff) + (xsum >> 16);
c7e27abc:	e1a0380c 	lsl	r3, ip, #16
c7e27ac0:	e1a03823 	lsr	r3, r3, #16
c7e27ac4:	e083382c 	add	r3, r3, ip, lsr #16
	xsum = (xsum & 0xffff) + (xsum >> 16);
c7e27ac8:	e1a00803 	lsl	r0, r3, #16
c7e27acc:	e1a00820 	lsr	r0, r0, #16
c7e27ad0:	e0800823 	add	r0, r0, r3, lsr #16
c7e27ad4:	e1a00800 	lsl	r0, r0, #16
c7e27ad8:	e1a00820 	lsr	r0, r0, #16
	return xsum & 0xffff;
}
c7e27adc:	e12fff1e 	bx	lr

c7e27ae0 <NetCksumOk>:
}
/**********************************************************************/

int
NetCksumOk(uchar *ptr, int len)
{
c7e27ae0:	e92d4010 	push	{r4, lr}
	return !((NetCksum(ptr, len) + 1) & 0xfffe);
c7e27ae4:	ebffffeb 	bl	c7e27a98 <NetCksum>
c7e27ae8:	e59f3010 	ldr	r3, [pc, #16]	; c7e27b00 <NetCksumOk+0x20>
c7e27aec:	e2800001 	add	r0, r0, #1	; 0x1
c7e27af0:	e0003003 	and	r3, r0, r3
}
c7e27af4:	e2730001 	rsbs	r0, r3, #1	; 0x1
c7e27af8:	33a00000 	movcc	r0, #0	; 0x0
c7e27afc:	e8bd8010 	pop	{r4, pc}
c7e27b00:	0000fffe 	.word	0x0000fffe

c7e27b04 <copy_filename>:
	ip->udp_xsum = 0;
}

void copy_filename(char *dst, const char *src, int size)
{
	if (*src && (*src == '"')) {
c7e27b04:	e5d13000 	ldrb	r3, [r1]
	ip->udp_len  = htons(UDP_HDR_SIZE + len);
	ip->udp_xsum = 0;
}

void copy_filename(char *dst, const char *src, int size)
{
c7e27b08:	e92d4010 	push	{r4, lr}
	if (*src && (*src == '"')) {
c7e27b0c:	e3530022 	cmp	r3, #34	; 0x22
		++src;
c7e27b10:	02811001 	addeq	r1, r1, #1	; 0x1
		--size;
c7e27b14:	02422001 	subeq	r2, r2, #1	; 0x1
c7e27b18:	e3a0c000 	mov	ip, #0	; 0x0
c7e27b1c:	ea000000 	b	c7e27b24 <copy_filename+0x20>
	}

	while ((--size > 0) && *src && (*src != '"'))
		*dst++ = *src++;
c7e27b20:	e5403001 	strb	r3, [r0, #-1]
	if (*src && (*src == '"')) {
		++src;
		--size;
	}

	while ((--size > 0) && *src && (*src != '"'))
c7e27b24:	e2422001 	sub	r2, r2, #1	; 0x1
c7e27b28:	e3520000 	cmp	r2, #0	; 0x0
		*dst++ = *src++;
c7e27b2c:	e1a04000 	mov	r4, r0
	if (*src && (*src == '"')) {
		++src;
		--size;
	}

	while ((--size > 0) && *src && (*src != '"'))
c7e27b30:	da000006 	ble	c7e27b50 <copy_filename+0x4c>
c7e27b34:	e7d1300c 	ldrb	r3, [r1, ip]
c7e27b38:	e2800001 	add	r0, r0, #1	; 0x1
c7e27b3c:	e3530000 	cmp	r3, #0	; 0x0
c7e27b40:	0a000002 	beq	c7e27b50 <copy_filename+0x4c>
c7e27b44:	e3530022 	cmp	r3, #34	; 0x22
c7e27b48:	e28cc001 	add	ip, ip, #1	; 0x1
c7e27b4c:	1afffff3 	bne	c7e27b20 <copy_filename+0x1c>
		*dst++ = *src++;
	*dst = '\0';
c7e27b50:	e3a03000 	mov	r3, #0	; 0x0
c7e27b54:	e5c43000 	strb	r3, [r4]
}
c7e27b58:	e8bd8010 	pop	{r4, pc}

c7e27b5c <string_to_VLAN>:

ushort string_to_VLAN(const char *s)
{
	ushort id;

	if (s == NULL)
c7e27b5c:	e2503000 	subs	r3, r0, #0	; 0x0
	else
		sprintf(s, "%d", x & VLAN_IDMASK);
}

ushort string_to_VLAN(const char *s)
{
c7e27b60:	e92d4010 	push	{r4, lr}
	ushort id;

	if (s == NULL)
c7e27b64:	1a000001 	bne	c7e27b70 <string_to_VLAN+0x14>
		id = VLAN_NONE;
	else
		id = (ushort)simple_strtoul(s, NULL, 10);

	return htons(id);
}
c7e27b68:	e59f0030 	ldr	r0, [pc, #48]	; c7e27ba0 <string_to_VLAN+0x44>
c7e27b6c:	e8bd8010 	pop	{r4, pc}
	ushort id;

	if (s == NULL)
		return htons(VLAN_NONE);

	if (*s < '0' || *s > '9')
c7e27b70:	e5d33000 	ldrb	r3, [r3]
c7e27b74:	e2433030 	sub	r3, r3, #48	; 0x30
c7e27b78:	e3530009 	cmp	r3, #9	; 0x9
c7e27b7c:	859f0020 	ldrhi	r0, [pc, #32]	; c7e27ba4 <string_to_VLAN+0x48>
c7e27b80:	8a000004 	bhi	c7e27b98 <string_to_VLAN+0x3c>
		id = VLAN_NONE;
	else
		id = (ushort)simple_strtoul(s, NULL, 10);
c7e27b84:	e3a01000 	mov	r1, #0	; 0x0
c7e27b88:	e3a0200a 	mov	r2, #10	; 0xa
c7e27b8c:	ebffecf3 	bl	c7e22f60 <simple_strtoul>
c7e27b90:	e1a00800 	lsl	r0, r0, #16
c7e27b94:	e1a00820 	lsr	r0, r0, #16

	return htons(id);
}
c7e27b98:	e8bd4010 	pop	{r4, lr}
	if (*s < '0' || *s > '9')
		id = VLAN_NONE;
	else
		id = (ushort)simple_strtoul(s, NULL, 10);

	return htons(id);
c7e27b9c:	eaffff99 	b	c7e27a08 <__fswab16>
c7e27ba0:	0000ff0f 	.word	0x0000ff0f
c7e27ba4:	00000fff 	.word	0x00000fff

c7e27ba8 <getenv_VLAN>:
}

ushort getenv_VLAN(char *var)
{
c7e27ba8:	e92d4010 	push	{r4, lr}
	return string_to_VLAN(getenv(var));
c7e27bac:	ebff7d3a 	bl	c7e0709c <getenv>
}
c7e27bb0:	e8bd4010 	pop	{r4, lr}
	return htons(id);
}

ushort getenv_VLAN(char *var)
{
	return string_to_VLAN(getenv(var));
c7e27bb4:	eaffffe8 	b	c7e27b5c <string_to_VLAN>

c7e27bb8 <NetEthHdrSize>:
int
NetEthHdrSize(void)
{
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
c7e27bb8:	e59f3030 	ldr	r3, [pc, #48]	; c7e27bf0 <NetEthHdrSize+0x38>
	return xsum & 0xffff;
}

int
NetEthHdrSize(void)
{
c7e27bbc:	e92d4010 	push	{r4, lr}
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
c7e27bc0:	e1d300b0 	ldrh	r0, [r3]
c7e27bc4:	ebffff8f 	bl	c7e27a08 <__fswab16>
	if (myvlanid == (ushort)-1)
c7e27bc8:	e59f3024 	ldr	r3, [pc, #36]	; c7e27bf4 <NetEthHdrSize+0x3c>
c7e27bcc:	e59f2024 	ldr	r2, [pc, #36]	; c7e27bf8 <NetEthHdrSize+0x40>
c7e27bd0:	e1500003 	cmp	r0, r3
c7e27bd4:	01a00002 	moveq	r0, r2
		myvlanid = VLAN_NONE;

	return ((myvlanid & VLAN_IDMASK) == VLAN_NONE) ? ETHER_HDR_SIZE :
c7e27bd8:	e1a00a00 	lsl	r0, r0, #20
c7e27bdc:	e1a00a20 	lsr	r0, r0, #20
		VLAN_ETHER_HDR_SIZE;
}
c7e27be0:	e1500002 	cmp	r0, r2
c7e27be4:	03a0000e 	moveq	r0, #14	; 0xe
c7e27be8:	13a00012 	movne	r0, #18	; 0x12
c7e27bec:	e8bd8010 	pop	{r4, pc}
c7e27bf0:	c7e3a4cc 	.word	0xc7e3a4cc
c7e27bf4:	0000ffff 	.word	0x0000ffff
c7e27bf8:	00000fff 	.word	0x00000fff

c7e27bfc <VLAN_to_string>:
		(int) ((x >> 8) & 0xff), (int) ((x >> 0) & 0xff)
	);
}

void VLAN_to_string(ushort x, char *s)
{
c7e27bfc:	e92d4010 	push	{r4, lr}
c7e27c00:	e1a04001 	mov	r4, r1
	x = ntohs(x);
c7e27c04:	ebffff7f 	bl	c7e27a08 <__fswab16>

	if (x == (ushort)-1)
c7e27c08:	e59f3038 	ldr	r3, [pc, #56]	; c7e27c48 <VLAN_to_string+0x4c>
c7e27c0c:	e1500003 	cmp	r0, r3
c7e27c10:	0a000002 	beq	c7e27c20 <VLAN_to_string+0x24>
		x = VLAN_NONE;

	if (x == VLAN_NONE)
c7e27c14:	e2433a0f 	sub	r3, r3, #61440	; 0xf000
c7e27c18:	e1500003 	cmp	r0, r3
c7e27c1c:	1a000003 	bne	c7e27c30 <VLAN_to_string+0x34>
		strcpy(s, "none");
c7e27c20:	e59f1024 	ldr	r1, [pc, #36]	; c7e27c4c <VLAN_to_string+0x50>
c7e27c24:	e1a00004 	mov	r0, r4
	else
		sprintf(s, "%d", x & VLAN_IDMASK);
}
c7e27c28:	e8bd4010 	pop	{r4, lr}

	if (x == (ushort)-1)
		x = VLAN_NONE;

	if (x == VLAN_NONE)
		strcpy(s, "none");
c7e27c2c:	eaffead4 	b	c7e22784 <strcpy>
	else
		sprintf(s, "%d", x & VLAN_IDMASK);
c7e27c30:	e1a02a00 	lsl	r2, r0, #20
c7e27c34:	e59f1014 	ldr	r1, [pc, #20]	; c7e27c50 <VLAN_to_string+0x54>
c7e27c38:	e1a00004 	mov	r0, r4
c7e27c3c:	e1a02a22 	lsr	r2, r2, #20
}
c7e27c40:	e8bd4010 	pop	{r4, lr}
		x = VLAN_NONE;

	if (x == VLAN_NONE)
		strcpy(s, "none");
	else
		sprintf(s, "%d", x & VLAN_IDMASK);
c7e27c44:	eafff079 	b	c7e23e30 <sprintf>
c7e27c48:	0000ffff 	.word	0x0000ffff
c7e27c4c:	c7e32304 	.word	0xc7e32304
c7e27c50:	c7e32d04 	.word	0xc7e32d04

c7e27c54 <ip_to_string>:
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
	return __arch__swab32(x);
c7e27c54:	e1a0cc00 	lsl	ip, r0, #24
	return 1024 + (get_timer(0) % 0x4000);
}
#endif

void ip_to_string(IPaddr_t x, char *s)
{
c7e27c58:	e92d4007 	push	{r0, r1, r2, lr}
c7e27c5c:	e2003cff 	and	r3, r0, #65280	; 0xff00
c7e27c60:	e18ccc20 	orr	ip, ip, r0, lsr #24
c7e27c64:	e18cc403 	orr	ip, ip, r3, lsl #8
c7e27c68:	e20008ff 	and	r0, r0, #16711680	; 0xff0000
c7e27c6c:	e18cc420 	orr	ip, ip, r0, lsr #8
	x = ntohl(x);
	sprintf(s, "%d.%d.%d.%d",
c7e27c70:	e1a0382c 	lsr	r3, ip, #16
c7e27c74:	e1a0e42c 	lsr	lr, ip, #8
c7e27c78:	e20ee0ff 	and	lr, lr, #255	; 0xff
c7e27c7c:	e1a02c2c 	lsr	r2, ip, #24
c7e27c80:	e1a00001 	mov	r0, r1
c7e27c84:	e20cc0ff 	and	ip, ip, #255	; 0xff
c7e27c88:	e20330ff 	and	r3, r3, #255	; 0xff
c7e27c8c:	e59f100c 	ldr	r1, [pc, #12]	; c7e27ca0 <ip_to_string+0x4c>
c7e27c90:	e58de000 	str	lr, [sp]
c7e27c94:	e58dc004 	str	ip, [sp, #4]
c7e27c98:	ebfff064 	bl	c7e23e30 <sprintf>
		(int) ((x >> 24) & 0xff),
		(int) ((x >> 16) & 0xff),
		(int) ((x >> 8) & 0xff), (int) ((x >> 0) & 0xff)
	);
}
c7e27c9c:	e8bd800e 	pop	{r1, r2, r3, pc}
c7e27ca0:	c7e34d29 	.word	0xc7e34d29

c7e27ca4 <random_port>:
 * make port a little random (1024-17407)
 * This keeps the math somewhat trivial to compute, and seems to work with
 * all supported protocols/clients/servers
 */
unsigned int random_port(void)
{
c7e27ca4:	e92d4010 	push	{r4, lr}
	return 1024 + (get_timer(0) % 0x4000);
c7e27ca8:	e3a00000 	mov	r0, #0	; 0x0
c7e27cac:	ebff6353 	bl	c7e00a00 <get_timer>
c7e27cb0:	e1a00900 	lsl	r0, r0, #18
c7e27cb4:	e1a00920 	lsr	r0, r0, #18
}
c7e27cb8:	e2800b01 	add	r0, r0, #1024	; 0x400
c7e27cbc:	e8bd8010 	pop	{r4, pc}

c7e27cc0 <NetSetTimeout>:
}
#endif

void
NetSetTimeout(ulong iv, thand_f *f)
{
c7e27cc0:	e92d4070 	push	{r4, r5, r6, lr}
c7e27cc4:	e59f4030 	ldr	r4, [pc, #48]	; c7e27cfc <NetSetTimeout+0x3c>
	if (iv == 0) {
c7e27cc8:	e2505000 	subs	r5, r0, #0	; 0x0
		debug_cond(DEBUG_INT_STATE,
			"--- NetLoop timeout handler cancelled\n");
		timeHandler = (thand_f *)0;
c7e27ccc:	0584500c 	streq	r5, [r4, #12]
#endif

void
NetSetTimeout(ulong iv, thand_f *f)
{
	if (iv == 0) {
c7e27cd0:	08bd8070 	popeq	{r4, r5, r6, pc}
		timeHandler = (thand_f *)0;
	} else {
		debug_cond(DEBUG_INT_STATE,
			"--- NetLoop timeout handler set (%p)\n", f);
		timeHandler = f;
		timeStart = get_timer(0);
c7e27cd4:	e3a00000 	mov	r0, #0	; 0x0
			"--- NetLoop timeout handler cancelled\n");
		timeHandler = (thand_f *)0;
	} else {
		debug_cond(DEBUG_INT_STATE,
			"--- NetLoop timeout handler set (%p)\n", f);
		timeHandler = f;
c7e27cd8:	e584100c 	str	r1, [r4, #12]
		timeStart = get_timer(0);
c7e27cdc:	ebff6347 	bl	c7e00a00 <get_timer>
		timeDelta = iv * CONFIG_SYS_HZ / 1000;
c7e27ce0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
		timeHandler = (thand_f *)0;
	} else {
		debug_cond(DEBUG_INT_STATE,
			"--- NetLoop timeout handler set (%p)\n", f);
		timeHandler = f;
		timeStart = get_timer(0);
c7e27ce4:	e5840010 	str	r0, [r4, #16]
		timeDelta = iv * CONFIG_SYS_HZ / 1000;
c7e27ce8:	e1a01003 	mov	r1, r3
c7e27cec:	e0000593 	mul	r0, r3, r5
c7e27cf0:	eb000a04 	bl	c7e2a508 <__udivsi3>
c7e27cf4:	e5840014 	str	r0, [r4, #20]
c7e27cf8:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e27cfc:	c7e7299c 	.word	0xc7e7299c

c7e27d00 <net_clear_handlers>:

	return;
}

static void net_clear_handlers(void)
{
c7e27d00:	e92d4010 	push	{r4, lr}
	net_set_udp_handler(NULL);
c7e27d04:	e3a00000 	mov	r0, #0	; 0x0
c7e27d08:	ebffff4e 	bl	c7e27a48 <net_set_udp_handler>
	net_set_arp_handler(NULL);
c7e27d0c:	e3a00000 	mov	r0, #0	; 0x0
c7e27d10:	ebffff58 	bl	c7e27a78 <net_set_arp_handler>
	NetSetTimeout(0, NULL);
c7e27d14:	e3a00000 	mov	r0, #0	; 0x0
c7e27d18:	e1a01000 	mov	r1, r0
}
c7e27d1c:	e8bd4010 	pop	{r4, lr}

static void net_clear_handlers(void)
{
	net_set_udp_handler(NULL);
	net_set_arp_handler(NULL);
	NetSetTimeout(0, NULL);
c7e27d20:	eaffffe6 	b	c7e27cc0 <NetSetTimeout>

c7e27d24 <net_cleanup_loop>:
}

static void net_cleanup_loop(void)
{
	net_clear_handlers();
c7e27d24:	eafffff5 	b	c7e27d00 <net_clear_handlers>

c7e27d28 <NetCopyIP>:
}

/* copy IP */
static inline void NetCopyIP(void *to, void *from)
{
	memcpy((void *)to, from, sizeof(IPaddr_t));
c7e27d28:	e3a02004 	mov	r2, #4	; 0x4
c7e27d2c:	eaffebc2 	b	c7e22c3c <memcpy>

c7e27d30 <net_set_ip_header>:
		return E802_HDR_SIZE;
	}
}

void net_set_ip_header(uchar *pkt, IPaddr_t dest, IPaddr_t source)
{
c7e27d30:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
c7e27d34:	e59fc070 	ldr	ip, [pc, #112]	; c7e27dac <net_set_ip_header+0x7c>
	/*
	 *	Construct an IP header.
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
c7e27d38:	e3a06000 	mov	r6, #0	; 0x0

	/*
	 *	Construct an IP header.
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
c7e27d3c:	e3a03045 	mov	r3, #69	; 0x45
	ip->ip_tos   = 0;
c7e27d40:	e5c06001 	strb	r6, [r0, #1]

	/*
	 *	Construct an IP header.
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
c7e27d44:	e5c03000 	strb	r3, [r0]
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
c7e27d48:	e59c3018 	ldr	r3, [ip, #24]
		return E802_HDR_SIZE;
	}
}

void net_set_ip_header(uchar *pkt, IPaddr_t dest, IPaddr_t source)
{
c7e27d4c:	e1a04000 	mov	r4, r0
	 *	Construct an IP header.
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
c7e27d50:	e3a00b05 	mov	r0, #5120	; 0x1400
c7e27d54:	e1c400b2 	strh	r0, [r4, #2]
	ip->ip_id    = htons(NetIPID++);
c7e27d58:	e1a00803 	lsl	r0, r3, #16
		return E802_HDR_SIZE;
	}
}

void net_set_ip_header(uchar *pkt, IPaddr_t dest, IPaddr_t source)
{
c7e27d5c:	e28d5008 	add	r5, sp, #8	; 0x8
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
c7e27d60:	e2833001 	add	r3, r3, #1	; 0x1
c7e27d64:	e1a00820 	lsr	r0, r0, #16
c7e27d68:	e58c3018 	str	r3, [ip, #24]
		return E802_HDR_SIZE;
	}
}

void net_set_ip_header(uchar *pkt, IPaddr_t dest, IPaddr_t source)
{
c7e27d6c:	e5252008 	str	r2, [r5, #-8]!
c7e27d70:	e58d1004 	str	r1, [sp, #4]
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
c7e27d74:	ebffff23 	bl	c7e27a08 <__fswab16>
	ip->ip_off   = htons(IP_FLAGS_DFRAG);	/* Don't fragment */
	ip->ip_ttl   = 255;
c7e27d78:	e3e03000 	mvn	r3, #0	; 0x0
c7e27d7c:	e5c43008 	strb	r3, [r4, #8]
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
	ip->ip_off   = htons(IP_FLAGS_DFRAG);	/* Don't fragment */
c7e27d80:	e3a03040 	mov	r3, #64	; 0x40
	 */
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
c7e27d84:	e1c400b4 	strh	r0, [r4, #4]
	ip->ip_off   = htons(IP_FLAGS_DFRAG);	/* Don't fragment */
	ip->ip_ttl   = 255;
	ip->ip_sum   = 0;
	/* already in network byte order */
	NetCopyIP((void *)&ip->ip_src, &source);
c7e27d88:	e1a0100d 	mov	r1, sp
c7e27d8c:	e284000c 	add	r0, r4, #12	; 0xc
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
	ip->ip_off   = htons(IP_FLAGS_DFRAG);	/* Don't fragment */
	ip->ip_ttl   = 255;
	ip->ip_sum   = 0;
c7e27d90:	e1c460ba 	strh	r6, [r4, #10]
	/* IP_HDR_SIZE / 4 (not including UDP) */
	ip->ip_hl_v  = 0x45;
	ip->ip_tos   = 0;
	ip->ip_len   = htons(IP_HDR_SIZE);
	ip->ip_id    = htons(NetIPID++);
	ip->ip_off   = htons(IP_FLAGS_DFRAG);	/* Don't fragment */
c7e27d94:	e1c430b6 	strh	r3, [r4, #6]
	ip->ip_ttl   = 255;
	ip->ip_sum   = 0;
	/* already in network byte order */
	NetCopyIP((void *)&ip->ip_src, &source);
c7e27d98:	ebffffe2 	bl	c7e27d28 <NetCopyIP>
	/* already in network byte order */
	NetCopyIP((void *)&ip->ip_dst, &dest);
c7e27d9c:	e2840010 	add	r0, r4, #16	; 0x10
c7e27da0:	e28d1004 	add	r1, sp, #4	; 0x4
c7e27da4:	ebffffdf 	bl	c7e27d28 <NetCopyIP>
}
c7e27da8:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
c7e27dac:	c7e7299c 	.word	0xc7e7299c

c7e27db0 <net_set_udp_header>:

void net_set_udp_header(uchar *pkt, IPaddr_t dest, int dport, int sport,
			int len)
{
c7e27db0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e27db4:	e59d4018 	ldr	r4, [sp, #24]
c7e27db8:	e1a07002 	mov	r7, r2
	/*
	 *	If the data is an odd number of bytes, zero the
	 *	byte after the last byte so that the checksum
	 *	will work.
	 */
	if (len & 1)
c7e27dbc:	e3140001 	tst	r4, #1	; 0x1
		pkt[IP_UDP_HDR_SIZE + len] = 0;
c7e27dc0:	10802004 	addne	r2, r0, r4
	NetCopyIP((void *)&ip->ip_dst, &dest);
}

void net_set_udp_header(uchar *pkt, IPaddr_t dest, int dport, int sport,
			int len)
{
c7e27dc4:	e1a06003 	mov	r6, r3
	 *	If the data is an odd number of bytes, zero the
	 *	byte after the last byte so that the checksum
	 *	will work.
	 */
	if (len & 1)
		pkt[IP_UDP_HDR_SIZE + len] = 0;
c7e27dc8:	13a03000 	movne	r3, #0	; 0x0
c7e27dcc:	15c2301c 	strbne	r3, [r2, #28]

	net_set_ip_header(pkt, dest, NetOurIP);
c7e27dd0:	e59f307c 	ldr	r3, [pc, #124]	; c7e27e54 <net_set_udp_header+0xa4>
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
c7e27dd4:	e1a04804 	lsl	r4, r4, #16
	 *	will work.
	 */
	if (len & 1)
		pkt[IP_UDP_HDR_SIZE + len] = 0;

	net_set_ip_header(pkt, dest, NetOurIP);
c7e27dd8:	e593201c 	ldr	r2, [r3, #28]
	NetCopyIP((void *)&ip->ip_dst, &dest);
}

void net_set_udp_header(uchar *pkt, IPaddr_t dest, int dport, int sport,
			int len)
{
c7e27ddc:	e1a05000 	mov	r5, r0
	 *	will work.
	 */
	if (len & 1)
		pkt[IP_UDP_HDR_SIZE + len] = 0;

	net_set_ip_header(pkt, dest, NetOurIP);
c7e27de0:	ebffffd2 	bl	c7e27d30 <net_set_ip_header>
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
c7e27de4:	e2840707 	add	r0, r4, #1835008	; 0x1c0000
c7e27de8:	e1a00820 	lsr	r0, r0, #16
c7e27dec:	ebffff05 	bl	c7e27a08 <__fswab16>
	ip->ip_p     = IPPROTO_UDP;
c7e27df0:	e3a03011 	mov	r3, #17	; 0x11
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);
c7e27df4:	e3a0100a 	mov	r1, #10	; 0xa
	 */
	if (len & 1)
		pkt[IP_UDP_HDR_SIZE + len] = 0;

	net_set_ip_header(pkt, dest, NetOurIP);
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
c7e27df8:	e1c500b2 	strh	r0, [r5, #2]
	ip->ip_p     = IPPROTO_UDP;
c7e27dfc:	e5c53009 	strb	r3, [r5, #9]
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);
c7e27e00:	e1a00005 	mov	r0, r5
c7e27e04:	ebffff23 	bl	c7e27a98 <NetCksum>

	ip->udp_src  = htons(sport);
c7e27e08:	e1a03806 	lsl	r3, r6, #16
		pkt[IP_UDP_HDR_SIZE + len] = 0;

	net_set_ip_header(pkt, dest, NetOurIP);
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
	ip->ip_p     = IPPROTO_UDP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);
c7e27e0c:	e1e00000 	mvn	r0, r0
c7e27e10:	e1c500ba 	strh	r0, [r5, #10]

	ip->udp_src  = htons(sport);
c7e27e14:	e1a00823 	lsr	r0, r3, #16
c7e27e18:	ebfffefa 	bl	c7e27a08 <__fswab16>
	ip->udp_dst  = htons(dport);
c7e27e1c:	e1a03807 	lsl	r3, r7, #16
	net_set_ip_header(pkt, dest, NetOurIP);
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
	ip->ip_p     = IPPROTO_UDP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);

	ip->udp_src  = htons(sport);
c7e27e20:	e1c501b4 	strh	r0, [r5, #20]
	ip->udp_dst  = htons(dport);
c7e27e24:	e1a00823 	lsr	r0, r3, #16
c7e27e28:	ebfffef6 	bl	c7e27a08 <__fswab16>
	 */
	if (len & 1)
		pkt[IP_UDP_HDR_SIZE + len] = 0;

	net_set_ip_header(pkt, dest, NetOurIP);
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
c7e27e2c:	e1a04824 	lsr	r4, r4, #16
	ip->ip_p     = IPPROTO_UDP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);

	ip->udp_src  = htons(sport);
	ip->udp_dst  = htons(dport);
	ip->udp_len  = htons(UDP_HDR_SIZE + len);
c7e27e30:	e2844008 	add	r4, r4, #8	; 0x8
c7e27e34:	e1a04804 	lsl	r4, r4, #16
	ip->ip_len   = htons(IP_UDP_HDR_SIZE + len);
	ip->ip_p     = IPPROTO_UDP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);

	ip->udp_src  = htons(sport);
	ip->udp_dst  = htons(dport);
c7e27e38:	e1c501b6 	strh	r0, [r5, #22]
	ip->udp_len  = htons(UDP_HDR_SIZE + len);
c7e27e3c:	e1a00824 	lsr	r0, r4, #16
c7e27e40:	ebfffef0 	bl	c7e27a08 <__fswab16>
	ip->udp_xsum = 0;
c7e27e44:	e3a03000 	mov	r3, #0	; 0x0
c7e27e48:	e1c531ba 	strh	r3, [r5, #26]
	ip->ip_p     = IPPROTO_UDP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);

	ip->udp_src  = htons(sport);
	ip->udp_dst  = htons(dport);
	ip->udp_len  = htons(UDP_HDR_SIZE + len);
c7e27e4c:	e1c501b8 	strh	r0, [r5, #24]
	ip->udp_xsum = 0;
}
c7e27e50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e27e54:	c7e7299c 	.word	0xc7e7299c

c7e27e58 <net_update_ether>:
		return VLAN_ETHER_HDR_SIZE;
	}
}

int net_update_ether(struct ethernet_hdr *et, uchar *addr, uint prot)
{
c7e27e58:	e92d4070 	push	{r4, r5, r6, lr}
c7e27e5c:	e1a05002 	mov	r5, r2
	ushort protlen;

	memcpy(et->et_dest, addr, 6);
c7e27e60:	e3a02006 	mov	r2, #6	; 0x6
		return VLAN_ETHER_HDR_SIZE;
	}
}

int net_update_ether(struct ethernet_hdr *et, uchar *addr, uint prot)
{
c7e27e64:	e1a04000 	mov	r4, r0
	ushort protlen;

	memcpy(et->et_dest, addr, 6);
c7e27e68:	ebffeb73 	bl	c7e22c3c <memcpy>
	memcpy(et->et_src, NetOurEther, 6);
c7e27e6c:	e3a02006 	mov	r2, #6	; 0x6
c7e27e70:	e0840002 	add	r0, r4, r2
c7e27e74:	e59f1064 	ldr	r1, [pc, #100]	; c7e27ee0 <net_update_ether+0x88>
c7e27e78:	ebffeb6f 	bl	c7e22c3c <memcpy>
	protlen = ntohs(et->et_protlen);
c7e27e7c:	e1d400bc 	ldrh	r0, [r4, #12]
c7e27e80:	ebfffee0 	bl	c7e27a08 <__fswab16>
	if (protlen == PROT_VLAN) {
c7e27e84:	e3500c81 	cmp	r0, #33024	; 0x8100
{
	ushort protlen;

	memcpy(et->et_dest, addr, 6);
	memcpy(et->et_src, NetOurEther, 6);
	protlen = ntohs(et->et_protlen);
c7e27e88:	e1a02000 	mov	r2, r0
	if (protlen == PROT_VLAN) {
c7e27e8c:	1a000005 	bne	c7e27ea8 <net_update_ether+0x50>
		struct vlan_ethernet_hdr *vet =
			(struct vlan_ethernet_hdr *)et;
		vet->vet_type = htons(prot);
c7e27e90:	e1a00805 	lsl	r0, r5, #16
c7e27e94:	e1a00820 	lsr	r0, r0, #16
c7e27e98:	ebfffeda 	bl	c7e27a08 <__fswab16>
c7e27e9c:	e1c401b0 	strh	r0, [r4, #16]
c7e27ea0:	e3a00012 	mov	r0, #18	; 0x12
c7e27ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
		return VLAN_ETHER_HDR_SIZE;
	} else if (protlen > 1514) {
c7e27ea8:	e59f3034 	ldr	r3, [pc, #52]	; c7e27ee4 <net_update_ether+0x8c>
c7e27eac:	e1a00805 	lsl	r0, r5, #16
c7e27eb0:	e1520003 	cmp	r2, r3
c7e27eb4:	9a000004 	bls	c7e27ecc <net_update_ether+0x74>
		et->et_protlen = htons(prot);
c7e27eb8:	e1a00820 	lsr	r0, r0, #16
c7e27ebc:	ebfffed1 	bl	c7e27a08 <__fswab16>
c7e27ec0:	e1c400bc 	strh	r0, [r4, #12]
c7e27ec4:	e3a0000e 	mov	r0, #14	; 0xe
c7e27ec8:	e8bd8070 	pop	{r4, r5, r6, pc}
		return ETHER_HDR_SIZE;
	} else {
		/* 802.2 + SNAP */
		struct e802_hdr *et802 = (struct e802_hdr *)et;
		et802->et_prot = htons(prot);
c7e27ecc:	e1a00820 	lsr	r0, r0, #16
c7e27ed0:	ebfffecc 	bl	c7e27a08 <__fswab16>
c7e27ed4:	e1c401b4 	strh	r0, [r4, #20]
c7e27ed8:	e3a00016 	mov	r0, #22	; 0x16
		return E802_HDR_SIZE;
	}
}
c7e27edc:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e27ee0:	c7e729bc 	.word	0xc7e729bc
c7e27ee4:	000005ea 	.word	0x000005ea

c7e27ee8 <NetSetEther>:
NetSetEther(uchar *xet, uchar * addr, uint prot)
{
	struct ethernet_hdr *et = (struct ethernet_hdr *)xet;
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
c7e27ee8:	e59f309c 	ldr	r3, [pc, #156]	; c7e27f8c <NetSetEther+0xa4>
		VLAN_ETHER_HDR_SIZE;
}

int
NetSetEther(uchar *xet, uchar * addr, uint prot)
{
c7e27eec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
c7e27ef0:	e1a07000 	mov	r7, r0
	struct ethernet_hdr *et = (struct ethernet_hdr *)xet;
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
c7e27ef4:	e1d300b0 	ldrh	r0, [r3]
		VLAN_ETHER_HDR_SIZE;
}

int
NetSetEther(uchar *xet, uchar * addr, uint prot)
{
c7e27ef8:	e1a04001 	mov	r4, r1
c7e27efc:	e1a06002 	mov	r6, r2
	struct ethernet_hdr *et = (struct ethernet_hdr *)xet;
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
c7e27f00:	ebfffec0 	bl	c7e27a08 <__fswab16>
	if (myvlanid == (ushort)-1)
c7e27f04:	e59f3084 	ldr	r3, [pc, #132]	; c7e27f90 <NetSetEther+0xa8>
c7e27f08:	e59f5084 	ldr	r5, [pc, #132]	; c7e27f94 <NetSetEther+0xac>
c7e27f0c:	e1500003 	cmp	r0, r3
		myvlanid = VLAN_NONE;

	memcpy(et->et_dest, addr, 6);
c7e27f10:	e1a01004 	mov	r1, r4
c7e27f14:	e3a02006 	mov	r2, #6	; 0x6
{
	struct ethernet_hdr *et = (struct ethernet_hdr *)xet;
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
	if (myvlanid == (ushort)-1)
c7e27f18:	11a04000 	movne	r4, r0
		myvlanid = VLAN_NONE;

	memcpy(et->et_dest, addr, 6);
c7e27f1c:	e1a00007 	mov	r0, r7
{
	struct ethernet_hdr *et = (struct ethernet_hdr *)xet;
	ushort myvlanid;

	myvlanid = ntohs(NetOurVLAN);
	if (myvlanid == (ushort)-1)
c7e27f20:	01a04005 	moveq	r4, r5
		myvlanid = VLAN_NONE;

	memcpy(et->et_dest, addr, 6);
c7e27f24:	ebffeb44 	bl	c7e22c3c <memcpy>
	memcpy(et->et_src, NetOurEther, 6);
c7e27f28:	e2870006 	add	r0, r7, #6	; 0x6
c7e27f2c:	e59f1064 	ldr	r1, [pc, #100]	; c7e27f98 <NetSetEther+0xb0>
c7e27f30:	e3a02006 	mov	r2, #6	; 0x6
c7e27f34:	ebffeb40 	bl	c7e22c3c <memcpy>
	if ((myvlanid & VLAN_IDMASK) == VLAN_NONE) {
c7e27f38:	e1a03a04 	lsl	r3, r4, #20
c7e27f3c:	e1a03a23 	lsr	r3, r3, #20
c7e27f40:	e1530005 	cmp	r3, r5
c7e27f44:	e1a06806 	lsl	r6, r6, #16
c7e27f48:	1a000004 	bne	c7e27f60 <NetSetEther+0x78>
		et->et_protlen = htons(prot);
c7e27f4c:	e1a00826 	lsr	r0, r6, #16
c7e27f50:	ebfffeac 	bl	c7e27a08 <__fswab16>
c7e27f54:	e1c700bc 	strh	r0, [r7, #12]
c7e27f58:	e3a0000e 	mov	r0, #14	; 0xe
c7e27f5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return ETHER_HDR_SIZE;
	} else {
		struct vlan_ethernet_hdr *vet =
			(struct vlan_ethernet_hdr *)xet;

		vet->vet_vlan_type = htons(PROT_VLAN);
c7e27f60:	e3a03081 	mov	r3, #129	; 0x81
		vet->vet_tag = htons((0 << 5) | (myvlanid & VLAN_IDMASK));
c7e27f64:	e1a00a04 	lsl	r0, r4, #20
		return ETHER_HDR_SIZE;
	} else {
		struct vlan_ethernet_hdr *vet =
			(struct vlan_ethernet_hdr *)xet;

		vet->vet_vlan_type = htons(PROT_VLAN);
c7e27f68:	e1c730bc 	strh	r3, [r7, #12]
		vet->vet_tag = htons((0 << 5) | (myvlanid & VLAN_IDMASK));
c7e27f6c:	e1a00a20 	lsr	r0, r0, #20
c7e27f70:	ebfffea4 	bl	c7e27a08 <__fswab16>
c7e27f74:	e1c700be 	strh	r0, [r7, #14]
		vet->vet_type = htons(prot);
c7e27f78:	e1a00826 	lsr	r0, r6, #16
c7e27f7c:	ebfffea1 	bl	c7e27a08 <__fswab16>
c7e27f80:	e1c701b0 	strh	r0, [r7, #16]
c7e27f84:	e3a00012 	mov	r0, #18	; 0x12
		return VLAN_ETHER_HDR_SIZE;
	}
}
c7e27f88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
c7e27f8c:	c7e3a4cc 	.word	0xc7e3a4cc
c7e27f90:	0000ffff 	.word	0x0000ffff
c7e27f94:	00000fff 	.word	0x00000fff
c7e27f98:	c7e729bc 	.word	0xc7e729bc

c7e27f9c <NetReadIP>:
 * We're using inline functions, which had the smallest memory
 * footprint in our tests.
 */
/* return IP *in network byteorder* */
static inline IPaddr_t NetReadIP(void *from)
{
c7e27f9c:	e92d4007 	push	{r0, r1, r2, lr}
c7e27fa0:	e1a01000 	mov	r1, r0
	IPaddr_t ip;

	memcpy((void *)&ip, (void *)from, sizeof(ip));
c7e27fa4:	e3a02004 	mov	r2, #4	; 0x4
c7e27fa8:	e28d0004 	add	r0, sp, #4	; 0x4
c7e27fac:	ebffeb22 	bl	c7e22c3c <memcpy>
	return ip;
}
c7e27fb0:	e59d0004 	ldr	r0, [sp, #4]
c7e27fb4:	e8bd800e 	pop	{r1, r2, r3, pc}

c7e27fb8 <NetReceive>:
#endif
	ushort cti = 0, vlanid = VLAN_NONE, myvlanid, mynvlanid;

	debug_cond(DEBUG_NET_PKT, "packet received\n");

	NetRxPacket = inpkt;
c7e27fb8:	e59f3250 	ldr	r3, [pc, #592]	; c7e28210 <NetReceive+0x258>
	NetRxPacketLen = len;
	et = (struct ethernet_hdr *)inpkt;

	/* too small packet? */
	if (len < ETHER_HDR_SIZE)
c7e27fbc:	e351000d 	cmp	r1, #13	; 0xd
	}
}

void
NetReceive(uchar *inpkt, int len)
{
c7e27fc0:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	ushort cti = 0, vlanid = VLAN_NONE, myvlanid, mynvlanid;

	debug_cond(DEBUG_NET_PKT, "packet received\n");

	NetRxPacket = inpkt;
	NetRxPacketLen = len;
c7e27fc4:	e583102c 	str	r1, [r3, #44]
	}
}

void
NetReceive(uchar *inpkt, int len)
{
c7e27fc8:	e1a07001 	mov	r7, r1
c7e27fcc:	e1a0a000 	mov	sl, r0
#endif
	ushort cti = 0, vlanid = VLAN_NONE, myvlanid, mynvlanid;

	debug_cond(DEBUG_NET_PKT, "packet received\n");

	NetRxPacket = inpkt;
c7e27fd0:	e5830028 	str	r0, [r3, #40]
	NetRxPacketLen = len;
	et = (struct ethernet_hdr *)inpkt;

	/* too small packet? */
	if (len < ETHER_HDR_SIZE)
c7e27fd4:	9a00008b 	bls	c7e28208 <NetReceive+0x250>
#if defined(CONFIG_CMD_CDP)
	/* keep track if packet is CDP */
	iscdp = is_cdp_packet(et->et_dest);
#endif

	myvlanid = ntohs(NetOurVLAN);
c7e27fd8:	e59f4234 	ldr	r4, [pc, #564]	; c7e28214 <NetReceive+0x25c>
	if (myvlanid == (ushort)-1)
c7e27fdc:	e59f5234 	ldr	r5, [pc, #564]	; c7e28218 <NetReceive+0x260>
#if defined(CONFIG_CMD_CDP)
	/* keep track if packet is CDP */
	iscdp = is_cdp_packet(et->et_dest);
#endif

	myvlanid = ntohs(NetOurVLAN);
c7e27fe0:	e1d400b0 	ldrh	r0, [r4]
c7e27fe4:	ebfffe87 	bl	c7e27a08 <__fswab16>
c7e27fe8:	e1a06000 	mov	r6, r0
	if (myvlanid == (ushort)-1)
		myvlanid = VLAN_NONE;
	mynvlanid = ntohs(NetOurNativeVLAN);
c7e27fec:	e1d400b2 	ldrh	r0, [r4, #2]
c7e27ff0:	ebfffe84 	bl	c7e27a08 <__fswab16>
	/* keep track if packet is CDP */
	iscdp = is_cdp_packet(et->et_dest);
#endif

	myvlanid = ntohs(NetOurVLAN);
	if (myvlanid == (ushort)-1)
c7e27ff4:	e59f4220 	ldr	r4, [pc, #544]	; c7e2821c <NetReceive+0x264>
		myvlanid = VLAN_NONE;
	mynvlanid = ntohs(NetOurNativeVLAN);
	if (mynvlanid == (ushort)-1)
c7e27ff8:	e1500005 	cmp	r0, r5
c7e27ffc:	11a0b000 	movne	fp, r0
		mynvlanid = VLAN_NONE;

	eth_proto = ntohs(et->et_protlen);
c7e28000:	e1da00bc 	ldrh	r0, [sl, #12]

	myvlanid = ntohs(NetOurVLAN);
	if (myvlanid == (ushort)-1)
		myvlanid = VLAN_NONE;
	mynvlanid = ntohs(NetOurNativeVLAN);
	if (mynvlanid == (ushort)-1)
c7e28004:	01a0b004 	moveq	fp, r4
		mynvlanid = VLAN_NONE;

	eth_proto = ntohs(et->et_protlen);
c7e28008:	ebfffe7e 	bl	c7e27a08 <__fswab16>

	if (eth_proto < 1514) {
c7e2800c:	e59f320c 	ldr	r3, [pc, #524]	; c7e28220 <NetReceive+0x268>
	/* keep track if packet is CDP */
	iscdp = is_cdp_packet(et->et_dest);
#endif

	myvlanid = ntohs(NetOurVLAN);
	if (myvlanid == (ushort)-1)
c7e28010:	e1560005 	cmp	r6, r5
c7e28014:	11a09006 	movne	r9, r6
c7e28018:	01a09004 	moveq	r9, r4
	if (mynvlanid == (ushort)-1)
		mynvlanid = VLAN_NONE;

	eth_proto = ntohs(et->et_protlen);

	if (eth_proto < 1514) {
c7e2801c:	e1500003 	cmp	r0, r3
c7e28020:	ca000004 	bgt	c7e28038 <NetReceive+0x80>
		struct e802_hdr *et802 = (struct e802_hdr *)et;
		/*
		 *	Got a 802.2 packet.  Check the other protocol field.
		 *	XXX VLAN over 802.2+SNAP not implemented!
		 */
		eth_proto = ntohs(et802->et_prot);
c7e28024:	e1da01b4 	ldrh	r0, [sl, #20]

		ip = (struct ip_udp_hdr *)(inpkt + E802_HDR_SIZE);
		len -= E802_HDR_SIZE;
c7e28028:	e2475016 	sub	r5, r7, #22	; 0x16
		 *	Got a 802.2 packet.  Check the other protocol field.
		 *	XXX VLAN over 802.2+SNAP not implemented!
		 */
		eth_proto = ntohs(et802->et_prot);

		ip = (struct ip_udp_hdr *)(inpkt + E802_HDR_SIZE);
c7e2802c:	e28a6016 	add	r6, sl, #22	; 0x16
		struct e802_hdr *et802 = (struct e802_hdr *)et;
		/*
		 *	Got a 802.2 packet.  Check the other protocol field.
		 *	XXX VLAN over 802.2+SNAP not implemented!
		 */
		eth_proto = ntohs(et802->et_prot);
c7e28030:	ebfffe74 	bl	c7e27a08 <__fswab16>
c7e28034:	ea000012 	b	c7e28084 <NetReceive+0xcc>

		ip = (struct ip_udp_hdr *)(inpkt + E802_HDR_SIZE);
		len -= E802_HDR_SIZE;

	} else if (eth_proto != PROT_VLAN) {	/* normal packet */
c7e28038:	e3500c81 	cmp	r0, #33024	; 0x8100
		ip = (struct ip_udp_hdr *)(inpkt + ETHER_HDR_SIZE);
		len -= ETHER_HDR_SIZE;
c7e2803c:	1247500e 	subne	r5, r7, #14	; 0xe

		ip = (struct ip_udp_hdr *)(inpkt + E802_HDR_SIZE);
		len -= E802_HDR_SIZE;

	} else if (eth_proto != PROT_VLAN) {	/* normal packet */
		ip = (struct ip_udp_hdr *)(inpkt + ETHER_HDR_SIZE);
c7e28040:	128a600e 	addne	r6, sl, #14	; 0xe
		eth_proto = ntohs(et802->et_prot);

		ip = (struct ip_udp_hdr *)(inpkt + E802_HDR_SIZE);
		len -= E802_HDR_SIZE;

	} else if (eth_proto != PROT_VLAN) {	/* normal packet */
c7e28044:	1a00000e 	bne	c7e28084 <NetReceive+0xcc>
			(struct vlan_ethernet_hdr *)et;

		debug_cond(DEBUG_NET_PKT, "VLAN packet received\n");

		/* too small packet? */
		if (len < VLAN_ETHER_HDR_SIZE)
c7e28048:	e3570011 	cmp	r7, #17	; 0x11
c7e2804c:	9a00006d 	bls	c7e28208 <NetReceive+0x250>
			return;

		/* if no VLAN active */
		if ((ntohs(NetOurVLAN) & VLAN_IDMASK) == VLAN_NONE
c7e28050:	e1a03a06 	lsl	r3, r6, #20
c7e28054:	e1a03a23 	lsr	r3, r3, #20
c7e28058:	e1530004 	cmp	r3, r4
c7e2805c:	0a000069 	beq	c7e28208 <NetReceive+0x250>
				&& iscdp == 0
#endif
				)
			return;

		cti = ntohs(vet->vet_tag);
c7e28060:	e1da00be 	ldrh	r0, [sl, #14]
c7e28064:	ebfffe67 	bl	c7e27a08 <__fswab16>
c7e28068:	e1a04000 	mov	r4, r0
		vlanid = cti & VLAN_IDMASK;
		eth_proto = ntohs(vet->vet_type);
c7e2806c:	e1da01b0 	ldrh	r0, [sl, #16]
c7e28070:	ebfffe64 	bl	c7e27a08 <__fswab16>
#endif
				)
			return;

		cti = ntohs(vet->vet_tag);
		vlanid = cti & VLAN_IDMASK;
c7e28074:	e1a04a04 	lsl	r4, r4, #20
c7e28078:	e1a04a24 	lsr	r4, r4, #20
		eth_proto = ntohs(vet->vet_type);

		ip = (struct ip_udp_hdr *)(inpkt + VLAN_ETHER_HDR_SIZE);
		len -= VLAN_ETHER_HDR_SIZE;
c7e2807c:	e2475012 	sub	r5, r7, #18	; 0x12

		cti = ntohs(vet->vet_tag);
		vlanid = cti & VLAN_IDMASK;
		eth_proto = ntohs(vet->vet_type);

		ip = (struct ip_udp_hdr *)(inpkt + VLAN_ETHER_HDR_SIZE);
c7e28080:	e28a6012 	add	r6, sl, #18	; 0x12
		cdp_receive((uchar *)ip, len);
		return;
	}
#endif

	if ((myvlanid & VLAN_IDMASK) != VLAN_NONE) {
c7e28084:	e1a03a09 	lsl	r3, r9, #20
c7e28088:	e59f218c 	ldr	r2, [pc, #396]	; c7e2821c <NetReceive+0x264>
c7e2808c:	e1a03a23 	lsr	r3, r3, #20
c7e28090:	e1530002 	cmp	r3, r2
c7e28094:	0a000003 	beq	c7e280a8 <NetReceive+0xf0>
		if (vlanid == VLAN_NONE)
c7e28098:	e1540002 	cmp	r4, r2
			vlanid = (mynvlanid & VLAN_IDMASK);
c7e2809c:	000b4004 	andeq	r4, fp, r4
		/* not matched? */
		if (vlanid != (myvlanid & VLAN_IDMASK))
c7e280a0:	e1540003 	cmp	r4, r3
c7e280a4:	1a000057 	bne	c7e28208 <NetReceive+0x250>
			return;
	}

	switch (eth_proto) {
c7e280a8:	e3500b02 	cmp	r0, #2048	; 0x800
c7e280ac:	0a000008 	beq	c7e280d4 <NetReceive+0x11c>
c7e280b0:	e59f316c 	ldr	r3, [pc, #364]	; c7e28224 <NetReceive+0x26c>
c7e280b4:	e1500003 	cmp	r0, r3
c7e280b8:	1a000052 	bne	c7e28208 <NetReceive+0x250>

	case PROT_ARP:
		ArpReceive(et, ip, len);
c7e280bc:	e1a0000a 	mov	r0, sl
c7e280c0:	e1a01006 	mov	r1, r6
c7e280c4:	e1a02005 	mov	r2, r5
				src_ip,
				ntohs(ip->udp_src),
				ntohs(ip->udp_len) - UDP_HDR_SIZE);
		break;
	}
}
c7e280c8:	e28dd008 	add	sp, sp, #8	; 0x8
c7e280cc:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
	}

	switch (eth_proto) {

	case PROT_ARP:
		ArpReceive(et, ip, len);
c7e280d0:	eafff9a5 	b	c7e2676c <ArpReceive>
		break;
#endif
	case PROT_IP:
		debug_cond(DEBUG_NET_PKT, "Got IP\n");
		/* Before we start poking the header, make sure it is there */
		if (len < IP_UDP_HDR_SIZE) {
c7e280d4:	e355001b 	cmp	r5, #27	; 0x1b
c7e280d8:	9a00004a 	bls	c7e28208 <NetReceive+0x250>
			debug("len bad %d < %lu\n", len,
				(ulong)IP_UDP_HDR_SIZE);
			return;
		}
		/* Check the packet length */
		if (len < ntohs(ip->ip_len)) {
c7e280dc:	e1d600b2 	ldrh	r0, [r6, #2]
c7e280e0:	ebfffe48 	bl	c7e27a08 <__fswab16>
c7e280e4:	e1550000 	cmp	r5, r0
c7e280e8:	e1a04000 	mov	r4, r0
c7e280ec:	ba000045 	blt	c7e28208 <NetReceive+0x250>
		len = ntohs(ip->ip_len);
		debug_cond(DEBUG_NET_PKT, "len=%d, v=%02x\n",
			len, ip->ip_hl_v & 0xff);

		/* Can't deal with anything except IPv4 */
		if ((ip->ip_hl_v & 0xf0) != 0x40)
c7e280f0:	e5d62000 	ldrb	r2, [r6]
c7e280f4:	e20230f0 	and	r3, r2, #240	; 0xf0
c7e280f8:	e3530040 	cmp	r3, #64	; 0x40
c7e280fc:	1a000041 	bne	c7e28208 <NetReceive+0x250>
			return;
		/* Can't deal with IP options (headers != 20 bytes) */
		if ((ip->ip_hl_v & 0x0f) > 0x05)
c7e28100:	e202300f 	and	r3, r2, #15	; 0xf
c7e28104:	e3530005 	cmp	r3, #5	; 0x5
c7e28108:	ca00003e 	bgt	c7e28208 <NetReceive+0x250>
			return;
		/* Check the Checksum of the header */
		if (!NetCksumOk((uchar *)ip, IP_HDR_SIZE / 2)) {
c7e2810c:	e1a00006 	mov	r0, r6
c7e28110:	e3a0100a 	mov	r1, #10	; 0xa
c7e28114:	ebfffe71 	bl	c7e27ae0 <NetCksumOk>
c7e28118:	e3500000 	cmp	r0, #0	; 0x0
c7e2811c:	0a000039 	beq	c7e28208 <NetReceive+0x250>
			debug("checksum bad\n");
			return;
		}
		/* If it is not for us, ignore it */
		dst_ip = NetReadIP(&ip->ip_dst);
c7e28120:	e2860010 	add	r0, r6, #16	; 0x10
c7e28124:	ebffff9c 	bl	c7e27f9c <NetReadIP>
		if (NetOurIP && dst_ip != NetOurIP && dst_ip != 0xFFFFFFFF) {
c7e28128:	e59f30e0 	ldr	r3, [pc, #224]	; c7e28210 <NetReceive+0x258>
c7e2812c:	e593301c 	ldr	r3, [r3, #28]
c7e28130:	e3530000 	cmp	r3, #0	; 0x0
c7e28134:	0a000002 	beq	c7e28144 <NetReceive+0x18c>
c7e28138:	e1500003 	cmp	r0, r3
c7e2813c:	13700001 	cmnne	r0, #1	; 0x1
c7e28140:	1a000030 	bne	c7e28208 <NetReceive+0x250>
			if (Mcast_addr != dst_ip)
#endif
				return;
		}
		/* Read source IP address for later use */
		src_ip = NetReadIP(&ip->ip_src);
c7e28144:	e286000c 	add	r0, r6, #12	; 0xc
c7e28148:	ebffff93 	bl	c7e27f9c <NetReadIP>
c7e2814c:	e1a07000 	mov	r7, r0

#else /* !CONFIG_IP_DEFRAG */

static inline struct ip_udp_hdr *NetDefragment(struct ip_udp_hdr *ip, int *lenp)
{
	u16 ip_off = ntohs(ip->ip_off);
c7e28150:	e1d600b6 	ldrh	r0, [r6, #6]
c7e28154:	ebfffe2b 	bl	c7e27a08 <__fswab16>
	if (!(ip_off & (IP_OFFS | IP_FLAGS_MFRAG)))
c7e28158:	e1a00900 	lsl	r0, r0, #18
c7e2815c:	e1a00920 	lsr	r0, r0, #18
c7e28160:	e3500000 	cmp	r0, #0	; 0x0
c7e28164:	1a000027 	bne	c7e28208 <NetReceive+0x250>
		 *
		 * Simon Glass <sjg@chromium.org>: We get an ICMP when
		 * we send a tftp packet to a dead connection, or when
		 * there is no server at the other end.
		 */
		if (ip->ip_p == IPPROTO_ICMP) {
c7e28168:	e5d63009 	ldrb	r3, [r6, #9]
c7e2816c:	e3530001 	cmp	r3, #1	; 0x1
c7e28170:	1a000011 	bne	c7e281bc <NetReceive+0x204>
static void receive_icmp(struct ip_udp_hdr *ip, int len,
			IPaddr_t src_ip, struct ethernet_hdr *et)
{
	struct icmp_hdr *icmph = (struct icmp_hdr *)&ip->udp_src;

	switch (icmph->type) {
c7e28174:	e5d63014 	ldrb	r3, [r6, #20]
 * @parma ip	IP packet containing the ICMP
 */
static void receive_icmp(struct ip_udp_hdr *ip, int len,
			IPaddr_t src_ip, struct ethernet_hdr *et)
{
	struct icmp_hdr *icmph = (struct icmp_hdr *)&ip->udp_src;
c7e28178:	e2862014 	add	r2, r6, #20	; 0x14

	switch (icmph->type) {
c7e2817c:	e3530005 	cmp	r3, #5	; 0x5
c7e28180:	1a000007 	bne	c7e281a4 <NetReceive+0x1ec>
	case ICMP_REDIRECT:
		if (icmph->code != ICMP_REDIR_HOST)
c7e28184:	e5d23001 	ldrb	r3, [r2, #1]
c7e28188:	e3530001 	cmp	r3, #1	; 0x1
c7e2818c:	1a00001d 	bne	c7e28208 <NetReceive+0x250>
			return;
		printf(" ICMP Host Redirect to %pI4 ",
c7e28190:	e59f0090 	ldr	r0, [pc, #144]	; c7e28228 <NetReceive+0x270>
c7e28194:	e2861018 	add	r1, r6, #24	; 0x18
				src_ip,
				ntohs(ip->udp_src),
				ntohs(ip->udp_len) - UDP_HDR_SIZE);
		break;
	}
}
c7e28198:	e28dd008 	add	sp, sp, #8	; 0x8
c7e2819c:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}

	switch (icmph->type) {
	case ICMP_REDIRECT:
		if (icmph->code != ICMP_REDIR_HOST)
			return;
		printf(" ICMP Host Redirect to %pI4 ",
c7e281a0:	eaff822c 	b	c7e08a58 <printf>
			&icmph->un.gateway);
		break;
	default:
#if defined(CONFIG_CMD_PING)
		ping_receive(et, ip, len);
c7e281a4:	e1a0000a 	mov	r0, sl
c7e281a8:	e1a01006 	mov	r1, r6
c7e281ac:	e1a02004 	mov	r2, r4
				src_ip,
				ntohs(ip->udp_src),
				ntohs(ip->udp_len) - UDP_HDR_SIZE);
		break;
	}
}
c7e281b0:	e28dd008 	add	sp, sp, #8	; 0x8
c7e281b4:	e8bd4ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, lr}
		printf(" ICMP Host Redirect to %pI4 ",
			&icmph->un.gateway);
		break;
	default:
#if defined(CONFIG_CMD_PING)
		ping_receive(et, ip, len);
c7e281b8:	ea00057c 	b	c7e297b0 <ping_receive>
		 * there is no server at the other end.
		 */
		if (ip->ip_p == IPPROTO_ICMP) {
			receive_icmp(ip, len, src_ip, et);
			return;
		} else if (ip->ip_p != IPPROTO_UDP) {	/* Only UDP packets */
c7e281bc:	e3530011 	cmp	r3, #17	; 0x11
c7e281c0:	1a000010 	bne	c7e28208 <NetReceive+0x250>
					ntohs(ip->udp_len) - UDP_HDR_SIZE);
#endif
		/*
		 *	IP header OK.  Pass the packet to the current handler.
		 */
		(*udp_packet_handler)((uchar *)ip + IP_UDP_HDR_SIZE,
c7e281c4:	e1d601b6 	ldrh	r0, [r6, #22]
c7e281c8:	ebfffe0e 	bl	c7e27a08 <__fswab16>
c7e281cc:	e1a05000 	mov	r5, r0
c7e281d0:	e1d601b4 	ldrh	r0, [r6, #20]
c7e281d4:	ebfffe0b 	bl	c7e27a08 <__fswab16>
c7e281d8:	e1a04000 	mov	r4, r0
c7e281dc:	e1d601b8 	ldrh	r0, [r6, #24]
c7e281e0:	ebfffe08 	bl	c7e27a08 <__fswab16>
c7e281e4:	e2400008 	sub	r0, r0, #8	; 0x8
c7e281e8:	e58d0000 	str	r0, [sp]
c7e281ec:	e1a01005 	mov	r1, r5
c7e281f0:	e286001c 	add	r0, r6, #28	; 0x1c
c7e281f4:	e1a02007 	mov	r2, r7
c7e281f8:	e1a03004 	mov	r3, r4
c7e281fc:	e59fc00c 	ldr	ip, [pc, #12]	; c7e28210 <NetReceive+0x258>
c7e28200:	e1a0e00f 	mov	lr, pc
c7e28204:	e59cf004 	ldr	pc, [ip, #4]
				src_ip,
				ntohs(ip->udp_src),
				ntohs(ip->udp_len) - UDP_HDR_SIZE);
		break;
	}
}
c7e28208:	e28dd008 	add	sp, sp, #8	; 0x8
c7e2820c:	e8bd8ef0 	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
c7e28210:	c7e7299c 	.word	0xc7e7299c
c7e28214:	c7e3a4cc 	.word	0xc7e3a4cc
c7e28218:	0000ffff 	.word	0x0000ffff
c7e2821c:	00000fff 	.word	0x00000fff
c7e28220:	000005e9 	.word	0x000005e9
c7e28224:	00000806 	.word	0x00000806
c7e28228:	c7e34d35 	.word	0xc7e34d35

c7e2822c <NetSendUDPPacket>:
	}
}

int NetSendUDPPacket(uchar *ether, IPaddr_t dest, int dport, int sport,
		int payload_len)
{
c7e2822c:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
c7e28230:	e1a06000 	mov	r6, r0
	int eth_hdr_size;
	int pkt_hdr_size;

	/* make sure the NetTxPacket is initialized (NetInit() was called) */
	assert(NetTxPacket != NULL);
	if (NetTxPacket == NULL)
c7e28234:	e59f00d8 	ldr	r0, [pc, #216]	; c7e28314 <NetSendUDPPacket+0xe8>
	}
}

int NetSendUDPPacket(uchar *ether, IPaddr_t dest, int dport, int sport,
		int payload_len)
{
c7e28238:	e1a07001 	mov	r7, r1
	int eth_hdr_size;
	int pkt_hdr_size;

	/* make sure the NetTxPacket is initialized (NetInit() was called) */
	assert(NetTxPacket != NULL);
	if (NetTxPacket == NULL)
c7e2823c:	e5905030 	ldr	r5, [r0, #48]
	}
}

int NetSendUDPPacket(uchar *ether, IPaddr_t dest, int dport, int sport,
		int payload_len)
{
c7e28240:	e1a0a002 	mov	sl, r2
	int eth_hdr_size;
	int pkt_hdr_size;

	/* make sure the NetTxPacket is initialized (NetInit() was called) */
	assert(NetTxPacket != NULL);
	if (NetTxPacket == NULL)
c7e28244:	e3550000 	cmp	r5, #0	; 0x0
	}
}

int NetSendUDPPacket(uchar *ether, IPaddr_t dest, int dport, int sport,
		int payload_len)
{
c7e28248:	e1a09003 	mov	r9, r3
	int eth_hdr_size;
	int pkt_hdr_size;

	/* make sure the NetTxPacket is initialized (NetInit() was called) */
	assert(NetTxPacket != NULL);
	if (NetTxPacket == NULL)
c7e2824c:	03e00000 	mvneq	r0, #0	; 0x0
c7e28250:	0a00002e 	beq	c7e28310 <NetSendUDPPacket+0xe4>
		return -1;

	/* convert to new style broadcast */
	if (dest == 0)
c7e28254:	e3510000 	cmp	r1, #0	; 0x0
c7e28258:	059f60b8 	ldreq	r6, [pc, #184]	; c7e28318 <NetSendUDPPacket+0xec>
c7e2825c:	03e07000 	mvneq	r7, #0	; 0x0
c7e28260:	0a000002 	beq	c7e28270 <NetSendUDPPacket+0x44>
		dest = 0xFFFFFFFF;

	/* if broadcast, make the ether address a broadcast and don't do ARP */
	if (dest == 0xFFFFFFFF)
c7e28264:	e59f30ac 	ldr	r3, [pc, #172]	; c7e28318 <NetSendUDPPacket+0xec>
c7e28268:	e3770001 	cmn	r7, #1	; 0x1
c7e2826c:	01a06003 	moveq	r6, r3
		ether = NetBcastAddr;

	pkt = (uchar *)NetTxPacket;

	eth_hdr_size = NetSetEther(pkt, ether, PROT_IP);
c7e28270:	e1a01006 	mov	r1, r6
c7e28274:	e3a02b02 	mov	r2, #2048	; 0x800
c7e28278:	e1a00005 	mov	r0, r5
c7e2827c:	ebffff19 	bl	c7e27ee8 <NetSetEther>
	pkt += eth_hdr_size;
	net_set_udp_header(pkt, dest, dport, sport, payload_len);
	pkt_hdr_size = eth_hdr_size + IP_UDP_HDR_SIZE;

	/* if MAC address was not discovered yet, do an ARP request */
	if (memcmp(ether, NetEtherNullAddr, 6) == 0) {
c7e28280:	e59fb08c 	ldr	fp, [pc, #140]	; c7e28314 <NetSendUDPPacket+0xe8>

	pkt = (uchar *)NetTxPacket;

	eth_hdr_size = NetSetEther(pkt, ether, PROT_IP);
	pkt += eth_hdr_size;
	net_set_udp_header(pkt, dest, dport, sport, payload_len);
c7e28284:	e59dc028 	ldr	ip, [sp, #40]
c7e28288:	e1a03009 	mov	r3, r9
	if (dest == 0xFFFFFFFF)
		ether = NetBcastAddr;

	pkt = (uchar *)NetTxPacket;

	eth_hdr_size = NetSetEther(pkt, ether, PROT_IP);
c7e2828c:	e1a04000 	mov	r4, r0
	pkt += eth_hdr_size;
	net_set_udp_header(pkt, dest, dport, sport, payload_len);
c7e28290:	e1a0200a 	mov	r2, sl
c7e28294:	e0850000 	add	r0, r5, r0
c7e28298:	e1a01007 	mov	r1, r7
c7e2829c:	e58dc000 	str	ip, [sp]
c7e282a0:	ebfffec2 	bl	c7e27db0 <net_set_udp_header>
	pkt_hdr_size = eth_hdr_size + IP_UDP_HDR_SIZE;

	/* if MAC address was not discovered yet, do an ARP request */
	if (memcmp(ether, NetEtherNullAddr, 6) == 0) {
c7e282a4:	e28b1034 	add	r1, fp, #52	; 0x34
c7e282a8:	e1a00006 	mov	r0, r6
c7e282ac:	e3a02006 	mov	r2, #6	; 0x6
c7e282b0:	ebffea9b 	bl	c7e22d24 <memcmp>
c7e282b4:	e59d3028 	ldr	r3, [sp, #40]
	pkt = (uchar *)NetTxPacket;

	eth_hdr_size = NetSetEther(pkt, ether, PROT_IP);
	pkt += eth_hdr_size;
	net_set_udp_header(pkt, dest, dport, sport, payload_len);
	pkt_hdr_size = eth_hdr_size + IP_UDP_HDR_SIZE;
c7e282b8:	e284401c 	add	r4, r4, #28	; 0x1c

	/* if MAC address was not discovered yet, do an ARP request */
	if (memcmp(ether, NetEtherNullAddr, 6) == 0) {
c7e282bc:	e3500000 	cmp	r0, #0	; 0x0
c7e282c0:	e0841003 	add	r1, r4, r3
c7e282c4:	1a00000e 	bne	c7e28304 <NetSendUDPPacket+0xd8>
		debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &dest);

		/* save the ip and eth addr for the packet to send after arp */
		NetArpWaitPacketIP = dest;
c7e282c8:	e59f304c 	ldr	r3, [pc, #76]	; c7e2831c <NetSendUDPPacket+0xf0>

		/* size of the waiting packet */
		NetArpWaitTxPacketSize = pkt_hdr_size + payload_len;

		/* and do the ARP request */
		NetArpWaitTry = 1;
c7e282cc:	e3a04001 	mov	r4, #1	; 0x1
	/* if MAC address was not discovered yet, do an ARP request */
	if (memcmp(ether, NetEtherNullAddr, 6) == 0) {
		debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &dest);

		/* save the ip and eth addr for the packet to send after arp */
		NetArpWaitPacketIP = dest;
c7e282d0:	e5837000 	str	r7, [r3]
		NetArpWaitPacketMAC = ether;
c7e282d4:	e59f3044 	ldr	r3, [pc, #68]	; c7e28320 <NetSendUDPPacket+0xf4>
c7e282d8:	e5836000 	str	r6, [r3]

		/* size of the waiting packet */
		NetArpWaitTxPacketSize = pkt_hdr_size + payload_len;
c7e282dc:	e59f3040 	ldr	r3, [pc, #64]	; c7e28324 <NetSendUDPPacket+0xf8>
c7e282e0:	e5831000 	str	r1, [r3]

		/* and do the ARP request */
		NetArpWaitTry = 1;
c7e282e4:	e59f303c 	ldr	r3, [pc, #60]	; c7e28328 <NetSendUDPPacket+0xfc>
c7e282e8:	e5834000 	str	r4, [r3]
		NetArpWaitTimerStart = get_timer(0);
c7e282ec:	ebff61c3 	bl	c7e00a00 <get_timer>
c7e282f0:	e59f3034 	ldr	r3, [pc, #52]	; c7e2832c <NetSendUDPPacket+0x100>
c7e282f4:	e5830000 	str	r0, [r3]
		ArpRequest();
c7e282f8:	ebfff9bd 	bl	c7e269f4 <ArpRequest>
c7e282fc:	e1a00004 	mov	r0, r4
c7e28300:	ea000002 	b	c7e28310 <NetSendUDPPacket+0xe4>
}

/* Transmit a packet */
static inline void NetSendPacket(uchar *pkt, int len)
{
	(void) eth_send(pkt, len);
c7e28304:	e59b0030 	ldr	r0, [fp, #48]
c7e28308:	ebfffb96 	bl	c7e27168 <eth_send>
c7e2830c:	e3a00000 	mov	r0, #0	; 0x0
		debug_cond(DEBUG_DEV_PKT, "sending UDP to %pI4/%pM\n",
			&dest, ether);
		NetSendPacket(NetTxPacket, pkt_hdr_size + payload_len);
		return 0;	/* transmitted */
	}
}
c7e28310:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e28314:	c7e7299c 	.word	0xc7e7299c
c7e28318:	c7e3a4d0 	.word	0xc7e3a4d0
c7e2831c:	c7e72324 	.word	0xc7e72324
c7e28320:	c7e72320 	.word	0xc7e72320
c7e28324:	c7e7232c 	.word	0xc7e7232c
c7e28328:	c7e72978 	.word	0xc7e72978
c7e2832c:	c7e72974 	.word	0xc7e72974

c7e28330 <NetStartAgain>:
{
	net_set_state(NETLOOP_RESTART);
}

void NetStartAgain(void)
{
c7e28330:	e92d4070 	push	{r4, r5, r6, lr}
	char *nretry;
	int retry_forever = 0;
	unsigned long retrycnt = 0;

	nretry = getenv("netretry");
c7e28334:	e59f00e4 	ldr	r0, [pc, #228]	; c7e28420 <NetStartAgain+0xf0>
c7e28338:	ebff7b57 	bl	c7e0709c <getenv>
	if (nretry) {
c7e2833c:	e2504000 	subs	r4, r0, #0	; 0x0
c7e28340:	0a000018 	beq	c7e283a8 <NetStartAgain+0x78>
		if (!strcmp(nretry, "yes"))
c7e28344:	e59f10d8 	ldr	r1, [pc, #216]	; c7e28424 <NetStartAgain+0xf4>
c7e28348:	ebffe944 	bl	c7e22860 <strcmp>
c7e2834c:	e3500000 	cmp	r0, #0	; 0x0
c7e28350:	0a000014 	beq	c7e283a8 <NetStartAgain+0x78>
			retry_forever = 1;
		else if (!strcmp(nretry, "no"))
c7e28354:	e1a00004 	mov	r0, r4
c7e28358:	e59f10c8 	ldr	r1, [pc, #200]	; c7e28428 <NetStartAgain+0xf8>
c7e2835c:	ebffe93f 	bl	c7e22860 <strcmp>
c7e28360:	e3500000 	cmp	r0, #0	; 0x0
c7e28364:	0a000009 	beq	c7e28390 <NetStartAgain+0x60>
			retrycnt = 0;
		else if (!strcmp(nretry, "once"))
c7e28368:	e1a00004 	mov	r0, r4
c7e2836c:	e59f10b8 	ldr	r1, [pc, #184]	; c7e2842c <NetStartAgain+0xfc>
c7e28370:	ebffe93a 	bl	c7e22860 <strcmp>
c7e28374:	e3500000 	cmp	r0, #0	; 0x0
c7e28378:	02800001 	addeq	r0, r0, #1	; 0x1
c7e2837c:	0a000003 	beq	c7e28390 <NetStartAgain+0x60>
			retrycnt = 1;
		else
			retrycnt = simple_strtoul(nretry, NULL, 0);
c7e28380:	e3a01000 	mov	r1, #0	; 0x0
c7e28384:	e1a00004 	mov	r0, r4
c7e28388:	e1a02001 	mov	r2, r1
c7e2838c:	ebffeaf3 	bl	c7e22f60 <simple_strtoul>
	} else
		retry_forever = 1;

	if ((!retry_forever) && (NetTryCount >= retrycnt)) {
c7e28390:	e59f3098 	ldr	r3, [pc, #152]	; c7e28430 <NetStartAgain+0x100>
c7e28394:	e593303c 	ldr	r3, [r3, #60]
c7e28398:	e1530000 	cmp	r3, r0
c7e2839c:	3a000001 	bcc	c7e283a8 <NetStartAgain+0x78>
		eth_halt();
c7e283a0:	ebfffb63 	bl	c7e27134 <eth_halt>
c7e283a4:	ea000018 	b	c7e2840c <NetStartAgain+0xdc>
		net_set_state(NETLOOP_FAIL);
		return;
	}

	NetTryCount++;
c7e283a8:	e59f4080 	ldr	r4, [pc, #128]	; c7e28430 <NetStartAgain+0x100>
c7e283ac:	e594303c 	ldr	r3, [r4, #60]
c7e283b0:	e2833001 	add	r3, r3, #1	; 0x1
c7e283b4:	e584303c 	str	r3, [r4, #60]

	eth_halt();
c7e283b8:	ebfffb5d 	bl	c7e27134 <eth_halt>
#if !defined(CONFIG_NET_DO_NOT_TRY_ANOTHER)
	eth_try_another(!NetRestarted);
c7e283bc:	e5940040 	ldr	r0, [r4, #64]
c7e283c0:	e2700001 	rsbs	r0, r0, #1	; 0x1
c7e283c4:	33a00000 	movcc	r0, #0	; 0x0
c7e283c8:	ebfffbc2 	bl	c7e272d8 <eth_try_another>
#endif
	eth_init(gd->bd);
c7e283cc:	e5980000 	ldr	r0, [r8]
c7e283d0:	ebfffc87 	bl	c7e275f4 <eth_init>
	if (NetRestartWrap) {
c7e283d4:	e5943044 	ldr	r3, [r4, #68]
c7e283d8:	e3530000 	cmp	r3, #0	; 0x0
c7e283dc:	0a00000c 	beq	c7e28414 <NetStartAgain+0xe4>
		NetRestartWrap = 0;
		if (NetDevExists) {
c7e283e0:	e5943048 	ldr	r3, [r4, #72]
#if !defined(CONFIG_NET_DO_NOT_TRY_ANOTHER)
	eth_try_another(!NetRestarted);
#endif
	eth_init(gd->bd);
	if (NetRestartWrap) {
		NetRestartWrap = 0;
c7e283e4:	e3a05000 	mov	r5, #0	; 0x0
		if (NetDevExists) {
c7e283e8:	e1530005 	cmp	r3, r5
#if !defined(CONFIG_NET_DO_NOT_TRY_ANOTHER)
	eth_try_another(!NetRestarted);
#endif
	eth_init(gd->bd);
	if (NetRestartWrap) {
		NetRestartWrap = 0;
c7e283ec:	e5845044 	str	r5, [r4, #68]
		if (NetDevExists) {
c7e283f0:	0a000005 	beq	c7e2840c <NetStartAgain+0xdc>
			NetSetTimeout(10000UL, startAgainTimeout);
c7e283f4:	e59f0038 	ldr	r0, [pc, #56]	; c7e28434 <NetStartAgain+0x104>
c7e283f8:	e59f1038 	ldr	r1, [pc, #56]	; c7e28438 <NetStartAgain+0x108>
c7e283fc:	ebfffe2f 	bl	c7e27cc0 <NetSetTimeout>
			net_set_udp_handler(NULL);
c7e28400:	e1a00005 	mov	r0, r5
			net_set_state(NETLOOP_FAIL);
		}
	} else {
		net_set_state(NETLOOP_RESTART);
	}
}
c7e28404:	e8bd4070 	pop	{r4, r5, r6, lr}
	eth_init(gd->bd);
	if (NetRestartWrap) {
		NetRestartWrap = 0;
		if (NetDevExists) {
			NetSetTimeout(10000UL, startAgainTimeout);
			net_set_udp_handler(NULL);
c7e28408:	eafffd8e 	b	c7e27a48 <net_set_udp_handler>
		} else {
			net_set_state(NETLOOP_FAIL);
c7e2840c:	e3a00003 	mov	r0, #3	; 0x3
c7e28410:	ea000000 	b	c7e28418 <NetStartAgain+0xe8>
		}
	} else {
		net_set_state(NETLOOP_RESTART);
c7e28414:	e3a00001 	mov	r0, #1	; 0x1
	}
}
c7e28418:	e8bd4070 	pop	{r4, r5, r6, lr}
			net_set_udp_handler(NULL);
		} else {
			net_set_state(NETLOOP_FAIL);
		}
	} else {
		net_set_state(NETLOOP_RESTART);
c7e2841c:	eafffd7e 	b	c7e27a1c <net_set_state>
c7e28420:	c7e34d52 	.word	0xc7e34d52
c7e28424:	c7e2ea33 	.word	0xc7e2ea33
c7e28428:	c7e2e9f5 	.word	0xc7e2e9f5
c7e2842c:	c7e34d5b 	.word	0xc7e34d5b
c7e28430:	c7e7299c 	.word	0xc7e7299c
c7e28434:	00002710 	.word	0x00002710
c7e28438:	c7e27a2c 	.word	0xc7e27a2c

c7e2843c <net_auto_load>:
/*
 * Check if autoload is enabled. If so, use either NFS or TFTP to download
 * the boot file.
 */
void net_auto_load(void)
{
c7e2843c:	e92d4010 	push	{r4, lr}
	const char *s = getenv("autoload");
c7e28440:	e59f0044 	ldr	r0, [pc, #68]	; c7e2848c <net_auto_load+0x50>
c7e28444:	ebff7b14 	bl	c7e0709c <getenv>

	if (s != NULL) {
c7e28448:	e2503000 	subs	r3, r0, #0	; 0x0
c7e2844c:	0a00000b 	beq	c7e28480 <net_auto_load+0x44>
		if (*s == 'n') {
c7e28450:	e5d33000 	ldrb	r3, [r3]
c7e28454:	e353006e 	cmp	r3, #110	; 0x6e
c7e28458:	1a000002 	bne	c7e28468 <net_auto_load+0x2c>
			/*
			 * Just use BOOTP/RARP to configure system;
			 * Do not use TFTP to load the bootfile.
			 */
			net_set_state(NETLOOP_SUCCESS);
c7e2845c:	e3a00002 	mov	r0, #2	; 0x2
			return;
		}
#endif
	}
	TftpStart(TFTPGET);
}
c7e28460:	e8bd4010 	pop	{r4, lr}
		if (*s == 'n') {
			/*
			 * Just use BOOTP/RARP to configure system;
			 * Do not use TFTP to load the bootfile.
			 */
			net_set_state(NETLOOP_SUCCESS);
c7e28464:	eafffd6c 	b	c7e27a1c <net_set_state>
			return;
		}
#if defined(CONFIG_CMD_NFS)
		if (strcmp(s, "NFS") == 0) {
c7e28468:	e59f1020 	ldr	r1, [pc, #32]	; c7e28490 <net_auto_load+0x54>
c7e2846c:	ebffe8fb 	bl	c7e22860 <strcmp>
c7e28470:	e3500000 	cmp	r0, #0	; 0x0
c7e28474:	1a000001 	bne	c7e28480 <net_auto_load+0x44>
			return;
		}
#endif
	}
	TftpStart(TFTPGET);
}
c7e28478:	e8bd4010 	pop	{r4, lr}
#if defined(CONFIG_CMD_NFS)
		if (strcmp(s, "NFS") == 0) {
			/*
			 * Use NFS to load the bootfile.
			 */
			NfsStart();
c7e2847c:	ea000321 	b	c7e29108 <NfsStart>
			return;
		}
#endif
	}
	TftpStart(TFTPGET);
c7e28480:	e3a00003 	mov	r0, #3	; 0x3
}
c7e28484:	e8bd4010 	pop	{r4, lr}
			NfsStart();
			return;
		}
#endif
	}
	TftpStart(TFTPGET);
c7e28488:	ea0005be 	b	c7e29b88 <TftpStart>
c7e2848c:	c7e34d60 	.word	0xc7e34d60
c7e28490:	c7e34d69 	.word	0xc7e34d69

c7e28494 <getenv_IPaddr>:
		int (*func)(unsigned long, unsigned long));

/* lib/net_utils.c */
#include <net.h>
static inline IPaddr_t getenv_IPaddr(char *var)
{
c7e28494:	e92d4010 	push	{r4, lr}
	return string_to_ip(getenv(var));
c7e28498:	ebff7aff 	bl	c7e0709c <getenv>
}
c7e2849c:	e8bd4010 	pop	{r4, lr}

/* lib/net_utils.c */
#include <net.h>
static inline IPaddr_t getenv_IPaddr(char *var)
{
	return string_to_ip(getenv(var));
c7e284a0:	eaffe850 	b	c7e225e8 <string_to_ip>

c7e284a4 <NetInitLoop>:
}

static void NetInitLoop(void)
{
c7e284a4:	e92d4070 	push	{r4, r5, r6, lr}
	static int env_changed_id;
	int env_id = get_env_id();
c7e284a8:	ebff79c9 	bl	c7e06bd4 <get_env_id>

	/* update only when the environment has changed */
	if (env_changed_id != env_id) {
c7e284ac:	e59f5078 	ldr	r5, [pc, #120]	; c7e2852c <NetInitLoop+0x88>
}

static void NetInitLoop(void)
{
	static int env_changed_id;
	int env_id = get_env_id();
c7e284b0:	e1a06000 	mov	r6, r0

	/* update only when the environment has changed */
	if (env_changed_id != env_id) {
c7e284b4:	e595304c 	ldr	r3, [r5, #76]
c7e284b8:	e1530000 	cmp	r3, r0
c7e284bc:	0a000013 	beq	c7e28510 <NetInitLoop+0x6c>
		NetOurIP = getenv_IPaddr("ipaddr");
c7e284c0:	e59f0068 	ldr	r0, [pc, #104]	; c7e28530 <NetInitLoop+0x8c>
c7e284c4:	ebfffff2 	bl	c7e28494 <getenv_IPaddr>
c7e284c8:	e585001c 	str	r0, [r5, #28]
		NetOurGatewayIP = getenv_IPaddr("gatewayip");
c7e284cc:	e59f0060 	ldr	r0, [pc, #96]	; c7e28534 <NetInitLoop+0x90>
c7e284d0:	ebffffef 	bl	c7e28494 <getenv_IPaddr>
c7e284d4:	e5850050 	str	r0, [r5, #80]
		NetOurSubnetMask = getenv_IPaddr("netmask");
c7e284d8:	e59f0058 	ldr	r0, [pc, #88]	; c7e28538 <NetInitLoop+0x94>
c7e284dc:	ebffffec 	bl	c7e28494 <getenv_IPaddr>
c7e284e0:	e5850054 	str	r0, [r5, #84]
		NetServerIP = getenv_IPaddr("serverip");
c7e284e4:	e59f0050 	ldr	r0, [pc, #80]	; c7e2853c <NetInitLoop+0x98>
c7e284e8:	ebffffe9 	bl	c7e28494 <getenv_IPaddr>
c7e284ec:	e5850058 	str	r0, [r5, #88]
		NetOurNativeVLAN = getenv_VLAN("nvlan");
c7e284f0:	e59f0048 	ldr	r0, [pc, #72]	; c7e28540 <NetInitLoop+0x9c>
c7e284f4:	ebfffdab 	bl	c7e27ba8 <getenv_VLAN>
c7e284f8:	e59f4044 	ldr	r4, [pc, #68]	; c7e28544 <NetInitLoop+0xa0>
c7e284fc:	e1c400b2 	strh	r0, [r4, #2]
		NetOurVLAN = getenv_VLAN("vlan");
c7e28500:	e59f0040 	ldr	r0, [pc, #64]	; c7e28548 <NetInitLoop+0xa4>
c7e28504:	ebfffda7 	bl	c7e27ba8 <getenv_VLAN>
#if defined(CONFIG_CMD_DNS)
		NetOurDNSIP = getenv_IPaddr("dnsip");
#endif
		env_changed_id = env_id;
c7e28508:	e585604c 	str	r6, [r5, #76]
		NetOurIP = getenv_IPaddr("ipaddr");
		NetOurGatewayIP = getenv_IPaddr("gatewayip");
		NetOurSubnetMask = getenv_IPaddr("netmask");
		NetServerIP = getenv_IPaddr("serverip");
		NetOurNativeVLAN = getenv_VLAN("nvlan");
		NetOurVLAN = getenv_VLAN("vlan");
c7e2850c:	e1c400b0 	strh	r0, [r4]
#if defined(CONFIG_CMD_DNS)
		NetOurDNSIP = getenv_IPaddr("dnsip");
#endif
		env_changed_id = env_id;
	}
	memcpy(NetOurEther, eth_get_dev()->enetaddr, 6);
c7e28510:	e59f3034 	ldr	r3, [pc, #52]	; c7e2854c <NetInitLoop+0xa8>
c7e28514:	e59f0034 	ldr	r0, [pc, #52]	; c7e28550 <NetInitLoop+0xac>
c7e28518:	e5931000 	ldr	r1, [r3]
c7e2851c:	e3a02006 	mov	r2, #6	; 0x6
c7e28520:	e2811010 	add	r1, r1, #16	; 0x10

	return;
}
c7e28524:	e8bd4070 	pop	{r4, r5, r6, lr}
#if defined(CONFIG_CMD_DNS)
		NetOurDNSIP = getenv_IPaddr("dnsip");
#endif
		env_changed_id = env_id;
	}
	memcpy(NetOurEther, eth_get_dev()->enetaddr, 6);
c7e28528:	eaffe9c3 	b	c7e22c3c <memcpy>
c7e2852c:	c7e7299c 	.word	0xc7e7299c
c7e28530:	c7e2e352 	.word	0xc7e2e352
c7e28534:	c7e30fa8 	.word	0xc7e30fa8
c7e28538:	c7e30fb2 	.word	0xc7e30fb2
c7e2853c:	c7e2f10c 	.word	0xc7e2f10c
c7e28540:	c7e34d6d 	.word	0xc7e34d6d
c7e28544:	c7e3a4cc 	.word	0xc7e3a4cc
c7e28548:	c7e34d6e 	.word	0xc7e34d6e
c7e2854c:	c7e72988 	.word	0xc7e72988
c7e28550:	c7e729bc 	.word	0xc7e729bc

c7e28554 <net_init>:
{
	net_clear_handlers();
}

void net_init(void)
{
c7e28554:	e92d4070 	push	{r4, r5, r6, lr}
	static int first_call = 1;

	if (first_call) {
c7e28558:	e59f5054 	ldr	r5, [pc, #84]	; c7e285b4 <net_init+0x60>
c7e2855c:	e595300c 	ldr	r3, [r5, #12]
c7e28560:	e3530000 	cmp	r3, #0	; 0x0
c7e28564:	0a000010 	beq	c7e285ac <net_init+0x58>
		 *	Setup packet buffers, aligned correctly.
		 */
		int i;

		NetTxPacket = &PktBuf[0] + (PKTALIGN - 1);
		NetTxPacket -= (ulong)NetTxPacket % PKTALIGN;
c7e28568:	e59f4048 	ldr	r4, [pc, #72]	; c7e285b8 <net_init+0x64>
		for (i = 0; i < PKTBUFSRX; i++)
			NetRxPackets[i] = NetTxPacket + (i + 1) * PKTSIZE_ALIGN;
c7e2856c:	e59f2048 	ldr	r2, [pc, #72]	; c7e285bc <net_init+0x68>
		 *	Setup packet buffers, aligned correctly.
		 */
		int i;

		NetTxPacket = &PktBuf[0] + (PKTALIGN - 1);
		NetTxPacket -= (ulong)NetTxPacket % PKTALIGN;
c7e28570:	e284309b 	add	r3, r4, #155	; 0x9b
c7e28574:	e3c3303f 	bic	r3, r3, #63	; 0x3f
		for (i = 0; i < PKTBUFSRX; i++)
			NetRxPackets[i] = NetTxPacket + (i + 1) * PKTSIZE_ALIGN;
c7e28578:	e2831b06 	add	r1, r3, #6144	; 0x1800
c7e2857c:	e2830c06 	add	r0, r3, #1536	; 0x600
c7e28580:	e283cb03 	add	ip, r3, #3072	; 0xc00
c7e28584:	e283ec12 	add	lr, r3, #4608	; 0x1200
c7e28588:	e5021150 	str	r1, [r2, #-336]
c7e2858c:	e502015c 	str	r0, [r2, #-348]
c7e28590:	e502c158 	str	ip, [r2, #-344]
c7e28594:	e502e154 	str	lr, [r2, #-340]
		 *	Setup packet buffers, aligned correctly.
		 */
		int i;

		NetTxPacket = &PktBuf[0] + (PKTALIGN - 1);
		NetTxPacket -= (ulong)NetTxPacket % PKTALIGN;
c7e28598:	e5843030 	str	r3, [r4, #48]
		for (i = 0; i < PKTBUFSRX; i++)
			NetRxPackets[i] = NetTxPacket + (i + 1) * PKTSIZE_ALIGN;

		ArpInit();
c7e2859c:	ebfff856 	bl	c7e266fc <ArpInit>
		net_clear_handlers();
c7e285a0:	ebfffdd6 	bl	c7e27d00 <net_clear_handlers>

		/* Only need to setup buffer pointers once. */
		first_call = 0;
c7e285a4:	e3a03000 	mov	r3, #0	; 0x0
c7e285a8:	e585300c 	str	r3, [r5, #12]
	}

	NetInitLoop();
}
c7e285ac:	e8bd4070 	pop	{r4, r5, r6, lr}

		/* Only need to setup buffer pointers once. */
		first_call = 0;
	}

	NetInitLoop();
c7e285b0:	eaffffbb 	b	c7e284a4 <NetInitLoop>
c7e285b4:	c7e3a4cc 	.word	0xc7e3a4cc
c7e285b8:	c7e7299c 	.word	0xc7e7299c
c7e285bc:	c7e74994 	.word	0xc7e74994

c7e285c0 <NetLoop>:
/*
 *	Main network processing loop.
 */

int NetLoop(enum proto_t protocol)
{
c7e285c0:	e92d4070 	push	{r4, r5, r6, lr}
	bd_t *bd = gd->bd;
	int ret = -1;

	NetRestarted = 0;
c7e285c4:	e59f22d4 	ldr	r2, [pc, #724]	; c7e288a0 <NetLoop+0x2e0>
c7e285c8:	e3a01000 	mov	r1, #0	; 0x0
	NetDevExists = 0;
	NetTryCount = 1;
c7e285cc:	e3a03001 	mov	r3, #1	; 0x1
/*
 *	Main network processing loop.
 */

int NetLoop(enum proto_t protocol)
{
c7e285d0:	e24dd018 	sub	sp, sp, #24	; 0x18
	bd_t *bd = gd->bd;
	int ret = -1;

	NetRestarted = 0;
	NetDevExists = 0;
	NetTryCount = 1;
c7e285d4:	e582303c 	str	r3, [r2, #60]
{
	bd_t *bd = gd->bd;
	int ret = -1;

	NetRestarted = 0;
	NetDevExists = 0;
c7e285d8:	e5821048 	str	r1, [r2, #72]
int NetLoop(enum proto_t protocol)
{
	bd_t *bd = gd->bd;
	int ret = -1;

	NetRestarted = 0;
c7e285dc:	e5821040 	str	r1, [r2, #64]
/*
 *	Main network processing loop.
 */

int NetLoop(enum proto_t protocol)
{
c7e285e0:	e1a06000 	mov	r6, r0
	bd_t *bd = gd->bd;
c7e285e4:	e5984000 	ldr	r4, [r8]
	NetDevExists = 0;
	NetTryCount = 1;
	debug_cond(DEBUG_INT_STATE, "--- NetLoop Entry\n");

	bootstage_mark_name(BOOTSTAGE_ID_ETH_START, "eth_start");
	net_init();
c7e285e8:	ebffffd9 	bl	c7e28554 <net_init>
	if (eth_is_on_demand_init() || protocol != NETCONS) {
		eth_halt();
c7e285ec:	ebfffad0 	bl	c7e27134 <eth_halt>
		eth_set_current();
c7e285f0:	ebfffb13 	bl	c7e27244 <eth_set_current>
		if (eth_init(bd) < 0) {
c7e285f4:	e1a00004 	mov	r0, r4
c7e285f8:	ebfffbfd 	bl	c7e275f4 <eth_init>
c7e285fc:	e3500000 	cmp	r0, #0	; 0x0
c7e28600:	ba0000a4 	blt	c7e28898 <NetLoop+0x2d8>
		}
	} else
		eth_init_state_only(bd);

restart:
	net_set_state(NETLOOP_CONTINUE);
c7e28604:	e3a00000 	mov	r0, #0	; 0x0
c7e28608:	ebfffd03 	bl	c7e27a1c <net_set_state>
	 *	Start the ball rolling with the given start function.  From
	 *	here on, this code is a state machine driven by received
	 *	packets and timer events.
	 */
	debug_cond(DEBUG_INT_STATE, "--- NetLoop Init\n");
	NetInitLoop();
c7e2860c:	ebffffa4 	bl	c7e284a4 <NetInitLoop>

/**********************************************************************/

static int net_check_prereq(enum proto_t protocol)
{
	switch (protocol) {
c7e28610:	e356000d 	cmp	r6, #13	; 0xd
c7e28614:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
c7e28618:	ea000034 	b	c7e286f0 <NetLoop+0x130>
c7e2861c:	c7e28694 	.word	0xc7e28694
c7e28620:	c7e286f0 	.word	0xc7e286f0
c7e28624:	c7e286f0 	.word	0xc7e286f0
c7e28628:	c7e2866c 	.word	0xc7e2866c
c7e2862c:	c7e28694 	.word	0xc7e28694
c7e28630:	c7e28654 	.word	0xc7e28654
c7e28634:	c7e286f0 	.word	0xc7e286f0
c7e28638:	c7e2866c 	.word	0xc7e2866c
c7e2863c:	c7e28694 	.word	0xc7e28694
c7e28640:	c7e28680 	.word	0xc7e28680
c7e28644:	c7e286f0 	.word	0xc7e286f0
c7e28648:	c7e28680 	.word	0xc7e28680
c7e2864c:	c7e2866c 	.word	0xc7e2866c
c7e28650:	c7e28694 	.word	0xc7e28694
		/* Fall through */
#if defined(CONFIG_CMD_PING)
	case PING:
		if (NetPingIP == 0) {
c7e28654:	e59f3248 	ldr	r3, [pc, #584]	; c7e288a4 <NetLoop+0x2e4>
c7e28658:	e5933000 	ldr	r3, [r3]
c7e2865c:	e3530000 	cmp	r3, #0	; 0x0
c7e28660:	1a000006 	bne	c7e28680 <NetLoop+0xc0>
			puts("*** ERROR: ping address not given\n");
c7e28664:	e59f023c 	ldr	r0, [pc, #572]	; c7e288a8 <NetLoop+0x2e8>
c7e28668:	ea000016 	b	c7e286c8 <NetLoop+0x108>
#if defined(CONFIG_CMD_NFS)
	case NFS:
#endif
	case TFTPGET:
	case TFTPPUT:
		if (NetServerIP == 0) {
c7e2866c:	e59f322c 	ldr	r3, [pc, #556]	; c7e288a0 <NetLoop+0x2e0>
c7e28670:	e5933058 	ldr	r3, [r3, #88]
c7e28674:	e3530000 	cmp	r3, #0	; 0x0
			puts("*** ERROR: `serverip' not set\n");
c7e28678:	059f022c 	ldreq	r0, [pc, #556]	; c7e288ac <NetLoop+0x2ec>
c7e2867c:	0a000011 	beq	c7e286c8 <NetLoop+0x108>
#endif
		/* Fall through */

	case NETCONS:
	case TFTPSRV:
		if (NetOurIP == 0) {
c7e28680:	e59f3218 	ldr	r3, [pc, #536]	; c7e288a0 <NetLoop+0x2e0>
c7e28684:	e593301c 	ldr	r3, [r3, #28]
c7e28688:	e3530000 	cmp	r3, #0	; 0x0
			puts("*** ERROR: `ipaddr' not set\n");
c7e2868c:	059f021c 	ldreq	r0, [pc, #540]	; c7e288b0 <NetLoop+0x2f0>
c7e28690:	0a00000c 	beq	c7e286c8 <NetLoop+0x108>
#endif
	case BOOTP:
	case CDP:
	case DHCP:
	case LINKLOCAL:
		if (memcmp(NetOurEther, "\0\0\0\0\0\0", 6) == 0) {
c7e28694:	e59f0218 	ldr	r0, [pc, #536]	; c7e288b4 <NetLoop+0x2f4>
c7e28698:	e59f1218 	ldr	r1, [pc, #536]	; c7e288b8 <NetLoop+0x2f8>
c7e2869c:	e3a02006 	mov	r2, #6	; 0x6
c7e286a0:	ebffe99f 	bl	c7e22d24 <memcmp>
c7e286a4:	e3500000 	cmp	r0, #0	; 0x0
c7e286a8:	1a000010 	bne	c7e286f0 <NetLoop+0x130>
			int num = eth_get_dev_index();
c7e286ac:	ebfffa99 	bl	c7e27118 <eth_get_dev_index>

			switch (num) {
c7e286b0:	e3700001 	cmn	r0, #1	; 0x1
c7e286b4:	0a000002 	beq	c7e286c4 <NetLoop+0x104>
c7e286b8:	e3500000 	cmp	r0, #0	; 0x0
c7e286bc:	0a000003 	beq	c7e286d0 <NetLoop+0x110>
c7e286c0:	ea000005 	b	c7e286dc <NetLoop+0x11c>
			case -1:
				puts("*** ERROR: No ethernet found.\n");
c7e286c4:	e59f01f0 	ldr	r0, [pc, #496]	; c7e288bc <NetLoop+0x2fc>
c7e286c8:	ebff80c7 	bl	c7e089ec <puts>
c7e286cc:	ea000071 	b	c7e28898 <NetLoop+0x2d8>
				return 1;
			case 0:
				puts("*** ERROR: `ethaddr' not set\n");
c7e286d0:	e59f01e8 	ldr	r0, [pc, #488]	; c7e288c0 <NetLoop+0x300>
c7e286d4:	ebff80c4 	bl	c7e089ec <puts>
c7e286d8:	ea000002 	b	c7e286e8 <NetLoop+0x128>
				break;
			default:
				printf("*** ERROR: `eth%daddr' not set\n",
c7e286dc:	e1a01000 	mov	r1, r0
c7e286e0:	e59f01dc 	ldr	r0, [pc, #476]	; c7e288c4 <NetLoop+0x304>
c7e286e4:	ebff80db 	bl	c7e08a58 <printf>
					num);
				break;
			}

			NetStartAgain();
c7e286e8:	ebffff10 	bl	c7e28330 <NetStartAgain>
c7e286ec:	ea00001d 	b	c7e28768 <NetLoop+0x1a8>
	case 2:
		/* network device not configured */
		break;

	case 0:
		NetDevExists = 1;
c7e286f0:	e59f31a8 	ldr	r3, [pc, #424]	; c7e288a0 <NetLoop+0x2e0>
c7e286f4:	e3a02001 	mov	r2, #1	; 0x1
c7e286f8:	e5832048 	str	r2, [r3, #72]
		NetBootFileXferSize = 0;
c7e286fc:	e59f31c4 	ldr	r3, [pc, #452]	; c7e288c8 <NetLoop+0x308>
c7e28700:	e3a02000 	mov	r2, #0	; 0x0
c7e28704:	e503214c 	str	r2, [r3, #-332]
		switch (protocol) {
c7e28708:	e3560007 	cmp	r6, #7	; 0x7
c7e2870c:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
c7e28710:	ea000014 	b	c7e28768 <NetLoop+0x1a8>
c7e28714:	c7e28740 	.word	0xc7e28740
c7e28718:	c7e28768 	.word	0xc7e28768
c7e2871c:	c7e28768 	.word	0xc7e28768
c7e28720:	c7e28734 	.word	0xc7e28734
c7e28724:	c7e28768 	.word	0xc7e28768
c7e28728:	c7e2875c 	.word	0xc7e2875c
c7e2872c:	c7e28768 	.word	0xc7e28768
c7e28730:	c7e28764 	.word	0xc7e28764
		case TFTPGET:
#ifdef CONFIG_CMD_TFTPPUT
		case TFTPPUT:
#endif
			/* always use ARP to get server ethernet address */
			TftpStart(protocol);
c7e28734:	e3a00003 	mov	r0, #3	; 0x3
c7e28738:	eb000512 	bl	c7e29b88 <TftpStart>
c7e2873c:	ea000009 	b	c7e28768 <NetLoop+0x1a8>
			break;
#endif

		case BOOTP:
			BootpTry = 0;
			NetOurIP = 0;
c7e28740:	e59f2158 	ldr	r2, [pc, #344]	; c7e288a0 <NetLoop+0x2e0>
			DhcpRequest();		/* Basically same as BOOTP */
			break;
#endif

		case BOOTP:
			BootpTry = 0;
c7e28744:	e3a03000 	mov	r3, #0	; 0x0
			NetOurIP = 0;
c7e28748:	e582301c 	str	r3, [r2, #28]
			DhcpRequest();		/* Basically same as BOOTP */
			break;
#endif

		case BOOTP:
			BootpTry = 0;
c7e2874c:	e59f2178 	ldr	r2, [pc, #376]	; c7e288cc <NetLoop+0x30c>
c7e28750:	e5823000 	str	r3, [r2]
			NetOurIP = 0;
			BootpRequest();
c7e28754:	ebfff90d 	bl	c7e26b90 <BootpRequest>
c7e28758:	ea000002 	b	c7e28768 <NetLoop+0x1a8>
			RarpRequest();
			break;
#endif
#if defined(CONFIG_CMD_PING)
		case PING:
			ping_start();
c7e2875c:	eb00044b 	bl	c7e29890 <ping_start>
c7e28760:	ea000000 	b	c7e28768 <NetLoop+0x1a8>
			break;
#endif
#if defined(CONFIG_CMD_NFS)
		case NFS:
			NfsStart();
c7e28764:	eb000267 	bl	c7e29108 <NfsStart>
#endif
		/*
		 *	Check the ethernet for a new packet.  The ethernet
		 *	receive routine will process it.
		 */
		eth_rx();
c7e28768:	ebfffa8b 	bl	c7e2719c <eth_rx>

		/*
		 *	Abort if ctrl-c was pressed.
		 */
		if (ctrlc()) {
c7e2876c:	ebff8165 	bl	c7e08d08 <ctrlc>
c7e28770:	e2505000 	subs	r5, r0, #0	; 0x0

		/*
		 *	Check for a timeout, and run the timeout handler
		 *	if we have one.
		 */
		if (timeHandler && ((get_timer(0) - timeStart) > timeDelta)) {
c7e28774:	e59f4124 	ldr	r4, [pc, #292]	; c7e288a0 <NetLoop+0x2e0>
		eth_rx();

		/*
		 *	Abort if ctrl-c was pressed.
		 */
		if (ctrlc()) {
c7e28778:	0a000007 	beq	c7e2879c <NetLoop+0x1dc>
			/* cancel any ARP that may not have completed */
			NetArpWaitPacketIP = 0;
c7e2877c:	e59f314c 	ldr	r3, [pc, #332]	; c7e288d0 <NetLoop+0x310>
c7e28780:	e3a02000 	mov	r2, #0	; 0x0
c7e28784:	e5832000 	str	r2, [r3]

			net_cleanup_loop();
c7e28788:	ebfffd65 	bl	c7e27d24 <net_cleanup_loop>
			eth_halt();
c7e2878c:	ebfffa68 	bl	c7e27134 <eth_halt>
			/* Invalidate the last protocol */
			eth_set_last_protocol(BOOTP);

			puts("\nAbort\n");
c7e28790:	e59f013c 	ldr	r0, [pc, #316]	; c7e288d4 <NetLoop+0x314>
c7e28794:	ebff8094 	bl	c7e089ec <puts>
c7e28798:	ea00003b 	b	c7e2888c <NetLoop+0x2cc>
			   messages are directed to stderr */
			debug_cond(DEBUG_INT_STATE, "--- NetLoop Abort!\n");
			goto done;
		}

		ArpTimeoutCheck();
c7e2879c:	ebfff8b4 	bl	c7e26a74 <ArpTimeoutCheck>

		/*
		 *	Check for a timeout, and run the timeout handler
		 *	if we have one.
		 */
		if (timeHandler && ((get_timer(0) - timeStart) > timeDelta)) {
c7e287a0:	e594300c 	ldr	r3, [r4, #12]
c7e287a4:	e1a00005 	mov	r0, r5
c7e287a8:	e3530000 	cmp	r3, #0	; 0x0
c7e287ac:	0a000008 	beq	c7e287d4 <NetLoop+0x214>
c7e287b0:	ebff6092 	bl	c7e00a00 <get_timer>
c7e287b4:	e5943010 	ldr	r3, [r4, #16]
c7e287b8:	e5942014 	ldr	r2, [r4, #20]
c7e287bc:	e0630000 	rsb	r0, r3, r0
c7e287c0:	e1500002 	cmp	r0, r2
c7e287c4:	9a000002 	bls	c7e287d4 <NetLoop+0x214>
				status_led_set(STATUS_LED_RED, STATUS_LED_ON);
			}
#endif /* CONFIG_SYS_FAULT_ECHO_LINK_DOWN, ... */
#endif /* CONFIG_MII, ... */
			debug_cond(DEBUG_INT_STATE, "--- NetLoop timeout\n");
			x = timeHandler;
c7e287c8:	e594300c 	ldr	r3, [r4, #12]
			timeHandler = (thand_f *)0;
c7e287cc:	e584500c 	str	r5, [r4, #12]
			(*x)();
c7e287d0:	e12fff33 	blx	r3
		}


		switch (net_state) {
c7e287d4:	e59f20c4 	ldr	r2, [pc, #196]	; c7e288a0 <NetLoop+0x2e0>
c7e287d8:	e5923000 	ldr	r3, [r2]
c7e287dc:	e3530002 	cmp	r3, #2	; 0x2
c7e287e0:	0a000005 	beq	c7e287fc <NetLoop+0x23c>
c7e287e4:	e3530003 	cmp	r3, #3	; 0x3
c7e287e8:	0a000026 	beq	c7e28888 <NetLoop+0x2c8>
c7e287ec:	e3530001 	cmp	r3, #1	; 0x1
c7e287f0:	1affffdc 	bne	c7e28768 <NetLoop+0x1a8>

		case NETLOOP_RESTART:
			NetRestarted = 1;
c7e287f4:	e5823040 	str	r3, [r2, #64]
c7e287f8:	eaffff81 	b	c7e28604 <NetLoop+0x44>
			goto restart;

		case NETLOOP_SUCCESS:
			net_cleanup_loop();
			if (NetBootFileXferSize > 0) {
c7e287fc:	e59f50c4 	ldr	r5, [pc, #196]	; c7e288c8 <NetLoop+0x308>
		case NETLOOP_RESTART:
			NetRestarted = 1;
			goto restart;

		case NETLOOP_SUCCESS:
			net_cleanup_loop();
c7e28800:	ebfffd47 	bl	c7e27d24 <net_cleanup_loop>
			if (NetBootFileXferSize > 0) {
c7e28804:	e515114c 	ldr	r1, [r5, #-332]
c7e28808:	e3510000 	cmp	r1, #0	; 0x0
c7e2880c:	0a000012 	beq	c7e2885c <NetLoop+0x29c>
				char buf[20];
				printf("Bytes transferred = %ld (%lx hex)\n",
					NetBootFileXferSize,
					NetBootFileXferSize);
				sprintf(buf, "%lX", NetBootFileXferSize);
c7e28810:	e28d4004 	add	r4, sp, #4	; 0x4

		case NETLOOP_SUCCESS:
			net_cleanup_loop();
			if (NetBootFileXferSize > 0) {
				char buf[20];
				printf("Bytes transferred = %ld (%lx hex)\n",
c7e28814:	e1a02001 	mov	r2, r1
c7e28818:	e59f00b8 	ldr	r0, [pc, #184]	; c7e288d8 <NetLoop+0x318>
c7e2881c:	ebff808d 	bl	c7e08a58 <printf>
					NetBootFileXferSize,
					NetBootFileXferSize);
				sprintf(buf, "%lX", NetBootFileXferSize);
c7e28820:	e515214c 	ldr	r2, [r5, #-332]
c7e28824:	e59f10b0 	ldr	r1, [pc, #176]	; c7e288dc <NetLoop+0x31c>
c7e28828:	e1a00004 	mov	r0, r4
c7e2882c:	ebffed7f 	bl	c7e23e30 <sprintf>
				setenv("filesize", buf);
c7e28830:	e1a01004 	mov	r1, r4
c7e28834:	e59f00a4 	ldr	r0, [pc, #164]	; c7e288e0 <NetLoop+0x320>
c7e28838:	ebff7b84 	bl	c7e07650 <setenv>

				sprintf(buf, "%lX", (unsigned long)load_addr);
c7e2883c:	e59f30a0 	ldr	r3, [pc, #160]	; c7e288e4 <NetLoop+0x324>
c7e28840:	e59f1094 	ldr	r1, [pc, #148]	; c7e288dc <NetLoop+0x31c>
c7e28844:	e5932000 	ldr	r2, [r3]
c7e28848:	e1a00004 	mov	r0, r4
c7e2884c:	ebffed77 	bl	c7e23e30 <sprintf>
				setenv("fileaddr", buf);
c7e28850:	e1a01004 	mov	r1, r4
c7e28854:	e59f008c 	ldr	r0, [pc, #140]	; c7e288e8 <NetLoop+0x328>
c7e28858:	ebff7b7c 	bl	c7e07650 <setenv>
			}
			if (protocol != NETCONS)
c7e2885c:	e3560009 	cmp	r6, #9	; 0x9
c7e28860:	0a000001 	beq	c7e2886c <NetLoop+0x2ac>
				eth_halt();
c7e28864:	ebfffa32 	bl	c7e27134 <eth_halt>
c7e28868:	ea000003 	b	c7e2887c <NetLoop+0x2bc>
	return 0;
}
/* Set passive state */
static inline __attribute__((always_inline)) void eth_halt_state_only(void)
{
	eth_get_dev()->state = ETH_STATE_PASSIVE;
c7e2886c:	e59f3078 	ldr	r3, [pc, #120]	; c7e288ec <NetLoop+0x32c>
c7e28870:	e5932000 	ldr	r2, [r3]
c7e28874:	e3a03001 	mov	r3, #1	; 0x1
c7e28878:	e582301c 	str	r3, [r2, #28]
			else
				eth_halt_state_only();

			eth_set_last_protocol(protocol);

			ret = NetBootFileXferSize;
c7e2887c:	e59f3044 	ldr	r3, [pc, #68]	; c7e288c8 <NetLoop+0x308>
c7e28880:	e513014c 	ldr	r0, [r3, #-332]
c7e28884:	ea000001 	b	c7e28890 <NetLoop+0x2d0>
			debug_cond(DEBUG_INT_STATE, "--- NetLoop Success!\n");
			goto done;

		case NETLOOP_FAIL:
			net_cleanup_loop();
c7e28888:	ebfffd25 	bl	c7e27d24 <net_cleanup_loop>
c7e2888c:	e3e00000 	mvn	r0, #0	; 0x0
	/* Clear out the handlers */
	net_set_udp_handler(NULL);
	net_set_icmp_handler(NULL);
#endif
	return ret;
}
c7e28890:	e28dd018 	add	sp, sp, #24	; 0x18
c7e28894:	e8bd8070 	pop	{r4, r5, r6, pc}
	NetInitLoop();

	switch (net_check_prereq(protocol)) {
	case 1:
		/* network not configured */
		eth_halt();
c7e28898:	ebfffa25 	bl	c7e27134 <eth_halt>
c7e2889c:	eafffffa 	b	c7e2888c <NetLoop+0x2cc>
c7e288a0:	c7e7299c 	.word	0xc7e7299c
c7e288a4:	c7e75208 	.word	0xc7e75208
c7e288a8:	c7e34d73 	.word	0xc7e34d73
c7e288ac:	c7e34d96 	.word	0xc7e34d96
c7e288b0:	c7e34db5 	.word	0xc7e34db5
c7e288b4:	c7e729bc 	.word	0xc7e729bc
c7e288b8:	c7e2dd67 	.word	0xc7e2dd67
c7e288bc:	c7e34dd2 	.word	0xc7e34dd2
c7e288c0:	c7e34df1 	.word	0xc7e34df1
c7e288c4:	c7e34e0f 	.word	0xc7e34e0f
c7e288c8:	c7e74994 	.word	0xc7e74994
c7e288cc:	c7e7297c 	.word	0xc7e7297c
c7e288d0:	c7e72324 	.word	0xc7e72324
c7e288d4:	c7e34e2f 	.word	0xc7e34e2f
c7e288d8:	c7e34e37 	.word	0xc7e34e37
c7e288dc:	c7e2e9f8 	.word	0xc7e2e9f8
c7e288e0:	c7e2e9fc 	.word	0xc7e2e9fc
c7e288e4:	c7e353cc 	.word	0xc7e353cc
c7e288e8:	c7e31c0a 	.word	0xc7e31c0a
c7e288ec:	c7e72988 	.word	0xc7e72988

c7e288f0 <__fswab32>:
{
	__arch__swab16s(addr);
}

static __inline__ __attribute__((const)) __u32 __fswab32(__u32 x)
{
c7e288f0:	e1a03000 	mov	r3, r0
c7e288f4:	e1a00c00 	lsl	r0, r0, #24
c7e288f8:	e2032cff 	and	r2, r3, #65280	; 0xff00
c7e288fc:	e1800c23 	orr	r0, r0, r3, lsr #24
c7e28900:	e1800402 	orr	r0, r0, r2, lsl #8
c7e28904:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
	return __arch__swab32(x);
}
c7e28908:	e1800423 	orr	r0, r0, r3, lsr #8
c7e2890c:	e12fff1e 	bx	lr

c7e28910 <net_set_state>:
static inline void net_set_state(enum net_loop_state state)
{
	extern enum net_loop_state net_state;

	debug_cond(DEBUG_INT_STATE, "--- NetState set to %d\n", state);
	net_state = state;
c7e28910:	e59f3004 	ldr	r3, [pc, #4]	; c7e2891c <net_set_state+0xc>
c7e28914:	e5830000 	str	r0, [r3]
}
c7e28918:	e12fff1e 	bx	lr
c7e2891c:	c7e7299c 	.word	0xc7e7299c

c7e28920 <basename>:
	return 0;
}

static char*
basename(char *path)
{
c7e28920:	e92d4010 	push	{r4, lr}
c7e28924:	e1a04000 	mov	r4, r0
	char *fname;

	fname = path + strlen(path) - 1;
c7e28928:	ebffe802 	bl	c7e22938 <strlen>
c7e2892c:	e2400001 	sub	r0, r0, #1	; 0x1
c7e28930:	e0840000 	add	r0, r4, r0
c7e28934:	ea000005 	b	c7e28950 <basename+0x30>
	while (fname >= path) {
		if (*fname == '/') {
c7e28938:	e5d03000 	ldrb	r3, [r0]
c7e2893c:	e353002f 	cmp	r3, #47	; 0x2f
c7e28940:	1a000001 	bne	c7e2894c <basename+0x2c>
			fname++;
c7e28944:	e2800001 	add	r0, r0, #1	; 0x1
c7e28948:	e8bd8010 	pop	{r4, pc}
			break;
		}
		fname--;
c7e2894c:	e2400001 	sub	r0, r0, #1	; 0x1
basename(char *path)
{
	char *fname;

	fname = path + strlen(path) - 1;
	while (fname >= path) {
c7e28950:	e1500004 	cmp	r0, r4
c7e28954:	2afffff7 	bcs	c7e28938 <basename+0x18>
			break;
		}
		fname--;
	}
	return fname;
}
c7e28958:	e8bd8010 	pop	{r4, pc}

c7e2895c <dirname>:

static char*
dirname(char *path)
{
c7e2895c:	e92d4010 	push	{r4, lr}
c7e28960:	e1a04000 	mov	r4, r0
	char *fname;

	fname = basename(path);
c7e28964:	ebffffed 	bl	c7e28920 <basename>
	--fname;
	*fname = '\0';
c7e28968:	e3a03000 	mov	r3, #0	; 0x0
c7e2896c:	e5403001 	strb	r3, [r0, #-1]
	return path;
}
c7e28970:	e1a00004 	mov	r0, r4
c7e28974:	e8bd8010 	pop	{r4, pc}

c7e28978 <rpc_add_credentials>:

/**************************************************************************
RPC_ADD_CREDENTIALS - Add RPC authentication/verifier entries
**************************************************************************/
static long *rpc_add_credentials(long *p)
{
c7e28978:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
c7e2897c:	e24ddf41 	sub	sp, sp, #260	; 0x104
c7e28980:	e1a05000 	mov	r5, r0
	int hl;
	int hostnamelen;
	char hostname[256];

	strcpy(hostname, "");
c7e28984:	e59f10c0 	ldr	r1, [pc, #192]	; c7e28a4c <rpc_add_credentials+0xd4>
c7e28988:	e1a0000d 	mov	r0, sp
c7e2898c:	ebffe77c 	bl	c7e22784 <strcpy>
	hostnamelen = strlen(hostname);
c7e28990:	e1a0000d 	mov	r0, sp
c7e28994:	ebffe7e7 	bl	c7e22938 <strlen>
	 * AUTH_UNIX (also accepts an empty hostname field in the AUTH_UNIX
	 * scheme).  To be safe, use AUTH_UNIX and pass the hostname if we have
	 * it (if the BOOTP/DHCP reply didn't give one, just use an empty
	 * hostname).  */

	hl = (hostnamelen + 3) & ~3;
c7e28998:	e280a003 	add	sl, r0, #3	; 0x3

	/* Provide an AUTH_UNIX credential.  */
	*p++ = htonl(1);		/* AUTH_UNIX */
c7e2899c:	e1a04005 	mov	r4, r5
c7e289a0:	e3a03401 	mov	r3, #16777216	; 0x1000000
	 * AUTH_UNIX (also accepts an empty hostname field in the AUTH_UNIX
	 * scheme).  To be safe, use AUTH_UNIX and pass the hostname if we have
	 * it (if the BOOTP/DHCP reply didn't give one, just use an empty
	 * hostname).  */

	hl = (hostnamelen + 3) & ~3;
c7e289a4:	e3ca7003 	bic	r7, sl, #3	; 0x3

	/* Provide an AUTH_UNIX credential.  */
	*p++ = htonl(1);		/* AUTH_UNIX */
c7e289a8:	e4843004 	str	r3, [r4], #4
	int hl;
	int hostnamelen;
	char hostname[256];

	strcpy(hostname, "");
	hostnamelen = strlen(hostname);
c7e289ac:	e1a06000 	mov	r6, r0

	hl = (hostnamelen + 3) & ~3;

	/* Provide an AUTH_UNIX credential.  */
	*p++ = htonl(1);		/* AUTH_UNIX */
	*p++ = htonl(hl+20);		/* auth length */
c7e289b0:	e2870014 	add	r0, r7, #20	; 0x14
c7e289b4:	ebffffcd 	bl	c7e288f0 <__fswab32>
	*p++ = htonl(0);		/* stamp */
c7e289b8:	e3a09000 	mov	r9, #0	; 0x0

	hl = (hostnamelen + 3) & ~3;

	/* Provide an AUTH_UNIX credential.  */
	*p++ = htonl(1);		/* AUTH_UNIX */
	*p++ = htonl(hl+20);		/* auth length */
c7e289bc:	e5850004 	str	r0, [r5, #4]
	*p++ = htonl(0);		/* stamp */
c7e289c0:	e5849004 	str	r9, [r4, #4]
	*p++ = htonl(hostnamelen);	/* hostname string */
c7e289c4:	e1a00006 	mov	r0, r6
c7e289c8:	ebffffc8 	bl	c7e288f0 <__fswab32>

	hl = (hostnamelen + 3) & ~3;

	/* Provide an AUTH_UNIX credential.  */
	*p++ = htonl(1);		/* AUTH_UNIX */
	*p++ = htonl(hl+20);		/* auth length */
c7e289cc:	e2844004 	add	r4, r4, #4	; 0x4
	*p++ = htonl(0);		/* stamp */
c7e289d0:	e2843004 	add	r3, r4, #4	; 0x4
	*p++ = htonl(hostnamelen);	/* hostname string */
	if (hostnamelen & 3)
c7e289d4:	e3160003 	tst	r6, #3	; 0x3

	/* Provide an AUTH_UNIX credential.  */
	*p++ = htonl(1);		/* AUTH_UNIX */
	*p++ = htonl(hl+20);		/* auth length */
	*p++ = htonl(0);		/* stamp */
	*p++ = htonl(hostnamelen);	/* hostname string */
c7e289d8:	e5840004 	str	r0, [r4, #4]
c7e289dc:	e2835004 	add	r5, r3, #4	; 0x4
	if (hostnamelen & 3)
c7e289e0:	0a000004 	beq	c7e289f8 <rpc_add_credentials+0x80>
		*(p + hostnamelen / 4) = 0; /* add zero padding */
c7e289e4:	e1560009 	cmp	r6, r9
c7e289e8:	a1a03006 	movge	r3, r6
c7e289ec:	b1a0300a 	movlt	r3, sl
c7e289f0:	e1a03143 	asr	r3, r3, #2
c7e289f4:	e7859103 	str	r9, [r5, r3, lsl #2]
	memcpy(p, hostname, hostnamelen);
c7e289f8:	e1a02006 	mov	r2, r6
c7e289fc:	e1a0100d 	mov	r1, sp
c7e28a00:	e1a00005 	mov	r0, r5
c7e28a04:	ebffe88c 	bl	c7e22c3c <memcpy>
	p += hl / 4;
c7e28a08:	e3570000 	cmp	r7, #0	; 0x0
c7e28a0c:	e2872003 	add	r2, r7, #3	; 0x3
c7e28a10:	a1a02007 	movge	r2, r7
c7e28a14:	e1a02142 	asr	r2, r2, #2
c7e28a18:	e0851102 	add	r1, r5, r2, lsl #2
	*p++ = 0;			/* uid */
c7e28a1c:	e281c004 	add	ip, r1, #4	; 0x4
	*p++ = 0;			/* gid */
c7e28a20:	e28c4004 	add	r4, ip, #4	; 0x4
	*p++ = htonl(hostnamelen);	/* hostname string */
	if (hostnamelen & 3)
		*(p + hostnamelen / 4) = 0; /* add zero padding */
	memcpy(p, hostname, hostnamelen);
	p += hl / 4;
	*p++ = 0;			/* uid */
c7e28a24:	e3a03000 	mov	r3, #0	; 0x0
	*p++ = 0;			/* gid */
	*p++ = 0;			/* auxiliary gid list */
c7e28a28:	e2840004 	add	r0, r4, #4	; 0x4
	*p++ = htonl(hostnamelen);	/* hostname string */
	if (hostnamelen & 3)
		*(p + hostnamelen / 4) = 0; /* add zero padding */
	memcpy(p, hostname, hostnamelen);
	p += hl / 4;
	*p++ = 0;			/* uid */
c7e28a2c:	e7853102 	str	r3, [r5, r2, lsl #2]
	*p++ = 0;			/* gid */
c7e28a30:	e5813004 	str	r3, [r1, #4]
	*p++ = 0;			/* auxiliary gid list */
c7e28a34:	e58c3004 	str	r3, [ip, #4]

	/* Provide an AUTH_NONE verifier.  */
	*p++ = 0;			/* AUTH_NONE */
c7e28a38:	e5843004 	str	r3, [r4, #4]
	*p++ = 0;			/* auth length */
c7e28a3c:	e5803004 	str	r3, [r0, #4]

	return p;
}
c7e28a40:	e2800008 	add	r0, r0, #8	; 0x8
c7e28a44:	e28ddf41 	add	sp, sp, #260	; 0x104
c7e28a48:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e28a4c:	c7e2fef0 	.word	0xc7e2fef0

c7e28a50 <rpc_lookup_reply>:
Handlers for the reply from server
**************************************************************************/

static int
rpc_lookup_reply(int prog, uchar *pkt, unsigned len)
{
c7e28a50:	e92d4070 	push	{r4, r5, r6, lr}
c7e28a54:	e24ddb02 	sub	sp, sp, #2048	; 0x800
c7e28a58:	e1a06000 	mov	r6, r0
	struct rpc_t rpc_pkt;

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e28a5c:	e1a0000d 	mov	r0, sp
c7e28a60:	ebffe875 	bl	c7e22c3c <memcpy>

	debug("%s\n", __func__);

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e28a64:	e59d0000 	ldr	r0, [sp]
c7e28a68:	ebffffa0 	bl	c7e288f0 <__fswab32>
c7e28a6c:	e59f5074 	ldr	r5, [pc, #116]	; c7e28ae8 <rpc_lookup_reply+0x98>
c7e28a70:	e5953000 	ldr	r3, [r5]
c7e28a74:	e1500003 	cmp	r0, r3
c7e28a78:	1a000017 	bne	c7e28adc <rpc_lookup_reply+0x8c>
		return -1;

	if (rpc_pkt.u.reply.rstatus  ||
c7e28a7c:	e59d3008 	ldr	r3, [sp, #8]
c7e28a80:	e3530000 	cmp	r3, #0	; 0x0
c7e28a84:	1a000014 	bne	c7e28adc <rpc_lookup_reply+0x8c>
c7e28a88:	e59d300c 	ldr	r3, [sp, #12]
c7e28a8c:	e3530000 	cmp	r3, #0	; 0x0
c7e28a90:	1a000011 	bne	c7e28adc <rpc_lookup_reply+0x8c>
c7e28a94:	e59d4014 	ldr	r4, [sp, #20]
c7e28a98:	e3540000 	cmp	r4, #0	; 0x0
c7e28a9c:	1a00000e 	bne	c7e28adc <rpc_lookup_reply+0x8c>
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus)
		return -1;

	switch (prog) {
c7e28aa0:	e59f3044 	ldr	r3, [pc, #68]	; c7e28aec <rpc_lookup_reply+0x9c>
c7e28aa4:	e1560003 	cmp	r6, r3
c7e28aa8:	0a000007 	beq	c7e28acc <rpc_lookup_reply+0x7c>
c7e28aac:	e2833002 	add	r3, r3, #2	; 0x2
c7e28ab0:	e1560003 	cmp	r6, r3
c7e28ab4:	1a000002 	bne	c7e28ac4 <rpc_lookup_reply+0x74>
	case PROG_MOUNT:
		NfsSrvMountPort = ntohl(rpc_pkt.u.reply.data[0]);
c7e28ab8:	e59d0018 	ldr	r0, [sp, #24]
c7e28abc:	ebffff8b 	bl	c7e288f0 <__fswab32>
c7e28ac0:	e5850004 	str	r0, [r5, #4]
c7e28ac4:	e1a00004 	mov	r0, r4
c7e28ac8:	ea000004 	b	c7e28ae0 <rpc_lookup_reply+0x90>
		break;
	case PROG_NFS:
		NfsSrvNfsPort = ntohl(rpc_pkt.u.reply.data[0]);
c7e28acc:	e59d0018 	ldr	r0, [sp, #24]
c7e28ad0:	ebffff86 	bl	c7e288f0 <__fswab32>
c7e28ad4:	e5850008 	str	r0, [r5, #8]
c7e28ad8:	eafffff9 	b	c7e28ac4 <rpc_lookup_reply+0x74>
c7e28adc:	e3e00000 	mvn	r0, #0	; 0x0
		break;
	}

	return 0;
}
c7e28ae0:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e28ae4:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e28ae8:	c7e74958 	.word	0xc7e74958
c7e28aec:	000186a3 	.word	0x000186a3

c7e28af0 <nfs_mount_reply>:

static int
nfs_mount_reply(uchar *pkt, unsigned len)
{
c7e28af0:	e92d4030 	push	{r4, r5, lr}
c7e28af4:	e24ddb02 	sub	sp, sp, #2048	; 0x800
c7e28af8:	e24dd004 	sub	sp, sp, #4	; 0x4
c7e28afc:	e1a02001 	mov	r2, r1
	struct rpc_t rpc_pkt;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e28b00:	e1a01000 	mov	r1, r0
c7e28b04:	e1a0000d 	mov	r0, sp
c7e28b08:	ebffe84b 	bl	c7e22c3c <memcpy>

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e28b0c:	e59d0000 	ldr	r0, [sp]
c7e28b10:	ebffff76 	bl	c7e288f0 <__fswab32>
c7e28b14:	e59fc06c 	ldr	ip, [pc, #108]	; c7e28b88 <nfs_mount_reply+0x98>
{
	struct rpc_t rpc_pkt;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e28b18:	e1a0500d 	mov	r5, sp

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e28b1c:	e59c3000 	ldr	r3, [ip]
c7e28b20:	e1500003 	cmp	r0, r3
c7e28b24:	1a000013 	bne	c7e28b78 <nfs_mount_reply+0x88>
		return -1;

	if (rpc_pkt.u.reply.rstatus  ||
c7e28b28:	e59d3008 	ldr	r3, [sp, #8]
c7e28b2c:	e3530000 	cmp	r3, #0	; 0x0
c7e28b30:	1a000010 	bne	c7e28b78 <nfs_mount_reply+0x88>
c7e28b34:	e59d300c 	ldr	r3, [sp, #12]
c7e28b38:	e3530000 	cmp	r3, #0	; 0x0
c7e28b3c:	1a00000d 	bne	c7e28b78 <nfs_mount_reply+0x88>
c7e28b40:	e59d3014 	ldr	r3, [sp, #20]
c7e28b44:	e3530000 	cmp	r3, #0	; 0x0
c7e28b48:	1a00000a 	bne	c7e28b78 <nfs_mount_reply+0x88>
c7e28b4c:	e59d4018 	ldr	r4, [sp, #24]
c7e28b50:	e3540000 	cmp	r4, #0	; 0x0
c7e28b54:	1a000007 	bne	c7e28b78 <nfs_mount_reply+0x88>
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus  ||
	    rpc_pkt.u.reply.data[0])
		return -1;

	fs_mounted = 1;
c7e28b58:	e2833001 	add	r3, r3, #1	; 0x1
	memcpy(dirfh, rpc_pkt.u.reply.data + 1, NFS_FHSIZE);
c7e28b5c:	e28c0010 	add	r0, ip, #16	; 0x10
c7e28b60:	e28d101c 	add	r1, sp, #28	; 0x1c
c7e28b64:	e3a02020 	mov	r2, #32	; 0x20
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus  ||
	    rpc_pkt.u.reply.data[0])
		return -1;

	fs_mounted = 1;
c7e28b68:	e58c300c 	str	r3, [ip, #12]
	memcpy(dirfh, rpc_pkt.u.reply.data + 1, NFS_FHSIZE);
c7e28b6c:	ebffe832 	bl	c7e22c3c <memcpy>
c7e28b70:	e1a00004 	mov	r0, r4
c7e28b74:	ea000000 	b	c7e28b7c <nfs_mount_reply+0x8c>

	return 0;
c7e28b78:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e28b7c:	e28dd004 	add	sp, sp, #4	; 0x4
c7e28b80:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e28b84:	e8bd8030 	pop	{r4, r5, pc}
c7e28b88:	c7e74958 	.word	0xc7e74958

c7e28b8c <nfs_umountall_reply>:

static int
nfs_umountall_reply(uchar *pkt, unsigned len)
{
c7e28b8c:	e92d4010 	push	{r4, lr}
c7e28b90:	e24ddb02 	sub	sp, sp, #2048	; 0x800
c7e28b94:	e1a02001 	mov	r2, r1
	struct rpc_t rpc_pkt;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e28b98:	e1a01000 	mov	r1, r0
c7e28b9c:	e1a0000d 	mov	r0, sp
c7e28ba0:	ebffe825 	bl	c7e22c3c <memcpy>

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e28ba4:	e59d0000 	ldr	r0, [sp]
c7e28ba8:	ebffff50 	bl	c7e288f0 <__fswab32>
c7e28bac:	e59fc054 	ldr	ip, [pc, #84]	; c7e28c08 <nfs_umountall_reply+0x7c>
c7e28bb0:	e59c3000 	ldr	r3, [ip]
c7e28bb4:	e1500003 	cmp	r0, r3
c7e28bb8:	1a00000f 	bne	c7e28bfc <nfs_umountall_reply+0x70>
		return -1;

	if (rpc_pkt.u.reply.rstatus  ||
c7e28bbc:	e59d3008 	ldr	r3, [sp, #8]
c7e28bc0:	e3530000 	cmp	r3, #0	; 0x0
c7e28bc4:	1a00000c 	bne	c7e28bfc <nfs_umountall_reply+0x70>
c7e28bc8:	e59d300c 	ldr	r3, [sp, #12]
c7e28bcc:	e3530000 	cmp	r3, #0	; 0x0
c7e28bd0:	1a000009 	bne	c7e28bfc <nfs_umountall_reply+0x70>
c7e28bd4:	e59d4014 	ldr	r4, [sp, #20]
c7e28bd8:	e3540000 	cmp	r4, #0	; 0x0
c7e28bdc:	1a000006 	bne	c7e28bfc <nfs_umountall_reply+0x70>
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus)
		return -1;

	fs_mounted = 0;
	memset(dirfh, 0, sizeof(dirfh));
c7e28be0:	e28c0010 	add	r0, ip, #16	; 0x10
c7e28be4:	e1a01004 	mov	r1, r4
c7e28be8:	e3a02020 	mov	r2, #32	; 0x20
	if (rpc_pkt.u.reply.rstatus  ||
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus)
		return -1;

	fs_mounted = 0;
c7e28bec:	e58c400c 	str	r4, [ip, #12]
	memset(dirfh, 0, sizeof(dirfh));
c7e28bf0:	ebffe7e7 	bl	c7e22b94 <memset>
c7e28bf4:	e1a00004 	mov	r0, r4
c7e28bf8:	ea000000 	b	c7e28c00 <nfs_umountall_reply+0x74>

	return 0;
c7e28bfc:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e28c00:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e28c04:	e8bd8010 	pop	{r4, pc}
c7e28c08:	c7e74958 	.word	0xc7e74958

c7e28c0c <nfs_lookup_reply>:

static int
nfs_lookup_reply(uchar *pkt, unsigned len)
{
c7e28c0c:	e92d4030 	push	{r4, r5, lr}
c7e28c10:	e24ddb02 	sub	sp, sp, #2048	; 0x800
c7e28c14:	e24dd004 	sub	sp, sp, #4	; 0x4
c7e28c18:	e1a02001 	mov	r2, r1
	struct rpc_t rpc_pkt;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e28c1c:	e1a01000 	mov	r1, r0
c7e28c20:	e1a0000d 	mov	r0, sp
c7e28c24:	ebffe804 	bl	c7e22c3c <memcpy>

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e28c28:	e59d0000 	ldr	r0, [sp]
c7e28c2c:	ebffff2f 	bl	c7e288f0 <__fswab32>
c7e28c30:	e59f2064 	ldr	r2, [pc, #100]	; c7e28c9c <nfs_lookup_reply+0x90>
{
	struct rpc_t rpc_pkt;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e28c34:	e1a0500d 	mov	r5, sp

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e28c38:	e5923000 	ldr	r3, [r2]
c7e28c3c:	e1500003 	cmp	r0, r3
c7e28c40:	1a000011 	bne	c7e28c8c <nfs_lookup_reply+0x80>
		return -1;

	if (rpc_pkt.u.reply.rstatus  ||
c7e28c44:	e59d3008 	ldr	r3, [sp, #8]
c7e28c48:	e3530000 	cmp	r3, #0	; 0x0
c7e28c4c:	1a00000e 	bne	c7e28c8c <nfs_lookup_reply+0x80>
c7e28c50:	e59d300c 	ldr	r3, [sp, #12]
c7e28c54:	e3530000 	cmp	r3, #0	; 0x0
c7e28c58:	1a00000b 	bne	c7e28c8c <nfs_lookup_reply+0x80>
c7e28c5c:	e59d3014 	ldr	r3, [sp, #20]
c7e28c60:	e3530000 	cmp	r3, #0	; 0x0
c7e28c64:	1a000008 	bne	c7e28c8c <nfs_lookup_reply+0x80>
c7e28c68:	e59d4018 	ldr	r4, [sp, #24]
c7e28c6c:	e3540000 	cmp	r4, #0	; 0x0
c7e28c70:	1a000005 	bne	c7e28c8c <nfs_lookup_reply+0x80>
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus  ||
	    rpc_pkt.u.reply.data[0])
		return -1;

	memcpy(filefh, rpc_pkt.u.reply.data + 1, NFS_FHSIZE);
c7e28c74:	e2820030 	add	r0, r2, #48	; 0x30
c7e28c78:	e28d101c 	add	r1, sp, #28	; 0x1c
c7e28c7c:	e3a02020 	mov	r2, #32	; 0x20
c7e28c80:	ebffe7ed 	bl	c7e22c3c <memcpy>
c7e28c84:	e1a00004 	mov	r0, r4
c7e28c88:	ea000000 	b	c7e28c90 <nfs_lookup_reply+0x84>

	return 0;
c7e28c8c:	e3e00000 	mvn	r0, #0	; 0x0
}
c7e28c90:	e28dd004 	add	sp, sp, #4	; 0x4
c7e28c94:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e28c98:	e8bd8030 	pop	{r4, r5, pc}
c7e28c9c:	c7e74958 	.word	0xc7e74958

c7e28ca0 <rpc_req>:
/**************************************************************************
RPC_LOOKUP - Lookup RPC Port numbers
**************************************************************************/
static void
rpc_req(int rpc_prog, int rpc_proc, uint32_t *data, int datalen)
{
c7e28ca0:	e92d46f0 	push	{r4, r5, r6, r7, r9, sl, lr}
	unsigned long id;
	uint32_t *p;
	int pktlen;
	int sport;

	id = ++rpc_id;
c7e28ca4:	e59fe0ec 	ldr	lr, [pc, #236]	; c7e28d98 <rpc_req+0xf8>
/**************************************************************************
RPC_LOOKUP - Lookup RPC Port numbers
**************************************************************************/
static void
rpc_req(int rpc_prog, int rpc_proc, uint32_t *data, int datalen)
{
c7e28ca8:	e24ddb02 	sub	sp, sp, #2048	; 0x800
	unsigned long id;
	uint32_t *p;
	int pktlen;
	int sport;

	id = ++rpc_id;
c7e28cac:	e59ec000 	ldr	ip, [lr]
/**************************************************************************
RPC_LOOKUP - Lookup RPC Port numbers
**************************************************************************/
static void
rpc_req(int rpc_prog, int rpc_proc, uint32_t *data, int datalen)
{
c7e28cb0:	e24dd00c 	sub	sp, sp, #12	; 0xc
	unsigned long id;
	uint32_t *p;
	int pktlen;
	int sport;

	id = ++rpc_id;
c7e28cb4:	e28cc001 	add	ip, ip, #1	; 0x1
c7e28cb8:	e58ec000 	str	ip, [lr]
/**************************************************************************
RPC_LOOKUP - Lookup RPC Port numbers
**************************************************************************/
static void
rpc_req(int rpc_prog, int rpc_proc, uint32_t *data, int datalen)
{
c7e28cbc:	e1a0a000 	mov	sl, r0
	uint32_t *p;
	int pktlen;
	int sport;

	id = ++rpc_id;
	pkt.u.call.id = htonl(id);
c7e28cc0:	e1a0000c 	mov	r0, ip
/**************************************************************************
RPC_LOOKUP - Lookup RPC Port numbers
**************************************************************************/
static void
rpc_req(int rpc_prog, int rpc_proc, uint32_t *data, int datalen)
{
c7e28cc4:	e1a07003 	mov	r7, r3
c7e28cc8:	e1a04001 	mov	r4, r1
c7e28ccc:	e1a09002 	mov	r9, r2
	uint32_t *p;
	int pktlen;
	int sport;

	id = ++rpc_id;
	pkt.u.call.id = htonl(id);
c7e28cd0:	ebffff06 	bl	c7e288f0 <__fswab32>
c7e28cd4:	e1a05000 	mov	r5, r0
	pkt.u.call.type = htonl(MSG_CALL);
	pkt.u.call.rpcvers = htonl(2);	/* use RPC version 2 */
	pkt.u.call.prog = htonl(rpc_prog);
c7e28cd8:	e1a0000a 	mov	r0, sl
c7e28cdc:	ebffff03 	bl	c7e288f0 <__fswab32>
c7e28ce0:	e1a06000 	mov	r6, r0
	pkt.u.call.vers = htonl(2);	/* portmapper is version 2 */
	pkt.u.call.proc = htonl(rpc_proc);
c7e28ce4:	e1a00004 	mov	r0, r4
c7e28ce8:	ebffff00 	bl	c7e288f0 <__fswab32>
	int sport;

	id = ++rpc_id;
	pkt.u.call.id = htonl(id);
	pkt.u.call.type = htonl(MSG_CALL);
	pkt.u.call.rpcvers = htonl(2);	/* use RPC version 2 */
c7e28cec:	e3a02402 	mov	r2, #33554432	; 0x2000000
	int pktlen;
	int sport;

	id = ++rpc_id;
	pkt.u.call.id = htonl(id);
	pkt.u.call.type = htonl(MSG_CALL);
c7e28cf0:	e3a03000 	mov	r3, #0	; 0x0
	pkt.u.call.prog = htonl(rpc_prog);
	pkt.u.call.vers = htonl(2);	/* portmapper is version 2 */
	pkt.u.call.proc = htonl(rpc_proc);
	p = (uint32_t *)&(pkt.u.call.data);

	if (datalen)
c7e28cf4:	e3570000 	cmp	r7, #0	; 0x0
	uint32_t *p;
	int pktlen;
	int sport;

	id = ++rpc_id;
	pkt.u.call.id = htonl(id);
c7e28cf8:	e58d5008 	str	r5, [sp, #8]
	pkt.u.call.type = htonl(MSG_CALL);
c7e28cfc:	e58d300c 	str	r3, [sp, #12]
	pkt.u.call.rpcvers = htonl(2);	/* use RPC version 2 */
	pkt.u.call.prog = htonl(rpc_prog);
c7e28d00:	e58d6014 	str	r6, [sp, #20]
	pkt.u.call.vers = htonl(2);	/* portmapper is version 2 */
c7e28d04:	e58d2018 	str	r2, [sp, #24]
	pkt.u.call.proc = htonl(rpc_proc);
c7e28d08:	e58d001c 	str	r0, [sp, #28]
	int sport;

	id = ++rpc_id;
	pkt.u.call.id = htonl(id);
	pkt.u.call.type = htonl(MSG_CALL);
	pkt.u.call.rpcvers = htonl(2);	/* use RPC version 2 */
c7e28d0c:	e58d2010 	str	r2, [sp, #16]
	pkt.u.call.prog = htonl(rpc_prog);
	pkt.u.call.vers = htonl(2);	/* portmapper is version 2 */
	pkt.u.call.proc = htonl(rpc_proc);
	p = (uint32_t *)&(pkt.u.call.data);

	if (datalen)
c7e28d10:	0a000004 	beq	c7e28d28 <rpc_req+0x88>
		memcpy((char *)p, (char *)data, datalen*sizeof(uint32_t));
c7e28d14:	e28d0008 	add	r0, sp, #8	; 0x8
c7e28d18:	e2800018 	add	r0, r0, #24	; 0x18
c7e28d1c:	e1a01009 	mov	r1, r9
c7e28d20:	e1a02107 	lsl	r2, r7, #2
c7e28d24:	ebffe7c4 	bl	c7e22c3c <memcpy>

	pktlen = (char *)p + datalen*sizeof(uint32_t) - (char *)&pkt;
c7e28d28:	e1a03107 	lsl	r3, r7, #2
c7e28d2c:	e2835018 	add	r5, r3, #24	; 0x18

	memcpy((char *)NetTxPacket + NetEthHdrSize() + IP_UDP_HDR_SIZE,
c7e28d30:	e59f3064 	ldr	r3, [pc, #100]	; c7e28d9c <rpc_req+0xfc>
c7e28d34:	e5934000 	ldr	r4, [r3]
c7e28d38:	ebfffb9e 	bl	c7e27bb8 <NetEthHdrSize>
c7e28d3c:	e280001c 	add	r0, r0, #28	; 0x1c
c7e28d40:	e1a02005 	mov	r2, r5
c7e28d44:	e0840000 	add	r0, r4, r0
c7e28d48:	e28d1008 	add	r1, sp, #8	; 0x8
c7e28d4c:	ebffe7ba 	bl	c7e22c3c <memcpy>
		(char *)&pkt, pktlen);

	if (rpc_prog == PROG_PORTMAP)
c7e28d50:	e59f3048 	ldr	r3, [pc, #72]	; c7e28da0 <rpc_req+0x100>
c7e28d54:	e15a0003 	cmp	sl, r3
c7e28d58:	03a0206f 	moveq	r2, #111	; 0x6f
c7e28d5c:	0a000004 	beq	c7e28d74 <rpc_req+0xd4>
		sport = SUNRPC_PORT;
	else if (rpc_prog == PROG_MOUNT)
c7e28d60:	e59f303c 	ldr	r3, [pc, #60]	; c7e28da4 <rpc_req+0x104>
c7e28d64:	e59f202c 	ldr	r2, [pc, #44]	; c7e28d98 <rpc_req+0xf8>
c7e28d68:	e15a0003 	cmp	sl, r3
		sport = NfsSrvMountPort;
c7e28d6c:	05922004 	ldreq	r2, [r2, #4]
	else
		sport = NfsSrvNfsPort;
c7e28d70:	15922008 	ldrne	r2, [r2, #8]

	NetSendUDPPacket(NetServerEther, NfsServerIP, sport, NfsOurPort,
c7e28d74:	e59f101c 	ldr	r1, [pc, #28]	; c7e28d98 <rpc_req+0xf8>
c7e28d78:	e59f0028 	ldr	r0, [pc, #40]	; c7e28da8 <rpc_req+0x108>
c7e28d7c:	e5913054 	ldr	r3, [r1, #84]
c7e28d80:	e5911050 	ldr	r1, [r1, #80]
c7e28d84:	e58d5000 	str	r5, [sp]
c7e28d88:	ebfffd27 	bl	c7e2822c <NetSendUDPPacket>
		pktlen);
}
c7e28d8c:	e28dd00c 	add	sp, sp, #12	; 0xc
c7e28d90:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e28d94:	e8bd86f0 	pop	{r4, r5, r6, r7, r9, sl, pc}
c7e28d98:	c7e74958 	.word	0xc7e74958
c7e28d9c:	c7e729cc 	.word	0xc7e729cc
c7e28da0:	000186a0 	.word	0x000186a0
c7e28da4:	000186a5 	.word	0x000186a5
c7e28da8:	c7e748d2 	.word	0xc7e748d2

c7e28dac <rpc_lookup_req>:
/**************************************************************************
RPC_LOOKUP - Lookup RPC Port numbers
**************************************************************************/
static void
rpc_lookup_req(int prog, int ver)
{
c7e28dac:	e92d4030 	push	{r4, r5, lr}
c7e28db0:	e24dd044 	sub	sp, sp, #68	; 0x44
c7e28db4:	e1a04001 	mov	r4, r1
	uint32_t data[16];

	data[0] = 0; data[1] = 0;	/* auth credential */
	data[2] = 0; data[3] = 0;	/* auth verifier */
	data[4] = htonl(prog);
c7e28db8:	ebfffecc 	bl	c7e288f0 <__fswab32>
c7e28dbc:	e1a05000 	mov	r5, r0
	data[5] = htonl(ver);
c7e28dc0:	e1a00004 	mov	r0, r4
c7e28dc4:	ebfffec9 	bl	c7e288f0 <__fswab32>
static void
rpc_lookup_req(int prog, int ver)
{
	uint32_t data[16];

	data[0] = 0; data[1] = 0;	/* auth credential */
c7e28dc8:	e3a04000 	mov	r4, #0	; 0x0
	data[2] = 0; data[3] = 0;	/* auth verifier */
	data[4] = htonl(prog);
	data[5] = htonl(ver);
c7e28dcc:	e58d0014 	str	r0, [sp, #20]
	data[6] = htonl(17);	/* IP_UDP */
c7e28dd0:	e3a0c411 	mov	ip, #285212672	; 0x11000000
	data[7] = 0;

	rpc_req(PROG_PORTMAP, PORTMAP_GETPORT, data, 8);
c7e28dd4:	e59f0030 	ldr	r0, [pc, #48]	; c7e28e0c <rpc_lookup_req+0x60>
c7e28dd8:	e3a01003 	mov	r1, #3	; 0x3
c7e28ddc:	e1a0200d 	mov	r2, sp
c7e28de0:	e3a03008 	mov	r3, #8	; 0x8
{
	uint32_t data[16];

	data[0] = 0; data[1] = 0;	/* auth credential */
	data[2] = 0; data[3] = 0;	/* auth verifier */
	data[4] = htonl(prog);
c7e28de4:	e58d5010 	str	r5, [sp, #16]
	data[5] = htonl(ver);
	data[6] = htonl(17);	/* IP_UDP */
c7e28de8:	e58dc018 	str	ip, [sp, #24]
	data[7] = 0;
c7e28dec:	e58d401c 	str	r4, [sp, #28]
static void
rpc_lookup_req(int prog, int ver)
{
	uint32_t data[16];

	data[0] = 0; data[1] = 0;	/* auth credential */
c7e28df0:	e58d4000 	str	r4, [sp]
c7e28df4:	e58d4004 	str	r4, [sp, #4]
	data[2] = 0; data[3] = 0;	/* auth verifier */
c7e28df8:	e58d4008 	str	r4, [sp, #8]
c7e28dfc:	e58d400c 	str	r4, [sp, #12]
	data[4] = htonl(prog);
	data[5] = htonl(ver);
	data[6] = htonl(17);	/* IP_UDP */
	data[7] = 0;

	rpc_req(PROG_PORTMAP, PORTMAP_GETPORT, data, 8);
c7e28e00:	ebffffa6 	bl	c7e28ca0 <rpc_req>
}
c7e28e04:	e28dd044 	add	sp, sp, #68	; 0x44
c7e28e08:	e8bd8030 	pop	{r4, r5, pc}
c7e28e0c:	000186a0 	.word	0x000186a0

c7e28e10 <nfs_mount_req>:
/**************************************************************************
NFS_MOUNT - Mount an NFS Filesystem
**************************************************************************/
static void
nfs_mount_req(char *path)
{
c7e28e10:	e92d4070 	push	{r4, r5, r6, lr}
c7e28e14:	e24dda01 	sub	sp, sp, #4096	; 0x1000
c7e28e18:	e1a06000 	mov	r6, r0
	uint32_t data[1024];
	uint32_t *p;
	int len;
	int pathlen;

	pathlen = strlen(path);
c7e28e1c:	ebffe6c5 	bl	c7e22938 <strlen>
c7e28e20:	e1a05000 	mov	r5, r0

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28e24:	e1a0000d 	mov	r0, sp
c7e28e28:	ebfffed2 	bl	c7e28978 <rpc_add_credentials>
c7e28e2c:	e1a04000 	mov	r4, r0

	*p++ = htonl(pathlen);
c7e28e30:	e1a00005 	mov	r0, r5
c7e28e34:	ebfffead 	bl	c7e288f0 <__fswab32>
	if (pathlen & 3)
c7e28e38:	e3150003 	tst	r5, #3	; 0x3
	pathlen = strlen(path);

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);

	*p++ = htonl(pathlen);
c7e28e3c:	e4840004 	str	r0, [r4], #4
	if (pathlen & 3)
c7e28e40:	0a000005 	beq	c7e28e5c <nfs_mount_req+0x4c>
		*(p + pathlen / 4) = 0;
c7e28e44:	e3550000 	cmp	r5, #0	; 0x0
c7e28e48:	e2853003 	add	r3, r5, #3	; 0x3
c7e28e4c:	a1a03005 	movge	r3, r5
c7e28e50:	e1a03143 	asr	r3, r3, #2
c7e28e54:	e3a02000 	mov	r2, #0	; 0x0
c7e28e58:	e7842103 	str	r2, [r4, r3, lsl #2]
	memcpy(p, path, pathlen);
c7e28e5c:	e1a01006 	mov	r1, r6
c7e28e60:	e1a02005 	mov	r2, r5
c7e28e64:	e1a00004 	mov	r0, r4
c7e28e68:	ebffe773 	bl	c7e22c3c <memcpy>
	p += (pathlen + 3) / 4;

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_MOUNT, MOUNT_ADDENTRY, data, len);
c7e28e6c:	e2953003 	adds	r3, r5, #3	; 0x3
c7e28e70:	42853006 	addmi	r3, r5, #6	; 0x6
c7e28e74:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e28e78:	e0843003 	add	r3, r4, r3
c7e28e7c:	e1a0200d 	mov	r2, sp
c7e28e80:	e0623003 	rsb	r3, r2, r3
c7e28e84:	e1a03143 	asr	r3, r3, #2
c7e28e88:	e59f000c 	ldr	r0, [pc, #12]	; c7e28e9c <nfs_mount_req+0x8c>
c7e28e8c:	e3a01001 	mov	r1, #1	; 0x1
c7e28e90:	ebffff82 	bl	c7e28ca0 <rpc_req>
}
c7e28e94:	e28dda01 	add	sp, sp, #4096	; 0x1000
c7e28e98:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e28e9c:	000186a5 	.word	0x000186a5

c7e28ea0 <nfs_umountall_req>:
/**************************************************************************
NFS_UMOUNTALL - Unmount all our NFS Filesystems on the Server
**************************************************************************/
static void
nfs_umountall_req(void)
{
c7e28ea0:	e92d4010 	push	{r4, lr}
	uint32_t data[1024];
	uint32_t *p;
	int len;

	if ((NfsSrvMountPort == -1) || (!fs_mounted))
c7e28ea4:	e59f2044 	ldr	r2, [pc, #68]	; c7e28ef0 <nfs_umountall_req+0x50>
/**************************************************************************
NFS_UMOUNTALL - Unmount all our NFS Filesystems on the Server
**************************************************************************/
static void
nfs_umountall_req(void)
{
c7e28ea8:	e24dda01 	sub	sp, sp, #4096	; 0x1000
	uint32_t data[1024];
	uint32_t *p;
	int len;

	if ((NfsSrvMountPort == -1) || (!fs_mounted))
c7e28eac:	e5923004 	ldr	r3, [r2, #4]
c7e28eb0:	e3730001 	cmn	r3, #1	; 0x1
c7e28eb4:	0a00000b 	beq	c7e28ee8 <nfs_umountall_req+0x48>
c7e28eb8:	e592300c 	ldr	r3, [r2, #12]
c7e28ebc:	e3530000 	cmp	r3, #0	; 0x0
c7e28ec0:	0a000008 	beq	c7e28ee8 <nfs_umountall_req+0x48>
		/* Nothing mounted, nothing to umount */
		return;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28ec4:	e1a0000d 	mov	r0, sp
c7e28ec8:	ebfffeaa 	bl	c7e28978 <rpc_add_credentials>
c7e28ecc:	e1a0400d 	mov	r4, sp

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_MOUNT, MOUNT_UMOUNTALL, data, len);
c7e28ed0:	e0643000 	rsb	r3, r4, r0
c7e28ed4:	e1a0200d 	mov	r2, sp
c7e28ed8:	e1a03143 	asr	r3, r3, #2
c7e28edc:	e59f0010 	ldr	r0, [pc, #16]	; c7e28ef4 <nfs_umountall_req+0x54>
c7e28ee0:	e3a01004 	mov	r1, #4	; 0x4
c7e28ee4:	ebffff6d 	bl	c7e28ca0 <rpc_req>
}
c7e28ee8:	e28dda01 	add	sp, sp, #4096	; 0x1000
c7e28eec:	e8bd8010 	pop	{r4, pc}
c7e28ef0:	c7e74958 	.word	0xc7e74958
c7e28ef4:	000186a5 	.word	0x000186a5

c7e28ef8 <nfs_lookup_req>:
/**************************************************************************
NFS_LOOKUP - Lookup Pathname
**************************************************************************/
static void
nfs_lookup_req(char *fname)
{
c7e28ef8:	e92d4070 	push	{r4, r5, r6, lr}
c7e28efc:	e24dda01 	sub	sp, sp, #4096	; 0x1000
c7e28f00:	e1a06000 	mov	r6, r0
	uint32_t data[1024];
	uint32_t *p;
	int len;
	int fnamelen;

	fnamelen = strlen(fname);
c7e28f04:	ebffe68b 	bl	c7e22938 <strlen>
c7e28f08:	e1a05000 	mov	r5, r0

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28f0c:	e1a0000d 	mov	r0, sp
c7e28f10:	ebfffe98 	bl	c7e28978 <rpc_add_credentials>

	memcpy(p, dirfh, NFS_FHSIZE);
c7e28f14:	e59f1078 	ldr	r1, [pc, #120]	; c7e28f94 <nfs_lookup_req+0x9c>
c7e28f18:	e3a02020 	mov	r2, #32	; 0x20
	int fnamelen;

	fnamelen = strlen(fname);

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28f1c:	e1a04000 	mov	r4, r0

	memcpy(p, dirfh, NFS_FHSIZE);
c7e28f20:	ebffe745 	bl	c7e22c3c <memcpy>
	p += (NFS_FHSIZE / 4);
	*p++ = htonl(fnamelen);
c7e28f24:	e1a00005 	mov	r0, r5
c7e28f28:	ebfffe70 	bl	c7e288f0 <__fswab32>
	if (fnamelen & 3)
c7e28f2c:	e3150003 	tst	r5, #3	; 0x3
	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);

	memcpy(p, dirfh, NFS_FHSIZE);
	p += (NFS_FHSIZE / 4);
	*p++ = htonl(fnamelen);
c7e28f30:	e5840020 	str	r0, [r4, #32]
c7e28f34:	e2844024 	add	r4, r4, #36	; 0x24
	if (fnamelen & 3)
c7e28f38:	0a000005 	beq	c7e28f54 <nfs_lookup_req+0x5c>
		*(p + fnamelen / 4) = 0;
c7e28f3c:	e3550000 	cmp	r5, #0	; 0x0
c7e28f40:	e2853003 	add	r3, r5, #3	; 0x3
c7e28f44:	a1a03005 	movge	r3, r5
c7e28f48:	e1a03143 	asr	r3, r3, #2
c7e28f4c:	e3a02000 	mov	r2, #0	; 0x0
c7e28f50:	e7842103 	str	r2, [r4, r3, lsl #2]
	memcpy(p, fname, fnamelen);
c7e28f54:	e1a01006 	mov	r1, r6
c7e28f58:	e1a02005 	mov	r2, r5
c7e28f5c:	e1a00004 	mov	r0, r4
c7e28f60:	ebffe735 	bl	c7e22c3c <memcpy>
	p += (fnamelen + 3) / 4;

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_NFS, NFS_LOOKUP, data, len);
c7e28f64:	e2953003 	adds	r3, r5, #3	; 0x3
c7e28f68:	42853006 	addmi	r3, r5, #6	; 0x6
c7e28f6c:	e3c33003 	bic	r3, r3, #3	; 0x3
c7e28f70:	e0843003 	add	r3, r4, r3
c7e28f74:	e1a0200d 	mov	r2, sp
c7e28f78:	e0623003 	rsb	r3, r2, r3
c7e28f7c:	e1a03143 	asr	r3, r3, #2
c7e28f80:	e59f0010 	ldr	r0, [pc, #16]	; c7e28f98 <nfs_lookup_req+0xa0>
c7e28f84:	e3a01004 	mov	r1, #4	; 0x4
c7e28f88:	ebffff44 	bl	c7e28ca0 <rpc_req>
}
c7e28f8c:	e28dda01 	add	sp, sp, #4096	; 0x1000
c7e28f90:	e8bd8070 	pop	{r4, r5, r6, pc}
c7e28f94:	c7e74968 	.word	0xc7e74968
c7e28f98:	000186a3 	.word	0x000186a3

c7e28f9c <nfs_read_req>:
/**************************************************************************
NFS_READ - Read File on NFS Server
**************************************************************************/
static void
nfs_read_req(int offset, int readlen)
{
c7e28f9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
c7e28fa0:	e24dda01 	sub	sp, sp, #4096	; 0x1000
c7e28fa4:	e24dd004 	sub	sp, sp, #4	; 0x4
c7e28fa8:	e1a06000 	mov	r6, r0
	uint32_t data[1024];
	uint32_t *p;
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28fac:	e1a0000d 	mov	r0, sp
/**************************************************************************
NFS_READ - Read File on NFS Server
**************************************************************************/
static void
nfs_read_req(int offset, int readlen)
{
c7e28fb0:	e1a07001 	mov	r7, r1
	uint32_t data[1024];
	uint32_t *p;
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28fb4:	ebfffe6f 	bl	c7e28978 <rpc_add_credentials>

	memcpy(p, filefh, NFS_FHSIZE);
c7e28fb8:	e59f1054 	ldr	r1, [pc, #84]	; c7e29014 <nfs_read_req+0x78>
c7e28fbc:	e3a02020 	mov	r2, #32	; 0x20
	uint32_t data[1024];
	uint32_t *p;
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28fc0:	e1a04000 	mov	r4, r0

	memcpy(p, filefh, NFS_FHSIZE);
c7e28fc4:	ebffe71c 	bl	c7e22c3c <memcpy>
	p += (NFS_FHSIZE / 4);
	*p++ = htonl(offset);
c7e28fc8:	e1a00006 	mov	r0, r6
c7e28fcc:	ebfffe47 	bl	c7e288f0 <__fswab32>
c7e28fd0:	e5840020 	str	r0, [r4, #32]
	*p++ = htonl(readlen);
c7e28fd4:	e1a00007 	mov	r0, r7
c7e28fd8:	ebfffe44 	bl	c7e288f0 <__fswab32>
	uint32_t data[1024];
	uint32_t *p;
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e28fdc:	e1a0500d 	mov	r5, sp
	*p++ = htonl(readlen);
	*p++ = 0;

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_NFS, NFS_READ, data, len);
c7e28fe0:	e284302c 	add	r3, r4, #44	; 0x2c
c7e28fe4:	e0653003 	rsb	r3, r5, r3

	memcpy(p, filefh, NFS_FHSIZE);
	p += (NFS_FHSIZE / 4);
	*p++ = htonl(offset);
	*p++ = htonl(readlen);
	*p++ = 0;
c7e28fe8:	e3a02000 	mov	r2, #0	; 0x0
	p = (uint32_t *)rpc_add_credentials((long *)p);

	memcpy(p, filefh, NFS_FHSIZE);
	p += (NFS_FHSIZE / 4);
	*p++ = htonl(offset);
	*p++ = htonl(readlen);
c7e28fec:	e5840024 	str	r0, [r4, #36]
	*p++ = 0;
c7e28ff0:	e5842028 	str	r2, [r4, #40]

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_NFS, NFS_READ, data, len);
c7e28ff4:	e1a03143 	asr	r3, r3, #2
c7e28ff8:	e1a0200d 	mov	r2, sp
c7e28ffc:	e59f0014 	ldr	r0, [pc, #20]	; c7e29018 <nfs_read_req+0x7c>
c7e29000:	e3a01006 	mov	r1, #6	; 0x6
c7e29004:	ebffff25 	bl	c7e28ca0 <rpc_req>
}
c7e29008:	e28dd004 	add	sp, sp, #4	; 0x4
c7e2900c:	e28dda01 	add	sp, sp, #4096	; 0x1000
c7e29010:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
c7e29014:	c7e74988 	.word	0xc7e74988
c7e29018:	000186a3 	.word	0x000186a3

c7e2901c <nfs_readlink_req>:
 * In case of successful readlink(), the dirname is manipulated,
 * so that inside the nfs() function a recursion can be done.
 **************************************************************************/
static void
nfs_readlink_req(void)
{
c7e2901c:	e92d4030 	push	{r4, r5, lr}
c7e29020:	e24dda01 	sub	sp, sp, #4096	; 0x1000
c7e29024:	e24dd004 	sub	sp, sp, #4	; 0x4
	uint32_t data[1024];
	uint32_t *p;
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);
c7e29028:	e1a0000d 	mov	r0, sp
c7e2902c:	ebfffe51 	bl	c7e28978 <rpc_add_credentials>
c7e29030:	e1a04000 	mov	r4, r0
c7e29034:	e1a0500d 	mov	r5, sp
	memcpy(p, filefh, NFS_FHSIZE);
	p += (NFS_FHSIZE / 4);

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_NFS, NFS_READLINK, data, len);
c7e29038:	e2844020 	add	r4, r4, #32	; 0x20
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);

	memcpy(p, filefh, NFS_FHSIZE);
c7e2903c:	e59f1028 	ldr	r1, [pc, #40]	; c7e2906c <nfs_readlink_req+0x50>
c7e29040:	e3a02020 	mov	r2, #32	; 0x20
	p += (NFS_FHSIZE / 4);

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_NFS, NFS_READLINK, data, len);
c7e29044:	e0654004 	rsb	r4, r5, r4
	int len;

	p = &(data[0]);
	p = (uint32_t *)rpc_add_credentials((long *)p);

	memcpy(p, filefh, NFS_FHSIZE);
c7e29048:	ebffe6fb 	bl	c7e22c3c <memcpy>
	p += (NFS_FHSIZE / 4);

	len = (uint32_t *)p - (uint32_t *)&(data[0]);

	rpc_req(PROG_NFS, NFS_READLINK, data, len);
c7e2904c:	e1a0200d 	mov	r2, sp
c7e29050:	e1a03144 	asr	r3, r4, #2
c7e29054:	e59f0014 	ldr	r0, [pc, #20]	; c7e29070 <nfs_readlink_req+0x54>
c7e29058:	e3a01005 	mov	r1, #5	; 0x5
c7e2905c:	ebffff0f 	bl	c7e28ca0 <rpc_req>
}
c7e29060:	e28dd004 	add	sp, sp, #4	; 0x4
c7e29064:	e28dda01 	add	sp, sp, #4096	; 0x1000
c7e29068:	e8bd8030 	pop	{r4, r5, pc}
c7e2906c:	c7e74988 	.word	0xc7e74988
c7e29070:	000186a3 	.word	0x000186a3

c7e29074 <NfsSend>:
static void
NfsSend(void)
{
	debug("%s\n", __func__);

	switch (NfsState) {
c7e29074:	e59f307c 	ldr	r3, [pc, #124]	; c7e290f8 <NfsSend+0x84>
c7e29078:	e5933058 	ldr	r3, [r3, #88]
c7e2907c:	e2433001 	sub	r3, r3, #1	; 0x1
c7e29080:	e3530006 	cmp	r3, #6	; 0x6
c7e29084:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e29088:	ea000019 	b	c7e290f4 <NfsSend+0x80>
c7e2908c:	c7e290a8 	.word	0xc7e290a8
c7e29090:	c7e290b4 	.word	0xc7e290b4
c7e29094:	c7e290c0 	.word	0xc7e290c0
c7e29098:	c7e290cc 	.word	0xc7e290cc
c7e2909c:	c7e290d0 	.word	0xc7e290d0
c7e290a0:	c7e290dc 	.word	0xc7e290dc
c7e290a4:	c7e290f0 	.word	0xc7e290f0
	case STATE_PRCLOOKUP_PROG_MOUNT_REQ:
		rpc_lookup_req(PROG_MOUNT, 1);
c7e290a8:	e59f004c 	ldr	r0, [pc, #76]	; c7e290fc <NfsSend+0x88>
c7e290ac:	e3a01001 	mov	r1, #1	; 0x1
c7e290b0:	ea000001 	b	c7e290bc <NfsSend+0x48>
		break;
	case STATE_PRCLOOKUP_PROG_NFS_REQ:
		rpc_lookup_req(PROG_NFS, 2);
c7e290b4:	e59f0044 	ldr	r0, [pc, #68]	; c7e29100 <NfsSend+0x8c>
c7e290b8:	e3a01002 	mov	r1, #2	; 0x2
c7e290bc:	eaffff3a 	b	c7e28dac <rpc_lookup_req>
		break;
	case STATE_MOUNT_REQ:
		nfs_mount_req(nfs_path);
c7e290c0:	e59f3030 	ldr	r3, [pc, #48]	; c7e290f8 <NfsSend+0x84>
c7e290c4:	e593005c 	ldr	r0, [r3, #92]
c7e290c8:	eaffff50 	b	c7e28e10 <nfs_mount_req>
		break;
	case STATE_UMOUNT_REQ:
		nfs_umountall_req();
c7e290cc:	eaffff73 	b	c7e28ea0 <nfs_umountall_req>
		break;
	case STATE_LOOKUP_REQ:
		nfs_lookup_req(nfs_filename);
c7e290d0:	e59f3020 	ldr	r3, [pc, #32]	; c7e290f8 <NfsSend+0x84>
c7e290d4:	e5930060 	ldr	r0, [r3, #96]
c7e290d8:	eaffff86 	b	c7e28ef8 <nfs_lookup_req>
		break;
	case STATE_READ_REQ:
		nfs_read_req(nfs_offset, nfs_len);
c7e290dc:	e59f3020 	ldr	r3, [pc, #32]	; c7e29104 <NfsSend+0x90>
c7e290e0:	e5930000 	ldr	r0, [r3]
c7e290e4:	e59f300c 	ldr	r3, [pc, #12]	; c7e290f8 <NfsSend+0x84>
c7e290e8:	e5931064 	ldr	r1, [r3, #100]
c7e290ec:	eaffffaa 	b	c7e28f9c <nfs_read_req>
		break;
	case STATE_READLINK_REQ:
		nfs_readlink_req();
c7e290f0:	eaffffc9 	b	c7e2901c <nfs_readlink_req>
c7e290f4:	e12fff1e 	bx	lr
c7e290f8:	c7e74958 	.word	0xc7e74958
c7e290fc:	000186a5 	.word	0x000186a5
c7e29100:	000186a3 	.word	0x000186a3
c7e29104:	c7e3a4dc 	.word	0xc7e3a4dc

c7e29108 <NfsStart>:
}


void
NfsStart(void)
{
c7e29108:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
		net_set_state(NETLOOP_FAIL);
		puts("*** ERROR: Fail allocate memory\n");
		return;
	}

	if (BootFile[0] == '\0') {
c7e2910c:	e59f61cc 	ldr	r6, [pc, #460]	; c7e292e0 <NfsStart+0x1d8>
NfsStart(void)
{
	debug("%s\n", __func__);
	nfs_download_state = NETLOOP_FAIL;

	NfsServerIP = NetServerIP;
c7e29110:	e59f31cc 	ldr	r3, [pc, #460]	; c7e292e4 <NfsStart+0x1dc>

void
NfsStart(void)
{
	debug("%s\n", __func__);
	nfs_download_state = NETLOOP_FAIL;
c7e29114:	e59f41cc 	ldr	r4, [pc, #460]	; c7e292e8 <NfsStart+0x1e0>
		net_set_state(NETLOOP_FAIL);
		puts("*** ERROR: Fail allocate memory\n");
		return;
	}

	if (BootFile[0] == '\0') {
c7e29118:	e5d62000 	ldrb	r2, [r6]
NfsStart(void)
{
	debug("%s\n", __func__);
	nfs_download_state = NETLOOP_FAIL;

	NfsServerIP = NetServerIP;
c7e2911c:	e5931000 	ldr	r1, [r3]
		net_set_state(NETLOOP_FAIL);
		puts("*** ERROR: Fail allocate memory\n");
		return;
	}

	if (BootFile[0] == '\0') {
c7e29120:	e3520000 	cmp	r2, #0	; 0x0

void
NfsStart(void)
{
	debug("%s\n", __func__);
	nfs_download_state = NETLOOP_FAIL;
c7e29124:	e3a03003 	mov	r3, #3	; 0x3

	NfsServerIP = NetServerIP;
	nfs_path = (char *)nfs_path_buff;
c7e29128:	e284206c 	add	r2, r4, #108	; 0x6c

void
NfsStart(void)
{
	debug("%s\n", __func__);
	nfs_download_state = NETLOOP_FAIL;
c7e2912c:	e5843068 	str	r3, [r4, #104]

	NfsServerIP = NetServerIP;
c7e29130:	e5841050 	str	r1, [r4, #80]
	nfs_path = (char *)nfs_path_buff;
c7e29134:	e584205c 	str	r2, [r4, #92]
		net_set_state(NETLOOP_FAIL);
		puts("*** ERROR: Fail allocate memory\n");
		return;
	}

	if (BootFile[0] == '\0') {
c7e29138:	1a000012 	bne	c7e29188 <NfsStart+0x80>
		sprintf(default_filename, "/nfsroot/%02X%02X%02X%02X.img",
c7e2913c:	e59f31a8 	ldr	r3, [pc, #424]	; c7e292ec <NfsStart+0x1e4>
c7e29140:	e59f11a8 	ldr	r1, [pc, #424]	; c7e292f0 <NfsStart+0x1e8>
c7e29144:	e593e000 	ldr	lr, [r3]
c7e29148:	e59f01a4 	ldr	r0, [pc, #420]	; c7e292f4 <NfsStart+0x1ec>
c7e2914c:	e1a0342e 	lsr	r3, lr, #8
c7e29150:	e1a0c82e 	lsr	ip, lr, #16
c7e29154:	e20e20ff 	and	r2, lr, #255	; 0xff
c7e29158:	e20cc0ff 	and	ip, ip, #255	; 0xff
c7e2915c:	e1a0ec2e 	lsr	lr, lr, #24
c7e29160:	e20330ff 	and	r3, r3, #255	; 0xff
c7e29164:	e88d5000 	stm	sp, {ip, lr}
c7e29168:	ebffeb30 	bl	c7e23e30 <sprintf>
			NetOurIP & 0xFF,
			(NetOurIP >>  8) & 0xFF,
			(NetOurIP >> 16) & 0xFF,
			(NetOurIP >> 24) & 0xFF);
		strcpy(nfs_path, default_filename);
c7e2916c:	e594005c 	ldr	r0, [r4, #92]
c7e29170:	e59f117c 	ldr	r1, [pc, #380]	; c7e292f4 <NfsStart+0x1ec>
c7e29174:	ebffe582 	bl	c7e22784 <strcpy>

		printf("*** Warning: no boot file name; using '%s'\n",
c7e29178:	e594105c 	ldr	r1, [r4, #92]
c7e2917c:	e59f0174 	ldr	r0, [pc, #372]	; c7e292f8 <NfsStart+0x1f0>
c7e29180:	ebff7e34 	bl	c7e08a58 <printf>
c7e29184:	ea00000c 	b	c7e291bc <NfsStart+0xb4>
			nfs_path);
	} else {
		char *p = BootFile;

		p = strchr(p, ':');
c7e29188:	e3a0103a 	mov	r1, #58	; 0x3a
c7e2918c:	e1a00006 	mov	r0, r6
c7e29190:	ebffe5d4 	bl	c7e228e8 <strchr>

		if (p != NULL) {
c7e29194:	e2505000 	subs	r5, r0, #0	; 0x0
			NfsServerIP = string_to_ip(BootFile);
			++p;
			strcpy(nfs_path, p);
		} else {
			strcpy(nfs_path, BootFile);
c7e29198:	0594005c 	ldreq	r0, [r4, #92]
c7e2919c:	01a01006 	moveq	r1, r6
	} else {
		char *p = BootFile;

		p = strchr(p, ':');

		if (p != NULL) {
c7e291a0:	0a000004 	beq	c7e291b8 <NfsStart+0xb0>
			NfsServerIP = string_to_ip(BootFile);
c7e291a4:	e1a00006 	mov	r0, r6
c7e291a8:	ebffe50e 	bl	c7e225e8 <string_to_ip>
c7e291ac:	e5840050 	str	r0, [r4, #80]
			++p;
			strcpy(nfs_path, p);
c7e291b0:	e594005c 	ldr	r0, [r4, #92]
c7e291b4:	e2851001 	add	r1, r5, #1	; 0x1
		} else {
			strcpy(nfs_path, BootFile);
c7e291b8:	ebffe571 	bl	c7e22784 <strcpy>
		}
	}

	nfs_filename = basename(nfs_path);
c7e291bc:	e59f4124 	ldr	r4, [pc, #292]	; c7e292e8 <NfsStart+0x1e0>
	nfs_path     = dirname(nfs_path);

	printf("Using %s device\n", eth_get_name());

	printf("File transfer via NFS from server %pI4"
c7e291c0:	e59f5124 	ldr	r5, [pc, #292]	; c7e292ec <NfsStart+0x1e4>
		} else {
			strcpy(nfs_path, BootFile);
		}
	}

	nfs_filename = basename(nfs_path);
c7e291c4:	e594005c 	ldr	r0, [r4, #92]
c7e291c8:	ebfffdd4 	bl	c7e28920 <basename>
c7e291cc:	e5840060 	str	r0, [r4, #96]
	nfs_path     = dirname(nfs_path);
c7e291d0:	e594005c 	ldr	r0, [r4, #92]
c7e291d4:	ebfffde0 	bl	c7e2895c <dirname>
c7e291d8:	e584005c 	str	r0, [r4, #92]

	printf("Using %s device\n", eth_get_name());
c7e291dc:	ebfff7f9 	bl	c7e271c8 <eth_get_name>
c7e291e0:	e1a01000 	mov	r1, r0
c7e291e4:	e59f0110 	ldr	r0, [pc, #272]	; c7e292fc <NfsStart+0x1f4>
c7e291e8:	ebff7e1a 	bl	c7e08a58 <printf>

	printf("File transfer via NFS from server %pI4"
c7e291ec:	e2841050 	add	r1, r4, #80	; 0x50
c7e291f0:	e59f0108 	ldr	r0, [pc, #264]	; c7e29300 <NfsStart+0x1f8>
c7e291f4:	e1a02005 	mov	r2, r5
c7e291f8:	ebff7e16 	bl	c7e08a58 <printf>
		"; our IP address is %pI4", &NfsServerIP, &NetOurIP);

	/* Check if we need to send across this subnet */
	if (NetOurGatewayIP && NetOurSubnetMask) {
c7e291fc:	e59f1100 	ldr	r1, [pc, #256]	; c7e29304 <NfsStart+0x1fc>
c7e29200:	e5913000 	ldr	r3, [r1]
c7e29204:	e3530000 	cmp	r3, #0	; 0x0
c7e29208:	0a00000c 	beq	c7e29240 <NfsStart+0x138>
c7e2920c:	e59f30f4 	ldr	r3, [pc, #244]	; c7e29308 <NfsStart+0x200>
c7e29210:	e5930000 	ldr	r0, [r3]
c7e29214:	e3500000 	cmp	r0, #0	; 0x0
c7e29218:	0a000008 	beq	c7e29240 <NfsStart+0x138>
		IPaddr_t OurNet	    = NetOurIP	  & NetOurSubnetMask;
		IPaddr_t ServerNet  = NetServerIP & NetOurSubnetMask;

		if (OurNet != ServerNet)
c7e2921c:	e59f30c0 	ldr	r3, [pc, #192]	; c7e292e4 <NfsStart+0x1dc>
c7e29220:	e5952000 	ldr	r2, [r5]
c7e29224:	e5933000 	ldr	r3, [r3]
c7e29228:	e0002002 	and	r2, r0, r2
c7e2922c:	e0003003 	and	r3, r0, r3
c7e29230:	e1520003 	cmp	r2, r3
c7e29234:	0a000001 	beq	c7e29240 <NfsStart+0x138>
			printf("; sending through gateway %pI4",
c7e29238:	e59f00cc 	ldr	r0, [pc, #204]	; c7e2930c <NfsStart+0x204>
c7e2923c:	ebff7e05 	bl	c7e08a58 <printf>
				&NetOurGatewayIP);
	}
	printf("\nFilename '%s/%s'.", nfs_path, nfs_filename);
c7e29240:	e59f30a0 	ldr	r3, [pc, #160]	; c7e292e8 <NfsStart+0x1e0>

	if (NetBootFileSize) {
c7e29244:	e59f40c4 	ldr	r4, [pc, #196]	; c7e29310 <NfsStart+0x208>

		if (OurNet != ServerNet)
			printf("; sending through gateway %pI4",
				&NetOurGatewayIP);
	}
	printf("\nFilename '%s/%s'.", nfs_path, nfs_filename);
c7e29248:	e593105c 	ldr	r1, [r3, #92]
c7e2924c:	e5932060 	ldr	r2, [r3, #96]
c7e29250:	e59f00bc 	ldr	r0, [pc, #188]	; c7e29314 <NfsStart+0x20c>
c7e29254:	ebff7dff 	bl	c7e08a58 <printf>

	if (NetBootFileSize) {
c7e29258:	e1d410b0 	ldrh	r1, [r4]
c7e2925c:	e3510000 	cmp	r1, #0	; 0x0
c7e29260:	0a000007 	beq	c7e29284 <NfsStart+0x17c>
		printf(" Size is 0x%x Bytes = ", NetBootFileSize<<9);
c7e29264:	e1a01481 	lsl	r1, r1, #9
c7e29268:	e59f00a8 	ldr	r0, [pc, #168]	; c7e29318 <NfsStart+0x210>
c7e2926c:	ebff7df9 	bl	c7e08a58 <printf>
		print_size(NetBootFileSize<<9, "");
c7e29270:	e1d400b0 	ldrh	r0, [r4]
c7e29274:	e59f20a0 	ldr	r2, [pc, #160]	; c7e2931c <NfsStart+0x214>
c7e29278:	e1a00480 	lsl	r0, r0, #9
c7e2927c:	e1a01fc0 	asr	r1, r0, #31
c7e29280:	ebffdeb4 	bl	c7e20d58 <print_size>
	}
	printf("\nLoad address: 0x%lx\n"
c7e29284:	e59f3094 	ldr	r3, [pc, #148]	; c7e29320 <NfsStart+0x218>
c7e29288:	e59f0094 	ldr	r0, [pc, #148]	; c7e29324 <NfsStart+0x21c>
c7e2928c:	e5931000 	ldr	r1, [r3]
c7e29290:	ebff7df0 	bl	c7e08a58 <printf>
		"Loading: *\b", load_addr);

	NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
c7e29294:	e59f108c 	ldr	r1, [pc, #140]	; c7e29328 <NfsStart+0x220>
c7e29298:	e3a00e7d 	mov	r0, #2000	; 0x7d0
c7e2929c:	ebfffa87 	bl	c7e27cc0 <NetSetTimeout>
	net_set_udp_handler(NfsHandler);
c7e292a0:	e59f0084 	ldr	r0, [pc, #132]	; c7e2932c <NfsStart+0x224>
c7e292a4:	ebfff9e7 	bl	c7e27a48 <net_set_udp_handler>

	NfsTimeoutCount = 0;
c7e292a8:	e59fc038 	ldr	ip, [pc, #56]	; c7e292e8 <NfsStart+0x1e0>
	NfsState = STATE_PRCLOOKUP_PROG_MOUNT_REQ;

	/*NfsOurPort = 4096 + (get_ticks() % 3072);*/
	/*FIX ME !!!*/
	NfsOurPort = 1000;
c7e292ac:	e3a03ffa 	mov	r3, #1000	; 0x3e8
		"Loading: *\b", load_addr);

	NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
	net_set_udp_handler(NfsHandler);

	NfsTimeoutCount = 0;
c7e292b0:	e3a04000 	mov	r4, #0	; 0x0
	NfsState = STATE_PRCLOOKUP_PROG_MOUNT_REQ;

	/*NfsOurPort = 4096 + (get_ticks() % 3072);*/
	/*FIX ME !!!*/
	NfsOurPort = 1000;
c7e292b4:	e58c3054 	str	r3, [ip, #84]

	NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
	net_set_udp_handler(NfsHandler);

	NfsTimeoutCount = 0;
	NfsState = STATE_PRCLOOKUP_PROG_MOUNT_REQ;
c7e292b8:	e3a03001 	mov	r3, #1	; 0x1
	/*NfsOurPort = 4096 + (get_ticks() % 3072);*/
	/*FIX ME !!!*/
	NfsOurPort = 1000;

	/* zero out server ether in case the server ip has changed */
	memset(NetServerEther, 0, 6);
c7e292bc:	e1a01004 	mov	r1, r4
c7e292c0:	e3a02006 	mov	r2, #6	; 0x6

	NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
	net_set_udp_handler(NfsHandler);

	NfsTimeoutCount = 0;
	NfsState = STATE_PRCLOOKUP_PROG_MOUNT_REQ;
c7e292c4:	e58c3058 	str	r3, [ip, #88]
		"Loading: *\b", load_addr);

	NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
	net_set_udp_handler(NfsHandler);

	NfsTimeoutCount = 0;
c7e292c8:	e58c48ac 	str	r4, [ip, #2220]
	/*NfsOurPort = 4096 + (get_ticks() % 3072);*/
	/*FIX ME !!!*/
	NfsOurPort = 1000;

	/* zero out server ether in case the server ip has changed */
	memset(NetServerEther, 0, 6);
c7e292cc:	e59f005c 	ldr	r0, [pc, #92]	; c7e29330 <NfsStart+0x228>
c7e292d0:	ebffe62f 	bl	c7e22b94 <memset>

	NfsSend();
}
c7e292d4:	e28dd008 	add	sp, sp, #8	; 0x8
c7e292d8:	e8bd4070 	pop	{r4, r5, r6, lr}
	NfsOurPort = 1000;

	/* zero out server ether in case the server ip has changed */
	memset(NetServerEther, 0, 6);

	NfsSend();
c7e292dc:	eaffff64 	b	c7e29074 <NfsSend>
c7e292e0:	c7e748d8 	.word	0xc7e748d8
c7e292e4:	c7e729f4 	.word	0xc7e729f4
c7e292e8:	c7e74958 	.word	0xc7e74958
c7e292ec:	c7e729b8 	.word	0xc7e729b8
c7e292f0:	c7e34e5a 	.word	0xc7e34e5a
c7e292f4:	c7e751c4 	.word	0xc7e751c4
c7e292f8:	c7e34e78 	.word	0xc7e34e78
c7e292fc:	c7e34ea4 	.word	0xc7e34ea4
c7e29300:	c7e34eb5 	.word	0xc7e34eb5
c7e29304:	c7e729ec 	.word	0xc7e729ec
c7e29308:	c7e729f0 	.word	0xc7e729f0
c7e2930c:	c7e34ef4 	.word	0xc7e34ef4
c7e29310:	c7e748d0 	.word	0xc7e748d0
c7e29314:	c7e34f13 	.word	0xc7e34f13
c7e29318:	c7e34f26 	.word	0xc7e34f26
c7e2931c:	c7e2fef0 	.word	0xc7e2fef0
c7e29320:	c7e353cc 	.word	0xc7e353cc
c7e29324:	c7e34f3d 	.word	0xc7e34f3d
c7e29328:	c7e29740 	.word	0xc7e29740
c7e2932c:	c7e2956c 	.word	0xc7e2956c
c7e29330:	c7e748d2 	.word	0xc7e748d2

c7e29334 <nfs_readlink_reply>:
	return 0;
}

static int
nfs_readlink_reply(uchar *pkt, unsigned len)
{
c7e29334:	e92d44f0 	push	{r4, r5, r6, r7, sl, lr}
c7e29338:	e24ddb02 	sub	sp, sp, #2048	; 0x800
c7e2933c:	e1a02001 	mov	r2, r1
	struct rpc_t rpc_pkt;
	int rlen;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e29340:	e1a01000 	mov	r1, r0
c7e29344:	e1a0000d 	mov	r0, sp
c7e29348:	ebffe63b 	bl	c7e22c3c <memcpy>

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e2934c:	e59d0000 	ldr	r0, [sp]
c7e29350:	ebfffd66 	bl	c7e288f0 <__fswab32>
c7e29354:	e59f70c4 	ldr	r7, [pc, #196]	; c7e29420 <nfs_readlink_reply+0xec>
	struct rpc_t rpc_pkt;
	int rlen;

	debug("%s\n", __func__);

	memcpy((unsigned char *)&rpc_pkt, pkt, len);
c7e29358:	e1a0400d 	mov	r4, sp

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e2935c:	e5973000 	ldr	r3, [r7]
c7e29360:	e1500003 	cmp	r0, r3
c7e29364:	1a00002a 	bne	c7e29414 <nfs_readlink_reply+0xe0>
		return -1;

	if (rpc_pkt.u.reply.rstatus  ||
c7e29368:	e59d3008 	ldr	r3, [sp, #8]
c7e2936c:	e3530000 	cmp	r3, #0	; 0x0
c7e29370:	1a000027 	bne	c7e29414 <nfs_readlink_reply+0xe0>
c7e29374:	e59d300c 	ldr	r3, [sp, #12]
c7e29378:	e3530000 	cmp	r3, #0	; 0x0
c7e2937c:	1a000024 	bne	c7e29414 <nfs_readlink_reply+0xe0>
c7e29380:	e59d3014 	ldr	r3, [sp, #20]
c7e29384:	e3530000 	cmp	r3, #0	; 0x0
c7e29388:	1a000021 	bne	c7e29414 <nfs_readlink_reply+0xe0>
c7e2938c:	e59d6018 	ldr	r6, [sp, #24]
c7e29390:	e3560000 	cmp	r6, #0	; 0x0
c7e29394:	1a00001e 	bne	c7e29414 <nfs_readlink_reply+0xe0>
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus  ||
	    rpc_pkt.u.reply.data[0])
		return -1;

	rlen = ntohl(rpc_pkt.u.reply.data[1]); /* new path length */
c7e29398:	e59d001c 	ldr	r0, [sp, #28]
c7e2939c:	ebfffd53 	bl	c7e288f0 <__fswab32>

	if (*((char *)&(rpc_pkt.u.reply.data[2])) != '/') {
c7e293a0:	e5dd3020 	ldrb	r3, [sp, #32]
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus  ||
	    rpc_pkt.u.reply.data[0])
		return -1;

	rlen = ntohl(rpc_pkt.u.reply.data[1]); /* new path length */
c7e293a4:	e1a05000 	mov	r5, r0

	if (*((char *)&(rpc_pkt.u.reply.data[2])) != '/') {
c7e293a8:	e353002f 	cmp	r3, #47	; 0x2f
c7e293ac:	e28da020 	add	sl, sp, #32	; 0x20
c7e293b0:	0a00000f 	beq	c7e293f4 <nfs_readlink_reply+0xc0>
		int pathlen;
		strcat(nfs_path, "/");
c7e293b4:	e59f1068 	ldr	r1, [pc, #104]	; c7e29424 <nfs_readlink_reply+0xf0>
c7e293b8:	e597005c 	ldr	r0, [r7, #92]
c7e293bc:	ebffe501 	bl	c7e227c8 <strcat>
		pathlen = strlen(nfs_path);
c7e293c0:	e597005c 	ldr	r0, [r7, #92]
c7e293c4:	ebffe55b 	bl	c7e22938 <strlen>
c7e293c8:	e1a04000 	mov	r4, r0
		memcpy(nfs_path + pathlen, (uchar *)&(rpc_pkt.u.reply.data[2]),
c7e293cc:	e597005c 	ldr	r0, [r7, #92]
c7e293d0:	e1a0100a 	mov	r1, sl
c7e293d4:	e0800004 	add	r0, r0, r4
c7e293d8:	e1a02005 	mov	r2, r5
c7e293dc:	ebffe616 	bl	c7e22c3c <memcpy>
			rlen);
		nfs_path[pathlen + rlen] = 0;
c7e293e0:	e597305c 	ldr	r3, [r7, #92]
c7e293e4:	e1a00006 	mov	r0, r6
c7e293e8:	e0833005 	add	r3, r3, r5
c7e293ec:	e7c36004 	strb	r6, [r3, r4]
c7e293f0:	ea000008 	b	c7e29418 <nfs_readlink_reply+0xe4>
	} else {
		memcpy(nfs_path, (uchar *)&(rpc_pkt.u.reply.data[2]), rlen);
c7e293f4:	e1a0100a 	mov	r1, sl
c7e293f8:	e597005c 	ldr	r0, [r7, #92]
c7e293fc:	e1a02005 	mov	r2, r5
c7e29400:	ebffe60d 	bl	c7e22c3c <memcpy>
		nfs_path[rlen] = 0;
c7e29404:	e597305c 	ldr	r3, [r7, #92]
c7e29408:	e1a00006 	mov	r0, r6
c7e2940c:	e7c36005 	strb	r6, [r3, r5]
c7e29410:	ea000000 	b	c7e29418 <nfs_readlink_reply+0xe4>
c7e29414:	e3e00000 	mvn	r0, #0	; 0x0
	}
	return 0;
}
c7e29418:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e2941c:	e8bd84f0 	pop	{r4, r5, r6, r7, sl, pc}
c7e29420:	c7e74958 	.word	0xc7e74958
c7e29424:	c7e2f450 	.word	0xc7e2f450

c7e29428 <nfs_read_reply>:

static int
nfs_read_reply(uchar *pkt, unsigned len)
{
c7e29428:	e92d4030 	push	{r4, r5, lr}
c7e2942c:	e24ddb02 	sub	sp, sp, #2048	; 0x800
c7e29430:	e24dd004 	sub	sp, sp, #4	; 0x4
	struct rpc_t rpc_pkt;
	int rlen;

	debug("%s\n", __func__);

	memcpy((uchar *)&rpc_pkt, pkt, sizeof(rpc_pkt.u.reply));
c7e29434:	e1a01000 	mov	r1, r0
c7e29438:	e3a02064 	mov	r2, #100	; 0x64
	return 0;
}

static int
nfs_read_reply(uchar *pkt, unsigned len)
{
c7e2943c:	e1a05000 	mov	r5, r0
	struct rpc_t rpc_pkt;
	int rlen;

	debug("%s\n", __func__);

	memcpy((uchar *)&rpc_pkt, pkt, sizeof(rpc_pkt.u.reply));
c7e29440:	e1a0000d 	mov	r0, sp
c7e29444:	ebffe5fc 	bl	c7e22c3c <memcpy>

	if (ntohl(rpc_pkt.u.reply.id) != rpc_id)
c7e29448:	e59d0000 	ldr	r0, [sp]
c7e2944c:	ebfffd27 	bl	c7e288f0 <__fswab32>
c7e29450:	e59f30f8 	ldr	r3, [pc, #248]	; c7e29550 <nfs_read_reply+0x128>
c7e29454:	e5933000 	ldr	r3, [r3]
c7e29458:	e1500003 	cmp	r0, r3
c7e2945c:	13e04000 	mvnne	r4, #0	; 0x0
c7e29460:	1a000036 	bne	c7e29540 <nfs_read_reply+0x118>
		return -1;

	if (rpc_pkt.u.reply.rstatus  ||
c7e29464:	e59d3008 	ldr	r3, [sp, #8]
c7e29468:	e3530000 	cmp	r3, #0	; 0x0
c7e2946c:	1a000032 	bne	c7e2953c <nfs_read_reply+0x114>
c7e29470:	e59d300c 	ldr	r3, [sp, #12]
c7e29474:	e3530000 	cmp	r3, #0	; 0x0
c7e29478:	1a000005 	bne	c7e29494 <nfs_read_reply+0x6c>
c7e2947c:	e59d3014 	ldr	r3, [sp, #20]
c7e29480:	e3530000 	cmp	r3, #0	; 0x0
c7e29484:	1a000002 	bne	c7e29494 <nfs_read_reply+0x6c>
c7e29488:	e59d3018 	ldr	r3, [sp, #24]
c7e2948c:	e3530000 	cmp	r3, #0	; 0x0
c7e29490:	0a000006 	beq	c7e294b0 <nfs_read_reply+0x88>
	    rpc_pkt.u.reply.verifier ||
	    rpc_pkt.u.reply.astatus  ||
	    rpc_pkt.u.reply.data[0]) {
		if (rpc_pkt.u.reply.rstatus)
			return -9999;
		if (rpc_pkt.u.reply.astatus)
c7e29494:	e59d3014 	ldr	r3, [sp, #20]
c7e29498:	e3530000 	cmp	r3, #0	; 0x0
c7e2949c:	1a000026 	bne	c7e2953c <nfs_read_reply+0x114>
			return -9999;
		return -ntohl(rpc_pkt.u.reply.data[0]);
c7e294a0:	e59d0018 	ldr	r0, [sp, #24]
c7e294a4:	ebfffd11 	bl	c7e288f0 <__fswab32>
c7e294a8:	e2604000 	rsb	r4, r0, #0	; 0x0
c7e294ac:	ea000023 	b	c7e29540 <nfs_read_reply+0x118>
	}

	if ((nfs_offset != 0) && !((nfs_offset) %
c7e294b0:	e59f309c 	ldr	r3, [pc, #156]	; c7e29554 <nfs_read_reply+0x12c>
c7e294b4:	e5930000 	ldr	r0, [r3]
c7e294b8:	e3500000 	cmp	r0, #0	; 0x0
c7e294bc:	0a000005 	beq	c7e294d8 <nfs_read_reply+0xb0>
c7e294c0:	e59f1090 	ldr	r1, [pc, #144]	; c7e29558 <nfs_read_reply+0x130>
c7e294c4:	eb00049e 	bl	c7e2a744 <__aeabi_idivmod>
c7e294c8:	e3510000 	cmp	r1, #0	; 0x0
c7e294cc:	1a000001 	bne	c7e294d8 <nfs_read_reply+0xb0>
			(NFS_READ_SIZE / 2 * 10 * HASHES_PER_LINE)))
		puts("\n\t ");
c7e294d0:	e59f0084 	ldr	r0, [pc, #132]	; c7e2955c <nfs_read_reply+0x134>
c7e294d4:	ebff7d44 	bl	c7e089ec <puts>
	if (!(nfs_offset % ((NFS_READ_SIZE / 2) * 10)))
c7e294d8:	e59f3074 	ldr	r3, [pc, #116]	; c7e29554 <nfs_read_reply+0x12c>
c7e294dc:	e3a01b05 	mov	r1, #5120	; 0x1400
c7e294e0:	e5930000 	ldr	r0, [r3]
c7e294e4:	eb000496 	bl	c7e2a744 <__aeabi_idivmod>
c7e294e8:	e3510000 	cmp	r1, #0	; 0x0
c7e294ec:	1a000001 	bne	c7e294f8 <nfs_read_reply+0xd0>
		putc('#');
c7e294f0:	e3a00023 	mov	r0, #35	; 0x23
c7e294f4:	ebff7de7 	bl	c7e08c98 <putc>

	rlen = ntohl(rpc_pkt.u.reply.data[18]);
c7e294f8:	e59d0060 	ldr	r0, [sp, #96]
c7e294fc:	ebfffcfb 	bl	c7e288f0 <__fswab32>
	if (store_block((uchar *)pkt + sizeof(rpc_pkt.u.reply),
c7e29500:	e59f304c 	ldr	r3, [pc, #76]	; c7e29554 <nfs_read_reply+0x12c>
			(NFS_READ_SIZE / 2 * 10 * HASHES_PER_LINE)))
		puts("\n\t ");
	if (!(nfs_offset % ((NFS_READ_SIZE / 2) * 10)))
		putc('#');

	rlen = ntohl(rpc_pkt.u.reply.data[18]);
c7e29504:	e1a04000 	mov	r4, r0
	if (store_block((uchar *)pkt + sizeof(rpc_pkt.u.reply),
c7e29508:	e593c000 	ldr	ip, [r3]
			return -1;
		}
	} else
#endif /* CONFIG_SYS_DIRECT_FLASH_NFS */
	{
		(void)memcpy((void *)(load_addr + offset), src, len);
c7e2950c:	e59f304c 	ldr	r3, [pc, #76]	; c7e29560 <nfs_read_reply+0x138>
c7e29510:	e2851064 	add	r1, r5, #100	; 0x64
c7e29514:	e5930000 	ldr	r0, [r3]
c7e29518:	e1a02004 	mov	r2, r4
c7e2951c:	e08c0000 	add	r0, ip, r0
static char nfs_path_buff[2048];

static inline int
store_block(uchar *src, unsigned offset, unsigned len)
{
	ulong newsize = offset + len;
c7e29520:	e084500c 	add	r5, r4, ip
			return -1;
		}
	} else
#endif /* CONFIG_SYS_DIRECT_FLASH_NFS */
	{
		(void)memcpy((void *)(load_addr + offset), src, len);
c7e29524:	ebffe5c4 	bl	c7e22c3c <memcpy>
	}

	if (NetBootFileXferSize < (offset+len))
c7e29528:	e59f2034 	ldr	r2, [pc, #52]	; c7e29564 <nfs_read_reply+0x13c>
c7e2952c:	e5923000 	ldr	r3, [r2]
c7e29530:	e1530005 	cmp	r3, r5
		NetBootFileXferSize = newsize;
c7e29534:	35825000 	strcc	r5, [r2]
c7e29538:	ea000000 	b	c7e29540 <nfs_read_reply+0x118>
c7e2953c:	e59f4024 	ldr	r4, [pc, #36]	; c7e29568 <nfs_read_reply+0x140>
	if (store_block((uchar *)pkt + sizeof(rpc_pkt.u.reply),
			nfs_offset, rlen))
		return -9999;

	return rlen;
}
c7e29540:	e1a00004 	mov	r0, r4
c7e29544:	e28dd004 	add	sp, sp, #4	; 0x4
c7e29548:	e28ddb02 	add	sp, sp, #2048	; 0x800
c7e2954c:	e8bd8030 	pop	{r4, r5, pc}
c7e29550:	c7e74958 	.word	0xc7e74958
c7e29554:	c7e3a4dc 	.word	0xc7e3a4dc
c7e29558:	00051400 	.word	0x00051400
c7e2955c:	c7e34f5e 	.word	0xc7e34f5e
c7e29560:	c7e353cc 	.word	0xc7e353cc
c7e29564:	c7e74848 	.word	0xc7e74848
c7e29568:	ffffd8f1 	.word	0xffffd8f1

c7e2956c <NfsHandler>:
{
	int rlen;

	debug("%s\n", __func__);

	if (dest != NfsOurPort)
c7e2956c:	e59fc1a4 	ldr	ip, [pc, #420]	; c7e29718 <NfsHandler+0x1ac>
	}
}

static void
NfsHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src, unsigned len)
{
c7e29570:	e92d4010 	push	{r4, lr}
	int rlen;

	debug("%s\n", __func__);

	if (dest != NfsOurPort)
c7e29574:	e59c3054 	ldr	r3, [ip, #84]
	}
}

static void
NfsHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src, unsigned len)
{
c7e29578:	e59d2008 	ldr	r2, [sp, #8]
	int rlen;

	debug("%s\n", __func__);

	if (dest != NfsOurPort)
c7e2957c:	e1510003 	cmp	r1, r3
c7e29580:	18bd8010 	popne	{r4, pc}
		return;

	switch (NfsState) {
c7e29584:	e59c3058 	ldr	r3, [ip, #88]
c7e29588:	e2433001 	sub	r3, r3, #1	; 0x1
c7e2958c:	e3530006 	cmp	r3, #6	; 0x6
c7e29590:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e29594:	ea00005e 	b	c7e29714 <NfsHandler+0x1a8>
c7e29598:	c7e295b4 	.word	0xc7e295b4
c7e2959c:	c7e295c8 	.word	0xc7e295c8
c7e295a0:	c7e295dc 	.word	0xc7e295dc
c7e295a4:	c7e295fc 	.word	0xc7e295fc
c7e295a8:	c7e29634 	.word	0xc7e29634
c7e295ac:	c7e296b0 	.word	0xc7e296b0
c7e295b0:	c7e29664 	.word	0xc7e29664
	case STATE_PRCLOOKUP_PROG_MOUNT_REQ:
		rpc_lookup_reply(PROG_MOUNT, pkt, len);
c7e295b4:	e1a01000 	mov	r1, r0
c7e295b8:	e59f015c 	ldr	r0, [pc, #348]	; c7e2971c <NfsHandler+0x1b0>
c7e295bc:	ebfffd23 	bl	c7e28a50 <rpc_lookup_reply>
		NfsState = STATE_PRCLOOKUP_PROG_NFS_REQ;
c7e295c0:	e3a02002 	mov	r2, #2	; 0x2
c7e295c4:	ea00004e 	b	c7e29704 <NfsHandler+0x198>
		NfsSend();
		break;

	case STATE_PRCLOOKUP_PROG_NFS_REQ:
		rpc_lookup_reply(PROG_NFS, pkt, len);
c7e295c8:	e1a01000 	mov	r1, r0
c7e295cc:	e59f014c 	ldr	r0, [pc, #332]	; c7e29720 <NfsHandler+0x1b4>
c7e295d0:	ebfffd1e 	bl	c7e28a50 <rpc_lookup_reply>
		NfsState = STATE_MOUNT_REQ;
c7e295d4:	e3a02003 	mov	r2, #3	; 0x3
c7e295d8:	ea000049 	b	c7e29704 <NfsHandler+0x198>
		NfsSend();
		break;

	case STATE_MOUNT_REQ:
		if (nfs_mount_reply(pkt, len)) {
c7e295dc:	e1a01002 	mov	r1, r2
c7e295e0:	ebfffd42 	bl	c7e28af0 <nfs_mount_reply>
c7e295e4:	e3500000 	cmp	r0, #0	; 0x0
c7e295e8:	e59f4128 	ldr	r4, [pc, #296]	; c7e29718 <NfsHandler+0x1ac>
			puts("*** ERROR: Cannot mount\n");
c7e295ec:	159f0130 	ldrne	r0, [pc, #304]	; c7e29724 <NfsHandler+0x1b8>
			/* just to be sure... */
			NfsState = STATE_UMOUNT_REQ;
			NfsSend();
		} else {
			NfsState = STATE_LOOKUP_REQ;
c7e295f0:	03a03005 	moveq	r3, #5	; 0x5
		NfsState = STATE_MOUNT_REQ;
		NfsSend();
		break;

	case STATE_MOUNT_REQ:
		if (nfs_mount_reply(pkt, len)) {
c7e295f4:	0a000022 	beq	c7e29684 <NfsHandler+0x118>
c7e295f8:	ea00001f 	b	c7e2967c <NfsHandler+0x110>
			NfsSend();
		}
		break;

	case STATE_UMOUNT_REQ:
		if (nfs_umountall_reply(pkt, len)) {
c7e295fc:	e1a01002 	mov	r1, r2
c7e29600:	ebfffd61 	bl	c7e28b8c <nfs_umountall_reply>
c7e29604:	e3500000 	cmp	r0, #0	; 0x0
c7e29608:	0a000003 	beq	c7e2961c <NfsHandler+0xb0>
			puts("*** ERROR: Cannot umount\n");
c7e2960c:	e59f0114 	ldr	r0, [pc, #276]	; c7e29728 <NfsHandler+0x1bc>
c7e29610:	ebff7cf5 	bl	c7e089ec <puts>
			net_set_state(NETLOOP_FAIL);
c7e29614:	e3a00003 	mov	r0, #3	; 0x3
c7e29618:	ea000003 	b	c7e2962c <NfsHandler+0xc0>
		} else {
			puts("\ndone\n");
c7e2961c:	e59f0108 	ldr	r0, [pc, #264]	; c7e2972c <NfsHandler+0x1c0>
c7e29620:	ebff7cf1 	bl	c7e089ec <puts>
			net_set_state(nfs_download_state);
c7e29624:	e59f30ec 	ldr	r3, [pc, #236]	; c7e29718 <NfsHandler+0x1ac>
c7e29628:	e5930068 	ldr	r0, [r3, #104]
			NfsState = STATE_UMOUNT_REQ;
			NfsSend();
		}
		break;
	}
}
c7e2962c:	e8bd4010 	pop	{r4, lr}
		if (nfs_umountall_reply(pkt, len)) {
			puts("*** ERROR: Cannot umount\n");
			net_set_state(NETLOOP_FAIL);
		} else {
			puts("\ndone\n");
			net_set_state(nfs_download_state);
c7e29630:	eafffcb6 	b	c7e28910 <net_set_state>
		}
		break;

	case STATE_LOOKUP_REQ:
		if (nfs_lookup_reply(pkt, len)) {
c7e29634:	e1a01002 	mov	r1, r2
c7e29638:	ebfffd73 	bl	c7e28c0c <nfs_lookup_reply>
c7e2963c:	e3500000 	cmp	r0, #0	; 0x0
c7e29640:	e59f40d0 	ldr	r4, [pc, #208]	; c7e29718 <NfsHandler+0x1ac>
			puts("*** ERROR: File lookup fail\n");
c7e29644:	159f00e4 	ldrne	r0, [pc, #228]	; c7e29730 <NfsHandler+0x1c4>
			net_set_state(nfs_download_state);
		}
		break;

	case STATE_LOOKUP_REQ:
		if (nfs_lookup_reply(pkt, len)) {
c7e29648:	1a00000b 	bne	c7e2967c <NfsHandler+0x110>
			puts("*** ERROR: File lookup fail\n");
			NfsState = STATE_UMOUNT_REQ;
			NfsSend();
		} else {
			NfsState = STATE_READ_REQ;
			nfs_offset = 0;
c7e2964c:	e59f30e0 	ldr	r3, [pc, #224]	; c7e29734 <NfsHandler+0x1c8>
c7e29650:	e5830000 	str	r0, [r3]
			nfs_len = NFS_READ_SIZE;
c7e29654:	e3a03b01 	mov	r3, #1024	; 0x400
c7e29658:	e5843064 	str	r3, [r4, #100]
		if (nfs_lookup_reply(pkt, len)) {
			puts("*** ERROR: File lookup fail\n");
			NfsState = STATE_UMOUNT_REQ;
			NfsSend();
		} else {
			NfsState = STATE_READ_REQ;
c7e2965c:	e3a03006 	mov	r3, #6	; 0x6
c7e29660:	ea000007 	b	c7e29684 <NfsHandler+0x118>
			NfsSend();
		}
		break;

	case STATE_READLINK_REQ:
		if (nfs_readlink_reply(pkt, len)) {
c7e29664:	e1a01002 	mov	r1, r2
c7e29668:	ebffff31 	bl	c7e29334 <nfs_readlink_reply>
c7e2966c:	e3500000 	cmp	r0, #0	; 0x0
c7e29670:	e59f40a0 	ldr	r4, [pc, #160]	; c7e29718 <NfsHandler+0x1ac>
c7e29674:	0a000004 	beq	c7e2968c <NfsHandler+0x120>
			puts("*** ERROR: Symlink fail\n");
c7e29678:	e59f00b8 	ldr	r0, [pc, #184]	; c7e29738 <NfsHandler+0x1cc>
c7e2967c:	ebff7cda 	bl	c7e089ec <puts>
			NfsState = STATE_UMOUNT_REQ;
c7e29680:	e3a03004 	mov	r3, #4	; 0x4
c7e29684:	e5843058 	str	r3, [r4, #88]
c7e29688:	ea00001f 	b	c7e2970c <NfsHandler+0x1a0>
			NfsSend();
		} else {
			debug("Symlink --> %s\n", nfs_path);
			nfs_filename = basename(nfs_path);
c7e2968c:	e594005c 	ldr	r0, [r4, #92]
c7e29690:	ebfffca2 	bl	c7e28920 <basename>
c7e29694:	e5840060 	str	r0, [r4, #96]
			nfs_path     = dirname(nfs_path);
c7e29698:	e594005c 	ldr	r0, [r4, #92]
c7e2969c:	ebfffcae 	bl	c7e2895c <dirname>

			NfsState = STATE_MOUNT_REQ;
c7e296a0:	e3a03003 	mov	r3, #3	; 0x3
c7e296a4:	e5843058 	str	r3, [r4, #88]
			NfsState = STATE_UMOUNT_REQ;
			NfsSend();
		} else {
			debug("Symlink --> %s\n", nfs_path);
			nfs_filename = basename(nfs_path);
			nfs_path     = dirname(nfs_path);
c7e296a8:	e584005c 	str	r0, [r4, #92]
c7e296ac:	ea000016 	b	c7e2970c <NfsHandler+0x1a0>
			NfsSend();
		}
		break;

	case STATE_READ_REQ:
		rlen = nfs_read_reply(pkt, len);
c7e296b0:	e1a01002 	mov	r1, r2
c7e296b4:	ebffff5b 	bl	c7e29428 <nfs_read_reply>
		NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
c7e296b8:	e59f107c 	ldr	r1, [pc, #124]	; c7e2973c <NfsHandler+0x1d0>
			NfsSend();
		}
		break;

	case STATE_READ_REQ:
		rlen = nfs_read_reply(pkt, len);
c7e296bc:	e1a04000 	mov	r4, r0
		NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
c7e296c0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
c7e296c4:	ebfff97d 	bl	c7e27cc0 <NetSetTimeout>
		if (rlen > 0) {
c7e296c8:	e3540000 	cmp	r4, #0	; 0x0
			nfs_offset += rlen;
c7e296cc:	c59f2060 	ldrgt	r2, [pc, #96]	; c7e29734 <NfsHandler+0x1c8>
c7e296d0:	c5923000 	ldrgt	r3, [r2]
c7e296d4:	c0843003 	addgt	r3, r4, r3
c7e296d8:	c5823000 	strgt	r3, [r2]
c7e296dc:	ca00000a 	bgt	c7e2970c <NfsHandler+0x1a0>
			NfsSend();
		} else if ((rlen == -NFSERR_ISDIR) || (rlen == -NFSERR_INVAL)) {
c7e296e0:	e2843016 	add	r3, r4, #22	; 0x16
c7e296e4:	e3530001 	cmp	r3, #1	; 0x1
			/* symbolic link */
			NfsState = STATE_READLINK_REQ;
c7e296e8:	93a02007 	movls	r2, #7	; 0x7
		rlen = nfs_read_reply(pkt, len);
		NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
		if (rlen > 0) {
			nfs_offset += rlen;
			NfsSend();
		} else if ((rlen == -NFSERR_ISDIR) || (rlen == -NFSERR_INVAL)) {
c7e296ec:	9a000004 	bls	c7e29704 <NfsHandler+0x198>
			/* symbolic link */
			NfsState = STATE_READLINK_REQ;
			NfsSend();
		} else {
			if (!rlen)
c7e296f0:	e3540000 	cmp	r4, #0	; 0x0
				nfs_download_state = NETLOOP_SUCCESS;
c7e296f4:	059f301c 	ldreq	r3, [pc, #28]	; c7e29718 <NfsHandler+0x1ac>
c7e296f8:	03a02002 	moveq	r2, #2	; 0x2
c7e296fc:	05832068 	streq	r2, [r3, #104]
			NfsState = STATE_UMOUNT_REQ;
c7e29700:	e3a02004 	mov	r2, #4	; 0x4
c7e29704:	e59f300c 	ldr	r3, [pc, #12]	; c7e29718 <NfsHandler+0x1ac>
c7e29708:	e5832058 	str	r2, [r3, #88]
			NfsSend();
		}
		break;
	}
}
c7e2970c:	e8bd4010 	pop	{r4, lr}
			NfsSend();
		} else {
			if (!rlen)
				nfs_download_state = NETLOOP_SUCCESS;
			NfsState = STATE_UMOUNT_REQ;
			NfsSend();
c7e29710:	eafffe57 	b	c7e29074 <NfsSend>
c7e29714:	e8bd8010 	pop	{r4, pc}
c7e29718:	c7e74958 	.word	0xc7e74958
c7e2971c:	000186a5 	.word	0x000186a5
c7e29720:	000186a3 	.word	0x000186a3
c7e29724:	c7e34f62 	.word	0xc7e34f62
c7e29728:	c7e34f7b 	.word	0xc7e34f7b
c7e2972c:	c7e34f95 	.word	0xc7e34f95
c7e29730:	c7e34f9c 	.word	0xc7e34f9c
c7e29734:	c7e3a4dc 	.word	0xc7e3a4dc
c7e29738:	c7e34fb9 	.word	0xc7e34fb9
c7e2973c:	c7e29740 	.word	0xc7e29740

c7e29740 <NfsTimeout>:
**************************************************************************/

static void
NfsTimeout(void)
{
	if (++NfsTimeoutCount > NFS_RETRY_COUNT) {
c7e29740:	e59f2040 	ldr	r2, [pc, #64]	; c7e29788 <NfsTimeout+0x48>
Interfaces of U-BOOT
**************************************************************************/

static void
NfsTimeout(void)
{
c7e29744:	e92d4010 	push	{r4, lr}
	if (++NfsTimeoutCount > NFS_RETRY_COUNT) {
c7e29748:	e59238ac 	ldr	r3, [r2, #2220]
c7e2974c:	e2833001 	add	r3, r3, #1	; 0x1
c7e29750:	e353001e 	cmp	r3, #30	; 0x1e
c7e29754:	e58238ac 	str	r3, [r2, #2220]
c7e29758:	da000003 	ble	c7e2976c <NfsTimeout+0x2c>
		puts("\nRetry count exceeded; starting again\n");
c7e2975c:	e59f0028 	ldr	r0, [pc, #40]	; c7e2978c <NfsTimeout+0x4c>
c7e29760:	ebff7ca1 	bl	c7e089ec <puts>
	} else {
		puts("T ");
		NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
		NfsSend();
	}
}
c7e29764:	e8bd4010 	pop	{r4, lr}
static void
NfsTimeout(void)
{
	if (++NfsTimeoutCount > NFS_RETRY_COUNT) {
		puts("\nRetry count exceeded; starting again\n");
		NetStartAgain();
c7e29768:	eafffaf0 	b	c7e28330 <NetStartAgain>
	} else {
		puts("T ");
c7e2976c:	e59f001c 	ldr	r0, [pc, #28]	; c7e29790 <NfsTimeout+0x50>
c7e29770:	ebff7c9d 	bl	c7e089ec <puts>
		NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
c7e29774:	e3a00e7d 	mov	r0, #2000	; 0x7d0
c7e29778:	e59f1014 	ldr	r1, [pc, #20]	; c7e29794 <NfsTimeout+0x54>
c7e2977c:	ebfff94f 	bl	c7e27cc0 <NetSetTimeout>
		NfsSend();
	}
}
c7e29780:	e8bd4010 	pop	{r4, lr}
		puts("\nRetry count exceeded; starting again\n");
		NetStartAgain();
	} else {
		puts("T ");
		NetSetTimeout(NFS_TIMEOUT, NfsTimeout);
		NfsSend();
c7e29784:	eafffe3a 	b	c7e29074 <NfsSend>
c7e29788:	c7e74958 	.word	0xc7e74958
c7e2978c:	c7e34b5c 	.word	0xc7e34b5c
c7e29790:	c7e34fd2 	.word	0xc7e34fd2
c7e29794:	c7e29740 	.word	0xc7e29740

c7e29798 <net_set_state>:
static inline void net_set_state(enum net_loop_state state)
{
	extern enum net_loop_state net_state;

	debug_cond(DEBUG_INT_STATE, "--- NetState set to %d\n", state);
	net_state = state;
c7e29798:	e59f3004 	ldr	r3, [pc, #4]	; c7e297a4 <net_set_state+0xc>
c7e2979c:	e5830000 	str	r0, [r3]
}
c7e297a0:	e12fff1e 	bx	lr
c7e297a4:	c7e7299c 	.word	0xc7e7299c

c7e297a8 <NetCopyIP>:
}

/* copy IP */
static inline void NetCopyIP(void *to, void *from)
{
	memcpy((void *)to, from, sizeof(IPaddr_t));
c7e297a8:	e3a02004 	mov	r2, #4	; 0x4
c7e297ac:	eaffe522 	b	c7e22c3c <memcpy>

c7e297b0 <ping_receive>:

	ping_send();
}

void ping_receive(struct ethernet_hdr *et, struct ip_udp_hdr *ip, int len)
{
c7e297b0:	e92d4ef3 	push	{r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
	struct icmp_hdr *icmph = (struct icmp_hdr *)&ip->udp_src;
	IPaddr_t src_ip;
	int eth_hdr_size;

	switch (icmph->type) {
c7e297b4:	e5d13014 	ldrb	r3, [r1, #20]

	ping_send();
}

void ping_receive(struct ethernet_hdr *et, struct ip_udp_hdr *ip, int len)
{
c7e297b8:	e1a07001 	mov	r7, r1
	struct icmp_hdr *icmph = (struct icmp_hdr *)&ip->udp_src;
	IPaddr_t src_ip;
	int eth_hdr_size;

	switch (icmph->type) {
c7e297bc:	e3530000 	cmp	r3, #0	; 0x0

	ping_send();
}

void ping_receive(struct ethernet_hdr *et, struct ip_udp_hdr *ip, int len)
{
c7e297c0:	e1a0b002 	mov	fp, r2
c7e297c4:	e1a09000 	mov	r9, r0
	struct icmp_hdr *icmph = (struct icmp_hdr *)&ip->udp_src;
c7e297c8:	e281a014 	add	sl, r1, #20	; 0x14
	IPaddr_t src_ip;
	int eth_hdr_size;

	switch (icmph->type) {
c7e297cc:	0a000002 	beq	c7e297dc <ping_receive+0x2c>
c7e297d0:	e3530008 	cmp	r3, #8	; 0x8
c7e297d4:	1a00002a 	bne	c7e29884 <ping_receive+0xd4>
c7e297d8:	ea00000b 	b	c7e2980c <ping_receive+0x5c>
/* return IP *in network byteorder* */
static inline IPaddr_t NetReadIP(void *from)
{
	IPaddr_t ip;

	memcpy((void *)&ip, (void *)from, sizeof(ip));
c7e297dc:	e3a02004 	mov	r2, #4	; 0x4
c7e297e0:	e281100c 	add	r1, r1, #12	; 0xc
c7e297e4:	e28d0004 	add	r0, sp, #4	; 0x4
c7e297e8:	ebffe513 	bl	c7e22c3c <memcpy>
	case ICMP_ECHO_REPLY:
		src_ip = NetReadIP((void *)&ip->ip_src);
		if (src_ip == NetPingIP)
c7e297ec:	e59f3094 	ldr	r3, [pc, #148]	; c7e29888 <ping_receive+0xd8>
c7e297f0:	e5932000 	ldr	r2, [r3]
c7e297f4:	e59d3004 	ldr	r3, [sp, #4]
c7e297f8:	e1530002 	cmp	r3, r2
c7e297fc:	1a000020 	bne	c7e29884 <ping_receive+0xd4>
			net_set_state(NETLOOP_SUCCESS);
c7e29800:	e3a00002 	mov	r0, #2	; 0x2
c7e29804:	ebffffe3 	bl	c7e29798 <net_set_state>
c7e29808:	ea00001d 	b	c7e29884 <ping_receive+0xd4>
		return;
	case ICMP_ECHO_REQUEST:
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_IP);
c7e2980c:	e3a02b02 	mov	r2, #2048	; 0x800
c7e29810:	e2801006 	add	r1, r0, #6	; 0x6
c7e29814:	ebfff98f 	bl	c7e27e58 <net_update_ether>

		debug_cond(DEBUG_DEV_PKT, "Got ICMP ECHO REQUEST, return "
			"%d bytes\n", eth_hdr_size + len);

		ip->ip_sum = 0;
c7e29818:	e3a04000 	mov	r4, #0	; 0x0
		ip->ip_off = 0;
		NetCopyIP((void *)&ip->ip_dst, &ip->ip_src);
c7e2981c:	e287500c 	add	r5, r7, #12	; 0xc
		src_ip = NetReadIP((void *)&ip->ip_src);
		if (src_ip == NetPingIP)
			net_set_state(NETLOOP_SUCCESS);
		return;
	case ICMP_ECHO_REQUEST:
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_IP);
c7e29820:	e1a06000 	mov	r6, r0
		debug_cond(DEBUG_DEV_PKT, "Got ICMP ECHO REQUEST, return "
			"%d bytes\n", eth_hdr_size + len);

		ip->ip_sum = 0;
		ip->ip_off = 0;
		NetCopyIP((void *)&ip->ip_dst, &ip->ip_src);
c7e29824:	e1a01005 	mov	r1, r5
c7e29828:	e2870010 	add	r0, r7, #16	; 0x10
		eth_hdr_size = net_update_ether(et, et->et_src, PROT_IP);

		debug_cond(DEBUG_DEV_PKT, "Got ICMP ECHO REQUEST, return "
			"%d bytes\n", eth_hdr_size + len);

		ip->ip_sum = 0;
c7e2982c:	e1c740ba 	strh	r4, [r7, #10]
		ip->ip_off = 0;
c7e29830:	e1c740b6 	strh	r4, [r7, #6]
		NetCopyIP((void *)&ip->ip_dst, &ip->ip_src);
c7e29834:	ebffffdb 	bl	c7e297a8 <NetCopyIP>
		NetCopyIP((void *)&ip->ip_src, &NetOurIP);
c7e29838:	e1a00005 	mov	r0, r5
c7e2983c:	e59f1048 	ldr	r1, [pc, #72]	; c7e2988c <ping_receive+0xdc>
c7e29840:	ebffffd8 	bl	c7e297a8 <NetCopyIP>
		ip->ip_sum = ~NetCksum((uchar *)ip,
c7e29844:	e3a0100a 	mov	r1, #10	; 0xa
c7e29848:	e1a00007 	mov	r0, r7
c7e2984c:	ebfff891 	bl	c7e27a98 <NetCksum>
				       IP_HDR_SIZE >> 1);

		icmph->type = ICMP_ECHO_REPLY;
		icmph->checksum = 0;
		icmph->checksum = ~NetCksum((uchar *)icmph,
c7e29850:	e24b1014 	sub	r1, fp, #20	; 0x14

		ip->ip_sum = 0;
		ip->ip_off = 0;
		NetCopyIP((void *)&ip->ip_dst, &ip->ip_src);
		NetCopyIP((void *)&ip->ip_src, &NetOurIP);
		ip->ip_sum = ~NetCksum((uchar *)ip,
c7e29854:	e1e00000 	mvn	r0, r0
c7e29858:	e1c700ba 	strh	r0, [r7, #10]
				       IP_HDR_SIZE >> 1);

		icmph->type = ICMP_ECHO_REPLY;
		icmph->checksum = 0;
		icmph->checksum = ~NetCksum((uchar *)icmph,
c7e2985c:	e1a010a1 	lsr	r1, r1, #1
		NetCopyIP((void *)&ip->ip_dst, &ip->ip_src);
		NetCopyIP((void *)&ip->ip_src, &NetOurIP);
		ip->ip_sum = ~NetCksum((uchar *)ip,
				       IP_HDR_SIZE >> 1);

		icmph->type = ICMP_ECHO_REPLY;
c7e29860:	e5c74014 	strb	r4, [r7, #20]
		icmph->checksum = 0;
c7e29864:	e1ca40b2 	strh	r4, [sl, #2]
		icmph->checksum = ~NetCksum((uchar *)icmph,
c7e29868:	e1a0000a 	mov	r0, sl
c7e2986c:	ebfff889 	bl	c7e27a98 <NetCksum>
c7e29870:	e1e00000 	mvn	r0, r0
c7e29874:	e1ca00b2 	strh	r0, [sl, #2]
}

/* Transmit a packet */
static inline void NetSendPacket(uchar *pkt, int len)
{
	(void) eth_send(pkt, len);
c7e29878:	e086100b 	add	r1, r6, fp
c7e2987c:	e1a00009 	mov	r0, r9
c7e29880:	ebfff638 	bl	c7e27168 <eth_send>
		NetSendPacket((uchar *)et, eth_hdr_size + len);
		return;
/*	default:
		return;*/
	}
}
c7e29884:	e8bd8efc 	pop	{r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
c7e29888:	c7e75208 	.word	0xc7e75208
c7e2988c:	c7e729b8 	.word	0xc7e729b8

c7e29890 <ping_start>:
	eth_halt();
	net_set_state(NETLOOP_FAIL);	/* we did not get the reply */
}

void ping_start(void)
{
c7e29890:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	printf("Using %s device\n", eth_get_name());
c7e29894:	ebfff64b 	bl	c7e271c8 <eth_get_name>

	/* XXX always send arp request */

	debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &NetPingIP);

	NetArpWaitPacketIP = NetPingIP;
c7e29898:	e59fa0ec 	ldr	sl, [pc, #236]	; c7e2998c <ping_start+0xfc>
	net_set_state(NETLOOP_FAIL);	/* we did not get the reply */
}

void ping_start(void)
{
	printf("Using %s device\n", eth_get_name());
c7e2989c:	e1a01000 	mov	r1, r0
c7e298a0:	e59f00e8 	ldr	r0, [pc, #232]	; c7e29990 <ping_start+0x100>
c7e298a4:	ebff7c6b 	bl	c7e08a58 <printf>
	NetSetTimeout(10000UL, ping_timeout);
c7e298a8:	e59f00e4 	ldr	r0, [pc, #228]	; c7e29994 <ping_start+0x104>
c7e298ac:	e59f10e4 	ldr	r1, [pc, #228]	; c7e29998 <ping_start+0x108>
c7e298b0:	ebfff902 	bl	c7e27cc0 <NetSetTimeout>

	debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &NetPingIP);

	NetArpWaitPacketIP = NetPingIP;

	eth_hdr_size = NetSetEther(NetTxPacket, NetEtherNullAddr, PROT_IP);
c7e298b4:	e59f40e0 	ldr	r4, [pc, #224]	; c7e2999c <ping_start+0x10c>

	/* XXX always send arp request */

	debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &NetPingIP);

	NetArpWaitPacketIP = NetPingIP;
c7e298b8:	e59ac000 	ldr	ip, [sl]
c7e298bc:	e59f30dc 	ldr	r3, [pc, #220]	; c7e299a0 <ping_start+0x110>

	eth_hdr_size = NetSetEther(NetTxPacket, NetEtherNullAddr, PROT_IP);
c7e298c0:	e59f10dc 	ldr	r1, [pc, #220]	; c7e299a4 <ping_start+0x114>

	/* XXX always send arp request */

	debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &NetPingIP);

	NetArpWaitPacketIP = NetPingIP;
c7e298c4:	e583c000 	str	ip, [r3]

	eth_hdr_size = NetSetEther(NetTxPacket, NetEtherNullAddr, PROT_IP);
c7e298c8:	e3a02b02 	mov	r2, #2048	; 0x800
c7e298cc:	e5940000 	ldr	r0, [r4]
c7e298d0:	ebfff984 	bl	c7e27ee8 <NetSetEther>
	pkt = (uchar *)NetTxPacket + eth_hdr_size;
c7e298d4:	e5944000 	ldr	r4, [r4]
	 *	Construct an IP and ICMP header.
	 */
	struct ip_hdr *ip = (struct ip_hdr *)pkt;
	struct icmp_hdr *icmp = (struct icmp_hdr *)(pkt + IP_HDR_SIZE);

	net_set_ip_header(pkt, dest, NetOurIP);
c7e298d8:	e59f30c8 	ldr	r3, [pc, #200]	; c7e299a8 <ping_start+0x118>
	debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &NetPingIP);

	NetArpWaitPacketIP = NetPingIP;

	eth_hdr_size = NetSetEther(NetTxPacket, NetEtherNullAddr, PROT_IP);
	pkt = (uchar *)NetTxPacket + eth_hdr_size;
c7e298dc:	e0844000 	add	r4, r4, r0
	 *	Construct an IP and ICMP header.
	 */
	struct ip_hdr *ip = (struct ip_hdr *)pkt;
	struct icmp_hdr *icmp = (struct icmp_hdr *)(pkt + IP_HDR_SIZE);

	net_set_ip_header(pkt, dest, NetOurIP);
c7e298e0:	e5932000 	ldr	r2, [r3]
c7e298e4:	e59a1000 	ldr	r1, [sl]

	debug_cond(DEBUG_DEV_PKT, "sending ARP for %pI4\n", &NetPingIP);

	NetArpWaitPacketIP = NetPingIP;

	eth_hdr_size = NetSetEther(NetTxPacket, NetEtherNullAddr, PROT_IP);
c7e298e8:	e1a07000 	mov	r7, r0
	 *	Construct an IP and ICMP header.
	 */
	struct ip_hdr *ip = (struct ip_hdr *)pkt;
	struct icmp_hdr *icmp = (struct icmp_hdr *)(pkt + IP_HDR_SIZE);

	net_set_ip_header(pkt, dest, NetOurIP);
c7e298ec:	e1a00004 	mov	r0, r4
c7e298f0:	ebfff90e 	bl	c7e27d30 <net_set_ip_header>

	ip->ip_len   = htons(IP_ICMP_HDR_SIZE);
	ip->ip_p     = IPPROTO_ICMP;
c7e298f4:	e3a09001 	mov	r9, #1	; 0x1
	struct ip_hdr *ip = (struct ip_hdr *)pkt;
	struct icmp_hdr *icmp = (struct icmp_hdr *)(pkt + IP_HDR_SIZE);

	net_set_ip_header(pkt, dest, NetOurIP);

	ip->ip_len   = htons(IP_ICMP_HDR_SIZE);
c7e298f8:	e3a03b07 	mov	r3, #7168	; 0x1c00
c7e298fc:	e1c430b2 	strh	r3, [r4, #2]
	ip->ip_p     = IPPROTO_ICMP;
c7e29900:	e5c49009 	strb	r9, [r4, #9]
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);
c7e29904:	e3a0100a 	mov	r1, #10	; 0xa
c7e29908:	e1a00004 	mov	r0, r4
c7e2990c:	ebfff861 	bl	c7e27a98 <NetCksum>
{
	/*
	 *	Construct an IP and ICMP header.
	 */
	struct ip_hdr *ip = (struct ip_hdr *)pkt;
	struct icmp_hdr *icmp = (struct icmp_hdr *)(pkt + IP_HDR_SIZE);
c7e29910:	e2845014 	add	r5, r4, #20	; 0x14
	ip->ip_len   = htons(IP_ICMP_HDR_SIZE);
	ip->ip_p     = IPPROTO_ICMP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);

	icmp->type = ICMP_ECHO_REQUEST;
	icmp->code = 0;
c7e29914:	e3a06000 	mov	r6, #0	; 0x0

	net_set_ip_header(pkt, dest, NetOurIP);

	ip->ip_len   = htons(IP_ICMP_HDR_SIZE);
	ip->ip_p     = IPPROTO_ICMP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);
c7e29918:	e1e00000 	mvn	r0, r0

	icmp->type = ICMP_ECHO_REQUEST;
c7e2991c:	e3a03008 	mov	r3, #8	; 0x8

	net_set_ip_header(pkt, dest, NetOurIP);

	ip->ip_len   = htons(IP_ICMP_HDR_SIZE);
	ip->ip_p     = IPPROTO_ICMP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);
c7e29920:	e1c400ba 	strh	r0, [r4, #10]

	icmp->type = ICMP_ECHO_REQUEST;
c7e29924:	e5c43014 	strb	r3, [r4, #20]
	icmp->code = 0;
c7e29928:	e5c56001 	strb	r6, [r5, #1]
	icmp->checksum = 0;
	icmp->un.echo.id = 0;
c7e2992c:	e1c560b4 	strh	r6, [r5, #4]
	icmp->un.echo.sequence = htons(PingSeqNo++);
c7e29930:	e1da30b4 	ldrh	r3, [sl, #4]
	icmp->checksum = ~NetCksum((uchar *)icmp, ICMP_HDR_SIZE	>> 1);
c7e29934:	e3a01004 	mov	r1, #4	; 0x4

	icmp->type = ICMP_ECHO_REQUEST;
	icmp->code = 0;
	icmp->checksum = 0;
	icmp->un.echo.id = 0;
	icmp->un.echo.sequence = htons(PingSeqNo++);
c7e29938:	e1a02423 	lsr	r2, r3, #8
c7e2993c:	e1822403 	orr	r2, r2, r3, lsl #8
c7e29940:	e0833009 	add	r3, r3, r9
	ip->ip_p     = IPPROTO_ICMP;
	ip->ip_sum   = ~NetCksum((uchar *)ip, IP_HDR_SIZE >> 1);

	icmp->type = ICMP_ECHO_REQUEST;
	icmp->code = 0;
	icmp->checksum = 0;
c7e29944:	e1c560b2 	strh	r6, [r5, #2]
	icmp->un.echo.id = 0;
	icmp->un.echo.sequence = htons(PingSeqNo++);
	icmp->checksum = ~NetCksum((uchar *)icmp, ICMP_HDR_SIZE	>> 1);
c7e29948:	e1a00005 	mov	r0, r5

	icmp->type = ICMP_ECHO_REQUEST;
	icmp->code = 0;
	icmp->checksum = 0;
	icmp->un.echo.id = 0;
	icmp->un.echo.sequence = htons(PingSeqNo++);
c7e2994c:	e1ca30b4 	strh	r3, [sl, #4]
c7e29950:	e1c520b6 	strh	r2, [r5, #6]
	icmp->checksum = ~NetCksum((uchar *)icmp, ICMP_HDR_SIZE	>> 1);
c7e29954:	ebfff84f 	bl	c7e27a98 <NetCksum>
	pkt = (uchar *)NetTxPacket + eth_hdr_size;

	set_icmp_header(pkt, NetPingIP);

	/* size of the waiting packet */
	NetArpWaitTxPacketSize = eth_hdr_size + IP_ICMP_HDR_SIZE;
c7e29958:	e59f304c 	ldr	r3, [pc, #76]	; c7e299ac <ping_start+0x11c>
c7e2995c:	e287701c 	add	r7, r7, #28	; 0x1c
c7e29960:	e5837000 	str	r7, [r3]

	/* and do the ARP request */
	NetArpWaitTry = 1;
c7e29964:	e59f3044 	ldr	r3, [pc, #68]	; c7e299b0 <ping_start+0x120>
	icmp->type = ICMP_ECHO_REQUEST;
	icmp->code = 0;
	icmp->checksum = 0;
	icmp->un.echo.id = 0;
	icmp->un.echo.sequence = htons(PingSeqNo++);
	icmp->checksum = ~NetCksum((uchar *)icmp, ICMP_HDR_SIZE	>> 1);
c7e29968:	e1e00000 	mvn	r0, r0
c7e2996c:	e1c500b2 	strh	r0, [r5, #2]

	/* size of the waiting packet */
	NetArpWaitTxPacketSize = eth_hdr_size + IP_ICMP_HDR_SIZE;

	/* and do the ARP request */
	NetArpWaitTry = 1;
c7e29970:	e5839000 	str	r9, [r3]
	NetArpWaitTimerStart = get_timer(0);
c7e29974:	e1a00006 	mov	r0, r6
c7e29978:	ebff5c20 	bl	c7e00a00 <get_timer>
c7e2997c:	e59f3030 	ldr	r3, [pc, #48]	; c7e299b4 <ping_start+0x124>
c7e29980:	e5830000 	str	r0, [r3]
{
	printf("Using %s device\n", eth_get_name());
	NetSetTimeout(10000UL, ping_timeout);

	ping_send();
}
c7e29984:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	NetArpWaitTxPacketSize = eth_hdr_size + IP_ICMP_HDR_SIZE;

	/* and do the ARP request */
	NetArpWaitTry = 1;
	NetArpWaitTimerStart = get_timer(0);
	ArpRequest();
c7e29988:	eafff419 	b	c7e269f4 <ArpRequest>
c7e2998c:	c7e75208 	.word	0xc7e75208
c7e29990:	c7e34ea4 	.word	0xc7e34ea4
c7e29994:	00002710 	.word	0x00002710
c7e29998:	c7e299b8 	.word	0xc7e299b8
c7e2999c:	c7e729cc 	.word	0xc7e729cc
c7e299a0:	c7e72324 	.word	0xc7e72324
c7e299a4:	c7e729d0 	.word	0xc7e729d0
c7e299a8:	c7e729b8 	.word	0xc7e729b8
c7e299ac:	c7e7232c 	.word	0xc7e7232c
c7e299b0:	c7e72978 	.word	0xc7e72978
c7e299b4:	c7e72974 	.word	0xc7e72974

c7e299b8 <ping_timeout>:
	return 1;	/* waiting */
}

static void ping_timeout(void)
{
c7e299b8:	e92d4010 	push	{r4, lr}
	eth_halt();
c7e299bc:	ebfff5dc 	bl	c7e27134 <eth_halt>
	net_set_state(NETLOOP_FAIL);	/* we did not get the reply */
c7e299c0:	e3a00003 	mov	r0, #3	; 0x3
}
c7e299c4:	e8bd4010 	pop	{r4, lr}
}

static void ping_timeout(void)
{
	eth_halt();
	net_set_state(NETLOOP_FAIL);	/* we did not get the reply */
c7e299c8:	eaffff72 	b	c7e29798 <net_set_state>

c7e299cc <__fswab16>:
#  define __swab64(x) __fswab64(x)
#endif /* OPTIMIZE */


static __inline__ __attribute__((const)) __u16 __fswab16(__u16 x)
{
c7e299cc:	e1a03420 	lsr	r3, r0, #8
c7e299d0:	e1833400 	orr	r3, r3, r0, lsl #8
c7e299d4:	e1a03803 	lsl	r3, r3, #16
	return __arch__swab16(x);
}
c7e299d8:	e1a00823 	lsr	r0, r3, #16
c7e299dc:	e12fff1e 	bx	lr

c7e299e0 <net_set_state>:
static inline void net_set_state(enum net_loop_state state)
{
	extern enum net_loop_state net_state;

	debug_cond(DEBUG_INT_STATE, "--- NetState set to %d\n", state);
	net_state = state;
c7e299e0:	e59f3004 	ldr	r3, [pc, #4]	; c7e299ec <net_set_state+0xc>
c7e299e4:	e5830000 	str	r0, [r3]
}
c7e299e8:	e12fff1e 	bx	lr
c7e299ec:	c7e7299c 	.word	0xc7e7299c

c7e299f0 <TftpSend>:
#endif
	/*
	 *	We will always be sending some sort of packet, so
	 *	cobble together the packet headers now.
	 */
	pkt = NetTxPacket + NetEthHdrSize() + IP_UDP_HDR_SIZE;
c7e299f0:	e59f3164 	ldr	r3, [pc, #356]	; c7e29b5c <TftpSend+0x16c>
	net_set_state(NETLOOP_SUCCESS);
}

static void
TftpSend(void)
{
c7e299f4:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
#endif
	/*
	 *	We will always be sending some sort of packet, so
	 *	cobble together the packet headers now.
	 */
	pkt = NetTxPacket + NetEthHdrSize() + IP_UDP_HDR_SIZE;
c7e299f8:	e5935000 	ldr	r5, [r3]
c7e299fc:	ebfff86d 	bl	c7e27bb8 <NetEthHdrSize>

	switch (TftpState) {
c7e29a00:	e59f2158 	ldr	r2, [pc, #344]	; c7e29b60 <TftpSend+0x170>
#endif
	/*
	 *	We will always be sending some sort of packet, so
	 *	cobble together the packet headers now.
	 */
	pkt = NetTxPacket + NetEthHdrSize() + IP_UDP_HDR_SIZE;
c7e29a04:	e280001c 	add	r0, r0, #28	; 0x1c

	switch (TftpState) {
c7e29a08:	e5923000 	ldr	r3, [r2]
#endif
	/*
	 *	We will always be sending some sort of packet, so
	 *	cobble together the packet headers now.
	 */
	pkt = NetTxPacket + NetEthHdrSize() + IP_UDP_HDR_SIZE;
c7e29a0c:	e0856000 	add	r6, r5, r0

	switch (TftpState) {
c7e29a10:	e2433001 	sub	r3, r3, #1	; 0x1
c7e29a14:	e3530006 	cmp	r3, #6	; 0x6
c7e29a18:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c7e29a1c:	ea000006 	b	c7e29a3c <TftpSend+0x4c>
c7e29a20:	c7e29a44 	.word	0xc7e29a44
c7e29a24:	c7e29ae0 	.word	0xc7e29ae0
c7e29a28:	c7e29afc 	.word	0xc7e29afc
c7e29a2c:	c7e29b20 	.word	0xc7e29b20
c7e29a30:	c7e29ae0 	.word	0xc7e29ae0
c7e29a34:	c7e29ae0 	.word	0xc7e29ae0
c7e29a38:	c7e29a44 	.word	0xc7e29a44
c7e29a3c:	e3a04000 	mov	r4, #0	; 0x0
c7e29a40:	ea00003e 	b	c7e29b40 <TftpSend+0x150>
		s = (ushort *)pkt;
#ifdef CONFIG_CMD_TFTPPUT
		*s++ = htons(TftpState == STATE_SEND_RRQ ? TFTP_RRQ :
			TFTP_WRQ);
#else
		*s++ = htons(TFTP_RRQ);
c7e29a44:	e3a03c01 	mov	r3, #256	; 0x100
#endif
		pkt = (uchar *)s;
c7e29a48:	e2864002 	add	r4, r6, #2	; 0x2
		s = (ushort *)pkt;
#ifdef CONFIG_CMD_TFTPPUT
		*s++ = htons(TftpState == STATE_SEND_RRQ ? TFTP_RRQ :
			TFTP_WRQ);
#else
		*s++ = htons(TFTP_RRQ);
c7e29a4c:	e18530b0 	strh	r3, [r5, r0]
#endif
		pkt = (uchar *)s;
		strcpy((char *)pkt, tftp_filename);
c7e29a50:	e59f110c 	ldr	r1, [pc, #268]	; c7e29b64 <TftpSend+0x174>
c7e29a54:	e1a00004 	mov	r0, r4
c7e29a58:	ebffe349 	bl	c7e22784 <strcpy>
		pkt += strlen(tftp_filename) + 1;
c7e29a5c:	e59f0100 	ldr	r0, [pc, #256]	; c7e29b64 <TftpSend+0x174>
c7e29a60:	ebffe3b4 	bl	c7e22938 <strlen>
c7e29a64:	e2800001 	add	r0, r0, #1	; 0x1
c7e29a68:	e0844000 	add	r4, r4, r0
		strcpy((char *)pkt, "octet");
c7e29a6c:	e59f10f4 	ldr	r1, [pc, #244]	; c7e29b68 <TftpSend+0x178>
		pkt += 5 /*strlen("octet")*/ + 1;
		strcpy((char *)pkt, "timeout");
		pkt += 7 /*strlen("timeout")*/ + 1;
		sprintf((char *)pkt, "%lu", TftpTimeoutMSecs / 1000);
c7e29a70:	e59f50f4 	ldr	r5, [pc, #244]	; c7e29b6c <TftpSend+0x17c>
		*s++ = htons(TFTP_RRQ);
#endif
		pkt = (uchar *)s;
		strcpy((char *)pkt, tftp_filename);
		pkt += strlen(tftp_filename) + 1;
		strcpy((char *)pkt, "octet");
c7e29a74:	e1a00004 	mov	r0, r4
c7e29a78:	ebffe341 	bl	c7e22784 <strcpy>
		pkt += 5 /*strlen("octet")*/ + 1;
		strcpy((char *)pkt, "timeout");
c7e29a7c:	e59f10ec 	ldr	r1, [pc, #236]	; c7e29b70 <TftpSend+0x180>
c7e29a80:	e2840006 	add	r0, r4, #6	; 0x6
c7e29a84:	ebffe33e 	bl	c7e22784 <strcpy>
		pkt += 7 /*strlen("timeout")*/ + 1;
		sprintf((char *)pkt, "%lu", TftpTimeoutMSecs / 1000);
c7e29a88:	e5950000 	ldr	r0, [r5]
c7e29a8c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
c7e29a90:	eb00029c 	bl	c7e2a508 <__udivsi3>
		strcpy((char *)pkt, tftp_filename);
		pkt += strlen(tftp_filename) + 1;
		strcpy((char *)pkt, "octet");
		pkt += 5 /*strlen("octet")*/ + 1;
		strcpy((char *)pkt, "timeout");
		pkt += 7 /*strlen("timeout")*/ + 1;
c7e29a94:	e284400e 	add	r4, r4, #14	; 0xe
		sprintf((char *)pkt, "%lu", TftpTimeoutMSecs / 1000);
c7e29a98:	e1a02000 	mov	r2, r0
c7e29a9c:	e59f10d0 	ldr	r1, [pc, #208]	; c7e29b74 <TftpSend+0x184>
c7e29aa0:	e1a00004 	mov	r0, r4
c7e29aa4:	ebffe8e1 	bl	c7e23e30 <sprintf>
		debug("send option \"timeout %s\"\n", (char *)pkt);
		pkt += strlen((char *)pkt) + 1;
c7e29aa8:	e1a00004 	mov	r0, r4
c7e29aac:	ebffe3a1 	bl	c7e22938 <strlen>
c7e29ab0:	e2800001 	add	r0, r0, #1	; 0x1
#ifdef CONFIG_TFTP_TSIZE
		pkt += sprintf((char *)pkt, "tsize%c%lu%c",
				0, NetBootFileXferSize, 0);
#endif
		/* try for more effic. blk size */
		pkt += sprintf((char *)pkt, "blksize%c%d%c",
c7e29ab4:	e3a0c000 	mov	ip, #0	; 0x0
		pkt += 5 /*strlen("octet")*/ + 1;
		strcpy((char *)pkt, "timeout");
		pkt += 7 /*strlen("timeout")*/ + 1;
		sprintf((char *)pkt, "%lu", TftpTimeoutMSecs / 1000);
		debug("send option \"timeout %s\"\n", (char *)pkt);
		pkt += strlen((char *)pkt) + 1;
c7e29ab8:	e0844000 	add	r4, r4, r0
#ifdef CONFIG_TFTP_TSIZE
		pkt += sprintf((char *)pkt, "tsize%c%lu%c",
				0, NetBootFileXferSize, 0);
#endif
		/* try for more effic. blk size */
		pkt += sprintf((char *)pkt, "blksize%c%d%c",
c7e29abc:	e1d530b4 	ldrh	r3, [r5, #4]
c7e29ac0:	e1a00004 	mov	r0, r4
c7e29ac4:	e1a0200c 	mov	r2, ip
c7e29ac8:	e59f10a8 	ldr	r1, [pc, #168]	; c7e29b78 <TftpSend+0x188>
c7e29acc:	e58dc000 	str	ip, [sp]
c7e29ad0:	ebffe8d6 	bl	c7e23e30 <sprintf>
				pkt += sprintf((char *)pkt, "multicast%c%c",
					0, 0);
			}
		}
#endif /* CONFIG_MCAST_TFTP */
		len = pkt - xp;
c7e29ad4:	e0844000 	add	r4, r4, r0
c7e29ad8:	e0664004 	rsb	r4, r6, r4
c7e29adc:	ea000017 	b	c7e29b40 <TftpSend+0x150>

	case STATE_RECV_WRQ:
	case STATE_DATA:
		xp = pkt;
		s = (ushort *)pkt;
		s[0] = htons(TFTP_ACK);
c7e29ae0:	e3a03b01 	mov	r3, #1024	; 0x400
c7e29ae4:	e18530b0 	strh	r3, [r5, r0]
		s[1] = htons(TftpBlock);
c7e29ae8:	e1d208b4 	ldrh	r0, [r2, #132]
c7e29aec:	ebffffb6 	bl	c7e299cc <__fswab16>
c7e29af0:	e3a04004 	mov	r4, #4	; 0x4
c7e29af4:	e1c600b2 	strh	r0, [r6, #2]
c7e29af8:	ea000010 	b	c7e29b40 <TftpSend+0x150>
		break;

	case STATE_TOO_LARGE:
		xp = pkt;
		s = (ushort *)pkt;
		*s++ = htons(TFTP_ERROR);
c7e29afc:	e3a03c05 	mov	r3, #1280	; 0x500
c7e29b00:	e18530b0 	strh	r3, [r5, r0]
			*s++ = htons(3);
c7e29b04:	e3a03c03 	mov	r3, #768	; 0x300

		pkt = (uchar *)s;
		strcpy((char *)pkt, "File too large");
c7e29b08:	e2860004 	add	r0, r6, #4	; 0x4

	case STATE_TOO_LARGE:
		xp = pkt;
		s = (ushort *)pkt;
		*s++ = htons(TFTP_ERROR);
			*s++ = htons(3);
c7e29b0c:	e1c630b2 	strh	r3, [r6, #2]

		pkt = (uchar *)s;
		strcpy((char *)pkt, "File too large");
c7e29b10:	e59f1064 	ldr	r1, [pc, #100]	; c7e29b7c <TftpSend+0x18c>
c7e29b14:	ebffe31a 	bl	c7e22784 <strcpy>
c7e29b18:	e3a04013 	mov	r4, #19	; 0x13
c7e29b1c:	ea000007 	b	c7e29b40 <TftpSend+0x150>
		break;

	case STATE_BAD_MAGIC:
		xp = pkt;
		s = (ushort *)pkt;
		*s++ = htons(TFTP_ERROR);
c7e29b20:	e3a03c05 	mov	r3, #1280	; 0x500
c7e29b24:	e18530b0 	strh	r3, [r5, r0]
		*s++ = htons(2);
c7e29b28:	e3a03c02 	mov	r3, #512	; 0x200
		pkt = (uchar *)s;
		strcpy((char *)pkt, "File has bad magic");
c7e29b2c:	e2860004 	add	r0, r6, #4	; 0x4

	case STATE_BAD_MAGIC:
		xp = pkt;
		s = (ushort *)pkt;
		*s++ = htons(TFTP_ERROR);
		*s++ = htons(2);
c7e29b30:	e1c630b2 	strh	r3, [r6, #2]
		pkt = (uchar *)s;
		strcpy((char *)pkt, "File has bad magic");
c7e29b34:	e59f1044 	ldr	r1, [pc, #68]	; c7e29b80 <TftpSend+0x190>
c7e29b38:	ebffe311 	bl	c7e22784 <strcpy>
c7e29b3c:	e3a04017 	mov	r4, #23	; 0x17
		pkt += 18 /*strlen("File has bad magic")*/ + 1;
		len = pkt - xp;
		break;
	}

	NetSendUDPPacket(NetServerEther, TftpRemoteIP, TftpRemotePort,
c7e29b40:	e59f2018 	ldr	r2, [pc, #24]	; c7e29b60 <TftpSend+0x170>
c7e29b44:	e59f0038 	ldr	r0, [pc, #56]	; c7e29b84 <TftpSend+0x194>
c7e29b48:	e2821088 	add	r1, r2, #136	; 0x88
c7e29b4c:	e891000e 	ldm	r1, {r1, r2, r3}
c7e29b50:	e58d4000 	str	r4, [sp]
c7e29b54:	ebfff9b4 	bl	c7e2822c <NetSendUDPPacket>
			 TftpOurPort, len);
}
c7e29b58:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
c7e29b5c:	c7e729cc 	.word	0xc7e729cc
c7e29b60:	c7e75210 	.word	0xc7e75210
c7e29b64:	c7e75214 	.word	0xc7e75214
c7e29b68:	c7e34fd5 	.word	0xc7e34fd5
c7e29b6c:	c7e3a4e0 	.word	0xc7e3a4e0
c7e29b70:	c7e3501d 	.word	0xc7e3501d
c7e29b74:	c7e3468f 	.word	0xc7e3468f
c7e29b78:	c7e34fdb 	.word	0xc7e34fdb
c7e29b7c:	c7e34fe9 	.word	0xc7e34fe9
c7e29b80:	c7e34ff8 	.word	0xc7e34ff8
c7e29b84:	c7e748d2 	.word	0xc7e748d2

c7e29b88 <TftpStart>:
	}
}


void TftpStart(enum proto_t protocol)
{
c7e29b88:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}

	/*
	 * Allow the user to choose TFTP blocksize and timeout.
	 * TFTP protocol has a minimal timeout of 1 second.
	 */
	ep = getenv("tftpblocksize");
c7e29b8c:	e59f0270 	ldr	r0, [pc, #624]	; c7e29e04 <TftpStart+0x27c>
c7e29b90:	ebff7541 	bl	c7e0709c <getenv>
	if (ep != NULL)
c7e29b94:	e3500000 	cmp	r0, #0	; 0x0
c7e29b98:	0a000004 	beq	c7e29bb0 <TftpStart+0x28>
		TftpBlkSizeOption = simple_strtol(ep, NULL, 10);
c7e29b9c:	e3a01000 	mov	r1, #0	; 0x0
c7e29ba0:	e3a0200a 	mov	r2, #10	; 0xa
c7e29ba4:	ebffe51b 	bl	c7e23018 <simple_strtol>
c7e29ba8:	e59f3258 	ldr	r3, [pc, #600]	; c7e29e08 <TftpStart+0x280>
c7e29bac:	e1c300b4 	strh	r0, [r3, #4]

	ep = getenv("tftptimeout");
c7e29bb0:	e59f0254 	ldr	r0, [pc, #596]	; c7e29e0c <TftpStart+0x284>
c7e29bb4:	ebff7538 	bl	c7e0709c <getenv>
	if (ep != NULL)
c7e29bb8:	e3500000 	cmp	r0, #0	; 0x0
c7e29bbc:	0a000004 	beq	c7e29bd4 <TftpStart+0x4c>
		TftpTimeoutMSecs = simple_strtol(ep, NULL, 10);
c7e29bc0:	e3a01000 	mov	r1, #0	; 0x0
c7e29bc4:	e3a0200a 	mov	r2, #10	; 0xa
c7e29bc8:	ebffe512 	bl	c7e23018 <simple_strtol>
c7e29bcc:	e59f3234 	ldr	r3, [pc, #564]	; c7e29e08 <TftpStart+0x280>
c7e29bd0:	e5830000 	str	r0, [r3]

	if (TftpTimeoutMSecs < 1000) {
c7e29bd4:	e59f422c 	ldr	r4, [pc, #556]	; c7e29e08 <TftpStart+0x280>
c7e29bd8:	e5941000 	ldr	r1, [r4]
c7e29bdc:	e3510ffa 	cmp	r1, #1000	; 0x3e8
c7e29be0:	2a000003 	bcs	c7e29bf4 <TftpStart+0x6c>
		printf("TFTP timeout (%ld ms) too low, "
c7e29be4:	e59f0224 	ldr	r0, [pc, #548]	; c7e29e10 <TftpStart+0x288>
c7e29be8:	ebff7b9a 	bl	c7e08a58 <printf>
			"set minimum = 1000 ms\n",
			TftpTimeoutMSecs);
		TftpTimeoutMSecs = 1000;
c7e29bec:	e3a03ffa 	mov	r3, #1000	; 0x3e8
c7e29bf0:	e5843000 	str	r3, [r4]

	debug("TFTP blocksize = %i, timeout = %ld ms\n",
		TftpBlkSizeOption, TftpTimeoutMSecs);

	TftpRemoteIP = NetServerIP;
	if (BootFile[0] == '\0') {
c7e29bf4:	e59f5218 	ldr	r5, [pc, #536]	; c7e29e14 <TftpStart+0x28c>
	}

	debug("TFTP blocksize = %i, timeout = %ld ms\n",
		TftpBlkSizeOption, TftpTimeoutMSecs);

	TftpRemoteIP = NetServerIP;
c7e29bf8:	e59f3218 	ldr	r3, [pc, #536]	; c7e29e18 <TftpStart+0x290>
	if (BootFile[0] == '\0') {
c7e29bfc:	e5d56000 	ldrb	r6, [r5]
	}

	debug("TFTP blocksize = %i, timeout = %ld ms\n",
		TftpBlkSizeOption, TftpTimeoutMSecs);

	TftpRemoteIP = NetServerIP;
c7e29c00:	e5933000 	ldr	r3, [r3]
c7e29c04:	e59f4210 	ldr	r4, [pc, #528]	; c7e29e1c <TftpStart+0x294>
	if (BootFile[0] == '\0') {
c7e29c08:	e3560000 	cmp	r6, #0	; 0x0
	}

	debug("TFTP blocksize = %i, timeout = %ld ms\n",
		TftpBlkSizeOption, TftpTimeoutMSecs);

	TftpRemoteIP = NetServerIP;
c7e29c0c:	e5843088 	str	r3, [r4, #136]
	if (BootFile[0] == '\0') {
c7e29c10:	1a000014 	bne	c7e29c68 <TftpStart+0xe0>
		sprintf(default_filename, "%02X%02X%02X%02X.img",
c7e29c14:	e59f3204 	ldr	r3, [pc, #516]	; c7e29e20 <TftpStart+0x298>
c7e29c18:	e2840094 	add	r0, r4, #148	; 0x94
c7e29c1c:	e593e000 	ldr	lr, [r3]
c7e29c20:	e59f11fc 	ldr	r1, [pc, #508]	; c7e29e24 <TftpStart+0x29c>
c7e29c24:	e1a0342e 	lsr	r3, lr, #8
c7e29c28:	e1a0c82e 	lsr	ip, lr, #16
c7e29c2c:	e20cc0ff 	and	ip, ip, #255	; 0xff
c7e29c30:	e20e20ff 	and	r2, lr, #255	; 0xff
c7e29c34:	e20330ff 	and	r3, r3, #255	; 0xff
c7e29c38:	e1a0ec2e 	lsr	lr, lr, #24
c7e29c3c:	e88d5000 	stm	sp, {ip, lr}
c7e29c40:	ebffe87a 	bl	c7e23e30 <sprintf>
			NetOurIP & 0xFF,
			(NetOurIP >>  8) & 0xFF,
			(NetOurIP >> 16) & 0xFF,
			(NetOurIP >> 24) & 0xFF);

		strncpy(tftp_filename, default_filename, MAX_LEN);
c7e29c44:	e2841094 	add	r1, r4, #148	; 0x94
c7e29c48:	e2840004 	add	r0, r4, #4	; 0x4
c7e29c4c:	e3a02080 	mov	r2, #128	; 0x80
c7e29c50:	ebffe2d2 	bl	c7e227a0 <strncpy>
		tftp_filename[MAX_LEN-1] = 0;

		printf("*** Warning: no boot file name; using '%s'\n",
c7e29c54:	e2841004 	add	r1, r4, #4	; 0x4
			(NetOurIP >>  8) & 0xFF,
			(NetOurIP >> 16) & 0xFF,
			(NetOurIP >> 24) & 0xFF);

		strncpy(tftp_filename, default_filename, MAX_LEN);
		tftp_filename[MAX_LEN-1] = 0;
c7e29c58:	e5c46083 	strb	r6, [r4, #131]

		printf("*** Warning: no boot file name; using '%s'\n",
c7e29c5c:	e59f01c4 	ldr	r0, [pc, #452]	; c7e29e28 <TftpStart+0x2a0>
c7e29c60:	ebff7b7c 	bl	c7e08a58 <printf>
c7e29c64:	ea000013 	b	c7e29cb8 <TftpStart+0x130>
			tftp_filename);
	} else {
		char *p = strchr(BootFile, ':');
c7e29c68:	e1a00005 	mov	r0, r5
c7e29c6c:	e3a0103a 	mov	r1, #58	; 0x3a
c7e29c70:	ebffe31c 	bl	c7e228e8 <strchr>

		if (p == NULL) {
c7e29c74:	e2506000 	subs	r6, r0, #0	; 0x0
c7e29c78:	1a000005 	bne	c7e29c94 <TftpStart+0x10c>
			strncpy(tftp_filename, BootFile, MAX_LEN);
c7e29c7c:	e1a01005 	mov	r1, r5
c7e29c80:	e2840004 	add	r0, r4, #4	; 0x4
c7e29c84:	e3a02080 	mov	r2, #128	; 0x80
c7e29c88:	ebffe2c4 	bl	c7e227a0 <strncpy>
			tftp_filename[MAX_LEN-1] = 0;
c7e29c8c:	e5c46083 	strb	r6, [r4, #131]
c7e29c90:	ea000008 	b	c7e29cb8 <TftpStart+0x130>
		} else {
			TftpRemoteIP = string_to_ip(BootFile);
c7e29c94:	e1a00005 	mov	r0, r5
c7e29c98:	ebffe252 	bl	c7e225e8 <string_to_ip>
			strncpy(tftp_filename, p + 1, MAX_LEN);
c7e29c9c:	e2861001 	add	r1, r6, #1	; 0x1

		if (p == NULL) {
			strncpy(tftp_filename, BootFile, MAX_LEN);
			tftp_filename[MAX_LEN-1] = 0;
		} else {
			TftpRemoteIP = string_to_ip(BootFile);
c7e29ca0:	e5840088 	str	r0, [r4, #136]
			strncpy(tftp_filename, p + 1, MAX_LEN);
c7e29ca4:	e3a02080 	mov	r2, #128	; 0x80
c7e29ca8:	e2840004 	add	r0, r4, #4	; 0x4
c7e29cac:	ebffe2bb 	bl	c7e227a0 <strncpy>
			tftp_filename[MAX_LEN-1] = 0;
c7e29cb0:	e3a03000 	mov	r3, #0	; 0x0
c7e29cb4:	e5c43083 	strb	r3, [r4, #131]
		}
	}

	printf("Using %s device\n", eth_get_name());
c7e29cb8:	ebfff542 	bl	c7e271c8 <eth_get_name>
	printf("TFTP %s server %pI4; our IP address is %pI4",
c7e29cbc:	e59f5158 	ldr	r5, [pc, #344]	; c7e29e1c <TftpStart+0x294>
c7e29cc0:	e59f4158 	ldr	r4, [pc, #344]	; c7e29e20 <TftpStart+0x298>
			strncpy(tftp_filename, p + 1, MAX_LEN);
			tftp_filename[MAX_LEN-1] = 0;
		}
	}

	printf("Using %s device\n", eth_get_name());
c7e29cc4:	e1a01000 	mov	r1, r0
c7e29cc8:	e59f015c 	ldr	r0, [pc, #348]	; c7e29e2c <TftpStart+0x2a4>
c7e29ccc:	ebff7b61 	bl	c7e08a58 <printf>
	printf("TFTP %s server %pI4; our IP address is %pI4",
c7e29cd0:	e59f1158 	ldr	r1, [pc, #344]	; c7e29e30 <TftpStart+0x2a8>
c7e29cd4:	e1a03004 	mov	r3, r4
c7e29cd8:	e59f0154 	ldr	r0, [pc, #340]	; c7e29e34 <TftpStart+0x2ac>
c7e29cdc:	e2852088 	add	r2, r5, #136	; 0x88
c7e29ce0:	ebff7b5c 	bl	c7e08a58 <printf>
		"from",
#endif
		&TftpRemoteIP, &NetOurIP);

	/* Check if we need to send across this subnet */
	if (NetOurGatewayIP && NetOurSubnetMask) {
c7e29ce4:	e59f114c 	ldr	r1, [pc, #332]	; c7e29e38 <TftpStart+0x2b0>
c7e29ce8:	e5913000 	ldr	r3, [r1]
c7e29cec:	e3530000 	cmp	r3, #0	; 0x0
c7e29cf0:	0a00000b 	beq	c7e29d24 <TftpStart+0x19c>
c7e29cf4:	e59f3140 	ldr	r3, [pc, #320]	; c7e29e3c <TftpStart+0x2b4>
c7e29cf8:	e5930000 	ldr	r0, [r3]
c7e29cfc:	e3500000 	cmp	r0, #0	; 0x0
c7e29d00:	0a000007 	beq	c7e29d24 <TftpStart+0x19c>
		IPaddr_t OurNet	= NetOurIP    & NetOurSubnetMask;
		IPaddr_t RemoteNet	= TftpRemoteIP & NetOurSubnetMask;

		if (OurNet != RemoteNet)
c7e29d04:	e5942000 	ldr	r2, [r4]
c7e29d08:	e5953088 	ldr	r3, [r5, #136]
c7e29d0c:	e0002002 	and	r2, r0, r2
c7e29d10:	e0003003 	and	r3, r0, r3
c7e29d14:	e1520003 	cmp	r2, r3
c7e29d18:	0a000001 	beq	c7e29d24 <TftpStart+0x19c>
			printf("; sending through gateway %pI4",
c7e29d1c:	e59f011c 	ldr	r0, [pc, #284]	; c7e29e40 <TftpStart+0x2b8>
c7e29d20:	ebff7b4c 	bl	c7e08a58 <printf>
			       &NetOurGatewayIP);
	}
	putc('\n');
c7e29d24:	e3a0000a 	mov	r0, #10	; 0xa

	printf("Filename '%s'.", tftp_filename);

	if (NetBootFileSize) {
c7e29d28:	e59f4114 	ldr	r4, [pc, #276]	; c7e29e44 <TftpStart+0x2bc>

		if (OurNet != RemoteNet)
			printf("; sending through gateway %pI4",
			       &NetOurGatewayIP);
	}
	putc('\n');
c7e29d2c:	ebff7bd9 	bl	c7e08c98 <putc>

	printf("Filename '%s'.", tftp_filename);
c7e29d30:	e59f1110 	ldr	r1, [pc, #272]	; c7e29e48 <TftpStart+0x2c0>
c7e29d34:	e59f0110 	ldr	r0, [pc, #272]	; c7e29e4c <TftpStart+0x2c4>
c7e29d38:	ebff7b46 	bl	c7e08a58 <printf>

	if (NetBootFileSize) {
c7e29d3c:	e1d410b0 	ldrh	r1, [r4]
c7e29d40:	e3510000 	cmp	r1, #0	; 0x0
c7e29d44:	0a000007 	beq	c7e29d68 <TftpStart+0x1e0>
		printf(" Size is 0x%x Bytes = ", NetBootFileSize<<9);
c7e29d48:	e1a01481 	lsl	r1, r1, #9
c7e29d4c:	e59f00fc 	ldr	r0, [pc, #252]	; c7e29e50 <TftpStart+0x2c8>
c7e29d50:	ebff7b40 	bl	c7e08a58 <printf>
		print_size(NetBootFileSize<<9, "");
c7e29d54:	e1d400b0 	ldrh	r0, [r4]
c7e29d58:	e59f20f4 	ldr	r2, [pc, #244]	; c7e29e54 <TftpStart+0x2cc>
c7e29d5c:	e1a00480 	lsl	r0, r0, #9
c7e29d60:	e1a01fc0 	asr	r1, r0, #31
c7e29d64:	ebffdbfb 	bl	c7e20d58 <print_size>
	}

	putc('\n');
c7e29d68:	e3a0000a 	mov	r0, #10	; 0xa
c7e29d6c:	ebff7bc9 	bl	c7e08c98 <putc>
		TftpState = STATE_SEND_WRQ;
		new_transfer();
	} else
#endif
	{
		printf("Load address: 0x%lx\n", load_addr);
c7e29d70:	e59f30e0 	ldr	r3, [pc, #224]	; c7e29e58 <TftpStart+0x2d0>
		puts("Loading: *\b");
		TftpState = STATE_SEND_RRQ;
	}

	TftpTimeoutCountMax = TftpRRQTimeoutCountMax;
c7e29d74:	e59f608c 	ldr	r6, [pc, #140]	; c7e29e08 <TftpStart+0x280>
		TftpState = STATE_SEND_WRQ;
		new_transfer();
	} else
#endif
	{
		printf("Load address: 0x%lx\n", load_addr);
c7e29d78:	e5931000 	ldr	r1, [r3]
c7e29d7c:	e59f00d8 	ldr	r0, [pc, #216]	; c7e29e5c <TftpStart+0x2d4>
c7e29d80:	ebff7b34 	bl	c7e08a58 <printf>
		puts("Loading: *\b");
c7e29d84:	e59f00d4 	ldr	r0, [pc, #212]	; c7e29e60 <TftpStart+0x2d8>
c7e29d88:	ebff7b17 	bl	c7e089ec <puts>
		TftpState = STATE_SEND_RRQ;
c7e29d8c:	e59f5088 	ldr	r5, [pc, #136]	; c7e29e1c <TftpStart+0x294>
	}

	TftpTimeoutCountMax = TftpRRQTimeoutCountMax;
c7e29d90:	e596200c 	ldr	r2, [r6, #12]
	} else
#endif
	{
		printf("Load address: 0x%lx\n", load_addr);
		puts("Loading: *\b");
		TftpState = STATE_SEND_RRQ;
c7e29d94:	e3a03001 	mov	r3, #1	; 0x1
	}

	TftpTimeoutCountMax = TftpRRQTimeoutCountMax;
c7e29d98:	e5862008 	str	r2, [r6, #8]

	NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
c7e29d9c:	e59f10c0 	ldr	r1, [pc, #192]	; c7e29e64 <TftpStart+0x2dc>
	} else
#endif
	{
		printf("Load address: 0x%lx\n", load_addr);
		puts("Loading: *\b");
		TftpState = STATE_SEND_RRQ;
c7e29da0:	e5853000 	str	r3, [r5]
	}

	TftpTimeoutCountMax = TftpRRQTimeoutCountMax;

	NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
c7e29da4:	e5960000 	ldr	r0, [r6]
c7e29da8:	ebfff7c4 	bl	c7e27cc0 <NetSetTimeout>
	net_set_udp_handler(TftpHandler);
c7e29dac:	e59f00b4 	ldr	r0, [pc, #180]	; c7e29e68 <TftpStart+0x2e0>
c7e29db0:	ebfff724 	bl	c7e27a48 <net_set_udp_handler>
#ifdef CONFIG_CMD_TFTPPUT
	net_set_icmp_handler(icmp_handler);
#endif
	TftpRemotePort = WELL_KNOWN_PORT;
	TftpTimeoutCount = 0;
c7e29db4:	e3a04000 	mov	r4, #0	; 0x0
	NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
	net_set_udp_handler(TftpHandler);
#ifdef CONFIG_CMD_TFTPPUT
	net_set_icmp_handler(icmp_handler);
#endif
	TftpRemotePort = WELL_KNOWN_PORT;
c7e29db8:	e3a03045 	mov	r3, #69	; 0x45
c7e29dbc:	e585308c 	str	r3, [r5, #140]
	TftpTimeoutCount = 0;
	/* Use a pseudo-random port unless a specific port is set */
	TftpOurPort = 1024 + (get_timer(0) % 3072);
c7e29dc0:	e1a00004 	mov	r0, r4
	net_set_udp_handler(TftpHandler);
#ifdef CONFIG_CMD_TFTPPUT
	net_set_icmp_handler(icmp_handler);
#endif
	TftpRemotePort = WELL_KNOWN_PORT;
	TftpTimeoutCount = 0;
c7e29dc4:	e58540a4 	str	r4, [r5, #164]
	/* Use a pseudo-random port unless a specific port is set */
	TftpOurPort = 1024 + (get_timer(0) % 3072);
c7e29dc8:	ebff5b0c 	bl	c7e00a00 <get_timer>
c7e29dcc:	e3a01b03 	mov	r1, #3072	; 0xc00
c7e29dd0:	eb000209 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e29dd4:	e2813b01 	add	r3, r1, #1024	; 0x400
c7e29dd8:	e5853090 	str	r3, [r5, #144]
		TftpOurPort = simple_strtol(ep, NULL, 10);
#endif
	TftpBlock = 0;

	/* zero out server ether in case the server ip has changed */
	memset(NetServerEther, 0, 6);
c7e29ddc:	e1a01004 	mov	r1, r4
c7e29de0:	e3a02006 	mov	r2, #6	; 0x6
		TftpRemotePort = simple_strtol(ep, NULL, 10);
	ep = getenv("tftpsrcp");
	if (ep != NULL)
		TftpOurPort = simple_strtol(ep, NULL, 10);
#endif
	TftpBlock = 0;
c7e29de4:	e5854084 	str	r4, [r5, #132]

	/* zero out server ether in case the server ip has changed */
	memset(NetServerEther, 0, 6);
c7e29de8:	e59f007c 	ldr	r0, [pc, #124]	; c7e29e6c <TftpStart+0x2e4>
c7e29dec:	ebffe368 	bl	c7e22b94 <memset>
	/* Revert TftpBlkSize to dflt */
	TftpBlkSize = TFTP_BLOCK_SIZE;
c7e29df0:	e3a03c02 	mov	r3, #512	; 0x200
c7e29df4:	e1c631b0 	strh	r3, [r6, #16]
	TftpTsize = 0;
	TftpNumchars = 0;
#endif

	TftpSend();
}
c7e29df8:	e28dd008 	add	sp, sp, #8	; 0x8
c7e29dfc:	e8bd4070 	pop	{r4, r5, r6, lr}
#ifdef CONFIG_TFTP_TSIZE
	TftpTsize = 0;
	TftpNumchars = 0;
#endif

	TftpSend();
c7e29e00:	eafffefa 	b	c7e299f0 <TftpSend>
c7e29e04:	c7e3500b 	.word	0xc7e3500b
c7e29e08:	c7e3a4e0 	.word	0xc7e3a4e0
c7e29e0c:	c7e35019 	.word	0xc7e35019
c7e29e10:	c7e35025 	.word	0xc7e35025
c7e29e14:	c7e748d8 	.word	0xc7e748d8
c7e29e18:	c7e729f4 	.word	0xc7e729f4
c7e29e1c:	c7e75210 	.word	0xc7e75210
c7e29e20:	c7e729b8 	.word	0xc7e729b8
c7e29e24:	c7e34e63 	.word	0xc7e34e63
c7e29e28:	c7e34e78 	.word	0xc7e34e78
c7e29e2c:	c7e34ea4 	.word	0xc7e34ea4
c7e29e30:	c7e35087 	.word	0xc7e35087
c7e29e34:	c7e3505b 	.word	0xc7e3505b
c7e29e38:	c7e729ec 	.word	0xc7e729ec
c7e29e3c:	c7e729f0 	.word	0xc7e729f0
c7e29e40:	c7e34ef4 	.word	0xc7e34ef4
c7e29e44:	c7e748d0 	.word	0xc7e748d0
c7e29e48:	c7e75214 	.word	0xc7e75214
c7e29e4c:	c7e3508c 	.word	0xc7e3508c
c7e29e50:	c7e34f26 	.word	0xc7e34f26
c7e29e54:	c7e2fef0 	.word	0xc7e2fef0
c7e29e58:	c7e353cc 	.word	0xc7e353cc
c7e29e5c:	c7e3509b 	.word	0xc7e3509b
c7e29e60:	c7e34f52 	.word	0xc7e34f52
c7e29e64:	c7e29e70 	.word	0xc7e29e70
c7e29e68:	c7e29ee8 	.word	0xc7e29ee8
c7e29e6c:	c7e748d2 	.word	0xc7e748d2

c7e29e70 <TftpTimeout>:
}


static void
TftpTimeout(void)
{
c7e29e70:	e92d4070 	push	{r4, r5, r6, lr}
	if (++TftpTimeoutCount > TftpTimeoutCountMax) {
c7e29e74:	e59f4054 	ldr	r4, [pc, #84]	; c7e29ed0 <TftpTimeout+0x60>
c7e29e78:	e59f5054 	ldr	r5, [pc, #84]	; c7e29ed4 <TftpTimeout+0x64>
c7e29e7c:	e59430a4 	ldr	r3, [r4, #164]
c7e29e80:	e5952008 	ldr	r2, [r5, #8]
c7e29e84:	e2833001 	add	r3, r3, #1	; 0x1
c7e29e88:	e1530002 	cmp	r3, r2
c7e29e8c:	e58430a4 	str	r3, [r4, #164]
c7e29e90:	da000004 	ble	c7e29ea8 <TftpTimeout+0x38>
 *
 * @param msg	Message to print for user
 */
static void restart(const char *msg)
{
	printf("\n%s; starting again\n", msg);
c7e29e94:	e59f103c 	ldr	r1, [pc, #60]	; c7e29ed8 <TftpTimeout+0x68>
c7e29e98:	e59f003c 	ldr	r0, [pc, #60]	; c7e29edc <TftpTimeout+0x6c>
c7e29e9c:	ebff7aed 	bl	c7e08a58 <printf>
		puts("T ");
		NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
		if (TftpState != STATE_RECV_WRQ)
			TftpSend();
	}
}
c7e29ea0:	e8bd4070 	pop	{r4, r5, r6, lr}
{
	printf("\n%s; starting again\n", msg);
#ifdef CONFIG_MCAST_TFTP
	mcast_cleanup();
#endif
	NetStartAgain();
c7e29ea4:	eafff921 	b	c7e28330 <NetStartAgain>
TftpTimeout(void)
{
	if (++TftpTimeoutCount > TftpTimeoutCountMax) {
		restart("Retry count exceeded");
	} else {
		puts("T ");
c7e29ea8:	e59f0030 	ldr	r0, [pc, #48]	; c7e29ee0 <TftpTimeout+0x70>
c7e29eac:	ebff7ace 	bl	c7e089ec <puts>
		NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
c7e29eb0:	e5950000 	ldr	r0, [r5]
c7e29eb4:	e59f1028 	ldr	r1, [pc, #40]	; c7e29ee4 <TftpTimeout+0x74>
c7e29eb8:	ebfff780 	bl	c7e27cc0 <NetSetTimeout>
		if (TftpState != STATE_RECV_WRQ)
c7e29ebc:	e5943000 	ldr	r3, [r4]
c7e29ec0:	e3530006 	cmp	r3, #6	; 0x6
c7e29ec4:	08bd8070 	popeq	{r4, r5, r6, pc}
			TftpSend();
	}
}
c7e29ec8:	e8bd4070 	pop	{r4, r5, r6, lr}
		restart("Retry count exceeded");
	} else {
		puts("T ");
		NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
		if (TftpState != STATE_RECV_WRQ)
			TftpSend();
c7e29ecc:	eafffec7 	b	c7e299f0 <TftpSend>
c7e29ed0:	c7e75210 	.word	0xc7e75210
c7e29ed4:	c7e3a4e0 	.word	0xc7e3a4e0
c7e29ed8:	c7e350c5 	.word	0xc7e350c5
c7e29edc:	c7e350b0 	.word	0xc7e350b0
c7e29ee0:	c7e34fd2 	.word	0xc7e34fd2
c7e29ee4:	c7e29e70 	.word	0xc7e29e70

c7e29ee8 <TftpHandler>:
{
	ushort proto;
	ushort *s;
	int i;

	if (dest != TftpOurPort) {
c7e29ee8:	e59fc2a0 	ldr	ip, [pc, #672]	; c7e2a190 <TftpHandler+0x2a8>
#endif

static void
TftpHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src,
	    unsigned len)
{
c7e29eec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	ushort proto;
	ushort *s;
	int i;

	if (dest != TftpOurPort) {
c7e29ef0:	e59c2090 	ldr	r2, [ip, #144]
#endif

static void
TftpHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src,
	    unsigned len)
{
c7e29ef4:	e1a04000 	mov	r4, r0
	ushort proto;
	ushort *s;
	int i;

	if (dest != TftpOurPort) {
c7e29ef8:	e1510002 	cmp	r1, r2
#endif

static void
TftpHandler(uchar *pkt, unsigned dest, IPaddr_t sip, unsigned src,
	    unsigned len)
{
c7e29efc:	e1a05003 	mov	r5, r3
c7e29f00:	e59d1018 	ldr	r1, [sp, #24]
	ushort proto;
	ushort *s;
	int i;

	if (dest != TftpOurPort) {
c7e29f04:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
		if (Multicast
		 && (!Mcast_port || (dest != Mcast_port)))
#endif
			return;
	}
	if (TftpState != STATE_SEND_RRQ && src != TftpRemotePort &&
c7e29f08:	e59c2000 	ldr	r2, [ip]
c7e29f0c:	e3520001 	cmp	r2, #1	; 0x1
c7e29f10:	0a000006 	beq	c7e29f30 <TftpHandler+0x48>
c7e29f14:	e59c308c 	ldr	r3, [ip, #140]
c7e29f18:	e1550003 	cmp	r5, r3
c7e29f1c:	0a000003 	beq	c7e29f30 <TftpHandler+0x48>
c7e29f20:	e3520006 	cmp	r2, #6	; 0x6
c7e29f24:	0a000001 	beq	c7e29f30 <TftpHandler+0x48>
c7e29f28:	e3520007 	cmp	r2, #7	; 0x7
c7e29f2c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
	    TftpState != STATE_RECV_WRQ && TftpState != STATE_SEND_WRQ)
		return;

	if (len < 2)
c7e29f30:	e3510001 	cmp	r1, #1	; 0x1
c7e29f34:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
	len -= 2;
	/* warning: don't use increment (++) in ntohs() macros!! */
	s = (ushort *)pkt;
	proto = *s++;
	pkt = (uchar *)s;
	switch (ntohs(proto)) {
c7e29f38:	e1d400b0 	ldrh	r0, [r4]
	    TftpState != STATE_RECV_WRQ && TftpState != STATE_SEND_WRQ)
		return;

	if (len < 2)
		return;
	len -= 2;
c7e29f3c:	e2417002 	sub	r7, r1, #2	; 0x2
	/* warning: don't use increment (++) in ntohs() macros!! */
	s = (ushort *)pkt;
	proto = *s++;
	pkt = (uchar *)s;
	switch (ntohs(proto)) {
c7e29f40:	ebfffea1 	bl	c7e299cc <__fswab16>
c7e29f44:	e3500005 	cmp	r0, #5	; 0x5
	if (len < 2)
		return;
	len -= 2;
	/* warning: don't use increment (++) in ntohs() macros!! */
	s = (ushort *)pkt;
	proto = *s++;
c7e29f48:	e2846002 	add	r6, r4, #2	; 0x2
	pkt = (uchar *)s;
	switch (ntohs(proto)) {
c7e29f4c:	0a00007a 	beq	c7e2a13c <TftpHandler+0x254>
c7e29f50:	e3500006 	cmp	r0, #6	; 0x6
c7e29f54:	0a000002 	beq	c7e29f64 <TftpHandler+0x7c>
c7e29f58:	e3500003 	cmp	r0, #3	; 0x3
c7e29f5c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
c7e29f60:	ea000017 	b	c7e29fc4 <TftpHandler+0xdc>

	case TFTP_OACK:
		debug("Got OACK: %s %s\n",
			pkt,
			pkt + strlen((char *)pkt) + 1);
		TftpState = STATE_OACK;
c7e29f64:	e59f2224 	ldr	r2, [pc, #548]	; c7e2a190 <TftpHandler+0x2a8>
c7e29f68:	e3a03005 	mov	r3, #5	; 0x5
		TftpRemotePort = src;
c7e29f6c:	e582508c 	str	r5, [r2, #140]

	case TFTP_OACK:
		debug("Got OACK: %s %s\n",
			pkt,
			pkt + strlen((char *)pkt) + 1);
		TftpState = STATE_OACK;
c7e29f70:	e5823000 	str	r3, [r2]
		TftpRemotePort = src;
c7e29f74:	e1a04006 	mov	r4, r6
c7e29f78:	e3a05008 	mov	r5, #8	; 0x8
c7e29f7c:	ea000009 	b	c7e29fa8 <TftpHandler+0xc0>
		 * Check for 'blksize' option.
		 * Careful: "i" is signed, "len" is unsigned, thus
		 * something like "len-8" may give a *huge* number
		 */
		for (i = 0; i+8 < len; i++) {
			if (strcmp((char *)pkt+i, "blksize") == 0) {
c7e29f80:	ebffe236 	bl	c7e22860 <strcmp>
c7e29f84:	e3500000 	cmp	r0, #0	; 0x0
c7e29f88:	1a000005 	bne	c7e29fa4 <TftpHandler+0xbc>
				TftpBlkSize = (unsigned short)
c7e29f8c:	e1a01000 	mov	r1, r0
c7e29f90:	e3a0200a 	mov	r2, #10	; 0xa
c7e29f94:	e2840008 	add	r0, r4, #8	; 0x8
c7e29f98:	ebffe3f0 	bl	c7e22f60 <simple_strtoul>
c7e29f9c:	e59f31f0 	ldr	r3, [pc, #496]	; c7e2a194 <TftpHandler+0x2ac>
c7e29fa0:	e1c301b0 	strh	r0, [r3, #16]
c7e29fa4:	e2844001 	add	r4, r4, #1	; 0x1
		/*
		 * Check for 'blksize' option.
		 * Careful: "i" is signed, "len" is unsigned, thus
		 * something like "len-8" may give a *huge* number
		 */
		for (i = 0; i+8 < len; i++) {
c7e29fa8:	e1550007 	cmp	r5, r7
			if (strcmp((char *)pkt+i, "blksize") == 0) {
c7e29fac:	e1a00004 	mov	r0, r4
c7e29fb0:	e59f11e0 	ldr	r1, [pc, #480]	; c7e2a198 <TftpHandler+0x2b0>
				TftpBlkSize = (unsigned short)
c7e29fb4:	e2855001 	add	r5, r5, #1	; 0x1
		/*
		 * Check for 'blksize' option.
		 * Careful: "i" is signed, "len" is unsigned, thus
		 * something like "len-8" may give a *huge* number
		 */
		for (i = 0; i+8 < len; i++) {
c7e29fb8:	3afffff0 	bcc	c7e29f80 <TftpHandler+0x98>
			NetStartAgain();
			break;
		}
		break;
	}
}
c7e29fbc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
			/* Get ready to send the first block */
			TftpState = STATE_DATA;
			TftpBlock++;
		}
#endif
		TftpSend(); /* Send ACK or first data block */
c7e29fc0:	eafffe8a 	b	c7e299f0 <TftpSend>
		break;
	case TFTP_DATA:
		if (len < 2)
c7e29fc4:	e3570001 	cmp	r7, #1	; 0x1
c7e29fc8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
			return;
		len -= 2;
		TftpBlock = ntohs(*(ushort *)pkt);
c7e29fcc:	e1d400b2 	ldrh	r0, [r4, #2]
c7e29fd0:	ebfffe7d 	bl	c7e299cc <__fswab16>
c7e29fd4:	e1a04000 	mov	r4, r0
c7e29fd8:	e59f01b0 	ldr	r0, [pc, #432]	; c7e2a190 <TftpHandler+0x2a8>
	 * RFC1350 specifies that the first data packet will
	 * have sequence number 1. If we receive a sequence
	 * number of 0 this means that there was a wrap
	 * around of the (16 bit) counter.
	 */
	if (TftpBlock == 0) {
c7e29fdc:	e3540000 	cmp	r4, #0	; 0x0
		break;
	case TFTP_DATA:
		if (len < 2)
			return;
		len -= 2;
		TftpBlock = ntohs(*(ushort *)pkt);
c7e29fe0:	e5804084 	str	r4, [r0, #132]
	 * RFC1350 specifies that the first data packet will
	 * have sequence number 1. If we receive a sequence
	 * number of 0 this means that there was a wrap
	 * around of the (16 bit) counter.
	 */
	if (TftpBlock == 0) {
c7e29fe4:	1a000009 	bne	c7e2a010 <TftpHandler+0x128>
		TftpBlockWrap++;
		TftpBlockWrapOffset += TftpBlkSize * TFTP_SEQUENCE_SIZE;
c7e29fe8:	e59f31a4 	ldr	r3, [pc, #420]	; c7e2a194 <TftpHandler+0x2ac>
	 * have sequence number 1. If we receive a sequence
	 * number of 0 this means that there was a wrap
	 * around of the (16 bit) counter.
	 */
	if (TftpBlock == 0) {
		TftpBlockWrap++;
c7e29fec:	e59020a8 	ldr	r2, [r0, #168]
		TftpBlockWrapOffset += TftpBlkSize * TFTP_SEQUENCE_SIZE;
c7e29ff0:	e1d311b0 	ldrh	r1, [r3, #16]
c7e29ff4:	e59030ac 	ldr	r3, [r0, #172]
	 * have sequence number 1. If we receive a sequence
	 * number of 0 this means that there was a wrap
	 * around of the (16 bit) counter.
	 */
	if (TftpBlock == 0) {
		TftpBlockWrap++;
c7e29ff8:	e2822001 	add	r2, r2, #1	; 0x1
		TftpBlockWrapOffset += TftpBlkSize * TFTP_SEQUENCE_SIZE;
c7e29ffc:	e0833801 	add	r3, r3, r1, lsl #16
		TftpTimeoutCount = 0; /* we've done well, reset thhe timeout */
c7e2a000:	e58040a4 	str	r4, [r0, #164]
	 * have sequence number 1. If we receive a sequence
	 * number of 0 this means that there was a wrap
	 * around of the (16 bit) counter.
	 */
	if (TftpBlock == 0) {
		TftpBlockWrap++;
c7e2a004:	e58020a8 	str	r2, [r0, #168]
		TftpBlockWrapOffset += TftpBlkSize * TFTP_SEQUENCE_SIZE;
c7e2a008:	e58030ac 	str	r3, [r0, #172]
c7e2a00c:	ea00000e 	b	c7e2a04c <TftpHandler+0x164>
			TftpNumchars++;
		}
	} else
#endif
	{
		if (((TftpBlock - 1) % 10) == 0)
c7e2a010:	e2440001 	sub	r0, r4, #1	; 0x1
c7e2a014:	e3a0100a 	mov	r1, #10	; 0xa
c7e2a018:	eb000177 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e2a01c:	e3510000 	cmp	r1, #0	; 0x0
c7e2a020:	1a000002 	bne	c7e2a030 <TftpHandler+0x148>
			putc('#');
c7e2a024:	e3a00023 	mov	r0, #35	; 0x23
c7e2a028:	ebff7b1a 	bl	c7e08c98 <putc>
c7e2a02c:	ea000006 	b	c7e2a04c <TftpHandler+0x164>
		else if ((TftpBlock % (10 * HASHES_PER_LINE)) == 0)
c7e2a030:	e1a00004 	mov	r0, r4
c7e2a034:	e59f1160 	ldr	r1, [pc, #352]	; c7e2a19c <TftpHandler+0x2b4>
c7e2a038:	eb00016f 	bl	c7e2a5fc <__aeabi_uidivmod>
c7e2a03c:	e3510000 	cmp	r1, #0	; 0x0
c7e2a040:	1a000001 	bne	c7e2a04c <TftpHandler+0x164>
			puts("\n\t ");
c7e2a044:	e59f0154 	ldr	r0, [pc, #340]	; c7e2a1a0 <TftpHandler+0x2b8>
c7e2a048:	ebff7a67 	bl	c7e089ec <puts>
		update_block_number();

		if (TftpState == STATE_SEND_RRQ)
			debug("Server did not acknowledge timeout option!\n");

		if (TftpState == STATE_SEND_RRQ || TftpState == STATE_OACK ||
c7e2a04c:	e59f313c 	ldr	r3, [pc, #316]	; c7e2a190 <TftpHandler+0x2a8>
c7e2a050:	e5933000 	ldr	r3, [r3]
c7e2a054:	e3530005 	cmp	r3, #5	; 0x5
c7e2a058:	13530001 	cmpne	r3, #1	; 0x1
c7e2a05c:	0a000001 	beq	c7e2a068 <TftpHandler+0x180>
c7e2a060:	e3530006 	cmp	r3, #6	; 0x6
c7e2a064:	1a00000e 	bne	c7e2a0a4 <TftpHandler+0x1bc>
		    TftpState == STATE_RECV_WRQ) {
			/* first block received */
			TftpState = STATE_DATA;
c7e2a068:	e59f3120 	ldr	r3, [pc, #288]	; c7e2a190 <TftpHandler+0x2a8>
}

/* Clear our state ready for a new transfer */
static void new_transfer(void)
{
	TftpLastBlock = 0;
c7e2a06c:	e3a01000 	mov	r1, #0	; 0x0
#ifdef CONFIG_MCAST_TFTP
			if (Multicast) { /* start!=1 common if mcast */
				TftpLastBlock = TftpBlock - 1;
			} else
#endif
			if (TftpBlock != 1) {	/* Assertion */
c7e2a070:	e5930084 	ldr	r0, [r3, #132]
			debug("Server did not acknowledge timeout option!\n");

		if (TftpState == STATE_SEND_RRQ || TftpState == STATE_OACK ||
		    TftpState == STATE_RECV_WRQ) {
			/* first block received */
			TftpState = STATE_DATA;
c7e2a074:	e3a02002 	mov	r2, #2	; 0x2
#ifdef CONFIG_MCAST_TFTP
			if (Multicast) { /* start!=1 common if mcast */
				TftpLastBlock = TftpBlock - 1;
			} else
#endif
			if (TftpBlock != 1) {	/* Assertion */
c7e2a078:	e3500001 	cmp	r0, #1	; 0x1
			debug("Server did not acknowledge timeout option!\n");

		if (TftpState == STATE_SEND_RRQ || TftpState == STATE_OACK ||
		    TftpState == STATE_RECV_WRQ) {
			/* first block received */
			TftpState = STATE_DATA;
c7e2a07c:	e5832000 	str	r2, [r3]
			TftpRemotePort = src;
c7e2a080:	e583508c 	str	r5, [r3, #140]
/* Clear our state ready for a new transfer */
static void new_transfer(void)
{
	TftpLastBlock = 0;
	TftpBlockWrap = 0;
	TftpBlockWrapOffset = 0;
c7e2a084:	e58310ac 	str	r1, [r3, #172]
}

/* Clear our state ready for a new transfer */
static void new_transfer(void)
{
	TftpLastBlock = 0;
c7e2a088:	e58310b0 	str	r1, [r3, #176]
	TftpBlockWrap = 0;
c7e2a08c:	e58310a8 	str	r1, [r3, #168]
#ifdef CONFIG_MCAST_TFTP
			if (Multicast) { /* start!=1 common if mcast */
				TftpLastBlock = TftpBlock - 1;
			} else
#endif
			if (TftpBlock != 1) {	/* Assertion */
c7e2a090:	0a000003 	beq	c7e2a0a4 <TftpHandler+0x1bc>
				printf("\nTFTP error: "
c7e2a094:	e1a01000 	mov	r1, r0
c7e2a098:	e59f0104 	ldr	r0, [pc, #260]	; c7e2a1a4 <TftpHandler+0x2bc>
c7e2a09c:	ebff7a6d 	bl	c7e08a58 <printf>
c7e2a0a0:	ea000038 	b	c7e2a188 <TftpHandler+0x2a0>
				NetStartAgain();
				break;
			}
		}

		if (TftpBlock == TftpLastBlock) {
c7e2a0a4:	e59f50e4 	ldr	r5, [pc, #228]	; c7e2a190 <TftpHandler+0x2a8>
c7e2a0a8:	e5952084 	ldr	r2, [r5, #132]
c7e2a0ac:	e59530b0 	ldr	r3, [r5, #176]
c7e2a0b0:	e1520003 	cmp	r2, r3
c7e2a0b4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
			 */
			break;
		}

		TftpLastBlock = TftpBlock;
		TftpTimeoutCountMax = TIMEOUT_COUNT;
c7e2a0b8:	e59f40d4 	ldr	r4, [pc, #212]	; c7e2a194 <TftpHandler+0x2ac>
c7e2a0bc:	e3a0300a 	mov	r3, #10	; 0xa
		NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
c7e2a0c0:	e5940000 	ldr	r0, [r4]
			 *	Same block again; ignore it.
			 */
			break;
		}

		TftpLastBlock = TftpBlock;
c7e2a0c4:	e58520b0 	str	r2, [r5, #176]
		TftpTimeoutCountMax = TIMEOUT_COUNT;
c7e2a0c8:	e5843008 	str	r3, [r4, #8]
		NetSetTimeout(TftpTimeoutMSecs, TftpTimeout);
c7e2a0cc:	e59f10d4 	ldr	r1, [pc, #212]	; c7e2a1a8 <TftpHandler+0x2c0>
c7e2a0d0:	ebfff6fa 	bl	c7e27cc0 <NetSetTimeout>
#endif	/* CONFIG_MCAST_TFTP */

static inline void
store_block(int block, uchar *src, unsigned len)
{
	ulong offset = block * TftpBlkSize + TftpBlockWrapOffset;
c7e2a0d4:	e5953084 	ldr	r3, [r5, #132]
c7e2a0d8:	e1d411b0 	ldrh	r1, [r4, #16]
c7e2a0dc:	e59520ac 	ldr	r2, [r5, #172]
c7e2a0e0:	e2433001 	sub	r3, r3, #1	; 0x1
c7e2a0e4:	e02c2391 	mla	ip, r1, r3, r2
			return;
		}
	} else
#endif /* CONFIG_SYS_DIRECT_FLASH_TFTP */
	{
		(void)memcpy((void *)(load_addr + offset), src, len);
c7e2a0e8:	e59f30bc 	ldr	r3, [pc, #188]	; c7e2a1ac <TftpHandler+0x2c4>
		TftpSend(); /* Send ACK or first data block */
		break;
	case TFTP_DATA:
		if (len < 2)
			return;
		len -= 2;
c7e2a0ec:	e2474002 	sub	r4, r7, #2	; 0x2
			return;
		}
	} else
#endif /* CONFIG_SYS_DIRECT_FLASH_TFTP */
	{
		(void)memcpy((void *)(load_addr + offset), src, len);
c7e2a0f0:	e5930000 	ldr	r0, [r3]
c7e2a0f4:	e2861002 	add	r1, r6, #2	; 0x2
c7e2a0f8:	e08c0000 	add	r0, ip, r0
c7e2a0fc:	e1a02004 	mov	r2, r4

static inline void
store_block(int block, uchar *src, unsigned len)
{
	ulong offset = block * TftpBlkSize + TftpBlockWrapOffset;
	ulong newsize = offset + len;
c7e2a100:	e084500c 	add	r5, r4, ip
			return;
		}
	} else
#endif /* CONFIG_SYS_DIRECT_FLASH_TFTP */
	{
		(void)memcpy((void *)(load_addr + offset), src, len);
c7e2a104:	ebffe2cc 	bl	c7e22c3c <memcpy>
#ifdef CONFIG_MCAST_TFTP
	if (Multicast)
		ext2_set_bit(block, Bitmap);
#endif

	if (NetBootFileXferSize < newsize)
c7e2a108:	e59f20a0 	ldr	r2, [pc, #160]	; c7e2a1b0 <TftpHandler+0x2c8>
c7e2a10c:	e5923000 	ldr	r3, [r2]
c7e2a110:	e1530005 	cmp	r3, r5
		NetBootFileXferSize = newsize;
c7e2a114:	35825000 	strcc	r5, [r2]
				}
				TftpLastBlock = TftpBlock;
			}
		}
#endif
		TftpSend();
c7e2a118:	ebfffe34 	bl	c7e299f0 <TftpSend>
				mcast_cleanup();
				net_set_state(NETLOOP_SUCCESS);
			}
		} else
#endif
		if (len < TftpBlkSize)
c7e2a11c:	e59f3070 	ldr	r3, [pc, #112]	; c7e2a194 <TftpHandler+0x2ac>
c7e2a120:	e1d331b0 	ldrh	r3, [r3, #16]
c7e2a124:	e1540003 	cmp	r4, r3
c7e2a128:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
	while (TftpTsize && TftpNumchars < 49) {
		putc('#');
		TftpNumchars++;
	}
#endif
	puts("\ndone\n");
c7e2a12c:	e59f0080 	ldr	r0, [pc, #128]	; c7e2a1b4 <TftpHandler+0x2cc>
c7e2a130:	ebff7a2d 	bl	c7e089ec <puts>
	net_set_state(NETLOOP_SUCCESS);
c7e2a134:	e3a00002 	mov	r0, #2	; 0x2
c7e2a138:	ea00000e 	b	c7e2a178 <TftpHandler+0x290>
		if (len < TftpBlkSize)
			tftp_complete();
		break;

	case TFTP_ERROR:
		printf("\nTFTP error: '%s' (%d)\n",
c7e2a13c:	e1d400b2 	ldrh	r0, [r4, #2]
c7e2a140:	ebfffe21 	bl	c7e299cc <__fswab16>
c7e2a144:	e2861002 	add	r1, r6, #2	; 0x2
c7e2a148:	e1a02000 	mov	r2, r0
c7e2a14c:	e59f0064 	ldr	r0, [pc, #100]	; c7e2a1b8 <TftpHandler+0x2d0>
c7e2a150:	ebff7a40 	bl	c7e08a58 <printf>
		       pkt + 2, ntohs(*(ushort *)pkt));

		switch (ntohs(*(ushort *)pkt)) {
c7e2a154:	e1d400b2 	ldrh	r0, [r4, #2]
c7e2a158:	ebfffe1b 	bl	c7e299cc <__fswab16>
c7e2a15c:	e2400001 	sub	r0, r0, #1	; 0x1
c7e2a160:	e3500001 	cmp	r0, #1	; 0x1
c7e2a164:	8a000005 	bhi	c7e2a180 <TftpHandler+0x298>
		case TFTP_ERR_FILE_NOT_FOUND:
		case TFTP_ERR_ACCESS_DENIED:
			puts("Not retrying...\n");
c7e2a168:	e59f004c 	ldr	r0, [pc, #76]	; c7e2a1bc <TftpHandler+0x2d4>
c7e2a16c:	ebff7a1e 	bl	c7e089ec <puts>
			eth_halt();
c7e2a170:	ebfff3ef 	bl	c7e27134 <eth_halt>
			net_set_state(NETLOOP_FAIL);
c7e2a174:	e3a00003 	mov	r0, #3	; 0x3
			NetStartAgain();
			break;
		}
		break;
	}
}
c7e2a178:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
		switch (ntohs(*(ushort *)pkt)) {
		case TFTP_ERR_FILE_NOT_FOUND:
		case TFTP_ERR_ACCESS_DENIED:
			puts("Not retrying...\n");
			eth_halt();
			net_set_state(NETLOOP_FAIL);
c7e2a17c:	eafffe17 	b	c7e299e0 <net_set_state>
		case TFTP_ERR_DISK_FULL:
		case TFTP_ERR_UNEXPECTED_OPCODE:
		case TFTP_ERR_UNKNOWN_TRANSFER_ID:
		case TFTP_ERR_FILE_ALREADY_EXISTS:
		default:
			puts("Starting again\n\n");
c7e2a180:	e59f0038 	ldr	r0, [pc, #56]	; c7e2a1c0 <TftpHandler+0x2d8>
c7e2a184:	ebff7a18 	bl	c7e089ec <puts>
			NetStartAgain();
			break;
		}
		break;
	}
}
c7e2a188:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
		default:
			puts("Starting again\n\n");
#ifdef CONFIG_MCAST_TFTP
			mcast_cleanup();
#endif
			NetStartAgain();
c7e2a18c:	eafff867 	b	c7e28330 <NetStartAgain>
c7e2a190:	c7e75210 	.word	0xc7e75210
c7e2a194:	c7e3a4e0 	.word	0xc7e3a4e0
c7e2a198:	c7e350da 	.word	0xc7e350da
c7e2a19c:	0000028a 	.word	0x0000028a
c7e2a1a0:	c7e34f5e 	.word	0xc7e34f5e
c7e2a1a4:	c7e350e2 	.word	0xc7e350e2
c7e2a1a8:	c7e29e70 	.word	0xc7e29e70
c7e2a1ac:	c7e353cc 	.word	0xc7e353cc
c7e2a1b0:	c7e74848 	.word	0xc7e74848
c7e2a1b4:	c7e34f95 	.word	0xc7e34f95
c7e2a1b8:	c7e35121 	.word	0xc7e35121
c7e2a1bc:	c7e35139 	.word	0xc7e35139
c7e2a1c0:	c7e35110 	.word	0xc7e35110

c7e2a1c4 <_TEXT_BASE>:
c7e2a1c4:	c7e00000 	.word	0xc7e00000

c7e2a1c8 <lowlevel_init>:
_TEXT_BASE:
	.word	CONFIG_SYS_TEXT_BASE

	.globl lowlevel_init
lowlevel_init:
	mov	r12, lr
c7e2a1c8:	e1a0c00e 	mov	ip, lr

	/* LED on only #8 */
	ldr	r0, =ELFIN_GPIO_BASE
c7e2a1cc:	e59f01e8 	ldr	r0, [pc, #488]	; c7e2a3bc <nand_asm_init+0x24>
	ldr	r1, =0x00001111
c7e2a1d0:	e59f11e8 	ldr	r1, [pc, #488]	; c7e2a3c0 <nand_asm_init+0x28>
	str	r1, [r0, #GPMCON_OFFSET]
c7e2a1d4:	e5801820 	str	r1, [r0, #2080]

	ldr	r1, =0x00005555
c7e2a1d8:	e59f11e4 	ldr	r1, [pc, #484]	; c7e2a3c4 <nand_asm_init+0x2c>
	str	r1, [r0, #GPMPUD_OFFSET]
c7e2a1dc:	e5801828 	str	r1, [r0, #2088]

	ldr	r1, =0x000f
c7e2a1e0:	e3a0100f 	mov	r1, #15	; 0xf
	str	r1, [r0, #GPMDAT_OFFSET]
c7e2a1e4:	e5801824 	str	r1, [r0, #2084]

	/* Disable Watchdog */
	ldr	r0, =0x7e000000		@0x7e004000
c7e2a1e8:	e3a0047e 	mov	r0, #2113929216	; 0x7e000000
	orr	r0, r0, #0x4000
c7e2a1ec:	e3800901 	orr	r0, r0, #16384	; 0x4000
	mov	r1, #0
c7e2a1f0:	e3a01000 	mov	r1, #0	; 0x0
	str	r1, [r0]
c7e2a1f4:	e5801000 	str	r1, [r0]

	/* External interrupt pending clear */
	ldr	r0, =(ELFIN_GPIO_BASE+EINTPEND_OFFSET)	/*EINTPEND*/
c7e2a1f8:	e59f01c8 	ldr	r0, [pc, #456]	; c7e2a3c8 <nand_asm_init+0x30>
	ldr	r1, [r0]
c7e2a1fc:	e5901000 	ldr	r1, [r0]
	str	r1, [r0]
c7e2a200:	e5801000 	str	r1, [r0]

	ldr	r0, =ELFIN_VIC0_BASE_ADDR	@0x71200000
c7e2a204:	e59f01c0 	ldr	r0, [pc, #448]	; c7e2a3cc <nand_asm_init+0x34>
	ldr	r1, =ELFIN_VIC1_BASE_ADDR	@0x71300000
c7e2a208:	e59f11c0 	ldr	r1, [pc, #448]	; c7e2a3d0 <nand_asm_init+0x38>

	/* Disable all interrupts (VIC0 and VIC1) */
	mvn	r3, #0x0
c7e2a20c:	e3e03000 	mvn	r3, #0	; 0x0
	str	r3, [r0, #oINTMSK]
c7e2a210:	e5803014 	str	r3, [r0, #20]
	str	r3, [r1, #oINTMSK]
c7e2a214:	e5813014 	str	r3, [r1, #20]

	/* Set all interrupts as IRQ */
	mov	r3, #0x0
c7e2a218:	e3a03000 	mov	r3, #0	; 0x0
	str	r3, [r0, #oINTMOD]
c7e2a21c:	e580300c 	str	r3, [r0, #12]
	str	r3, [r1, #oINTMOD]
c7e2a220:	e581300c 	str	r3, [r1, #12]

	/* Pending Interrupt Clear */
	mov	r3, #0x0
c7e2a224:	e3a03000 	mov	r3, #0	; 0x0
	str	r3, [r0, #oVECTADDR]
c7e2a228:	e5803f00 	str	r3, [r0, #3840]
	str	r3, [r1, #oVECTADDR]
c7e2a22c:	e5813f00 	str	r3, [r1, #3840]

	/* init system clock */
	bl system_clock_init
c7e2a230:	eb000017 	bl	c7e2a294 <system_clock_init>

//#ifndef CONFIG_NAND_SPL
	/* for UART */
	bl uart_asm_init
c7e2a234:	eb000044 	bl	c7e2a34c <uart_asm_init>
//#endif

#ifdef CONFIG_BOOT_NAND
	/* simple init for NAND */
	bl nand_asm_init
c7e2a238:	eb000056 	bl	c7e2a398 <nand_asm_init>
#endif
	/* Memory subsystem address 0x7e00f120 */
	ldr	r0, =ELFIN_MEM_SYS_CFG
c7e2a23c:	e59f0190 	ldr	r0, [pc, #400]	; c7e2a3d4 <nand_asm_init+0x3c>

	/* Xm0CSn2 = NFCON CS0, Xm0CSn3 = NFCON CS1 */
	mov	r1, #S3C64XX_MEM_SYS_CFG_NAND
c7e2a240:	e3a01008 	mov	r1, #8	; 0x8
	str	r1, [r0]
c7e2a244:	e5801000 	str	r1, [r0]

	bl	mem_ctrl_asm_init
c7e2a248:	ebff58d5 	bl	c7e005a4 <mem_ctrl_asm_init>
	
/* Wakeup support. Don't know if it's going to be used, untested. */
	ldr	r0, =(ELFIN_CLOCK_POWER_BASE + RST_STAT_OFFSET)
c7e2a24c:	e59f0184 	ldr	r0, [pc, #388]	; c7e2a3d8 <nand_asm_init+0x40>
	ldr	r1, [r0]
c7e2a250:	e5901000 	ldr	r1, [r0]
	bic	r1, r1, #0xfffffff7
c7e2a254:	e2011008 	and	r1, r1, #8	; 0x8
	cmp	r1, #0x8
c7e2a258:	e3510008 	cmp	r1, #8	; 0x8
	beq	wakeup_reset
c7e2a25c:	0a000001 	beq	c7e2a268 <wakeup_reset>

1:
	mov	lr, r12
c7e2a260:	e1a0e00c 	mov	lr, ip
	mov	pc, lr
c7e2a264:	e1a0f00e 	mov	pc, lr

c7e2a268 <wakeup_reset>:

wakeup_reset:

	/* Clear wakeup status register */
	ldr	r0, =(ELFIN_CLOCK_POWER_BASE + WAKEUP_STAT_OFFSET)
c7e2a268:	e59f016c 	ldr	r0, [pc, #364]	; c7e2a3dc <nand_asm_init+0x44>
	ldr	r1, [r0]
c7e2a26c:	e5901000 	ldr	r1, [r0]
	str	r1, [r0]
c7e2a270:	e5801000 	str	r1, [r0]

	/* LED test */
	ldr	r0, =ELFIN_GPIO_BASE
c7e2a274:	e59f0140 	ldr	r0, [pc, #320]	; c7e2a3bc <nand_asm_init+0x24>
	ldr	r1, =0x000c
c7e2a278:	e3a0100c 	mov	r1, #12	; 0xc
	str	r1, [r0, #GPMDAT_OFFSET]
c7e2a27c:	e5801824 	str	r1, [r0, #2084]

	/* Load return address and jump to kernel */
	ldr	r0, =(ELFIN_CLOCK_POWER_BASE + INF_REG0_OFFSET)
c7e2a280:	e59f0158 	ldr	r0, [pc, #344]	; c7e2a3e0 <nand_asm_init+0x48>
	/* r1 = physical address of s3c6410_cpu_resume function */
	ldr	r1, [r0]
c7e2a284:	e5901000 	ldr	r1, [r0]
	/* Jump to kernel (sleep-s3c6410.S) */
	mov	pc, r1
c7e2a288:	e1a0f001 	mov	pc, r1
	nop
c7e2a28c:	e1a00000 	nop			(mov r0,r0)
	nop
c7e2a290:	e1a00000 	nop			(mov r0,r0)

c7e2a294 <system_clock_init>:
/*
 * system_clock_init: Initialize core clock and bus clock.
 * void system_clock_init(void)
 */
system_clock_init:
	ldr	r0, =ELFIN_CLOCK_POWER_BASE	/* 0x7e00f000 */
c7e2a294:	e59f0148 	ldr	r0, [pc, #328]	; c7e2a3e4 <nand_asm_init+0x4c>
	ldr	r2, =0xf00
	and	r1, r1, r2
	cmp	r1, #0xf00
	bne	check_syncack
#else	/* ASYNC Mode */
	nop
c7e2a298:	e1a00000 	nop			(mov r0,r0)
	nop
c7e2a29c:	e1a00000 	nop			(mov r0,r0)
	nop
c7e2a2a0:	e1a00000 	nop			(mov r0,r0)
	nop
c7e2a2a4:	e1a00000 	nop			(mov r0,r0)
	nop
c7e2a2a8:	e1a00000 	nop			(mov r0,r0)
	/*
	 * This was unconditional in original Samsung sources, but it doesn't
	 * seem to make much sense on S3C6410.
	 */
#ifndef CONFIG_S3C6400
	ldr	r1, [r0, #OTHERS_OFFSET]
c7e2a2ac:	e5901900 	ldr	r1, [r0, #2304]
	bic	r1, r1, #0xC0
c7e2a2b0:	e3c110c0 	bic	r1, r1, #192	; 0xc0
	orr	r1, r1, #0x40
c7e2a2b4:	e3811040 	orr	r1, r1, #64	; 0x40
	str	r1, [r0, #OTHERS_OFFSET]
c7e2a2b8:	e5801900 	str	r1, [r0, #2304]

c7e2a2bc <wait_for_async>:

wait_for_async:
	ldr	r1, [r0, #OTHERS_OFFSET]
c7e2a2bc:	e5901900 	ldr	r1, [r0, #2304]
	and	r1, r1, #0xf00
c7e2a2c0:	e2011c0f 	and	r1, r1, #3840	; 0xf00
	cmp	r1, #0x0
c7e2a2c4:	e3510000 	cmp	r1, #0	; 0x0
	bne	wait_for_async
c7e2a2c8:	1afffffb 	bne	c7e2a2bc <wait_for_async>
#endif

	ldr	r1, [r0, #OTHERS_OFFSET]
c7e2a2cc:	e5901900 	ldr	r1, [r0, #2304]
	bic	r1, r1, #0x40
c7e2a2d0:	e3c11040 	bic	r1, r1, #64	; 0x40
	str	r1, [r0, #OTHERS_OFFSET]
c7e2a2d4:	e5801900 	str	r1, [r0, #2304]
#endif

	mov	r1, #0xff00
c7e2a2d8:	e3a01cff 	mov	r1, #65280	; 0xff00
	orr	r1, r1, #0xff
c7e2a2dc:	e38110ff 	orr	r1, r1, #255	; 0xff
	str	r1, [r0, #APLL_LOCK_OFFSET]
c7e2a2e0:	e5801000 	str	r1, [r0]
	str	r1, [r0, #MPLL_LOCK_OFFSET]
c7e2a2e4:	e5801004 	str	r1, [r0, #4]

	/* Set Clock Divider */
	ldr	r1, [r0, #CLK_DIV0_OFFSET]
c7e2a2e8:	e5901020 	ldr	r1, [r0, #32]
	bic	r1, r1, #0x30000
c7e2a2ec:	e3c11803 	bic	r1, r1, #196608	; 0x30000
	bic	r1, r1, #0xff00
c7e2a2f0:	e3c11cff 	bic	r1, r1, #65280	; 0xff00
	bic	r1, r1, #0xff
c7e2a2f4:	e3c110ff 	bic	r1, r1, #255	; 0xff
	ldr	r2, =CLK_DIV_VAL
c7e2a2f8:	e59f20e8 	ldr	r2, [pc, #232]	; c7e2a3e8 <nand_asm_init+0x50>
	orr	r1, r1, r2
c7e2a2fc:	e1811002 	orr	r1, r1, r2
	str	r1, [r0, #CLK_DIV0_OFFSET]
c7e2a300:	e5801020 	str	r1, [r0, #32]

	ldr	r1, =APLL_VAL
c7e2a304:	e59f10e0 	ldr	r1, [pc, #224]	; c7e2a3ec <nand_asm_init+0x54>
	str	r1, [r0, #APLL_CON_OFFSET]
c7e2a308:	e580100c 	str	r1, [r0, #12]
	ldr	r1, =MPLL_VAL
c7e2a30c:	e59f10dc 	ldr	r1, [pc, #220]	; c7e2a3f0 <nand_asm_init+0x58>
	str	r1, [r0, #MPLL_CON_OFFSET]
c7e2a310:	e5801010 	str	r1, [r0, #16]

	/* FOUT of EPLL is 96MHz */
	ldr	r1, =0x80200203
c7e2a314:	e59f10d8 	ldr	r1, [pc, #216]	; c7e2a3f4 <nand_asm_init+0x5c>
	str	r1, [r0, #EPLL_CON0_OFFSET]
c7e2a318:	e5801014 	str	r1, [r0, #20]
	ldr	r1, =0x0
c7e2a31c:	e3a01000 	mov	r1, #0	; 0x0
	str	r1, [r0, #EPLL_CON1_OFFSET]
c7e2a320:	e5801018 	str	r1, [r0, #24]

	/* APLL, MPLL, EPLL select to Fout */
	ldr	r1, [r0, #CLK_SRC_OFFSET]
c7e2a324:	e590101c 	ldr	r1, [r0, #28]
	orr	r1, r1, #0x7
c7e2a328:	e3811007 	orr	r1, r1, #7	; 0x7
	str	r1, [r0, #CLK_SRC_OFFSET]
c7e2a32c:	e580101c 	str	r1, [r0, #28]

	/* wait at least 200us to stablize all clock */
	mov	r1, #0x10000
c7e2a330:	e3a01801 	mov	r1, #65536	; 0x10000
1:	subs	r1, r1, #1
c7e2a334:	e2511001 	subs	r1, r1, #1	; 0x1
	bne	1b
c7e2a338:	1afffffd 	bne	c7e2a334 <wait_for_async+0x78>
	ldr	r1, [r0, #OTHERS_OFFSET]
	orr	r1, r1, #0x20
	str	r1, [r0, #OTHERS_OFFSET]
#elif !defined(CONFIG_S3C6400)
	/* According to 661558um_S3C6400X_rev10.pdf 0x20 is reserved */
	ldr	r1, [r0, #OTHERS_OFFSET]
c7e2a33c:	e5901900 	ldr	r1, [r0, #2304]
	bic	r1, r1, #0x20
c7e2a340:	e3c11020 	bic	r1, r1, #32	; 0x20
	str	r1, [r0, #OTHERS_OFFSET]
c7e2a344:	e5801900 	str	r1, [r0, #2304]
#endif
	mov	pc, lr
c7e2a348:	e1a0f00e 	mov	pc, lr

c7e2a34c <uart_asm_init>:
/*
 * uart_asm_init: Initialize UART's pins
 */
uart_asm_init:
	/* set GPIO to enable UART */
	ldr	r0, =ELFIN_GPIO_BASE
c7e2a34c:	e59f0068 	ldr	r0, [pc, #104]	; c7e2a3bc <nand_asm_init+0x24>
	ldr	r1, =0x220022
c7e2a350:	e59f10a0 	ldr	r1, [pc, #160]	; c7e2a3f8 <nand_asm_init+0x60>
	str	r1, [r0, #GPACON_OFFSET]
c7e2a354:	e5801000 	str	r1, [r0]
	

	ldr	r0,=ELFIN_UART_CONSOLE_BASE
c7e2a358:	e59f009c 	ldr	r0, [pc, #156]	; c7e2a3fc <nand_asm_init+0x64>
	ldr	r1,=3
c7e2a35c:	e3a01003 	mov	r1, #3	; 0x3
	str	r1,[r0,#ULCON_OFFSET]
c7e2a360:	e5801000 	str	r1, [r0]
	ldr	r1,=5
c7e2a364:	e3a01005 	mov	r1, #5	; 0x5
	str	r1,[r0,#UCON_OFFSET]
c7e2a368:	e5801004 	str	r1, [r0, #4]
	ldr	r1,=0xff
c7e2a36c:	e3a010ff 	mov	r1, #255	; 0xff
	str	r1,[r0,#UFCON_OFFSET]
c7e2a370:	e5801008 	str	r1, [r0, #8]
	ldr	r1,=0
c7e2a374:	e3a01000 	mov	r1, #0	; 0x0
	str	r1,[r0,#UMCON_OFFSET]
c7e2a378:	e580100c 	str	r1, [r0, #12]
	
	ldr	r1,=35
c7e2a37c:	e3a01023 	mov	r1, #35	; 0x23
	str	r1,[r0,#UBRDIV_OFFSET]
c7e2a380:	e5801028 	str	r1, [r0, #40]
	ldr	r1,=0x0808
c7e2a384:	e59f1074 	ldr	r1, [pc, #116]	; c7e2a400 <nand_asm_init+0x68>
	str	r1,[r0,#UDIVSLOT_OFFSET]
c7e2a388:	e580102c 	str	r1, [r0, #44]

ldr	r1,='k'
c7e2a38c:	e3a0106b 	mov	r1, #107	; 0x6b
	str	r1,[r0,#UTXH_OFFSET]
c7e2a390:	e5801020 	str	r1, [r0, #32]


	mov	pc, lr
c7e2a394:	e1a0f00e 	mov	pc, lr

c7e2a398 <nand_asm_init>:
#ifdef CONFIG_BOOT_NAND
/*
 * NAND Interface init for SMDK6410
 */
nand_asm_init:
	ldr	r0, =ELFIN_NAND_BASE
c7e2a398:	e59f0064 	ldr	r0, [pc, #100]	; c7e2a404 <nand_asm_init+0x6c>
	ldr	r1, [r0, #NFCONF_OFFSET]
c7e2a39c:	e5901000 	ldr	r1, [r0]
	orr	r1, r1, #0x70
c7e2a3a0:	e3811070 	orr	r1, r1, #112	; 0x70
	orr	r1, r1, #0x7700
c7e2a3a4:	e3811c77 	orr	r1, r1, #30464	; 0x7700
	str	r1, [r0, #NFCONF_OFFSET]
c7e2a3a8:	e5801000 	str	r1, [r0]

	ldr	r1, [r0, #NFCONT_OFFSET]
c7e2a3ac:	e5901004 	ldr	r1, [r0, #4]
	orr	r1, r1, #0x07
c7e2a3b0:	e3811007 	orr	r1, r1, #7	; 0x7
	str	r1, [r0, #NFCONT_OFFSET]
c7e2a3b4:	e5801004 	str	r1, [r0, #4]

	mov	pc, lr
c7e2a3b8:	e1a0f00e 	mov	pc, lr
c7e2a3bc:	7f008000 	.word	0x7f008000
c7e2a3c0:	00001111 	.word	0x00001111
c7e2a3c4:	00005555 	.word	0x00005555
c7e2a3c8:	7f008924 	.word	0x7f008924
c7e2a3cc:	71200000 	.word	0x71200000
c7e2a3d0:	71300000 	.word	0x71300000
c7e2a3d4:	7e00f120 	.word	0x7e00f120
c7e2a3d8:	7e00f904 	.word	0x7e00f904
c7e2a3dc:	7e00f908 	.word	0x7e00f908
c7e2a3e0:	7e00fa00 	.word	0x7e00fa00
c7e2a3e4:	7e00f000 	.word	0x7e00f000
c7e2a3e8:	00003310 	.word	0x00003310
c7e2a3ec:	829b0601 	.word	0x829b0601
c7e2a3f0:	82150601 	.word	0x82150601
c7e2a3f4:	80200203 	.word	0x80200203
c7e2a3f8:	00220022 	.word	0x00220022
c7e2a3fc:	7f005000 	.word	0x7f005000
c7e2a400:	00000808 	.word	0x00000808
c7e2a404:	70200000 	.word	0x70200000

c7e2a408 <board_init>:
	/* NOR-flash in SROM0 */

	/* Enable WAIT */
//	SROM_BW_REG |= 4 | 8 | 1;

	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;
c7e2a408:	e5981000 	ldr	r1, [r8]
c7e2a40c:	e59f3028 	ldr	r3, [pc, #40]	; c7e2a43c <board_init+0x34>

	NFCONF_REG |= 0x7770;
c7e2a410:	e59f2028 	ldr	r2, [pc, #40]	; c7e2a440 <board_init+0x38>
	/* NOR-flash in SROM0 */

	/* Enable WAIT */
//	SROM_BW_REG |= 4 | 8 | 1;

	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;
c7e2a414:	e5813008 	str	r3, [r1, #8]

	NFCONF_REG |= 0x7770;
c7e2a418:	e5923000 	ldr	r3, [r2]
	NFCONT_REG |= 0x07;

	return 0;
}
c7e2a41c:	e3a00000 	mov	r0, #0	; 0x0
	/* Enable WAIT */
//	SROM_BW_REG |= 4 | 8 | 1;

	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;

	NFCONF_REG |= 0x7770;
c7e2a420:	e3833c77 	orr	r3, r3, #30464	; 0x7700
c7e2a424:	e3833070 	orr	r3, r3, #112	; 0x70
c7e2a428:	e5823000 	str	r3, [r2]
	NFCONT_REG |= 0x07;
c7e2a42c:	e5923004 	ldr	r3, [r2, #4]
c7e2a430:	e3833007 	orr	r3, r3, #7	; 0x7
c7e2a434:	e5823004 	str	r3, [r2, #4]

	return 0;
}
c7e2a438:	e12fff1e 	bx	lr
c7e2a43c:	50000100 	.word	0x50000100
c7e2a440:	70200000 	.word	0x70200000

c7e2a444 <dram_init_banksize>:

void dram_init_banksize(void)
{
	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
c7e2a444:	e5982000 	ldr	r2, [r8]
c7e2a448:	e3a03205 	mov	r3, #1342177280	; 0x50000000
	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;
c7e2a44c:	e5981000 	ldr	r1, [r8]
	return 0;
}

void dram_init_banksize(void)
{
	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
c7e2a450:	e5823018 	str	r3, [r2, #24]
	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;
c7e2a454:	e2833103 	add	r3, r3, #-1073741824	; 0xc0000000
c7e2a458:	e581301c 	str	r3, [r1, #28]
}
c7e2a45c:	e12fff1e 	bx	lr

c7e2a460 <board_mmc_init>:
int s3c_sdhci_init(u32 regbase, int index, int bus_width);

static inline unsigned int s3c_mmc_init(int index, int bus_width)
{
	unsigned int base = ELFIN_HSMMC_BASE + (0x10000 * index);
	return s3c_sdhci_init(base, index, bus_width);
c7e2a460:	e59f0008 	ldr	r0, [pc, #8]	; c7e2a470 <board_mmc_init+0x10>
c7e2a464:	e3a01000 	mov	r1, #0	; 0x0
c7e2a468:	e3a02004 	mov	r2, #4	; 0x4
c7e2a46c:	eaffa17c 	b	c7e12a64 <s3c_sdhci_init>
c7e2a470:	7c200000 	.word	0x7c200000

c7e2a474 <board_eth_init>:
	int rc = 0;
#ifdef CONFIG_CS8900
	rc = cs8900_initialize(0, CONFIG_CS8900_BASE);
#endif
#ifdef CONFIG_DRIVER_DM9000
	rc = dm9000_initialize(0);
c7e2a474:	e3a00000 	mov	r0, #0	; 0x0
c7e2a478:	eaffbe8d 	b	c7e19eb4 <dm9000_initialize>

c7e2a47c <virt_to_phy_smdk6410>:
#endif

#ifdef CONFIG_ENABLE_MMU
ulong virt_to_phy_smdk6410(ulong addr)
{
	if ((0xc0000000 <= addr) && (addr < 0xc8000000))
c7e2a47c:	e2803101 	add	r3, r0, #1073741824	; 0x40000000
c7e2a480:	e373037e 	cmn	r3, #-134217727	; 0xf8000001
}
#endif

#ifdef CONFIG_ENABLE_MMU
ulong virt_to_phy_smdk6410(ulong addr)
{
c7e2a484:	e92d4010 	push	{r4, lr}
c7e2a488:	e1a04000 	mov	r4, r0
	if ((0xc0000000 <= addr) && (addr < 0xc8000000))
		return addr - 0xc0000000 + 0x50000000;
c7e2a48c:	92804209 	addls	r4, r0, #-1879048192	; 0x90000000
#endif

#ifdef CONFIG_ENABLE_MMU
ulong virt_to_phy_smdk6410(ulong addr)
{
	if ((0xc0000000 <= addr) && (addr < 0xc8000000))
c7e2a490:	9a000002 	bls	c7e2a4a0 <virt_to_phy_smdk6410+0x24>
		return addr - 0xc0000000 + 0x50000000;
	else
		printf("do not support this address : %08lx\n", addr);
c7e2a494:	e59f000c 	ldr	r0, [pc, #12]	; c7e2a4a8 <virt_to_phy_smdk6410+0x2c>
c7e2a498:	e1a01004 	mov	r1, r4
c7e2a49c:	ebff796d 	bl	c7e08a58 <printf>

	return addr;
}
c7e2a4a0:	e1a00004 	mov	r0, r4
c7e2a4a4:	e8bd8010 	pop	{r4, pc}
c7e2a4a8:	c7e3514a 	.word	0xc7e3514a

c7e2a4ac <checkboard>:
	return 0;
}

#ifdef CONFIG_DISPLAY_BOARDINFO
int checkboard(void)
{
c7e2a4ac:	e92d4010 	push	{r4, lr}
	printf("Board:   SMDK6410\n");
c7e2a4b0:	e59f0008 	ldr	r0, [pc, #8]	; c7e2a4c0 <checkboard+0x14>
c7e2a4b4:	ebff7967 	bl	c7e08a58 <printf>
	return 0;
}
c7e2a4b8:	e3a00000 	mov	r0, #0	; 0x0
c7e2a4bc:	e8bd8010 	pop	{r4, pc}
c7e2a4c0:	c7e3516f 	.word	0xc7e3516f

c7e2a4c4 <dram_init>:
	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;
}

int dram_init(void)
{
c7e2a4c4:	e92d4010 	push	{r4, lr}
	gd->ram_size = get_ram_size((long *)CONFIG_SYS_SDRAM_BASE,
c7e2a4c8:	e3a01201 	mov	r1, #268435456	; 0x10000000
c7e2a4cc:	e3a00205 	mov	r0, #1342177280	; 0x50000000
c7e2a4d0:	e1a04008 	mov	r4, r8
c7e2a4d4:	ebff9048 	bl	c7e0e5fc <get_ram_size>
c7e2a4d8:	e5840038 	str	r0, [r4, #56]
				PHYS_SDRAM_1_SIZE);

	return 0;
}
c7e2a4dc:	e3a00000 	mov	r0, #0	; 0x0
c7e2a4e0:	e8bd8010 	pop	{r4, pc}

c7e2a4e4 <__aeabi_unwind_cpp_pr0>:
}

/* Dummy function to avoid linker complaints */
void __aeabi_unwind_cpp_pr0(void)
{
};
c7e2a4e4:	e12fff1e 	bx	lr

c7e2a4e8 <__aeabi_unwind_cpp_pr1>:

void __aeabi_unwind_cpp_pr1(void)
{
};
c7e2a4e8:	e12fff1e 	bx	lr

c7e2a4ec <raise>:
 */

#include <common.h>

int raise (int signum)
{
c7e2a4ec:	e1a01000 	mov	r1, r0
c7e2a4f0:	e92d4010 	push	{r4, lr}
	/* Even if printf() is available, it's large. Punt it for SPL builds */
#if !defined(CONFIG_SPL_BUILD)
	printf("raise: Signal # %d caught\n", signum);
c7e2a4f4:	e59f0008 	ldr	r0, [pc, #8]	; c7e2a504 <raise+0x18>
c7e2a4f8:	ebff7956 	bl	c7e08a58 <printf>
#endif
	return 0;
}
c7e2a4fc:	e3a00000 	mov	r0, #0	; 0x0
c7e2a500:	e8bd8010 	pop	{r4, pc}
c7e2a504:	c7e35182 	.word	0xc7e35182

c7e2a508 <__udivsi3>:
c7e2a508:	e2512001 	subs	r2, r1, #1	; 0x1
c7e2a50c:	012fff1e 	bxeq	lr
c7e2a510:	3a000036 	bcc	c7e2a5f0 <__udivsi3+0xe8>
c7e2a514:	e1500001 	cmp	r0, r1
c7e2a518:	9a000022 	bls	c7e2a5a8 <__udivsi3+0xa0>
c7e2a51c:	e1110002 	tst	r1, r2
c7e2a520:	0a000023 	beq	c7e2a5b4 <__udivsi3+0xac>
c7e2a524:	e311020e 	tst	r1, #-536870912	; 0xe0000000
c7e2a528:	01a01181 	lsleq	r1, r1, #3
c7e2a52c:	03a03008 	moveq	r3, #8	; 0x8
c7e2a530:	13a03001 	movne	r3, #1	; 0x1
c7e2a534:	e3510201 	cmp	r1, #268435456	; 0x10000000
c7e2a538:	31510000 	cmpcc	r1, r0
c7e2a53c:	31a01201 	lslcc	r1, r1, #4
c7e2a540:	31a03203 	lslcc	r3, r3, #4
c7e2a544:	3afffffa 	bcc	c7e2a534 <__udivsi3+0x2c>
c7e2a548:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
c7e2a54c:	31510000 	cmpcc	r1, r0
c7e2a550:	31a01081 	lslcc	r1, r1, #1
c7e2a554:	31a03083 	lslcc	r3, r3, #1
c7e2a558:	3afffffa 	bcc	c7e2a548 <__udivsi3+0x40>
c7e2a55c:	e3a02000 	mov	r2, #0	; 0x0
c7e2a560:	e1500001 	cmp	r0, r1
c7e2a564:	20400001 	subcs	r0, r0, r1
c7e2a568:	21822003 	orrcs	r2, r2, r3
c7e2a56c:	e15000a1 	cmp	r0, r1, lsr #1
c7e2a570:	204000a1 	subcs	r0, r0, r1, lsr #1
c7e2a574:	218220a3 	orrcs	r2, r2, r3, lsr #1
c7e2a578:	e1500121 	cmp	r0, r1, lsr #2
c7e2a57c:	20400121 	subcs	r0, r0, r1, lsr #2
c7e2a580:	21822123 	orrcs	r2, r2, r3, lsr #2
c7e2a584:	e15001a1 	cmp	r0, r1, lsr #3
c7e2a588:	204001a1 	subcs	r0, r0, r1, lsr #3
c7e2a58c:	218221a3 	orrcs	r2, r2, r3, lsr #3
c7e2a590:	e3500000 	cmp	r0, #0	; 0x0
c7e2a594:	11b03223 	lsrsne	r3, r3, #4
c7e2a598:	11a01221 	lsrne	r1, r1, #4
c7e2a59c:	1affffef 	bne	c7e2a560 <__udivsi3+0x58>
c7e2a5a0:	e1a00002 	mov	r0, r2
c7e2a5a4:	e12fff1e 	bx	lr
c7e2a5a8:	03a00001 	moveq	r0, #1	; 0x1
c7e2a5ac:	13a00000 	movne	r0, #0	; 0x0
c7e2a5b0:	e12fff1e 	bx	lr
c7e2a5b4:	e3510801 	cmp	r1, #65536	; 0x10000
c7e2a5b8:	21a01821 	lsrcs	r1, r1, #16
c7e2a5bc:	23a02010 	movcs	r2, #16	; 0x10
c7e2a5c0:	33a02000 	movcc	r2, #0	; 0x0
c7e2a5c4:	e3510c01 	cmp	r1, #256	; 0x100
c7e2a5c8:	21a01421 	lsrcs	r1, r1, #8
c7e2a5cc:	22822008 	addcs	r2, r2, #8	; 0x8
c7e2a5d0:	e3510010 	cmp	r1, #16	; 0x10
c7e2a5d4:	21a01221 	lsrcs	r1, r1, #4
c7e2a5d8:	22822004 	addcs	r2, r2, #4	; 0x4
c7e2a5dc:	e3510004 	cmp	r1, #4	; 0x4
c7e2a5e0:	82822003 	addhi	r2, r2, #3	; 0x3
c7e2a5e4:	908220a1 	addls	r2, r2, r1, lsr #1
c7e2a5e8:	e1a00230 	lsr	r0, r0, r2
c7e2a5ec:	e12fff1e 	bx	lr
c7e2a5f0:	e3500000 	cmp	r0, #0	; 0x0
c7e2a5f4:	13e00000 	mvnne	r0, #0	; 0x0
c7e2a5f8:	ea00006e 	b	c7e2a7b8 <__aeabi_ldiv0>

c7e2a5fc <__aeabi_uidivmod>:
c7e2a5fc:	e3510000 	cmp	r1, #0	; 0x0
c7e2a600:	0afffffa 	beq	c7e2a5f0 <__udivsi3+0xe8>
c7e2a604:	e92d4003 	push	{r0, r1, lr}
c7e2a608:	ebffffbe 	bl	c7e2a508 <__udivsi3>
c7e2a60c:	e8bd4006 	pop	{r1, r2, lr}
c7e2a610:	e0030092 	mul	r3, r2, r0
c7e2a614:	e0411003 	sub	r1, r1, r3
c7e2a618:	e12fff1e 	bx	lr

c7e2a61c <__divsi3>:
c7e2a61c:	e3510000 	cmp	r1, #0	; 0x0
c7e2a620:	0a000043 	beq	c7e2a734 <.divsi3_nodiv0+0x110>

c7e2a624 <.divsi3_nodiv0>:
c7e2a624:	e020c001 	eor	ip, r0, r1
c7e2a628:	42611000 	rsbmi	r1, r1, #0	; 0x0
c7e2a62c:	e2512001 	subs	r2, r1, #1	; 0x1
c7e2a630:	0a000027 	beq	c7e2a6d4 <.divsi3_nodiv0+0xb0>
c7e2a634:	e1b03000 	movs	r3, r0
c7e2a638:	42603000 	rsbmi	r3, r0, #0	; 0x0
c7e2a63c:	e1530001 	cmp	r3, r1
c7e2a640:	9a000026 	bls	c7e2a6e0 <.divsi3_nodiv0+0xbc>
c7e2a644:	e1110002 	tst	r1, r2
c7e2a648:	0a000028 	beq	c7e2a6f0 <.divsi3_nodiv0+0xcc>
c7e2a64c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
c7e2a650:	01a01181 	lsleq	r1, r1, #3
c7e2a654:	03a02008 	moveq	r2, #8	; 0x8
c7e2a658:	13a02001 	movne	r2, #1	; 0x1
c7e2a65c:	e3510201 	cmp	r1, #268435456	; 0x10000000
c7e2a660:	31510003 	cmpcc	r1, r3
c7e2a664:	31a01201 	lslcc	r1, r1, #4
c7e2a668:	31a02202 	lslcc	r2, r2, #4
c7e2a66c:	3afffffa 	bcc	c7e2a65c <.divsi3_nodiv0+0x38>
c7e2a670:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
c7e2a674:	31510003 	cmpcc	r1, r3
c7e2a678:	31a01081 	lslcc	r1, r1, #1
c7e2a67c:	31a02082 	lslcc	r2, r2, #1
c7e2a680:	3afffffa 	bcc	c7e2a670 <.divsi3_nodiv0+0x4c>
c7e2a684:	e3a00000 	mov	r0, #0	; 0x0
c7e2a688:	e1530001 	cmp	r3, r1
c7e2a68c:	20433001 	subcs	r3, r3, r1
c7e2a690:	21800002 	orrcs	r0, r0, r2
c7e2a694:	e15300a1 	cmp	r3, r1, lsr #1
c7e2a698:	204330a1 	subcs	r3, r3, r1, lsr #1
c7e2a69c:	218000a2 	orrcs	r0, r0, r2, lsr #1
c7e2a6a0:	e1530121 	cmp	r3, r1, lsr #2
c7e2a6a4:	20433121 	subcs	r3, r3, r1, lsr #2
c7e2a6a8:	21800122 	orrcs	r0, r0, r2, lsr #2
c7e2a6ac:	e15301a1 	cmp	r3, r1, lsr #3
c7e2a6b0:	204331a1 	subcs	r3, r3, r1, lsr #3
c7e2a6b4:	218001a2 	orrcs	r0, r0, r2, lsr #3
c7e2a6b8:	e3530000 	cmp	r3, #0	; 0x0
c7e2a6bc:	11b02222 	lsrsne	r2, r2, #4
c7e2a6c0:	11a01221 	lsrne	r1, r1, #4
c7e2a6c4:	1affffef 	bne	c7e2a688 <.divsi3_nodiv0+0x64>
c7e2a6c8:	e35c0000 	cmp	ip, #0	; 0x0
c7e2a6cc:	42600000 	rsbmi	r0, r0, #0	; 0x0
c7e2a6d0:	e12fff1e 	bx	lr
c7e2a6d4:	e13c0000 	teq	ip, r0
c7e2a6d8:	42600000 	rsbmi	r0, r0, #0	; 0x0
c7e2a6dc:	e12fff1e 	bx	lr
c7e2a6e0:	33a00000 	movcc	r0, #0	; 0x0
c7e2a6e4:	01a00fcc 	asreq	r0, ip, #31
c7e2a6e8:	03800001 	orreq	r0, r0, #1	; 0x1
c7e2a6ec:	e12fff1e 	bx	lr
c7e2a6f0:	e3510801 	cmp	r1, #65536	; 0x10000
c7e2a6f4:	21a01821 	lsrcs	r1, r1, #16
c7e2a6f8:	23a02010 	movcs	r2, #16	; 0x10
c7e2a6fc:	33a02000 	movcc	r2, #0	; 0x0
c7e2a700:	e3510c01 	cmp	r1, #256	; 0x100
c7e2a704:	21a01421 	lsrcs	r1, r1, #8
c7e2a708:	22822008 	addcs	r2, r2, #8	; 0x8
c7e2a70c:	e3510010 	cmp	r1, #16	; 0x10
c7e2a710:	21a01221 	lsrcs	r1, r1, #4
c7e2a714:	22822004 	addcs	r2, r2, #4	; 0x4
c7e2a718:	e3510004 	cmp	r1, #4	; 0x4
c7e2a71c:	82822003 	addhi	r2, r2, #3	; 0x3
c7e2a720:	908220a1 	addls	r2, r2, r1, lsr #1
c7e2a724:	e35c0000 	cmp	ip, #0	; 0x0
c7e2a728:	e1a00233 	lsr	r0, r3, r2
c7e2a72c:	42600000 	rsbmi	r0, r0, #0	; 0x0
c7e2a730:	e12fff1e 	bx	lr
c7e2a734:	e3500000 	cmp	r0, #0	; 0x0
c7e2a738:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
c7e2a73c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
c7e2a740:	ea00001c 	b	c7e2a7b8 <__aeabi_ldiv0>

c7e2a744 <__aeabi_idivmod>:
c7e2a744:	e3510000 	cmp	r1, #0	; 0x0
c7e2a748:	0afffff9 	beq	c7e2a734 <.divsi3_nodiv0+0x110>
c7e2a74c:	e92d4003 	push	{r0, r1, lr}
c7e2a750:	ebffffb3 	bl	c7e2a624 <.divsi3_nodiv0>
c7e2a754:	e8bd4006 	pop	{r1, r2, lr}
c7e2a758:	e0030092 	mul	r3, r2, r0
c7e2a75c:	e0411003 	sub	r1, r1, r3
c7e2a760:	e12fff1e 	bx	lr

c7e2a764 <__lshrdi3>:
c7e2a764:	e2523020 	subs	r3, r2, #32	; 0x20
c7e2a768:	e262c020 	rsb	ip, r2, #32	; 0x20
c7e2a76c:	41a00230 	lsrmi	r0, r0, r2
c7e2a770:	51a00331 	lsrpl	r0, r1, r3
c7e2a774:	41800c11 	orrmi	r0, r0, r1, lsl ip
c7e2a778:	e1a01231 	lsr	r1, r1, r2
c7e2a77c:	e12fff1e 	bx	lr

c7e2a780 <__ashrdi3>:
c7e2a780:	e2523020 	subs	r3, r2, #32	; 0x20
c7e2a784:	e262c020 	rsb	ip, r2, #32	; 0x20
c7e2a788:	41a00230 	lsrmi	r0, r0, r2
c7e2a78c:	51a00351 	asrpl	r0, r1, r3
c7e2a790:	41800c11 	orrmi	r0, r0, r1, lsl ip
c7e2a794:	e1a01251 	asr	r1, r1, r2
c7e2a798:	e12fff1e 	bx	lr

c7e2a79c <__ashldi3>:
c7e2a79c:	e2523020 	subs	r3, r2, #32	; 0x20
c7e2a7a0:	e262c020 	rsb	ip, r2, #32	; 0x20
c7e2a7a4:	41a01211 	lslmi	r1, r1, r2
c7e2a7a8:	51a01310 	lslpl	r1, r0, r3
c7e2a7ac:	41811c30 	orrmi	r1, r1, r0, lsr ip
c7e2a7b0:	e1a00210 	lsl	r0, r0, r2
c7e2a7b4:	e12fff1e 	bx	lr

c7e2a7b8 <__aeabi_ldiv0>:
c7e2a7b8:	e92d4002 	push	{r1, lr}
c7e2a7bc:	e3a00008 	mov	r0, #8	; 0x8
c7e2a7c0:	ebffff49 	bl	c7e2a4ec <raise>
c7e2a7c4:	e8bd4002 	pop	{r1, lr}
c7e2a7c8:	e12fff1e 	bx	lr
